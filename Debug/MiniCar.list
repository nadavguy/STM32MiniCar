
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007188  08007188  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007190  08007190  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007190  08007190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b14  20000078  0800720c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  0800720c  00020b8c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bcf6  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bd9  00000000  00000000  0003bd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a98  00000000  00000000  0003e978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001930  00000000  00000000  00040410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000043ba  00000000  00000000  00041d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000115e5  00000000  00000000  000460fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b9f4  00000000  00000000  000576df  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001630d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba0  00000000  00000000  00163150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	080070b0 	.word	0x080070b0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	080070b0 	.word	0x080070b0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <led_init>:
 */

#include "main.h"

void led_init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 80005e4:	2104      	movs	r1, #4
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <led_init+0x20>)
 80005e8:	f004 f8ce 	bl	8004788 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 80005ec:	2100      	movs	r1, #0
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <led_init+0x20>)
 80005f0:	f004 f8ca 	bl	8004788 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 80005f4:	210c      	movs	r1, #12
 80005f6:	4802      	ldr	r0, [pc, #8]	; (8000600 <led_init+0x20>)
 80005f8:	f004 f8c6 	bl	8004788 <HAL_TIM_PWM_Start>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000120 	.word	0x20000120

08000604 <SetRGB>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //Blue LED
}

// Input: 0 to 250
void SetRGB(int Red, int Green, int Blue)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	TIM4->CCR2 = Red * 8000 / 250;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	4a14      	ldr	r2, [pc, #80]	; (800066c <SetRGB+0x68>)
 800061c:	fb82 1203 	smull	r1, r2, r2, r3
 8000620:	1112      	asrs	r2, r2, #4
 8000622:	17db      	asrs	r3, r3, #31
 8000624:	1ad2      	subs	r2, r2, r3
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <SetRGB+0x6c>)
 8000628:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = Green * 8000 / 250;
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000630:	fb02 f303 	mul.w	r3, r2, r3
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <SetRGB+0x68>)
 8000636:	fb82 1203 	smull	r1, r2, r2, r3
 800063a:	1112      	asrs	r2, r2, #4
 800063c:	17db      	asrs	r3, r3, #31
 800063e:	1ad2      	subs	r2, r2, r3
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <SetRGB+0x6c>)
 8000642:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR4 = Blue * 8000 / 250;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800064a:	fb02 f303 	mul.w	r3, r2, r3
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <SetRGB+0x68>)
 8000650:	fb82 1203 	smull	r1, r2, r2, r3
 8000654:	1112      	asrs	r2, r2, #4
 8000656:	17db      	asrs	r3, r3, #31
 8000658:	1ad2      	subs	r2, r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SetRGB+0x6c>)
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	10624dd3 	.word	0x10624dd3
 8000670:	40000800 	.word	0x40000800

08000674 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800067c:	23ff      	movs	r3, #255	; 0xff
 800067e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000680:	2300      	movs	r3, #0
 8000682:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000684:	2300      	movs	r3, #0
 8000686:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000688:	2300      	movs	r3, #0
 800068a:	723b      	strb	r3, [r7, #8]
 800068c:	2300      	movs	r3, #0
 800068e:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000690:	4a58      	ldr	r2, [pc, #352]	; (80007f4 <bno055_init+0x180>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000696:	4b57      	ldr	r3, [pc, #348]	; (80007f4 <bno055_init+0x180>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68dc      	ldr	r4, [r3, #12]
 800069c:	4b55      	ldr	r3, [pc, #340]	; (80007f4 <bno055_init+0x180>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	7a58      	ldrb	r0, [r3, #9]
 80006a2:	f107 020d 	add.w	r2, r7, #13
 80006a6:	2301      	movs	r3, #1
 80006a8:	2107      	movs	r1, #7
 80006aa:	47a0      	blx	r4
 80006ac:	4603      	mov	r3, r0
 80006ae:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80006b0:	4b50      	ldr	r3, [pc, #320]	; (80007f4 <bno055_init+0x180>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	691c      	ldr	r4, [r3, #16]
 80006b6:	4b4f      	ldr	r3, [pc, #316]	; (80007f4 <bno055_init+0x180>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	7a58      	ldrb	r0, [r3, #9]
 80006bc:	f107 020e 	add.w	r2, r7, #14
 80006c0:	2301      	movs	r3, #1
 80006c2:	2100      	movs	r1, #0
 80006c4:	47a0      	blx	r4
 80006c6:	4603      	mov	r3, r0
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	4413      	add	r3, r2
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 80006d2:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <bno055_init+0x180>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7bba      	ldrb	r2, [r7, #14]
 80006d8:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80006da:	4b46      	ldr	r3, [pc, #280]	; (80007f4 <bno055_init+0x180>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	691c      	ldr	r4, [r3, #16]
 80006e0:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <bno055_init+0x180>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7a58      	ldrb	r0, [r3, #9]
 80006e6:	f107 020e 	add.w	r2, r7, #14
 80006ea:	2301      	movs	r3, #1
 80006ec:	2101      	movs	r1, #1
 80006ee:	47a0      	blx	r4
 80006f0:	4603      	mov	r3, r0
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	4413      	add	r3, r2
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 80006fc:	4b3d      	ldr	r3, [pc, #244]	; (80007f4 <bno055_init+0x180>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	7bba      	ldrb	r2, [r7, #14]
 8000702:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000704:	4b3b      	ldr	r3, [pc, #236]	; (80007f4 <bno055_init+0x180>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	691c      	ldr	r4, [r3, #16]
 800070a:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <bno055_init+0x180>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	7a58      	ldrb	r0, [r3, #9]
 8000710:	f107 020e 	add.w	r2, r7, #14
 8000714:	2301      	movs	r3, #1
 8000716:	2102      	movs	r1, #2
 8000718:	47a0      	blx	r4
 800071a:	4603      	mov	r3, r0
 800071c:	b2da      	uxtb	r2, r3
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	4413      	add	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000726:	4b33      	ldr	r3, [pc, #204]	; (80007f4 <bno055_init+0x180>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	7bba      	ldrb	r2, [r7, #14]
 800072c:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <bno055_init+0x180>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	691c      	ldr	r4, [r3, #16]
 8000734:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <bno055_init+0x180>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	7a58      	ldrb	r0, [r3, #9]
 800073a:	f107 020e 	add.w	r2, r7, #14
 800073e:	2301      	movs	r3, #1
 8000740:	2103      	movs	r1, #3
 8000742:	47a0      	blx	r4
 8000744:	4603      	mov	r3, r0
 8000746:	b2da      	uxtb	r2, r3
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	4413      	add	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000750:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <bno055_init+0x180>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	7bba      	ldrb	r2, [r7, #14]
 8000756:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <bno055_init+0x180>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	691c      	ldr	r4, [r3, #16]
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <bno055_init+0x180>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7a58      	ldrb	r0, [r3, #9]
 8000764:	f107 020e 	add.w	r2, r7, #14
 8000768:	2301      	movs	r3, #1
 800076a:	2106      	movs	r1, #6
 800076c:	47a0      	blx	r4
 800076e:	4603      	mov	r3, r0
 8000770:	b2da      	uxtb	r2, r3
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4413      	add	r3, r2
 8000776:	b2db      	uxtb	r3, r3
 8000778:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 800077a:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <bno055_init+0x180>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	7bba      	ldrb	r2, [r7, #14]
 8000780:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <bno055_init+0x180>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	691c      	ldr	r4, [r3, #16]
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <bno055_init+0x180>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	7a58      	ldrb	r0, [r3, #9]
 800078e:	f107 0208 	add.w	r2, r7, #8
 8000792:	2302      	movs	r3, #2
 8000794:	2104      	movs	r1, #4
 8000796:	47a0      	blx	r4
 8000798:	4603      	mov	r3, r0
 800079a:	b2da      	uxtb	r2, r3
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	4413      	add	r3, r2
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80007a4:	7a3b      	ldrb	r3, [r7, #8]
 80007a6:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80007a8:	7a7b      	ldrb	r3, [r7, #9]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	021b      	lsls	r3, r3, #8
 80007ae:	b299      	uxth	r1, r3
 80007b0:	7a3b      	ldrb	r3, [r7, #8]
 80007b2:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <bno055_init+0x180>)
 80007b6:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80007b8:	430a      	orrs	r2, r1
 80007ba:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 80007bc:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <bno055_init+0x180>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	691c      	ldr	r4, [r3, #16]
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <bno055_init+0x180>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	7a58      	ldrb	r0, [r3, #9]
 80007ca:	f107 020e 	add.w	r2, r7, #14
 80007ce:	2301      	movs	r3, #1
 80007d0:	2107      	movs	r1, #7
 80007d2:	47a0      	blx	r4
 80007d4:	4603      	mov	r3, r0
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	4413      	add	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <bno055_init+0x180>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7bba      	ldrb	r2, [r7, #14]
 80007e6:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 80007e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	20000094 	.word	0x20000094

080007f8 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000808:	23ff      	movs	r3, #255	; 0xff
 800080a:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <bno055_write_register+0x48>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000814:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000818:	e00d      	b.n	8000836 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <bno055_write_register+0x48>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	68dc      	ldr	r4, [r3, #12]
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <bno055_write_register+0x48>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	7a58      	ldrb	r0, [r3, #9]
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	79f9      	ldrb	r1, [r7, #7]
 800082a:	683a      	ldr	r2, [r7, #0]
 800082c:	47a0      	blx	r4
 800082e:	4603      	mov	r3, r0
 8000830:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bd90      	pop	{r4, r7, pc}
 800083e:	bf00      	nop
 8000840:	20000094 	.word	0x20000094

08000844 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800084e:	23ff      	movs	r3, #255	; 0xff
 8000850:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000852:	2300      	movs	r3, #0
 8000854:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <bno055_write_page_id+0x8c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d102      	bne.n	8000864 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 800085e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000862:	e030      	b.n	80008c6 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <bno055_write_page_id+0x8c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	691c      	ldr	r4, [r3, #16]
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <bno055_write_page_id+0x8c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	7a58      	ldrb	r0, [r3, #9]
 8000870:	f107 020e 	add.w	r2, r7, #14
 8000874:	2301      	movs	r3, #1
 8000876:	2107      	movs	r1, #7
 8000878:	47a0      	blx	r4
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d11b      	bne.n	80008be <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <bno055_write_page_id+0x8c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68dc      	ldr	r4, [r3, #12]
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <bno055_write_page_id+0x8c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	7a58      	ldrb	r0, [r3, #9]
 8000896:	f107 020e 	add.w	r2, r7, #14
 800089a:	2301      	movs	r3, #1
 800089c:	2107      	movs	r1, #7
 800089e:	47a0      	blx	r4
 80008a0:	4603      	mov	r3, r0
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4413      	add	r3, r2
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 80008ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d106      	bne.n	80008c2 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <bno055_write_page_id+0x8c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	79fa      	ldrb	r2, [r7, #7]
 80008ba:	711a      	strb	r2, [r3, #4]
 80008bc:	e001      	b.n	80008c2 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80008be:	23ff      	movs	r3, #255	; 0xff
 80008c0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80008c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000094 	.word	0x20000094

080008d4 <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80008dc:	23ff      	movs	r3, #255	; 0xff
 80008de:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 80008ea:	23ff      	movs	r3, #255	; 0xff
 80008ec:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <bno055_read_euler_hrp+0xd0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <bno055_read_euler_hrp+0x28>
    {
        return BNO055_E_NULL_PTR;
 80008f6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80008fa:	e04e      	b.n	800099a <bno055_read_euler_hrp+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80008fc:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <bno055_read_euler_hrp+0xd0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d004      	beq.n	8000910 <bno055_read_euler_hrp+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ff9c 	bl	8000844 <bno055_write_page_id>
 800090c:	4603      	mov	r3, r0
 800090e:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d004      	beq.n	8000922 <bno055_read_euler_hrp+0x4e>
 8000918:	4b22      	ldr	r3, [pc, #136]	; (80009a4 <bno055_read_euler_hrp+0xd0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d137      	bne.n	8000992 <bno055_read_euler_hrp+0xbe>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <bno055_read_euler_hrp+0xd0>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	691c      	ldr	r4, [r3, #16]
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <bno055_read_euler_hrp+0xd0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	7a58      	ldrb	r0, [r3, #9]
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	2306      	movs	r3, #6
 8000934:	211a      	movs	r1, #26
 8000936:	47a0      	blx	r4
 8000938:	4603      	mov	r3, r0
 800093a:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 800093c:	7a3b      	ldrb	r3, [r7, #8]
 800093e:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 8000940:	7a7b      	ldrb	r3, [r7, #9]
 8000942:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000944:	7a7b      	ldrb	r3, [r7, #9]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 800094c:	7a3b      	ldrb	r3, [r7, #8]
 800094e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000950:	4313      	orrs	r3, r2
 8000952:	b21a      	sxth	r2, r3
            euler->h =
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 8000958:	7abb      	ldrb	r3, [r7, #10]
 800095a:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000960:	7afb      	ldrb	r3, [r7, #11]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	021b      	lsls	r3, r3, #8
 8000966:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 8000968:	7abb      	ldrb	r3, [r7, #10]
 800096a:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800096c:	4313      	orrs	r3, r2
 800096e:	b21a      	sxth	r2, r3
            euler->r =
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 8000974:	7b3b      	ldrb	r3, [r7, #12]
 8000976:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 8000978:	7b7b      	ldrb	r3, [r7, #13]
 800097a:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	b25b      	sxtb	r3, r3
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 8000984:	7b3b      	ldrb	r3, [r7, #12]
 8000986:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000988:	4313      	orrs	r3, r2
 800098a:	b21a      	sxth	r2, r3
            euler->p =
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	809a      	strh	r2, [r3, #4]
 8000990:	e001      	b.n	8000996 <bno055_read_euler_hrp+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000992:	23ff      	movs	r3, #255	; 0xff
 8000994:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000094 	.word	0x20000094

080009a8 <bno055_convert_double_euler_hpr_deg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_euler_hpr_deg(struct bno055_euler_double_t *euler_hpr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80009b0:	23ff      	movs	r3, #255	; 0xff
 80009b2:	75fb      	strb	r3, [r7, #23]
    struct bno055_euler_t reg_euler = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80009b4:	2300      	movs	r3, #0
 80009b6:	823b      	strh	r3, [r7, #16]
 80009b8:	2300      	movs	r3, #0
 80009ba:	827b      	strh	r3, [r7, #18]
 80009bc:	2300      	movs	r3, #0
 80009be:	82bb      	strh	r3, [r7, #20]
    u8 euler_unit_u8 = BNO055_INIT_VALUE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]

    /* Read the current Euler unit and set the
     * unit as degree if the unit is in radians */
    com_rslt = bno055_get_euler_unit(&euler_unit_u8);
 80009c4:	f107 030f 	add.w	r3, r7, #15
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f855 	bl	8000a78 <bno055_get_euler_unit>
 80009ce:	4603      	mov	r3, r0
 80009d0:	75fb      	strb	r3, [r7, #23]
    if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d008      	beq.n	80009ea <bno055_convert_double_euler_hpr_deg+0x42>
    {
        com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 f891 	bl	8000b00 <bno055_set_euler_unit>
 80009de:	4603      	mov	r3, r0
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	4413      	add	r3, r2
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 80009ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d139      	bne.n	8000a66 <bno055_convert_double_euler_hpr_deg+0xbe>
    {
        /* Read Euler raw h data*/
        com_rslt += bno055_read_euler_hrp(&reg_euler);
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ff6c 	bl	80008d4 <bno055_read_euler_hrp>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	4413      	add	r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8000a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d127      	bne.n	8000a60 <bno055_convert_double_euler_hpr_deg+0xb8>
        {
            /* Convert raw Euler hrp to degree*/
            euler_hpr->h = (double)(reg_euler.h / BNO055_EULER_DIV_DEG);
 8000a10:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a14:	ee07 3a90 	vmov	s15, r3
 8000a18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a1c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000a20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	ed83 7b00 	vstr	d7, [r3]
            euler_hpr->p = (double)(reg_euler.p / BNO055_EULER_DIV_DEG);
 8000a2a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000a2e:	ee07 3a90 	vmov	s15, r3
 8000a32:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a36:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000a3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	ed83 7b04 	vstr	d7, [r3, #16]
            euler_hpr->r = (double)(reg_euler.r / BNO055_EULER_DIV_DEG);
 8000a44:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a48:	ee07 3a90 	vmov	s15, r3
 8000a4c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a50:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000a54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	ed83 7b02 	vstr	d7, [r3, #8]
 8000a5e:	e004      	b.n	8000a6a <bno055_convert_double_euler_hpr_deg+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000a60:	23ff      	movs	r3, #255	; 0xff
 8000a62:	75fb      	strb	r3, [r7, #23]
 8000a64:	e001      	b.n	8000a6a <bno055_convert_double_euler_hpr_deg+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8000a66:	23ff      	movs	r3, #255	; 0xff
 8000a68:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8000a6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <bno055_get_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_euler_unit(u8 *euler_unit_u8)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a80:	23ff      	movs	r3, #255	; 0xff
 8000a82:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000a88:	23ff      	movs	r3, #255	; 0xff
 8000a8a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <bno055_get_euler_unit+0x84>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <bno055_get_euler_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000a94:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000a98:	e02c      	b.n	8000af4 <bno055_get_euler_unit+0x7c>
    }
    else
    {
        /*condition check for page, Euler unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <bno055_get_euler_unit+0x84>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	791b      	ldrb	r3, [r3, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d004      	beq.n	8000aae <bno055_get_euler_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fecd 	bl	8000844 <bno055_write_page_id>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <bno055_get_euler_unit+0x48>
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <bno055_get_euler_unit+0x84>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d115      	bne.n	8000aec <bno055_get_euler_unit+0x74>
        {
            /* Read the Euler unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <bno055_get_euler_unit+0x84>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	691c      	ldr	r4, [r3, #16]
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <bno055_get_euler_unit+0x84>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	7a58      	ldrb	r0, [r3, #9]
 8000acc:	f107 020d 	add.w	r2, r7, #13
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	213b      	movs	r1, #59	; 0x3b
 8000ad4:	47a0      	blx	r4
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *euler_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_EULER_UNIT);
 8000ada:	7b7b      	ldrb	r3, [r7, #13]
 8000adc:	109b      	asrs	r3, r3, #2
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	e001      	b.n	8000af0 <bno055_get_euler_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000aec:	23ff      	movs	r3, #255	; 0xff
 8000aee:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	20000094 	.word	0x20000094

08000b00 <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b0a:	23ff      	movs	r3, #255	; 0xff
 8000b0c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000b12:	2300      	movs	r3, #0
 8000b14:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000b16:	23ff      	movs	r3, #255	; 0xff
 8000b18:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <bno055_set_euler_unit+0xf4>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d102      	bne.n	8000b28 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000b22:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000b26:	e060      	b.n	8000bea <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f863 	bl	8000bf8 <bno055_get_operation_mode>
 8000b32:	4603      	mov	r3, r0
 8000b34:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d144      	bne.n	8000bc8 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000b3e:	7b3b      	ldrb	r3, [r7, #12]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d008      	beq.n	8000b56 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f899 	bl	8000c7c <bno055_set_operation_mode>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	7bbb      	ldrb	r3, [r7, #14]
 8000b50:	4413      	add	r3, r2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d131      	bne.n	8000bc2 <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <bno055_set_euler_unit+0xf4>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	691c      	ldr	r4, [r3, #16]
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <bno055_set_euler_unit+0xf4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	7a58      	ldrb	r0, [r3, #9]
 8000b6a:	f107 020d 	add.w	r2, r7, #13
 8000b6e:	2301      	movs	r3, #1
 8000b70:	213b      	movs	r1, #59	; 0x3b
 8000b72:	47a0      	blx	r4
 8000b74:	4603      	mov	r3, r0
 8000b76:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d125      	bne.n	8000bcc <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 8000b80:	7b7b      	ldrb	r3, [r7, #13]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	f023 0304 	bic.w	r3, r3, #4
 8000b88:	b25a      	sxtb	r2, r3
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <bno055_set_euler_unit+0xf4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68dc      	ldr	r4, [r3, #12]
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <bno055_set_euler_unit+0xf4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	7a58      	ldrb	r0, [r3, #9]
 8000baa:	f107 020d 	add.w	r2, r7, #13
 8000bae:	2301      	movs	r3, #1
 8000bb0:	213b      	movs	r1, #59	; 0x3b
 8000bb2:	47a0      	blx	r4
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e004      	b.n	8000bcc <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000bc2:	23ff      	movs	r3, #255	; 0xff
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	e001      	b.n	8000bcc <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000bc8:	23ff      	movs	r3, #255	; 0xff
 8000bca:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d009      	beq.n	8000be6 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000bd2:	7b3b      	ldrb	r3, [r7, #12]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f851 	bl	8000c7c <bno055_set_operation_mode>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	4413      	add	r3, r2
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000094 	.word	0x20000094

08000bf8 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c00:	23ff      	movs	r3, #255	; 0xff
 8000c02:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000c08:	23ff      	movs	r3, #255	; 0xff
 8000c0a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c0c:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <bno055_get_operation_mode+0x80>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000c14:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000c18:	e02a      	b.n	8000c70 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <bno055_get_operation_mode+0x80>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d004      	beq.n	8000c2e <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff fe0d 	bl	8000844 <bno055_write_page_id>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000c2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d004      	beq.n	8000c40 <bno055_get_operation_mode+0x48>
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <bno055_get_operation_mode+0x80>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d113      	bne.n	8000c68 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <bno055_get_operation_mode+0x80>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	691c      	ldr	r4, [r3, #16]
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <bno055_get_operation_mode+0x80>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	7a58      	ldrb	r0, [r3, #9]
 8000c4c:	f107 020d 	add.w	r2, r7, #13
 8000c50:	2301      	movs	r3, #1
 8000c52:	213d      	movs	r1, #61	; 0x3d
 8000c54:	47a0      	blx	r4
 8000c56:	4603      	mov	r3, r0
 8000c58:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000c5a:	7b7b      	ldrb	r3, [r7, #13]
 8000c5c:	f003 030f 	and.w	r3, r3, #15
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e001      	b.n	8000c6c <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000c68:	23ff      	movs	r3, #255	; 0xff
 8000c6a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	20000094 	.word	0x20000094

08000c7c <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c86:	23ff      	movs	r3, #255	; 0xff
 8000c88:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000c92:	23ff      	movs	r3, #255	; 0xff
 8000c94:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000c96:	4b5c      	ldr	r3, [pc, #368]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000c9e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ca2:	e0ac      	b.n	8000dfe <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ffa5 	bl	8000bf8 <bno055_get_operation_mode>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 809d 	bne.w	8000df6 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d137      	bne.n	8000d32 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000cc2:	4b51      	ldr	r3, [pc, #324]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	691c      	ldr	r4, [r3, #16]
 8000cc8:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	7a58      	ldrb	r0, [r3, #9]
 8000cce:	f107 020d 	add.w	r2, r7, #13
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	213d      	movs	r1, #61	; 0x3d
 8000cd6:	47a0      	blx	r4
 8000cd8:	4603      	mov	r3, r0
 8000cda:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f040 808a 	bne.w	8000dfa <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000ce6:	7b7b      	ldrb	r3, [r7, #13]
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	f023 030f 	bic.w	r3, r3, #15
 8000cee:	b25a      	sxtb	r2, r3
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68dc      	ldr	r4, [r3, #12]
 8000d08:	4b3f      	ldr	r3, [pc, #252]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	7a58      	ldrb	r0, [r3, #9]
 8000d0e:	f107 020d 	add.w	r2, r7, #13
 8000d12:	2301      	movs	r3, #1
 8000d14:	213d      	movs	r1, #61	; 0x3d
 8000d16:	47a0      	blx	r4
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	4413      	add	r3, r2
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000d24:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000d2e:	4798      	blx	r3
 8000d30:	e063      	b.n	8000dfa <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d32:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	691c      	ldr	r4, [r3, #16]
 8000d38:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	7a58      	ldrb	r0, [r3, #9]
 8000d3e:	f107 020d 	add.w	r2, r7, #13
 8000d42:	2301      	movs	r3, #1
 8000d44:	213d      	movs	r1, #61	; 0x3d
 8000d46:	47a0      	blx	r4
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d116      	bne.n	8000d82 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000d54:	7b7b      	ldrb	r3, [r7, #13]
 8000d56:	f023 030f 	bic.w	r3, r3, #15
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000d5e:	f107 030d 	add.w	r3, r7, #13
 8000d62:	2201      	movs	r2, #1
 8000d64:	4619      	mov	r1, r3
 8000d66:	203d      	movs	r0, #61	; 0x3d
 8000d68:	f7ff fd46 	bl	80007f8 <bno055_write_register>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	4413      	add	r3, r2
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	2014      	movs	r0, #20
 8000d80:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d038      	beq.n	8000dfa <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	691c      	ldr	r4, [r3, #16]
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	7a58      	ldrb	r0, [r3, #9]
 8000d94:	f107 020d 	add.w	r2, r7, #13
 8000d98:	2301      	movs	r3, #1
 8000d9a:	213d      	movs	r1, #61	; 0x3d
 8000d9c:	47a0      	blx	r4
 8000d9e:	4603      	mov	r3, r0
 8000da0:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d127      	bne.n	8000dfa <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000daa:	7b7b      	ldrb	r3, [r7, #13]
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	f023 030f 	bic.w	r3, r3, #15
 8000db2:	b25a      	sxtb	r2, r3
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	f003 030f 	and.w	r3, r3, #15
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000dc6:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68dc      	ldr	r4, [r3, #12]
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	7a58      	ldrb	r0, [r3, #9]
 8000dd2:	f107 020d 	add.w	r2, r7, #13
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	213d      	movs	r1, #61	; 0x3d
 8000dda:	47a0      	blx	r4
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	4413      	add	r3, r2
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <bno055_set_operation_mode+0x18c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000df2:	4798      	blx	r3
 8000df4:	e001      	b.n	8000dfa <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000df6:	23ff      	movs	r3, #255	; 0xff
 8000df8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000094 	.word	0x20000094

08000e0c <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e16:	23ff      	movs	r3, #255	; 0xff
 8000e18:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000e22:	23ff      	movs	r3, #255	; 0xff
 8000e24:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <bno055_set_power_mode+0xf0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000e2e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000e32:	e05f      	b.n	8000ef4 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fedd 	bl	8000bf8 <bno055_get_operation_mode>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000e42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d143      	bne.n	8000ed2 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000e4a:	7b3b      	ldrb	r3, [r7, #12]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d008      	beq.n	8000e62 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff ff13 	bl	8000c7c <bno055_set_operation_mode>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	7bbb      	ldrb	r3, [r7, #14]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d130      	bne.n	8000ecc <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <bno055_set_power_mode+0xf0>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	691c      	ldr	r4, [r3, #16]
 8000e70:	4b22      	ldr	r3, [pc, #136]	; (8000efc <bno055_set_power_mode+0xf0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	7a58      	ldrb	r0, [r3, #9]
 8000e76:	f107 020d 	add.w	r2, r7, #13
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	213e      	movs	r1, #62	; 0x3e
 8000e7e:	47a0      	blx	r4
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d124      	bne.n	8000ed6 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8000e8c:	7b7b      	ldrb	r3, [r7, #13]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f023 0303 	bic.w	r3, r3, #3
 8000e94:	b25a      	sxtb	r2, r3
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <bno055_set_power_mode+0xf0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68dc      	ldr	r4, [r3, #12]
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <bno055_set_power_mode+0xf0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	7a58      	ldrb	r0, [r3, #9]
 8000eb4:	f107 020d 	add.w	r2, r7, #13
 8000eb8:	2301      	movs	r3, #1
 8000eba:	213e      	movs	r1, #62	; 0x3e
 8000ebc:	47a0      	blx	r4
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e004      	b.n	8000ed6 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000ecc:	23ff      	movs	r3, #255	; 0xff
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e001      	b.n	8000ed6 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000ed2:	23ff      	movs	r3, #255	; 0xff
 8000ed4:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000ed6:	7b3b      	ldrb	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d009      	beq.n	8000ef0 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000edc:	7b3b      	ldrb	r3, [r7, #12]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fecc 	bl	8000c7c <bno055_set_operation_mode>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}
 8000efc:	20000094 	.word	0x20000094

08000f00 <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <I2C_routine+0x28>)
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <I2C_routine+0x2c>)
 8000f08:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <I2C_routine+0x28>)
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <I2C_routine+0x30>)
 8000f0e:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <I2C_routine+0x28>)
 8000f12:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <I2C_routine+0x34>)
 8000f14:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <I2C_routine+0x28>)
 8000f18:	2229      	movs	r2, #41	; 0x29
 8000f1a:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	200000a8 	.word	0x200000a8
 8000f2c:	08000f39 	.word	0x08000f39
 8000f30:	08000fb1 	.word	0x08000fb1
 8000f34:	08001041 	.word	0x08001041

08000f38 <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	603a      	str	r2, [r7, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	460b      	mov	r3, r1
 8000f48:	71bb      	strb	r3, [r7, #6]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	75fb      	strb	r3, [r7, #23]
 8000f5e:	e00d      	b.n	8000f7c <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	441a      	add	r2, r3
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	f107 0118 	add.w	r1, r7, #24
 8000f70:	440b      	add	r3, r1
 8000f72:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8000f76:	7dfb      	ldrb	r3, [r7, #23]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	75fb      	strb	r3, [r7, #23]
 8000f7c:	7dfa      	ldrb	r2, [r7, #23]
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d3ed      	bcc.n	8000f60 <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 8000f84:	797b      	ldrb	r3, [r7, #5]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	230a      	movs	r3, #10
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	460b      	mov	r3, r1
 8000f96:	2152      	movs	r1, #82	; 0x52
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <BNO055_I2C_bus_write+0x74>)
 8000f9a:	f001 fe1b 	bl	8002bd4 <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	b25b      	sxtb	r3, r3
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000160 	.word	0x20000160

08000fb0 <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	603a      	str	r2, [r7, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	71bb      	strb	r3, [r7, #6]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	75fb      	strb	r3, [r7, #23]
 8000fe0:	e00c      	b.n	8000ffc <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 8000fe2:	7dfa      	ldrb	r2, [r7, #23]
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	6839      	ldr	r1, [r7, #0]
 8000fe8:	440b      	add	r3, r1
 8000fea:	f107 0118 	add.w	r1, r7, #24
 8000fee:	440a      	add	r2, r1
 8000ff0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000ff4:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	75fb      	strb	r3, [r7, #23]
 8000ffc:	7dfa      	ldrb	r2, [r7, #23]
 8000ffe:	797b      	ldrb	r3, [r7, #5]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3ee      	bcc.n	8000fe2 <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 8001004:	797b      	ldrb	r3, [r7, #5]
 8001006:	b299      	uxth	r1, r3
 8001008:	f107 0208 	add.w	r2, r7, #8
 800100c:	230a      	movs	r3, #10
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	460b      	mov	r3, r1
 8001012:	2152      	movs	r1, #82	; 0x52
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <BNO055_I2C_bus_read+0x8c>)
 8001016:	f001 fddd 	bl	8002bd4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 800101a:	797b      	ldrb	r3, [r7, #5]
 800101c:	b29a      	uxth	r2, r3
 800101e:	230a      	movs	r3, #10
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4613      	mov	r3, r2
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	2152      	movs	r1, #82	; 0x52
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <BNO055_I2C_bus_read+0x8c>)
 800102a:	f001 fec7 	bl	8002dbc <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	b25b      	sxtb	r3, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000160 	.word	0x20000160

08001040 <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 febd 	bl	8001dc8 <HAL_Delay>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <BNOInit>:

void BNOInit()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	I2C_routine();
 800105c:	f7ff ff50 	bl	8000f00 <I2C_routine>
	comres = bno055_init(&bno055);
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <BNOInit+0x4c>)
 8001062:	f7ff fb07 	bl	8000674 <bno055_init>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <BNOInit+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <BNOInit+0x54>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <BNOInit+0x54>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fec7 	bl	8000e0c <bno055_set_power_mode>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <BNOInit+0x50>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <BNOInit+0x50>)
 800108a:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 800108c:	200c      	movs	r0, #12
 800108e:	f7ff fdf5 	bl	8000c7c <bno055_set_operation_mode>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <BNOInit+0x50>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a02      	ldr	r2, [pc, #8]	; (80010a8 <BNOInit+0x50>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200000a8 	.word	0x200000a8
 80010a8:	20000000 	.word	0x20000000
 80010ac:	20000098 	.word	0x20000098

080010b0 <readBNOAnglesDeg>:

void readBNOAnglesDeg()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
//	comres += bno055_convert_double_euler_h_deg(&d_euler_data_h);
//	comres += bno055_convert_double_euler_r_deg(&d_euler_data_r);
//	comres += bno055_convert_double_euler_p_deg(&d_euler_data_p);
	comres += bno055_convert_double_euler_hpr_deg(&d_euler_hpr);
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <readBNOAnglesDeg+0x1c>)
 80010b6:	f7ff fc77 	bl	80009a8 <bno055_convert_double_euler_hpr_deg>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <readBNOAnglesDeg+0x20>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a02      	ldr	r2, [pc, #8]	; (80010d0 <readBNOAnglesDeg+0x20>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000b68 	.word	0x20000b68
 80010d0:	20000000 	.word	0x20000000

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f000 fe19 	bl	8001d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f856 	bl	800118c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 fa9c 	bl	800161c <MX_GPIO_Init>
  MX_DMA_Init();
 80010e4:	f000 fa6c 	bl	80015c0 <MX_DMA_Init>
  MX_TIM4_Init();
 80010e8:	f000 f9c8 	bl	800147c <MX_TIM4_Init>
  MX_TIM1_Init();
 80010ec:	f000 f928 	bl	8001340 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80010f0:	f000 fa36 	bl	8001560 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010f4:	f000 f8e4 	bl	80012c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1);
 80010f8:	481c      	ldr	r0, [pc, #112]	; (800116c <main+0x98>)
 80010fa:	f003 fb19 	bl	8004730 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim4);
 80010fe:	481c      	ldr	r0, [pc, #112]	; (8001170 <main+0x9c>)
 8001100:	f003 fb16 	bl	8004730 <HAL_TIM_PWM_Init>
  HAL_I2C_Init(&hi2c1);
 8001104:	481b      	ldr	r0, [pc, #108]	; (8001174 <main+0xa0>)
 8001106:	f001 fcd5 	bl	8002ab4 <HAL_I2C_Init>


  BNOInit();
 800110a:	f7ff ffa5 	bl	8001058 <BNOInit>
//
  readBNOAnglesDeg();
 800110e:	f7ff ffcf 	bl	80010b0 <readBNOAnglesDeg>
  //Read Data from terminal - Example
  HAL_UART_Receive_DMA(&huart2, USBRXArray, 1024);
 8001112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001116:	4918      	ldr	r1, [pc, #96]	; (8001178 <main+0xa4>)
 8001118:	4818      	ldr	r0, [pc, #96]	; (800117c <main+0xa8>)
 800111a:	f004 f98b 	bl	8005434 <HAL_UART_Receive_DMA>
  printf(USBTXArray,"Hello");
 800111e:	4918      	ldr	r1, [pc, #96]	; (8001180 <main+0xac>)
 8001120:	4818      	ldr	r0, [pc, #96]	; (8001184 <main+0xb0>)
 8001122:	f005 f8e1 	bl	80062e8 <iprintf>
  //Write Data to terminal - Example
  ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);
 8001126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112a:	4916      	ldr	r1, [pc, #88]	; (8001184 <main+0xb0>)
 800112c:	4813      	ldr	r0, [pc, #76]	; (800117c <main+0xa8>)
 800112e:	f004 f905 	bl	800533c <HAL_UART_Transmit_DMA>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <main+0xb4>)
 8001138:	701a      	strb	r2, [r3, #0]


  led_init();
 800113a:	f7ff fa51 	bl	80005e0 <led_init>
  SetRGB(250, 0, 0); // Red
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	20fa      	movs	r0, #250	; 0xfa
 8001144:	f7ff fa5e 	bl	8000604 <SetRGB>
  SetRGB(0, 250, 0); // Green
 8001148:	2200      	movs	r2, #0
 800114a:	21fa      	movs	r1, #250	; 0xfa
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fa59 	bl	8000604 <SetRGB>
  SetRGB(0, 0, 250); // Blue
 8001152:	22fa      	movs	r2, #250	; 0xfa
 8001154:	2100      	movs	r1, #0
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fa54 	bl	8000604 <SetRGB>
  SetRGB(250, 250, 0);// Yellow
 800115c:	2200      	movs	r2, #0
 800115e:	21fa      	movs	r1, #250	; 0xfa
 8001160:	20fa      	movs	r0, #250	; 0xfa
 8001162:	f7ff fa4f 	bl	8000604 <SetRGB>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readBNOAnglesDeg();
 8001166:	f7ff ffa3 	bl	80010b0 <readBNOAnglesDeg>
 800116a:	e7fc      	b.n	8001166 <main+0x92>
 800116c:	20000a48 	.word	0x20000a48
 8001170:	20000120 	.word	0x20000120
 8001174:	20000160 	.word	0x20000160
 8001178:	200001ac 	.word	0x200001ac
 800117c:	20000ae8 	.word	0x20000ae8
 8001180:	080070c8 	.word	0x080070c8
 8001184:	200005c8 	.word	0x200005c8
 8001188:	20000b80 	.word	0x20000b80

0800118c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0b8      	sub	sp, #224	; 0xe0
 8001190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001192:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001196:	2234      	movs	r2, #52	; 0x34
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f005 f89c 	bl	80062d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	2290      	movs	r2, #144	; 0x90
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 f88d 	bl	80062d8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80011be:	f002 f985 	bl	80034cc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <SystemClock_Config+0x12c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a3c      	ldr	r2, [pc, #240]	; (80012b8 <SystemClock_Config+0x12c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b3a      	ldr	r3, [pc, #232]	; (80012b8 <SystemClock_Config+0x12c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <SystemClock_Config+0x130>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a37      	ldr	r2, [pc, #220]	; (80012bc <SystemClock_Config+0x130>)
 80011e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <SystemClock_Config+0x130>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001206:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800120a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800120e:	2319      	movs	r3, #25
 8001210:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001214:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800122c:	4618      	mov	r0, r3
 800122e:	f002 f9ad 	bl	800358c <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001238:	f000 fa38 	bl	80016ac <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800123c:	f002 f956 	bl	80034ec <HAL_PWREx_EnableOverDrive>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001246:	f000 fa31 	bl	80016ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800125c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800126c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001270:	2107      	movs	r1, #7
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fc38 	bl	8003ae8 <HAL_RCC_ClockConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800127e:	f000 fa15 	bl	80016ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART2
 8001282:	f244 0390 	movw	r3, #16528	; 0x4090
 8001286:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001288:	2300      	movs	r3, #0
 800128a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800128c:	2300      	movs	r3, #0
 800128e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001294:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fe22 	bl	8003ee4 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x11e>
  {
    Error_Handler();
 80012a6:	f000 fa01 	bl	80016ac <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80012aa:	f002 fd09 	bl	8003cc0 <HAL_RCC_EnableCSS>
}
 80012ae:	bf00      	nop
 80012b0:	37e0      	adds	r7, #224	; 0xe0
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_I2C1_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <MX_I2C1_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_I2C1_Init+0x74>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <MX_I2C1_Init+0x7c>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_I2C1_Init+0x74>)
 80012d2:	2252      	movs	r2, #82	; 0x52
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_I2C1_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <MX_I2C1_Init+0x74>)
 80012fc:	f001 fbda 	bl	8002ab4 <HAL_I2C_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001306:	f000 f9d1 	bl	80016ac <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <MX_I2C1_Init+0x74>)
 800130e:	f002 f845 	bl	800339c <HAL_I2CEx_ConfigAnalogFilter>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001318:	f000 f9c8 	bl	80016ac <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_I2C1_Init+0x74>)
 8001320:	f002 f887 	bl	8003432 <HAL_I2CEx_ConfigDigitalFilter>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 f9bf 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000160 	.word	0x20000160
 8001338:	40005400 	.word	0x40005400
 800133c:	6000030d 	.word	0x6000030d

08001340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b096      	sub	sp, #88	; 0x58
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001346:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]
 8001362:	615a      	str	r2, [r3, #20]
 8001364:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	222c      	movs	r2, #44	; 0x2c
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f004 ffb3 	bl	80062d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001372:	4b40      	ldr	r3, [pc, #256]	; (8001474 <MX_TIM1_Init+0x134>)
 8001374:	4a40      	ldr	r2, [pc, #256]	; (8001478 <MX_TIM1_Init+0x138>)
 8001376:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 8001378:	4b3e      	ldr	r3, [pc, #248]	; (8001474 <MX_TIM1_Init+0x134>)
 800137a:	f240 221b 	movw	r2, #539	; 0x21b
 800137e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MX_TIM1_Init+0x134>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <MX_TIM1_Init+0x134>)
 8001388:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800138c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <MX_TIM1_Init+0x134>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <MX_TIM1_Init+0x134>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MX_TIM1_Init+0x134>)
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013a0:	4834      	ldr	r0, [pc, #208]	; (8001474 <MX_TIM1_Init+0x134>)
 80013a2:	f003 f9c5 	bl	8004730 <HAL_TIM_PWM_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80013ac:	f000 f97e 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013b0:	2320      	movs	r3, #32
 80013b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80013b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013b8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013c2:	4619      	mov	r1, r3
 80013c4:	482b      	ldr	r0, [pc, #172]	; (8001474 <MX_TIM1_Init+0x134>)
 80013c6:	f003 fe5f 	bl	8005088 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013d0:	f000 f96c 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d4:	2360      	movs	r3, #96	; 0x60
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 400;
 80013d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80013dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ea:	2300      	movs	r3, #0
 80013ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	481e      	ldr	r0, [pc, #120]	; (8001474 <MX_TIM1_Init+0x134>)
 80013fc:	f003 fa08 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001406:	f000 f951 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800140a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140e:	2208      	movs	r2, #8
 8001410:	4619      	mov	r1, r3
 8001412:	4818      	ldr	r0, [pc, #96]	; (8001474 <MX_TIM1_Init+0x134>)
 8001414:	f003 f9fc 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800141e:	f000 f945 	bl	80016ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001444:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM1_Init+0x134>)
 8001458:	f003 fea4 	bl	80051a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001462:	f000 f923 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM1_Init+0x134>)
 8001468:	f000 f9fe 	bl	8001868 <HAL_TIM_MspPostInit>

}
 800146c:	bf00      	nop
 800146e:	3758      	adds	r7, #88	; 0x58
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000a48 	.word	0x20000a48
 8001478:	40010000 	.word	0x40010000

0800147c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014a2:	4a2e      	ldr	r2, [pc, #184]	; (800155c <MX_TIM4_Init+0xe0>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 80014a6:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014a8:	f240 221b 	movw	r2, #539	; 0x21b
 80014ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b26      	ldr	r3, [pc, #152]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c8:	4823      	ldr	r0, [pc, #140]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014ca:	f003 f931 	bl	8004730 <HAL_TIM_PWM_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80014d4:	f000 f8ea 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	481c      	ldr	r0, [pc, #112]	; (8001558 <MX_TIM4_Init+0xdc>)
 80014e8:	f003 fdce 	bl	8005088 <HAL_TIMEx_MasterConfigSynchronization>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80014f2:	f000 f8db 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f6:	2360      	movs	r3, #96	; 0x60
 80014f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	4619      	mov	r1, r3
 800150c:	4812      	ldr	r0, [pc, #72]	; (8001558 <MX_TIM4_Init+0xdc>)
 800150e:	f003 f97f 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001518:	f000 f8c8 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	2204      	movs	r2, #4
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	; (8001558 <MX_TIM4_Init+0xdc>)
 8001524:	f003 f974 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800152e:	f000 f8bd 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	220c      	movs	r2, #12
 8001536:	4619      	mov	r1, r3
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <MX_TIM4_Init+0xdc>)
 800153a:	f003 f969 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8001544:	f000 f8b2 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001548:	4803      	ldr	r0, [pc, #12]	; (8001558 <MX_TIM4_Init+0xdc>)
 800154a:	f000 f98d 	bl	8001868 <HAL_TIM_MspPostInit>

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000120 	.word	0x20000120
 800155c:	40000800 	.word	0x40000800

08001560 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <MX_USART2_UART_Init+0x5c>)
 8001568:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 800156c:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001570:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001586:	220c      	movs	r2, #12
 8001588:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART2_UART_Init+0x58>)
 80015a4:	f003 fe7c 	bl	80052a0 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 f87d 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000ae8 	.word	0x20000ae8
 80015bc:	40004400 	.word	0x40004400

080015c0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_DMA_Init+0x58>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a13      	ldr	r2, [pc, #76]	; (8001618 <MX_DMA_Init+0x58>)
 80015cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_DMA_Init+0x58>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	200b      	movs	r0, #11
 80015e4:	f000 fced 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015e8:	200b      	movs	r0, #11
 80015ea:	f000 fd06 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	2010      	movs	r0, #16
 80015f4:	f000 fce5 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015f8:	2010      	movs	r0, #16
 80015fa:	f000 fcfe 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	2011      	movs	r0, #17
 8001604:	f000 fcdd 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001608:	2011      	movs	r0, #17
 800160a:	f000 fcf6 	bl	8001ffa <HAL_NVIC_EnableIRQ>

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a20      	ldr	r2, [pc, #128]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_GPIO_Init+0x8c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_GPIO_Init+0x8c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a08      	ldr	r2, [pc, #32]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_GPIO_Init+0x8c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]

}
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
	...

080016bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <HAL_MspInit+0x44>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <HAL_MspInit+0x44>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_MspInit+0x44>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x44>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x44>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x44>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a32      	ldr	r2, [pc, #200]	; (80017ec <HAL_I2C_MspInit+0xe8>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d15d      	bne.n	80017e2 <HAL_I2C_MspInit+0xde>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_I2C_MspInit+0xec>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a31      	ldr	r2, [pc, #196]	; (80017f0 <HAL_I2C_MspInit+0xec>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <HAL_I2C_MspInit+0xec>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800173e:	23c0      	movs	r3, #192	; 0xc0
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001742:	2312      	movs	r3, #18
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001746:	2301      	movs	r3, #1
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800174e:	2304      	movs	r3, #4
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4826      	ldr	r0, [pc, #152]	; (80017f4 <HAL_I2C_MspInit+0xf0>)
 800175a:	f001 f801 	bl	8002760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_I2C_MspInit+0xec>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_I2C_MspInit+0xec>)
 8001764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_I2C_MspInit+0xec>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <HAL_I2C_MspInit+0xf8>)
 800177a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 800177e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001782:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001784:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 8001792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001796:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800179e:	4b16      	ldr	r3, [pc, #88]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 80017b8:	f000 fc3a 	bl	8002030 <HAL_DMA_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_MspInit+0xc2>
    {
      Error_Handler();
 80017c2:	f7ff ff73 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80017cc:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_I2C_MspInit+0xf4>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201f      	movs	r0, #31
 80017d8:	f000 fbf3 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017dc:	201f      	movs	r0, #31
 80017de:	f000 fc0c 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40005400 	.word	0x40005400
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400
 80017f8:	20000a88 	.word	0x20000a88
 80017fc:	40026010 	.word	0x40026010

08001800 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_TIM_PWM_MspInit+0x5c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d10c      	bne.n	800182c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001812:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_TIM_PWM_MspInit+0x60>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_TIM_PWM_MspInit+0x60>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_TIM_PWM_MspInit+0x60>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800182a:	e010      	b.n	800184e <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <HAL_TIM_PWM_MspInit+0x64>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10b      	bne.n	800184e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001836:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_TIM_PWM_MspInit+0x60>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a09      	ldr	r2, [pc, #36]	; (8001860 <HAL_TIM_PWM_MspInit+0x60>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <HAL_TIM_PWM_MspInit+0x60>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40010000 	.word	0x40010000
 8001860:	40023800 	.word	0x40023800
 8001864:	40000800 	.word	0x40000800

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a23      	ldr	r2, [pc, #140]	; (8001914 <HAL_TIM_MspPostInit+0xac>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d11d      	bne.n	80018c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a22      	ldr	r2, [pc, #136]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	613b      	str	r3, [r7, #16]
 80018a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 80018a2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018b4:	2301      	movs	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <HAL_TIM_MspPostInit+0xb4>)
 80018c0:	f000 ff4e 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018c4:	e021      	b.n	800190a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_TIM_MspPostInit+0xb8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d11c      	bne.n	800190a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6313      	str	r3, [r2, #48]	; 0x30
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_TIM_MspPostInit+0xb0>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 80018e8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018fa:	2302      	movs	r3, #2
 80018fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <HAL_TIM_MspPostInit+0xbc>)
 8001906:	f000 ff2b 	bl	8002760 <HAL_GPIO_Init>
}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40010000 	.word	0x40010000
 8001918:	40023800 	.word	0x40023800
 800191c:	40020000 	.word	0x40020000
 8001920:	40000800 	.word	0x40000800
 8001924:	40020c00 	.word	0x40020c00

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <HAL_UART_MspInit+0x158>)
 8001946:	4293      	cmp	r3, r2
 8001948:	f040 8095 	bne.w	8001a76 <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194c:	4b4d      	ldr	r3, [pc, #308]	; (8001a84 <HAL_UART_MspInit+0x15c>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a4c      	ldr	r2, [pc, #304]	; (8001a84 <HAL_UART_MspInit+0x15c>)
 8001952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b4a      	ldr	r3, [pc, #296]	; (8001a84 <HAL_UART_MspInit+0x15c>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_UART_MspInit+0x15c>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	4a46      	ldr	r2, [pc, #280]	; (8001a84 <HAL_UART_MspInit+0x15c>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6313      	str	r3, [r2, #48]	; 0x30
 8001970:	4b44      	ldr	r3, [pc, #272]	; (8001a84 <HAL_UART_MspInit+0x15c>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 800197c:	230c      	movs	r3, #12
 800197e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198c:	2307      	movs	r3, #7
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4619      	mov	r1, r3
 8001996:	483c      	ldr	r0, [pc, #240]	; (8001a88 <HAL_UART_MspInit+0x160>)
 8001998:	f000 fee2 	bl	8002760 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800199c:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_UART_MspInit+0x164>)
 800199e:	4a3c      	ldr	r2, [pc, #240]	; (8001a90 <HAL_UART_MspInit+0x168>)
 80019a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80019a2:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b0:	4b36      	ldr	r3, [pc, #216]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b6:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c4:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019ca:	4b30      	ldr	r3, [pc, #192]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d6:	4b2d      	ldr	r3, [pc, #180]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019dc:	482b      	ldr	r0, [pc, #172]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019de:	f000 fb27 	bl	8002030 <HAL_DMA_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80019e8:	f7ff fe60 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a27      	ldr	r2, [pc, #156]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80019f2:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <HAL_UART_MspInit+0x164>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 80019fa:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <HAL_UART_MspInit+0x170>)
 80019fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a04:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a08:	2240      	movs	r2, #64	; 0x40
 8001a0a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a18:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a34:	2204      	movs	r2, #4
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a4a:	4812      	ldr	r0, [pc, #72]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a4c:	f000 faf0 	bl	8002030 <HAL_DMA_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8001a56:	f7ff fe29 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a5e:	669a      	str	r2, [r3, #104]	; 0x68
 8001a60:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <HAL_UART_MspInit+0x16c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2026      	movs	r0, #38	; 0x26
 8001a6c:	f000 faa9 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a70:	2026      	movs	r0, #38	; 0x26
 8001a72:	f000 fac2 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40004400 	.word	0x40004400
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	200000c0 	.word	0x200000c0
 8001a90:	40026088 	.word	0x40026088
 8001a94:	200009d0 	.word	0x200009d0
 8001a98:	400260a0 	.word	0x400260a0

08001a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001aa0:	f002 fa04 	bl	8003eac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <HardFault_Handler+0x4>

08001aae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab2:	e7fe      	b.n	8001ab2 <MemManage_Handler+0x4>

08001ab4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <BusFault_Handler+0x4>

08001aba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <UsageFault_Handler+0x4>

08001ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aee:	f000 f94b 	bl	8001d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <DMA1_Stream0_IRQHandler+0x10>)
 8001afe:	f000 fbc7 	bl	8002290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000a88 	.word	0x20000a88

08001b0c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <DMA1_Stream5_IRQHandler+0x10>)
 8001b12:	f000 fbbd 	bl	8002290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200000c0 	.word	0x200000c0

08001b20 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <DMA1_Stream6_IRQHandler+0x10>)
 8001b26:	f000 fbb3 	bl	8002290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200009d0 	.word	0x200009d0

08001b34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <I2C1_EV_IRQHandler+0x10>)
 8001b3a:	f001 fa35 	bl	8002fa8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000160 	.word	0x20000160

08001b48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <USART2_IRQHandler+0x10>)
 8001b4e:	f003 fcf5 	bl	800553c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000ae8 	.word	0x20000ae8

08001b5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e00a      	b.n	8001b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b6e:	f3af 8000 	nop.w
 8001b72:	4601      	mov	r1, r0
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	60ba      	str	r2, [r7, #8]
 8001b7a:	b2ca      	uxtb	r2, r1
 8001b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf0      	blt.n	8001b6e <_read+0x12>
	}

return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b086      	sub	sp, #24
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	60f8      	str	r0, [r7, #12]
 8001b9e:	60b9      	str	r1, [r7, #8]
 8001ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e009      	b.n	8001bbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	60ba      	str	r2, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf1      	blt.n	8001ba8 <_write+0x12>
	}
	return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x50>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x16>
		heap_end = &end;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <_sbrk+0x50>)
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <_sbrk+0x54>)
 8001c4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <_sbrk+0x50>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <_sbrk+0x50>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	466a      	mov	r2, sp
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d907      	bls.n	8001c72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001c62:	f004 fb0f 	bl	8006284 <__errno>
 8001c66:	4602      	mov	r2, r0
 8001c68:	230c      	movs	r3, #12
 8001c6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c70:	e006      	b.n	8001c80 <_sbrk+0x48>
	}

	heap_end += incr;
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <_sbrk+0x50>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <_sbrk+0x50>)
 8001c7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000009c 	.word	0x2000009c
 8001c8c:	20000b90 	.word	0x20000b90

08001c90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <SystemInit+0x28>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <SystemInit+0x28>)
 8001c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SystemInit+0x28>)
 8001ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001caa:	609a      	str	r2, [r3, #8]
#endif
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cc2:	e003      	b.n	8001ccc <LoopCopyDataInit>

08001cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cca:	3104      	adds	r1, #4

08001ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ccc:	480b      	ldr	r0, [pc, #44]	; (8001cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd4:	d3f6      	bcc.n	8001cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8001cd6:	4a0b      	ldr	r2, [pc, #44]	; (8001d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cd8:	e002      	b.n	8001ce0 <LoopFillZerobss>

08001cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cdc:	f842 3b04 	str.w	r3, [r2], #4

08001ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce4:	d3f9      	bcc.n	8001cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ce6:	f7ff ffd3 	bl	8001c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cea:	f004 fad1 	bl	8006290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cee:	f7ff f9f1 	bl	80010d4 <main>
  bx  lr    
 8001cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001cf8:	08007198 	.word	0x08007198
  ldr  r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d00:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001d04:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001d08:	20000b8c 	.word	0x20000b8c

08001d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC_IRQHandler>

08001d0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d12:	2003      	movs	r0, #3
 8001d14:	f000 f94a 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 f805 	bl	8001d28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d1e:	f7ff fccd 	bl	80016bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x54>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_InitTick+0x58>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f965 	bl	8002016 <HAL_SYSTICK_Config>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e00e      	b.n	8001d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b0f      	cmp	r3, #15
 8001d5a:	d80a      	bhi.n	8001d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	f000 f92d 	bl	8001fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <HAL_InitTick+0x5c>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e000      	b.n	8001d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	2000000c 	.word	0x2000000c
 8001d84:	20000008 	.word	0x20000008

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	20000b84 	.word	0x20000b84

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000b84 	.word	0x20000b84

08001dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd0:	f7ff ffee 	bl	8001db0 <HAL_GetTick>
 8001dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de0:	d005      	beq.n	8001dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_Delay+0x40>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dee:	bf00      	nop
 8001df0:	f7ff ffde 	bl	8001db0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d8f7      	bhi.n	8001df0 <HAL_Delay+0x28>
  {
  }
}
 8001e00:	bf00      	nop
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	2000000c 	.word	0x2000000c

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <__NVIC_SetPriorityGrouping+0x40>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x40>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	05fa0000 	.word	0x05fa0000

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <__NVIC_EnableIRQ+0x38>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db0a      	blt.n	8001ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <__NVIC_SetPriority+0x4c>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed4:	e00a      	b.n	8001eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4908      	ldr	r1, [pc, #32]	; (8001efc <__NVIC_SetPriority+0x50>)
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3b04      	subs	r3, #4
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	761a      	strb	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f1c3 0307 	rsb	r3, r3, #7
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	bf28      	it	cs
 8001f1e:	2304      	movcs	r3, #4
 8001f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d902      	bls.n	8001f30 <NVIC_EncodePriority+0x30>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3b03      	subs	r3, #3
 8001f2e:	e000      	b.n	8001f32 <NVIC_EncodePriority+0x32>
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	401a      	ands	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43d9      	mvns	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	4313      	orrs	r3, r2
         );
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d301      	bcc.n	8001f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00f      	b.n	8001f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <SysTick_Config+0x40>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f7ff ff8e 	bl	8001eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Config+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SysTick_Config+0x40>)
 8001f98:	2207      	movs	r2, #7
 8001f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff29 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff3e 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff8e 	bl	8001f00 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5d 	bl	8001eac <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff31 	bl	8001e70 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa2 	bl	8001f68 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff feb8 	bl	8001db0 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e099      	b.n	8002180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2202      	movs	r2, #2
 8002058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206c:	e00f      	b.n	800208e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800206e:	f7ff fe9f 	bl	8001db0 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b05      	cmp	r3, #5
 800207a:	d908      	bls.n	800208e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2203      	movs	r2, #3
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e078      	b.n	8002180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e8      	bne.n	800206e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4b38      	ldr	r3, [pc, #224]	; (8002188 <HAL_DMA_Init+0x158>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d107      	bne.n	80020f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4313      	orrs	r3, r2
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 0307 	bic.w	r3, r3, #7
 800210e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	2b04      	cmp	r3, #4
 8002120:	d117      	bne.n	8002152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fa99 	bl	800266c <DMA_CheckFifoParam>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800214e:	2301      	movs	r3, #1
 8002150:	e016      	b.n	8002180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 fa50 	bl	8002600 <DMA_CalcBaseAndBitshift>
 8002160:	4603      	mov	r3, r0
 8002162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002168:	223f      	movs	r2, #63	; 0x3f
 800216a:	409a      	lsls	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	e010803f 	.word	0xe010803f

0800218c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
 8002198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d101      	bne.n	80021b2 <HAL_DMA_Start_IT+0x26>
 80021ae:	2302      	movs	r3, #2
 80021b0:	e048      	b.n	8002244 <HAL_DMA_Start_IT+0xb8>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d137      	bne.n	8002236 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f000 f9e2 	bl	80025a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	409a      	lsls	r2, r3
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0216 	orr.w	r2, r2, #22
 80021fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800220a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0208 	orr.w	r2, r2, #8
 8002222:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e005      	b.n	8002242 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d004      	beq.n	800226a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2280      	movs	r2, #128	; 0x80
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00c      	b.n	8002284 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2205      	movs	r2, #5
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800229c:	4b92      	ldr	r3, [pc, #584]	; (80024e8 <HAL_DMA_IRQHandler+0x258>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_DMA_IRQHandler+0x25c>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0a9b      	lsrs	r3, r3, #10
 80022a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	2208      	movs	r2, #8
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d01a      	beq.n	80022fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	2208      	movs	r2, #8
 80022ea:	409a      	lsls	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002300:	2201      	movs	r2, #1
 8002302:	409a      	lsls	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4013      	ands	r3, r2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d012      	beq.n	8002332 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2201      	movs	r2, #1
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f043 0202 	orr.w	r2, r3, #2
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	2204      	movs	r2, #4
 8002338:	409a      	lsls	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d012      	beq.n	8002368 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00b      	beq.n	8002368 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002354:	2204      	movs	r2, #4
 8002356:	409a      	lsls	r2, r3
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f043 0204 	orr.w	r2, r3, #4
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	2210      	movs	r2, #16
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d043      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d03c      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2210      	movs	r2, #16
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d018      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d108      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d024      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
 80023be:	e01f      	b.n	8002400 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01b      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4798      	blx	r3
 80023d0:	e016      	b.n	8002400 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0208 	bic.w	r2, r2, #8
 80023ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002404:	2220      	movs	r2, #32
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 808e 	beq.w	800252e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8086 	beq.w	800252e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	2220      	movs	r2, #32
 8002428:	409a      	lsls	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b05      	cmp	r3, #5
 8002438:	d136      	bne.n	80024a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0216 	bic.w	r2, r2, #22
 8002448:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002458:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d103      	bne.n	800246a <HAL_DMA_IRQHandler+0x1da>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	2b00      	cmp	r3, #0
 8002468:	d007      	beq.n	800247a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0208 	bic.w	r2, r2, #8
 8002478:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	223f      	movs	r2, #63	; 0x3f
 8002480:	409a      	lsls	r2, r3
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249a:	2b00      	cmp	r3, #0
 800249c:	d07d      	beq.n	800259a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
        }
        return;
 80024a6:	e078      	b.n	800259a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01c      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d108      	bne.n	80024d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d030      	beq.n	800252e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4798      	blx	r3
 80024d4:	e02b      	b.n	800252e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d027      	beq.n	800252e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4798      	blx	r3
 80024e6:	e022      	b.n	800252e <HAL_DMA_IRQHandler+0x29e>
 80024e8:	20000004 	.word	0x20000004
 80024ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0210 	bic.w	r2, r2, #16
 800250c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002532:	2b00      	cmp	r3, #0
 8002534:	d032      	beq.n	800259c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d022      	beq.n	8002588 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2205      	movs	r2, #5
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	3301      	adds	r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	429a      	cmp	r2, r3
 8002564:	d307      	bcc.n	8002576 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f2      	bne.n	800255a <HAL_DMA_IRQHandler+0x2ca>
 8002574:	e000      	b.n	8002578 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002576:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	4798      	blx	r3
 8002598:	e000      	b.n	800259c <HAL_DMA_IRQHandler+0x30c>
        return;
 800259a:	bf00      	nop
    }
  }
}
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop

080025a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b40      	cmp	r3, #64	; 0x40
 80025d0:	d108      	bne.n	80025e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025e2:	e007      	b.n	80025f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	60da      	str	r2, [r3, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	3b10      	subs	r3, #16
 8002610:	4a13      	ldr	r2, [pc, #76]	; (8002660 <DMA_CalcBaseAndBitshift+0x60>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800261a:	4a12      	ldr	r2, [pc, #72]	; (8002664 <DMA_CalcBaseAndBitshift+0x64>)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d908      	bls.n	8002640 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <DMA_CalcBaseAndBitshift+0x68>)
 8002636:	4013      	ands	r3, r2
 8002638:	1d1a      	adds	r2, r3, #4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	659a      	str	r2, [r3, #88]	; 0x58
 800263e:	e006      	b.n	800264e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <DMA_CalcBaseAndBitshift+0x68>)
 8002648:	4013      	ands	r3, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	aaaaaaab 	.word	0xaaaaaaab
 8002664:	080070e8 	.word	0x080070e8
 8002668:	fffffc00 	.word	0xfffffc00

0800266c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d11f      	bne.n	80026c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d855      	bhi.n	8002738 <DMA_CheckFifoParam+0xcc>
 800268c:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <DMA_CheckFifoParam+0x28>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080026a5 	.word	0x080026a5
 8002698:	080026b7 	.word	0x080026b7
 800269c:	080026a5 	.word	0x080026a5
 80026a0:	08002739 	.word	0x08002739
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d045      	beq.n	800273c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026b4:	e042      	b.n	800273c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026be:	d13f      	bne.n	8002740 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c4:	e03c      	b.n	8002740 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ce:	d121      	bne.n	8002714 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d836      	bhi.n	8002744 <DMA_CheckFifoParam+0xd8>
 80026d6:	a201      	add	r2, pc, #4	; (adr r2, 80026dc <DMA_CheckFifoParam+0x70>)
 80026d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026dc:	080026ed 	.word	0x080026ed
 80026e0:	080026f3 	.word	0x080026f3
 80026e4:	080026ed 	.word	0x080026ed
 80026e8:	08002705 	.word	0x08002705
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
      break;
 80026f0:	e02f      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d024      	beq.n	8002748 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002702:	e021      	b.n	8002748 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800270c:	d11e      	bne.n	800274c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002712:	e01b      	b.n	800274c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d902      	bls.n	8002720 <DMA_CheckFifoParam+0xb4>
 800271a:	2b03      	cmp	r3, #3
 800271c:	d003      	beq.n	8002726 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800271e:	e018      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      break;
 8002724:	e015      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00e      	beq.n	8002750 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      break;
 8002736:	e00b      	b.n	8002750 <DMA_CheckFifoParam+0xe4>
      break;
 8002738:	bf00      	nop
 800273a:	e00a      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      break;
 800273c:	bf00      	nop
 800273e:	e008      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      break;
 8002740:	bf00      	nop
 8002742:	e006      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      break;
 8002744:	bf00      	nop
 8002746:	e004      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      break;
 8002748:	bf00      	nop
 800274a:	e002      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      break;   
 800274c:	bf00      	nop
 800274e:	e000      	b.n	8002752 <DMA_CheckFifoParam+0xe6>
      break;
 8002750:	bf00      	nop
    }
  } 
  
  return status; 
 8002752:	7bfb      	ldrb	r3, [r7, #15]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	e175      	b.n	8002a6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002780:	2201      	movs	r2, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	429a      	cmp	r2, r3
 800279a:	f040 8164 	bne.w	8002a66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d00b      	beq.n	80027be <HAL_GPIO_Init+0x5e>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d007      	beq.n	80027be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027b2:	2b11      	cmp	r3, #17
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b12      	cmp	r3, #18
 80027bc:	d130      	bne.n	8002820 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0201 	and.w	r2, r3, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2203      	movs	r2, #3
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x100>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b12      	cmp	r3, #18
 800285e:	d123      	bne.n	80028a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	08da      	lsrs	r2, r3, #3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3208      	adds	r2, #8
 8002868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	220f      	movs	r2, #15
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	08da      	lsrs	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3208      	adds	r2, #8
 80028a2:	69b9      	ldr	r1, [r7, #24]
 80028a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 0203 	and.w	r2, r3, #3
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80be 	beq.w	8002a66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_GPIO_Init+0x320>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	4a64      	ldr	r2, [pc, #400]	; (8002a80 <HAL_GPIO_Init+0x320>)
 80028f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f4:	6453      	str	r3, [r2, #68]	; 0x44
 80028f6:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_GPIO_Init+0x320>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002902:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_GPIO_Init+0x324>)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3302      	adds	r3, #2
 800290a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a57      	ldr	r2, [pc, #348]	; (8002a88 <HAL_GPIO_Init+0x328>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d037      	beq.n	800299e <HAL_GPIO_Init+0x23e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a56      	ldr	r2, [pc, #344]	; (8002a8c <HAL_GPIO_Init+0x32c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d031      	beq.n	800299a <HAL_GPIO_Init+0x23a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a55      	ldr	r2, [pc, #340]	; (8002a90 <HAL_GPIO_Init+0x330>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02b      	beq.n	8002996 <HAL_GPIO_Init+0x236>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a54      	ldr	r2, [pc, #336]	; (8002a94 <HAL_GPIO_Init+0x334>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d025      	beq.n	8002992 <HAL_GPIO_Init+0x232>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a53      	ldr	r2, [pc, #332]	; (8002a98 <HAL_GPIO_Init+0x338>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <HAL_GPIO_Init+0x22e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a52      	ldr	r2, [pc, #328]	; (8002a9c <HAL_GPIO_Init+0x33c>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d019      	beq.n	800298a <HAL_GPIO_Init+0x22a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a51      	ldr	r2, [pc, #324]	; (8002aa0 <HAL_GPIO_Init+0x340>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0x226>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <HAL_GPIO_Init+0x344>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00d      	beq.n	8002982 <HAL_GPIO_Init+0x222>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <HAL_GPIO_Init+0x348>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <HAL_GPIO_Init+0x21e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4e      	ldr	r2, [pc, #312]	; (8002aac <HAL_GPIO_Init+0x34c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_GPIO_Init+0x21a>
 8002976:	2309      	movs	r3, #9
 8002978:	e012      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800297a:	230a      	movs	r3, #10
 800297c:	e010      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800297e:	2308      	movs	r3, #8
 8002980:	e00e      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002982:	2307      	movs	r3, #7
 8002984:	e00c      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002986:	2306      	movs	r3, #6
 8002988:	e00a      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800298a:	2305      	movs	r3, #5
 800298c:	e008      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800298e:	2304      	movs	r3, #4
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002992:	2303      	movs	r3, #3
 8002994:	e004      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 8002996:	2302      	movs	r3, #2
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x240>
 800299e:	2300      	movs	r3, #0
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	f002 0203 	and.w	r2, r2, #3
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	4093      	lsls	r3, r2
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029b0:	4934      	ldr	r1, [pc, #208]	; (8002a84 <HAL_GPIO_Init+0x324>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029be:	4b3c      	ldr	r3, [pc, #240]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e2:	4a33      	ldr	r2, [pc, #204]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029e8:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a0c:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a36:	4a1e      	ldr	r2, [pc, #120]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a3c:	4b1c      	ldr	r3, [pc, #112]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a60:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <HAL_GPIO_Init+0x350>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	f67f ae86 	bls.w	8002780 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a74:	bf00      	nop
 8002a76:	3724      	adds	r7, #36	; 0x24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40013800 	.word	0x40013800
 8002a88:	40020000 	.word	0x40020000
 8002a8c:	40020400 	.word	0x40020400
 8002a90:	40020800 	.word	0x40020800
 8002a94:	40020c00 	.word	0x40020c00
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40021400 	.word	0x40021400
 8002aa0:	40021800 	.word	0x40021800
 8002aa4:	40021c00 	.word	0x40021c00
 8002aa8:	40022000 	.word	0x40022000
 8002aac:	40022400 	.word	0x40022400
 8002ab0:	40013c00 	.word	0x40013c00

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe fe12 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d107      	bne.n	8002b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b2a:	609a      	str	r2, [r3, #8]
 8002b2c:	e006      	b.n	8002b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d104      	bne.n	8002b4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <HAL_I2C_Init+0x11c>)
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	ea42 0103 	orr.w	r1, r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	021a      	lsls	r2, r3, #8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69d9      	ldr	r1, [r3, #28]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1a      	ldr	r2, [r3, #32]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	02008000 	.word	0x02008000

08002bd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	461a      	mov	r2, r3
 8002be0:	460b      	mov	r3, r1
 8002be2:	817b      	strh	r3, [r7, #10]
 8002be4:	4613      	mov	r3, r2
 8002be6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	f040 80da 	bne.w	8002daa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_I2C_Master_Transmit+0x30>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0d3      	b.n	8002dac <HAL_I2C_Master_Transmit+0x1d8>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c0c:	f7ff f8d0 	bl	8001db0 <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2319      	movs	r3, #25
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fa00 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0be      	b.n	8002dac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2221      	movs	r2, #33	; 0x21
 8002c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	893a      	ldrh	r2, [r7, #8]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2bff      	cmp	r3, #255	; 0xff
 8002c5e:	d90e      	bls.n	8002c7e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	8979      	ldrh	r1, [r7, #10]
 8002c6e:	4b51      	ldr	r3, [pc, #324]	; (8002db4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 fb62 	bl	8003340 <I2C_TransferConfig>
 8002c7c:	e06c      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	8979      	ldrh	r1, [r7, #10]
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 fb51 	bl	8003340 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c9e:	e05b      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	6a39      	ldr	r1, [r7, #32]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f9fd 	bl	80030a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e07b      	b.n	8002dac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d034      	beq.n	8002d58 <HAL_I2C_Master_Transmit+0x184>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d130      	bne.n	8002d58 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2180      	movs	r1, #128	; 0x80
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f98f 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e04d      	b.n	8002dac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2bff      	cmp	r3, #255	; 0xff
 8002d18:	d90e      	bls.n	8002d38 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	22ff      	movs	r2, #255	; 0xff
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	8979      	ldrh	r1, [r7, #10]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 fb05 	bl	8003340 <I2C_TransferConfig>
 8002d36:	e00f      	b.n	8002d58 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	8979      	ldrh	r1, [r7, #10]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 faf4 	bl	8003340 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d19e      	bne.n	8002ca0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	6a39      	ldr	r1, [r7, #32]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f9dc 	bl	8003124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e01a      	b.n	8002dac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	e000      	b.n	8002dac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002daa:	2302      	movs	r3, #2
  }
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	80002000 	.word	0x80002000
 8002db8:	fe00e800 	.word	0xfe00e800

08002dbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	460b      	mov	r3, r1
 8002dca:	817b      	strh	r3, [r7, #10]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	f040 80db 	bne.w	8002f94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_I2C_Master_Receive+0x30>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e0d4      	b.n	8002f96 <HAL_I2C_Master_Receive+0x1da>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002df4:	f7fe ffdc 	bl	8001db0 <HAL_GetTick>
 8002df8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2319      	movs	r3, #25
 8002e00:	2201      	movs	r2, #1
 8002e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f90c 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0bf      	b.n	8002f96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2222      	movs	r2, #34	; 0x22
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2210      	movs	r2, #16
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2bff      	cmp	r3, #255	; 0xff
 8002e46:	d90e      	bls.n	8002e66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	22ff      	movs	r2, #255	; 0xff
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	4b52      	ldr	r3, [pc, #328]	; (8002fa0 <HAL_I2C_Master_Receive+0x1e4>)
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 fa6e 	bl	8003340 <I2C_TransferConfig>
 8002e64:	e06d      	b.n	8002f42 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	8979      	ldrh	r1, [r7, #10]
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_I2C_Master_Receive+0x1e4>)
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fa5d 	bl	8003340 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e86:	e05c      	b.n	8002f42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	6a39      	ldr	r1, [r7, #32]
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f985 	bl	800319c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e07c      	b.n	8002f96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d034      	beq.n	8002f42 <HAL_I2C_Master_Receive+0x186>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d130      	bne.n	8002f42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f89a 	bl	8003024 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e04d      	b.n	8002f96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	2bff      	cmp	r3, #255	; 0xff
 8002f02:	d90e      	bls.n	8002f22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	22ff      	movs	r2, #255	; 0xff
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	8979      	ldrh	r1, [r7, #10]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fa10 	bl	8003340 <I2C_TransferConfig>
 8002f20:	e00f      	b.n	8002f42 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	8979      	ldrh	r1, [r7, #10]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f9ff 	bl	8003340 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d19d      	bne.n	8002e88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	6a39      	ldr	r1, [r7, #32]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f8e7 	bl	8003124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e01a      	b.n	8002f96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2220      	movs	r2, #32
 8002f66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_I2C_Master_Receive+0x1e8>)
 8002f74:	400b      	ands	r3, r1
 8002f76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e000      	b.n	8002f96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f94:	2302      	movs	r3, #2
  }
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	80002400 	.word	0x80002400
 8002fa4:	fe00e800 	.word	0xfe00e800

08002fa8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	68f9      	ldr	r1, [r7, #12]
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d103      	bne.n	8002ffa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d007      	beq.n	8003018 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	619a      	str	r2, [r3, #24]
  }
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003034:	e022      	b.n	800307c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d01e      	beq.n	800307c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7fe feb7 	bl	8001db0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d113      	bne.n	800307c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e00f      	b.n	800309c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4013      	ands	r3, r2
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	429a      	cmp	r2, r3
 8003098:	d0cd      	beq.n	8003036 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030b0:	e02c      	b.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8dc 	bl	8003274 <I2C_IsAcknowledgeFailed>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e02a      	b.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d01e      	beq.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fe6f 	bl	8001db0 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d113      	bne.n	800310c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d1cb      	bne.n	80030b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003130:	e028      	b.n	8003184 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f89c 	bl	8003274 <I2C_IsAcknowledgeFailed>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e026      	b.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fe33 	bl	8001db0 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d113      	bne.n	8003184 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e007      	b.n	8003194 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b20      	cmp	r3, #32
 8003190:	d1cf      	bne.n	8003132 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a8:	e055      	b.n	8003256 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f860 	bl	8003274 <I2C_IsAcknowledgeFailed>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e053      	b.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d129      	bne.n	8003220 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d105      	bne.n	80031e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e03f      	b.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2220      	movs	r2, #32
 80031ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80031fa:	400b      	ands	r3, r1
 80031fc:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e022      	b.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003220:	f7fe fdc6 	bl	8001db0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	d302      	bcc.n	8003236 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e007      	b.n	8003266 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b04      	cmp	r3, #4
 8003262:	d1a2      	bne.n	80031aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	fe00e800 	.word	0xfe00e800

08003274 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b10      	cmp	r3, #16
 800328c:	d151      	bne.n	8003332 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800328e:	e022      	b.n	80032d6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d01e      	beq.n	80032d6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003298:	f7fe fd8a 	bl	8001db0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <I2C_IsAcknowledgeFailed+0x3a>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d113      	bne.n	80032d6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e02e      	b.n	8003334 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d1d5      	bne.n	8003290 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2210      	movs	r2, #16
 80032ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2220      	movs	r2, #32
 80032f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f7ff fe71 	bl	8002fdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b0d      	ldr	r3, [pc, #52]	; (800333c <I2C_IsAcknowledgeFailed+0xc8>)
 8003306:	400b      	ands	r3, r1
 8003308:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f043 0204 	orr.w	r2, r3, #4
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	fe00e800 	.word	0xfe00e800

08003340 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607b      	str	r3, [r7, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	4613      	mov	r3, r2
 8003350:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	0d5b      	lsrs	r3, r3, #21
 800335c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <I2C_TransferConfig+0x58>)
 8003362:	430b      	orrs	r3, r1
 8003364:	43db      	mvns	r3, r3
 8003366:	ea02 0103 	and.w	r1, r2, r3
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003370:	7a7b      	ldrb	r3, [r7, #9]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	431a      	orrs	r2, r3
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	431a      	orrs	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	03ff63ff 	.word	0x03ff63ff

0800339c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d138      	bne.n	8003424 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033bc:	2302      	movs	r3, #2
 80033be:	e032      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2224      	movs	r2, #36	; 0x24
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b20      	cmp	r3, #32
 8003446:	d139      	bne.n	80034bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003452:	2302      	movs	r3, #2
 8003454:	e033      	b.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2224      	movs	r2, #36	; 0x24
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0201 	bic.w	r2, r2, #1
 8003474:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003484:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4313      	orrs	r3, r2
 800348e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e000      	b.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
  }
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3714      	adds	r7, #20
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40007000 	.word	0x40007000

080034ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	4b23      	ldr	r3, [pc, #140]	; (8003584 <HAL_PWREx_EnableOverDrive+0x98>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_PWREx_EnableOverDrive+0x98>)
 80034fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <HAL_PWREx_EnableOverDrive+0x98>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800350e:	4b1e      	ldr	r3, [pc, #120]	; (8003588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800351a:	f7fe fc49 	bl	8001db0 <HAL_GetTick>
 800351e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003520:	e009      	b.n	8003536 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003522:	f7fe fc45 	bl	8001db0 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003530:	d901      	bls.n	8003536 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e022      	b.n	800357c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003536:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003542:	d1ee      	bne.n	8003522 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003544:	4b10      	ldr	r3, [pc, #64]	; (8003588 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800354a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003550:	f7fe fc2e 	bl	8001db0 <HAL_GetTick>
 8003554:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003556:	e009      	b.n	800356c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003558:	f7fe fc2a 	bl	8001db0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003566:	d901      	bls.n	800356c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e007      	b.n	800357c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_PWREx_EnableOverDrive+0x9c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003578:	d1ee      	bne.n	8003558 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800
 8003588:	40007000 	.word	0x40007000

0800358c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e29b      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8087 	beq.w	80036be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b0:	4b96      	ldr	r3, [pc, #600]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d00c      	beq.n	80035d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035bc:	4b93      	ldr	r3, [pc, #588]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d112      	bne.n	80035ee <HAL_RCC_OscConfig+0x62>
 80035c8:	4b90      	ldr	r3, [pc, #576]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d4:	d10b      	bne.n	80035ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d6:	4b8d      	ldr	r3, [pc, #564]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d06c      	beq.n	80036bc <HAL_RCC_OscConfig+0x130>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d168      	bne.n	80036bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e275      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x7a>
 80035f8:	4b84      	ldr	r3, [pc, #528]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a83      	ldr	r2, [pc, #524]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	e02e      	b.n	8003664 <HAL_RCC_OscConfig+0xd8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10c      	bne.n	8003628 <HAL_RCC_OscConfig+0x9c>
 800360e:	4b7f      	ldr	r3, [pc, #508]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7e      	ldr	r2, [pc, #504]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b7c      	ldr	r3, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x280>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7b      	ldr	r2, [pc, #492]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003620:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	e01d      	b.n	8003664 <HAL_RCC_OscConfig+0xd8>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0xc0>
 8003632:	4b76      	ldr	r3, [pc, #472]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a75      	ldr	r2, [pc, #468]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b73      	ldr	r3, [pc, #460]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a72      	ldr	r2, [pc, #456]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0xd8>
 800364c:	4b6f      	ldr	r3, [pc, #444]	; (800380c <HAL_RCC_OscConfig+0x280>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6e      	ldr	r2, [pc, #440]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b6c      	ldr	r3, [pc, #432]	; (800380c <HAL_RCC_OscConfig+0x280>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6b      	ldr	r2, [pc, #428]	; (800380c <HAL_RCC_OscConfig+0x280>)
 800365e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d013      	beq.n	8003694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe fba0 	bl	8001db0 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003674:	f7fe fb9c 	bl	8001db0 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	; 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e229      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0xe8>
 8003692:	e014      	b.n	80036be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe fb8c 	bl	8001db0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe fb88 	bl	8001db0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e215      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	4b57      	ldr	r3, [pc, #348]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x110>
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d069      	beq.n	800379e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ca:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036d6:	4b4d      	ldr	r3, [pc, #308]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d11c      	bne.n	800371c <HAL_RCC_OscConfig+0x190>
 80036e2:	4b4a      	ldr	r3, [pc, #296]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ee:	4b47      	ldr	r3, [pc, #284]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_RCC_OscConfig+0x17a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e1e9      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003706:	4b41      	ldr	r3, [pc, #260]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	493d      	ldr	r1, [pc, #244]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	e040      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d023      	beq.n	800376c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003724:	4b39      	ldr	r3, [pc, #228]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a38      	ldr	r2, [pc, #224]	; (800380c <HAL_RCC_OscConfig+0x280>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe fb3e 	bl	8001db0 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003738:	f7fe fb3a 	bl	8001db0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e1c7      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	4b30      	ldr	r3, [pc, #192]	; (800380c <HAL_RCC_OscConfig+0x280>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003756:	4b2d      	ldr	r3, [pc, #180]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4929      	ldr	r1, [pc, #164]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]
 800376a:	e018      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376c:	4b27      	ldr	r3, [pc, #156]	; (800380c <HAL_RCC_OscConfig+0x280>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a26      	ldr	r2, [pc, #152]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fb1a 	bl	8001db0 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003780:	f7fe fb16 	bl	8001db0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e1a3      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_RCC_OscConfig+0x280>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d038      	beq.n	800381c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d019      	beq.n	80037e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80037b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b6:	4a15      	ldr	r2, [pc, #84]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fe faf7 	bl	8001db0 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe faf3 	bl	8001db0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e180      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80037da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x23a>
 80037e4:	e01a      	b.n	800381c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <HAL_RCC_OscConfig+0x280>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f2:	f7fe fadd 	bl	8001db0 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe fad9 	bl	8001db0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d903      	bls.n	8003810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e166      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
 800380c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	4b92      	ldr	r3, [pc, #584]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ee      	bne.n	80037fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 80a4 	beq.w	8003972 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382a:	4b8c      	ldr	r3, [pc, #560]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a88      	ldr	r2, [pc, #544]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b86      	ldr	r3, [pc, #536]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003852:	4b83      	ldr	r3, [pc, #524]	; (8003a60 <HAL_RCC_OscConfig+0x4d4>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800385e:	4b80      	ldr	r3, [pc, #512]	; (8003a60 <HAL_RCC_OscConfig+0x4d4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7f      	ldr	r2, [pc, #508]	; (8003a60 <HAL_RCC_OscConfig+0x4d4>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7fe faa1 	bl	8001db0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7fe fa9d 	bl	8001db0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b64      	cmp	r3, #100	; 0x64
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e12a      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	4b76      	ldr	r3, [pc, #472]	; (8003a60 <HAL_RCC_OscConfig+0x4d4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x31a>
 8003898:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a6f      	ldr	r2, [pc, #444]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	e02d      	b.n	8003902 <HAL_RCC_OscConfig+0x376>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x33c>
 80038ae:	4b6b      	ldr	r3, [pc, #428]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	4a6a      	ldr	r2, [pc, #424]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ba:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4a67      	ldr	r2, [pc, #412]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	f023 0304 	bic.w	r3, r3, #4
 80038c4:	6713      	str	r3, [r2, #112]	; 0x70
 80038c6:	e01c      	b.n	8003902 <HAL_RCC_OscConfig+0x376>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d10c      	bne.n	80038ea <HAL_RCC_OscConfig+0x35e>
 80038d0:	4b62      	ldr	r3, [pc, #392]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a61      	ldr	r2, [pc, #388]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	4b5f      	ldr	r3, [pc, #380]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a5e      	ldr	r2, [pc, #376]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	e00b      	b.n	8003902 <HAL_RCC_OscConfig+0x376>
 80038ea:	4b5c      	ldr	r3, [pc, #368]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a5b      	ldr	r2, [pc, #364]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038f0:	f023 0301 	bic.w	r3, r3, #1
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	4b59      	ldr	r3, [pc, #356]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a58      	ldr	r2, [pc, #352]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d015      	beq.n	8003936 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7fe fa51 	bl	8001db0 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003910:	e00a      	b.n	8003928 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003912:	f7fe fa4d 	bl	8001db0 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003920:	4293      	cmp	r3, r2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e0d8      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003928:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ee      	beq.n	8003912 <HAL_RCC_OscConfig+0x386>
 8003934:	e014      	b.n	8003960 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7fe fa3b 	bl	8001db0 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7fe fa37 	bl	8001db0 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0c2      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003954:	4b41      	ldr	r3, [pc, #260]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ee      	bne.n	800393e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003960:	7dfb      	ldrb	r3, [r7, #23]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003966:	4b3d      	ldr	r3, [pc, #244]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 800396c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80ae 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800397c:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	2b08      	cmp	r3, #8
 8003986:	d06d      	beq.n	8003a64 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d14b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003990:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a31      	ldr	r2, [pc, #196]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fa08 	bl	8001db0 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fe fa04 	bl	8001db0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e091      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69da      	ldr	r2, [r3, #28]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	019b      	lsls	r3, r3, #6
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	3b01      	subs	r3, #1
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	061b      	lsls	r3, r3, #24
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	071b      	lsls	r3, r3, #28
 80039ee:	491b      	ldr	r1, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 80039fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a00:	f7fe f9d6 	bl	8001db0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe f9d2 	bl	8001db0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e05f      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x47c>
 8003a26:	e057      	b.n	8003ad8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe f9bc 	bl	8001db0 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fe f9b8 	bl	8001db0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e045      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <HAL_RCC_OscConfig+0x4d0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4b0>
 8003a5a:	e03d      	b.n	8003ad8 <HAL_RCC_OscConfig+0x54c>
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a64:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <HAL_RCC_OscConfig+0x558>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d030      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d129      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d122      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a94:	4013      	ands	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d119      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	3b01      	subs	r3, #1
 8003aae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d0      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b6a      	ldr	r3, [pc, #424]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b67      	ldr	r3, [pc, #412]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	4965      	ldr	r1, [pc, #404]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a52      	ldr	r2, [pc, #328]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d040      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e073      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4b3d      	ldr	r3, [pc, #244]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06b      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bca:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4936      	ldr	r1, [pc, #216]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fe f8e8 	bl	8001db0 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be4:	f7fe f8e4 	bl	8001db0 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e053      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 020c 	and.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d1eb      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b27      	ldr	r3, [pc, #156]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d210      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 020f 	bic.w	r2, r3, #15
 8003c22:	4922      	ldr	r1, [pc, #136]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f831 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
 8003c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x1d4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe f844 	bl	8001d28 <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	080070d0 	.word	0x080070d0
 8003cb8:	20000004 	.word	0x20000004
 8003cbc:	20000008 	.word	0x20000008

08003cc0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCC_EnableCSS+0x1c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <HAL_RCC_EnableCSS+0x1c>)
 8003cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf6:	4b50      	ldr	r3, [pc, #320]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d007      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x32>
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d008      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x38>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f040 808d 	bne.w	8003e26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0c:	4b4b      	ldr	r3, [pc, #300]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003d0e:	60bb      	str	r3, [r7, #8]
      break;
 8003d10:	e08c      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d12:	4b4b      	ldr	r3, [pc, #300]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d14:	60bb      	str	r3, [r7, #8]
      break;
 8003d16:	e089      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d18:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d20:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d22:	4b45      	ldr	r3, [pc, #276]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d023      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2e:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	f04f 0400 	mov.w	r4, #0
 8003d38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	ea03 0501 	and.w	r5, r3, r1
 8003d44:	ea04 0602 	and.w	r6, r4, r2
 8003d48:	4a3d      	ldr	r2, [pc, #244]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d4a:	fb02 f106 	mul.w	r1, r2, r6
 8003d4e:	2200      	movs	r2, #0
 8003d50:	fb02 f205 	mul.w	r2, r2, r5
 8003d54:	440a      	add	r2, r1
 8003d56:	493a      	ldr	r1, [pc, #232]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d58:	fba5 0101 	umull	r0, r1, r5, r1
 8003d5c:	1853      	adds	r3, r2, r1
 8003d5e:	4619      	mov	r1, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f04f 0400 	mov.w	r4, #0
 8003d66:	461a      	mov	r2, r3
 8003d68:	4623      	mov	r3, r4
 8003d6a:	f7fc fab9 	bl	80002e0 <__aeabi_uldivmod>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e049      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	ea03 0501 	and.w	r5, r3, r1
 8003d8c:	ea04 0602 	and.w	r6, r4, r2
 8003d90:	4629      	mov	r1, r5
 8003d92:	4632      	mov	r2, r6
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	f04f 0400 	mov.w	r4, #0
 8003d9c:	0154      	lsls	r4, r2, #5
 8003d9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003da2:	014b      	lsls	r3, r1, #5
 8003da4:	4619      	mov	r1, r3
 8003da6:	4622      	mov	r2, r4
 8003da8:	1b49      	subs	r1, r1, r5
 8003daa:	eb62 0206 	sbc.w	r2, r2, r6
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	f04f 0400 	mov.w	r4, #0
 8003db6:	0194      	lsls	r4, r2, #6
 8003db8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dbc:	018b      	lsls	r3, r1, #6
 8003dbe:	1a5b      	subs	r3, r3, r1
 8003dc0:	eb64 0402 	sbc.w	r4, r4, r2
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	00e2      	lsls	r2, r4, #3
 8003dce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dd2:	00d9      	lsls	r1, r3, #3
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	195b      	adds	r3, r3, r5
 8003dda:	eb44 0406 	adc.w	r4, r4, r6
 8003dde:	f04f 0100 	mov.w	r1, #0
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	02a2      	lsls	r2, r4, #10
 8003de8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003dec:	0299      	lsls	r1, r3, #10
 8003dee:	460b      	mov	r3, r1
 8003df0:	4614      	mov	r4, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	4621      	mov	r1, r4
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f04f 0400 	mov.w	r4, #0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4623      	mov	r3, r4
 8003e00:	f7fc fa6e 	bl	80002e0 <__aeabi_uldivmod>
 8003e04:	4603      	mov	r3, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	0c1b      	lsrs	r3, r3, #16
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	3301      	adds	r3, #1
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e22:	60bb      	str	r3, [r7, #8]
      break;
 8003e24:	e002      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e28:	60bb      	str	r3, [r7, #8]
      break;
 8003e2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	00f42400 	.word	0x00f42400
 8003e40:	017d7840 	.word	0x017d7840

08003e44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000004 	.word	0x20000004

08003e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e60:	f7ff fff0 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e64:	4601      	mov	r1, r0
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	0a9b      	lsrs	r3, r3, #10
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	4a03      	ldr	r2, [pc, #12]	; (8003e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e72:	5cd3      	ldrb	r3, [r2, r3]
 8003e74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	080070e0 	.word	0x080070e0

08003e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e88:	f7ff ffdc 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e8c:	4601      	mov	r1, r0
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	0b5b      	lsrs	r3, r3, #13
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	4a03      	ldr	r2, [pc, #12]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9a:	5cd3      	ldrb	r3, [r2, r3]
 8003e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	080070e0 	.word	0x080070e0

08003eac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCC_NMI_IRQHandler+0x20>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d104      	bne.n	8003ec6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003ebc:	f000 f80a 	bl	8003ed4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003ec2:	2280      	movs	r2, #128	; 0x80
 8003ec4:	701a      	strb	r2, [r3, #0]
  }
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	4002380e 	.word	0x4002380e

08003ed4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d012      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f0c:	4b69      	ldr	r3, [pc, #420]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a68      	ldr	r2, [pc, #416]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f16:	6093      	str	r3, [r2, #8]
 8003f18:	4b66      	ldr	r3, [pc, #408]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	4964      	ldr	r1, [pc, #400]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d017      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f3e:	4b5d      	ldr	r3, [pc, #372]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	4959      	ldr	r1, [pc, #356]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d017      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f7a:	4b4e      	ldr	r3, [pc, #312]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	494a      	ldr	r1, [pc, #296]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f98:	d101      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 808b 	beq.w	80040de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fc8:	4b3a      	ldr	r3, [pc, #232]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	4a39      	ldr	r2, [pc, #228]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd4:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fe0:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a34      	ldr	r2, [pc, #208]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fec:	f7fd fee0 	bl	8001db0 <HAL_GetTick>
 8003ff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff4:	f7fd fedc 	bl	8001db0 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e38d      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004006:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004012:	4b28      	ldr	r3, [pc, #160]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d035      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	429a      	cmp	r2, r3
 800402e:	d02e      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004030:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800403a:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a1d      	ldr	r2, [pc, #116]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004046:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a1a      	ldr	r2, [pc, #104]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004050:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004052:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004058:	4b16      	ldr	r3, [pc, #88]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d114      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd fea4 	bl	8001db0 <HAL_GetTick>
 8004068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406a:	e00a      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fd fea0 	bl	8001db0 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	f241 3288 	movw	r2, #5000	; 0x1388
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e34f      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004082:	4b0c      	ldr	r3, [pc, #48]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004096:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409a:	d111      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800409c:	4b05      	ldr	r3, [pc, #20]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040a8:	4b04      	ldr	r3, [pc, #16]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	4901      	ldr	r1, [pc, #4]	; (80040b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
 80040b2:	e00b      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40007000 	.word	0x40007000
 80040bc:	0ffffcff 	.word	0x0ffffcff
 80040c0:	4bb3      	ldr	r3, [pc, #716]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4ab2      	ldr	r2, [pc, #712]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040ca:	6093      	str	r3, [r2, #8]
 80040cc:	4bb0      	ldr	r3, [pc, #704]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d8:	49ad      	ldr	r1, [pc, #692]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d010      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ea:	4ba9      	ldr	r3, [pc, #676]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f0:	4aa7      	ldr	r2, [pc, #668]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040fa:	4ba5      	ldr	r3, [pc, #660]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	49a2      	ldr	r1, [pc, #648]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004118:	4b9d      	ldr	r3, [pc, #628]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004126:	499a      	ldr	r1, [pc, #616]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800413a:	4b95      	ldr	r3, [pc, #596]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800413c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004148:	4991      	ldr	r1, [pc, #580]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800415c:	4b8c      	ldr	r3, [pc, #560]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	4989      	ldr	r1, [pc, #548]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800417e:	4b84      	ldr	r3, [pc, #528]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	4980      	ldr	r1, [pc, #512]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a0:	4b7b      	ldr	r3, [pc, #492]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	4978      	ldr	r1, [pc, #480]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041c2:	4b73      	ldr	r3, [pc, #460]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c8:	f023 020c 	bic.w	r2, r3, #12
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d0:	496f      	ldr	r1, [pc, #444]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041e4:	4b6a      	ldr	r3, [pc, #424]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f2:	4967      	ldr	r1, [pc, #412]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004206:	4b62      	ldr	r3, [pc, #392]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	495e      	ldr	r1, [pc, #376]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	4956      	ldr	r1, [pc, #344]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800424a:	4b51      	ldr	r3, [pc, #324]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004250:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	494d      	ldr	r1, [pc, #308]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800426c:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	4945      	ldr	r1, [pc, #276]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800428e:	4b40      	ldr	r3, [pc, #256]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004294:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429c:	493c      	ldr	r1, [pc, #240]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042be:	4934      	ldr	r1, [pc, #208]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042d2:	4b2f      	ldr	r3, [pc, #188]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e0:	492b      	ldr	r1, [pc, #172]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f0:	d101      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004302:	2301      	movs	r3, #1
 8004304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004312:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	491b      	ldr	r1, [pc, #108]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00b      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004334:	4b16      	ldr	r3, [pc, #88]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004344:	4912      	ldr	r1, [pc, #72]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004368:	4909      	ldr	r1, [pc, #36]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00f      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800437e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004382:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438c:	e002      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
 8004394:	4985      	ldr	r1, [pc, #532]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043a8:	4b80      	ldr	r3, [pc, #512]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b8:	497c      	ldr	r1, [pc, #496]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d005      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043ce:	f040 80d6 	bne.w	800457e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043d2:	4b76      	ldr	r3, [pc, #472]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a75      	ldr	r2, [pc, #468]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043de:	f7fd fce7 	bl	8001db0 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043e6:	f7fd fce3 	bl	8001db0 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b64      	cmp	r3, #100	; 0x64
 80043f2:	d901      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e194      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043f8:	4b6c      	ldr	r3, [pc, #432]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d021      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	2b00      	cmp	r3, #0
 8004416:	d11d      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004418:	4b64      	ldr	r3, [pc, #400]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800441a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	f003 0303 	and.w	r3, r3, #3
 8004424:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004426:	4b61      	ldr	r3, [pc, #388]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442c:	0e1b      	lsrs	r3, r3, #24
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	019a      	lsls	r2, r3, #6
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	431a      	orrs	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	071b      	lsls	r3, r3, #28
 800444c:	4957      	ldr	r1, [pc, #348]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004468:	d00a      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02e      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800447e:	d129      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004480:	4b4a      	ldr	r3, [pc, #296]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	f003 0303 	and.w	r3, r3, #3
 800448c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800448e:	4b47      	ldr	r3, [pc, #284]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004494:	0f1b      	lsrs	r3, r3, #28
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	019a      	lsls	r2, r3, #6
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	431a      	orrs	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	071b      	lsls	r3, r3, #28
 80044b4:	493d      	ldr	r1, [pc, #244]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044bc:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044c2:	f023 021f 	bic.w	r2, r3, #31
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	3b01      	subs	r3, #1
 80044cc:	4937      	ldr	r1, [pc, #220]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01d      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044e0:	4b32      	ldr	r3, [pc, #200]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e6:	0e1b      	lsrs	r3, r3, #24
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044ee:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f4:	0f1b      	lsrs	r3, r3, #28
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	019a      	lsls	r2, r3, #6
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	041b      	lsls	r3, r3, #16
 8004508:	431a      	orrs	r2, r3
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	431a      	orrs	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	071b      	lsls	r3, r3, #28
 8004514:	4925      	ldr	r1, [pc, #148]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d011      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	019a      	lsls	r2, r3, #6
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	061b      	lsls	r3, r3, #24
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	071b      	lsls	r3, r3, #28
 8004544:	4919      	ldr	r1, [pc, #100]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800454c:	4b17      	ldr	r3, [pc, #92]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a16      	ldr	r2, [pc, #88]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004558:	f7fd fc2a 	bl	8001db0 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004560:	f7fd fc26 	bl	8001db0 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	; 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e0d7      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b01      	cmp	r3, #1
 8004582:	f040 80cd 	bne.w	8004720 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800458c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fd fc0d 	bl	8001db0 <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004598:	e00a      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800459a:	f7fd fc09 	bl	8001db0 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b64      	cmp	r3, #100	; 0x64
 80045a6:	d903      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0ba      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80045ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045b0:	4b5e      	ldr	r3, [pc, #376]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045bc:	d0ed      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02e      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d12a      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045e6:	4b51      	ldr	r3, [pc, #324]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	0c1b      	lsrs	r3, r3, #16
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045f4:	4b4d      	ldr	r3, [pc, #308]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fa:	0f1b      	lsrs	r3, r3, #28
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	019a      	lsls	r2, r3, #6
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	061b      	lsls	r3, r3, #24
 8004614:	431a      	orrs	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	071b      	lsls	r3, r3, #28
 800461a:	4944      	ldr	r1, [pc, #272]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004622:	4b42      	ldr	r3, [pc, #264]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004628:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	493d      	ldr	r1, [pc, #244]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d022      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800464c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004650:	d11d      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004658:	0e1b      	lsrs	r3, r3, #24
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004660:	4b32      	ldr	r3, [pc, #200]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	0f1b      	lsrs	r3, r3, #28
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	019a      	lsls	r2, r3, #6
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	431a      	orrs	r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	061b      	lsls	r3, r3, #24
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	071b      	lsls	r3, r3, #28
 8004686:	4929      	ldr	r1, [pc, #164]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d028      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	0e1b      	lsrs	r3, r3, #24
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046a8:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	019a      	lsls	r2, r3, #6
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	041b      	lsls	r3, r3, #16
 80046c0:	431a      	orrs	r2, r3
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	061b      	lsls	r3, r3, #24
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	071b      	lsls	r3, r3, #28
 80046ce:	4917      	ldr	r1, [pc, #92]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	4911      	ldr	r1, [pc, #68]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a0e      	ldr	r2, [pc, #56]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fd fb5a 	bl	8001db0 <HAL_GetTick>
 80046fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004700:	f7fd fb56 	bl	8001db0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b64      	cmp	r3, #100	; 0x64
 800470c:	d901      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e007      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800471a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800471e:	d1ef      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800

08004730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e01d      	b.n	800477e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd f852 	bl	8001800 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f000 f966 	bl	8004a40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2201      	movs	r2, #1
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fc4e 	bl	800503c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a17      	ldr	r2, [pc, #92]	; (8004804 <HAL_TIM_PWM_Start+0x7c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d004      	beq.n	80047b4 <HAL_TIM_PWM_Start+0x2c>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a16      	ldr	r2, [pc, #88]	; (8004808 <HAL_TIM_PWM_Start+0x80>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d101      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x30>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <HAL_TIM_PWM_Start+0x32>
 80047b8:	2300      	movs	r3, #0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <HAL_TIM_PWM_Start+0x84>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b06      	cmp	r3, #6
 80047de:	d00b      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x70>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e6:	d007      	beq.n	80047f8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40010400 	.word	0x40010400
 800480c:	00010007 	.word	0x00010007

08004810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004826:	2302      	movs	r3, #2
 8004828:	e105      	b.n	8004a36 <HAL_TIM_PWM_ConfigChannel+0x226>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b14      	cmp	r3, #20
 800483e:	f200 80f0 	bhi.w	8004a22 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	0800489d 	.word	0x0800489d
 800484c:	08004a23 	.word	0x08004a23
 8004850:	08004a23 	.word	0x08004a23
 8004854:	08004a23 	.word	0x08004a23
 8004858:	080048dd 	.word	0x080048dd
 800485c:	08004a23 	.word	0x08004a23
 8004860:	08004a23 	.word	0x08004a23
 8004864:	08004a23 	.word	0x08004a23
 8004868:	0800491f 	.word	0x0800491f
 800486c:	08004a23 	.word	0x08004a23
 8004870:	08004a23 	.word	0x08004a23
 8004874:	08004a23 	.word	0x08004a23
 8004878:	0800495f 	.word	0x0800495f
 800487c:	08004a23 	.word	0x08004a23
 8004880:	08004a23 	.word	0x08004a23
 8004884:	08004a23 	.word	0x08004a23
 8004888:	080049a1 	.word	0x080049a1
 800488c:	08004a23 	.word	0x08004a23
 8004890:	08004a23 	.word	0x08004a23
 8004894:	08004a23 	.word	0x08004a23
 8004898:	080049e1 	.word	0x080049e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f96c 	bl	8004b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0208 	orr.w	r2, r2, #8
 80048b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0204 	bic.w	r2, r2, #4
 80048c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	6999      	ldr	r1, [r3, #24]
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	619a      	str	r2, [r3, #24]
      break;
 80048da:	e0a3      	b.n	8004a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f9be 	bl	8004c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699a      	ldr	r2, [r3, #24]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6999      	ldr	r1, [r3, #24]
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	021a      	lsls	r2, r3, #8
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	619a      	str	r2, [r3, #24]
      break;
 800491c:	e082      	b.n	8004a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fa15 	bl	8004d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0208 	orr.w	r2, r2, #8
 8004938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0204 	bic.w	r2, r2, #4
 8004948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69d9      	ldr	r1, [r3, #28]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	691a      	ldr	r2, [r3, #16]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	61da      	str	r2, [r3, #28]
      break;
 800495c:	e062      	b.n	8004a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fa6b 	bl	8004e40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69d9      	ldr	r1, [r3, #28]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	021a      	lsls	r2, r3, #8
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	61da      	str	r2, [r3, #28]
      break;
 800499e:	e041      	b.n	8004a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 faa2 	bl	8004ef0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0208 	orr.w	r2, r2, #8
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0204 	bic.w	r2, r2, #4
 80049ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049de:	e021      	b.n	8004a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fad4 	bl	8004f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	021a      	lsls	r2, r3, #8
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004a20:	e000      	b.n	8004a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004a22:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop

08004a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a40      	ldr	r2, [pc, #256]	; (8004b54 <TIM_Base_SetConfig+0x114>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5e:	d00f      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3d      	ldr	r2, [pc, #244]	; (8004b58 <TIM_Base_SetConfig+0x118>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3c      	ldr	r2, [pc, #240]	; (8004b5c <TIM_Base_SetConfig+0x11c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a3b      	ldr	r2, [pc, #236]	; (8004b60 <TIM_Base_SetConfig+0x120>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0x40>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a3a      	ldr	r2, [pc, #232]	; (8004b64 <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2f      	ldr	r2, [pc, #188]	; (8004b54 <TIM_Base_SetConfig+0x114>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d02b      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa0:	d027      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2c      	ldr	r2, [pc, #176]	; (8004b58 <TIM_Base_SetConfig+0x118>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d023      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <TIM_Base_SetConfig+0x11c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01f      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a2a      	ldr	r2, [pc, #168]	; (8004b60 <TIM_Base_SetConfig+0x120>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01b      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <TIM_Base_SetConfig+0x124>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d017      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a28      	ldr	r2, [pc, #160]	; (8004b68 <TIM_Base_SetConfig+0x128>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a27      	ldr	r2, [pc, #156]	; (8004b6c <TIM_Base_SetConfig+0x12c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00f      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a26      	ldr	r2, [pc, #152]	; (8004b70 <TIM_Base_SetConfig+0x130>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a25      	ldr	r2, [pc, #148]	; (8004b74 <TIM_Base_SetConfig+0x134>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a24      	ldr	r2, [pc, #144]	; (8004b78 <TIM_Base_SetConfig+0x138>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_Base_SetConfig+0xb2>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <TIM_Base_SetConfig+0x13c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d108      	bne.n	8004b04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0a      	ldr	r2, [pc, #40]	; (8004b54 <TIM_Base_SetConfig+0x114>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_Base_SetConfig+0xf8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0c      	ldr	r2, [pc, #48]	; (8004b64 <TIM_Base_SetConfig+0x124>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d103      	bne.n	8004b40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	615a      	str	r2, [r3, #20]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400
 8004b70:	40014800 	.word	0x40014800
 8004b74:	40001800 	.word	0x40001800
 8004b78:	40001c00 	.word	0x40001c00
 8004b7c:	40002000 	.word	0x40002000

08004b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f023 0201 	bic.w	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4b2b      	ldr	r3, [pc, #172]	; (8004c58 <TIM_OC1_SetConfig+0xd8>)
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0302 	bic.w	r3, r3, #2
 8004bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a21      	ldr	r2, [pc, #132]	; (8004c5c <TIM_OC1_SetConfig+0xdc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC1_SetConfig+0x64>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a20      	ldr	r2, [pc, #128]	; (8004c60 <TIM_OC1_SetConfig+0xe0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10c      	bne.n	8004bfe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0308 	bic.w	r3, r3, #8
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f023 0304 	bic.w	r3, r3, #4
 8004bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a16      	ldr	r2, [pc, #88]	; (8004c5c <TIM_OC1_SetConfig+0xdc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d003      	beq.n	8004c0e <TIM_OC1_SetConfig+0x8e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a15      	ldr	r2, [pc, #84]	; (8004c60 <TIM_OC1_SetConfig+0xe0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d111      	bne.n	8004c32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	621a      	str	r2, [r3, #32]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	fffeff8f 	.word	0xfffeff8f
 8004c5c:	40010000 	.word	0x40010000
 8004c60:	40010400 	.word	0x40010400

08004c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f023 0210 	bic.w	r2, r3, #16
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4b2e      	ldr	r3, [pc, #184]	; (8004d48 <TIM_OC2_SetConfig+0xe4>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f023 0320 	bic.w	r3, r3, #32
 8004cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a23      	ldr	r2, [pc, #140]	; (8004d4c <TIM_OC2_SetConfig+0xe8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_OC2_SetConfig+0x68>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <TIM_OC2_SetConfig+0xec>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10d      	bne.n	8004ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <TIM_OC2_SetConfig+0xe8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC2_SetConfig+0x94>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <TIM_OC2_SetConfig+0xec>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d113      	bne.n	8004d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	feff8fff 	.word	0xfeff8fff
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40010400 	.word	0x40010400

08004d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4b2d      	ldr	r3, [pc, #180]	; (8004e34 <TIM_OC3_SetConfig+0xe0>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0303 	bic.w	r3, r3, #3
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a22      	ldr	r2, [pc, #136]	; (8004e38 <TIM_OC3_SetConfig+0xe4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_OC3_SetConfig+0x66>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a21      	ldr	r2, [pc, #132]	; (8004e3c <TIM_OC3_SetConfig+0xe8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d10d      	bne.n	8004dd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <TIM_OC3_SetConfig+0xe4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_OC3_SetConfig+0x92>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <TIM_OC3_SetConfig+0xe8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d113      	bne.n	8004e0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	fffeff8f 	.word	0xfffeff8f
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400

08004e40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <TIM_OC4_SetConfig+0xa4>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <TIM_OC4_SetConfig+0xa8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x68>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a12      	ldr	r2, [pc, #72]	; (8004eec <TIM_OC4_SetConfig+0xac>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d109      	bne.n	8004ebc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	019b      	lsls	r3, r3, #6
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	feff8fff 	.word	0xfeff8fff
 8004ee8:	40010000 	.word	0x40010000
 8004eec:	40010400 	.word	0x40010400

08004ef0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <TIM_OC5_SetConfig+0x98>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a12      	ldr	r2, [pc, #72]	; (8004f8c <TIM_OC5_SetConfig+0x9c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d003      	beq.n	8004f4e <TIM_OC5_SetConfig+0x5e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <TIM_OC5_SetConfig+0xa0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d109      	bne.n	8004f62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	021b      	lsls	r3, r3, #8
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	621a      	str	r2, [r3, #32]
}
 8004f7c:	bf00      	nop
 8004f7e:	371c      	adds	r7, #28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	fffeff8f 	.word	0xfffeff8f
 8004f8c:	40010000 	.word	0x40010000
 8004f90:	40010400 	.word	0x40010400

08004f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <TIM_OC6_SetConfig+0x9c>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	051b      	lsls	r3, r3, #20
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <TIM_OC6_SetConfig+0xa0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC6_SetConfig+0x60>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a12      	ldr	r2, [pc, #72]	; (8005038 <TIM_OC6_SetConfig+0xa4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d109      	bne.n	8005008 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	029b      	lsls	r3, r3, #10
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	feff8fff 	.word	0xfeff8fff
 8005034:	40010000 	.word	0x40010000
 8005038:	40010400 	.word	0x40010400

0800503c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 031f 	and.w	r3, r3, #31
 800504e:	2201      	movs	r2, #1
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1a      	ldr	r2, [r3, #32]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	43db      	mvns	r3, r3
 800505e:	401a      	ands	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1a      	ldr	r2, [r3, #32]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 031f 	and.w	r3, r3, #31
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	fa01 f303 	lsl.w	r3, r1, r3
 8005074:	431a      	orrs	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800509c:	2302      	movs	r3, #2
 800509e:	e06d      	b.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a30      	ldr	r2, [pc, #192]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a2f      	ldr	r2, [pc, #188]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d108      	bne.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a20      	ldr	r2, [pc, #128]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d022      	beq.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005112:	d01d      	beq.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d018      	beq.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d013      	beq.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1a      	ldr	r2, [pc, #104]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00e      	beq.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d009      	beq.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a16      	ldr	r2, [pc, #88]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d10c      	bne.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005156:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	4313      	orrs	r3, r2
 8005160:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40010000 	.word	0x40010000
 800518c:	40010400 	.word	0x40010400
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	40000c00 	.word	0x40000c00
 800519c:	40014000 	.word	0x40014000
 80051a0:	40001800 	.word	0x40001800

080051a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e065      	b.n	800528c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	4313      	orrs	r3, r2
 8005238:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a14      	ldr	r2, [pc, #80]	; (800529c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d115      	bne.n	800527a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	051b      	lsls	r3, r3, #20
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	4313      	orrs	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40010000 	.word	0x40010000
 800529c:	40010400 	.word	0x40010400

080052a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e040      	b.n	8005334 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fc fb30 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2224      	movs	r2, #36	; 0x24
 80052cc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 faae 	bl	8005840 <UART_SetConfig>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e022      	b.n	8005334 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fd4c 	bl	8005d94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800530a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800531a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fdd3 	bl	8005ed8 <UART_CheckIdleState>
 8005332:	4603      	mov	r3, r0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	4613      	mov	r3, r2
 8005348:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534e:	2b20      	cmp	r3, #32
 8005350:	d164      	bne.n	800541c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <HAL_UART_Transmit_DMA+0x22>
 8005358:	88fb      	ldrh	r3, [r7, #6]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e05d      	b.n	800541e <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_UART_Transmit_DMA+0x34>
 800536c:	2302      	movs	r3, #2
 800536e:	e056      	b.n	800541e <HAL_UART_Transmit_DMA+0xe2>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	88fa      	ldrh	r2, [r7, #6]
 8005382:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	88fa      	ldrh	r2, [r7, #6]
 800538a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2221      	movs	r2, #33	; 0x21
 8005398:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d02a      	beq.n	80053f8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a6:	4a20      	ldr	r2, [pc, #128]	; (8005428 <HAL_UART_Transmit_DMA+0xec>)
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ae:	4a1f      	ldr	r2, [pc, #124]	; (800542c <HAL_UART_Transmit_DMA+0xf0>)
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053b6:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <HAL_UART_Transmit_DMA+0xf4>)
 80053b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053be:	2200      	movs	r2, #0
 80053c0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	4619      	mov	r1, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3328      	adds	r3, #40	; 0x28
 80053d2:	461a      	mov	r2, r3
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	f7fc fed9 	bl	800218c <HAL_DMA_Start_IT>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00b      	beq.n	80053f8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2210      	movs	r2, #16
 80053e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e012      	b.n	800541e <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	2240      	movs	r2, #64	; 0x40
 80053fe:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005416:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	080060c3 	.word	0x080060c3
 800542c:	08006113 	.word	0x08006113
 8005430:	080061af 	.word	0x080061af

08005434 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	4613      	mov	r3, r2
 8005440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005446:	2b20      	cmp	r3, #32
 8005448:	d16c      	bne.n	8005524 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_UART_Receive_DMA+0x22>
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e065      	b.n	8005526 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005460:	2b01      	cmp	r3, #1
 8005462:	d101      	bne.n	8005468 <HAL_UART_Receive_DMA+0x34>
 8005464:	2302      	movs	r3, #2
 8005466:	e05e      	b.n	8005526 <HAL_UART_Receive_DMA+0xf2>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2222      	movs	r2, #34	; 0x22
 8005488:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02a      	beq.n	80054e8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005496:	4a26      	ldr	r2, [pc, #152]	; (8005530 <HAL_UART_Receive_DMA+0xfc>)
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549e:	4a25      	ldr	r2, [pc, #148]	; (8005534 <HAL_UART_Receive_DMA+0x100>)
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a6:	4a24      	ldr	r2, [pc, #144]	; (8005538 <HAL_UART_Receive_DMA+0x104>)
 80054a8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ae:	2200      	movs	r2, #0
 80054b0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3324      	adds	r3, #36	; 0x24
 80054bc:	4619      	mov	r1, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c2:	461a      	mov	r2, r3
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	f7fc fe61 	bl	800218c <HAL_DMA_Start_IT>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2210      	movs	r2, #16
 80054d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e01e      	b.n	8005526 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054fe:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	e000      	b.n	8005526 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	0800612f 	.word	0x0800612f
 8005534:	08006193 	.word	0x08006193
 8005538:	080061af 	.word	0x080061af

0800553c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005562:	4013      	ands	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d113      	bne.n	8005594 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00e      	beq.n	8005594 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8114 	beq.w	80057b2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
      }
      return;
 8005592:	e10e      	b.n	80057b2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80d6 	beq.w	8005748 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d105      	bne.n	80055b2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 80cb 	beq.w	8005748 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <HAL_UART_IRQHandler+0x9e>
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d2:	f043 0201 	orr.w	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00e      	beq.n	8005602 <HAL_UART_IRQHandler+0xc6>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2202      	movs	r2, #2
 80055f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055fa:	f043 0204 	orr.w	r2, r3, #4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00e      	beq.n	800562a <HAL_UART_IRQHandler+0xee>
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2204      	movs	r2, #4
 800561c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005622:	f043 0202 	orr.w	r2, r3, #2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d013      	beq.n	800565c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d104      	bne.n	8005648 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005644:	2b00      	cmp	r3, #0
 8005646:	d009      	beq.n	800565c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2208      	movs	r2, #8
 800564e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005654:	f043 0208 	orr.w	r2, r3, #8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00f      	beq.n	8005686 <HAL_UART_IRQHandler+0x14a>
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800567e:	f043 0220 	orr.w	r2, r3, #32
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8093 	beq.w	80057b6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d007      	beq.n	80056b4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d004      	beq.n	80056d2 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d031      	beq.n	8005736 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 fcd5 	bl	8006082 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d123      	bne.n	800572e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005702:	4a30      	ldr	r2, [pc, #192]	; (80057c4 <HAL_UART_IRQHandler+0x288>)
 8005704:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570a:	4618      	mov	r0, r3
 800570c:	f7fc fd9e 	bl	800224c <HAL_DMA_Abort_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d016      	beq.n	8005744 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800571a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005724:	e00e      	b.n	8005744 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f876 	bl	8005818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	e00a      	b.n	8005744 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f872 	bl	8005818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	e006      	b.n	8005744 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f86e 	bl	8005818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8005742:	e038      	b.n	80057b6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	bf00      	nop
    return;
 8005746:	e036      	b.n	80057b6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <HAL_UART_IRQHandler+0x232>
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f860 	bl	800582c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800576c:	e026      	b.n	80057bc <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005786:	2b00      	cmp	r3, #0
 8005788:	d017      	beq.n	80057ba <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
    }
    return;
 8005792:	e012      	b.n	80057ba <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00e      	beq.n	80057bc <HAL_UART_IRQHandler+0x280>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fd52 	bl	8006252 <UART_EndTransmit_IT>
    return;
 80057ae:	bf00      	nop
 80057b0:	e004      	b.n	80057bc <HAL_UART_IRQHandler+0x280>
      return;
 80057b2:	bf00      	nop
 80057b4:	e002      	b.n	80057bc <HAL_UART_IRQHandler+0x280>
    return;
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <HAL_UART_IRQHandler+0x280>
    return;
 80057ba:	bf00      	nop
  }

}
 80057bc:	3720      	adds	r7, #32
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	08006227 	.word	0x08006227

080057c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4bb1      	ldr	r3, [pc, #708]	; (8005b34 <UART_SetConfig+0x2f4>)
 8005870:	4013      	ands	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	6939      	ldr	r1, [r7, #16]
 8005878:	430b      	orrs	r3, r1
 800587a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68da      	ldr	r2, [r3, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a9f      	ldr	r2, [pc, #636]	; (8005b38 <UART_SetConfig+0x2f8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d121      	bne.n	8005904 <UART_SetConfig+0xc4>
 80058c0:	4b9e      	ldr	r3, [pc, #632]	; (8005b3c <UART_SetConfig+0x2fc>)
 80058c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d816      	bhi.n	80058fc <UART_SetConfig+0xbc>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <UART_SetConfig+0x94>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	080058e5 	.word	0x080058e5
 80058d8:	080058f1 	.word	0x080058f1
 80058dc:	080058eb 	.word	0x080058eb
 80058e0:	080058f7 	.word	0x080058f7
 80058e4:	2301      	movs	r3, #1
 80058e6:	77fb      	strb	r3, [r7, #31]
 80058e8:	e151      	b.n	8005b8e <UART_SetConfig+0x34e>
 80058ea:	2302      	movs	r3, #2
 80058ec:	77fb      	strb	r3, [r7, #31]
 80058ee:	e14e      	b.n	8005b8e <UART_SetConfig+0x34e>
 80058f0:	2304      	movs	r3, #4
 80058f2:	77fb      	strb	r3, [r7, #31]
 80058f4:	e14b      	b.n	8005b8e <UART_SetConfig+0x34e>
 80058f6:	2308      	movs	r3, #8
 80058f8:	77fb      	strb	r3, [r7, #31]
 80058fa:	e148      	b.n	8005b8e <UART_SetConfig+0x34e>
 80058fc:	2310      	movs	r3, #16
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	bf00      	nop
 8005902:	e144      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a8d      	ldr	r2, [pc, #564]	; (8005b40 <UART_SetConfig+0x300>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d134      	bne.n	8005978 <UART_SetConfig+0x138>
 800590e:	4b8b      	ldr	r3, [pc, #556]	; (8005b3c <UART_SetConfig+0x2fc>)
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	f003 030c 	and.w	r3, r3, #12
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d829      	bhi.n	8005970 <UART_SetConfig+0x130>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0xe4>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005959 	.word	0x08005959
 8005928:	08005971 	.word	0x08005971
 800592c:	08005971 	.word	0x08005971
 8005930:	08005971 	.word	0x08005971
 8005934:	08005965 	.word	0x08005965
 8005938:	08005971 	.word	0x08005971
 800593c:	08005971 	.word	0x08005971
 8005940:	08005971 	.word	0x08005971
 8005944:	0800595f 	.word	0x0800595f
 8005948:	08005971 	.word	0x08005971
 800594c:	08005971 	.word	0x08005971
 8005950:	08005971 	.word	0x08005971
 8005954:	0800596b 	.word	0x0800596b
 8005958:	2300      	movs	r3, #0
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e117      	b.n	8005b8e <UART_SetConfig+0x34e>
 800595e:	2302      	movs	r3, #2
 8005960:	77fb      	strb	r3, [r7, #31]
 8005962:	e114      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005964:	2304      	movs	r3, #4
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e111      	b.n	8005b8e <UART_SetConfig+0x34e>
 800596a:	2308      	movs	r3, #8
 800596c:	77fb      	strb	r3, [r7, #31]
 800596e:	e10e      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005970:	2310      	movs	r3, #16
 8005972:	77fb      	strb	r3, [r7, #31]
 8005974:	bf00      	nop
 8005976:	e10a      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a71      	ldr	r2, [pc, #452]	; (8005b44 <UART_SetConfig+0x304>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d120      	bne.n	80059c4 <UART_SetConfig+0x184>
 8005982:	4b6e      	ldr	r3, [pc, #440]	; (8005b3c <UART_SetConfig+0x2fc>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800598c:	2b10      	cmp	r3, #16
 800598e:	d00f      	beq.n	80059b0 <UART_SetConfig+0x170>
 8005990:	2b10      	cmp	r3, #16
 8005992:	d802      	bhi.n	800599a <UART_SetConfig+0x15a>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <UART_SetConfig+0x164>
 8005998:	e010      	b.n	80059bc <UART_SetConfig+0x17c>
 800599a:	2b20      	cmp	r3, #32
 800599c:	d005      	beq.n	80059aa <UART_SetConfig+0x16a>
 800599e:	2b30      	cmp	r3, #48	; 0x30
 80059a0:	d009      	beq.n	80059b6 <UART_SetConfig+0x176>
 80059a2:	e00b      	b.n	80059bc <UART_SetConfig+0x17c>
 80059a4:	2300      	movs	r3, #0
 80059a6:	77fb      	strb	r3, [r7, #31]
 80059a8:	e0f1      	b.n	8005b8e <UART_SetConfig+0x34e>
 80059aa:	2302      	movs	r3, #2
 80059ac:	77fb      	strb	r3, [r7, #31]
 80059ae:	e0ee      	b.n	8005b8e <UART_SetConfig+0x34e>
 80059b0:	2304      	movs	r3, #4
 80059b2:	77fb      	strb	r3, [r7, #31]
 80059b4:	e0eb      	b.n	8005b8e <UART_SetConfig+0x34e>
 80059b6:	2308      	movs	r3, #8
 80059b8:	77fb      	strb	r3, [r7, #31]
 80059ba:	e0e8      	b.n	8005b8e <UART_SetConfig+0x34e>
 80059bc:	2310      	movs	r3, #16
 80059be:	77fb      	strb	r3, [r7, #31]
 80059c0:	bf00      	nop
 80059c2:	e0e4      	b.n	8005b8e <UART_SetConfig+0x34e>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a5f      	ldr	r2, [pc, #380]	; (8005b48 <UART_SetConfig+0x308>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d120      	bne.n	8005a10 <UART_SetConfig+0x1d0>
 80059ce:	4b5b      	ldr	r3, [pc, #364]	; (8005b3c <UART_SetConfig+0x2fc>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d00f      	beq.n	80059fc <UART_SetConfig+0x1bc>
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	d802      	bhi.n	80059e6 <UART_SetConfig+0x1a6>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <UART_SetConfig+0x1b0>
 80059e4:	e010      	b.n	8005a08 <UART_SetConfig+0x1c8>
 80059e6:	2b80      	cmp	r3, #128	; 0x80
 80059e8:	d005      	beq.n	80059f6 <UART_SetConfig+0x1b6>
 80059ea:	2bc0      	cmp	r3, #192	; 0xc0
 80059ec:	d009      	beq.n	8005a02 <UART_SetConfig+0x1c2>
 80059ee:	e00b      	b.n	8005a08 <UART_SetConfig+0x1c8>
 80059f0:	2300      	movs	r3, #0
 80059f2:	77fb      	strb	r3, [r7, #31]
 80059f4:	e0cb      	b.n	8005b8e <UART_SetConfig+0x34e>
 80059f6:	2302      	movs	r3, #2
 80059f8:	77fb      	strb	r3, [r7, #31]
 80059fa:	e0c8      	b.n	8005b8e <UART_SetConfig+0x34e>
 80059fc:	2304      	movs	r3, #4
 80059fe:	77fb      	strb	r3, [r7, #31]
 8005a00:	e0c5      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a02:	2308      	movs	r3, #8
 8005a04:	77fb      	strb	r3, [r7, #31]
 8005a06:	e0c2      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	bf00      	nop
 8005a0e:	e0be      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a4d      	ldr	r2, [pc, #308]	; (8005b4c <UART_SetConfig+0x30c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d124      	bne.n	8005a64 <UART_SetConfig+0x224>
 8005a1a:	4b48      	ldr	r3, [pc, #288]	; (8005b3c <UART_SetConfig+0x2fc>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a28:	d012      	beq.n	8005a50 <UART_SetConfig+0x210>
 8005a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2e:	d802      	bhi.n	8005a36 <UART_SetConfig+0x1f6>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <UART_SetConfig+0x204>
 8005a34:	e012      	b.n	8005a5c <UART_SetConfig+0x21c>
 8005a36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3a:	d006      	beq.n	8005a4a <UART_SetConfig+0x20a>
 8005a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a40:	d009      	beq.n	8005a56 <UART_SetConfig+0x216>
 8005a42:	e00b      	b.n	8005a5c <UART_SetConfig+0x21c>
 8005a44:	2300      	movs	r3, #0
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e0a1      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e09e      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a50:	2304      	movs	r3, #4
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e09b      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a56:	2308      	movs	r3, #8
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e098      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a5c:	2310      	movs	r3, #16
 8005a5e:	77fb      	strb	r3, [r7, #31]
 8005a60:	bf00      	nop
 8005a62:	e094      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a39      	ldr	r2, [pc, #228]	; (8005b50 <UART_SetConfig+0x310>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d124      	bne.n	8005ab8 <UART_SetConfig+0x278>
 8005a6e:	4b33      	ldr	r3, [pc, #204]	; (8005b3c <UART_SetConfig+0x2fc>)
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7c:	d012      	beq.n	8005aa4 <UART_SetConfig+0x264>
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d802      	bhi.n	8005a8a <UART_SetConfig+0x24a>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d007      	beq.n	8005a98 <UART_SetConfig+0x258>
 8005a88:	e012      	b.n	8005ab0 <UART_SetConfig+0x270>
 8005a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a8e:	d006      	beq.n	8005a9e <UART_SetConfig+0x25e>
 8005a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a94:	d009      	beq.n	8005aaa <UART_SetConfig+0x26a>
 8005a96:	e00b      	b.n	8005ab0 <UART_SetConfig+0x270>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e077      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	77fb      	strb	r3, [r7, #31]
 8005aa2:	e074      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	77fb      	strb	r3, [r7, #31]
 8005aa8:	e071      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005aaa:	2308      	movs	r3, #8
 8005aac:	77fb      	strb	r3, [r7, #31]
 8005aae:	e06e      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	77fb      	strb	r3, [r7, #31]
 8005ab4:	bf00      	nop
 8005ab6:	e06a      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a25      	ldr	r2, [pc, #148]	; (8005b54 <UART_SetConfig+0x314>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d124      	bne.n	8005b0c <UART_SetConfig+0x2cc>
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	; (8005b3c <UART_SetConfig+0x2fc>)
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad0:	d012      	beq.n	8005af8 <UART_SetConfig+0x2b8>
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad6:	d802      	bhi.n	8005ade <UART_SetConfig+0x29e>
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <UART_SetConfig+0x2ac>
 8005adc:	e012      	b.n	8005b04 <UART_SetConfig+0x2c4>
 8005ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ae2:	d006      	beq.n	8005af2 <UART_SetConfig+0x2b2>
 8005ae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ae8:	d009      	beq.n	8005afe <UART_SetConfig+0x2be>
 8005aea:	e00b      	b.n	8005b04 <UART_SetConfig+0x2c4>
 8005aec:	2300      	movs	r3, #0
 8005aee:	77fb      	strb	r3, [r7, #31]
 8005af0:	e04d      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005af2:	2302      	movs	r3, #2
 8005af4:	77fb      	strb	r3, [r7, #31]
 8005af6:	e04a      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005af8:	2304      	movs	r3, #4
 8005afa:	77fb      	strb	r3, [r7, #31]
 8005afc:	e047      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005afe:	2308      	movs	r3, #8
 8005b00:	77fb      	strb	r3, [r7, #31]
 8005b02:	e044      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005b04:	2310      	movs	r3, #16
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	bf00      	nop
 8005b0a:	e040      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <UART_SetConfig+0x318>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d139      	bne.n	8005b8a <UART_SetConfig+0x34a>
 8005b16:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <UART_SetConfig+0x2fc>)
 8005b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b24:	d027      	beq.n	8005b76 <UART_SetConfig+0x336>
 8005b26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b2a:	d817      	bhi.n	8005b5c <UART_SetConfig+0x31c>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01c      	beq.n	8005b6a <UART_SetConfig+0x32a>
 8005b30:	e027      	b.n	8005b82 <UART_SetConfig+0x342>
 8005b32:	bf00      	nop
 8005b34:	efff69f3 	.word	0xefff69f3
 8005b38:	40011000 	.word	0x40011000
 8005b3c:	40023800 	.word	0x40023800
 8005b40:	40004400 	.word	0x40004400
 8005b44:	40004800 	.word	0x40004800
 8005b48:	40004c00 	.word	0x40004c00
 8005b4c:	40005000 	.word	0x40005000
 8005b50:	40011400 	.word	0x40011400
 8005b54:	40007800 	.word	0x40007800
 8005b58:	40007c00 	.word	0x40007c00
 8005b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b60:	d006      	beq.n	8005b70 <UART_SetConfig+0x330>
 8005b62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b66:	d009      	beq.n	8005b7c <UART_SetConfig+0x33c>
 8005b68:	e00b      	b.n	8005b82 <UART_SetConfig+0x342>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e00e      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005b70:	2302      	movs	r3, #2
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e00b      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005b76:	2304      	movs	r3, #4
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e008      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e005      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005b82:	2310      	movs	r3, #16
 8005b84:	77fb      	strb	r3, [r7, #31]
 8005b86:	bf00      	nop
 8005b88:	e001      	b.n	8005b8e <UART_SetConfig+0x34e>
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b96:	d17f      	bne.n	8005c98 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005b98:	7ffb      	ldrb	r3, [r7, #31]
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d85c      	bhi.n	8005c58 <UART_SetConfig+0x418>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <UART_SetConfig+0x364>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005be9 	.word	0x08005be9
 8005bac:	08005c09 	.word	0x08005c09
 8005bb0:	08005c59 	.word	0x08005c59
 8005bb4:	08005c21 	.word	0x08005c21
 8005bb8:	08005c59 	.word	0x08005c59
 8005bbc:	08005c59 	.word	0x08005c59
 8005bc0:	08005c59 	.word	0x08005c59
 8005bc4:	08005c41 	.word	0x08005c41
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f7fe f948 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 8005bcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	005a      	lsls	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	085b      	lsrs	r3, r3, #1
 8005bd8:	441a      	add	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	61bb      	str	r3, [r7, #24]
        break;
 8005be6:	e03a      	b.n	8005c5e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005be8:	f7fe f94c 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8005bec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	005a      	lsls	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	441a      	add	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	61bb      	str	r3, [r7, #24]
        break;
 8005c06:	e02a      	b.n	8005c5e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	085a      	lsrs	r2, r3, #1
 8005c0e:	4b5f      	ldr	r3, [pc, #380]	; (8005d8c <UART_SetConfig+0x54c>)
 8005c10:	4413      	add	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6852      	ldr	r2, [r2, #4]
 8005c16:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	61bb      	str	r3, [r7, #24]
        break;
 8005c1e:	e01e      	b.n	8005c5e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c20:	f7fe f85e 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005c24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	005a      	lsls	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	441a      	add	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	61bb      	str	r3, [r7, #24]
        break;
 8005c3e:	e00e      	b.n	8005c5e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	085b      	lsrs	r3, r3, #1
 8005c46:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	61bb      	str	r3, [r7, #24]
        break;
 8005c56:	e002      	b.n	8005c5e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	75fb      	strb	r3, [r7, #23]
        break;
 8005c5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	2b0f      	cmp	r3, #15
 8005c62:	d916      	bls.n	8005c92 <UART_SetConfig+0x452>
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6a:	d212      	bcs.n	8005c92 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f023 030f 	bic.w	r3, r3, #15
 8005c74:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	897b      	ldrh	r3, [r7, #10]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	897a      	ldrh	r2, [r7, #10]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	e070      	b.n	8005d74 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	75fb      	strb	r3, [r7, #23]
 8005c96:	e06d      	b.n	8005d74 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005c98:	7ffb      	ldrb	r3, [r7, #31]
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d859      	bhi.n	8005d52 <UART_SetConfig+0x512>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0x464>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005d05 	.word	0x08005d05
 8005cb0:	08005d53 	.word	0x08005d53
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005d53 	.word	0x08005d53
 8005cbc:	08005d53 	.word	0x08005d53
 8005cc0:	08005d53 	.word	0x08005d53
 8005cc4:	08005d3b 	.word	0x08005d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fe f8c8 	bl	8003e5c <HAL_RCC_GetPCLK1Freq>
 8005ccc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	085a      	lsrs	r2, r3, #1
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	441a      	add	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	61bb      	str	r3, [r7, #24]
        break;
 8005ce4:	e038      	b.n	8005d58 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce6:	f7fe f8cd 	bl	8003e84 <HAL_RCC_GetPCLK2Freq>
 8005cea:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	085a      	lsrs	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	61bb      	str	r3, [r7, #24]
        break;
 8005d02:	e029      	b.n	8005d58 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	085a      	lsrs	r2, r3, #1
 8005d0a:	4b21      	ldr	r3, [pc, #132]	; (8005d90 <UART_SetConfig+0x550>)
 8005d0c:	4413      	add	r3, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6852      	ldr	r2, [r2, #4]
 8005d12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	61bb      	str	r3, [r7, #24]
        break;
 8005d1a:	e01d      	b.n	8005d58 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1c:	f7fd ffe0 	bl	8003ce0 <HAL_RCC_GetSysClockFreq>
 8005d20:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	085a      	lsrs	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	441a      	add	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	61bb      	str	r3, [r7, #24]
        break;
 8005d38:	e00e      	b.n	8005d58 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	61bb      	str	r3, [r7, #24]
        break;
 8005d50:	e002      	b.n	8005d58 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	75fb      	strb	r3, [r7, #23]
        break;
 8005d56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b0f      	cmp	r3, #15
 8005d5c:	d908      	bls.n	8005d70 <UART_SetConfig+0x530>
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d64:	d204      	bcs.n	8005d70 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	60da      	str	r2, [r3, #12]
 8005d6e:	e001      	b.n	8005d74 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	01e84800 	.word	0x01e84800
 8005d90:	00f42400 	.word	0x00f42400

08005d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00a      	beq.n	8005dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01a      	beq.n	8005eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e92:	d10a      	bne.n	8005eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00a      	beq.n	8005ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	605a      	str	r2, [r3, #4]
  }
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ee6:	f7fb ff63 	bl	8001db0 <HAL_GetTick>
 8005eea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d10e      	bne.n	8005f18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005efa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f82a 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e020      	b.n	8005f5a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d10e      	bne.n	8005f44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f814 	bl	8005f62 <UART_WaitOnFlagUntilTimeout>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d001      	beq.n	8005f44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e00a      	b.n	8005f5a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b084      	sub	sp, #16
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	603b      	str	r3, [r7, #0]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f72:	e05d      	b.n	8006030 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d059      	beq.n	8006030 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7c:	f7fb ff18 	bl	8001db0 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d302      	bcc.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11b      	bne.n	8005fca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fa0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e042      	b.n	8006050 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02b      	beq.n	8006030 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe6:	d123      	bne.n	8006030 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006000:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e00f      	b.n	8006050 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69da      	ldr	r2, [r3, #28]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4013      	ands	r3, r2
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	429a      	cmp	r2, r3
 800603e:	bf0c      	ite	eq
 8006040:	2301      	moveq	r3, #1
 8006042:	2300      	movne	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	429a      	cmp	r2, r3
 800604c:	d092      	beq.n	8005f74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800606e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2220      	movs	r2, #32
 8006074:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006098:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	661a      	str	r2, [r3, #96]	; 0x60
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d8:	d014      	beq.n	8006104 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006100:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006102:	e002      	b.n	800610a <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff fb5f 	bl	80057c8 <HAL_UART_TxCpltCallback>
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f7ff fb5b 	bl	80057dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006144:	d01e      	beq.n	8006184 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800615c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff fb33 	bl	80057f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff fb2f 	bl	8005804 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b086      	sub	sp, #24
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061c0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d2:	2b80      	cmp	r3, #128	; 0x80
 80061d4:	d109      	bne.n	80061ea <UART_DMAError+0x3c>
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b21      	cmp	r3, #33	; 0x21
 80061da:	d106      	bne.n	80061ea <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80061e4:	6978      	ldr	r0, [r7, #20]
 80061e6:	f7ff ff37 	bl	8006058 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d109      	bne.n	800620c <UART_DMAError+0x5e>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2b22      	cmp	r3, #34	; 0x22
 80061fc:	d106      	bne.n	800620c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2200      	movs	r2, #0
 8006202:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	f7ff ff3b 	bl	8006082 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006210:	f043 0210 	orr.w	r2, r3, #16
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006218:	6978      	ldr	r0, [r7, #20]
 800621a:	f7ff fafd 	bl	8005818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800621e:	bf00      	nop
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fae7 	bl	8005818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800624a:	bf00      	nop
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b082      	sub	sp, #8
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006268:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2220      	movs	r2, #32
 800626e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff faa6 	bl	80057c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800627c:	bf00      	nop
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <__errno>:
 8006284:	4b01      	ldr	r3, [pc, #4]	; (800628c <__errno+0x8>)
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	20000010 	.word	0x20000010

08006290 <__libc_init_array>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4e0d      	ldr	r6, [pc, #52]	; (80062c8 <__libc_init_array+0x38>)
 8006294:	4c0d      	ldr	r4, [pc, #52]	; (80062cc <__libc_init_array+0x3c>)
 8006296:	1ba4      	subs	r4, r4, r6
 8006298:	10a4      	asrs	r4, r4, #2
 800629a:	2500      	movs	r5, #0
 800629c:	42a5      	cmp	r5, r4
 800629e:	d109      	bne.n	80062b4 <__libc_init_array+0x24>
 80062a0:	4e0b      	ldr	r6, [pc, #44]	; (80062d0 <__libc_init_array+0x40>)
 80062a2:	4c0c      	ldr	r4, [pc, #48]	; (80062d4 <__libc_init_array+0x44>)
 80062a4:	f000 ff04 	bl	80070b0 <_init>
 80062a8:	1ba4      	subs	r4, r4, r6
 80062aa:	10a4      	asrs	r4, r4, #2
 80062ac:	2500      	movs	r5, #0
 80062ae:	42a5      	cmp	r5, r4
 80062b0:	d105      	bne.n	80062be <__libc_init_array+0x2e>
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062b8:	4798      	blx	r3
 80062ba:	3501      	adds	r5, #1
 80062bc:	e7ee      	b.n	800629c <__libc_init_array+0xc>
 80062be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80062c2:	4798      	blx	r3
 80062c4:	3501      	adds	r5, #1
 80062c6:	e7f2      	b.n	80062ae <__libc_init_array+0x1e>
 80062c8:	08007190 	.word	0x08007190
 80062cc:	08007190 	.word	0x08007190
 80062d0:	08007190 	.word	0x08007190
 80062d4:	08007194 	.word	0x08007194

080062d8 <memset>:
 80062d8:	4402      	add	r2, r0
 80062da:	4603      	mov	r3, r0
 80062dc:	4293      	cmp	r3, r2
 80062de:	d100      	bne.n	80062e2 <memset+0xa>
 80062e0:	4770      	bx	lr
 80062e2:	f803 1b01 	strb.w	r1, [r3], #1
 80062e6:	e7f9      	b.n	80062dc <memset+0x4>

080062e8 <iprintf>:
 80062e8:	b40f      	push	{r0, r1, r2, r3}
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <iprintf+0x2c>)
 80062ec:	b513      	push	{r0, r1, r4, lr}
 80062ee:	681c      	ldr	r4, [r3, #0]
 80062f0:	b124      	cbz	r4, 80062fc <iprintf+0x14>
 80062f2:	69a3      	ldr	r3, [r4, #24]
 80062f4:	b913      	cbnz	r3, 80062fc <iprintf+0x14>
 80062f6:	4620      	mov	r0, r4
 80062f8:	f000 f84e 	bl	8006398 <__sinit>
 80062fc:	ab05      	add	r3, sp, #20
 80062fe:	9a04      	ldr	r2, [sp, #16]
 8006300:	68a1      	ldr	r1, [r4, #8]
 8006302:	9301      	str	r3, [sp, #4]
 8006304:	4620      	mov	r0, r4
 8006306:	f000 f955 	bl	80065b4 <_vfiprintf_r>
 800630a:	b002      	add	sp, #8
 800630c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006310:	b004      	add	sp, #16
 8006312:	4770      	bx	lr
 8006314:	20000010 	.word	0x20000010

08006318 <std>:
 8006318:	2300      	movs	r3, #0
 800631a:	b510      	push	{r4, lr}
 800631c:	4604      	mov	r4, r0
 800631e:	e9c0 3300 	strd	r3, r3, [r0]
 8006322:	6083      	str	r3, [r0, #8]
 8006324:	8181      	strh	r1, [r0, #12]
 8006326:	6643      	str	r3, [r0, #100]	; 0x64
 8006328:	81c2      	strh	r2, [r0, #14]
 800632a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800632e:	6183      	str	r3, [r0, #24]
 8006330:	4619      	mov	r1, r3
 8006332:	2208      	movs	r2, #8
 8006334:	305c      	adds	r0, #92	; 0x5c
 8006336:	f7ff ffcf 	bl	80062d8 <memset>
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <std+0x38>)
 800633c:	6263      	str	r3, [r4, #36]	; 0x24
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <std+0x3c>)
 8006340:	62a3      	str	r3, [r4, #40]	; 0x28
 8006342:	4b05      	ldr	r3, [pc, #20]	; (8006358 <std+0x40>)
 8006344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <std+0x44>)
 8006348:	6224      	str	r4, [r4, #32]
 800634a:	6323      	str	r3, [r4, #48]	; 0x30
 800634c:	bd10      	pop	{r4, pc}
 800634e:	bf00      	nop
 8006350:	08006b11 	.word	0x08006b11
 8006354:	08006b33 	.word	0x08006b33
 8006358:	08006b6b 	.word	0x08006b6b
 800635c:	08006b8f 	.word	0x08006b8f

08006360 <_cleanup_r>:
 8006360:	4901      	ldr	r1, [pc, #4]	; (8006368 <_cleanup_r+0x8>)
 8006362:	f000 b885 	b.w	8006470 <_fwalk_reent>
 8006366:	bf00      	nop
 8006368:	08006e69 	.word	0x08006e69

0800636c <__sfmoreglue>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	1e4a      	subs	r2, r1, #1
 8006370:	2568      	movs	r5, #104	; 0x68
 8006372:	4355      	muls	r5, r2
 8006374:	460e      	mov	r6, r1
 8006376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800637a:	f000 f897 	bl	80064ac <_malloc_r>
 800637e:	4604      	mov	r4, r0
 8006380:	b140      	cbz	r0, 8006394 <__sfmoreglue+0x28>
 8006382:	2100      	movs	r1, #0
 8006384:	e9c0 1600 	strd	r1, r6, [r0]
 8006388:	300c      	adds	r0, #12
 800638a:	60a0      	str	r0, [r4, #8]
 800638c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006390:	f7ff ffa2 	bl	80062d8 <memset>
 8006394:	4620      	mov	r0, r4
 8006396:	bd70      	pop	{r4, r5, r6, pc}

08006398 <__sinit>:
 8006398:	6983      	ldr	r3, [r0, #24]
 800639a:	b510      	push	{r4, lr}
 800639c:	4604      	mov	r4, r0
 800639e:	bb33      	cbnz	r3, 80063ee <__sinit+0x56>
 80063a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80063a4:	6503      	str	r3, [r0, #80]	; 0x50
 80063a6:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <__sinit+0x58>)
 80063a8:	4a12      	ldr	r2, [pc, #72]	; (80063f4 <__sinit+0x5c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6282      	str	r2, [r0, #40]	; 0x28
 80063ae:	4298      	cmp	r0, r3
 80063b0:	bf04      	itt	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	6183      	streq	r3, [r0, #24]
 80063b6:	f000 f81f 	bl	80063f8 <__sfp>
 80063ba:	6060      	str	r0, [r4, #4]
 80063bc:	4620      	mov	r0, r4
 80063be:	f000 f81b 	bl	80063f8 <__sfp>
 80063c2:	60a0      	str	r0, [r4, #8]
 80063c4:	4620      	mov	r0, r4
 80063c6:	f000 f817 	bl	80063f8 <__sfp>
 80063ca:	2200      	movs	r2, #0
 80063cc:	60e0      	str	r0, [r4, #12]
 80063ce:	2104      	movs	r1, #4
 80063d0:	6860      	ldr	r0, [r4, #4]
 80063d2:	f7ff ffa1 	bl	8006318 <std>
 80063d6:	2201      	movs	r2, #1
 80063d8:	2109      	movs	r1, #9
 80063da:	68a0      	ldr	r0, [r4, #8]
 80063dc:	f7ff ff9c 	bl	8006318 <std>
 80063e0:	2202      	movs	r2, #2
 80063e2:	2112      	movs	r1, #18
 80063e4:	68e0      	ldr	r0, [r4, #12]
 80063e6:	f7ff ff97 	bl	8006318 <std>
 80063ea:	2301      	movs	r3, #1
 80063ec:	61a3      	str	r3, [r4, #24]
 80063ee:	bd10      	pop	{r4, pc}
 80063f0:	080070f0 	.word	0x080070f0
 80063f4:	08006361 	.word	0x08006361

080063f8 <__sfp>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <__sfp+0x70>)
 80063fc:	681e      	ldr	r6, [r3, #0]
 80063fe:	69b3      	ldr	r3, [r6, #24]
 8006400:	4607      	mov	r7, r0
 8006402:	b913      	cbnz	r3, 800640a <__sfp+0x12>
 8006404:	4630      	mov	r0, r6
 8006406:	f7ff ffc7 	bl	8006398 <__sinit>
 800640a:	3648      	adds	r6, #72	; 0x48
 800640c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006410:	3b01      	subs	r3, #1
 8006412:	d503      	bpl.n	800641c <__sfp+0x24>
 8006414:	6833      	ldr	r3, [r6, #0]
 8006416:	b133      	cbz	r3, 8006426 <__sfp+0x2e>
 8006418:	6836      	ldr	r6, [r6, #0]
 800641a:	e7f7      	b.n	800640c <__sfp+0x14>
 800641c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006420:	b16d      	cbz	r5, 800643e <__sfp+0x46>
 8006422:	3468      	adds	r4, #104	; 0x68
 8006424:	e7f4      	b.n	8006410 <__sfp+0x18>
 8006426:	2104      	movs	r1, #4
 8006428:	4638      	mov	r0, r7
 800642a:	f7ff ff9f 	bl	800636c <__sfmoreglue>
 800642e:	6030      	str	r0, [r6, #0]
 8006430:	2800      	cmp	r0, #0
 8006432:	d1f1      	bne.n	8006418 <__sfp+0x20>
 8006434:	230c      	movs	r3, #12
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	4604      	mov	r4, r0
 800643a:	4620      	mov	r0, r4
 800643c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <__sfp+0x74>)
 8006440:	6665      	str	r5, [r4, #100]	; 0x64
 8006442:	e9c4 5500 	strd	r5, r5, [r4]
 8006446:	60a5      	str	r5, [r4, #8]
 8006448:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800644c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006450:	2208      	movs	r2, #8
 8006452:	4629      	mov	r1, r5
 8006454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006458:	f7ff ff3e 	bl	80062d8 <memset>
 800645c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006464:	e7e9      	b.n	800643a <__sfp+0x42>
 8006466:	bf00      	nop
 8006468:	080070f0 	.word	0x080070f0
 800646c:	ffff0001 	.word	0xffff0001

08006470 <_fwalk_reent>:
 8006470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006474:	4680      	mov	r8, r0
 8006476:	4689      	mov	r9, r1
 8006478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800647c:	2600      	movs	r6, #0
 800647e:	b914      	cbnz	r4, 8006486 <_fwalk_reent+0x16>
 8006480:	4630      	mov	r0, r6
 8006482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006486:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800648a:	3f01      	subs	r7, #1
 800648c:	d501      	bpl.n	8006492 <_fwalk_reent+0x22>
 800648e:	6824      	ldr	r4, [r4, #0]
 8006490:	e7f5      	b.n	800647e <_fwalk_reent+0xe>
 8006492:	89ab      	ldrh	r3, [r5, #12]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d907      	bls.n	80064a8 <_fwalk_reent+0x38>
 8006498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800649c:	3301      	adds	r3, #1
 800649e:	d003      	beq.n	80064a8 <_fwalk_reent+0x38>
 80064a0:	4629      	mov	r1, r5
 80064a2:	4640      	mov	r0, r8
 80064a4:	47c8      	blx	r9
 80064a6:	4306      	orrs	r6, r0
 80064a8:	3568      	adds	r5, #104	; 0x68
 80064aa:	e7ee      	b.n	800648a <_fwalk_reent+0x1a>

080064ac <_malloc_r>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	1ccd      	adds	r5, r1, #3
 80064b0:	f025 0503 	bic.w	r5, r5, #3
 80064b4:	3508      	adds	r5, #8
 80064b6:	2d0c      	cmp	r5, #12
 80064b8:	bf38      	it	cc
 80064ba:	250c      	movcc	r5, #12
 80064bc:	2d00      	cmp	r5, #0
 80064be:	4606      	mov	r6, r0
 80064c0:	db01      	blt.n	80064c6 <_malloc_r+0x1a>
 80064c2:	42a9      	cmp	r1, r5
 80064c4:	d903      	bls.n	80064ce <_malloc_r+0x22>
 80064c6:	230c      	movs	r3, #12
 80064c8:	6033      	str	r3, [r6, #0]
 80064ca:	2000      	movs	r0, #0
 80064cc:	bd70      	pop	{r4, r5, r6, pc}
 80064ce:	f000 fd6b 	bl	8006fa8 <__malloc_lock>
 80064d2:	4a21      	ldr	r2, [pc, #132]	; (8006558 <_malloc_r+0xac>)
 80064d4:	6814      	ldr	r4, [r2, #0]
 80064d6:	4621      	mov	r1, r4
 80064d8:	b991      	cbnz	r1, 8006500 <_malloc_r+0x54>
 80064da:	4c20      	ldr	r4, [pc, #128]	; (800655c <_malloc_r+0xb0>)
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	b91b      	cbnz	r3, 80064e8 <_malloc_r+0x3c>
 80064e0:	4630      	mov	r0, r6
 80064e2:	f000 fb05 	bl	8006af0 <_sbrk_r>
 80064e6:	6020      	str	r0, [r4, #0]
 80064e8:	4629      	mov	r1, r5
 80064ea:	4630      	mov	r0, r6
 80064ec:	f000 fb00 	bl	8006af0 <_sbrk_r>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d124      	bne.n	800653e <_malloc_r+0x92>
 80064f4:	230c      	movs	r3, #12
 80064f6:	6033      	str	r3, [r6, #0]
 80064f8:	4630      	mov	r0, r6
 80064fa:	f000 fd56 	bl	8006faa <__malloc_unlock>
 80064fe:	e7e4      	b.n	80064ca <_malloc_r+0x1e>
 8006500:	680b      	ldr	r3, [r1, #0]
 8006502:	1b5b      	subs	r3, r3, r5
 8006504:	d418      	bmi.n	8006538 <_malloc_r+0x8c>
 8006506:	2b0b      	cmp	r3, #11
 8006508:	d90f      	bls.n	800652a <_malloc_r+0x7e>
 800650a:	600b      	str	r3, [r1, #0]
 800650c:	50cd      	str	r5, [r1, r3]
 800650e:	18cc      	adds	r4, r1, r3
 8006510:	4630      	mov	r0, r6
 8006512:	f000 fd4a 	bl	8006faa <__malloc_unlock>
 8006516:	f104 000b 	add.w	r0, r4, #11
 800651a:	1d23      	adds	r3, r4, #4
 800651c:	f020 0007 	bic.w	r0, r0, #7
 8006520:	1ac3      	subs	r3, r0, r3
 8006522:	d0d3      	beq.n	80064cc <_malloc_r+0x20>
 8006524:	425a      	negs	r2, r3
 8006526:	50e2      	str	r2, [r4, r3]
 8006528:	e7d0      	b.n	80064cc <_malloc_r+0x20>
 800652a:	428c      	cmp	r4, r1
 800652c:	684b      	ldr	r3, [r1, #4]
 800652e:	bf16      	itet	ne
 8006530:	6063      	strne	r3, [r4, #4]
 8006532:	6013      	streq	r3, [r2, #0]
 8006534:	460c      	movne	r4, r1
 8006536:	e7eb      	b.n	8006510 <_malloc_r+0x64>
 8006538:	460c      	mov	r4, r1
 800653a:	6849      	ldr	r1, [r1, #4]
 800653c:	e7cc      	b.n	80064d8 <_malloc_r+0x2c>
 800653e:	1cc4      	adds	r4, r0, #3
 8006540:	f024 0403 	bic.w	r4, r4, #3
 8006544:	42a0      	cmp	r0, r4
 8006546:	d005      	beq.n	8006554 <_malloc_r+0xa8>
 8006548:	1a21      	subs	r1, r4, r0
 800654a:	4630      	mov	r0, r6
 800654c:	f000 fad0 	bl	8006af0 <_sbrk_r>
 8006550:	3001      	adds	r0, #1
 8006552:	d0cf      	beq.n	80064f4 <_malloc_r+0x48>
 8006554:	6025      	str	r5, [r4, #0]
 8006556:	e7db      	b.n	8006510 <_malloc_r+0x64>
 8006558:	200000a0 	.word	0x200000a0
 800655c:	200000a4 	.word	0x200000a4

08006560 <__sfputc_r>:
 8006560:	6893      	ldr	r3, [r2, #8]
 8006562:	3b01      	subs	r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	b410      	push	{r4}
 8006568:	6093      	str	r3, [r2, #8]
 800656a:	da08      	bge.n	800657e <__sfputc_r+0x1e>
 800656c:	6994      	ldr	r4, [r2, #24]
 800656e:	42a3      	cmp	r3, r4
 8006570:	db01      	blt.n	8006576 <__sfputc_r+0x16>
 8006572:	290a      	cmp	r1, #10
 8006574:	d103      	bne.n	800657e <__sfputc_r+0x1e>
 8006576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800657a:	f000 bb0d 	b.w	8006b98 <__swbuf_r>
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	1c58      	adds	r0, r3, #1
 8006582:	6010      	str	r0, [r2, #0]
 8006584:	7019      	strb	r1, [r3, #0]
 8006586:	4608      	mov	r0, r1
 8006588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800658c:	4770      	bx	lr

0800658e <__sfputs_r>:
 800658e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006590:	4606      	mov	r6, r0
 8006592:	460f      	mov	r7, r1
 8006594:	4614      	mov	r4, r2
 8006596:	18d5      	adds	r5, r2, r3
 8006598:	42ac      	cmp	r4, r5
 800659a:	d101      	bne.n	80065a0 <__sfputs_r+0x12>
 800659c:	2000      	movs	r0, #0
 800659e:	e007      	b.n	80065b0 <__sfputs_r+0x22>
 80065a0:	463a      	mov	r2, r7
 80065a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7ff ffda 	bl	8006560 <__sfputc_r>
 80065ac:	1c43      	adds	r3, r0, #1
 80065ae:	d1f3      	bne.n	8006598 <__sfputs_r+0xa>
 80065b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065b4 <_vfiprintf_r>:
 80065b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	460c      	mov	r4, r1
 80065ba:	b09d      	sub	sp, #116	; 0x74
 80065bc:	4617      	mov	r7, r2
 80065be:	461d      	mov	r5, r3
 80065c0:	4606      	mov	r6, r0
 80065c2:	b118      	cbz	r0, 80065cc <_vfiprintf_r+0x18>
 80065c4:	6983      	ldr	r3, [r0, #24]
 80065c6:	b90b      	cbnz	r3, 80065cc <_vfiprintf_r+0x18>
 80065c8:	f7ff fee6 	bl	8006398 <__sinit>
 80065cc:	4b7c      	ldr	r3, [pc, #496]	; (80067c0 <_vfiprintf_r+0x20c>)
 80065ce:	429c      	cmp	r4, r3
 80065d0:	d158      	bne.n	8006684 <_vfiprintf_r+0xd0>
 80065d2:	6874      	ldr	r4, [r6, #4]
 80065d4:	89a3      	ldrh	r3, [r4, #12]
 80065d6:	0718      	lsls	r0, r3, #28
 80065d8:	d55e      	bpl.n	8006698 <_vfiprintf_r+0xe4>
 80065da:	6923      	ldr	r3, [r4, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d05b      	beq.n	8006698 <_vfiprintf_r+0xe4>
 80065e0:	2300      	movs	r3, #0
 80065e2:	9309      	str	r3, [sp, #36]	; 0x24
 80065e4:	2320      	movs	r3, #32
 80065e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065ea:	2330      	movs	r3, #48	; 0x30
 80065ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065f0:	9503      	str	r5, [sp, #12]
 80065f2:	f04f 0b01 	mov.w	fp, #1
 80065f6:	46b8      	mov	r8, r7
 80065f8:	4645      	mov	r5, r8
 80065fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065fe:	b10b      	cbz	r3, 8006604 <_vfiprintf_r+0x50>
 8006600:	2b25      	cmp	r3, #37	; 0x25
 8006602:	d154      	bne.n	80066ae <_vfiprintf_r+0xfa>
 8006604:	ebb8 0a07 	subs.w	sl, r8, r7
 8006608:	d00b      	beq.n	8006622 <_vfiprintf_r+0x6e>
 800660a:	4653      	mov	r3, sl
 800660c:	463a      	mov	r2, r7
 800660e:	4621      	mov	r1, r4
 8006610:	4630      	mov	r0, r6
 8006612:	f7ff ffbc 	bl	800658e <__sfputs_r>
 8006616:	3001      	adds	r0, #1
 8006618:	f000 80c2 	beq.w	80067a0 <_vfiprintf_r+0x1ec>
 800661c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661e:	4453      	add	r3, sl
 8006620:	9309      	str	r3, [sp, #36]	; 0x24
 8006622:	f898 3000 	ldrb.w	r3, [r8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 80ba 	beq.w	80067a0 <_vfiprintf_r+0x1ec>
 800662c:	2300      	movs	r3, #0
 800662e:	f04f 32ff 	mov.w	r2, #4294967295
 8006632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006636:	9304      	str	r3, [sp, #16]
 8006638:	9307      	str	r3, [sp, #28]
 800663a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800663e:	931a      	str	r3, [sp, #104]	; 0x68
 8006640:	46a8      	mov	r8, r5
 8006642:	2205      	movs	r2, #5
 8006644:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006648:	485e      	ldr	r0, [pc, #376]	; (80067c4 <_vfiprintf_r+0x210>)
 800664a:	f7f9 fdf9 	bl	8000240 <memchr>
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	bb78      	cbnz	r0, 80066b2 <_vfiprintf_r+0xfe>
 8006652:	06d9      	lsls	r1, r3, #27
 8006654:	bf44      	itt	mi
 8006656:	2220      	movmi	r2, #32
 8006658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800665c:	071a      	lsls	r2, r3, #28
 800665e:	bf44      	itt	mi
 8006660:	222b      	movmi	r2, #43	; 0x2b
 8006662:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006666:	782a      	ldrb	r2, [r5, #0]
 8006668:	2a2a      	cmp	r2, #42	; 0x2a
 800666a:	d02a      	beq.n	80066c2 <_vfiprintf_r+0x10e>
 800666c:	9a07      	ldr	r2, [sp, #28]
 800666e:	46a8      	mov	r8, r5
 8006670:	2000      	movs	r0, #0
 8006672:	250a      	movs	r5, #10
 8006674:	4641      	mov	r1, r8
 8006676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800667a:	3b30      	subs	r3, #48	; 0x30
 800667c:	2b09      	cmp	r3, #9
 800667e:	d969      	bls.n	8006754 <_vfiprintf_r+0x1a0>
 8006680:	b360      	cbz	r0, 80066dc <_vfiprintf_r+0x128>
 8006682:	e024      	b.n	80066ce <_vfiprintf_r+0x11a>
 8006684:	4b50      	ldr	r3, [pc, #320]	; (80067c8 <_vfiprintf_r+0x214>)
 8006686:	429c      	cmp	r4, r3
 8006688:	d101      	bne.n	800668e <_vfiprintf_r+0xda>
 800668a:	68b4      	ldr	r4, [r6, #8]
 800668c:	e7a2      	b.n	80065d4 <_vfiprintf_r+0x20>
 800668e:	4b4f      	ldr	r3, [pc, #316]	; (80067cc <_vfiprintf_r+0x218>)
 8006690:	429c      	cmp	r4, r3
 8006692:	bf08      	it	eq
 8006694:	68f4      	ldreq	r4, [r6, #12]
 8006696:	e79d      	b.n	80065d4 <_vfiprintf_r+0x20>
 8006698:	4621      	mov	r1, r4
 800669a:	4630      	mov	r0, r6
 800669c:	f000 fae0 	bl	8006c60 <__swsetup_r>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d09d      	beq.n	80065e0 <_vfiprintf_r+0x2c>
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	b01d      	add	sp, #116	; 0x74
 80066aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ae:	46a8      	mov	r8, r5
 80066b0:	e7a2      	b.n	80065f8 <_vfiprintf_r+0x44>
 80066b2:	4a44      	ldr	r2, [pc, #272]	; (80067c4 <_vfiprintf_r+0x210>)
 80066b4:	1a80      	subs	r0, r0, r2
 80066b6:	fa0b f000 	lsl.w	r0, fp, r0
 80066ba:	4318      	orrs	r0, r3
 80066bc:	9004      	str	r0, [sp, #16]
 80066be:	4645      	mov	r5, r8
 80066c0:	e7be      	b.n	8006640 <_vfiprintf_r+0x8c>
 80066c2:	9a03      	ldr	r2, [sp, #12]
 80066c4:	1d11      	adds	r1, r2, #4
 80066c6:	6812      	ldr	r2, [r2, #0]
 80066c8:	9103      	str	r1, [sp, #12]
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	db01      	blt.n	80066d2 <_vfiprintf_r+0x11e>
 80066ce:	9207      	str	r2, [sp, #28]
 80066d0:	e004      	b.n	80066dc <_vfiprintf_r+0x128>
 80066d2:	4252      	negs	r2, r2
 80066d4:	f043 0302 	orr.w	r3, r3, #2
 80066d8:	9207      	str	r2, [sp, #28]
 80066da:	9304      	str	r3, [sp, #16]
 80066dc:	f898 3000 	ldrb.w	r3, [r8]
 80066e0:	2b2e      	cmp	r3, #46	; 0x2e
 80066e2:	d10e      	bne.n	8006702 <_vfiprintf_r+0x14e>
 80066e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80066e8:	2b2a      	cmp	r3, #42	; 0x2a
 80066ea:	d138      	bne.n	800675e <_vfiprintf_r+0x1aa>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	9203      	str	r2, [sp, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	bfb8      	it	lt
 80066f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80066fc:	f108 0802 	add.w	r8, r8, #2
 8006700:	9305      	str	r3, [sp, #20]
 8006702:	4d33      	ldr	r5, [pc, #204]	; (80067d0 <_vfiprintf_r+0x21c>)
 8006704:	f898 1000 	ldrb.w	r1, [r8]
 8006708:	2203      	movs	r2, #3
 800670a:	4628      	mov	r0, r5
 800670c:	f7f9 fd98 	bl	8000240 <memchr>
 8006710:	b140      	cbz	r0, 8006724 <_vfiprintf_r+0x170>
 8006712:	2340      	movs	r3, #64	; 0x40
 8006714:	1b40      	subs	r0, r0, r5
 8006716:	fa03 f000 	lsl.w	r0, r3, r0
 800671a:	9b04      	ldr	r3, [sp, #16]
 800671c:	4303      	orrs	r3, r0
 800671e:	f108 0801 	add.w	r8, r8, #1
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	f898 1000 	ldrb.w	r1, [r8]
 8006728:	482a      	ldr	r0, [pc, #168]	; (80067d4 <_vfiprintf_r+0x220>)
 800672a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800672e:	2206      	movs	r2, #6
 8006730:	f108 0701 	add.w	r7, r8, #1
 8006734:	f7f9 fd84 	bl	8000240 <memchr>
 8006738:	2800      	cmp	r0, #0
 800673a:	d037      	beq.n	80067ac <_vfiprintf_r+0x1f8>
 800673c:	4b26      	ldr	r3, [pc, #152]	; (80067d8 <_vfiprintf_r+0x224>)
 800673e:	bb1b      	cbnz	r3, 8006788 <_vfiprintf_r+0x1d4>
 8006740:	9b03      	ldr	r3, [sp, #12]
 8006742:	3307      	adds	r3, #7
 8006744:	f023 0307 	bic.w	r3, r3, #7
 8006748:	3308      	adds	r3, #8
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674e:	444b      	add	r3, r9
 8006750:	9309      	str	r3, [sp, #36]	; 0x24
 8006752:	e750      	b.n	80065f6 <_vfiprintf_r+0x42>
 8006754:	fb05 3202 	mla	r2, r5, r2, r3
 8006758:	2001      	movs	r0, #1
 800675a:	4688      	mov	r8, r1
 800675c:	e78a      	b.n	8006674 <_vfiprintf_r+0xc0>
 800675e:	2300      	movs	r3, #0
 8006760:	f108 0801 	add.w	r8, r8, #1
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	4619      	mov	r1, r3
 8006768:	250a      	movs	r5, #10
 800676a:	4640      	mov	r0, r8
 800676c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006770:	3a30      	subs	r2, #48	; 0x30
 8006772:	2a09      	cmp	r2, #9
 8006774:	d903      	bls.n	800677e <_vfiprintf_r+0x1ca>
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0c3      	beq.n	8006702 <_vfiprintf_r+0x14e>
 800677a:	9105      	str	r1, [sp, #20]
 800677c:	e7c1      	b.n	8006702 <_vfiprintf_r+0x14e>
 800677e:	fb05 2101 	mla	r1, r5, r1, r2
 8006782:	2301      	movs	r3, #1
 8006784:	4680      	mov	r8, r0
 8006786:	e7f0      	b.n	800676a <_vfiprintf_r+0x1b6>
 8006788:	ab03      	add	r3, sp, #12
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	4622      	mov	r2, r4
 800678e:	4b13      	ldr	r3, [pc, #76]	; (80067dc <_vfiprintf_r+0x228>)
 8006790:	a904      	add	r1, sp, #16
 8006792:	4630      	mov	r0, r6
 8006794:	f3af 8000 	nop.w
 8006798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800679c:	4681      	mov	r9, r0
 800679e:	d1d5      	bne.n	800674c <_vfiprintf_r+0x198>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	065b      	lsls	r3, r3, #25
 80067a4:	f53f af7e 	bmi.w	80066a4 <_vfiprintf_r+0xf0>
 80067a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067aa:	e77d      	b.n	80066a8 <_vfiprintf_r+0xf4>
 80067ac:	ab03      	add	r3, sp, #12
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	4622      	mov	r2, r4
 80067b2:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <_vfiprintf_r+0x228>)
 80067b4:	a904      	add	r1, sp, #16
 80067b6:	4630      	mov	r0, r6
 80067b8:	f000 f888 	bl	80068cc <_printf_i>
 80067bc:	e7ec      	b.n	8006798 <_vfiprintf_r+0x1e4>
 80067be:	bf00      	nop
 80067c0:	08007114 	.word	0x08007114
 80067c4:	08007154 	.word	0x08007154
 80067c8:	08007134 	.word	0x08007134
 80067cc:	080070f4 	.word	0x080070f4
 80067d0:	0800715a 	.word	0x0800715a
 80067d4:	0800715e 	.word	0x0800715e
 80067d8:	00000000 	.word	0x00000000
 80067dc:	0800658f 	.word	0x0800658f

080067e0 <_printf_common>:
 80067e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e4:	4691      	mov	r9, r2
 80067e6:	461f      	mov	r7, r3
 80067e8:	688a      	ldr	r2, [r1, #8]
 80067ea:	690b      	ldr	r3, [r1, #16]
 80067ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f0:	4293      	cmp	r3, r2
 80067f2:	bfb8      	it	lt
 80067f4:	4613      	movlt	r3, r2
 80067f6:	f8c9 3000 	str.w	r3, [r9]
 80067fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067fe:	4606      	mov	r6, r0
 8006800:	460c      	mov	r4, r1
 8006802:	b112      	cbz	r2, 800680a <_printf_common+0x2a>
 8006804:	3301      	adds	r3, #1
 8006806:	f8c9 3000 	str.w	r3, [r9]
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	0699      	lsls	r1, r3, #26
 800680e:	bf42      	ittt	mi
 8006810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006814:	3302      	addmi	r3, #2
 8006816:	f8c9 3000 	strmi.w	r3, [r9]
 800681a:	6825      	ldr	r5, [r4, #0]
 800681c:	f015 0506 	ands.w	r5, r5, #6
 8006820:	d107      	bne.n	8006832 <_printf_common+0x52>
 8006822:	f104 0a19 	add.w	sl, r4, #25
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	f8d9 2000 	ldr.w	r2, [r9]
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	42ab      	cmp	r3, r5
 8006830:	dc28      	bgt.n	8006884 <_printf_common+0xa4>
 8006832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	3300      	adds	r3, #0
 800683a:	bf18      	it	ne
 800683c:	2301      	movne	r3, #1
 800683e:	0692      	lsls	r2, r2, #26
 8006840:	d42d      	bmi.n	800689e <_printf_common+0xbe>
 8006842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006846:	4639      	mov	r1, r7
 8006848:	4630      	mov	r0, r6
 800684a:	47c0      	blx	r8
 800684c:	3001      	adds	r0, #1
 800684e:	d020      	beq.n	8006892 <_printf_common+0xb2>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	68e5      	ldr	r5, [r4, #12]
 8006854:	f8d9 2000 	ldr.w	r2, [r9]
 8006858:	f003 0306 	and.w	r3, r3, #6
 800685c:	2b04      	cmp	r3, #4
 800685e:	bf08      	it	eq
 8006860:	1aad      	subeq	r5, r5, r2
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	6922      	ldr	r2, [r4, #16]
 8006866:	bf0c      	ite	eq
 8006868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800686c:	2500      	movne	r5, #0
 800686e:	4293      	cmp	r3, r2
 8006870:	bfc4      	itt	gt
 8006872:	1a9b      	subgt	r3, r3, r2
 8006874:	18ed      	addgt	r5, r5, r3
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	341a      	adds	r4, #26
 800687c:	454d      	cmp	r5, r9
 800687e:	d11a      	bne.n	80068b6 <_printf_common+0xd6>
 8006880:	2000      	movs	r0, #0
 8006882:	e008      	b.n	8006896 <_printf_common+0xb6>
 8006884:	2301      	movs	r3, #1
 8006886:	4652      	mov	r2, sl
 8006888:	4639      	mov	r1, r7
 800688a:	4630      	mov	r0, r6
 800688c:	47c0      	blx	r8
 800688e:	3001      	adds	r0, #1
 8006890:	d103      	bne.n	800689a <_printf_common+0xba>
 8006892:	f04f 30ff 	mov.w	r0, #4294967295
 8006896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800689a:	3501      	adds	r5, #1
 800689c:	e7c3      	b.n	8006826 <_printf_common+0x46>
 800689e:	18e1      	adds	r1, r4, r3
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	2030      	movs	r0, #48	; 0x30
 80068a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068a8:	4422      	add	r2, r4
 80068aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068b2:	3302      	adds	r3, #2
 80068b4:	e7c5      	b.n	8006842 <_printf_common+0x62>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4622      	mov	r2, r4
 80068ba:	4639      	mov	r1, r7
 80068bc:	4630      	mov	r0, r6
 80068be:	47c0      	blx	r8
 80068c0:	3001      	adds	r0, #1
 80068c2:	d0e6      	beq.n	8006892 <_printf_common+0xb2>
 80068c4:	f109 0901 	add.w	r9, r9, #1
 80068c8:	e7d8      	b.n	800687c <_printf_common+0x9c>
	...

080068cc <_printf_i>:
 80068cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80068d4:	460c      	mov	r4, r1
 80068d6:	7e09      	ldrb	r1, [r1, #24]
 80068d8:	b085      	sub	sp, #20
 80068da:	296e      	cmp	r1, #110	; 0x6e
 80068dc:	4617      	mov	r7, r2
 80068de:	4606      	mov	r6, r0
 80068e0:	4698      	mov	r8, r3
 80068e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068e4:	f000 80b3 	beq.w	8006a4e <_printf_i+0x182>
 80068e8:	d822      	bhi.n	8006930 <_printf_i+0x64>
 80068ea:	2963      	cmp	r1, #99	; 0x63
 80068ec:	d036      	beq.n	800695c <_printf_i+0x90>
 80068ee:	d80a      	bhi.n	8006906 <_printf_i+0x3a>
 80068f0:	2900      	cmp	r1, #0
 80068f2:	f000 80b9 	beq.w	8006a68 <_printf_i+0x19c>
 80068f6:	2958      	cmp	r1, #88	; 0x58
 80068f8:	f000 8083 	beq.w	8006a02 <_printf_i+0x136>
 80068fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006900:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006904:	e032      	b.n	800696c <_printf_i+0xa0>
 8006906:	2964      	cmp	r1, #100	; 0x64
 8006908:	d001      	beq.n	800690e <_printf_i+0x42>
 800690a:	2969      	cmp	r1, #105	; 0x69
 800690c:	d1f6      	bne.n	80068fc <_printf_i+0x30>
 800690e:	6820      	ldr	r0, [r4, #0]
 8006910:	6813      	ldr	r3, [r2, #0]
 8006912:	0605      	lsls	r5, r0, #24
 8006914:	f103 0104 	add.w	r1, r3, #4
 8006918:	d52a      	bpl.n	8006970 <_printf_i+0xa4>
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6011      	str	r1, [r2, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da03      	bge.n	800692a <_printf_i+0x5e>
 8006922:	222d      	movs	r2, #45	; 0x2d
 8006924:	425b      	negs	r3, r3
 8006926:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800692a:	486f      	ldr	r0, [pc, #444]	; (8006ae8 <_printf_i+0x21c>)
 800692c:	220a      	movs	r2, #10
 800692e:	e039      	b.n	80069a4 <_printf_i+0xd8>
 8006930:	2973      	cmp	r1, #115	; 0x73
 8006932:	f000 809d 	beq.w	8006a70 <_printf_i+0x1a4>
 8006936:	d808      	bhi.n	800694a <_printf_i+0x7e>
 8006938:	296f      	cmp	r1, #111	; 0x6f
 800693a:	d020      	beq.n	800697e <_printf_i+0xb2>
 800693c:	2970      	cmp	r1, #112	; 0x70
 800693e:	d1dd      	bne.n	80068fc <_printf_i+0x30>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	f043 0320 	orr.w	r3, r3, #32
 8006946:	6023      	str	r3, [r4, #0]
 8006948:	e003      	b.n	8006952 <_printf_i+0x86>
 800694a:	2975      	cmp	r1, #117	; 0x75
 800694c:	d017      	beq.n	800697e <_printf_i+0xb2>
 800694e:	2978      	cmp	r1, #120	; 0x78
 8006950:	d1d4      	bne.n	80068fc <_printf_i+0x30>
 8006952:	2378      	movs	r3, #120	; 0x78
 8006954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006958:	4864      	ldr	r0, [pc, #400]	; (8006aec <_printf_i+0x220>)
 800695a:	e055      	b.n	8006a08 <_printf_i+0x13c>
 800695c:	6813      	ldr	r3, [r2, #0]
 800695e:	1d19      	adds	r1, r3, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	6011      	str	r1, [r2, #0]
 8006964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800696c:	2301      	movs	r3, #1
 800696e:	e08c      	b.n	8006a8a <_printf_i+0x1be>
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6011      	str	r1, [r2, #0]
 8006974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006978:	bf18      	it	ne
 800697a:	b21b      	sxthne	r3, r3
 800697c:	e7cf      	b.n	800691e <_printf_i+0x52>
 800697e:	6813      	ldr	r3, [r2, #0]
 8006980:	6825      	ldr	r5, [r4, #0]
 8006982:	1d18      	adds	r0, r3, #4
 8006984:	6010      	str	r0, [r2, #0]
 8006986:	0628      	lsls	r0, r5, #24
 8006988:	d501      	bpl.n	800698e <_printf_i+0xc2>
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	e002      	b.n	8006994 <_printf_i+0xc8>
 800698e:	0668      	lsls	r0, r5, #25
 8006990:	d5fb      	bpl.n	800698a <_printf_i+0xbe>
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	4854      	ldr	r0, [pc, #336]	; (8006ae8 <_printf_i+0x21c>)
 8006996:	296f      	cmp	r1, #111	; 0x6f
 8006998:	bf14      	ite	ne
 800699a:	220a      	movne	r2, #10
 800699c:	2208      	moveq	r2, #8
 800699e:	2100      	movs	r1, #0
 80069a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069a4:	6865      	ldr	r5, [r4, #4]
 80069a6:	60a5      	str	r5, [r4, #8]
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	f2c0 8095 	blt.w	8006ad8 <_printf_i+0x20c>
 80069ae:	6821      	ldr	r1, [r4, #0]
 80069b0:	f021 0104 	bic.w	r1, r1, #4
 80069b4:	6021      	str	r1, [r4, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d13d      	bne.n	8006a36 <_printf_i+0x16a>
 80069ba:	2d00      	cmp	r5, #0
 80069bc:	f040 808e 	bne.w	8006adc <_printf_i+0x210>
 80069c0:	4665      	mov	r5, ip
 80069c2:	2a08      	cmp	r2, #8
 80069c4:	d10b      	bne.n	80069de <_printf_i+0x112>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	07db      	lsls	r3, r3, #31
 80069ca:	d508      	bpl.n	80069de <_printf_i+0x112>
 80069cc:	6923      	ldr	r3, [r4, #16]
 80069ce:	6862      	ldr	r2, [r4, #4]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	bfde      	ittt	le
 80069d4:	2330      	movle	r3, #48	; 0x30
 80069d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80069de:	ebac 0305 	sub.w	r3, ip, r5
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	f8cd 8000 	str.w	r8, [sp]
 80069e8:	463b      	mov	r3, r7
 80069ea:	aa03      	add	r2, sp, #12
 80069ec:	4621      	mov	r1, r4
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7ff fef6 	bl	80067e0 <_printf_common>
 80069f4:	3001      	adds	r0, #1
 80069f6:	d14d      	bne.n	8006a94 <_printf_i+0x1c8>
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	b005      	add	sp, #20
 80069fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a02:	4839      	ldr	r0, [pc, #228]	; (8006ae8 <_printf_i+0x21c>)
 8006a04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a08:	6813      	ldr	r3, [r2, #0]
 8006a0a:	6821      	ldr	r1, [r4, #0]
 8006a0c:	1d1d      	adds	r5, r3, #4
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6015      	str	r5, [r2, #0]
 8006a12:	060a      	lsls	r2, r1, #24
 8006a14:	d50b      	bpl.n	8006a2e <_printf_i+0x162>
 8006a16:	07ca      	lsls	r2, r1, #31
 8006a18:	bf44      	itt	mi
 8006a1a:	f041 0120 	orrmi.w	r1, r1, #32
 8006a1e:	6021      	strmi	r1, [r4, #0]
 8006a20:	b91b      	cbnz	r3, 8006a2a <_printf_i+0x15e>
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	f022 0220 	bic.w	r2, r2, #32
 8006a28:	6022      	str	r2, [r4, #0]
 8006a2a:	2210      	movs	r2, #16
 8006a2c:	e7b7      	b.n	800699e <_printf_i+0xd2>
 8006a2e:	064d      	lsls	r5, r1, #25
 8006a30:	bf48      	it	mi
 8006a32:	b29b      	uxthmi	r3, r3
 8006a34:	e7ef      	b.n	8006a16 <_printf_i+0x14a>
 8006a36:	4665      	mov	r5, ip
 8006a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a3c:	fb02 3311 	mls	r3, r2, r1, r3
 8006a40:	5cc3      	ldrb	r3, [r0, r3]
 8006a42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a46:	460b      	mov	r3, r1
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	d1f5      	bne.n	8006a38 <_printf_i+0x16c>
 8006a4c:	e7b9      	b.n	80069c2 <_printf_i+0xf6>
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	6825      	ldr	r5, [r4, #0]
 8006a52:	6961      	ldr	r1, [r4, #20]
 8006a54:	1d18      	adds	r0, r3, #4
 8006a56:	6010      	str	r0, [r2, #0]
 8006a58:	0628      	lsls	r0, r5, #24
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	d501      	bpl.n	8006a62 <_printf_i+0x196>
 8006a5e:	6019      	str	r1, [r3, #0]
 8006a60:	e002      	b.n	8006a68 <_printf_i+0x19c>
 8006a62:	066a      	lsls	r2, r5, #25
 8006a64:	d5fb      	bpl.n	8006a5e <_printf_i+0x192>
 8006a66:	8019      	strh	r1, [r3, #0]
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6123      	str	r3, [r4, #16]
 8006a6c:	4665      	mov	r5, ip
 8006a6e:	e7b9      	b.n	80069e4 <_printf_i+0x118>
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	1d19      	adds	r1, r3, #4
 8006a74:	6011      	str	r1, [r2, #0]
 8006a76:	681d      	ldr	r5, [r3, #0]
 8006a78:	6862      	ldr	r2, [r4, #4]
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	f7f9 fbdf 	bl	8000240 <memchr>
 8006a82:	b108      	cbz	r0, 8006a88 <_printf_i+0x1bc>
 8006a84:	1b40      	subs	r0, r0, r5
 8006a86:	6060      	str	r0, [r4, #4]
 8006a88:	6863      	ldr	r3, [r4, #4]
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a92:	e7a7      	b.n	80069e4 <_printf_i+0x118>
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	462a      	mov	r2, r5
 8006a98:	4639      	mov	r1, r7
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	47c0      	blx	r8
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	d0aa      	beq.n	80069f8 <_printf_i+0x12c>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	079b      	lsls	r3, r3, #30
 8006aa6:	d413      	bmi.n	8006ad0 <_printf_i+0x204>
 8006aa8:	68e0      	ldr	r0, [r4, #12]
 8006aaa:	9b03      	ldr	r3, [sp, #12]
 8006aac:	4298      	cmp	r0, r3
 8006aae:	bfb8      	it	lt
 8006ab0:	4618      	movlt	r0, r3
 8006ab2:	e7a3      	b.n	80069fc <_printf_i+0x130>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	464a      	mov	r2, r9
 8006ab8:	4639      	mov	r1, r7
 8006aba:	4630      	mov	r0, r6
 8006abc:	47c0      	blx	r8
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d09a      	beq.n	80069f8 <_printf_i+0x12c>
 8006ac2:	3501      	adds	r5, #1
 8006ac4:	68e3      	ldr	r3, [r4, #12]
 8006ac6:	9a03      	ldr	r2, [sp, #12]
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	42ab      	cmp	r3, r5
 8006acc:	dcf2      	bgt.n	8006ab4 <_printf_i+0x1e8>
 8006ace:	e7eb      	b.n	8006aa8 <_printf_i+0x1dc>
 8006ad0:	2500      	movs	r5, #0
 8006ad2:	f104 0919 	add.w	r9, r4, #25
 8006ad6:	e7f5      	b.n	8006ac4 <_printf_i+0x1f8>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1ac      	bne.n	8006a36 <_printf_i+0x16a>
 8006adc:	7803      	ldrb	r3, [r0, #0]
 8006ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ae2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ae6:	e76c      	b.n	80069c2 <_printf_i+0xf6>
 8006ae8:	08007165 	.word	0x08007165
 8006aec:	08007176 	.word	0x08007176

08006af0 <_sbrk_r>:
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4c06      	ldr	r4, [pc, #24]	; (8006b0c <_sbrk_r+0x1c>)
 8006af4:	2300      	movs	r3, #0
 8006af6:	4605      	mov	r5, r0
 8006af8:	4608      	mov	r0, r1
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	f7fb f89c 	bl	8001c38 <_sbrk>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d102      	bne.n	8006b0a <_sbrk_r+0x1a>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	b103      	cbz	r3, 8006b0a <_sbrk_r+0x1a>
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	20000b88 	.word	0x20000b88

08006b10 <__sread>:
 8006b10:	b510      	push	{r4, lr}
 8006b12:	460c      	mov	r4, r1
 8006b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b18:	f000 fa96 	bl	8007048 <_read_r>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	bfab      	itete	ge
 8006b20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b22:	89a3      	ldrhlt	r3, [r4, #12]
 8006b24:	181b      	addge	r3, r3, r0
 8006b26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b2a:	bfac      	ite	ge
 8006b2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b2e:	81a3      	strhlt	r3, [r4, #12]
 8006b30:	bd10      	pop	{r4, pc}

08006b32 <__swrite>:
 8006b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b36:	461f      	mov	r7, r3
 8006b38:	898b      	ldrh	r3, [r1, #12]
 8006b3a:	05db      	lsls	r3, r3, #23
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	460c      	mov	r4, r1
 8006b40:	4616      	mov	r6, r2
 8006b42:	d505      	bpl.n	8006b50 <__swrite+0x1e>
 8006b44:	2302      	movs	r3, #2
 8006b46:	2200      	movs	r2, #0
 8006b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4c:	f000 f9b6 	bl	8006ebc <_lseek_r>
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b5a:	81a3      	strh	r3, [r4, #12]
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	463b      	mov	r3, r7
 8006b60:	4628      	mov	r0, r5
 8006b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b66:	f000 b869 	b.w	8006c3c <_write_r>

08006b6a <__sseek>:
 8006b6a:	b510      	push	{r4, lr}
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b72:	f000 f9a3 	bl	8006ebc <_lseek_r>
 8006b76:	1c43      	adds	r3, r0, #1
 8006b78:	89a3      	ldrh	r3, [r4, #12]
 8006b7a:	bf15      	itete	ne
 8006b7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b86:	81a3      	strheq	r3, [r4, #12]
 8006b88:	bf18      	it	ne
 8006b8a:	81a3      	strhne	r3, [r4, #12]
 8006b8c:	bd10      	pop	{r4, pc}

08006b8e <__sclose>:
 8006b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b92:	f000 b8d3 	b.w	8006d3c <_close_r>
	...

08006b98 <__swbuf_r>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	460e      	mov	r6, r1
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	4605      	mov	r5, r0
 8006ba0:	b118      	cbz	r0, 8006baa <__swbuf_r+0x12>
 8006ba2:	6983      	ldr	r3, [r0, #24]
 8006ba4:	b90b      	cbnz	r3, 8006baa <__swbuf_r+0x12>
 8006ba6:	f7ff fbf7 	bl	8006398 <__sinit>
 8006baa:	4b21      	ldr	r3, [pc, #132]	; (8006c30 <__swbuf_r+0x98>)
 8006bac:	429c      	cmp	r4, r3
 8006bae:	d12a      	bne.n	8006c06 <__swbuf_r+0x6e>
 8006bb0:	686c      	ldr	r4, [r5, #4]
 8006bb2:	69a3      	ldr	r3, [r4, #24]
 8006bb4:	60a3      	str	r3, [r4, #8]
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	071a      	lsls	r2, r3, #28
 8006bba:	d52e      	bpl.n	8006c1a <__swbuf_r+0x82>
 8006bbc:	6923      	ldr	r3, [r4, #16]
 8006bbe:	b363      	cbz	r3, 8006c1a <__swbuf_r+0x82>
 8006bc0:	6923      	ldr	r3, [r4, #16]
 8006bc2:	6820      	ldr	r0, [r4, #0]
 8006bc4:	1ac0      	subs	r0, r0, r3
 8006bc6:	6963      	ldr	r3, [r4, #20]
 8006bc8:	b2f6      	uxtb	r6, r6
 8006bca:	4283      	cmp	r3, r0
 8006bcc:	4637      	mov	r7, r6
 8006bce:	dc04      	bgt.n	8006bda <__swbuf_r+0x42>
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f948 	bl	8006e68 <_fflush_r>
 8006bd8:	bb28      	cbnz	r0, 8006c26 <__swbuf_r+0x8e>
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	60a3      	str	r3, [r4, #8]
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	6022      	str	r2, [r4, #0]
 8006be6:	701e      	strb	r6, [r3, #0]
 8006be8:	6963      	ldr	r3, [r4, #20]
 8006bea:	3001      	adds	r0, #1
 8006bec:	4283      	cmp	r3, r0
 8006bee:	d004      	beq.n	8006bfa <__swbuf_r+0x62>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	07db      	lsls	r3, r3, #31
 8006bf4:	d519      	bpl.n	8006c2a <__swbuf_r+0x92>
 8006bf6:	2e0a      	cmp	r6, #10
 8006bf8:	d117      	bne.n	8006c2a <__swbuf_r+0x92>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	f000 f933 	bl	8006e68 <_fflush_r>
 8006c02:	b190      	cbz	r0, 8006c2a <__swbuf_r+0x92>
 8006c04:	e00f      	b.n	8006c26 <__swbuf_r+0x8e>
 8006c06:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <__swbuf_r+0x9c>)
 8006c08:	429c      	cmp	r4, r3
 8006c0a:	d101      	bne.n	8006c10 <__swbuf_r+0x78>
 8006c0c:	68ac      	ldr	r4, [r5, #8]
 8006c0e:	e7d0      	b.n	8006bb2 <__swbuf_r+0x1a>
 8006c10:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <__swbuf_r+0xa0>)
 8006c12:	429c      	cmp	r4, r3
 8006c14:	bf08      	it	eq
 8006c16:	68ec      	ldreq	r4, [r5, #12]
 8006c18:	e7cb      	b.n	8006bb2 <__swbuf_r+0x1a>
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f000 f81f 	bl	8006c60 <__swsetup_r>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d0cc      	beq.n	8006bc0 <__swbuf_r+0x28>
 8006c26:	f04f 37ff 	mov.w	r7, #4294967295
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	08007114 	.word	0x08007114
 8006c34:	08007134 	.word	0x08007134
 8006c38:	080070f4 	.word	0x080070f4

08006c3c <_write_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4c07      	ldr	r4, [pc, #28]	; (8006c5c <_write_r+0x20>)
 8006c40:	4605      	mov	r5, r0
 8006c42:	4608      	mov	r0, r1
 8006c44:	4611      	mov	r1, r2
 8006c46:	2200      	movs	r2, #0
 8006c48:	6022      	str	r2, [r4, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f7fa ffa3 	bl	8001b96 <_write>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_write_r+0x1e>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_write_r+0x1e>
 8006c58:	602b      	str	r3, [r5, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	20000b88 	.word	0x20000b88

08006c60 <__swsetup_r>:
 8006c60:	4b32      	ldr	r3, [pc, #200]	; (8006d2c <__swsetup_r+0xcc>)
 8006c62:	b570      	push	{r4, r5, r6, lr}
 8006c64:	681d      	ldr	r5, [r3, #0]
 8006c66:	4606      	mov	r6, r0
 8006c68:	460c      	mov	r4, r1
 8006c6a:	b125      	cbz	r5, 8006c76 <__swsetup_r+0x16>
 8006c6c:	69ab      	ldr	r3, [r5, #24]
 8006c6e:	b913      	cbnz	r3, 8006c76 <__swsetup_r+0x16>
 8006c70:	4628      	mov	r0, r5
 8006c72:	f7ff fb91 	bl	8006398 <__sinit>
 8006c76:	4b2e      	ldr	r3, [pc, #184]	; (8006d30 <__swsetup_r+0xd0>)
 8006c78:	429c      	cmp	r4, r3
 8006c7a:	d10f      	bne.n	8006c9c <__swsetup_r+0x3c>
 8006c7c:	686c      	ldr	r4, [r5, #4]
 8006c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	0715      	lsls	r5, r2, #28
 8006c86:	d42c      	bmi.n	8006ce2 <__swsetup_r+0x82>
 8006c88:	06d0      	lsls	r0, r2, #27
 8006c8a:	d411      	bmi.n	8006cb0 <__swsetup_r+0x50>
 8006c8c:	2209      	movs	r2, #9
 8006c8e:	6032      	str	r2, [r6, #0]
 8006c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c94:	81a3      	strh	r3, [r4, #12]
 8006c96:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9a:	e03e      	b.n	8006d1a <__swsetup_r+0xba>
 8006c9c:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <__swsetup_r+0xd4>)
 8006c9e:	429c      	cmp	r4, r3
 8006ca0:	d101      	bne.n	8006ca6 <__swsetup_r+0x46>
 8006ca2:	68ac      	ldr	r4, [r5, #8]
 8006ca4:	e7eb      	b.n	8006c7e <__swsetup_r+0x1e>
 8006ca6:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <__swsetup_r+0xd8>)
 8006ca8:	429c      	cmp	r4, r3
 8006caa:	bf08      	it	eq
 8006cac:	68ec      	ldreq	r4, [r5, #12]
 8006cae:	e7e6      	b.n	8006c7e <__swsetup_r+0x1e>
 8006cb0:	0751      	lsls	r1, r2, #29
 8006cb2:	d512      	bpl.n	8006cda <__swsetup_r+0x7a>
 8006cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb6:	b141      	cbz	r1, 8006cca <__swsetup_r+0x6a>
 8006cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	d002      	beq.n	8006cc6 <__swsetup_r+0x66>
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	f000 f973 	bl	8006fac <_free_r>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	6363      	str	r3, [r4, #52]	; 0x34
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6063      	str	r3, [r4, #4]
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	f043 0308 	orr.w	r3, r3, #8
 8006ce0:	81a3      	strh	r3, [r4, #12]
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	b94b      	cbnz	r3, 8006cfa <__swsetup_r+0x9a>
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf0:	d003      	beq.n	8006cfa <__swsetup_r+0x9a>
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f000 f917 	bl	8006f28 <__smakebuf_r>
 8006cfa:	89a2      	ldrh	r2, [r4, #12]
 8006cfc:	f012 0301 	ands.w	r3, r2, #1
 8006d00:	d00c      	beq.n	8006d1c <__swsetup_r+0xbc>
 8006d02:	2300      	movs	r3, #0
 8006d04:	60a3      	str	r3, [r4, #8]
 8006d06:	6963      	ldr	r3, [r4, #20]
 8006d08:	425b      	negs	r3, r3
 8006d0a:	61a3      	str	r3, [r4, #24]
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	b953      	cbnz	r3, 8006d26 <__swsetup_r+0xc6>
 8006d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006d18:	d1ba      	bne.n	8006c90 <__swsetup_r+0x30>
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	0792      	lsls	r2, r2, #30
 8006d1e:	bf58      	it	pl
 8006d20:	6963      	ldrpl	r3, [r4, #20]
 8006d22:	60a3      	str	r3, [r4, #8]
 8006d24:	e7f2      	b.n	8006d0c <__swsetup_r+0xac>
 8006d26:	2000      	movs	r0, #0
 8006d28:	e7f7      	b.n	8006d1a <__swsetup_r+0xba>
 8006d2a:	bf00      	nop
 8006d2c:	20000010 	.word	0x20000010
 8006d30:	08007114 	.word	0x08007114
 8006d34:	08007134 	.word	0x08007134
 8006d38:	080070f4 	.word	0x080070f4

08006d3c <_close_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	4c06      	ldr	r4, [pc, #24]	; (8006d58 <_close_r+0x1c>)
 8006d40:	2300      	movs	r3, #0
 8006d42:	4605      	mov	r5, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	f7fa ff41 	bl	8001bce <_close>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_close_r+0x1a>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_close_r+0x1a>
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20000b88 	.word	0x20000b88

08006d5c <__sflush_r>:
 8006d5c:	898a      	ldrh	r2, [r1, #12]
 8006d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d62:	4605      	mov	r5, r0
 8006d64:	0710      	lsls	r0, r2, #28
 8006d66:	460c      	mov	r4, r1
 8006d68:	d458      	bmi.n	8006e1c <__sflush_r+0xc0>
 8006d6a:	684b      	ldr	r3, [r1, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dc05      	bgt.n	8006d7c <__sflush_r+0x20>
 8006d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	dc02      	bgt.n	8006d7c <__sflush_r+0x20>
 8006d76:	2000      	movs	r0, #0
 8006d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d7e:	2e00      	cmp	r6, #0
 8006d80:	d0f9      	beq.n	8006d76 <__sflush_r+0x1a>
 8006d82:	2300      	movs	r3, #0
 8006d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d88:	682f      	ldr	r7, [r5, #0]
 8006d8a:	6a21      	ldr	r1, [r4, #32]
 8006d8c:	602b      	str	r3, [r5, #0]
 8006d8e:	d032      	beq.n	8006df6 <__sflush_r+0x9a>
 8006d90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	075a      	lsls	r2, r3, #29
 8006d96:	d505      	bpl.n	8006da4 <__sflush_r+0x48>
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	1ac0      	subs	r0, r0, r3
 8006d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d9e:	b10b      	cbz	r3, 8006da4 <__sflush_r+0x48>
 8006da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006da2:	1ac0      	subs	r0, r0, r3
 8006da4:	2300      	movs	r3, #0
 8006da6:	4602      	mov	r2, r0
 8006da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006daa:	6a21      	ldr	r1, [r4, #32]
 8006dac:	4628      	mov	r0, r5
 8006dae:	47b0      	blx	r6
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	d106      	bne.n	8006dc4 <__sflush_r+0x68>
 8006db6:	6829      	ldr	r1, [r5, #0]
 8006db8:	291d      	cmp	r1, #29
 8006dba:	d848      	bhi.n	8006e4e <__sflush_r+0xf2>
 8006dbc:	4a29      	ldr	r2, [pc, #164]	; (8006e64 <__sflush_r+0x108>)
 8006dbe:	40ca      	lsrs	r2, r1
 8006dc0:	07d6      	lsls	r6, r2, #31
 8006dc2:	d544      	bpl.n	8006e4e <__sflush_r+0xf2>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	6062      	str	r2, [r4, #4]
 8006dc8:	04d9      	lsls	r1, r3, #19
 8006dca:	6922      	ldr	r2, [r4, #16]
 8006dcc:	6022      	str	r2, [r4, #0]
 8006dce:	d504      	bpl.n	8006dda <__sflush_r+0x7e>
 8006dd0:	1c42      	adds	r2, r0, #1
 8006dd2:	d101      	bne.n	8006dd8 <__sflush_r+0x7c>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b903      	cbnz	r3, 8006dda <__sflush_r+0x7e>
 8006dd8:	6560      	str	r0, [r4, #84]	; 0x54
 8006dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ddc:	602f      	str	r7, [r5, #0]
 8006dde:	2900      	cmp	r1, #0
 8006de0:	d0c9      	beq.n	8006d76 <__sflush_r+0x1a>
 8006de2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de6:	4299      	cmp	r1, r3
 8006de8:	d002      	beq.n	8006df0 <__sflush_r+0x94>
 8006dea:	4628      	mov	r0, r5
 8006dec:	f000 f8de 	bl	8006fac <_free_r>
 8006df0:	2000      	movs	r0, #0
 8006df2:	6360      	str	r0, [r4, #52]	; 0x34
 8006df4:	e7c0      	b.n	8006d78 <__sflush_r+0x1c>
 8006df6:	2301      	movs	r3, #1
 8006df8:	4628      	mov	r0, r5
 8006dfa:	47b0      	blx	r6
 8006dfc:	1c41      	adds	r1, r0, #1
 8006dfe:	d1c8      	bne.n	8006d92 <__sflush_r+0x36>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0c5      	beq.n	8006d92 <__sflush_r+0x36>
 8006e06:	2b1d      	cmp	r3, #29
 8006e08:	d001      	beq.n	8006e0e <__sflush_r+0xb2>
 8006e0a:	2b16      	cmp	r3, #22
 8006e0c:	d101      	bne.n	8006e12 <__sflush_r+0xb6>
 8006e0e:	602f      	str	r7, [r5, #0]
 8006e10:	e7b1      	b.n	8006d76 <__sflush_r+0x1a>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	e7ad      	b.n	8006d78 <__sflush_r+0x1c>
 8006e1c:	690f      	ldr	r7, [r1, #16]
 8006e1e:	2f00      	cmp	r7, #0
 8006e20:	d0a9      	beq.n	8006d76 <__sflush_r+0x1a>
 8006e22:	0793      	lsls	r3, r2, #30
 8006e24:	680e      	ldr	r6, [r1, #0]
 8006e26:	bf08      	it	eq
 8006e28:	694b      	ldreq	r3, [r1, #20]
 8006e2a:	600f      	str	r7, [r1, #0]
 8006e2c:	bf18      	it	ne
 8006e2e:	2300      	movne	r3, #0
 8006e30:	eba6 0807 	sub.w	r8, r6, r7
 8006e34:	608b      	str	r3, [r1, #8]
 8006e36:	f1b8 0f00 	cmp.w	r8, #0
 8006e3a:	dd9c      	ble.n	8006d76 <__sflush_r+0x1a>
 8006e3c:	4643      	mov	r3, r8
 8006e3e:	463a      	mov	r2, r7
 8006e40:	6a21      	ldr	r1, [r4, #32]
 8006e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b0      	blx	r6
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	dc06      	bgt.n	8006e5a <__sflush_r+0xfe>
 8006e4c:	89a3      	ldrh	r3, [r4, #12]
 8006e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	e78e      	b.n	8006d78 <__sflush_r+0x1c>
 8006e5a:	4407      	add	r7, r0
 8006e5c:	eba8 0800 	sub.w	r8, r8, r0
 8006e60:	e7e9      	b.n	8006e36 <__sflush_r+0xda>
 8006e62:	bf00      	nop
 8006e64:	20400001 	.word	0x20400001

08006e68 <_fflush_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	690b      	ldr	r3, [r1, #16]
 8006e6c:	4605      	mov	r5, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	b1db      	cbz	r3, 8006eaa <_fflush_r+0x42>
 8006e72:	b118      	cbz	r0, 8006e7c <_fflush_r+0x14>
 8006e74:	6983      	ldr	r3, [r0, #24]
 8006e76:	b90b      	cbnz	r3, 8006e7c <_fflush_r+0x14>
 8006e78:	f7ff fa8e 	bl	8006398 <__sinit>
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <_fflush_r+0x48>)
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d109      	bne.n	8006e96 <_fflush_r+0x2e>
 8006e82:	686c      	ldr	r4, [r5, #4]
 8006e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e88:	b17b      	cbz	r3, 8006eaa <_fflush_r+0x42>
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e92:	f7ff bf63 	b.w	8006d5c <__sflush_r>
 8006e96:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <_fflush_r+0x4c>)
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d101      	bne.n	8006ea0 <_fflush_r+0x38>
 8006e9c:	68ac      	ldr	r4, [r5, #8]
 8006e9e:	e7f1      	b.n	8006e84 <_fflush_r+0x1c>
 8006ea0:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <_fflush_r+0x50>)
 8006ea2:	429c      	cmp	r4, r3
 8006ea4:	bf08      	it	eq
 8006ea6:	68ec      	ldreq	r4, [r5, #12]
 8006ea8:	e7ec      	b.n	8006e84 <_fflush_r+0x1c>
 8006eaa:	2000      	movs	r0, #0
 8006eac:	bd38      	pop	{r3, r4, r5, pc}
 8006eae:	bf00      	nop
 8006eb0:	08007114 	.word	0x08007114
 8006eb4:	08007134 	.word	0x08007134
 8006eb8:	080070f4 	.word	0x080070f4

08006ebc <_lseek_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4c07      	ldr	r4, [pc, #28]	; (8006edc <_lseek_r+0x20>)
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	4608      	mov	r0, r1
 8006ec4:	4611      	mov	r1, r2
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	6022      	str	r2, [r4, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f7fa fea6 	bl	8001c1c <_lseek>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_lseek_r+0x1e>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_lseek_r+0x1e>
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	20000b88 	.word	0x20000b88

08006ee0 <__swhatbuf_r>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	460e      	mov	r6, r1
 8006ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee8:	2900      	cmp	r1, #0
 8006eea:	b096      	sub	sp, #88	; 0x58
 8006eec:	4614      	mov	r4, r2
 8006eee:	461d      	mov	r5, r3
 8006ef0:	da07      	bge.n	8006f02 <__swhatbuf_r+0x22>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	602b      	str	r3, [r5, #0]
 8006ef6:	89b3      	ldrh	r3, [r6, #12]
 8006ef8:	061a      	lsls	r2, r3, #24
 8006efa:	d410      	bmi.n	8006f1e <__swhatbuf_r+0x3e>
 8006efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f00:	e00e      	b.n	8006f20 <__swhatbuf_r+0x40>
 8006f02:	466a      	mov	r2, sp
 8006f04:	f000 f8b2 	bl	800706c <_fstat_r>
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	dbf2      	blt.n	8006ef2 <__swhatbuf_r+0x12>
 8006f0c:	9a01      	ldr	r2, [sp, #4]
 8006f0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f16:	425a      	negs	r2, r3
 8006f18:	415a      	adcs	r2, r3
 8006f1a:	602a      	str	r2, [r5, #0]
 8006f1c:	e7ee      	b.n	8006efc <__swhatbuf_r+0x1c>
 8006f1e:	2340      	movs	r3, #64	; 0x40
 8006f20:	2000      	movs	r0, #0
 8006f22:	6023      	str	r3, [r4, #0]
 8006f24:	b016      	add	sp, #88	; 0x58
 8006f26:	bd70      	pop	{r4, r5, r6, pc}

08006f28 <__smakebuf_r>:
 8006f28:	898b      	ldrh	r3, [r1, #12]
 8006f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f2c:	079d      	lsls	r5, r3, #30
 8006f2e:	4606      	mov	r6, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	d507      	bpl.n	8006f44 <__smakebuf_r+0x1c>
 8006f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	6123      	str	r3, [r4, #16]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	6163      	str	r3, [r4, #20]
 8006f40:	b002      	add	sp, #8
 8006f42:	bd70      	pop	{r4, r5, r6, pc}
 8006f44:	ab01      	add	r3, sp, #4
 8006f46:	466a      	mov	r2, sp
 8006f48:	f7ff ffca 	bl	8006ee0 <__swhatbuf_r>
 8006f4c:	9900      	ldr	r1, [sp, #0]
 8006f4e:	4605      	mov	r5, r0
 8006f50:	4630      	mov	r0, r6
 8006f52:	f7ff faab 	bl	80064ac <_malloc_r>
 8006f56:	b948      	cbnz	r0, 8006f6c <__smakebuf_r+0x44>
 8006f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f5c:	059a      	lsls	r2, r3, #22
 8006f5e:	d4ef      	bmi.n	8006f40 <__smakebuf_r+0x18>
 8006f60:	f023 0303 	bic.w	r3, r3, #3
 8006f64:	f043 0302 	orr.w	r3, r3, #2
 8006f68:	81a3      	strh	r3, [r4, #12]
 8006f6a:	e7e3      	b.n	8006f34 <__smakebuf_r+0xc>
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <__smakebuf_r+0x7c>)
 8006f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	6020      	str	r0, [r4, #0]
 8006f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	9b00      	ldr	r3, [sp, #0]
 8006f7c:	6163      	str	r3, [r4, #20]
 8006f7e:	9b01      	ldr	r3, [sp, #4]
 8006f80:	6120      	str	r0, [r4, #16]
 8006f82:	b15b      	cbz	r3, 8006f9c <__smakebuf_r+0x74>
 8006f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f88:	4630      	mov	r0, r6
 8006f8a:	f000 f881 	bl	8007090 <_isatty_r>
 8006f8e:	b128      	cbz	r0, 8006f9c <__smakebuf_r+0x74>
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	f023 0303 	bic.w	r3, r3, #3
 8006f96:	f043 0301 	orr.w	r3, r3, #1
 8006f9a:	81a3      	strh	r3, [r4, #12]
 8006f9c:	89a3      	ldrh	r3, [r4, #12]
 8006f9e:	431d      	orrs	r5, r3
 8006fa0:	81a5      	strh	r5, [r4, #12]
 8006fa2:	e7cd      	b.n	8006f40 <__smakebuf_r+0x18>
 8006fa4:	08006361 	.word	0x08006361

08006fa8 <__malloc_lock>:
 8006fa8:	4770      	bx	lr

08006faa <__malloc_unlock>:
 8006faa:	4770      	bx	lr

08006fac <_free_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4605      	mov	r5, r0
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d045      	beq.n	8007040 <_free_r+0x94>
 8006fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fb8:	1f0c      	subs	r4, r1, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bfb8      	it	lt
 8006fbe:	18e4      	addlt	r4, r4, r3
 8006fc0:	f7ff fff2 	bl	8006fa8 <__malloc_lock>
 8006fc4:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <_free_r+0x98>)
 8006fc6:	6813      	ldr	r3, [r2, #0]
 8006fc8:	4610      	mov	r0, r2
 8006fca:	b933      	cbnz	r3, 8006fda <_free_r+0x2e>
 8006fcc:	6063      	str	r3, [r4, #4]
 8006fce:	6014      	str	r4, [r2, #0]
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fd6:	f7ff bfe8 	b.w	8006faa <__malloc_unlock>
 8006fda:	42a3      	cmp	r3, r4
 8006fdc:	d90c      	bls.n	8006ff8 <_free_r+0x4c>
 8006fde:	6821      	ldr	r1, [r4, #0]
 8006fe0:	1862      	adds	r2, r4, r1
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	bf04      	itt	eq
 8006fe6:	681a      	ldreq	r2, [r3, #0]
 8006fe8:	685b      	ldreq	r3, [r3, #4]
 8006fea:	6063      	str	r3, [r4, #4]
 8006fec:	bf04      	itt	eq
 8006fee:	1852      	addeq	r2, r2, r1
 8006ff0:	6022      	streq	r2, [r4, #0]
 8006ff2:	6004      	str	r4, [r0, #0]
 8006ff4:	e7ec      	b.n	8006fd0 <_free_r+0x24>
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	b10a      	cbz	r2, 8007000 <_free_r+0x54>
 8006ffc:	42a2      	cmp	r2, r4
 8006ffe:	d9fa      	bls.n	8006ff6 <_free_r+0x4a>
 8007000:	6819      	ldr	r1, [r3, #0]
 8007002:	1858      	adds	r0, r3, r1
 8007004:	42a0      	cmp	r0, r4
 8007006:	d10b      	bne.n	8007020 <_free_r+0x74>
 8007008:	6820      	ldr	r0, [r4, #0]
 800700a:	4401      	add	r1, r0
 800700c:	1858      	adds	r0, r3, r1
 800700e:	4282      	cmp	r2, r0
 8007010:	6019      	str	r1, [r3, #0]
 8007012:	d1dd      	bne.n	8006fd0 <_free_r+0x24>
 8007014:	6810      	ldr	r0, [r2, #0]
 8007016:	6852      	ldr	r2, [r2, #4]
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	4401      	add	r1, r0
 800701c:	6019      	str	r1, [r3, #0]
 800701e:	e7d7      	b.n	8006fd0 <_free_r+0x24>
 8007020:	d902      	bls.n	8007028 <_free_r+0x7c>
 8007022:	230c      	movs	r3, #12
 8007024:	602b      	str	r3, [r5, #0]
 8007026:	e7d3      	b.n	8006fd0 <_free_r+0x24>
 8007028:	6820      	ldr	r0, [r4, #0]
 800702a:	1821      	adds	r1, r4, r0
 800702c:	428a      	cmp	r2, r1
 800702e:	bf04      	itt	eq
 8007030:	6811      	ldreq	r1, [r2, #0]
 8007032:	6852      	ldreq	r2, [r2, #4]
 8007034:	6062      	str	r2, [r4, #4]
 8007036:	bf04      	itt	eq
 8007038:	1809      	addeq	r1, r1, r0
 800703a:	6021      	streq	r1, [r4, #0]
 800703c:	605c      	str	r4, [r3, #4]
 800703e:	e7c7      	b.n	8006fd0 <_free_r+0x24>
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	bf00      	nop
 8007044:	200000a0 	.word	0x200000a0

08007048 <_read_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4c07      	ldr	r4, [pc, #28]	; (8007068 <_read_r+0x20>)
 800704c:	4605      	mov	r5, r0
 800704e:	4608      	mov	r0, r1
 8007050:	4611      	mov	r1, r2
 8007052:	2200      	movs	r2, #0
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f7fa fd80 	bl	8001b5c <_read>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_read_r+0x1e>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	b103      	cbz	r3, 8007066 <_read_r+0x1e>
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20000b88 	.word	0x20000b88

0800706c <_fstat_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4c07      	ldr	r4, [pc, #28]	; (800708c <_fstat_r+0x20>)
 8007070:	2300      	movs	r3, #0
 8007072:	4605      	mov	r5, r0
 8007074:	4608      	mov	r0, r1
 8007076:	4611      	mov	r1, r2
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	f7fa fdb4 	bl	8001be6 <_fstat>
 800707e:	1c43      	adds	r3, r0, #1
 8007080:	d102      	bne.n	8007088 <_fstat_r+0x1c>
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	b103      	cbz	r3, 8007088 <_fstat_r+0x1c>
 8007086:	602b      	str	r3, [r5, #0]
 8007088:	bd38      	pop	{r3, r4, r5, pc}
 800708a:	bf00      	nop
 800708c:	20000b88 	.word	0x20000b88

08007090 <_isatty_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4c06      	ldr	r4, [pc, #24]	; (80070ac <_isatty_r+0x1c>)
 8007094:	2300      	movs	r3, #0
 8007096:	4605      	mov	r5, r0
 8007098:	4608      	mov	r0, r1
 800709a:	6023      	str	r3, [r4, #0]
 800709c:	f7fa fdb3 	bl	8001c06 <_isatty>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_isatty_r+0x1a>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_isatty_r+0x1a>
 80070a8:	602b      	str	r3, [r5, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20000b88 	.word	0x20000b88

080070b0 <_init>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	bf00      	nop
 80070b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b6:	bc08      	pop	{r3}
 80070b8:	469e      	mov	lr, r3
 80070ba:	4770      	bx	lr

080070bc <_fini>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr
