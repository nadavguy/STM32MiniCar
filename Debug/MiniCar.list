
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eea8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0800f0a8  0800f0a8  0001f0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b0  0800f3b0  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3b0  0800f3b0  0001f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3b8  0800f3b8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3b8  0800f3b8  0001f3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3bc  0800f3bc  0001f3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800f3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000411c  20000200  0800f5c0  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000431c  0800f5c0  0002431c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003592e  00000000  00000000  0002022e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f93  00000000  00000000  00055b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002660  00000000  00000000  0005aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023f8  00000000  00000000  0005d150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003010a  00000000  00000000  0005f548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e583  00000000  00000000  0008f652  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001244f4  00000000  00000000  000adbd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d20c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b0d4  00000000  00000000  001d2144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000200 	.word	0x20000200
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f090 	.word	0x0800f090

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000204 	.word	0x20000204
 800023c:	0800f090 	.word	0x0800f090

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <start_pwm1>:
 *      Author: raing
 */
#include "main.h"

void start_pwm1(int onTimemSec)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = onTimemSec * 4 / 10;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <start_pwm1+0x30>)
 80005fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000602:	1092      	asrs	r2, r2, #2
 8000604:	17db      	asrs	r3, r3, #31
 8000606:	1ad2      	subs	r2, r2, r3
 8000608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <start_pwm1+0x34>)
 8000612:	f008 fd05 	bl	8009020 <HAL_TIM_PWM_Start>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	66666667 	.word	0x66666667
 8000624:	20004168 	.word	0x20004168

08000628 <start_pwm2>:
{
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}

void start_pwm2(int PercentOn)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    TIM1->CCR4 = PercentOn;
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <start_pwm2+0x20>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000636:	210c      	movs	r1, #12
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <start_pwm2+0x24>)
 800063a:	f008 fcf1 	bl	8009020 <HAL_TIM_PWM_Start>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010000 	.word	0x40010000
 800064c:	20004040 	.word	0x20004040

08000650 <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <QSPI_Init+0x1c>)
 8000656:	f000 f9a1 	bl	800099c <QSPI_DummyCyclesCfg>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <QSPI_Init+0x16>
  }
  return HAL_OK;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200042a0 	.word	0x200042a0

08000670 <QSPI_Erase_Sector4K>:
  * @brief  Erases the specified sector of the QSPI memory.
  * @param  SectorAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t QSPI_Erase_Sector4K(uint32_t SectorAddress)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b092      	sub	sp, #72	; 0x48
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  uint8_t reg1[6];

  if (QSPI_WriteEnable() != HAL_OK)
 8000678:	f000 f90e 	bl	8000898 <QSPI_WriteEnable>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <QSPI_Erase_Sector4K+0x16>
  {
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e030      	b.n	80006e8 <QSPI_Erase_Sector4K+0x78>
  }

  /* Initialize the erase command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x20; //SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 800068c:	2320      	movs	r3, #32
 800068e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS; //QSPI_ADDRESS_32_BITS;
 8000696:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069a:	61fb      	str	r3, [r7, #28]
  s_command.Address = SectorAddress;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_NONE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80006b0:	2300      	movs	r3, #0
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80006b4:	2300      	movs	r3, #0
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80006c0:	4619      	mov	r1, r3
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <QSPI_Erase_Sector4K+0x80>)
 80006c4:	f005 fe52 	bl	800636c <HAL_QSPI_Command>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <QSPI_Erase_Sector4K+0x62>
  {
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00a      	b.n	80006e8 <QSPI_Erase_Sector4K+0x78>
  }

  // -------------------------------------------------------------------------------------

  //  if (QSPI_AutoPolling_Erase_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)  {    return HAL_ERROR;  }
  if (QSPI_AutoPolling_Write_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)
 80006d2:	f44f 7148 	mov.w	r1, #800	; 0x320
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <QSPI_Erase_Sector4K+0x80>)
 80006d8:	f000 f928 	bl	800092c <QSPI_AutoPolling_Write_in_progress>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <QSPI_Erase_Sector4K+0x76>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e000      	b.n	80006e8 <QSPI_Erase_Sector4K+0x78>
  }

  return HAL_OK;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3748      	adds	r7, #72	; 0x48
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200042a0 	.word	0x200042a0

080006f4 <QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b096      	sub	sp, #88	; 0x58
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr = 0, current_size = 0, current_addr = 0;
 8000700:	2300      	movs	r3, #0
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000704:	2300      	movs	r3, #0
 8000706:	657b      	str	r3, [r7, #84]	; 0x54
 8000708:	2300      	movs	r3, #0
 800070a:	653b      	str	r3, [r7, #80]	; 0x50
  pData = pData - 1;
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3b01      	subs	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000716:	e003      	b.n	8000720 <QSPI_Write+0x2c>
  {
    current_addr += QSPI_PAGE_SIZE;
 8000718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800071a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800071e:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000720:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	429a      	cmp	r2, r3
 8000726:	d9f7      	bls.n	8000718 <QSPI_Write+0x24>
  }
  current_size = current_addr - WriteAddr;
 8000728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000730:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	429a      	cmp	r2, r3
 8000736:	d901      	bls.n	800073c <QSPI_Write+0x48>
  {
    current_size = Size;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	657b      	str	r3, [r7, #84]	; 0x54
  }
  //  wr_time1 = systick_count_up;
  /* Initialize the address variables */
  current_addr = WriteAddr;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4413      	add	r3, r2
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction = 0x02; // simple page programm //QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 800074e:	2302      	movs	r3, #2
 8000750:	617b      	str	r3, [r7, #20]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800075e:	2300      	movs	r3, #0
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000762:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000770:	2300      	movs	r3, #0
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000774:	2300      	movs	r3, #0
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8000778:	f000 f88e 	bl	8000898 <QSPI_WriteEnable>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <QSPI_Write+0x92>
    {
      return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e03f      	b.n	8000806 <QSPI_Write+0x112>
    }

    /* Configure the command */
    s_command.Address = current_addr;
 8000786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000788:	61bb      	str	r3, [r7, #24]
    s_command.NbData = current_size;
 800078a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	f241 3288 	movw	r2, #5000	; 0x1388
 8000796:	4619      	mov	r1, r3
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <QSPI_Write+0x11c>)
 800079a:	f005 fde7 	bl	800636c <HAL_QSPI_Command>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <QSPI_Write+0xb4>
    {
      return HAL_ERROR;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e02e      	b.n	8000806 <QSPI_Write+0x112>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	4818      	ldr	r0, [pc, #96]	; (8000810 <QSPI_Write+0x11c>)
 80007b0:	f005 fe3a 	bl	8006428 <HAL_QSPI_Transmit>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <QSPI_Write+0xca>
    {
      return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e023      	b.n	8000806 <QSPI_Write+0x112>
    }

    if (QSPI_AutoPolling_Write_in_progress(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80007be:	f241 3188 	movw	r1, #5000	; 0x1388
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <QSPI_Write+0x11c>)
 80007c4:	f000 f8b2 	bl	800092c <QSPI_AutoPolling_Write_in_progress>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <QSPI_Write+0xde>
    {
      return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e019      	b.n	8000806 <QSPI_Write+0x112>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 80007d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007d6:	4413      	add	r3, r2
 80007d8:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
 80007e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80007e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d203      	bcs.n	80007f6 <QSPI_Write+0x102>
 80007ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	e001      	b.n	80007fa <QSPI_Write+0x106>
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 80007fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000800:	429a      	cmp	r2, r3
 8000802:	d3b9      	bcc.n	8000778 <QSPI_Write+0x84>

  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3758      	adds	r7, #88	; 0x58
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200042a0 	.word	0x200042a0

08000814 <QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b092      	sub	sp, #72	; 0x48
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x03; // simple data read // QPI_READ_4_BYTE_ADDR_CMD; //
 8000826:	2303      	movs	r3, #3
 8000828:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000830:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000834:	61fb      	str	r3, [r7, #28]
  s_command.Address = ReadAddr;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 800083e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = QSPI_DUMMY_CYCLES_READ;
 8000844:	2308      	movs	r3, #8
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = Size;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000850:	2300      	movs	r3, #0
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000854:	2300      	movs	r3, #0
 8000856:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <QSPI_Read+0x80>)
 8000864:	f005 fd82 	bl	800636c <HAL_QSPI_Command>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00b      	b.n	800088a <QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000872:	f241 3288 	movw	r2, #5000	; 0x1388
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <QSPI_Read+0x80>)
 800087a:	f005 fe67 	bl	800654c <HAL_QSPI_Receive>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <QSPI_Read+0x74>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e000      	b.n	800088a <QSPI_Read+0x76>
  }

  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3748      	adds	r7, #72	; 0x48
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200042a0 	.word	0x200042a0

08000898 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	; 0x50
 800089c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800089e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 80008a4:	2306      	movs	r3, #6
 80008a6:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80008bc:	2300      	movs	r3, #0
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008c0:	2300      	movs	r3, #0
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008c4:	f107 0318 	add.w	r3, r7, #24
 80008c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80008cc:	4619      	mov	r1, r3
 80008ce:	4816      	ldr	r0, [pc, #88]	; (8000928 <QSPI_WriteEnable+0x90>)
 80008d0:	f005 fd4c 	bl	800636c <HAL_QSPI_Command>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e01f      	b.n	800091e <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 80008de:	2302      	movs	r3, #2
 80008e0:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 80008e2:	2302      	movs	r3, #2
 80008e4:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 80008ea:	2301      	movs	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f6:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 80008f8:	2305      	movs	r3, #5
 80008fa:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 80008fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000900:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000902:	463a      	mov	r2, r7
 8000904:	f107 0118 	add.w	r1, r7, #24
 8000908:	f241 3388 	movw	r3, #5000	; 0x1388
 800090c:	4806      	ldr	r0, [pc, #24]	; (8000928 <QSPI_WriteEnable+0x90>)
 800090e:	f005 feba 	bl	8006686 <HAL_QSPI_AutoPolling>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 8000918:	2301      	movs	r3, #1
 800091a:	e000      	b.n	800091e <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 800091c:	2300      	movs	r3, #0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200042a0 	.word	0x200042a0

0800092c <QSPI_AutoPolling_Write_in_progress>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
uint8_t QSPI_AutoPolling_Write_in_progress(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b096      	sub	sp, #88	; 0x58
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800093a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction = READ_STATUS_REG_CMD;
 800093c:	2305      	movs	r3, #5
 800093e:	623b      	str	r3, [r7, #32]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000940:	2300      	movs	r3, #0
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000944:	2300      	movs	r3, #0
 8000946:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000956:	2300      	movs	r3, #0
 8000958:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800095a:	2300      	movs	r3, #0
 800095c:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  //  s_config.Mask            = QSPI_SR_WIP;
  s_config.Mask = QSPI_SR_WIP; /*!< Write in progress */
 8000962:	2301      	movs	r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 800096a:	2301      	movs	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
  s_config.Interval = 1; //0x10;
 800096e:	2301      	movs	r3, #1
 8000970:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8000978:	f107 0208 	add.w	r2, r7, #8
 800097c:	f107 0120 	add.w	r1, r7, #32
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f005 fe7f 	bl	8006686 <HAL_QSPI_AutoPolling>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <QSPI_AutoPolling_Write_in_progress+0x66>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e000      	b.n	8000994 <QSPI_AutoPolling_Write_in_progress+0x68>
  }

  return HAL_OK;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	3758      	adds	r7, #88	; 0x58
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 80009a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 80009aa:	2305      	movs	r3, #5
 80009ac:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 80009b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009c8:	2300      	movs	r3, #0
 80009ca:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009cc:	2300      	movs	r3, #0
 80009ce:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80009d8:	4619      	mov	r1, r3
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f005 fcc6 	bl	800636c <HAL_QSPI_Command>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e08f      	b.n	8000b0a <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f2:	4619      	mov	r1, r3
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f005 fda9 	bl	800654c <HAL_QSPI_Receive>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e082      	b.n	8000b0a <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 8000a0a:	2315      	movs	r3, #21
 8000a0c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000a20:	2301      	movs	r3, #1
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a38:	4619      	mov	r1, r3
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f005 fc96 	bl	800636c <HAL_QSPI_Command>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e05f      	b.n	8000b0a <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	3301      	adds	r3, #1
 8000a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f005 fd78 	bl	800654c <HAL_QSPI_Receive>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e051      	b.n	8000b0a <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 8000a66:	f7ff ff17 	bl	8000898 <QSPI_WriteEnable>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	e04a      	b.n	8000b0a <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 8000aa0:	7b7b      	ldrb	r3, [r7, #13]
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aa8:	b25a      	sxtb	r2, r3
 8000aaa:	23c0      	movs	r3, #192	; 0xc0
 8000aac:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ab0:	fa93 f3a3 	rbit	r3, r3
 8000ab4:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ab8:	fab3 f383 	clz	r3, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4619      	mov	r1, r3
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	408b      	lsls	r3, r1
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f005 fc47 	bl	800636c <HAL_QSPI_Command>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e010      	b.n	8000b0a <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af0:	4619      	mov	r1, r3
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f005 fc98 	bl	8006428 <HAL_QSPI_Transmit>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e003      	b.n	8000b0a <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 8000b02:	2028      	movs	r0, #40	; 0x28
 8000b04:	f002 fcc8 	bl	8003498 <HAL_Delay>

  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <led_init>:
 */

#include "main.h"

void led_init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 8000b18:	2104      	movs	r1, #4
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <led_init+0x20>)
 8000b1c:	f008 fa80 	bl	8009020 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 8000b20:	2100      	movs	r1, #0
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <led_init+0x20>)
 8000b24:	f008 fa7c 	bl	8009020 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 8000b28:	210c      	movs	r1, #12
 8000b2a:	4802      	ldr	r0, [pc, #8]	; (8000b34 <led_init+0x20>)
 8000b2c:	f008 fa78 	bl	8009020 <HAL_TIM_PWM_Start>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20003db0 	.word	0x20003db0

08000b38 <ParseRFMessage>:

uint8_t GeneralHeader[8] = {'A','B','5','6','F','E','2','1'};
uint8_t LocalUART5RXArray[256] = {0};

uint8_t ParseRFMessage(uint8_t *Angle, uint8_t *Power)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b091      	sub	sp, #68	; 0x44
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
//	AB56FE21,7,20580,#0,90!~
	int ret = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
	int HeaderStartIndex = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
	int HeaderStopIndex = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
	int MessageEndIndex = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63fb      	str	r3, [r7, #60]	; 0x3c
	int HashTagIndex = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
	int CommaIndex = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
	int LocalCounter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
	bool HeaderFound = false;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	bool MessageEndFound = false;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	bool HashFound = false;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	bool CommaFound = false;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	*Angle = 0;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
	*Power = 0;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	for (int i = 0 ; i< strlen(UART5RXArray) - strlen(GeneralHeader); i++ )
 8000b82:	2300      	movs	r3, #0
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b86:	e039      	b.n	8000bfc <ParseRFMessage+0xc4>
	{
		if (HeaderFound)
 8000b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d142      	bne.n	8000c16 <ParseRFMessage+0xde>
		{
			break;
		}
		for (int j = 0; j < strlen(GeneralHeader); j++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
 8000b94:	e028      	b.n	8000be8 <ParseRFMessage+0xb0>
		{
			if (GeneralHeader[j] == UART5RXArray[j+i])
 8000b96:	4a7c      	ldr	r2, [pc, #496]	; (8000d88 <ParseRFMessage+0x250>)
 8000b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9a:	4413      	add	r3, r2
 8000b9c:	781a      	ldrb	r2, [r3, #0]
 8000b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	440b      	add	r3, r1
 8000ba4:	4979      	ldr	r1, [pc, #484]	; (8000d8c <ParseRFMessage+0x254>)
 8000ba6:	5ccb      	ldrb	r3, [r1, r3]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d10a      	bne.n	8000bc2 <ParseRFMessage+0x8a>
			{
				LocalCounter++;
 8000bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bae:	3301      	adds	r3, #1
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
			else
			{
				LocalCounter = 0;
				break;
			}
			if (strlen(GeneralHeader) == LocalCounter)
 8000bb2:	4875      	ldr	r0, [pc, #468]	; (8000d88 <ParseRFMessage+0x250>)
 8000bb4:	f7ff fb44 	bl	8000240 <strlen>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d110      	bne.n	8000be2 <ParseRFMessage+0xaa>
 8000bc0:	e002      	b.n	8000bc8 <ParseRFMessage+0x90>
				LocalCounter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
				break;
 8000bc6:	e016      	b.n	8000bf6 <ParseRFMessage+0xbe>
			{
				HeaderStartIndex = i;
 8000bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bca:	613b      	str	r3, [r7, #16]
				HeaderStopIndex = i + strlen(GeneralHeader);
 8000bcc:	486e      	ldr	r0, [pc, #440]	; (8000d88 <ParseRFMessage+0x250>)
 8000bce:	f7ff fb37 	bl	8000240 <strlen>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd6:	4413      	add	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
				HeaderFound = true;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				continue;
 8000be0:	bf00      	nop
		for (int j = 0; j < strlen(GeneralHeader); j++)
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	3301      	adds	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
 8000be8:	4867      	ldr	r0, [pc, #412]	; (8000d88 <ParseRFMessage+0x250>)
 8000bea:	f7ff fb29 	bl	8000240 <strlen>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d8cf      	bhi.n	8000b96 <ParseRFMessage+0x5e>
	for (int i = 0 ; i< strlen(UART5RXArray) - strlen(GeneralHeader); i++ )
 8000bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bfc:	4863      	ldr	r0, [pc, #396]	; (8000d8c <ParseRFMessage+0x254>)
 8000bfe:	f7ff fb1f 	bl	8000240 <strlen>
 8000c02:	4604      	mov	r4, r0
 8000c04:	4860      	ldr	r0, [pc, #384]	; (8000d88 <ParseRFMessage+0x250>)
 8000c06:	f7ff fb1b 	bl	8000240 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	1ae2      	subs	r2, r4, r3
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8b9      	bhi.n	8000b88 <ParseRFMessage+0x50>
 8000c14:	e000      	b.n	8000c18 <ParseRFMessage+0xe0>
			break;
 8000c16:	bf00      	nop
			}
		}
	}
	if (HeaderFound)
 8000c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d04a      	beq.n	8000cb6 <ParseRFMessage+0x17e>
	{
		for (int i = 0 ; i< strlen(UART5RXArray); i++ )
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
 8000c24:	e040      	b.n	8000ca8 <ParseRFMessage+0x170>
		{
			if ( (UART5RXArray[i] == '#') && (!HashFound) )
 8000c26:	4a59      	ldr	r2, [pc, #356]	; (8000d8c <ParseRFMessage+0x254>)
 8000c28:	6a3b      	ldr	r3, [r7, #32]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b23      	cmp	r3, #35	; 0x23
 8000c30:	d10b      	bne.n	8000c4a <ParseRFMessage+0x112>
 8000c32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c36:	f083 0301 	eor.w	r3, r3, #1
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d004      	beq.n	8000c4a <ParseRFMessage+0x112>
			{
				HashFound = true;
 8000c40:	2301      	movs	r3, #1
 8000c42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				HashTagIndex = i;
 8000c46:	6a3b      	ldr	r3, [r7, #32]
 8000c48:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			if ( (UART5RXArray[i] == ',') && (HashFound) && (!CommaFound))
 8000c4a:	4a50      	ldr	r2, [pc, #320]	; (8000d8c <ParseRFMessage+0x254>)
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b2c      	cmp	r3, #44	; 0x2c
 8000c54:	d10f      	bne.n	8000c76 <ParseRFMessage+0x13e>
 8000c56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00b      	beq.n	8000c76 <ParseRFMessage+0x13e>
 8000c5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c62:	f083 0301 	eor.w	r3, r3, #1
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <ParseRFMessage+0x13e>
			{
				CommaFound = true;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				CommaIndex = i;
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if ( (UART5RXArray[i] == '!') && (CommaFound) && (!MessageEndFound) )
 8000c76:	4a45      	ldr	r2, [pc, #276]	; (8000d8c <ParseRFMessage+0x254>)
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b21      	cmp	r3, #33	; 0x21
 8000c80:	d10f      	bne.n	8000ca2 <ParseRFMessage+0x16a>
 8000c82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00b      	beq.n	8000ca2 <ParseRFMessage+0x16a>
 8000c8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c8e:	f083 0301 	eor.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d004      	beq.n	8000ca2 <ParseRFMessage+0x16a>
			{
				MessageEndFound = true;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				MessageEndIndex = i;
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (int i = 0 ; i< strlen(UART5RXArray); i++ )
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
 8000ca8:	4838      	ldr	r0, [pc, #224]	; (8000d8c <ParseRFMessage+0x254>)
 8000caa:	f7ff fac9 	bl	8000240 <strlen>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	6a3b      	ldr	r3, [r7, #32]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d8b7      	bhi.n	8000c26 <ParseRFMessage+0xee>
			}
		}
	}
	if ((HashFound) && (HashFound) && (CommaFound) )
 8000cb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d05f      	beq.n	8000d7e <ParseRFMessage+0x246>
 8000cbe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d05b      	beq.n	8000d7e <ParseRFMessage+0x246>
 8000cc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d057      	beq.n	8000d7e <ParseRFMessage+0x246>
	{
		for (int i = 0; i < CommaIndex - HashTagIndex -1 ; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e015      	b.n	8000d00 <ParseRFMessage+0x1c8>
		{
			*Power = *Power * 10 + UART5RXArray[HashTagIndex + i + 1] - '0';
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4928      	ldr	r1, [pc, #160]	; (8000d8c <ParseRFMessage+0x254>)
 8000cec:	5ccb      	ldrb	r3, [r1, r3]
 8000cee:	4413      	add	r3, r2
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	3b30      	subs	r3, #48	; 0x30
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CommaIndex - HashTagIndex -1 ; i++)
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	3b01      	subs	r3, #1
 8000d08:	69fa      	ldr	r2, [r7, #28]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	dbe2      	blt.n	8000cd4 <ParseRFMessage+0x19c>
		}
		for (int i = 0; i < MessageEndIndex - CommaIndex -1; i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	e015      	b.n	8000d40 <ParseRFMessage+0x208>
		{
			*Angle = *Angle * 10 + UART5RXArray[CommaIndex + i + 1] - '0';
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	0092      	lsls	r2, r2, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	440b      	add	r3, r1
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4918      	ldr	r1, [pc, #96]	; (8000d8c <ParseRFMessage+0x254>)
 8000d2c:	5ccb      	ldrb	r3, [r1, r3]
 8000d2e:	4413      	add	r3, r2
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	3b30      	subs	r3, #48	; 0x30
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MessageEndIndex - CommaIndex -1; i++)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
 8000d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	3b01      	subs	r3, #1
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	dbe2      	blt.n	8000d14 <ParseRFMessage+0x1dc>
		}
//		sprintf(USBTXArray, "%6.3f, ",CurrentTime());
//		SendToScreen(false);
//		memcpy(USBTXArray,UART5RXArray,MessageEndIndex);
//		SendToScreen(true);
		memcpy(&UART5RXArray[0],&UART5RXArray[MessageEndIndex+1],255-MessageEndIndex);
 8000d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d50:	3301      	adds	r3, #1
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <ParseRFMessage+0x254>)
 8000d54:	1899      	adds	r1, r3, r2
 8000d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d58:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	480b      	ldr	r0, [pc, #44]	; (8000d8c <ParseRFMessage+0x254>)
 8000d60:	f00a fd1e 	bl	800b7a0 <memcpy>
		memset(&UART5RXArray[255-MessageEndIndex],0,MessageEndIndex+1);
 8000d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d66:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <ParseRFMessage+0x254>)
 8000d6c:	1898      	adds	r0, r3, r2
 8000d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d70:	3301      	adds	r3, #1
 8000d72:	461a      	mov	r2, r3
 8000d74:	2100      	movs	r1, #0
 8000d76:	f00a fd1e 	bl	800b7b6 <memset>
		return 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	e000      	b.n	8000d80 <ParseRFMessage+0x248>
	}
	return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3744      	adds	r7, #68	; 0x44
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000764 	.word	0x20000764

08000d90 <CheckDataFromUART>:
	NumberOfBytesRead = LocalCounter;
	return NumberOfBytesRead;
}

uint32_t CheckDataFromUART(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
	int NumberOfBytesRead = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
	int LocalCounter = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
	int StepInc = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
	int ret = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
	HAL_StatusTypeDef Uart_Ret;
//	memset(LocalUART5RXArray,0,256);
	HAL_UART_Receive_DMA(&huart5, LocalUART5RXArray, 256);
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	4927      	ldr	r1, [pc, #156]	; (8000e48 <CheckDataFromUART+0xb8>)
 8000dac:	4827      	ldr	r0, [pc, #156]	; (8000e4c <CheckDataFromUART+0xbc>)
 8000dae:	f009 f995 	bl	800a0dc <HAL_UART_Receive_DMA>
	HAL_UART_DMAPause(&huart5);
 8000db2:	4826      	ldr	r0, [pc, #152]	; (8000e4c <CheckDataFromUART+0xbc>)
 8000db4:	f009 fa16 	bl	800a1e4 <HAL_UART_DMAPause>
//	HAL_Delay(10);
	memcpy(&UART5RXArray, &LocalUART5RXArray,256);
 8000db8:	4a25      	ldr	r2, [pc, #148]	; (8000e50 <CheckDataFromUART+0xc0>)
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <CheckDataFromUART+0xb8>)
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f00a fceb 	bl	800b7a0 <memcpy>
	memset(LocalUART5RXArray,0,256);
 8000dca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dce:	2100      	movs	r1, #0
 8000dd0:	481d      	ldr	r0, [pc, #116]	; (8000e48 <CheckDataFromUART+0xb8>)
 8000dd2:	f00a fcf0 	bl	800b7b6 <memset>
	HAL_UART_DMAResume(&huart5);
 8000dd6:	481d      	ldr	r0, [pc, #116]	; (8000e4c <CheckDataFromUART+0xbc>)
 8000dd8:	f009 fa58 	bl	800a28c <HAL_UART_DMAResume>
	for (int i = 0; i<256;i++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	e01d      	b.n	8000e1e <CheckDataFromUART+0x8e>
	{
		if (UART5RXArray[0] == 0)
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <CheckDataFromUART+0xc0>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d113      	bne.n	8000e12 <CheckDataFromUART+0x82>
		{
			memcpy(&UART5RXArray[StepInc],&UART5RXArray[StepInc+1],255-i);
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <CheckDataFromUART+0xc0>)
 8000dee:	1898      	adds	r0, r3, r2
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <CheckDataFromUART+0xc0>)
 8000df6:	1899      	adds	r1, r3, r2
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f00a fcce 	bl	800b7a0 <memcpy>
			UART5RXArray[255 - i] = 0;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000e0a:	4a11      	ldr	r2, [pc, #68]	; (8000e50 <CheckDataFromUART+0xc0>)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	54d1      	strb	r1, [r2, r3]
 8000e10:	e002      	b.n	8000e18 <CheckDataFromUART+0x88>
		}
		else
		{
			StepInc++;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	3301      	adds	r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
	for (int i = 0; i<256;i++)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	2bff      	cmp	r3, #255	; 0xff
 8000e22:	ddde      	ble.n	8000de2 <CheckDataFromUART+0x52>
		}
	}
	while (UART5RXArray[LocalCounter] != 0)
 8000e24:	e002      	b.n	8000e2c <CheckDataFromUART+0x9c>
	{
		LocalCounter++;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	617b      	str	r3, [r7, #20]
	while (UART5RXArray[LocalCounter] != 0)
 8000e2c:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <CheckDataFromUART+0xc0>)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f6      	bne.n	8000e26 <CheckDataFromUART+0x96>
	}
	NumberOfBytesRead = LocalCounter;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	60bb      	str	r3, [r7, #8]
	return NumberOfBytesRead;
 8000e3c:	68bb      	ldr	r3, [r7, #8]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000021c 	.word	0x2000021c
 8000e4c:	20003ed8 	.word	0x20003ed8
 8000e50:	20000764 	.word	0x20000764

08000e54 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e5c:	23ff      	movs	r3, #255	; 0xff
 8000e5e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000e64:	2300      	movs	r3, #0
 8000e66:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000e68:	2300      	movs	r3, #0
 8000e6a:	723b      	strb	r3, [r7, #8]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000e70:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <bno055_init+0x180>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000e76:	4b57      	ldr	r3, [pc, #348]	; (8000fd4 <bno055_init+0x180>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68dc      	ldr	r4, [r3, #12]
 8000e7c:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <bno055_init+0x180>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	7a58      	ldrb	r0, [r3, #9]
 8000e82:	f107 020d 	add.w	r2, r7, #13
 8000e86:	2301      	movs	r3, #1
 8000e88:	2107      	movs	r1, #7
 8000e8a:	47a0      	blx	r4
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e90:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <bno055_init+0x180>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	691c      	ldr	r4, [r3, #16]
 8000e96:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <bno055_init+0x180>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	7a58      	ldrb	r0, [r3, #9]
 8000e9c:	f107 020e 	add.w	r2, r7, #14
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	47a0      	blx	r4
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	4413      	add	r3, r2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000eb2:	4b48      	ldr	r3, [pc, #288]	; (8000fd4 <bno055_init+0x180>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	7bba      	ldrb	r2, [r7, #14]
 8000eb8:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <bno055_init+0x180>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	691c      	ldr	r4, [r3, #16]
 8000ec0:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <bno055_init+0x180>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	7a58      	ldrb	r0, [r3, #9]
 8000ec6:	f107 020e 	add.w	r2, r7, #14
 8000eca:	2301      	movs	r3, #1
 8000ecc:	2101      	movs	r1, #1
 8000ece:	47a0      	blx	r4
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000edc:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <bno055_init+0x180>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	7bba      	ldrb	r2, [r7, #14]
 8000ee2:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <bno055_init+0x180>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	691c      	ldr	r4, [r3, #16]
 8000eea:	4b3a      	ldr	r3, [pc, #232]	; (8000fd4 <bno055_init+0x180>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	7a58      	ldrb	r0, [r3, #9]
 8000ef0:	f107 020e 	add.w	r2, r7, #14
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	47a0      	blx	r4
 8000efa:	4603      	mov	r3, r0
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	4413      	add	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000f06:	4b33      	ldr	r3, [pc, #204]	; (8000fd4 <bno055_init+0x180>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	7bba      	ldrb	r2, [r7, #14]
 8000f0c:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <bno055_init+0x180>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	691c      	ldr	r4, [r3, #16]
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <bno055_init+0x180>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	7a58      	ldrb	r0, [r3, #9]
 8000f1a:	f107 020e 	add.w	r2, r7, #14
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2103      	movs	r1, #3
 8000f22:	47a0      	blx	r4
 8000f24:	4603      	mov	r3, r0
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <bno055_init+0x180>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	7bba      	ldrb	r2, [r7, #14]
 8000f36:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f38:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <bno055_init+0x180>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	691c      	ldr	r4, [r3, #16]
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <bno055_init+0x180>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	7a58      	ldrb	r0, [r3, #9]
 8000f44:	f107 020e 	add.w	r2, r7, #14
 8000f48:	2301      	movs	r3, #1
 8000f4a:	2106      	movs	r1, #6
 8000f4c:	47a0      	blx	r4
 8000f4e:	4603      	mov	r3, r0
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	4413      	add	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <bno055_init+0x180>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	7bba      	ldrb	r2, [r7, #14]
 8000f60:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <bno055_init+0x180>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	691c      	ldr	r4, [r3, #16]
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <bno055_init+0x180>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	7a58      	ldrb	r0, [r3, #9]
 8000f6e:	f107 0208 	add.w	r2, r7, #8
 8000f72:	2302      	movs	r3, #2
 8000f74:	2104      	movs	r1, #4
 8000f76:	47a0      	blx	r4
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4413      	add	r3, r2
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000f84:	7a3b      	ldrb	r3, [r7, #8]
 8000f86:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000f88:	7a7b      	ldrb	r3, [r7, #9]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	7a3b      	ldrb	r3, [r7, #8]
 8000f92:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <bno055_init+0x180>)
 8000f96:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000f9c:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <bno055_init+0x180>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	691c      	ldr	r4, [r3, #16]
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <bno055_init+0x180>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	7a58      	ldrb	r0, [r3, #9]
 8000faa:	f107 020e 	add.w	r2, r7, #14
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	47a0      	blx	r4
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	4413      	add	r3, r2
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <bno055_init+0x180>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	7bba      	ldrb	r2, [r7, #14]
 8000fc6:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	2000031c 	.word	0x2000031c

08000fd8 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000fe8:	23ff      	movs	r3, #255	; 0xff
 8000fea:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <bno055_write_register+0x48>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000ff4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ff8:	e00d      	b.n	8001016 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <bno055_write_register+0x48>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68dc      	ldr	r4, [r3, #12]
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <bno055_write_register+0x48>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	7a58      	ldrb	r0, [r3, #9]
 8001006:	79bb      	ldrb	r3, [r7, #6]
 8001008:	79f9      	ldrb	r1, [r7, #7]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	47a0      	blx	r4
 800100e:	4603      	mov	r3, r0
 8001010:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001012:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	bd90      	pop	{r4, r7, pc}
 800101e:	bf00      	nop
 8001020:	2000031c 	.word	0x2000031c

08001024 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800102e:	23ff      	movs	r3, #255	; 0xff
 8001030:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001032:	2300      	movs	r3, #0
 8001034:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001036:	4b1e      	ldr	r3, [pc, #120]	; (80010b0 <bno055_write_page_id+0x8c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 800103e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001042:	e030      	b.n	80010a6 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <bno055_write_page_id+0x8c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	691c      	ldr	r4, [r3, #16]
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <bno055_write_page_id+0x8c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	7a58      	ldrb	r0, [r3, #9]
 8001050:	f107 020e 	add.w	r2, r7, #14
 8001054:	2301      	movs	r3, #1
 8001056:	2107      	movs	r1, #7
 8001058:	47a0      	blx	r4
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d11b      	bne.n	800109e <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <bno055_write_page_id+0x8c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68dc      	ldr	r4, [r3, #12]
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <bno055_write_page_id+0x8c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	7a58      	ldrb	r0, [r3, #9]
 8001076:	f107 020e 	add.w	r2, r7, #14
 800107a:	2301      	movs	r3, #1
 800107c:	2107      	movs	r1, #7
 800107e:	47a0      	blx	r4
 8001080:	4603      	mov	r3, r0
 8001082:	b2da      	uxtb	r2, r3
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4413      	add	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 800108c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d106      	bne.n	80010a2 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <bno055_write_page_id+0x8c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	79fa      	ldrb	r2, [r7, #7]
 800109a:	711a      	strb	r2, [r3, #4]
 800109c:	e001      	b.n	80010a2 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000031c 	.word	0x2000031c

080010b4 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80010bc:	23ff      	movs	r3, #255	; 0xff
 80010be:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80010c4:	23ff      	movs	r3, #255	; 0xff
 80010c6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <bno055_get_operation_mode+0x80>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80010d0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80010d4:	e02a      	b.n	800112c <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <bno055_get_operation_mode+0x80>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	791b      	ldrb	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff ff9f 	bl	8001024 <bno055_write_page_id>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80010ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <bno055_get_operation_mode+0x48>
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <bno055_get_operation_mode+0x80>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	791b      	ldrb	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d113      	bne.n	8001124 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <bno055_get_operation_mode+0x80>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	691c      	ldr	r4, [r3, #16]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <bno055_get_operation_mode+0x80>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	7a58      	ldrb	r0, [r3, #9]
 8001108:	f107 020d 	add.w	r2, r7, #13
 800110c:	2301      	movs	r3, #1
 800110e:	213d      	movs	r1, #61	; 0x3d
 8001110:	47a0      	blx	r4
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	b2da      	uxtb	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e001      	b.n	8001128 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001124:	23ff      	movs	r3, #255	; 0xff
 8001126:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	2000031c 	.word	0x2000031c

08001138 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001142:	23ff      	movs	r3, #255	; 0xff
 8001144:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001146:	2300      	movs	r3, #0
 8001148:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800114a:	2300      	movs	r3, #0
 800114c:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 800114e:	23ff      	movs	r3, #255	; 0xff
 8001150:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001152:	4b5c      	ldr	r3, [pc, #368]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 800115a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800115e:	e0ac      	b.n	80012ba <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ffa5 	bl	80010b4 <bno055_get_operation_mode>
 800116a:	4603      	mov	r3, r0
 800116c:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800116e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 809d 	bne.w	80012b2 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001178:	7b3b      	ldrb	r3, [r7, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d137      	bne.n	80011ee <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800117e:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691c      	ldr	r4, [r3, #16]
 8001184:	4b4f      	ldr	r3, [pc, #316]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	7a58      	ldrb	r0, [r3, #9]
 800118a:	f107 020d 	add.w	r2, r7, #13
 800118e:	2301      	movs	r3, #1
 8001190:	213d      	movs	r1, #61	; 0x3d
 8001192:	47a0      	blx	r4
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119c:	2b00      	cmp	r3, #0
 800119e:	f040 808a 	bne.w	80012b6 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	f023 030f 	bic.w	r3, r3, #15
 80011aa:	b25a      	sxtb	r2, r3
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68dc      	ldr	r4, [r3, #12]
 80011c4:	4b3f      	ldr	r3, [pc, #252]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	7a58      	ldrb	r0, [r3, #9]
 80011ca:	f107 020d 	add.w	r2, r7, #13
 80011ce:	2301      	movs	r3, #1
 80011d0:	213d      	movs	r1, #61	; 0x3d
 80011d2:	47a0      	blx	r4
 80011d4:	4603      	mov	r3, r0
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	4413      	add	r3, r2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80011ea:	4798      	blx	r3
 80011ec:	e063      	b.n	80012b6 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	691c      	ldr	r4, [r3, #16]
 80011f4:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	7a58      	ldrb	r0, [r3, #9]
 80011fa:	f107 020d 	add.w	r2, r7, #13
 80011fe:	2301      	movs	r3, #1
 8001200:	213d      	movs	r1, #61	; 0x3d
 8001202:	47a0      	blx	r4
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d116      	bne.n	800123e <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001210:	7b7b      	ldrb	r3, [r7, #13]
 8001212:	f023 030f 	bic.w	r3, r3, #15
 8001216:	b2db      	uxtb	r3, r3
 8001218:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 800121a:	f107 030d 	add.w	r3, r7, #13
 800121e:	2201      	movs	r2, #1
 8001220:	4619      	mov	r1, r3
 8001222:	203d      	movs	r0, #61	; 0x3d
 8001224:	f7ff fed8 	bl	8000fd8 <bno055_write_register>
 8001228:	4603      	mov	r3, r0
 800122a:	b2da      	uxtb	r2, r3
                    com_rslt +=
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	4413      	add	r3, r2
 8001230:	b2db      	uxtb	r3, r3
 8001232:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	2014      	movs	r0, #20
 800123c:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d038      	beq.n	80012b6 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	691c      	ldr	r4, [r3, #16]
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	7a58      	ldrb	r0, [r3, #9]
 8001250:	f107 020d 	add.w	r2, r7, #13
 8001254:	2301      	movs	r3, #1
 8001256:	213d      	movs	r1, #61	; 0x3d
 8001258:	47a0      	blx	r4
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d127      	bne.n	80012b6 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001266:	7b7b      	ldrb	r3, [r7, #13]
 8001268:	b25b      	sxtb	r3, r3
 800126a:	f023 030f 	bic.w	r3, r3, #15
 800126e:	b25a      	sxtb	r2, r3
 8001270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	b25b      	sxtb	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b25b      	sxtb	r3, r3
 800127e:	b2db      	uxtb	r3, r3
 8001280:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68dc      	ldr	r4, [r3, #12]
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	7a58      	ldrb	r0, [r3, #9]
 800128e:	f107 020d 	add.w	r2, r7, #13
 8001292:	2301      	movs	r3, #1
 8001294:	213d      	movs	r1, #61	; 0x3d
 8001296:	47a0      	blx	r4
 8001298:	4603      	mov	r3, r0
 800129a:	b2da      	uxtb	r2, r3
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	4413      	add	r3, r2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <bno055_set_operation_mode+0x18c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80012ae:	4798      	blx	r3
 80012b0:	e001      	b.n	80012b6 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80012b2:	23ff      	movs	r3, #255	; 0xff
 80012b4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd90      	pop	{r4, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000031c 	.word	0x2000031c

080012c8 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80012d2:	23ff      	movs	r3, #255	; 0xff
 80012d4:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80012da:	2300      	movs	r3, #0
 80012dc:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80012de:	23ff      	movs	r3, #255	; 0xff
 80012e0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <bno055_set_power_mode+0xf0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80012ea:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80012ee:	e05f      	b.n	80013b0 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fedd 	bl	80010b4 <bno055_get_operation_mode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80012fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d143      	bne.n	800138e <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d008      	beq.n	800131e <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff13 	bl	8001138 <bno055_set_operation_mode>
 8001312:	4603      	mov	r3, r0
 8001314:	b2da      	uxtb	r2, r3
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	4413      	add	r3, r2
 800131a:	b2db      	uxtb	r3, r3
 800131c:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800131e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d130      	bne.n	8001388 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <bno055_set_power_mode+0xf0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691c      	ldr	r4, [r3, #16]
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <bno055_set_power_mode+0xf0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	7a58      	ldrb	r0, [r3, #9]
 8001332:	f107 020d 	add.w	r2, r7, #13
 8001336:	2301      	movs	r3, #1
 8001338:	213e      	movs	r1, #62	; 0x3e
 800133a:	47a0      	blx	r4
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d124      	bne.n	8001392 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8001348:	7b7b      	ldrb	r3, [r7, #13]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	f023 0303 	bic.w	r3, r3, #3
 8001350:	b25a      	sxtb	r2, r3
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	b25b      	sxtb	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b25b      	sxtb	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <bno055_set_power_mode+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68dc      	ldr	r4, [r3, #12]
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <bno055_set_power_mode+0xf0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	7a58      	ldrb	r0, [r3, #9]
 8001370:	f107 020d 	add.w	r2, r7, #13
 8001374:	2301      	movs	r3, #1
 8001376:	213e      	movs	r1, #62	; 0x3e
 8001378:	47a0      	blx	r4
 800137a:	4603      	mov	r3, r0
 800137c:	b2da      	uxtb	r2, r3
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	4413      	add	r3, r2
 8001382:	b2db      	uxtb	r3, r3
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	e004      	b.n	8001392 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001388:	23ff      	movs	r3, #255	; 0xff
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e001      	b.n	8001392 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800138e:	23ff      	movs	r3, #255	; 0xff
 8001390:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001392:	7b3b      	ldrb	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d009      	beq.n	80013ac <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001398:	7b3b      	ldrb	r3, [r7, #12]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fecc 	bl	8001138 <bno055_set_operation_mode>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	4413      	add	r3, r2
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80013ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	2000031c 	.word	0x2000031c

080013bc <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <I2C_routine+0x28>)
 80013c2:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <I2C_routine+0x2c>)
 80013c4:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <I2C_routine+0x28>)
 80013c8:	4a08      	ldr	r2, [pc, #32]	; (80013ec <I2C_routine+0x30>)
 80013ca:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <I2C_routine+0x28>)
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <I2C_routine+0x34>)
 80013d0:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <I2C_routine+0x28>)
 80013d4:	2229      	movs	r2, #41	; 0x29
 80013d6:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20000c98 	.word	0x20000c98
 80013e8:	080013f5 	.word	0x080013f5
 80013ec:	0800146d 	.word	0x0800146d
 80013f0:	080014fd 	.word	0x080014fd

080013f4 <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	603a      	str	r2, [r7, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	460b      	mov	r3, r1
 8001404:	71bb      	strb	r3, [r7, #6]
 8001406:	4613      	mov	r3, r2
 8001408:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]
 800141a:	e00d      	b.n	8001438 <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	441a      	add	r2, r3
 8001422:	7dfb      	ldrb	r3, [r7, #23]
 8001424:	3301      	adds	r3, #1
 8001426:	7812      	ldrb	r2, [r2, #0]
 8001428:	f107 0118 	add.w	r1, r7, #24
 800142c:	440b      	add	r3, r1
 800142e:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	3301      	adds	r3, #1
 8001436:	75fb      	strb	r3, [r7, #23]
 8001438:	7dfa      	ldrb	r2, [r7, #23]
 800143a:	797b      	ldrb	r3, [r7, #5]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3ed      	bcc.n	800141c <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 8001440:	797b      	ldrb	r3, [r7, #5]
 8001442:	b29b      	uxth	r3, r3
 8001444:	3301      	adds	r3, #1
 8001446:	b299      	uxth	r1, r3
 8001448:	f107 0208 	add.w	r2, r7, #8
 800144c:	230a      	movs	r3, #10
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	460b      	mov	r3, r1
 8001452:	2152      	movs	r1, #82	; 0x52
 8001454:	4804      	ldr	r0, [pc, #16]	; (8001468 <BNO055_I2C_bus_write+0x74>)
 8001456:	f003 fd5b 	bl	8004f10 <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	b25b      	sxtb	r3, r3
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20003df0 	.word	0x20003df0

0800146c <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af02      	add	r7, sp, #8
 8001472:	603a      	str	r2, [r7, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
 800147a:	460b      	mov	r3, r1
 800147c:	71bb      	strb	r3, [r7, #6]
 800147e:	4613      	mov	r3, r2
 8001480:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001494:	79bb      	ldrb	r3, [r7, #6]
 8001496:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001498:	2300      	movs	r3, #0
 800149a:	75fb      	strb	r3, [r7, #23]
 800149c:	e00c      	b.n	80014b8 <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 800149e:	7dfa      	ldrb	r2, [r7, #23]
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	440b      	add	r3, r1
 80014a6:	f107 0118 	add.w	r1, r7, #24
 80014aa:	440a      	add	r2, r1
 80014ac:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80014b0:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	3301      	adds	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]
 80014b8:	7dfa      	ldrb	r2, [r7, #23]
 80014ba:	797b      	ldrb	r3, [r7, #5]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3ee      	bcc.n	800149e <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 80014c0:	797b      	ldrb	r3, [r7, #5]
 80014c2:	b299      	uxth	r1, r3
 80014c4:	f107 0208 	add.w	r2, r7, #8
 80014c8:	230a      	movs	r3, #10
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	460b      	mov	r3, r1
 80014ce:	2152      	movs	r1, #82	; 0x52
 80014d0:	4809      	ldr	r0, [pc, #36]	; (80014f8 <BNO055_I2C_bus_read+0x8c>)
 80014d2:	f003 fd1d 	bl	8004f10 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 80014d6:	797b      	ldrb	r3, [r7, #5]
 80014d8:	b29a      	uxth	r2, r3
 80014da:	230a      	movs	r3, #10
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	2152      	movs	r1, #82	; 0x52
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <BNO055_I2C_bus_read+0x8c>)
 80014e6:	f003 fe07 	bl	80050f8 <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	b25b      	sxtb	r3, r3
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20003df0 	.word	0x20003df0

080014fc <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 ffc7 	bl	8003498 <HAL_Delay>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <BNOInit>:

void BNOInit(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	I2C_routine();
 8001518:	f7ff ff50 	bl	80013bc <I2C_routine>
	comres = bno055_init(&bno055);
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <BNOInit+0x4c>)
 800151e:	f7ff fc99 	bl	8000e54 <bno055_init>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <BNOInit+0x50>)
 8001528:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <BNOInit+0x54>)
 800152c:	2200      	movs	r2, #0
 800152e:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <BNOInit+0x54>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fec7 	bl	80012c8 <bno055_set_power_mode>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4b09      	ldr	r3, [pc, #36]	; (8001564 <BNOInit+0x50>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4413      	add	r3, r2
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <BNOInit+0x50>)
 8001546:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001548:	200c      	movs	r0, #12
 800154a:	f7ff fdf5 	bl	8001138 <bno055_set_operation_mode>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <BNOInit+0x50>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a02      	ldr	r2, [pc, #8]	; (8001564 <BNOInit+0x50>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000c98 	.word	0x20000c98
 8001564:	20000008 	.word	0x20000008
 8001568:	20000c64 	.word	0x20000c64

0800156c <MS56XXReset>:
int64_t OFF = 0;
int64_t SNES = 0;
int32_t P = 0;

void MS56XXReset(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2110      	movs	r1, #16
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <MS56XXReset+0x40>)
 8001576:	f003 fc21 	bl	8004dbc <HAL_GPIO_WritePin>
	SPITX[0] = 0x1E;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <MS56XXReset+0x44>)
 800157c:	221e      	movs	r2, #30
 800157e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	2201      	movs	r2, #1
 8001586:	490a      	ldr	r1, [pc, #40]	; (80015b0 <MS56XXReset+0x44>)
 8001588:	480a      	ldr	r0, [pc, #40]	; (80015b4 <MS56XXReset+0x48>)
 800158a:	f006 fef9 	bl	8008380 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 800158e:	bf00      	nop
 8001590:	4808      	ldr	r0, [pc, #32]	; (80015b4 <MS56XXReset+0x48>)
 8001592:	f007 fb96 	bl	8008cc2 <HAL_SPI_GetState>
 8001596:	4603      	mov	r3, r0
 8001598:	2b02      	cmp	r3, #2
 800159a:	d0f9      	beq.n	8001590 <MS56XXReset+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2110      	movs	r1, #16
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <MS56XXReset+0x40>)
 80015a2:	f003 fc0b 	bl	8004dbc <HAL_GPIO_WritePin>
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40020000 	.word	0x40020000
 80015b0:	20000320 	.word	0x20000320
 80015b4:	20004104 	.word	0x20004104

080015b8 <MS56XXReadProm>:

uint16_t MS56XXReadProm(uint8_t address)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = address;
 80015c2:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <MS56XXReadProm+0x78>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	4819      	ldr	r0, [pc, #100]	; (8001634 <MS56XXReadProm+0x7c>)
 80015ce:	f003 fbf5 	bl	8004dbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
 80015d6:	2201      	movs	r2, #1
 80015d8:	4915      	ldr	r1, [pc, #84]	; (8001630 <MS56XXReadProm+0x78>)
 80015da:	4817      	ldr	r0, [pc, #92]	; (8001638 <MS56XXReadProm+0x80>)
 80015dc:	f006 fed0 	bl	8008380 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80015e0:	bf00      	nop
 80015e2:	4815      	ldr	r0, [pc, #84]	; (8001638 <MS56XXReadProm+0x80>)
 80015e4:	f007 fb6d 	bl	8008cc2 <HAL_SPI_GetState>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d0f9      	beq.n	80015e2 <MS56XXReadProm+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[0], 1, HAL_MAX_DELAY);
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	2201      	movs	r2, #1
 80015f4:	4911      	ldr	r1, [pc, #68]	; (800163c <MS56XXReadProm+0x84>)
 80015f6:	4810      	ldr	r0, [pc, #64]	; (8001638 <MS56XXReadProm+0x80>)
 80015f8:	f007 f828 	bl	800864c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[1], 1, HAL_MAX_DELAY);
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	2201      	movs	r2, #1
 8001602:	490f      	ldr	r1, [pc, #60]	; (8001640 <MS56XXReadProm+0x88>)
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <MS56XXReadProm+0x80>)
 8001606:	f007 f821 	bl	800864c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2110      	movs	r1, #16
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <MS56XXReadProm+0x7c>)
 8001610:	f003 fbd4 	bl	8004dbc <HAL_GPIO_WritePin>
	return (SPIRX2Byte[0]<<8) + SPIRX2Byte[1];
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <MS56XXReadProm+0x84>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	b29a      	uxth	r2, r3
 800161e:	4b07      	ldr	r3, [pc, #28]	; (800163c <MS56XXReadProm+0x84>)
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4413      	add	r3, r2
 8001626:	b29b      	uxth	r3, r3
}
 8001628:	4618      	mov	r0, r3
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000320 	.word	0x20000320
 8001634:	40020000 	.word	0x40020000
 8001638:	20004104 	.word	0x20004104
 800163c:	20000324 	.word	0x20000324
 8001640:	20000325 	.word	0x20000325

08001644 <MS56XXInit>:

void MS56XXInit(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	MS56XXReset();
 8001648:	f7ff ff90 	bl	800156c <MS56XXReset>
	HAL_Delay(50);
 800164c:	2032      	movs	r0, #50	; 0x32
 800164e:	f001 ff23 	bl	8003498 <HAL_Delay>
	MS56XXReadProm(0xA0);
 8001652:	20a0      	movs	r0, #160	; 0xa0
 8001654:	f7ff ffb0 	bl	80015b8 <MS56XXReadProm>
	Coeff1 = MS56XXReadProm(0xA2);
 8001658:	20a2      	movs	r0, #162	; 0xa2
 800165a:	f7ff ffad 	bl	80015b8 <MS56XXReadProm>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <MS56XXInit+0xb0>)
 8001664:	801a      	strh	r2, [r3, #0]
	Coeff2 = MS56XXReadProm(0xA4);
 8001666:	20a4      	movs	r0, #164	; 0xa4
 8001668:	f7ff ffa6 	bl	80015b8 <MS56XXReadProm>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <MS56XXInit+0xb4>)
 8001672:	801a      	strh	r2, [r3, #0]
	Coeff3 = MS56XXReadProm(0xA6);
 8001674:	20a6      	movs	r0, #166	; 0xa6
 8001676:	f7ff ff9f 	bl	80015b8 <MS56XXReadProm>
 800167a:	4603      	mov	r3, r0
 800167c:	461a      	mov	r2, r3
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MS56XXInit+0xb8>)
 8001680:	801a      	strh	r2, [r3, #0]
	Coeff4 = MS56XXReadProm(0xA8);
 8001682:	20a8      	movs	r0, #168	; 0xa8
 8001684:	f7ff ff98 	bl	80015b8 <MS56XXReadProm>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MS56XXInit+0xbc>)
 800168e:	801a      	strh	r2, [r3, #0]
	Coeff5 = MS56XXReadProm(0xAA);
 8001690:	20aa      	movs	r0, #170	; 0xaa
 8001692:	f7ff ff91 	bl	80015b8 <MS56XXReadProm>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <MS56XXInit+0xc0>)
 800169c:	801a      	strh	r2, [r3, #0]
	Coeff6 = MS56XXReadProm(0xAC);
 800169e:	20ac      	movs	r0, #172	; 0xac
 80016a0:	f7ff ff8a 	bl	80015b8 <MS56XXReadProm>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MS56XXInit+0xc4>)
 80016aa:	801a      	strh	r2, [r3, #0]
	MSCRC = MS56XXReadProm(0xAE);
 80016ac:	20ae      	movs	r0, #174	; 0xae
 80016ae:	f7ff ff83 	bl	80015b8 <MS56XXReadProm>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <MS56XXInit+0xc8>)
 80016b8:	801a      	strh	r2, [r3, #0]

	MS56XXSendCmd(0x58);
 80016ba:	2058      	movs	r0, #88	; 0x58
 80016bc:	f000 f82c 	bl	8001718 <MS56XXSendCmd>
	HAL_Delay(9);
 80016c0:	2009      	movs	r0, #9
 80016c2:	f001 fee9 	bl	8003498 <HAL_Delay>
	RawTemp = MS56XXRead3Bytes(0);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f856 	bl	8001778 <MS56XXRead3Bytes>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MS56XXInit+0xcc>)
 80016d0:	601a      	str	r2, [r3, #0]

	MS56XXSendCmd(0x48);
 80016d2:	2048      	movs	r0, #72	; 0x48
 80016d4:	f000 f820 	bl	8001718 <MS56XXSendCmd>
	HAL_Delay(9);
 80016d8:	2009      	movs	r0, #9
 80016da:	f001 fedd 	bl	8003498 <HAL_Delay>
	RawPressure = MS56XXRead3Bytes(0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 f84a 	bl	8001778 <MS56XXRead3Bytes>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MS56XXInit+0xd0>)
 80016e8:	601a      	str	r2, [r3, #0]
	GetAltitudeAndTemp();
 80016ea:	f000 f899 	bl	8001820 <GetAltitudeAndTemp>
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000032c 	.word	0x2000032c
 80016f8:	2000032e 	.word	0x2000032e
 80016fc:	20000330 	.word	0x20000330
 8001700:	20000332 	.word	0x20000332
 8001704:	20000334 	.word	0x20000334
 8001708:	20000336 	.word	0x20000336
 800170c:	20000338 	.word	0x20000338
 8001710:	2000033c 	.word	0x2000033c
 8001714:	20000340 	.word	0x20000340

08001718 <MS56XXSendCmd>:

void MS56XXSendCmd(uint8_t Cmd)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2110      	movs	r1, #16
 8001726:	4810      	ldr	r0, [pc, #64]	; (8001768 <MS56XXSendCmd+0x50>)
 8001728:	f003 fb48 	bl	8004dbc <HAL_GPIO_WritePin>
	SPITX[0] = Cmd;
 800172c:	4a0f      	ldr	r2, [pc, #60]	; (800176c <MS56XXSendCmd+0x54>)
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	2201      	movs	r2, #1
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <MS56XXSendCmd+0x54>)
 800173a:	480d      	ldr	r0, [pc, #52]	; (8001770 <MS56XXSendCmd+0x58>)
 800173c:	f006 fe20 	bl	8008380 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001740:	bf00      	nop
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <MS56XXSendCmd+0x58>)
 8001744:	f007 fabd 	bl	8008cc2 <HAL_SPI_GetState>
 8001748:	4603      	mov	r3, r0
 800174a:	2b02      	cmp	r3, #2
 800174c:	d0f9      	beq.n	8001742 <MS56XXSendCmd+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	2110      	movs	r1, #16
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <MS56XXSendCmd+0x50>)
 8001754:	f003 fb32 	bl	8004dbc <HAL_GPIO_WritePin>
	isCmdSet = true;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MS56XXSendCmd+0x5c>)
 800175a:	2201      	movs	r2, #1
 800175c:	701a      	strb	r2, [r3, #0]
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40020000 	.word	0x40020000
 800176c:	20000320 	.word	0x20000320
 8001770:	20004104 	.word	0x20004104
 8001774:	2000033a 	.word	0x2000033a

08001778 <MS56XXRead3Bytes>:

uint32_t MS56XXRead3Bytes(uint8_t address)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = 0x00;
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <MS56XXRead3Bytes+0x8c>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	2110      	movs	r1, #16
 800178c:	481e      	ldr	r0, [pc, #120]	; (8001808 <MS56XXRead3Bytes+0x90>)
 800178e:	f003 fb15 	bl	8004dbc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	2201      	movs	r2, #1
 8001798:	491a      	ldr	r1, [pc, #104]	; (8001804 <MS56XXRead3Bytes+0x8c>)
 800179a:	481c      	ldr	r0, [pc, #112]	; (800180c <MS56XXRead3Bytes+0x94>)
 800179c:	f006 fdf0 	bl	8008380 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80017a0:	bf00      	nop
 80017a2:	481a      	ldr	r0, [pc, #104]	; (800180c <MS56XXRead3Bytes+0x94>)
 80017a4:	f007 fa8d 	bl	8008cc2 <HAL_SPI_GetState>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d0f9      	beq.n	80017a2 <MS56XXRead3Bytes+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[0], 1, HAL_MAX_DELAY);
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	2201      	movs	r2, #1
 80017b4:	4916      	ldr	r1, [pc, #88]	; (8001810 <MS56XXRead3Bytes+0x98>)
 80017b6:	4815      	ldr	r0, [pc, #84]	; (800180c <MS56XXRead3Bytes+0x94>)
 80017b8:	f006 ff48 	bl	800864c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[1], 1, HAL_MAX_DELAY);
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
 80017c0:	2201      	movs	r2, #1
 80017c2:	4914      	ldr	r1, [pc, #80]	; (8001814 <MS56XXRead3Bytes+0x9c>)
 80017c4:	4811      	ldr	r0, [pc, #68]	; (800180c <MS56XXRead3Bytes+0x94>)
 80017c6:	f006 ff41 	bl	800864c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[2], 1, HAL_MAX_DELAY);
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	2201      	movs	r2, #1
 80017d0:	4911      	ldr	r1, [pc, #68]	; (8001818 <MS56XXRead3Bytes+0xa0>)
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <MS56XXRead3Bytes+0x94>)
 80017d4:	f006 ff3a 	bl	800864c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2110      	movs	r1, #16
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <MS56XXRead3Bytes+0x90>)
 80017de:	f003 faed 	bl	8004dbc <HAL_GPIO_WritePin>
	isCmdSet = false;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MS56XXRead3Bytes+0xa4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
	return (SPIRX3Byte[0] << 16) + (SPIRX3Byte[1] << 8 ) + (SPIRX3Byte[0]);
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MS56XXRead3Bytes+0x98>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MS56XXRead3Bytes+0x98>)
 80017f0:	785b      	ldrb	r3, [r3, #1]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	4413      	add	r3, r2
 80017f6:	4a06      	ldr	r2, [pc, #24]	; (8001810 <MS56XXRead3Bytes+0x98>)
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	4413      	add	r3, r2
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000320 	.word	0x20000320
 8001808:	40020000 	.word	0x40020000
 800180c:	20004104 	.word	0x20004104
 8001810:	20000328 	.word	0x20000328
 8001814:	20000329 	.word	0x20000329
 8001818:	2000032a 	.word	0x2000032a
 800181c:	2000033a 	.word	0x2000033a

08001820 <GetAltitudeAndTemp>:

uint16_t GetAltitudeAndTemp(void)
{
 8001820:	b4f0      	push	{r4, r5, r6, r7}
 8001822:	af00      	add	r7, sp, #0
	dT = RawTemp - Coeff5 * 256;
 8001824:	4b47      	ldr	r3, [pc, #284]	; (8001944 <GetAltitudeAndTemp+0x124>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a47      	ldr	r2, [pc, #284]	; (8001948 <GetAltitudeAndTemp+0x128>)
 800182a:	8812      	ldrh	r2, [r2, #0]
 800182c:	0212      	lsls	r2, r2, #8
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4b46      	ldr	r3, [pc, #280]	; (800194c <GetAltitudeAndTemp+0x12c>)
 8001834:	601a      	str	r2, [r3, #0]
	TEMP = 2000 + dT * Coeff6 / 8388608;
 8001836:	4b46      	ldr	r3, [pc, #280]	; (8001950 <GetAltitudeAndTemp+0x130>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	461a      	mov	r2, r3
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <GetAltitudeAndTemp+0x12c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fb03 f302 	mul.w	r3, r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	da02      	bge.n	800184e <GetAltitudeAndTemp+0x2e>
 8001848:	4a42      	ldr	r2, [pc, #264]	; (8001954 <GetAltitudeAndTemp+0x134>)
 800184a:	441a      	add	r2, r3
 800184c:	4613      	mov	r3, r2
 800184e:	15db      	asrs	r3, r3, #23
 8001850:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001854:	4a40      	ldr	r2, [pc, #256]	; (8001958 <GetAltitudeAndTemp+0x138>)
 8001856:	6013      	str	r3, [r2, #0]
	OFF = Coeff2 * 131072 + Coeff4 * dT / 64;
 8001858:	4b40      	ldr	r3, [pc, #256]	; (800195c <GetAltitudeAndTemp+0x13c>)
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	045a      	lsls	r2, r3, #17
 800185e:	4b40      	ldr	r3, [pc, #256]	; (8001960 <GetAltitudeAndTemp+0x140>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	4b39      	ldr	r3, [pc, #228]	; (800194c <GetAltitudeAndTemp+0x12c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	fb03 f301 	mul.w	r3, r3, r1
 800186c:	2b00      	cmp	r3, #0
 800186e:	da00      	bge.n	8001872 <GetAltitudeAndTemp+0x52>
 8001870:	333f      	adds	r3, #63	; 0x3f
 8001872:	119b      	asrs	r3, r3, #6
 8001874:	4413      	add	r3, r2
 8001876:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800187a:	4a3a      	ldr	r2, [pc, #232]	; (8001964 <GetAltitudeAndTemp+0x144>)
 800187c:	e9c2 3400 	strd	r3, r4, [r2]
	SNES = Coeff1 * 32768 + (Coeff3 * dT) / 127;
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <GetAltitudeAndTemp+0x148>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	03da      	lsls	r2, r3, #15
 8001886:	4b39      	ldr	r3, [pc, #228]	; (800196c <GetAltitudeAndTemp+0x14c>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4b2f      	ldr	r3, [pc, #188]	; (800194c <GetAltitudeAndTemp+0x12c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fb03 f301 	mul.w	r3, r3, r1
 8001894:	4936      	ldr	r1, [pc, #216]	; (8001970 <GetAltitudeAndTemp+0x150>)
 8001896:	fb81 0103 	smull	r0, r1, r1, r3
 800189a:	4419      	add	r1, r3
 800189c:	1189      	asrs	r1, r1, #6
 800189e:	17db      	asrs	r3, r3, #31
 80018a0:	1acb      	subs	r3, r1, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80018a8:	4a32      	ldr	r2, [pc, #200]	; (8001974 <GetAltitudeAndTemp+0x154>)
 80018aa:	e9c2 3400 	strd	r3, r4, [r2]
	P = ((RawPressure * SNES) / 2097152 - OFF) / 32768;
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <GetAltitudeAndTemp+0x158>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	4b2e      	ldr	r3, [pc, #184]	; (8001974 <GetAltitudeAndTemp+0x154>)
 80018ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018be:	fb03 f502 	mul.w	r5, r3, r2
 80018c2:	fb01 f004 	mul.w	r0, r1, r4
 80018c6:	4428      	add	r0, r5
 80018c8:	fba1 3403 	umull	r3, r4, r1, r3
 80018cc:	1902      	adds	r2, r0, r4
 80018ce:	4614      	mov	r4, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f174 0200 	sbcs.w	r2, r4, #0
 80018d6:	da05      	bge.n	80018e4 <GetAltitudeAndTemp+0xc4>
 80018d8:	4928      	ldr	r1, [pc, #160]	; (800197c <GetAltitudeAndTemp+0x15c>)
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	185b      	adds	r3, r3, r1
 80018e0:	eb44 0402 	adc.w	r4, r4, r2
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	0d59      	lsrs	r1, r3, #21
 80018ee:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 80018f2:	1562      	asrs	r2, r4, #21
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <GetAltitudeAndTemp+0x144>)
 80018f6:	e9d3 5600 	ldrd	r5, r6, [r3]
 80018fa:	460b      	mov	r3, r1
 80018fc:	4614      	mov	r4, r2
 80018fe:	1b5b      	subs	r3, r3, r5
 8001900:	eb64 0406 	sbc.w	r4, r4, r6
 8001904:	2b00      	cmp	r3, #0
 8001906:	f174 0200 	sbcs.w	r2, r4, #0
 800190a:	da06      	bge.n	800191a <GetAltitudeAndTemp+0xfa>
 800190c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	185b      	adds	r3, r3, r1
 8001916:	eb44 0402 	adc.w	r4, r4, r2
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	0bd9      	lsrs	r1, r3, #15
 8001924:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8001928:	13e2      	asrs	r2, r4, #15
 800192a:	460b      	mov	r3, r1
 800192c:	4614      	mov	r4, r2
 800192e:	461a      	mov	r2, r3
 8001930:	4b13      	ldr	r3, [pc, #76]	; (8001980 <GetAltitudeAndTemp+0x160>)
 8001932:	601a      	str	r2, [r3, #0]
	return P;
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <GetAltitudeAndTemp+0x160>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	bcf0      	pop	{r4, r5, r6, r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2000033c 	.word	0x2000033c
 8001948:	20000334 	.word	0x20000334
 800194c:	20000344 	.word	0x20000344
 8001950:	20000336 	.word	0x20000336
 8001954:	007fffff 	.word	0x007fffff
 8001958:	20000348 	.word	0x20000348
 800195c:	2000032e 	.word	0x2000032e
 8001960:	20000332 	.word	0x20000332
 8001964:	20000350 	.word	0x20000350
 8001968:	2000032c 	.word	0x2000032c
 800196c:	20000330 	.word	0x20000330
 8001970:	81020409 	.word	0x81020409
 8001974:	20000358 	.word	0x20000358
 8001978:	20000340 	.word	0x20000340
 800197c:	001fffff 	.word	0x001fffff
 8001980:	20000360 	.word	0x20000360

08001984 <SendToScreen>:
 */
#include "main.h"
#include "string.h"

void SendToScreen(bool AddNewLine)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, USBTXArray, 256,10); // HAL_UART_Transmit(&huart2, USBTXArray, 1024,3); TIM2->CCR1
 800198e:	230a      	movs	r3, #10
 8001990:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001994:	490b      	ldr	r1, [pc, #44]	; (80019c4 <SendToScreen+0x40>)
 8001996:	480c      	ldr	r0, [pc, #48]	; (80019c8 <SendToScreen+0x44>)
 8001998:	f008 fb0e 	bl	8009fb8 <HAL_UART_Transmit>
	memset(USBTXArray,0, 256);
 800199c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a0:	2100      	movs	r1, #0
 80019a2:	4808      	ldr	r0, [pc, #32]	; (80019c4 <SendToScreen+0x40>)
 80019a4:	f009 ff07 	bl	800b7b6 <memset>
	if (AddNewLine)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <SendToScreen+0x36>
	{
		HAL_UART_Transmit(&huart2, "\r\n", 2,1);
 80019ae:	2301      	movs	r3, #1
 80019b0:	2202      	movs	r2, #2
 80019b2:	4906      	ldr	r1, [pc, #24]	; (80019cc <SendToScreen+0x48>)
 80019b4:	4804      	ldr	r0, [pc, #16]	; (80019c8 <SendToScreen+0x44>)
 80019b6:	f008 faff 	bl	8009fb8 <HAL_UART_Transmit>
	}
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000864 	.word	0x20000864
 80019c8:	200041a8 	.word	0x200041a8
 80019cc:	0800f0a8 	.word	0x0800f0a8

080019d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FATFS SDFatFS;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80019d4:	4904      	ldr	r1, [pc, #16]	; (80019e8 <MX_FATFS_Init+0x18>)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_FATFS_Init+0x1c>)
 80019d8:	f009 fea8 	bl	800b72c <FATFS_LinkDriver>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <MX_FATFS_Init+0x20>)
 80019e2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000cb0 	.word	0x20000cb0
 80019ec:	20000014 	.word	0x20000014
 80019f0:	20000cb4 	.word	0x20000cb4
 80019f4:	00000000 	.word	0x00000000

080019f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b092      	sub	sp, #72	; 0x48
 80019fc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fe:	f001 fcee 	bl	80033de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a02:	f000 f907 	bl	8001c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a06:	f000 fd81 	bl	800250c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a0a:	f000 fd51 	bl	80024b0 <MX_DMA_Init>
  MX_TIM4_Init();
 8001a0e:	f000 fc45 	bl	800229c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001a12:	f000 fb27 	bl	8002064 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001a16:	f000 fd17 	bl	8002448 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001a1a:	f000 f9f5 	bl	8001e08 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001a1e:	f7ff ffd7 	bl	80019d0 <MX_FATFS_Init>
  MX_QUADSPI_Init();
 8001a22:	f000 fa31 	bl	8001e88 <MX_QUADSPI_Init>
  MX_SDMMC1_MMC_Init();
 8001a26:	f000 fab9 	bl	8001f9c <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 8001a2a:	f000 fadd 	bl	8001fe8 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001a2e:	f000 f999 	bl	8001d64 <MX_ADC1_Init>
  MX_RTC_Init();
 8001a32:	f000 fa55 	bl	8001ee0 <MX_RTC_Init>
  MX_TIM2_Init();
 8001a36:	f000 fbd5 	bl	80021e4 <MX_TIM2_Init>
  MX_UART5_Init();
 8001a3a:	f000 fcd1 	bl	80023e0 <MX_UART5_Init>
  MX_UART4_Init();
 8001a3e:	f000 fc9f 	bl	8002380 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1); // PWM Generation Servos
 8001a42:	4863      	ldr	r0, [pc, #396]	; (8001bd0 <main+0x1d8>)
 8001a44:	f007 fac0 	bl	8008fc8 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim4); // LED
 8001a48:	4862      	ldr	r0, [pc, #392]	; (8001bd4 <main+0x1dc>)
 8001a4a:	f007 fabd 	bl	8008fc8 <HAL_TIM_PWM_Init>
  HAL_ADC_Start(&hadc1);    // Battery
 8001a4e:	4862      	ldr	r0, [pc, #392]	; (8001bd8 <main+0x1e0>)
 8001a50:	f001 fd88 	bl	8003564 <HAL_ADC_Start>
  //
  //	MS56XXInit();

  //	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); 	// QSPI CS Low
  //	HAL_Delay(15);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); // QSPI WP High
 8001a54:	2201      	movs	r2, #1
 8001a56:	2104      	movs	r1, #4
 8001a58:	4860      	ldr	r0, [pc, #384]	; (8001bdc <main+0x1e4>)
 8001a5a:	f003 f9af 	bl	8004dbc <HAL_GPIO_WritePin>
  HAL_Delay(15);
 8001a5e:	200f      	movs	r0, #15
 8001a60:	f001 fd1a 	bl	8003498 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // QSPI RST High
 8001a64:	2200      	movs	r2, #0
 8001a66:	2102      	movs	r1, #2
 8001a68:	485d      	ldr	r0, [pc, #372]	; (8001be0 <main+0x1e8>)
 8001a6a:	f003 f9a7 	bl	8004dbc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f001 fd12 	bl	8003498 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // QSPI RST High
 8001a74:	2201      	movs	r2, #1
 8001a76:	2102      	movs	r1, #2
 8001a78:	4859      	ldr	r0, [pc, #356]	; (8001be0 <main+0x1e8>)
 8001a7a:	f003 f99f 	bl	8004dbc <HAL_GPIO_WritePin>
  HAL_Delay(15);
 8001a7e:	200f      	movs	r0, #15
 8001a80:	f001 fd0a 	bl	8003498 <HAL_Delay>

  QSPI_Init();
 8001a84:	f7fe fde4 	bl	8000650 <QSPI_Init>
//
//  unsigned int br = 0;
//  FS_ret2 = f_read(&USERFile, &FileReadBuffer, sizeof(FileReadBuffer), &br);
  //	BNOInit();

  vBat = measureBattery();
 8001a88:	f000 fe42 	bl	8002710 <measureBattery>
 8001a8c:	eeb0 7b40 	vmov.f64	d7, d0
 8001a90:	4b54      	ldr	r3, [pc, #336]	; (8001be4 <main+0x1ec>)
 8001a92:	ed83 7b00 	vstr	d7, [r3]
  MS56XXInit();
 8001a96:	f7ff fdd5 	bl	8001644 <MS56XXInit>
  BNOInit();
 8001a9a:	f7ff fd3b 	bl	8001514 <BNOInit>
  led_init();
 8001a9e:	f7ff f839 	bl	8000b14 <led_init>

  //	readBNOAnglesDeg();
  //Read Data from terminal - Example
  HAL_UART_Receive_DMA(&huart2, USBRXArray, 1024);
 8001aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa6:	4950      	ldr	r1, [pc, #320]	; (8001be8 <main+0x1f0>)
 8001aa8:	4850      	ldr	r0, [pc, #320]	; (8001bec <main+0x1f4>)
 8001aaa:	f008 fb17 	bl	800a0dc <HAL_UART_Receive_DMA>
  //Write Data to terminal - Example
//  ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);

//  HAL_UART_Receive_DMA(&huart5, UART5RXArray, 150);
//  NumberOfByteRet = CheckDataFromUART();
  LastBLERead = HAL_GetTick();
 8001aae:	f001 fce7 	bl	8003480 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <main+0x1f8>)
 8001ab6:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 8001ab8:	2064      	movs	r0, #100	; 0x64
 8001aba:	f001 fced 	bl	8003498 <HAL_Delay>
//    LastRPMCycle++;
//    sprintf(UART5TXArray, "%d\r\n",LastRPMCycle);
//    HAL_UART_Transmit(&huart5,UART5TXArray, 256, 1);
//    HAL_Delay(5);

    if (HAL_GetTick() - LastBLERead >= 100)
 8001abe:	f001 fcdf 	bl	8003480 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <main+0x1f8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b63      	cmp	r3, #99	; 0x63
 8001acc:	d953      	bls.n	8001b76 <main+0x17e>
    {
    	LastBLERead = HAL_GetTick();
 8001ace:	f001 fcd7 	bl	8003480 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <main+0x1f8>)
 8001ad6:	601a      	str	r2, [r3, #0]
    	NumberOfByteRet = CheckDataFromUART();
 8001ad8:	f7ff f95a 	bl	8000d90 <CheckDataFromUART>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b45      	ldr	r3, [pc, #276]	; (8001bf4 <main+0x1fc>)
 8001ae0:	601a      	str	r2, [r3, #0]
    	ret = ParseRFMessage(&CurrentAngle, &CurrentPower);
 8001ae2:	4945      	ldr	r1, [pc, #276]	; (8001bf8 <main+0x200>)
 8001ae4:	4845      	ldr	r0, [pc, #276]	; (8001bfc <main+0x204>)
 8001ae6:	f7ff f827 	bl	8000b38 <ParseRFMessage>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b44      	ldr	r3, [pc, #272]	; (8001c00 <main+0x208>)
 8001af0:	701a      	strb	r2, [r3, #0]
    	FinalAngle = CurrentAngle * (1 - ret) + FinalAngle * ret;
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <main+0x208>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	f1c3 0301 	rsb	r3, r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <main+0x204>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	fb12 f303 	smulbb	r3, r2, r3
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <main+0x20c>)
 8001b08:	7819      	ldrb	r1, [r3, #0]
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <main+0x208>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	fb11 f303 	smulbb	r3, r1, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <main+0x20c>)
 8001b1a:	701a      	strb	r2, [r3, #0]
    	FinalPower = CurrentPower * (1 - ret) + FinalPower * ret;
 8001b1c:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <main+0x208>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	f1c3 0301 	rsb	r3, r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <main+0x200>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	fb12 f303 	smulbb	r3, r2, r3
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <main+0x210>)
 8001b32:	7819      	ldrb	r1, [r3, #0]
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <main+0x208>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	fb11 f303 	smulbb	r3, r1, r3
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <main+0x210>)
 8001b44:	701a      	strb	r2, [r3, #0]
    	////			  SendToScreen(true);
    	////			  sprintf(USBTXArray,"Length of string a = %d \n",strlen(UART5RXArray));
    	////			  SendToScreen(true);
    	//			  sprintf(USBTXArray,"%6.3f, Angle: %d, Power: %d ret: %d \r\n",CurrentTime(), CurrentAngle, CurrentPower, ret);
    	//			  SendToScreen(false);
    	sprintf(USBTXArray,"%6.3f, FAngle: %d, FPower: %d ret: %d \r\n",CurrentTime(), FinalAngle, FinalPower, ret);
 8001b46:	f000 fdcb 	bl	80026e0 <CurrentTime>
 8001b4a:	ec55 4b10 	vmov	r4, r5, d0
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <main+0x20c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b2c      	ldr	r3, [pc, #176]	; (8001c08 <main+0x210>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <main+0x208>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	9101      	str	r1, [sp, #4]
 8001b62:	9200      	str	r2, [sp, #0]
 8001b64:	4622      	mov	r2, r4
 8001b66:	462b      	mov	r3, r5
 8001b68:	4928      	ldr	r1, [pc, #160]	; (8001c0c <main+0x214>)
 8001b6a:	4829      	ldr	r0, [pc, #164]	; (8001c10 <main+0x218>)
 8001b6c:	f00a fc42 	bl	800c3f4 <siprintf>
    	SendToScreen(false);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff ff07 	bl	8001984 <SendToScreen>
    }
        int PWMValue = 1000 * ((2 - 1) * (double)FinalAngle / (145.0 - 35.0) + 0.5);
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <main+0x20c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001b82:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8001bc0 <main+0x1c8>
 8001b86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8001b8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b92:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001bc8 <main+0x1d0>
 8001b96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b9a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b9e:	ee17 3a90 	vmov	r3, s15
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
        start_pwm1(PWMValue); // Control Servo
 8001ba4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ba6:	f7fe fd23 	bl	80005f0 <start_pwm1>
        start_pwm2(FinalPower * 80);   // Control Car Motor
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <main+0x210>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fd35 	bl	8000628 <start_pwm2>
  {
 8001bbe:	e77e      	b.n	8001abe <main+0xc6>
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	405b8000 	.word	0x405b8000
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	408f4000 	.word	0x408f4000
 8001bd0:	20004040 	.word	0x20004040
 8001bd4:	20003db0 	.word	0x20003db0
 8001bd8:	20003f60 	.word	0x20003f60
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40020000 	.word	0x40020000
 8001be4:	20000c68 	.word	0x20000c68
 8001be8:	20000364 	.word	0x20000364
 8001bec:	200041a8 	.word	0x200041a8
 8001bf0:	20000c74 	.word	0x20000c74
 8001bf4:	20000c70 	.word	0x20000c70
 8001bf8:	20000c7b 	.word	0x20000c7b
 8001bfc:	20000c7a 	.word	0x20000c7a
 8001c00:	20000c7c 	.word	0x20000c7c
 8001c04:	20000c78 	.word	0x20000c78
 8001c08:	20000c79 	.word	0x20000c79
 8001c0c:	0800f0ac 	.word	0x0800f0ac
 8001c10:	20000864 	.word	0x20000864

08001c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0b8      	sub	sp, #224	; 0xe0
 8001c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c1e:	2234      	movs	r2, #52	; 0x34
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f009 fdc7 	bl	800b7b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c28:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	2290      	movs	r2, #144	; 0x90
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f009 fdb8 	bl	800b7b6 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001c46:	f004 f8fb 	bl	8005e40 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <SystemClock_Config+0x140>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a41      	ldr	r2, [pc, #260]	; (8001d54 <SystemClock_Config+0x140>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <SystemClock_Config+0x140>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <SystemClock_Config+0x144>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a3c      	ldr	r2, [pc, #240]	; (8001d58 <SystemClock_Config+0x144>)
 8001c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <SystemClock_Config+0x144>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c96:	2319      	movs	r3, #25
 8001c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001c9c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001caa:	2309      	movs	r3, #9
 8001cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 ffab 	bl	8006c10 <HAL_RCC_OscConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001cc0:	f000 fd4c 	bl	800275c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cc4:	f004 f8cc 	bl	8005e60 <HAL_PWREx_EnableOverDrive>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001cce:	f000 fd45 	bl	800275c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ce8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001cf4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cf8:	2107      	movs	r1, #7
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f005 fa36 	bl	800716c <HAL_RCC_ClockConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001d06:	f000 fd29 	bl	800275c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <SystemClock_Config+0x148>)
 8001d0c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <SystemClock_Config+0x14c>)
 8001d10:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001d2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d32:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f005 fc15 	bl	8007568 <HAL_RCCEx_PeriphCLKConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8001d44:	f000 fd0a 	bl	800275c <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8001d48:	f005 fafc 	bl	8007344 <HAL_RCC_EnableCSS>
}
 8001d4c:	bf00      	nop
 8001d4e:	37e0      	adds	r7, #224	; 0xe0
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40007000 	.word	0x40007000
 8001d5c:	00a046b0 	.word	0x00a046b0
 8001d60:	00190300 	.word	0x00190300

08001d64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d78:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <MX_ADC1_Init+0x9c>)
 8001d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <MX_ADC1_Init+0xa0>)
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001dc6:	f001 fb89 	bl	80034dc <HAL_ADC_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001dd0:	f000 fcc4 	bl	800275c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001dd4:	230d      	movs	r3, #13
 8001dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_ADC1_Init+0x98>)
 8001de6:	f001 fde9 	bl	80039bc <HAL_ADC_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001df0:	f000 fcb4 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20003f60 	.word	0x20003f60
 8001e00:	40012000 	.word	0x40012000
 8001e04:	0f000001 	.word	0x0f000001

08001e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <MX_I2C1_Init+0x78>)
 8001e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <MX_I2C1_Init+0x7c>)
 8001e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e1a:	2252      	movs	r2, #82	; 0x52
 8001e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e42:	480e      	ldr	r0, [pc, #56]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e44:	f002 ffd4 	bl	8004df0 <HAL_I2C_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e4e:	f000 fc85 	bl	800275c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e52:	2100      	movs	r1, #0
 8001e54:	4809      	ldr	r0, [pc, #36]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e56:	f003 fc3f 	bl	80056d8 <HAL_I2CEx_ConfigAnalogFilter>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e60:	f000 fc7c 	bl	800275c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e64:	2100      	movs	r1, #0
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_I2C1_Init+0x74>)
 8001e68:	f003 fc81 	bl	800576e <HAL_I2CEx_ConfigDigitalFilter>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e72:	f000 fc73 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20003df0 	.word	0x20003df0
 8001e80:	40005400 	.word	0x40005400
 8001e84:	6000030d 	.word	0x6000030d

08001e88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001e8e:	4a13      	ldr	r2, [pc, #76]	; (8001edc <MX_QUADSPI_Init+0x54>)
 8001e90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001e94:	22ff      	movs	r2, #255	; 0xff
 8001e96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001ea6:	2217      	movs	r2, #23
 8001ea8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_QUADSPI_Init+0x50>)
 8001ec4:	f004 f81c 	bl	8005f00 <HAL_QSPI_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001ece:	f000 fc45 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200042a0 	.word	0x200042a0
 8001edc:	a0001000 	.word	0xa0001000

08001ee0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001efe:	4a26      	ldr	r2, [pc, #152]	; (8001f98 <MX_RTC_Init+0xb8>)
 8001f00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f02:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f0a:	2263      	movs	r2, #99	; 0x63
 8001f0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 9999;
 8001f0e:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f10:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f28:	481a      	ldr	r0, [pc, #104]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f2a:	f005 ff43 	bl	8007db4 <HAL_RTC_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001f34:	f000 fc12 	bl	800275c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	2200      	movs	r2, #0
 8001f52:	4619      	mov	r1, r3
 8001f54:	480f      	ldr	r0, [pc, #60]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f56:	f005 ffa9 	bl	8007eac <HAL_RTC_SetTime>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001f60:	f000 fbfc 	bl	800275c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f64:	2301      	movs	r3, #1
 8001f66:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 20;
 8001f70:	2314      	movs	r3, #20
 8001f72:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001f74:	1d3b      	adds	r3, r7, #4
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4806      	ldr	r0, [pc, #24]	; (8001f94 <MX_RTC_Init+0xb4>)
 8001f7c:	f006 f854 	bl	8008028 <HAL_RTC_SetDate>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001f86:	f000 fbe9 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20004008 	.word	0x20004008
 8001f98:	40002800 	.word	0x40002800

08001f9c <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_SDMMC1_MMC_Init+0x44>)
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <MX_SDMMC1_MMC_Init+0x48>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_SDMMC1_MMC_Init+0x44>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_SDMMC1_MMC_Init+0x44>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_SDMMC1_MMC_Init+0x44>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_SDMMC1_MMC_Init+0x44>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_SDMMC1_MMC_Init+0x44>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	615a      	str	r2, [r3, #20]
  hmmc1.Init.ClockDiv = 0;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_SDMMC1_MMC_Init+0x44>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_SDMMC1_MMC_Init+0x44>)
 8001fcc:	f003 fc1b 	bl	8005806 <HAL_MMC_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_SDMMC1_MMC_Init+0x3e>
  {
    Error_Handler();
 8001fd6:	f000 fbc1 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20003e3c 	.word	0x20003e3c
 8001fe4:	40012c00 	.word	0x40012c00

08001fe8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <MX_SPI1_Init+0x74>)
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <MX_SPI1_Init+0x78>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_SPI1_Init+0x74>)
 8001ff4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_SPI1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002000:	4b16      	ldr	r3, [pc, #88]	; (800205c <MX_SPI1_Init+0x74>)
 8002002:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002006:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002008:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_SPI1_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <MX_SPI1_Init+0x74>)
 8002010:	2200      	movs	r2, #0
 8002012:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_SPI1_Init+0x74>)
 8002016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_SPI1_Init+0x74>)
 800201e:	2220      	movs	r2, #32
 8002020:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_SPI1_Init+0x74>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <MX_SPI1_Init+0x74>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MX_SPI1_Init+0x74>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_SPI1_Init+0x74>)
 8002036:	2207      	movs	r2, #7
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <MX_SPI1_Init+0x74>)
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_SPI1_Init+0x74>)
 8002042:	2208      	movs	r2, #8
 8002044:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_SPI1_Init+0x74>)
 8002048:	f006 f908 	bl	800825c <HAL_SPI_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002052:	f000 fb83 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20004104 	.word	0x20004104
 8002060:	40013000 	.word	0x40013000

08002064 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b09a      	sub	sp, #104	; 0x68
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002084:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
 8002094:	615a      	str	r2, [r3, #20]
 8002096:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	222c      	movs	r2, #44	; 0x2c
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f009 fb89 	bl	800b7b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020a4:	4b4d      	ldr	r3, [pc, #308]	; (80021dc <MX_TIM1_Init+0x178>)
 80020a6:	4a4e      	ldr	r2, [pc, #312]	; (80021e0 <MX_TIM1_Init+0x17c>)
 80020a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 80020aa:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <MX_TIM1_Init+0x178>)
 80020ac:	f240 221b 	movw	r2, #539	; 0x21b
 80020b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <MX_TIM1_Init+0x178>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 80020b8:	4b48      	ldr	r3, [pc, #288]	; (80021dc <MX_TIM1_Init+0x178>)
 80020ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80020be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b46      	ldr	r3, [pc, #280]	; (80021dc <MX_TIM1_Init+0x178>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020c6:	4b45      	ldr	r3, [pc, #276]	; (80021dc <MX_TIM1_Init+0x178>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020cc:	4b43      	ldr	r3, [pc, #268]	; (80021dc <MX_TIM1_Init+0x178>)
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80020d2:	4842      	ldr	r0, [pc, #264]	; (80021dc <MX_TIM1_Init+0x178>)
 80020d4:	f006 ffe8 	bl	80090a8 <HAL_TIM_IC_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80020de:	f000 fb3d 	bl	800275c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020e2:	483e      	ldr	r0, [pc, #248]	; (80021dc <MX_TIM1_Init+0x178>)
 80020e4:	f006 ff70 	bl	8008fc8 <HAL_TIM_PWM_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80020ee:	f000 fb35 	bl	800275c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020f2:	2320      	movs	r3, #32
 80020f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80020f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020fa:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002100:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002104:	4619      	mov	r1, r3
 8002106:	4835      	ldr	r0, [pc, #212]	; (80021dc <MX_TIM1_Init+0x178>)
 8002108:	f007 fdfc 	bl	8009d04 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8002112:	f000 fb23 	bl	800275c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002116:	2300      	movs	r3, #0
 8002118:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800211a:	2301      	movs	r3, #1
 800211c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800211e:	2300      	movs	r3, #0
 8002120:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002126:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	482b      	ldr	r0, [pc, #172]	; (80021dc <MX_TIM1_Init+0x178>)
 8002130:	f006 ffe5 	bl	80090fe <HAL_TIM_IC_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800213a:	f000 fb0f 	bl	800275c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800213e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002142:	2208      	movs	r2, #8
 8002144:	4619      	mov	r1, r3
 8002146:	4825      	ldr	r0, [pc, #148]	; (80021dc <MX_TIM1_Init+0x178>)
 8002148:	f006 ffd9 	bl	80090fe <HAL_TIM_IC_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002152:	f000 fb03 	bl	800275c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002156:	2360      	movs	r3, #96	; 0x60
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 600;
 800215a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800215e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002160:	2300      	movs	r3, #0
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002174:	220c      	movs	r2, #12
 8002176:	4619      	mov	r1, r3
 8002178:	4818      	ldr	r0, [pc, #96]	; (80021dc <MX_TIM1_Init+0x178>)
 800217a:	f007 f85d 	bl	8009238 <HAL_TIM_PWM_ConfigChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002184:	f000 faea 	bl	800275c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800219c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_TIM1_Init+0x178>)
 80021be:	f007 fe2f 	bl	8009e20 <HAL_TIMEx_ConfigBreakDeadTime>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80021c8:	f000 fac8 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021cc:	4803      	ldr	r0, [pc, #12]	; (80021dc <MX_TIM1_Init+0x178>)
 80021ce:	f000 fd4b 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 80021d2:	bf00      	nop
 80021d4:	3768      	adds	r7, #104	; 0x68
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20004040 	.word	0x20004040
 80021e0:	40010000 	.word	0x40010000

080021e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ea:	f107 031c 	add.w	r3, r7, #28
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f6:	463b      	mov	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
 8002204:	615a      	str	r2, [r3, #20]
 8002206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002208:	4b23      	ldr	r3, [pc, #140]	; (8002298 <MX_TIM2_Init+0xb4>)
 800220a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800220e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 539;
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <MX_TIM2_Init+0xb4>)
 8002212:	f240 221b 	movw	r2, #539	; 0x21b
 8002216:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MX_TIM2_Init+0xb4>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <MX_TIM2_Init+0xb4>)
 8002220:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002224:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <MX_TIM2_Init+0xb4>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <MX_TIM2_Init+0xb4>)
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002232:	4819      	ldr	r0, [pc, #100]	; (8002298 <MX_TIM2_Init+0xb4>)
 8002234:	f006 fec8 	bl	8008fc8 <HAL_TIM_PWM_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800223e:	f000 fa8d 	bl	800275c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	4811      	ldr	r0, [pc, #68]	; (8002298 <MX_TIM2_Init+0xb4>)
 8002252:	f007 fd57 	bl	8009d04 <HAL_TIMEx_MasterConfigSynchronization>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800225c:	f000 fa7e 	bl	800275c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002260:	2360      	movs	r3, #96	; 0x60
 8002262:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 600;
 8002264:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002268:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002272:	463b      	mov	r3, r7
 8002274:	2200      	movs	r2, #0
 8002276:	4619      	mov	r1, r3
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM2_Init+0xb4>)
 800227a:	f006 ffdd 	bl	8009238 <HAL_TIM_PWM_ConfigChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8002284:	f000 fa6a 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM2_Init+0xb4>)
 800228a:	f000 fced 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	; 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20004168 	.word	0x20004168

0800229c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ae:	463b      	mov	r3, r7
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	615a      	str	r2, [r3, #20]
 80022be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <MX_TIM4_Init+0xdc>)
 80022c2:	4a2e      	ldr	r2, [pc, #184]	; (800237c <MX_TIM4_Init+0xe0>)
 80022c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 80022c6:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <MX_TIM4_Init+0xdc>)
 80022c8:	f240 221b 	movw	r2, #539	; 0x21b
 80022cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <MX_TIM4_Init+0xdc>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <MX_TIM4_Init+0xdc>)
 80022d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022dc:	4b26      	ldr	r3, [pc, #152]	; (8002378 <MX_TIM4_Init+0xdc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022e2:	4b25      	ldr	r3, [pc, #148]	; (8002378 <MX_TIM4_Init+0xdc>)
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022e8:	4823      	ldr	r0, [pc, #140]	; (8002378 <MX_TIM4_Init+0xdc>)
 80022ea:	f006 fe6d 	bl	8008fc8 <HAL_TIM_PWM_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80022f4:	f000 fa32 	bl	800275c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	481c      	ldr	r0, [pc, #112]	; (8002378 <MX_TIM4_Init+0xdc>)
 8002308:	f007 fcfc 	bl	8009d04 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002312:	f000 fa23 	bl	800275c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002316:	2360      	movs	r3, #96	; 0x60
 8002318:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002326:	463b      	mov	r3, r7
 8002328:	2200      	movs	r2, #0
 800232a:	4619      	mov	r1, r3
 800232c:	4812      	ldr	r0, [pc, #72]	; (8002378 <MX_TIM4_Init+0xdc>)
 800232e:	f006 ff83 	bl	8009238 <HAL_TIM_PWM_ConfigChannel>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002338:	f000 fa10 	bl	800275c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800233c:	463b      	mov	r3, r7
 800233e:	2204      	movs	r2, #4
 8002340:	4619      	mov	r1, r3
 8002342:	480d      	ldr	r0, [pc, #52]	; (8002378 <MX_TIM4_Init+0xdc>)
 8002344:	f006 ff78 	bl	8009238 <HAL_TIM_PWM_ConfigChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800234e:	f000 fa05 	bl	800275c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002352:	463b      	mov	r3, r7
 8002354:	220c      	movs	r2, #12
 8002356:	4619      	mov	r1, r3
 8002358:	4807      	ldr	r0, [pc, #28]	; (8002378 <MX_TIM4_Init+0xdc>)
 800235a:	f006 ff6d 	bl	8009238 <HAL_TIM_PWM_ConfigChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002364:	f000 f9fa 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002368:	4803      	ldr	r0, [pc, #12]	; (8002378 <MX_TIM4_Init+0xdc>)
 800236a:	f000 fc7d 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 800236e:	bf00      	nop
 8002370:	3728      	adds	r7, #40	; 0x28
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20003db0 	.word	0x20003db0
 800237c:	40000800 	.word	0x40000800

08002380 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_UART4_Init+0x58>)
 8002386:	4a15      	ldr	r2, [pc, #84]	; (80023dc <MX_UART4_Init+0x5c>)
 8002388:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <MX_UART4_Init+0x58>)
 800238c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002390:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_UART4_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_UART4_Init+0x58>)
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023a0:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <MX_UART4_Init+0x58>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_UART4_Init+0x58>)
 80023a8:	220c      	movs	r2, #12
 80023aa:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <MX_UART4_Init+0x58>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_UART4_Init+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <MX_UART4_Init+0x58>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_UART4_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80023c4:	4804      	ldr	r0, [pc, #16]	; (80023d8 <MX_UART4_Init+0x58>)
 80023c6:	f007 fda9 	bl	8009f1c <HAL_UART_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 80023d0:	f000 f9c4 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20004084 	.word	0x20004084
 80023dc:	40004c00 	.word	0x40004c00

080023e0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <MX_UART5_Init+0x60>)
 80023e6:	4a17      	ldr	r2, [pc, #92]	; (8002444 <MX_UART5_Init+0x64>)
 80023e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <MX_UART5_Init+0x60>)
 80023ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <MX_UART5_Init+0x60>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_UART5_Init+0x60>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MX_UART5_Init+0x60>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_UART5_Init+0x60>)
 8002406:	220c      	movs	r2, #12
 8002408:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <MX_UART5_Init+0x60>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_8;
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MX_UART5_Init+0x60>)
 8002412:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002416:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_UART5_Init+0x60>)
 800241a:	2200      	movs	r2, #0
 800241c:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <MX_UART5_Init+0x60>)
 8002420:	2210      	movs	r2, #16
 8002422:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_UART5_Init+0x60>)
 8002426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800242a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800242c:	4804      	ldr	r0, [pc, #16]	; (8002440 <MX_UART5_Init+0x60>)
 800242e:	f007 fd75 	bl	8009f1c <HAL_UART_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_UART5_Init+0x5c>
  {
    Error_Handler();
 8002438:	f000 f990 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20003ed8 	.word	0x20003ed8
 8002444:	40005000 	.word	0x40005000

08002448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <MX_USART2_UART_Init+0x64>)
 8002450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8002452:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 8002454:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 800246e:	220c      	movs	r2, #12
 8002470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 8002474:	2200      	movs	r2, #0
 8002476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800247e:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 8002486:	2210      	movs	r2, #16
 8002488:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 800248c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART2_UART_Init+0x60>)
 8002494:	f007 fd42 	bl	8009f1c <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800249e:	f000 f95d 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200041a8 	.word	0x200041a8
 80024ac:	40004400 	.word	0x40004400

080024b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_DMA_Init+0x58>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <MX_DMA_Init+0x58>)
 80024bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_DMA_Init+0x58>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2100      	movs	r1, #0
 80024d2:	200b      	movs	r0, #11
 80024d4:	f001 fd9b 	bl	800400e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80024d8:	200b      	movs	r0, #11
 80024da:	f001 fdb4 	bl	8004046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2100      	movs	r1, #0
 80024e2:	2010      	movs	r0, #16
 80024e4:	f001 fd93 	bl	800400e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024e8:	2010      	movs	r0, #16
 80024ea:	f001 fdac 	bl	8004046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2011      	movs	r0, #17
 80024f4:	f001 fd8b 	bl	800400e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024f8:	2011      	movs	r0, #17
 80024fa:	f001 fda4 	bl	8004046 <HAL_NVIC_EnableIRQ>

}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800

0800250c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	; 0x30
 8002510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002512:	f107 031c 	add.w	r3, r7, #28
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	60da      	str	r2, [r3, #12]
 8002520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002522:	4b69      	ldr	r3, [pc, #420]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a68      	ldr	r2, [pc, #416]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002528:	f043 0310 	orr.w	r3, r3, #16
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b66      	ldr	r3, [pc, #408]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a62      	ldr	r2, [pc, #392]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002552:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a5c      	ldr	r2, [pc, #368]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a56      	ldr	r2, [pc, #344]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b54      	ldr	r3, [pc, #336]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002582:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a50      	ldr	r2, [pc, #320]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b4e      	ldr	r3, [pc, #312]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800259a:	4b4b      	ldr	r3, [pc, #300]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a4a      	ldr	r2, [pc, #296]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <MX_GPIO_Init+0x1bc>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_WP_GPIO_Port, Flash_WP_Pin, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	2104      	movs	r1, #4
 80025b6:	4845      	ldr	r0, [pc, #276]	; (80026cc <MX_GPIO_Init+0x1c0>)
 80025b8:	f002 fc00 	bl	8004dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_Reset_GPIO_Port, Flash_Reset_Pin, GPIO_PIN_SET);
 80025bc:	2201      	movs	r2, #1
 80025be:	2102      	movs	r1, #2
 80025c0:	4843      	ldr	r0, [pc, #268]	; (80026d0 <MX_GPIO_Init+0x1c4>)
 80025c2:	f002 fbfb 	bl	8004dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5611_CS_GPIO_Port, MS5611_CS_Pin, GPIO_PIN_RESET);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2110      	movs	r1, #16
 80025ca:	4841      	ldr	r0, [pc, #260]	; (80026d0 <MX_GPIO_Init+0x1c4>)
 80025cc:	f002 fbf6 	bl	8004dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Flash_WP_Pin */
  GPIO_InitStruct.Pin = Flash_WP_Pin;
 80025d0:	2304      	movs	r3, #4
 80025d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025d8:	2301      	movs	r3, #1
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_WP_GPIO_Port, &GPIO_InitStruct);
 80025e0:	f107 031c 	add.w	r3, r7, #28
 80025e4:	4619      	mov	r1, r3
 80025e6:	4839      	ldr	r0, [pc, #228]	; (80026cc <MX_GPIO_Init+0x1c0>)
 80025e8:	f002 fa3e 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 PE0 
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80025ec:	f64f 637b 	movw	r3, #65147	; 0xfe7b
 80025f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f2:	2303      	movs	r3, #3
 80025f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025fa:	f107 031c 	add.w	r3, r7, #28
 80025fe:	4619      	mov	r1, r3
 8002600:	4832      	ldr	r0, [pc, #200]	; (80026cc <MX_GPIO_Init+0x1c0>)
 8002602:	f002 fa31 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC4 
                           PC5 PC6 PC7 PC9 
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4 
 8002606:	f240 63f7 	movw	r3, #1783	; 0x6f7
 800260a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9 
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260c:	2303      	movs	r3, #3
 800260e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	482e      	ldr	r0, [pc, #184]	; (80026d4 <MX_GPIO_Init+0x1c8>)
 800261c:	f002 fa24 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002620:	2301      	movs	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002628:	2301      	movs	r3, #1
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	4827      	ldr	r0, [pc, #156]	; (80026d0 <MX_GPIO_Init+0x1c4>)
 8002634:	f002 fa18 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_Reset_Pin */
  GPIO_InitStruct.Pin = Flash_Reset_Pin;
 8002638:	2302      	movs	r3, #2
 800263a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263c:	2301      	movs	r3, #1
 800263e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002640:	2301      	movs	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_Reset_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	4619      	mov	r1, r3
 800264e:	4820      	ldr	r0, [pc, #128]	; (80026d0 <MX_GPIO_Init+0x1c4>)
 8002650:	f002 fa0a 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : MS5611_CS_Pin */
  GPIO_InitStruct.Pin = MS5611_CS_Pin;
 8002654:	2310      	movs	r3, #16
 8002656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002658:	2301      	movs	r3, #1
 800265a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MS5611_CS_GPIO_Port, &GPIO_InitStruct);
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	4619      	mov	r1, r3
 800266a:	4819      	ldr	r0, [pc, #100]	; (80026d0 <MX_GPIO_Init+0x1c4>)
 800266c:	f002 f9fc 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_12 
 8002670:	f249 23c0 	movw	r3, #37568	; 0x92c0
 8002674:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002676:	2303      	movs	r3, #3
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	4619      	mov	r1, r3
 8002684:	4812      	ldr	r0, [pc, #72]	; (80026d0 <MX_GPIO_Init+0x1c4>)
 8002686:	f002 f9ef 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800268a:	f64f 4303 	movw	r3, #64515	; 0xfc03
 800268e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002690:	2303      	movs	r3, #3
 8002692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	480e      	ldr	r0, [pc, #56]	; (80026d8 <MX_GPIO_Init+0x1cc>)
 80026a0:	f002 f9e2 	bl	8004a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD3 PD4 PD5 
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80026a4:	f644 73f8 	movw	r3, #20472	; 0x4ff8
 80026a8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026aa:	2303      	movs	r3, #3
 80026ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026b2:	f107 031c 	add.w	r3, r7, #28
 80026b6:	4619      	mov	r1, r3
 80026b8:	4808      	ldr	r0, [pc, #32]	; (80026dc <MX_GPIO_Init+0x1d0>)
 80026ba:	f002 f9d5 	bl	8004a68 <HAL_GPIO_Init>

}
 80026be:	bf00      	nop
 80026c0:	3730      	adds	r7, #48	; 0x30
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40020c00 	.word	0x40020c00

080026e0 <CurrentTime>:

/* USER CODE BEGIN 4 */
double CurrentTime(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  return HAL_GetTick() / 1000.0;
 80026e4:	f000 fecc 	bl	8003480 <HAL_GetTick>
 80026e8:	ee07 0a90 	vmov	s15, r0
 80026ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80026f0:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8002708 <CurrentTime+0x28>
 80026f4:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80026f8:	eeb0 7b45 	vmov.f64	d7, d5
}
 80026fc:	eeb0 0b47 	vmov.f64	d0, d7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	f3af 8000 	nop.w
 8002708:	00000000 	.word	0x00000000
 800270c:	408f4000 	.word	0x408f4000

08002710 <measureBattery>:

double measureBattery()
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  uint32_t D = HAL_ADC_GetValue(&hadc1);
 8002716:	4810      	ldr	r0, [pc, #64]	; (8002758 <measureBattery+0x48>)
 8002718:	f001 f925 	bl	8003966 <HAL_ADC_GetValue>
 800271c:	6078      	str	r0, [r7, #4]
  return 2 * 3.3 * D / 4096.0;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	ee07 3a90 	vmov	s15, r3
 8002724:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002728:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8002748 <measureBattery+0x38>
 800272c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002730:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8002750 <measureBattery+0x40>
 8002734:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002738:	eeb0 7b45 	vmov.f64	d7, d5
}
 800273c:	eeb0 0b47 	vmov.f64	d0, d7
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	66666666 	.word	0x66666666
 800274c:	401a6666 	.word	0x401a6666
 8002750:	00000000 	.word	0x00000000
 8002754:	40b00000 	.word	0x40b00000
 8002758:	20003f60 	.word	0x20003f60

0800275c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_MspInit+0x50>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_MspInit+0x50>)
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_MspInit+0x50>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_MspInit+0x50>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a0b      	ldr	r2, [pc, #44]	; (80027bc <HAL_MspInit+0x50>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_MspInit+0x50>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	2004      	movs	r0, #4
 80027a8:	f001 fc31 	bl	800400e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80027ac:	2004      	movs	r0, #4
 80027ae:	f001 fc4a 	bl	8004046 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027b2:	bf00      	nop
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800

080027c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_ADC_MspInit+0x84>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d12b      	bne.n	800283a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027e2:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_ADC_MspInit+0x88>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e6:	4a18      	ldr	r2, [pc, #96]	; (8002848 <HAL_ADC_MspInit+0x88>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6453      	str	r3, [r2, #68]	; 0x44
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_ADC_MspInit+0x88>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_ADC_MspInit+0x88>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_ADC_MspInit+0x88>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6313      	str	r3, [r2, #48]	; 0x30
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_ADC_MspInit+0x88>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002812:	2308      	movs	r3, #8
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002816:	2303      	movs	r3, #3
 8002818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	4619      	mov	r1, r3
 8002824:	4809      	ldr	r0, [pc, #36]	; (800284c <HAL_ADC_MspInit+0x8c>)
 8002826:	f002 f91f 	bl	8004a68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	2012      	movs	r0, #18
 8002830:	f001 fbed 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002834:	2012      	movs	r0, #18
 8002836:	f001 fc06 	bl	8004046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800283a:	bf00      	nop
 800283c:	3728      	adds	r7, #40	; 0x28
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40012000 	.word	0x40012000
 8002848:	40023800 	.word	0x40023800
 800284c:	40020800 	.word	0x40020800

08002850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	; 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <HAL_I2C_MspInit+0x8c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d12f      	bne.n	80028d2 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_I2C_MspInit+0x90>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <HAL_I2C_MspInit+0x90>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_I2C_MspInit+0x90>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = BNO_SCL_Pin|BNO_SDA_Pin;
 800288a:	23c0      	movs	r3, #192	; 0xc0
 800288c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288e:	2312      	movs	r3, #18
 8002890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002892:	2301      	movs	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800289a:	2304      	movs	r3, #4
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	4619      	mov	r1, r3
 80028a4:	480f      	ldr	r0, [pc, #60]	; (80028e4 <HAL_I2C_MspInit+0x94>)
 80028a6:	f002 f8df 	bl	8004a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_I2C_MspInit+0x90>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <HAL_I2C_MspInit+0x90>)
 80028b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_I2C_MspInit+0x90>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	201f      	movs	r0, #31
 80028c8:	f001 fba1 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028cc:	201f      	movs	r0, #31
 80028ce:	f001 fbba 	bl	8004046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	; 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40005400 	.word	0x40005400
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020400 	.word	0x40020400

080028e8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a38      	ldr	r2, [pc, #224]	; (80029e8 <HAL_QSPI_MspInit+0x100>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d169      	bne.n	80029de <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800290a:	4b38      	ldr	r3, [pc, #224]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	4a37      	ldr	r2, [pc, #220]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6393      	str	r3, [r2, #56]	; 0x38
 8002916:	4b35      	ldr	r3, [pc, #212]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	4b32      	ldr	r3, [pc, #200]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a31      	ldr	r2, [pc, #196]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800293a:	4b2c      	ldr	r3, [pc, #176]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	4a2b      	ldr	r2, [pc, #172]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002940:	f043 0310 	orr.w	r3, r3, #16
 8002944:	6313      	str	r3, [r2, #48]	; 0x30
 8002946:	4b29      	ldr	r3, [pc, #164]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	f003 0310 	and.w	r3, r3, #16
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002952:	4b26      	ldr	r3, [pc, #152]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a25      	ldr	r2, [pc, #148]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b23      	ldr	r3, [pc, #140]	; (80029ec <HAL_QSPI_MspInit+0x104>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PE7     ------> QUADSPI_BK2_IO0
    PE8     ------> QUADSPI_BK2_IO1
    PC11     ------> QUADSPI_BK2_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800296a:	2304      	movs	r3, #4
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800297a:	2309      	movs	r3, #9
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	f107 031c 	add.w	r3, r7, #28
 8002982:	4619      	mov	r1, r3
 8002984:	481a      	ldr	r0, [pc, #104]	; (80029f0 <HAL_QSPI_MspInit+0x108>)
 8002986:	f002 f86f 	bl	8004a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800298a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002998:	2303      	movs	r3, #3
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800299c:	230a      	movs	r3, #10
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	4813      	ldr	r0, [pc, #76]	; (80029f4 <HAL_QSPI_MspInit+0x10c>)
 80029a8:	f002 f85e 	bl	8004a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b2:	2302      	movs	r3, #2
 80029b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80029be:	2309      	movs	r3, #9
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c2:	f107 031c 	add.w	r3, r7, #28
 80029c6:	4619      	mov	r1, r3
 80029c8:	480b      	ldr	r0, [pc, #44]	; (80029f8 <HAL_QSPI_MspInit+0x110>)
 80029ca:	f002 f84d 	bl	8004a68 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2100      	movs	r1, #0
 80029d2:	205c      	movs	r0, #92	; 0x5c
 80029d4:	f001 fb1b 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80029d8:	205c      	movs	r0, #92	; 0x5c
 80029da:	f001 fb34 	bl	8004046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80029de:	bf00      	nop
 80029e0:	3730      	adds	r7, #48	; 0x30
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	a0001000 	.word	0xa0001000
 80029ec:	40023800 	.word	0x40023800
 80029f0:	40020400 	.word	0x40020400
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40020800 	.word	0x40020800

080029fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a07      	ldr	r2, [pc, #28]	; (8002a28 <HAL_RTC_MspInit+0x2c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d105      	bne.n	8002a1a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HAL_RTC_MspInit+0x30>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <HAL_RTC_MspInit+0x30>)
 8002a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40002800 	.word	0x40002800
 8002a2c:	40023800 	.word	0x40023800

08002a30 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <HAL_MMC_MspInit+0xb4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d144      	bne.n	8002adc <HAL_MMC_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a52:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a70:	f043 0304 	orr.w	r3, r3, #4
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_MMC_MspInit+0xb8>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002a9a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002aac:	230c      	movs	r3, #12
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	480d      	ldr	r0, [pc, #52]	; (8002aec <HAL_MMC_MspInit+0xbc>)
 8002ab8:	f001 ffd6 	bl	8004a68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002abc:	2304      	movs	r3, #4
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002acc:	230c      	movs	r3, #12
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4806      	ldr	r0, [pc, #24]	; (8002af0 <HAL_MMC_MspInit+0xc0>)
 8002ad8:	f001 ffc6 	bl	8004a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002adc:	bf00      	nop
 8002ade:	3728      	adds	r7, #40	; 0x28
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00

08002af4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_SPI_MspInit+0x7c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d127      	bne.n	8002b66 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b16:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b20:	6453      	str	r3, [r2, #68]	; 0x44
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a10      	ldr	r2, [pc, #64]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <HAL_SPI_MspInit+0x80>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b46:	2338      	movs	r3, #56	; 0x38
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b56:	2305      	movs	r3, #5
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4805      	ldr	r0, [pc, #20]	; (8002b78 <HAL_SPI_MspInit+0x84>)
 8002b62:	f001 ff81 	bl	8004a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b66:	bf00      	nop
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40013000 	.word	0x40013000
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020400 	.word	0x40020400

08002b7c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <HAL_TIM_IC_MspInit+0x7c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d128      	bne.n	8002bf0 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b9e:	4b17      	ldr	r3, [pc, #92]	; (8002bfc <HAL_TIM_IC_MspInit+0x80>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a16      	ldr	r2, [pc, #88]	; (8002bfc <HAL_TIM_IC_MspInit+0x80>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_TIM_IC_MspInit+0x80>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <HAL_TIM_IC_MspInit+0x80>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a10      	ldr	r2, [pc, #64]	; (8002bfc <HAL_TIM_IC_MspInit+0x80>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_TIM_IC_MspInit+0x80>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 8002bce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002be0:	2301      	movs	r3, #1
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	4619      	mov	r1, r3
 8002bea:	4805      	ldr	r0, [pc, #20]	; (8002c00 <HAL_TIM_IC_MspInit+0x84>)
 8002bec:	f001 ff3c 	bl	8004a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bf0:	bf00      	nop
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40010000 	.word	0x40010000
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020000 	.word	0x40020000

08002c04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c14:	d10c      	bne.n	8002c30 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c16:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c2e:	e010      	b.n	8002c52 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <HAL_TIM_PWM_MspInit+0x60>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10b      	bne.n	8002c52 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c3a:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a08      	ldr	r2, [pc, #32]	; (8002c60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002c40:	f043 0304 	orr.w	r3, r3, #4
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_TIM_PWM_MspInit+0x5c>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40000800 	.word	0x40000800

08002c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	; 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <HAL_TIM_MspPostInit+0xf0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d11d      	bne.n	8002cc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a33      	ldr	r2, [pc, #204]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM2_J1_P4_Pin;
 8002ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM2_J1_P4_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4828      	ldr	r0, [pc, #160]	; (8002d60 <HAL_TIM_MspPostInit+0xf8>)
 8002cc0:	f001 fed2 	bl	8004a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002cc4:	e043      	b.n	8002d4e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cce:	d11c      	bne.n	8002d0a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6313      	str	r3, [r2, #48]	; 0x30
 8002cdc:	4b1f      	ldr	r3, [pc, #124]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_J1_P1_Pin;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cec:	2302      	movs	r3, #2
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_J1_P1_GPIO_Port, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	4817      	ldr	r0, [pc, #92]	; (8002d60 <HAL_TIM_MspPostInit+0xf8>)
 8002d04:	f001 feb0 	bl	8004a68 <HAL_GPIO_Init>
}
 8002d08:	e021      	b.n	8002d4e <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_TIM_MspPostInit+0xfc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d11c      	bne.n	8002d4e <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d14:	4b11      	ldr	r3, [pc, #68]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d20:	4b0e      	ldr	r3, [pc, #56]	; (8002d5c <HAL_TIM_MspPostInit+0xf4>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	f003 0308 	and.w	r3, r3, #8
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8002d2c:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	4619      	mov	r1, r3
 8002d48:	4807      	ldr	r0, [pc, #28]	; (8002d68 <HAL_TIM_MspPostInit+0x100>)
 8002d4a:	f001 fe8d 	bl	8004a68 <HAL_GPIO_Init>
}
 8002d4e:	bf00      	nop
 8002d50:	3728      	adds	r7, #40	; 0x28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40010000 	.word	0x40010000
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40020c00 	.word	0x40020c00

08002d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08e      	sub	sp, #56	; 0x38
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4aa0      	ldr	r2, [pc, #640]	; (800300c <HAL_UART_MspInit+0x2a0>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d130      	bne.n	8002df0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d8e:	4ba0      	ldr	r3, [pc, #640]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a9f      	ldr	r2, [pc, #636]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b9d      	ldr	r3, [pc, #628]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da2:	623b      	str	r3, [r7, #32]
 8002da4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da6:	4b9a      	ldr	r3, [pc, #616]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a99      	ldr	r2, [pc, #612]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b97      	ldr	r3, [pc, #604]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = UART4_RX_J9_P3_Pin|UART4_TX_J9_P1_Pin;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002dce:	2308      	movs	r3, #8
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	488e      	ldr	r0, [pc, #568]	; (8003014 <HAL_UART_MspInit+0x2a8>)
 8002dda:	f001 fe45 	bl	8004a68 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	2034      	movs	r0, #52	; 0x34
 8002de4:	f001 f913 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002de8:	2034      	movs	r0, #52	; 0x34
 8002dea:	f001 f92c 	bl	8004046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dee:	e109      	b.n	8003004 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==UART5)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a88      	ldr	r2, [pc, #544]	; (8003018 <HAL_UART_MspInit+0x2ac>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d15f      	bne.n	8002eba <HAL_UART_MspInit+0x14e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002dfa:	4b85      	ldr	r3, [pc, #532]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a84      	ldr	r2, [pc, #528]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b82      	ldr	r3, [pc, #520]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e0e:	61bb      	str	r3, [r7, #24]
 8002e10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e12:	4b7f      	ldr	r3, [pc, #508]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a7e      	ldr	r2, [pc, #504]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b7c      	ldr	r3, [pc, #496]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e44:	4619      	mov	r1, r3
 8002e46:	4875      	ldr	r0, [pc, #468]	; (800301c <HAL_UART_MspInit+0x2b0>)
 8002e48:	f001 fe0e 	bl	8004a68 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002e4c:	4b74      	ldr	r3, [pc, #464]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e4e:	4a75      	ldr	r2, [pc, #468]	; (8003024 <HAL_UART_MspInit+0x2b8>)
 8002e50:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002e52:	4b73      	ldr	r3, [pc, #460]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e58:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e5a:	4b71      	ldr	r3, [pc, #452]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e66:	4b6e      	ldr	r3, [pc, #440]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e6e:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e74:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002e7a:	4b69      	ldr	r3, [pc, #420]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e80:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e86:	4b66      	ldr	r3, [pc, #408]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002e8c:	4864      	ldr	r0, [pc, #400]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002e8e:	f001 f8f5 	bl	800407c <HAL_DMA_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8002e98:	f7ff fc60 	bl	800275c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a60      	ldr	r2, [pc, #384]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002ea0:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ea2:	4a5f      	ldr	r2, [pc, #380]	; (8003020 <HAL_UART_MspInit+0x2b4>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2100      	movs	r1, #0
 8002eac:	2035      	movs	r0, #53	; 0x35
 8002eae:	f001 f8ae 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002eb2:	2035      	movs	r0, #53	; 0x35
 8002eb4:	f001 f8c7 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8002eb8:	e0a4      	b.n	8003004 <HAL_UART_MspInit+0x298>
  else if(huart->Instance==USART2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5a      	ldr	r2, [pc, #360]	; (8003028 <HAL_UART_MspInit+0x2bc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f040 809f 	bne.w	8003004 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ec6:	4b52      	ldr	r3, [pc, #328]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	4a51      	ldr	r2, [pc, #324]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed2:	4b4f      	ldr	r3, [pc, #316]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a4b      	ldr	r2, [pc, #300]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b49      	ldr	r3, [pc, #292]	; (8003010 <HAL_UART_MspInit+0x2a4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2302      	movs	r3, #2
 8002efc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f02:	2303      	movs	r3, #3
 8002f04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f06:	2307      	movs	r3, #7
 8002f08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4846      	ldr	r0, [pc, #280]	; (800302c <HAL_UART_MspInit+0x2c0>)
 8002f12:	f001 fda9 	bl	8004a68 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002f16:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f18:	4a46      	ldr	r2, [pc, #280]	; (8003034 <HAL_UART_MspInit+0x2c8>)
 8002f1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002f1c:	4b44      	ldr	r3, [pc, #272]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f22:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f24:	4b42      	ldr	r3, [pc, #264]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2a:	4b41      	ldr	r3, [pc, #260]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f36:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f38:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f3e:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f44:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f4a:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f50:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f52:	2204      	movs	r2, #4
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f56:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f58:	2203      	movs	r2, #3
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f5c:	4b34      	ldr	r3, [pc, #208]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f62:	4b33      	ldr	r3, [pc, #204]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f68:	4831      	ldr	r0, [pc, #196]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f6a:	f001 f887 	bl	800407c <HAL_DMA_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8002f74:	f7ff fbf2 	bl	800275c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a2d      	ldr	r2, [pc, #180]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f7c:	66da      	str	r2, [r3, #108]	; 0x6c
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <HAL_UART_MspInit+0x2c4>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002f84:	4b2c      	ldr	r3, [pc, #176]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002f86:	4a2d      	ldr	r2, [pc, #180]	; (800303c <HAL_UART_MspInit+0x2d0>)
 8002f88:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002f8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f90:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f92:	4b29      	ldr	r3, [pc, #164]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002f94:	2240      	movs	r2, #64	; 0x40
 8002f96:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f98:	4b27      	ldr	r3, [pc, #156]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f9e:	4b26      	ldr	r3, [pc, #152]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fac:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002fb2:	4b21      	ldr	r3, [pc, #132]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002fb8:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002fbe:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fc2:	2204      	movs	r2, #4
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002fd8:	4817      	ldr	r0, [pc, #92]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fda:	f001 f84f 	bl	800407c <HAL_DMA_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_MspInit+0x27c>
      Error_Handler();
 8002fe4:	f7ff fbba 	bl	800275c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002fec:	669a      	str	r2, [r3, #104]	; 0x68
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <HAL_UART_MspInit+0x2cc>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2026      	movs	r0, #38	; 0x26
 8002ffa:	f001 f808 	bl	800400e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ffe:	2026      	movs	r0, #38	; 0x26
 8003000:	f001 f821 	bl	8004046 <HAL_NVIC_EnableIRQ>
}
 8003004:	bf00      	nop
 8003006:	3738      	adds	r7, #56	; 0x38
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40004c00 	.word	0x40004c00
 8003010:	40023800 	.word	0x40023800
 8003014:	40020c00 	.word	0x40020c00
 8003018:	40005000 	.word	0x40005000
 800301c:	40020400 	.word	0x40020400
 8003020:	20004228 	.word	0x20004228
 8003024:	40026010 	.word	0x40026010
 8003028:	40004400 	.word	0x40004400
 800302c:	40020000 	.word	0x40020000
 8003030:	20003d50 	.word	0x20003d50
 8003034:	40026088 	.word	0x40026088
 8003038:	20003fa8 	.word	0x20003fa8
 800303c:	400260a0 	.word	0x400260a0

08003040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003044:	f004 fa74 	bl	8007530 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}

0800304c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003050:	e7fe      	b.n	8003050 <HardFault_Handler+0x4>

08003052 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003056:	e7fe      	b.n	8003056 <MemManage_Handler+0x4>

08003058 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305c:	e7fe      	b.n	800305c <BusFault_Handler+0x4>

0800305e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003062:	e7fe      	b.n	8003062 <UsageFault_Handler+0x4>

08003064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003092:	f000 f9e1 	bl	8003458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}

0800309a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800309e:	f001 fb85 	bl	80047ac <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <DMA1_Stream0_IRQHandler+0x10>)
 80030ae:	f001 f915 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20004228 	.word	0x20004228

080030bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80030c0:	4802      	ldr	r0, [pc, #8]	; (80030cc <DMA1_Stream5_IRQHandler+0x10>)
 80030c2:	f001 f90b 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20003d50 	.word	0x20003d50

080030d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <DMA1_Stream6_IRQHandler+0x10>)
 80030d6:	f001 f901 	bl	80042dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20003fa8 	.word	0x20003fa8

080030e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <ADC_IRQHandler+0x10>)
 80030ea:	f000 fafb 	bl	80036e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20003f60 	.word	0x20003f60

080030f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <I2C1_EV_IRQHandler+0x10>)
 80030fe:	f002 f8f1 	bl	80052e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20003df0 	.word	0x20003df0

0800310c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <USART2_IRQHandler+0x10>)
 8003112:	f007 f901 	bl	800a318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200041a8 	.word	0x200041a8

08003120 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003124:	4802      	ldr	r0, [pc, #8]	; (8003130 <UART4_IRQHandler+0x10>)
 8003126:	f007 f8f7 	bl	800a318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20004084 	.word	0x20004084

08003134 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <UART5_IRQHandler+0x10>)
 800313a:	f007 f8ed 	bl	800a318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20003ed8 	.word	0x20003ed8

08003148 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800314c:	4802      	ldr	r0, [pc, #8]	; (8003158 <QUADSPI_IRQHandler+0x10>)
 800314e:	f002 ff53 	bl	8005ff8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	200042a0 	.word	0x200042a0

0800315c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <_sbrk+0x50>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <_sbrk+0x16>
		heap_end = &end;
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <_sbrk+0x50>)
 800316e:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <_sbrk+0x54>)
 8003170:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <_sbrk+0x50>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <_sbrk+0x50>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	466a      	mov	r2, sp
 8003182:	4293      	cmp	r3, r2
 8003184:	d907      	bls.n	8003196 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003186:	f008 fae1 	bl	800b74c <__errno>
 800318a:	4602      	mov	r2, r0
 800318c:	230c      	movs	r3, #12
 800318e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	e006      	b.n	80031a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003196:	4b05      	ldr	r3, [pc, #20]	; (80031ac <_sbrk+0x50>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	4a03      	ldr	r2, [pc, #12]	; (80031ac <_sbrk+0x50>)
 80031a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000c80 	.word	0x20000c80
 80031b0:	20004320 	.word	0x20004320

080031b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <SystemInit+0x28>)
 80031ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031be:	4a07      	ldr	r2, [pc, #28]	; (80031dc <SystemInit+0x28>)
 80031c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <SystemInit+0x28>)
 80031ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031ce:	609a      	str	r2, [r3, #8]
#endif
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = 0; //STA_NOINIT;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <USER_initialize+0x24>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
//	{       Stat &= ~STA_NOINIT;
//	}
//	else
//	{      // printf("DISK IO INIT ERROR \n");
//	}
    return Stat;
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <USER_initialize+0x24>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000010 	.word	0x20000010

08003208 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
//      {
//        return HAL_ERROR;
//      }
//  }

  Stat = STA_NOINIT;
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <USER_status+0x34>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
  Stat &= ~STA_NOINIT;
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <USER_status+0x34>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	b2da      	uxtb	r2, r3
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <USER_status+0x34>)
 8003226:	701a      	strb	r2, [r3, #0]
  	return Stat;
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <USER_status+0x34>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800322e:	4618      	mov	r0, r3
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000010 	.word	0x20000010

08003240 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4603      	mov	r3, r0
 800324e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    	uint32_t SecAdd = sector * SECTOR_SIZE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	031b      	lsls	r3, r3, #12
 8003254:	617b      	str	r3, [r7, #20]
	uint32_t Size = count * SECTOR_SIZE;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	031b      	lsls	r3, r3, #12
 800325a:	613b      	str	r3, [r7, #16]
//uint8_t QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)        
	if(QSPI_Read((uint8_t*)buff, (uint32_t)SecAdd, (uint32_t) Size ) ==  HAL_OK)
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	68b8      	ldr	r0, [r7, #8]
 8003262:	f7fd fad7 	bl	8000814 <QSPI_Read>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <USER_read+0x30>
	{       return RES_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e000      	b.n	8003272 <USER_read+0x32>
	}
	else
	{       //printf("DISK Read Error \n");
		return RES_ERROR;
 8003270:	2301      	movs	r3, #1
	}
  /* USER CODE END READ */
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4603      	mov	r3, r0
 800328a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	DSector = sector;
 800328c:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <USER_write+0x7c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6013      	str	r3, [r2, #0]
	SecAdd = sector * SECTOR_SIZE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	031b      	lsls	r3, r3, #12
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <USER_write+0x80>)
 8003298:	6013      	str	r3, [r2, #0]
	Size = count * SECTOR_SIZE;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	031b      	lsls	r3, r3, #12
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <USER_write+0x84>)
 80032a0:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i< count; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	82fb      	strh	r3, [r7, #22]
 80032a6:	e010      	b.n	80032ca <USER_write+0x4e>
	{       if(QSPI_Erase_Sector4K(SecAdd + (i * SECTOR_SIZE)) != HAL_OK)
 80032a8:	8afb      	ldrh	r3, [r7, #22]
 80032aa:	031b      	lsls	r3, r3, #12
 80032ac:	461a      	mov	r2, r3
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <USER_write+0x80>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4413      	add	r3, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f9db 	bl	8000670 <QSPI_Erase_Sector4K>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <USER_write+0x48>
		{	// printf("DISK IO ERASE FAIL \n");
			return RES_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e014      	b.n	80032ee <USER_write+0x72>
	for(uint16_t i = 0; i< count; i++)
 80032c4:	8afb      	ldrh	r3, [r7, #22]
 80032c6:	3301      	adds	r3, #1
 80032c8:	82fb      	strh	r3, [r7, #22]
 80032ca:	8afb      	ldrh	r3, [r7, #22]
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d8ea      	bhi.n	80032a8 <USER_write+0x2c>
		}
	}
     
	if(QSPI_Write((uint8_t *)buff, SecAdd, Size) != HAL_OK)
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <USER_write+0x80>)
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <USER_write+0x84>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68b8      	ldr	r0, [r7, #8]
 80032de:	f7fd fa09 	bl	80006f4 <QSPI_Write>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <USER_write+0x70>
	{       // printf("DISK IO WRITE FAIL \n");
		return RES_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <USER_write+0x72>
	}
  /* USER CODE HERE */
    return RES_OK;
 80032ec:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	200042f4 	.word	0x200042f4
 80032fc:	200042ec 	.word	0x200042ec
 8003300:	200042f0 	.word	0x200042f0

08003304 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	603a      	str	r2, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
 8003310:	460b      	mov	r3, r1
 8003312:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <USER_ioctl+0x84>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <USER_ioctl+0x26>
 8003326:	2303      	movs	r3, #3
 8003328:	e027      	b.n	800337a <USER_ioctl+0x76>
  
  switch (cmd)
 800332a:	79bb      	ldrb	r3, [r7, #6]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d821      	bhi.n	8003374 <USER_ioctl+0x70>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <USER_ioctl+0x34>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003349 	.word	0x08003349
 800333c:	0800334f 	.word	0x0800334f
 8003340:	0800335d 	.word	0x0800335d
 8003344:	0800336b 	.word	0x0800336b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]
    break;
 800334c:	e014      	b.n	8003378 <USER_ioctl+0x74>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = 4096; //SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003354:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
    break;
 800335a:	e00d      	b.n	8003378 <USER_ioctl+0x74>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = SECTOR_SIZE;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003362:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
    break;
 8003368:	e006      	b.n	8003378 <USER_ioctl+0x74>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = SECTOR_SIZE;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003370:	601a      	str	r2, [r3, #0]
    break;
 8003372:	e001      	b.n	8003378 <USER_ioctl+0x74>
  
  default:
    res = RES_PARERR;
 8003374:	2304      	movs	r3, #4
 8003376:	73fb      	strb	r3, [r7, #15]
  }
	return res;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000010 	.word	0x20000010

0800338c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800338c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003390:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003392:	e003      	b.n	800339c <LoopCopyDataInit>

08003394 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003396:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003398:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800339a:	3104      	adds	r1, #4

0800339c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800339c:	480b      	ldr	r0, [pc, #44]	; (80033cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033a4:	d3f6      	bcc.n	8003394 <CopyDataInit>
  ldr  r2, =_sbss
 80033a6:	4a0b      	ldr	r2, [pc, #44]	; (80033d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033a8:	e002      	b.n	80033b0 <LoopFillZerobss>

080033aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033ac:	f842 3b04 	str.w	r3, [r2], #4

080033b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033b4:	d3f9      	bcc.n	80033aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033b6:	f7ff fefd 	bl	80031b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ba:	f008 f9cd 	bl	800b758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033be:	f7fe fb1b 	bl	80019f8 <main>
  bx  lr    
 80033c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033c4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80033c8:	0800f3c0 	.word	0x0800f3c0
  ldr  r0, =_sdata
 80033cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80033d0:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 80033d4:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 80033d8:	2000431c 	.word	0x2000431c

080033dc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033dc:	e7fe      	b.n	80033dc <CAN1_RX0_IRQHandler>

080033de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e2:	2003      	movs	r0, #3
 80033e4:	f000 fe08 	bl	8003ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033e8:	2000      	movs	r0, #0
 80033ea:	f000 f805 	bl	80033f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80033ee:	f7ff f9bd 	bl	800276c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_InitTick+0x54>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	4b12      	ldr	r3, [pc, #72]	; (8003450 <HAL_InitTick+0x58>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	4619      	mov	r1, r3
 800340a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800340e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fe23 	bl	8004062 <HAL_SYSTICK_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e00e      	b.n	8003444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b0f      	cmp	r3, #15
 800342a:	d80a      	bhi.n	8003442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800342c:	2200      	movs	r2, #0
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	f000 fdeb 	bl	800400e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003438:	4a06      	ldr	r2, [pc, #24]	; (8003454 <HAL_InitTick+0x5c>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	2000000c 	.word	0x2000000c
 8003450:	2000002c 	.word	0x2000002c
 8003454:	20000028 	.word	0x20000028

08003458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_IncTick+0x20>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <HAL_IncTick+0x24>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4413      	add	r3, r2
 8003468:	4a04      	ldr	r2, [pc, #16]	; (800347c <HAL_IncTick+0x24>)
 800346a:	6013      	str	r3, [r2, #0]
}
 800346c:	bf00      	nop
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000002c 	.word	0x2000002c
 800347c:	200042f8 	.word	0x200042f8

08003480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  return uwTick;
 8003484:	4b03      	ldr	r3, [pc, #12]	; (8003494 <HAL_GetTick+0x14>)
 8003486:	681b      	ldr	r3, [r3, #0]
}
 8003488:	4618      	mov	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	200042f8 	.word	0x200042f8

08003498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a0:	f7ff ffee 	bl	8003480 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d005      	beq.n	80034be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_Delay+0x40>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4413      	add	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034be:	bf00      	nop
 80034c0:	f7ff ffde 	bl	8003480 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d8f7      	bhi.n	80034c0 <HAL_Delay+0x28>
  {
  }
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2000002c 	.word	0x2000002c

080034dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e031      	b.n	8003556 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff f960 	bl	80027c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f003 0310 	and.w	r3, r3, #16
 8003516:	2b00      	cmp	r3, #0
 8003518:	d116      	bne.n	8003548 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351e:	4b10      	ldr	r3, [pc, #64]	; (8003560 <HAL_ADC_Init+0x84>)
 8003520:	4013      	ands	r3, r2
 8003522:	f043 0202 	orr.w	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fb90 	bl	8003c50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	f043 0201 	orr.w	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
 8003546:	e001      	b.n	800354c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	ffffeefd 	.word	0xffffeefd

08003564 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_ADC_Start+0x1a>
 800357a:	2302      	movs	r3, #2
 800357c:	e0a0      	b.n	80036c0 <HAL_ADC_Start+0x15c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d018      	beq.n	80035c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80035a4:	4b49      	ldr	r3, [pc, #292]	; (80036cc <HAL_ADC_Start+0x168>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a49      	ldr	r2, [pc, #292]	; (80036d0 <HAL_ADC_Start+0x16c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	0c9a      	lsrs	r2, r3, #18
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80035b8:	e002      	b.n	80035c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3b01      	subs	r3, #1
 80035be:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f9      	bne.n	80035ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d174      	bne.n	80036be <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d8:	4b3e      	ldr	r3, [pc, #248]	; (80036d4 <HAL_ADC_Start+0x170>)
 80035da:	4013      	ands	r3, r2
 80035dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d106      	bne.n	800361e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f023 0206 	bic.w	r2, r3, #6
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
 800361c:	e002      	b.n	8003624 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003634:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003636:	4b28      	ldr	r3, [pc, #160]	; (80036d8 <HAL_ADC_Start+0x174>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d136      	bne.n	80036be <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	e02d      	b.n	80036be <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <HAL_ADC_Start+0x178>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10e      	bne.n	800368a <HAL_ADC_Start+0x126>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003688:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <HAL_ADC_Start+0x174>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	d113      	bne.n	80036be <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a11      	ldr	r2, [pc, #68]	; (80036e0 <HAL_ADC_Start+0x17c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10e      	bne.n	80036be <HAL_ADC_Start+0x15a>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d107      	bne.n	80036be <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	431bde83 	.word	0x431bde83
 80036d4:	fffff8fe 	.word	0xfffff8fe
 80036d8:	40012300 	.word	0x40012300
 80036dc:	40012000 	.word	0x40012000
 80036e0:	40012200 	.word	0x40012200

080036e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0320 	and.w	r3, r3, #32
 8003714:	2b20      	cmp	r3, #32
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d049      	beq.n	80037ba <HAL_ADC_IRQHandler+0xd6>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d046      	beq.n	80037ba <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d12b      	bne.n	80037aa <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003756:	2b00      	cmp	r3, #0
 8003758:	d127      	bne.n	80037aa <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003772:	2b00      	cmp	r3, #0
 8003774:	d119      	bne.n	80037aa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0220 	bic.w	r2, r2, #32
 8003784:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8e8 	bl	8003980 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f06f 0212 	mvn.w	r2, #18
 80037b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b80      	cmp	r3, #128	; 0x80
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d057      	beq.n	800389c <HAL_ADC_IRQHandler+0x1b8>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d054      	beq.n	800389c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d105      	bne.n	800380a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d139      	bne.n	800388c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003822:	2b00      	cmp	r3, #0
 8003824:	d006      	beq.n	8003834 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003830:	2b00      	cmp	r3, #0
 8003832:	d12b      	bne.n	800388c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800383e:	2b00      	cmp	r3, #0
 8003840:	d124      	bne.n	800388c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11d      	bne.n	800388c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003854:	2b00      	cmp	r3, #0
 8003856:	d119      	bne.n	800388c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003866:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d105      	bne.n	800388c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	f043 0201 	orr.w	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fad9 	bl	8003e44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f06f 020c 	mvn.w	r2, #12
 800389a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d017      	beq.n	80038fe <HAL_ADC_IRQHandler+0x21a>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d014      	beq.n	80038fe <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10d      	bne.n	80038fe <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f850 	bl	8003994 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0201 	mvn.w	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b20      	cmp	r3, #32
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
 8003912:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800391e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d015      	beq.n	800395e <HAL_ADC_IRQHandler+0x27a>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d012      	beq.n	800395e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f043 0202 	orr.w	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0220 	mvn.w	r2, #32
 800394c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f82a 	bl	80039a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0220 	mvn.w	r2, #32
 800395c:	601a      	str	r2, [r3, #0]
  }
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_ADC_ConfigChannel+0x1c>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e12a      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x272>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b09      	cmp	r3, #9
 80039e6:	d93a      	bls.n	8003a5e <HAL_ADC_ConfigChannel+0xa2>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039f0:	d035      	beq.n	8003a5e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68d9      	ldr	r1, [r3, #12]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	4613      	mov	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	3b1e      	subs	r3, #30
 8003a08:	2207      	movs	r2, #7
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	400a      	ands	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a87      	ldr	r2, [pc, #540]	; (8003c3c <HAL_ADC_ConfigChannel+0x280>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10a      	bne.n	8003a38 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68d9      	ldr	r1, [r3, #12]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	061a      	lsls	r2, r3, #24
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a36:	e035      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68d9      	ldr	r1, [r3, #12]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4403      	add	r3, r0
 8003a50:	3b1e      	subs	r3, #30
 8003a52:	409a      	lsls	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a5c:	e022      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6919      	ldr	r1, [r3, #16]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	2207      	movs	r2, #7
 8003a74:	fa02 f303 	lsl.w	r3, r2, r3
 8003a78:	43da      	mvns	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	400a      	ands	r2, r1
 8003a80:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6919      	ldr	r1, [r3, #16]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	4618      	mov	r0, r3
 8003a94:	4603      	mov	r3, r0
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4403      	add	r3, r0
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b06      	cmp	r3, #6
 8003aaa:	d824      	bhi.n	8003af6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	3b05      	subs	r3, #5
 8003abe:	221f      	movs	r2, #31
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	400a      	ands	r2, r1
 8003acc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	4618      	mov	r0, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3b05      	subs	r3, #5
 8003ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	635a      	str	r2, [r3, #52]	; 0x34
 8003af4:	e04c      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d824      	bhi.n	8003b48 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3b23      	subs	r3, #35	; 0x23
 8003b10:	221f      	movs	r2, #31
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43da      	mvns	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	3b23      	subs	r3, #35	; 0x23
 8003b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	631a      	str	r2, [r3, #48]	; 0x30
 8003b46:	e023      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	3b41      	subs	r3, #65	; 0x41
 8003b5a:	221f      	movs	r2, #31
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43da      	mvns	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	400a      	ands	r2, r1
 8003b68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	3b41      	subs	r3, #65	; 0x41
 8003b84:	fa00 f203 	lsl.w	r2, r0, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2a      	ldr	r2, [pc, #168]	; (8003c40 <HAL_ADC_ConfigChannel+0x284>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d10a      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1f4>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba2:	d105      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ba4:	4b27      	ldr	r3, [pc, #156]	; (8003c44 <HAL_ADC_ConfigChannel+0x288>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a26      	ldr	r2, [pc, #152]	; (8003c44 <HAL_ADC_ConfigChannel+0x288>)
 8003baa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003bae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a22      	ldr	r2, [pc, #136]	; (8003c40 <HAL_ADC_ConfigChannel+0x284>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d109      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x212>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b12      	cmp	r3, #18
 8003bc0:	d105      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <HAL_ADC_ConfigChannel+0x288>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4a1f      	ldr	r2, [pc, #124]	; (8003c44 <HAL_ADC_ConfigChannel+0x288>)
 8003bc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bcc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1b      	ldr	r2, [pc, #108]	; (8003c40 <HAL_ADC_ConfigChannel+0x284>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d125      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x268>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_ADC_ConfigChannel+0x280>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d003      	beq.n	8003bea <HAL_ADC_ConfigChannel+0x22e>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b11      	cmp	r3, #17
 8003be8:	d11c      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <HAL_ADC_ConfigChannel+0x288>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <HAL_ADC_ConfigChannel+0x288>)
 8003bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bf4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_ADC_ConfigChannel+0x280>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d111      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_ADC_ConfigChannel+0x28c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a11      	ldr	r2, [pc, #68]	; (8003c4c <HAL_ADC_ConfigChannel+0x290>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	0c9a      	lsrs	r2, r3, #18
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c16:	e002      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f9      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	10000012 	.word	0x10000012
 8003c40:	40012000 	.word	0x40012000
 8003c44:	40012300 	.word	0x40012300
 8003c48:	2000000c 	.word	0x2000000c
 8003c4c:	431bde83 	.word	0x431bde83

08003c50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003c58:	4b78      	ldr	r3, [pc, #480]	; (8003e3c <ADC_Init+0x1ec>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4a77      	ldr	r2, [pc, #476]	; (8003e3c <ADC_Init+0x1ec>)
 8003c5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003c62:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003c64:	4b75      	ldr	r3, [pc, #468]	; (8003e3c <ADC_Init+0x1ec>)
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4973      	ldr	r1, [pc, #460]	; (8003e3c <ADC_Init+0x1ec>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6859      	ldr	r1, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	021a      	lsls	r2, r3, #8
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ca4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6899      	ldr	r1, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	4a58      	ldr	r2, [pc, #352]	; (8003e40 <ADC_Init+0x1f0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d022      	beq.n	8003d2a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cf2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6899      	ldr	r1, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6899      	ldr	r1, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	e00f      	b.n	8003d4a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0202 	bic.w	r2, r2, #2
 8003d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6899      	ldr	r1, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	005a      	lsls	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01b      	beq.n	8003db0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	3b01      	subs	r3, #1
 8003da4:	035a      	lsls	r2, r3, #13
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	e007      	b.n	8003dc0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	051a      	lsls	r2, r3, #20
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6899      	ldr	r1, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e02:	025a      	lsls	r2, r3, #9
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	029a      	lsls	r2, r3, #10
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40012300 	.word	0x40012300
 8003e40:	0f000001 	.word	0x0f000001

08003e44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <__NVIC_SetPriorityGrouping+0x40>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e74:	4013      	ands	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <__NVIC_SetPriorityGrouping+0x44>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e86:	4a04      	ldr	r2, [pc, #16]	; (8003e98 <__NVIC_SetPriorityGrouping+0x40>)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	60d3      	str	r3, [r2, #12]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000ed00 	.word	0xe000ed00
 8003e9c:	05fa0000 	.word	0x05fa0000

08003ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ea4:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	0a1b      	lsrs	r3, r3, #8
 8003eaa:	f003 0307 	and.w	r3, r3, #7
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	db0b      	blt.n	8003ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	4907      	ldr	r1, [pc, #28]	; (8003ef4 <__NVIC_EnableIRQ+0x38>)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	2001      	movs	r0, #1
 8003ede:	fa00 f202 	lsl.w	r2, r0, r2
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	e000e100 	.word	0xe000e100

08003ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	6039      	str	r1, [r7, #0]
 8003f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	db0a      	blt.n	8003f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	490c      	ldr	r1, [pc, #48]	; (8003f44 <__NVIC_SetPriority+0x4c>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	0112      	lsls	r2, r2, #4
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f20:	e00a      	b.n	8003f38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4908      	ldr	r1, [pc, #32]	; (8003f48 <__NVIC_SetPriority+0x50>)
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	3b04      	subs	r3, #4
 8003f30:	0112      	lsls	r2, r2, #4
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	440b      	add	r3, r1
 8003f36:	761a      	strb	r2, [r3, #24]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000e100 	.word	0xe000e100
 8003f48:	e000ed00 	.word	0xe000ed00

08003f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f1c3 0307 	rsb	r3, r3, #7
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	bf28      	it	cs
 8003f6a:	2304      	movcs	r3, #4
 8003f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3304      	adds	r3, #4
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d902      	bls.n	8003f7c <NVIC_EncodePriority+0x30>
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3b03      	subs	r3, #3
 8003f7a:	e000      	b.n	8003f7e <NVIC_EncodePriority+0x32>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f80:	f04f 32ff 	mov.w	r2, #4294967295
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	401a      	ands	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f94:	f04f 31ff 	mov.w	r1, #4294967295
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9e:	43d9      	mvns	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	4313      	orrs	r3, r2
         );
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3724      	adds	r7, #36	; 0x24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc4:	d301      	bcc.n	8003fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00f      	b.n	8003fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fca:	4a0a      	ldr	r2, [pc, #40]	; (8003ff4 <SysTick_Config+0x40>)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fd2:	210f      	movs	r1, #15
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	f7ff ff8e 	bl	8003ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <SysTick_Config+0x40>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fe2:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <SysTick_Config+0x40>)
 8003fe4:	2207      	movs	r2, #7
 8003fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	e000e010 	.word	0xe000e010

08003ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff29 	bl	8003e58 <__NVIC_SetPriorityGrouping>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800400e:	b580      	push	{r7, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	4603      	mov	r3, r0
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004020:	f7ff ff3e 	bl	8003ea0 <__NVIC_GetPriorityGrouping>
 8004024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68b9      	ldr	r1, [r7, #8]
 800402a:	6978      	ldr	r0, [r7, #20]
 800402c:	f7ff ff8e 	bl	8003f4c <NVIC_EncodePriority>
 8004030:	4602      	mov	r2, r0
 8004032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff5d 	bl	8003ef8 <__NVIC_SetPriority>
}
 800403e:	bf00      	nop
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff ff31 	bl	8003ebc <__NVIC_EnableIRQ>
}
 800405a:	bf00      	nop
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b082      	sub	sp, #8
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ffa2 	bl	8003fb4 <SysTick_Config>
 8004070:	4603      	mov	r3, r0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004088:	f7ff f9fa 	bl	8003480 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e099      	b.n	80041cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0201 	bic.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040b8:	e00f      	b.n	80040da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ba:	f7ff f9e1 	bl	8003480 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d908      	bls.n	80040da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2220      	movs	r2, #32
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2203      	movs	r2, #3
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e078      	b.n	80041cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e8      	bne.n	80040ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_DMA_Init+0x158>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004106:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	2b04      	cmp	r3, #4
 8004132:	d107      	bne.n	8004144 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	4313      	orrs	r3, r2
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	2b04      	cmp	r3, #4
 800416c:	d117      	bne.n	800419e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00e      	beq.n	800419e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fa99 	bl	80046b8 <DMA_CheckFifoParam>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2240      	movs	r2, #64	; 0x40
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800419a:	2301      	movs	r3, #1
 800419c:	e016      	b.n	80041cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa50 	bl	800464c <DMA_CalcBaseAndBitshift>
 80041ac:	4603      	mov	r3, r0
 80041ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	223f      	movs	r2, #63	; 0x3f
 80041b6:	409a      	lsls	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	e010803f 	.word	0xe010803f

080041d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d101      	bne.n	80041fe <HAL_DMA_Start_IT+0x26>
 80041fa:	2302      	movs	r3, #2
 80041fc:	e048      	b.n	8004290 <HAL_DMA_Start_IT+0xb8>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b01      	cmp	r3, #1
 8004210:	d137      	bne.n	8004282 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2202      	movs	r2, #2
 8004216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f9e2 	bl	80045f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	223f      	movs	r2, #63	; 0x3f
 8004232:	409a      	lsls	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0216 	orr.w	r2, r2, #22
 8004246:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004256:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0208 	orr.w	r2, r2, #8
 800426e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e005      	b.n	800428e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800428a:	2302      	movs	r3, #2
 800428c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d004      	beq.n	80042b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00c      	b.n	80042d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2205      	movs	r2, #5
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80042e8:	4b92      	ldr	r3, [pc, #584]	; (8004534 <HAL_DMA_IRQHandler+0x258>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a92      	ldr	r2, [pc, #584]	; (8004538 <HAL_DMA_IRQHandler+0x25c>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0a9b      	lsrs	r3, r3, #10
 80042f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004306:	2208      	movs	r2, #8
 8004308:	409a      	lsls	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01a      	beq.n	8004348 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0204 	bic.w	r2, r2, #4
 800432e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	2208      	movs	r2, #8
 8004336:	409a      	lsls	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f043 0201 	orr.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	2201      	movs	r2, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	2201      	movs	r2, #1
 800436c:	409a      	lsls	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f043 0202 	orr.w	r2, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	2204      	movs	r2, #4
 8004384:	409a      	lsls	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00b      	beq.n	80043b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	2204      	movs	r2, #4
 80043a2:	409a      	lsls	r2, r3
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ac:	f043 0204 	orr.w	r2, r3, #4
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b8:	2210      	movs	r2, #16
 80043ba:	409a      	lsls	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d043      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0308 	and.w	r3, r3, #8
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d03c      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	2210      	movs	r2, #16
 80043d8:	409a      	lsls	r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d018      	beq.n	800441e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d024      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	e01f      	b.n	800444c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01b      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e016      	b.n	800444c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d107      	bne.n	800443c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0208 	bic.w	r2, r2, #8
 800443a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	2220      	movs	r2, #32
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 808e 	beq.w	800457a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8086 	beq.w	800457a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004472:	2220      	movs	r2, #32
 8004474:	409a      	lsls	r2, r3
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b05      	cmp	r3, #5
 8004484:	d136      	bne.n	80044f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0216 	bic.w	r2, r2, #22
 8004494:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d103      	bne.n	80044b6 <HAL_DMA_IRQHandler+0x1da>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0208 	bic.w	r2, r2, #8
 80044c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ca:	223f      	movs	r2, #63	; 0x3f
 80044cc:	409a      	lsls	r2, r3
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d07d      	beq.n	80045e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
        }
        return;
 80044f2:	e078      	b.n	80045e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d01c      	beq.n	800453c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d108      	bne.n	8004522 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004514:	2b00      	cmp	r3, #0
 8004516:	d030      	beq.n	800457a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
 8004520:	e02b      	b.n	800457a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	2b00      	cmp	r3, #0
 8004528:	d027      	beq.n	800457a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	4798      	blx	r3
 8004532:	e022      	b.n	800457a <HAL_DMA_IRQHandler+0x29e>
 8004534:	2000000c 	.word	0x2000000c
 8004538:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10f      	bne.n	800456a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0210 	bic.w	r2, r2, #16
 8004558:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457e:	2b00      	cmp	r3, #0
 8004580:	d032      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d022      	beq.n	80045d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2205      	movs	r2, #5
 8004592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0201 	bic.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3301      	adds	r3, #1
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d307      	bcc.n	80045c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f2      	bne.n	80045a6 <HAL_DMA_IRQHandler+0x2ca>
 80045c0:	e000      	b.n	80045c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	4798      	blx	r3
 80045e4:	e000      	b.n	80045e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80045e6:	bf00      	nop
    }
  }
}
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop

080045f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800460c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b40      	cmp	r3, #64	; 0x40
 800461c:	d108      	bne.n	8004630 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800462e:	e007      	b.n	8004640 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	60da      	str	r2, [r3, #12]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	3b10      	subs	r3, #16
 800465c:	4a13      	ldr	r2, [pc, #76]	; (80046ac <DMA_CalcBaseAndBitshift+0x60>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	091b      	lsrs	r3, r3, #4
 8004664:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004666:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <DMA_CalcBaseAndBitshift+0x64>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d908      	bls.n	800468c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004682:	4013      	ands	r3, r2
 8004684:	1d1a      	adds	r2, r3, #4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	659a      	str	r2, [r3, #88]	; 0x58
 800468a:	e006      	b.n	800469a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	aaaaaaab 	.word	0xaaaaaaab
 80046b0:	0800f0f0 	.word	0x0800f0f0
 80046b4:	fffffc00 	.word	0xfffffc00

080046b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b085      	sub	sp, #20
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11f      	bne.n	8004712 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d855      	bhi.n	8004784 <DMA_CheckFifoParam+0xcc>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <DMA_CheckFifoParam+0x28>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	080046f1 	.word	0x080046f1
 80046e4:	08004703 	.word	0x08004703
 80046e8:	080046f1 	.word	0x080046f1
 80046ec:	08004785 	.word	0x08004785
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d045      	beq.n	8004788 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004700:	e042      	b.n	8004788 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800470a:	d13f      	bne.n	800478c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004710:	e03c      	b.n	800478c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471a:	d121      	bne.n	8004760 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b03      	cmp	r3, #3
 8004720:	d836      	bhi.n	8004790 <DMA_CheckFifoParam+0xd8>
 8004722:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <DMA_CheckFifoParam+0x70>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	08004739 	.word	0x08004739
 800472c:	0800473f 	.word	0x0800473f
 8004730:	08004739 	.word	0x08004739
 8004734:	08004751 	.word	0x08004751
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      break;
 800473c:	e02f      	b.n	800479e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d024      	beq.n	8004794 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800474e:	e021      	b.n	8004794 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004758:	d11e      	bne.n	8004798 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800475e:	e01b      	b.n	8004798 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d902      	bls.n	800476c <DMA_CheckFifoParam+0xb4>
 8004766:	2b03      	cmp	r3, #3
 8004768:	d003      	beq.n	8004772 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800476a:	e018      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e015      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
      break;
 8004782:	e00b      	b.n	800479c <DMA_CheckFifoParam+0xe4>
      break;
 8004784:	bf00      	nop
 8004786:	e00a      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      break;
 8004788:	bf00      	nop
 800478a:	e008      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      break;
 800478c:	bf00      	nop
 800478e:	e006      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      break;
 8004790:	bf00      	nop
 8004792:	e004      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      break;
 8004794:	bf00      	nop
 8004796:	e002      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      break;   
 8004798:	bf00      	nop
 800479a:	e000      	b.n	800479e <DMA_CheckFifoParam+0xe6>
      break;
 800479c:	bf00      	nop
    }
  } 
  
  return status; 
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 80047b6:	4b52      	ldr	r3, [pc, #328]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	4a51      	ldr	r2, [pc, #324]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 80047c2:	4b4f      	ldr	r3, [pc, #316]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	4a4e      	ldr	r2, [pc, #312]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047c8:	f023 0302 	bic.w	r3, r3, #2
 80047cc:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 80047ce:	4b4c      	ldr	r3, [pc, #304]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80047d8:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 80047da:	4b49      	ldr	r3, [pc, #292]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	4948      	ldr	r1, [pc, #288]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047e0:	4b48      	ldr	r3, [pc, #288]	; (8004904 <HAL_FLASH_IRQHandler+0x158>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80047e6:	4b46      	ldr	r3, [pc, #280]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d046      	beq.n	8004880 <HAL_FLASH_IRQHandler+0xd4>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80047f2:	4b43      	ldr	r3, [pc, #268]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 80047f8:	4b43      	ldr	r3, [pc, #268]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d02e      	beq.n	8004860 <HAL_FLASH_IRQHandler+0xb4>
 8004802:	2b03      	cmp	r3, #3
 8004804:	d033      	beq.n	800486e <HAL_FLASH_IRQHandler+0xc2>
 8004806:	2b01      	cmp	r3, #1
 8004808:	d000      	beq.n	800480c <HAL_FLASH_IRQHandler+0x60>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 800480a:	e03a      	b.n	8004882 <HAL_FLASH_IRQHandler+0xd6>
        pFlash.NbSectorsToErase--;
 800480c:	4b3e      	ldr	r3, [pc, #248]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	3b01      	subs	r3, #1
 8004812:	4a3d      	ldr	r2, [pc, #244]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 8004814:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8004816:	4b3c      	ldr	r3, [pc, #240]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d013      	beq.n	8004846 <HAL_FLASH_IRQHandler+0x9a>
          temp = pFlash.Sector;
 800481e:	4b3a      	ldr	r3, [pc, #232]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f871 	bl	800490c <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 800482a:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	4a35      	ldr	r2, [pc, #212]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 8004832:	60d3      	str	r3, [r2, #12]
 8004834:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8004836:	4b34      	ldr	r3, [pc, #208]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 8004838:	7a1b      	ldrb	r3, [r3, #8]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	4619      	mov	r1, r3
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f8c2 	bl	80049c8 <FLASH_Erase_Sector>
        break;
 8004844:	e01d      	b.n	8004882 <HAL_FLASH_IRQHandler+0xd6>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	607b      	str	r3, [r7, #4]
 800484c:	4a2e      	ldr	r2, [pc, #184]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f85a 	bl	800490c <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004858:	4b2b      	ldr	r3, [pc, #172]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
        break;
 800485e:	e010      	b.n	8004882 <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(0);
 8004860:	2000      	movs	r0, #0
 8004862:	f000 f853 	bl	800490c <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004866:	4b28      	ldr	r3, [pc, #160]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
        break;
 800486c:	e009      	b.n	8004882 <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800486e:	4b26      	ldr	r3, [pc, #152]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 f84a 	bl	800490c <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004878:	4b23      	ldr	r3, [pc, #140]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
        break;
 800487e:	e000      	b.n	8004882 <HAL_FLASH_IRQHandler+0xd6>
    }
  }
 8004880:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_FLASH_IRQHandler+0x124>
  {
    switch (pFlash.ProcedureOnGoing)
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d00c      	beq.n	80048b2 <HAL_FLASH_IRQHandler+0x106>
 8004898:	2b03      	cmp	r3, #3
 800489a:	d00d      	beq.n	80048b8 <HAL_FLASH_IRQHandler+0x10c>
 800489c:	2b01      	cmp	r3, #1
 800489e:	d000      	beq.n	80048a2 <HAL_FLASH_IRQHandler+0xf6>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 80048a0:	e00e      	b.n	80048c0 <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Sector;
 80048a2:	4b19      	ldr	r3, [pc, #100]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 80048a8:	4b17      	ldr	r3, [pc, #92]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 80048aa:	f04f 32ff 	mov.w	r2, #4294967295
 80048ae:	60da      	str	r2, [r3, #12]
        break;
 80048b0:	e006      	b.n	80048c0 <HAL_FLASH_IRQHandler+0x114>
        temp = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	607b      	str	r3, [r7, #4]
        break;
 80048b6:	e003      	b.n	80048c0 <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Address;
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	607b      	str	r3, [r7, #4]
        break;
 80048be:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80048c0:	f000 f838 	bl	8004934 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f82b 	bl	8004920 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80048d0:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10e      	bne.n	80048f8 <HAL_FLASH_IRQHandler+0x14c>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	4a08      	ldr	r2, [pc, #32]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80048e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048e4:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <HAL_FLASH_IRQHandler+0x154>)
 80048ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80048f0:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_FLASH_IRQHandler+0x15c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	751a      	strb	r2, [r3, #20]
  }
  
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023c00 	.word	0x40023c00
 8004904:	ffff7ffb 	.word	0xffff7ffb
 8004908:	200042fc 	.word	0x200042fc

0800490c <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004938:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <FLASH_SetErrorCode+0x8c>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004944:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f043 0320 	orr.w	r3, r3, #32
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 800494e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004950:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <FLASH_SetErrorCode+0x8c>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800495c:	4b19      	ldr	r3, [pc, #100]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f043 0310 	orr.w	r3, r3, #16
 8004964:	4a17      	ldr	r2, [pc, #92]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 8004966:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004968:	4b15      	ldr	r3, [pc, #84]	; (80049c0 <FLASH_SetErrorCode+0x8c>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004974:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f043 0308 	orr.w	r3, r3, #8
 800497c:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 800497e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <FLASH_SetErrorCode+0x8c>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	4a0b      	ldr	r2, [pc, #44]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 8004996:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <FLASH_SetErrorCode+0x8c>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80049a4:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <FLASH_SetErrorCode+0x90>)
 80049ae:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <FLASH_SetErrorCode+0x8c>)
 80049b2:	22f2      	movs	r2, #242	; 0xf2
 80049b4:	60da      	str	r2, [r3, #12]
}
 80049b6:	bf00      	nop
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40023c00 	.word	0x40023c00
 80049c4:	200042fc 	.word	0x200042fc

080049c8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e010      	b.n	8004a06 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d103      	bne.n	80049f2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80049ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e009      	b.n	8004a06 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d103      	bne.n	8004a00 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80049f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	e002      	b.n	8004a06 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004a00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a04:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b0b      	cmp	r3, #11
 8004a0a:	d902      	bls.n	8004a12 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8004a12:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	4910      	ldr	r1, [pc, #64]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	4a0d      	ldr	r2, [pc, #52]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a42:	f043 0302 	orr.w	r3, r3, #2
 8004a46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <FLASH_Erase_Sector+0x9c>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a52:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8004a54:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40023c00 	.word	0x40023c00

08004a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e175      	b.n	8004d74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a88:	2201      	movs	r2, #1
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	f040 8164 	bne.w	8004d6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d00b      	beq.n	8004ac6 <HAL_GPIO_Init+0x5e>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d007      	beq.n	8004ac6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004aba:	2b11      	cmp	r3, #17
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b12      	cmp	r3, #18
 8004ac4:	d130      	bne.n	8004b28 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004afc:	2201      	movs	r2, #1
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 0201 	and.w	r2, r3, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	2203      	movs	r2, #3
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d003      	beq.n	8004b68 <HAL_GPIO_Init+0x100>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b12      	cmp	r3, #18
 8004b66:	d123      	bne.n	8004bb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	08da      	lsrs	r2, r3, #3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3208      	adds	r2, #8
 8004b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	220f      	movs	r2, #15
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	08da      	lsrs	r2, r3, #3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3208      	adds	r2, #8
 8004baa:	69b9      	ldr	r1, [r7, #24]
 8004bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	2203      	movs	r2, #3
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0203 	and.w	r2, r3, #3
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80be 	beq.w	8004d6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf2:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <HAL_GPIO_Init+0x320>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf6:	4a64      	ldr	r2, [pc, #400]	; (8004d88 <HAL_GPIO_Init+0x320>)
 8004bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfe:	4b62      	ldr	r3, [pc, #392]	; (8004d88 <HAL_GPIO_Init+0x320>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004c0a:	4a60      	ldr	r2, [pc, #384]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	3302      	adds	r3, #2
 8004c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	220f      	movs	r2, #15
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a57      	ldr	r2, [pc, #348]	; (8004d90 <HAL_GPIO_Init+0x328>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d037      	beq.n	8004ca6 <HAL_GPIO_Init+0x23e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a56      	ldr	r2, [pc, #344]	; (8004d94 <HAL_GPIO_Init+0x32c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d031      	beq.n	8004ca2 <HAL_GPIO_Init+0x23a>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a55      	ldr	r2, [pc, #340]	; (8004d98 <HAL_GPIO_Init+0x330>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d02b      	beq.n	8004c9e <HAL_GPIO_Init+0x236>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a54      	ldr	r2, [pc, #336]	; (8004d9c <HAL_GPIO_Init+0x334>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d025      	beq.n	8004c9a <HAL_GPIO_Init+0x232>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a53      	ldr	r2, [pc, #332]	; (8004da0 <HAL_GPIO_Init+0x338>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01f      	beq.n	8004c96 <HAL_GPIO_Init+0x22e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a52      	ldr	r2, [pc, #328]	; (8004da4 <HAL_GPIO_Init+0x33c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d019      	beq.n	8004c92 <HAL_GPIO_Init+0x22a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a51      	ldr	r2, [pc, #324]	; (8004da8 <HAL_GPIO_Init+0x340>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d013      	beq.n	8004c8e <HAL_GPIO_Init+0x226>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a50      	ldr	r2, [pc, #320]	; (8004dac <HAL_GPIO_Init+0x344>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00d      	beq.n	8004c8a <HAL_GPIO_Init+0x222>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a4f      	ldr	r2, [pc, #316]	; (8004db0 <HAL_GPIO_Init+0x348>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <HAL_GPIO_Init+0x21e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a4e      	ldr	r2, [pc, #312]	; (8004db4 <HAL_GPIO_Init+0x34c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d101      	bne.n	8004c82 <HAL_GPIO_Init+0x21a>
 8004c7e:	2309      	movs	r3, #9
 8004c80:	e012      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c82:	230a      	movs	r3, #10
 8004c84:	e010      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c86:	2308      	movs	r3, #8
 8004c88:	e00e      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c8a:	2307      	movs	r3, #7
 8004c8c:	e00c      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c8e:	2306      	movs	r3, #6
 8004c90:	e00a      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c92:	2305      	movs	r3, #5
 8004c94:	e008      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c96:	2304      	movs	r3, #4
 8004c98:	e006      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e004      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e002      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <HAL_GPIO_Init+0x240>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	69fa      	ldr	r2, [r7, #28]
 8004caa:	f002 0203 	and.w	r2, r2, #3
 8004cae:	0092      	lsls	r2, r2, #2
 8004cb0:	4093      	lsls	r3, r2
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004cb8:	4934      	ldr	r1, [pc, #208]	; (8004d8c <HAL_GPIO_Init+0x324>)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cc6:	4b3c      	ldr	r3, [pc, #240]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cea:	4a33      	ldr	r2, [pc, #204]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004cf0:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d14:	4a28      	ldr	r2, [pc, #160]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d1a:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4013      	ands	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d3e:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d44:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d68:	4a13      	ldr	r2, [pc, #76]	; (8004db8 <HAL_GPIO_Init+0x350>)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3301      	adds	r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	f67f ae86 	bls.w	8004a88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3724      	adds	r7, #36	; 0x24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40013800 	.word	0x40013800
 8004d90:	40020000 	.word	0x40020000
 8004d94:	40020400 	.word	0x40020400
 8004d98:	40020800 	.word	0x40020800
 8004d9c:	40020c00 	.word	0x40020c00
 8004da0:	40021000 	.word	0x40021000
 8004da4:	40021400 	.word	0x40021400
 8004da8:	40021800 	.word	0x40021800
 8004dac:	40021c00 	.word	0x40021c00
 8004db0:	40022000 	.word	0x40022000
 8004db4:	40022400 	.word	0x40022400
 8004db8:	40013c00 	.word	0x40013c00

08004dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	807b      	strh	r3, [r7, #2]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dcc:	787b      	ldrb	r3, [r7, #1]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dd2:	887a      	ldrh	r2, [r7, #2]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004dd8:	e003      	b.n	8004de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004dda:	887b      	ldrh	r3, [r7, #2]
 8004ddc:	041a      	lsls	r2, r3, #16
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	619a      	str	r2, [r3, #24]
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e07f      	b.n	8004f02 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fd fd1a 	bl	8002850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2224      	movs	r2, #36	; 0x24
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	e006      	b.n	8004e78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d104      	bne.n	8004e8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <HAL_I2C_Init+0x11c>)
 8004e96:	430b      	orrs	r3, r1
 8004e98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ea8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	ea42 0103 	orr.w	r1, r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1a      	ldr	r2, [r3, #32]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	02008000 	.word	0x02008000

08004f10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b088      	sub	sp, #32
 8004f14:	af02      	add	r7, sp, #8
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	817b      	strh	r3, [r7, #10]
 8004f20:	4613      	mov	r3, r2
 8004f22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	f040 80da 	bne.w	80050e6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d101      	bne.n	8004f40 <HAL_I2C_Master_Transmit+0x30>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	e0d3      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f48:	f7fe fa9a 	bl	8003480 <HAL_GetTick>
 8004f4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	2319      	movs	r3, #25
 8004f54:	2201      	movs	r2, #1
 8004f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fa00 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e0be      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	; 0x21
 8004f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2210      	movs	r2, #16
 8004f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	893a      	ldrh	r2, [r7, #8]
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2bff      	cmp	r3, #255	; 0xff
 8004f9a:	d90e      	bls.n	8004fba <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	22ff      	movs	r2, #255	; 0xff
 8004fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	8979      	ldrh	r1, [r7, #10]
 8004faa:	4b51      	ldr	r3, [pc, #324]	; (80050f0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fb62 	bl	800567c <I2C_TransferConfig>
 8004fb8:	e06c      	b.n	8005094 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	8979      	ldrh	r1, [r7, #10]
 8004fcc:	4b48      	ldr	r3, [pc, #288]	; (80050f0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fb51 	bl	800567c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004fda:	e05b      	b.n	8005094 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	6a39      	ldr	r1, [r7, #32]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f9fd 	bl	80053e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e07b      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d034      	beq.n	8005094 <HAL_I2C_Master_Transmit+0x184>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	2b00      	cmp	r3, #0
 8005030:	d130      	bne.n	8005094 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 f98f 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e04d      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	2bff      	cmp	r3, #255	; 0xff
 8005054:	d90e      	bls.n	8005074 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	22ff      	movs	r2, #255	; 0xff
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005060:	b2da      	uxtb	r2, r3
 8005062:	8979      	ldrh	r1, [r7, #10]
 8005064:	2300      	movs	r3, #0
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fb05 	bl	800567c <I2C_TransferConfig>
 8005072:	e00f      	b.n	8005094 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29a      	uxth	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	b2da      	uxtb	r2, r3
 8005084:	8979      	ldrh	r1, [r7, #10]
 8005086:	2300      	movs	r3, #0
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 faf4 	bl	800567c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d19e      	bne.n	8004fdc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	6a39      	ldr	r1, [r7, #32]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f9dc 	bl	8005460 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e01a      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2220      	movs	r2, #32
 80050b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6859      	ldr	r1, [r3, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_I2C_Master_Transmit+0x1e4>)
 80050c6:	400b      	ands	r3, r1
 80050c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e000      	b.n	80050e8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80050e6:	2302      	movs	r3, #2
  }
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	80002000 	.word	0x80002000
 80050f4:	fe00e800 	.word	0xfe00e800

080050f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b088      	sub	sp, #32
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	461a      	mov	r2, r3
 8005104:	460b      	mov	r3, r1
 8005106:	817b      	strh	r3, [r7, #10]
 8005108:	4613      	mov	r3, r2
 800510a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b20      	cmp	r3, #32
 8005116:	f040 80db 	bne.w	80052d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_I2C_Master_Receive+0x30>
 8005124:	2302      	movs	r3, #2
 8005126:	e0d4      	b.n	80052d2 <HAL_I2C_Master_Receive+0x1da>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005130:	f7fe f9a6 	bl	8003480 <HAL_GetTick>
 8005134:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	2319      	movs	r3, #25
 800513c:	2201      	movs	r2, #1
 800513e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f90c 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0bf      	b.n	80052d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2222      	movs	r2, #34	; 0x22
 8005156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2210      	movs	r2, #16
 800515e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	893a      	ldrh	r2, [r7, #8]
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800517e:	b29b      	uxth	r3, r3
 8005180:	2bff      	cmp	r3, #255	; 0xff
 8005182:	d90e      	bls.n	80051a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	22ff      	movs	r2, #255	; 0xff
 8005188:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	b2da      	uxtb	r2, r3
 8005190:	8979      	ldrh	r1, [r7, #10]
 8005192:	4b52      	ldr	r3, [pc, #328]	; (80052dc <HAL_I2C_Master_Receive+0x1e4>)
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fa6e 	bl	800567c <I2C_TransferConfig>
 80051a0:	e06d      	b.n	800527e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	8979      	ldrh	r1, [r7, #10]
 80051b4:	4b49      	ldr	r3, [pc, #292]	; (80052dc <HAL_I2C_Master_Receive+0x1e4>)
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fa5d 	bl	800567c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80051c2:	e05c      	b.n	800527e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	6a39      	ldr	r1, [r7, #32]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f985 	bl	80054d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e07c      	b.n	80052d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005200:	b29b      	uxth	r3, r3
 8005202:	3b01      	subs	r3, #1
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520e:	b29b      	uxth	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d034      	beq.n	800527e <HAL_I2C_Master_Receive+0x186>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	d130      	bne.n	800527e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	2200      	movs	r2, #0
 8005224:	2180      	movs	r1, #128	; 0x80
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f89a 	bl	8005360 <I2C_WaitOnFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e04d      	b.n	80052d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2bff      	cmp	r3, #255	; 0xff
 800523e:	d90e      	bls.n	800525e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	22ff      	movs	r2, #255	; 0xff
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	b2da      	uxtb	r2, r3
 800524c:	8979      	ldrh	r1, [r7, #10]
 800524e:	2300      	movs	r3, #0
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fa10 	bl	800567c <I2C_TransferConfig>
 800525c:	e00f      	b.n	800527e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526c:	b2da      	uxtb	r2, r3
 800526e:	8979      	ldrh	r1, [r7, #10]
 8005270:	2300      	movs	r3, #0
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 f9ff 	bl	800567c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005282:	b29b      	uxth	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d19d      	bne.n	80051c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	6a39      	ldr	r1, [r7, #32]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f8e7 	bl	8005460 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e01a      	b.n	80052d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2220      	movs	r2, #32
 80052a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6859      	ldr	r1, [r3, #4]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	4b0c      	ldr	r3, [pc, #48]	; (80052e0 <HAL_I2C_Master_Receive+0x1e8>)
 80052b0:	400b      	ands	r3, r1
 80052b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	80002400 	.word	0x80002400
 80052e0:	fe00e800 	.word	0xfe00e800

080052e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4798      	blx	r3
  }
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d103      	bne.n	8005336 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b01      	cmp	r3, #1
 8005342:	d007      	beq.n	8005354 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	619a      	str	r2, [r3, #24]
  }
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005370:	e022      	b.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005378:	d01e      	beq.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537a:	f7fe f881 	bl	8003480 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d302      	bcc.n	8005390 <I2C_WaitOnFlagUntilTimeout+0x30>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d113      	bne.n	80053b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e00f      	b.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	4013      	ands	r3, r2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d0cd      	beq.n	8005372 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053ec:	e02c      	b.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f8dc 	bl	80055b0 <I2C_IsAcknowledgeFailed>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e02a      	b.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d01e      	beq.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540a:	f7fe f839 	bl	8003480 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	d302      	bcc.n	8005420 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d113      	bne.n	8005448 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005424:	f043 0220 	orr.w	r2, r3, #32
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e007      	b.n	8005458 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d1cb      	bne.n	80053ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800546c:	e028      	b.n	80054c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f89c 	bl	80055b0 <I2C_IsAcknowledgeFailed>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e026      	b.n	80054d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fd fffd 	bl	8003480 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d113      	bne.n	80054c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e007      	b.n	80054d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d1cf      	bne.n	800546e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054e4:	e055      	b.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	68b9      	ldr	r1, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 f860 	bl	80055b0 <I2C_IsAcknowledgeFailed>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e053      	b.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b20      	cmp	r3, #32
 8005506:	d129      	bne.n	800555c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d105      	bne.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	e03f      	b.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2220      	movs	r2, #32
 8005528:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6859      	ldr	r1, [r3, #4]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b1d      	ldr	r3, [pc, #116]	; (80055ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005536:	400b      	ands	r3, r1
 8005538:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2220      	movs	r2, #32
 8005544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e022      	b.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555c:	f7fd ff90 	bl	8003480 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d302      	bcc.n	8005572 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10f      	bne.n	8005592 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005576:	f043 0220 	orr.w	r2, r3, #32
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e007      	b.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d1a2      	bne.n	80054e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	fe00e800 	.word	0xfe00e800

080055b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b10      	cmp	r3, #16
 80055c8:	d151      	bne.n	800566e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055ca:	e022      	b.n	8005612 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d01e      	beq.n	8005612 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d4:	f7fd ff54 	bl	8003480 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <I2C_IsAcknowledgeFailed+0x3a>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d113      	bne.n	8005612 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f043 0220 	orr.w	r2, r3, #32
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e02e      	b.n	8005670 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b20      	cmp	r3, #32
 800561e:	d1d5      	bne.n	80055cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2210      	movs	r2, #16
 8005626:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2220      	movs	r2, #32
 800562e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fe71 	bl	8005318 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <I2C_IsAcknowledgeFailed+0xc8>)
 8005642:	400b      	ands	r3, r1
 8005644:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	f043 0204 	orr.w	r2, r3, #4
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2220      	movs	r2, #32
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	fe00e800 	.word	0xfe00e800

0800567c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	460b      	mov	r3, r1
 8005688:	817b      	strh	r3, [r7, #10]
 800568a:	4613      	mov	r3, r2
 800568c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	0d5b      	lsrs	r3, r3, #21
 8005698:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800569c:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <I2C_TransferConfig+0x58>)
 800569e:	430b      	orrs	r3, r1
 80056a0:	43db      	mvns	r3, r3
 80056a2:	ea02 0103 	and.w	r1, r2, r3
 80056a6:	897b      	ldrh	r3, [r7, #10]
 80056a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056ac:	7a7b      	ldrb	r3, [r7, #9]
 80056ae:	041b      	lsls	r3, r3, #16
 80056b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	431a      	orrs	r2, r3
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	431a      	orrs	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	03ff63ff 	.word	0x03ff63ff

080056d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d138      	bne.n	8005760 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e032      	b.n	8005762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800572a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6819      	ldr	r1, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800576e:	b480      	push	{r7}
 8005770:	b085      	sub	sp, #20
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b20      	cmp	r3, #32
 8005782:	d139      	bne.n	80057f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800578e:	2302      	movs	r3, #2
 8005790:	e033      	b.n	80057fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2224      	movs	r2, #36	; 0x24
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80057c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e022      	b.n	800585e <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d105      	bne.n	8005830 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7fd f900 	bl	8002a30 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2203      	movs	r2, #3
 8005834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f814 	bl	8005866 <HAL_MMC_InitCard>
 800583e:	4603      	mov	r3, r0
 8005840:	2b01      	cmp	r3, #1
 8005842:	d101      	bne.n	8005848 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e00a      	b.n	800585e <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8005866:	b5b0      	push	{r4, r5, r7, lr}
 8005868:	b08e      	sub	sp, #56	; 0x38
 800586a:	af04      	add	r7, sp, #16
 800586c:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800586e:	2300      	movs	r3, #0
 8005870:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005882:	2376      	movs	r3, #118	; 0x76
 8005884:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hmmc->Instance, Init);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681d      	ldr	r5, [r3, #0]
 800588a:	466c      	mov	r4, sp
 800588c:	f107 0314 	add.w	r3, r7, #20
 8005890:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005894:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005898:	f107 0308 	add.w	r3, r7, #8
 800589c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800589e:	4628      	mov	r0, r5
 80058a0:	f005 fb9e 	bl	800afe0 <SDMMC_Init>
 80058a4:	4603      	mov	r3, r0
 80058a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 80058aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e044      	b.n	8005940 <HAL_MMC_InitCard+0xda>
  }

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058c4:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hmmc->Instance);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f005 fbb4 	bl	800b038 <SDMMC_PowerState_ON>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 80058d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_MMC_InitCard+0x7c>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e02e      	b.n	8005940 <HAL_MMC_InitCard+0xda>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa54 	bl	8005da0 <MMC_PowerON>
 80058f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00b      	beq.n	8005918 <HAL_MMC_InitCard+0xb2>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e013      	b.n	8005940 <HAL_MMC_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f980 	bl	8005c1e <MMC_InitCard>
 800591e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <HAL_MMC_InitCard+0xd8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <HAL_MMC_InitCard+0xda>
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3728      	adds	r7, #40	; 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bdb0      	pop	{r4, r5, r7, pc}

08005948 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005956:	0f9b      	lsrs	r3, r3, #30
 8005958:	b2da      	uxtb	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005962:	0e9b      	lsrs	r3, r3, #26
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	b2da      	uxtb	r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005974:	0e1b      	lsrs	r3, r3, #24
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 0303 	and.w	r3, r3, #3
 800597c:	b2da      	uxtb	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005986:	0c1b      	lsrs	r3, r3, #16
 8005988:	b2da      	uxtb	r2, r3
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005992:	0a1b      	lsrs	r3, r3, #8
 8005994:	b2da      	uxtb	r2, r3
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a8:	0d1b      	lsrs	r3, r3, #20
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b4:	0c1b      	lsrs	r3, r3, #16
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c6:	0bdb      	lsrs	r3, r3, #15
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059d8:	0b9b      	lsrs	r3, r3, #14
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ea:	0b5b      	lsrs	r3, r3, #13
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fc:	0b1b      	lsrs	r3, r3, #12
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a14:	009a      	lsls	r2, r3, #2
 8005a16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a20:	0f92      	lsrs	r2, r2, #30
 8005a22:	431a      	orrs	r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a2c:	0edb      	lsrs	r3, r3, #27
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a3e:	0e1b      	lsrs	r3, r3, #24
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a50:	0d5b      	lsrs	r3, r3, #21
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f003 0307 	and.w	r3, r3, #7
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a62:	0c9b      	lsrs	r3, r3, #18
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a74:	0bdb      	lsrs	r3, r3, #15
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	761a      	strb	r2, [r3, #24]

  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	7e1b      	ldrb	r3, [r3, #24]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	3302      	adds	r3, #2
 8005a98:	2201      	movs	r2, #1
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005aa2:	fb02 f203 	mul.w	r2, r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	7a1b      	ldrb	r3, [r3, #8]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54

  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005ac4:	0a52      	lsrs	r2, r2, #9
 8005ac6:	fb02 f203 	mul.w	r2, r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ad4:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ada:	0b9b      	lsrs	r3, r3, #14
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aec:	09db      	lsrs	r3, r3, #7
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b0e:	0fdb      	lsrs	r3, r3, #31
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1a:	0f5b      	lsrs	r3, r3, #29
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2c:	0e9b      	lsrs	r3, r3, #26
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3e:	0d9b      	lsrs	r3, r3, #22
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b50:	0d5b      	lsrs	r3, r3, #21
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b80:	0bdb      	lsrs	r3, r3, #15
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b94:	0b9b      	lsrs	r3, r3, #14
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba8:	0b5b      	lsrs	r3, r3, #13
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bbc:	0b1b      	lsrs	r3, r3, #12
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd0:	0a9b      	lsrs	r3, r3, #10
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be4:	0a1b      	lsrs	r3, r3, #8
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf8:	085b      	lsrs	r3, r3, #1
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8005c1e:	b5b0      	push	{r4, r5, r7, lr}
 8005c20:	b094      	sub	sp, #80	; 0x50
 8005c22:	af04      	add	r7, sp, #16
 8005c24:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 8005c26:	2301      	movs	r3, #1
 8005c28:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f005 fa11 	bl	800b056 <SDMMC_GetPowerState>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8005c3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c3e:	e0aa      	b.n	8005d96 <MMC_InitCard+0x178>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f005 faa0 	bl	800b18a <SDMMC_CmdSendCID>
 8005c4a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <MMC_InitCard+0x38>
  {
    return errorstate;
 8005c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c54:	e09f      	b.n	8005d96 <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f005 fa40 	bl	800b0e2 <SDMMC_GetResponse>
 8005c62:	4602      	mov	r2, r0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2104      	movs	r1, #4
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f005 fa37 	bl	800b0e2 <SDMMC_GetResponse>
 8005c74:	4602      	mov	r2, r0
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2108      	movs	r1, #8
 8005c80:	4618      	mov	r0, r3
 8005c82:	f005 fa2e 	bl	800b0e2 <SDMMC_GetResponse>
 8005c86:	4602      	mov	r2, r0
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	210c      	movs	r1, #12
 8005c92:	4618      	mov	r0, r3
 8005c94:	f005 fa25 	bl	800b0e2 <SDMMC_GetResponse>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f107 020e 	add.w	r2, r7, #14
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f005 faab 	bl	800b204 <SDMMC_CmdSetRelAdd>
 8005cae:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <MMC_InitCard+0x9c>
  {
    return errorstate;
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	e06d      	b.n	8005d96 <MMC_InitCard+0x178>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8005cba:	89fb      	ldrh	r3, [r7, #14]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cca:	041b      	lsls	r3, r3, #16
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4610      	mov	r0, r2
 8005cd0:	f005 fa79 	bl	800b1c6 <SDMMC_CmdSendCSD>
 8005cd4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <MMC_InitCard+0xc2>
  {
    return errorstate;
 8005cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cde:	e05a      	b.n	8005d96 <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f005 f9fb 	bl	800b0e2 <SDMMC_GetResponse>
 8005cec:	4602      	mov	r2, r0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2104      	movs	r1, #4
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f005 f9f2 	bl	800b0e2 <SDMMC_GetResponse>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2108      	movs	r1, #8
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f005 f9e9 	bl	800b0e2 <SDMMC_GetResponse>
 8005d10:	4602      	mov	r2, r0
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	210c      	movs	r1, #12
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f005 f9e0 	bl	800b0e2 <SDMMC_GetResponse>
 8005d22:	4602      	mov	r2, r0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2104      	movs	r1, #4
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f005 f9d7 	bl	800b0e2 <SDMMC_GetResponse>
 8005d34:	4603      	mov	r3, r0
 8005d36:	0d1a      	lsrs	r2, r3, #20
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8005d3c:	f107 0310 	add.w	r3, r7, #16
 8005d40:	4619      	mov	r1, r3
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fe00 	bl	8005948 <HAL_MMC_GetCardCSD>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <MMC_InitCard+0x136>
  {
    return hmmc->ErrorCode;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	e020      	b.n	8005d96 <MMC_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6819      	ldr	r1, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	f04f 0400 	mov.w	r4, #0
 8005d62:	461a      	mov	r2, r3
 8005d64:	4623      	mov	r3, r4
 8005d66:	4608      	mov	r0, r1
 8005d68:	f005 f9ce 	bl	800b108 <SDMMC_CmdSelDesel>
 8005d6c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <MMC_InitCard+0x15a>
  {
    return errorstate;
 8005d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d76:	e00e      	b.n	8005d96 <MMC_InitCard+0x178>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hmmc->Instance, hmmc->Init);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681d      	ldr	r5, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	466c      	mov	r4, sp
 8005d80:	f103 0210 	add.w	r2, r3, #16
 8005d84:	ca07      	ldmia	r2, {r0, r1, r2}
 8005d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f005 f926 	bl	800afe0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3740      	adds	r7, #64	; 0x40
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005da0 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f005 f9c8 	bl	800b14e <SDMMC_CmdGoIdleState>
 8005dbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d027      	beq.n	8005e16 <MMC_PowerON+0x76>
  {
    return errorstate;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	e034      	b.n	8005e34 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	60ba      	str	r2, [r7, #8]
 8005dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d102      	bne.n	8005dde <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8005dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ddc:	e02a      	b.n	8005e34 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4916      	ldr	r1, [pc, #88]	; (8005e3c <MMC_PowerON+0x9c>)
 8005de4:	4618      	mov	r0, r3
 8005de6:	f005 fa2e 	bl	800b246 <SDMMC_CmdOpCondition>
 8005dea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8005df2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005df6:	e01d      	b.n	8005e34 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f005 f96f 	bl	800b0e2 <SDMMC_GetResponse>
 8005e04:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	0fdb      	lsrs	r3, r3, #31
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <MMC_PowerON+0x72>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <MMC_PowerON+0x74>
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0d6      	beq.n	8005dca <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	0e1b      	lsrs	r3, r3, #24
 8005e20:	2bc0      	cmp	r3, #192	; 0xc0
 8005e22:	d103      	bne.n	8005e2c <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	645a      	str	r2, [r3, #68]	; 0x44
 8005e2a:	e002      	b.n	8005e32 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	c0ff8000 	.word	0xc0ff8000

08005e40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a04      	ldr	r2, [pc, #16]	; (8005e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e4e:	6013      	str	r3, [r2, #0]
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40007000 	.word	0x40007000

08005e60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005e66:	2300      	movs	r3, #0
 8005e68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e6a:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	4a22      	ldr	r2, [pc, #136]	; (8005ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e74:	6413      	str	r3, [r2, #64]	; 0x40
 8005e76:	4b20      	ldr	r3, [pc, #128]	; (8005ef8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e82:	4b1e      	ldr	r3, [pc, #120]	; (8005efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1d      	ldr	r2, [pc, #116]	; (8005efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e8e:	f7fd faf7 	bl	8003480 <HAL_GetTick>
 8005e92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e94:	e009      	b.n	8005eaa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e96:	f7fd faf3 	bl	8003480 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ea4:	d901      	bls.n	8005eaa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e022      	b.n	8005ef0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005eaa:	4b14      	ldr	r3, [pc, #80]	; (8005efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb6:	d1ee      	bne.n	8005e96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a0f      	ldr	r2, [pc, #60]	; (8005efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ec4:	f7fd fadc 	bl	8003480 <HAL_GetTick>
 8005ec8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005eca:	e009      	b.n	8005ee0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ecc:	f7fd fad8 	bl	8003480 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eda:	d901      	bls.n	8005ee0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e007      	b.n	8005ef0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005eec:	d1ee      	bne.n	8005ecc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40007000 	.word	0x40007000

08005f00 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005f08:	f7fd faba 	bl	8003480 <HAL_GetTick>
 8005f0c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e067      	b.n	8005fe8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fc fcdb 	bl	80028e8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005f32:	f241 3188 	movw	r1, #5000	; 0x1388
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fc6c 	bl	8006814 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	021a      	lsls	r2, r3, #8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	2120      	movs	r1, #32
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fc97 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d135      	bne.n	8005fde <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <HAL_QSPI_Init+0xf0>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	6852      	ldr	r2, [r2, #4]
 8005f80:	0611      	lsls	r1, r2, #24
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	68d2      	ldr	r2, [r2, #12]
 8005f86:	4311      	orrs	r1, r2
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	69d2      	ldr	r2, [r2, #28]
 8005f8c:	4311      	orrs	r1, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6a12      	ldr	r2, [r2, #32]
 8005f92:	4311      	orrs	r1, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	430b      	orrs	r3, r1
 8005f9a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <HAL_QSPI_Init+0xf4>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6912      	ldr	r2, [r2, #16]
 8005faa:	0411      	lsls	r1, r2, #16
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6952      	ldr	r2, [r2, #20]
 8005fb0:	4311      	orrs	r1, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6992      	ldr	r2, [r2, #24]
 8005fb6:	4311      	orrs	r1, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6812      	ldr	r2, [r2, #0]
 8005fbc:	430b      	orrs	r3, r1
 8005fbe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	00ffff2f 	.word	0x00ffff2f
 8005ff4:	ffe0f8fe 	.word	0xffe0f8fe

08005ff8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d064      	beq.n	80060e4 <HAL_QSPI_IRQHandler+0xec>
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05f      	beq.n	80060e4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3320      	adds	r3, #32
 800602a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b12      	cmp	r3, #18
 8006036:	d125      	bne.n	8006084 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006038:	e01c      	b.n	8006074 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00f      	beq.n	8006062 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	781a      	ldrb	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	1e5a      	subs	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006060:	e008      	b.n	8006074 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006070:	601a      	str	r2, [r3, #0]
          break;
 8006072:	e033      	b.n	80060dc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1db      	bne.n	800603a <HAL_QSPI_IRQHandler+0x42>
 8006082:	e02b      	b.n	80060dc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b22      	cmp	r3, #34	; 0x22
 800608e:	d125      	bne.n	80060dc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006090:	e01d      	b.n	80060ce <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	2b00      	cmp	r3, #0
 8006098:	d010      	beq.n	80060bc <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	7812      	ldrb	r2, [r2, #0]
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	1e5a      	subs	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
 80060ba:	e008      	b.n	80060ce <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060ca:	601a      	str	r2, [r3, #0]
          break;
 80060cc:	e006      	b.n	80060dc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1da      	bne.n	8006092 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fb7b 	bl	80067d8 <HAL_QSPI_FifoThresholdCallback>
 80060e2:	e13c      	b.n	800635e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80b0 	beq.w	8006250 <HAL_QSPI_IRQHandler+0x258>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80aa 	beq.w	8006250 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2202      	movs	r2, #2
 8006102:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006112:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b12      	cmp	r3, #18
 800611e:	d120      	bne.n	8006162 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b00      	cmp	r3, #0
 800612c:	d011      	beq.n	8006152 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0204 	bic.w	r2, r2, #4
 800613c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fb32 	bl	80067c4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006160:	e0fa      	b.n	8006358 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b22      	cmp	r3, #34	; 0x22
 800616c:	d143      	bne.n	80061f6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d012      	beq.n	80061a2 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0204 	bic.w	r2, r2, #4
 800618a:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 0201 	bic.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	e021      	b.n	80061e6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3320      	adds	r3, #32
 80061a8:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80061aa:	e013      	b.n	80061d4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d017      	beq.n	80061e4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	1e5a      	subs	r2, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1e4      	bne.n	80061ac <HAL_QSPI_IRQHandler+0x1b4>
 80061e2:	e000      	b.n	80061e6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80061e4:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fade 	bl	80067b0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80061f4:	e0b0      	b.n	8006358 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d107      	bne.n	8006212 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fac6 	bl	800679c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006210:	e0a2      	b.n	8006358 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b08      	cmp	r3, #8
 800621c:	f040 809c 	bne.w	8006358 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695a      	ldr	r2, [r3, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800622e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623c:	2b00      	cmp	r3, #0
 800623e:	d103      	bne.n	8006248 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 faa1 	bl	8006788 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006246:	e087      	b.n	8006358 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fa93 	bl	8006774 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800624e:	e083      	b.n	8006358 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01f      	beq.n	800629a <HAL_QSPI_IRQHandler+0x2a2>
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01a      	beq.n	800629a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2208      	movs	r2, #8
 800626a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006288:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 faaa 	bl	80067ec <HAL_QSPI_StatusMatchCallback>
 8006298:	e061      	b.n	800635e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d047      	beq.n	8006334 <HAL_QSPI_IRQHandler+0x33c>
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d042      	beq.n	8006334 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2201      	movs	r2, #1
 80062b4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80062c4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f043 0202 	orr.w	r2, r3, #2
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d021      	beq.n	8006324 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0204 	bic.w	r2, r2, #4
 80062ee:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f4:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <HAL_QSPI_IRQHandler+0x370>)
 80062f6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fd ffcb 	bl	8004298 <HAL_DMA_Abort_IT>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d029      	beq.n	800635c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630c:	f043 0204 	orr.w	r2, r3, #4
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fa29 	bl	8006774 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006322:	e01b      	b.n	800635c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fa21 	bl	8006774 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8006332:	e013      	b.n	800635c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00f      	beq.n	800635e <HAL_QSPI_IRQHandler+0x366>
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2210      	movs	r2, #16
 800634e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fa55 	bl	8006800 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8006356:	e002      	b.n	800635e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800635c:	bf00      	nop
}
 800635e:	bf00      	nop
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	08006831 	.word	0x08006831

0800636c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006378:	f7fd f882 	bl	8003480 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_QSPI_Command+0x22>
 800638a:	2302      	movs	r3, #2
 800638c:	e048      	b.n	8006420 <HAL_QSPI_Command+0xb4>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d137      	bne.n	8006412 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	2200      	movs	r2, #0
 80063b8:	2120      	movs	r1, #32
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fa6b 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d125      	bne.n	8006416 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80063ca:	2200      	movs	r2, #0
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fa98 	bl	8006904 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d115      	bne.n	8006408 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2201      	movs	r2, #1
 80063e4:	2102      	movs	r1, #2
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fa55 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10f      	bne.n	8006416 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2202      	movs	r2, #2
 80063fc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006406:	e006      	b.n	8006416 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006410:	e001      	b.n	8006416 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006412:	2302      	movs	r3, #2
 8006414:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b08a      	sub	sp, #40	; 0x28
 800642c:	af02      	add	r7, sp, #8
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006438:	f7fd f822 	bl	8003480 <HAL_GetTick>
 800643c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3320      	adds	r3, #32
 8006444:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	d101      	bne.n	8006456 <HAL_QSPI_Transmit+0x2e>
 8006452:	2302      	movs	r3, #2
 8006454:	e076      	b.n	8006544 <HAL_QSPI_Transmit+0x11c>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d165      	bne.n	8006536 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d056      	beq.n	8006524 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2212      	movs	r2, #18
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80064aa:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80064ac:	e01b      	b.n	80064e6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2201      	movs	r2, #1
 80064b6:	2104      	movs	r1, #4
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f9ec 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80064c2:	7ffb      	ldrb	r3, [r7, #31]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d113      	bne.n	80064f0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	781a      	ldrb	r2, [r3, #0]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	1e5a      	subs	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1df      	bne.n	80064ae <HAL_QSPI_Transmit+0x86>
 80064ee:	e000      	b.n	80064f2 <HAL_QSPI_Transmit+0xca>
          break;
 80064f0:	bf00      	nop
      }

      if (status == HAL_OK)
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d110      	bne.n	800651a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2201      	movs	r2, #1
 8006500:	2102      	movs	r1, #2
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f9c7 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 8006508:	4603      	mov	r3, r0
 800650a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800650c:	7ffb      	ldrb	r3, [r7, #31]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2202      	movs	r2, #2
 8006518:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006522:	e00a      	b.n	800653a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006528:	f043 0208 	orr.w	r2, r3, #8
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	77fb      	strb	r3, [r7, #31]
 8006534:	e001      	b.n	800653a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006536:	2302      	movs	r3, #2
 8006538:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006542:	7ffb      	ldrb	r3, [r7, #31]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08a      	sub	sp, #40	; 0x28
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800655c:	f7fc ff90 	bl	8003480 <HAL_GetTick>
 8006560:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3320      	adds	r3, #32
 8006570:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_QSPI_Receive+0x36>
 800657e:	2302      	movs	r3, #2
 8006580:	e07d      	b.n	800667e <HAL_QSPI_Receive+0x132>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d16c      	bne.n	8006670 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d05d      	beq.n	800665e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2222      	movs	r2, #34	; 0x22
 80065a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80065da:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80065e4:	e01c      	b.n	8006620 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2201      	movs	r2, #1
 80065ee:	2106      	movs	r1, #6
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f950 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80065fa:	7ffb      	ldrb	r3, [r7, #31]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d114      	bne.n	800662a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	7812      	ldrb	r2, [r2, #0]
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	1e5a      	subs	r2, r3, #1
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1de      	bne.n	80065e6 <HAL_QSPI_Receive+0x9a>
 8006628:	e000      	b.n	800662c <HAL_QSPI_Receive+0xe0>
          break;
 800662a:	bf00      	nop
      }

      if (status == HAL_OK)
 800662c:	7ffb      	ldrb	r3, [r7, #31]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d110      	bne.n	8006654 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	2201      	movs	r2, #1
 800663a:	2102      	movs	r1, #2
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f92a 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 8006642:	4603      	mov	r3, r0
 8006644:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006646:	7ffb      	ldrb	r3, [r7, #31]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d103      	bne.n	8006654 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2202      	movs	r2, #2
 8006652:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800665c:	e00a      	b.n	8006674 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006662:	f043 0208 	orr.w	r2, r3, #8
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e001      	b.n	8006674 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006670:	2302      	movs	r3, #2
 8006672:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800667c:	7ffb      	ldrb	r3, [r7, #31]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b088      	sub	sp, #32
 800668a:	af02      	add	r7, sp, #8
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006694:	f7fc fef4 	bl	8003480 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_QSPI_AutoPolling+0x24>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e060      	b.n	800676c <HAL_QSPI_AutoPolling+0xe6>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d14f      	bne.n	800675e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2242      	movs	r2, #66	; 0x42
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	2200      	movs	r2, #0
 80066d4:	2120      	movs	r1, #32
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f8dd 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d13d      	bne.n	8006762 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6852      	ldr	r2, [r2, #4]
 80066f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6892      	ldr	r2, [r2, #8]
 8006702:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	431a      	orrs	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800671c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f8e9 	bl	8006904 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	2201      	movs	r2, #1
 800673a:	2108      	movs	r1, #8
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f8aa 	bl	8006896 <QSPI_WaitFlagStateUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2208      	movs	r2, #8
 8006752:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800675c:	e001      	b.n	8006762 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800675e:	2302      	movs	r3, #2
 8006760:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b08      	cmp	r3, #8
 8006854:	d114      	bne.n	8006880 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2202      	movs	r2, #2
 800685c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800686c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f042 0202 	orr.w	r2, r2, #2
 800687c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800687e:	e006      	b.n	800688e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff ff73 	bl	8006774 <HAL_QSPI_ErrorCallback>
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	603b      	str	r3, [r7, #0]
 80068a2:	4613      	mov	r3, r2
 80068a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80068a6:	e01a      	b.n	80068de <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ae:	d016      	beq.n	80068de <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068b0:	f7fc fde6 	bl	8003480 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d302      	bcc.n	80068c6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10b      	bne.n	80068de <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2204      	movs	r2, #4
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d2:	f043 0201 	orr.w	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e00e      	b.n	80068fc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bf14      	ite	ne
 80068ec:	2301      	movne	r3, #1
 80068ee:	2300      	moveq	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	461a      	mov	r2, r3
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d1d6      	bne.n	80068a8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068fa:	2300      	movs	r3, #0
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d009      	beq.n	800692c <QSPI_Config+0x28>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800691e:	d005      	beq.n	800692c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3a01      	subs	r2, #1
 800692a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80b9 	beq.w	8006aa8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d05f      	beq.n	80069fe <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	6892      	ldr	r2, [r2, #8]
 8006946:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d031      	beq.n	80069b4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	431a      	orrs	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	431a      	orrs	r2, r3
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	431a      	orrs	r2, r3
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	049b      	lsls	r3, r3, #18
 800696c:	431a      	orrs	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	431a      	orrs	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	431a      	orrs	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	431a      	orrs	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	431a      	orrs	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	431a      	orrs	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	ea42 0103 	orr.w	r1, r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	430a      	orrs	r2, r1
 800699c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069a4:	f000 812e 	beq.w	8006c04 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	6852      	ldr	r2, [r2, #4]
 80069b0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80069b2:	e127      	b.n	8006c04 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069bc:	431a      	orrs	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	049b      	lsls	r3, r3, #18
 80069d0:	431a      	orrs	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	431a      	orrs	r2, r3
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	431a      	orrs	r2, r3
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	ea42 0103 	orr.w	r1, r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	615a      	str	r2, [r3, #20]
}
 80069fc:	e102      	b.n	8006c04 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d02e      	beq.n	8006a64 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a14:	431a      	orrs	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	049b      	lsls	r3, r3, #18
 8006a22:	431a      	orrs	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	ea42 0103 	orr.w	r1, r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a54:	f000 80d6 	beq.w	8006c04 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	6852      	ldr	r2, [r2, #4]
 8006a60:	619a      	str	r2, [r3, #24]
}
 8006a62:	e0cf      	b.n	8006c04 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a72:	431a      	orrs	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	049b      	lsls	r3, r3, #18
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	ea42 0103 	orr.w	r1, r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	615a      	str	r2, [r3, #20]
}
 8006aa6:	e0ad      	b.n	8006c04 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d058      	beq.n	8006b62 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	6892      	ldr	r2, [r2, #8]
 8006ab8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d02d      	beq.n	8006b1e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	049b      	lsls	r3, r3, #18
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	431a      	orrs	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	ea42 0103 	orr.w	r1, r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b10:	d078      	beq.n	8006c04 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	6852      	ldr	r2, [r2, #4]
 8006b1a:	619a      	str	r2, [r3, #24]
}
 8006b1c:	e072      	b.n	8006c04 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	431a      	orrs	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	431a      	orrs	r2, r3
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	049b      	lsls	r3, r3, #18
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	431a      	orrs	r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	ea42 0103 	orr.w	r1, r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	615a      	str	r2, [r3, #20]
}
 8006b60:	e050      	b.n	8006c04 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d02a      	beq.n	8006bc0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	431a      	orrs	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	049b      	lsls	r3, r3, #18
 8006b86:	431a      	orrs	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	431a      	orrs	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	ea42 0103 	orr.w	r1, r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006bb2:	d027      	beq.n	8006c04 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	6852      	ldr	r2, [r2, #4]
 8006bbc:	619a      	str	r2, [r3, #24]
}
 8006bbe:	e021      	b.n	8006c04 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01d      	beq.n	8006c04 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	049b      	lsls	r3, r3, #18
 8006be4:	431a      	orrs	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	ea42 0103 	orr.w	r1, r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	615a      	str	r2, [r3, #20]
}
 8006c04:	bf00      	nop
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e29b      	b.n	800715e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8087 	beq.w	8006d42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c34:	4b96      	ldr	r3, [pc, #600]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d00c      	beq.n	8006c5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c40:	4b93      	ldr	r3, [pc, #588]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f003 030c 	and.w	r3, r3, #12
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d112      	bne.n	8006c72 <HAL_RCC_OscConfig+0x62>
 8006c4c:	4b90      	ldr	r3, [pc, #576]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c58:	d10b      	bne.n	8006c72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c5a:	4b8d      	ldr	r3, [pc, #564]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d06c      	beq.n	8006d40 <HAL_RCC_OscConfig+0x130>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d168      	bne.n	8006d40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e275      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7a:	d106      	bne.n	8006c8a <HAL_RCC_OscConfig+0x7a>
 8006c7c:	4b84      	ldr	r3, [pc, #528]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a83      	ldr	r2, [pc, #524]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	e02e      	b.n	8006ce8 <HAL_RCC_OscConfig+0xd8>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10c      	bne.n	8006cac <HAL_RCC_OscConfig+0x9c>
 8006c92:	4b7f      	ldr	r3, [pc, #508]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7e      	ldr	r2, [pc, #504]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	4b7c      	ldr	r3, [pc, #496]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a7b      	ldr	r2, [pc, #492]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	e01d      	b.n	8006ce8 <HAL_RCC_OscConfig+0xd8>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cb4:	d10c      	bne.n	8006cd0 <HAL_RCC_OscConfig+0xc0>
 8006cb6:	4b76      	ldr	r3, [pc, #472]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a75      	ldr	r2, [pc, #468]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	4b73      	ldr	r3, [pc, #460]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a72      	ldr	r2, [pc, #456]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	e00b      	b.n	8006ce8 <HAL_RCC_OscConfig+0xd8>
 8006cd0:	4b6f      	ldr	r3, [pc, #444]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a6e      	ldr	r2, [pc, #440]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cda:	6013      	str	r3, [r2, #0]
 8006cdc:	4b6c      	ldr	r3, [pc, #432]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a6b      	ldr	r2, [pc, #428]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d013      	beq.n	8006d18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf0:	f7fc fbc6 	bl	8003480 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cf8:	f7fc fbc2 	bl	8003480 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b64      	cmp	r3, #100	; 0x64
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e229      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d0a:	4b61      	ldr	r3, [pc, #388]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0xe8>
 8006d16:	e014      	b.n	8006d42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d18:	f7fc fbb2 	bl	8003480 <HAL_GetTick>
 8006d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d20:	f7fc fbae 	bl	8003480 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b64      	cmp	r3, #100	; 0x64
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e215      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d32:	4b57      	ldr	r3, [pc, #348]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f0      	bne.n	8006d20 <HAL_RCC_OscConfig+0x110>
 8006d3e:	e000      	b.n	8006d42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d069      	beq.n	8006e22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d4e:	4b50      	ldr	r3, [pc, #320]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 030c 	and.w	r3, r3, #12
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d5a:	4b4d      	ldr	r3, [pc, #308]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	2b08      	cmp	r3, #8
 8006d64:	d11c      	bne.n	8006da0 <HAL_RCC_OscConfig+0x190>
 8006d66:	4b4a      	ldr	r3, [pc, #296]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d116      	bne.n	8006da0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d72:	4b47      	ldr	r3, [pc, #284]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d005      	beq.n	8006d8a <HAL_RCC_OscConfig+0x17a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d001      	beq.n	8006d8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e1e9      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d8a:	4b41      	ldr	r3, [pc, #260]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	493d      	ldr	r1, [pc, #244]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d9e:	e040      	b.n	8006e22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d023      	beq.n	8006df0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006da8:	4b39      	ldr	r3, [pc, #228]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a38      	ldr	r2, [pc, #224]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db4:	f7fc fb64 	bl	8003480 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dba:	e008      	b.n	8006dce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dbc:	f7fc fb60 	bl	8003480 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e1c7      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dce:	4b30      	ldr	r3, [pc, #192]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f0      	beq.n	8006dbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dda:	4b2d      	ldr	r3, [pc, #180]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4929      	ldr	r1, [pc, #164]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	600b      	str	r3, [r1, #0]
 8006dee:	e018      	b.n	8006e22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006df0:	4b27      	ldr	r3, [pc, #156]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a26      	ldr	r2, [pc, #152]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006df6:	f023 0301 	bic.w	r3, r3, #1
 8006dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfc:	f7fc fb40 	bl	8003480 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e04:	f7fc fb3c 	bl	8003480 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e1a3      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e16:	4b1e      	ldr	r3, [pc, #120]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d038      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d019      	beq.n	8006e6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e36:	4b16      	ldr	r3, [pc, #88]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e3a:	4a15      	ldr	r2, [pc, #84]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006e3c:	f043 0301 	orr.w	r3, r3, #1
 8006e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e42:	f7fc fb1d 	bl	8003480 <HAL_GetTick>
 8006e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e4a:	f7fc fb19 	bl	8003480 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e180      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0f0      	beq.n	8006e4a <HAL_RCC_OscConfig+0x23a>
 8006e68:	e01a      	b.n	8006ea0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e6a:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e6e:	4a08      	ldr	r2, [pc, #32]	; (8006e90 <HAL_RCC_OscConfig+0x280>)
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e76:	f7fc fb03 	bl	8003480 <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e7c:	e00a      	b.n	8006e94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e7e:	f7fc faff 	bl	8003480 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d903      	bls.n	8006e94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e166      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
 8006e90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e94:	4b92      	ldr	r3, [pc, #584]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e98:	f003 0302 	and.w	r3, r3, #2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ee      	bne.n	8006e7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	f000 80a4 	beq.w	8006ff6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eae:	4b8c      	ldr	r3, [pc, #560]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10d      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eba:	4b89      	ldr	r3, [pc, #548]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ebe:	4a88      	ldr	r2, [pc, #544]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ec6:	4b86      	ldr	r3, [pc, #536]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ece:	60bb      	str	r3, [r7, #8]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ed6:	4b83      	ldr	r3, [pc, #524]	; (80070e4 <HAL_RCC_OscConfig+0x4d4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d118      	bne.n	8006f14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006ee2:	4b80      	ldr	r3, [pc, #512]	; (80070e4 <HAL_RCC_OscConfig+0x4d4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a7f      	ldr	r2, [pc, #508]	; (80070e4 <HAL_RCC_OscConfig+0x4d4>)
 8006ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eee:	f7fc fac7 	bl	8003480 <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef6:	f7fc fac3 	bl	8003480 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b64      	cmp	r3, #100	; 0x64
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e12a      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f08:	4b76      	ldr	r3, [pc, #472]	; (80070e4 <HAL_RCC_OscConfig+0x4d4>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0f0      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d106      	bne.n	8006f2a <HAL_RCC_OscConfig+0x31a>
 8006f1c:	4b70      	ldr	r3, [pc, #448]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f20:	4a6f      	ldr	r2, [pc, #444]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	6713      	str	r3, [r2, #112]	; 0x70
 8006f28:	e02d      	b.n	8006f86 <HAL_RCC_OscConfig+0x376>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10c      	bne.n	8006f4c <HAL_RCC_OscConfig+0x33c>
 8006f32:	4b6b      	ldr	r3, [pc, #428]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f36:	4a6a      	ldr	r2, [pc, #424]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f38:	f023 0301 	bic.w	r3, r3, #1
 8006f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006f3e:	4b68      	ldr	r3, [pc, #416]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f42:	4a67      	ldr	r2, [pc, #412]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f44:	f023 0304 	bic.w	r3, r3, #4
 8006f48:	6713      	str	r3, [r2, #112]	; 0x70
 8006f4a:	e01c      	b.n	8006f86 <HAL_RCC_OscConfig+0x376>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	2b05      	cmp	r3, #5
 8006f52:	d10c      	bne.n	8006f6e <HAL_RCC_OscConfig+0x35e>
 8006f54:	4b62      	ldr	r3, [pc, #392]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f58:	4a61      	ldr	r2, [pc, #388]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f5a:	f043 0304 	orr.w	r3, r3, #4
 8006f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f60:	4b5f      	ldr	r3, [pc, #380]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f64:	4a5e      	ldr	r2, [pc, #376]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f66:	f043 0301 	orr.w	r3, r3, #1
 8006f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f6c:	e00b      	b.n	8006f86 <HAL_RCC_OscConfig+0x376>
 8006f6e:	4b5c      	ldr	r3, [pc, #368]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f72:	4a5b      	ldr	r2, [pc, #364]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	6713      	str	r3, [r2, #112]	; 0x70
 8006f7a:	4b59      	ldr	r3, [pc, #356]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f7e:	4a58      	ldr	r2, [pc, #352]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006f80:	f023 0304 	bic.w	r3, r3, #4
 8006f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d015      	beq.n	8006fba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8e:	f7fc fa77 	bl	8003480 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f94:	e00a      	b.n	8006fac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f96:	f7fc fa73 	bl	8003480 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d901      	bls.n	8006fac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006fa8:	2303      	movs	r3, #3
 8006faa:	e0d8      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fac:	4b4c      	ldr	r3, [pc, #304]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0ee      	beq.n	8006f96 <HAL_RCC_OscConfig+0x386>
 8006fb8:	e014      	b.n	8006fe4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fba:	f7fc fa61 	bl	8003480 <HAL_GetTick>
 8006fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fc0:	e00a      	b.n	8006fd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc2:	f7fc fa5d 	bl	8003480 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d901      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e0c2      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fd8:	4b41      	ldr	r3, [pc, #260]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1ee      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d105      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fea:	4b3d      	ldr	r3, [pc, #244]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	4a3c      	ldr	r2, [pc, #240]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8006ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 80ae 	beq.w	800715c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007000:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f003 030c 	and.w	r3, r3, #12
 8007008:	2b08      	cmp	r3, #8
 800700a:	d06d      	beq.n	80070e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d14b      	bne.n	80070ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007014:	4b32      	ldr	r3, [pc, #200]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a31      	ldr	r2, [pc, #196]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 800701a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800701e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fc fa2e 	bl	8003480 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007028:	f7fc fa2a 	bl	8003480 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e091      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800703a:	4b29      	ldr	r3, [pc, #164]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f0      	bne.n	8007028 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	69da      	ldr	r2, [r3, #28]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	019b      	lsls	r3, r3, #6
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	3b01      	subs	r3, #1
 8007060:	041b      	lsls	r3, r3, #16
 8007062:	431a      	orrs	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	061b      	lsls	r3, r3, #24
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	071b      	lsls	r3, r3, #28
 8007072:	491b      	ldr	r1, [pc, #108]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 8007074:	4313      	orrs	r3, r2
 8007076:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a18      	ldr	r2, [pc, #96]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 800707e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007084:	f7fc f9fc 	bl	8003480 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800708c:	f7fc f9f8 	bl	8003480 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e05f      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800709e:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCC_OscConfig+0x47c>
 80070aa:	e057      	b.n	800715c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ac:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a0b      	ldr	r2, [pc, #44]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 80070b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b8:	f7fc f9e2 	bl	8003480 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c0:	f7fc f9de 	bl	8003480 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e045      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070d2:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <HAL_RCC_OscConfig+0x4d0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0x4b0>
 80070de:	e03d      	b.n	800715c <HAL_RCC_OscConfig+0x54c>
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80070e8:	4b1f      	ldr	r3, [pc, #124]	; (8007168 <HAL_RCC_OscConfig+0x558>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d030      	beq.n	8007158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007100:	429a      	cmp	r2, r3
 8007102:	d129      	bne.n	8007158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800710e:	429a      	cmp	r2, r3
 8007110:	d122      	bne.n	8007158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007118:	4013      	ands	r3, r2
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800711e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007120:	4293      	cmp	r3, r2
 8007122:	d119      	bne.n	8007158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712e:	085b      	lsrs	r3, r3, #1
 8007130:	3b01      	subs	r3, #1
 8007132:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007134:	429a      	cmp	r2, r3
 8007136:	d10f      	bne.n	8007158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007144:	429a      	cmp	r2, r3
 8007146:	d107      	bne.n	8007158 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007154:	429a      	cmp	r2, r3
 8007156:	d001      	beq.n	800715c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40023800 	.word	0x40023800

0800716c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0d0      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007184:	4b6a      	ldr	r3, [pc, #424]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	683a      	ldr	r2, [r7, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d910      	bls.n	80071b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007192:	4b67      	ldr	r3, [pc, #412]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f023 020f 	bic.w	r2, r3, #15
 800719a:	4965      	ldr	r1, [pc, #404]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	4313      	orrs	r3, r2
 80071a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071a2:	4b63      	ldr	r3, [pc, #396]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d001      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0b8      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d020      	beq.n	8007202 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d005      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071cc:	4b59      	ldr	r3, [pc, #356]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	4a58      	ldr	r2, [pc, #352]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80071d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071e4:	4b53      	ldr	r3, [pc, #332]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	4a52      	ldr	r2, [pc, #328]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80071ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80071ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071f0:	4b50      	ldr	r3, [pc, #320]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	494d      	ldr	r1, [pc, #308]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	2b00      	cmp	r3, #0
 800720c:	d040      	beq.n	8007290 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d107      	bne.n	8007226 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007216:	4b47      	ldr	r3, [pc, #284]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d115      	bne.n	800724e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e07f      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	2b02      	cmp	r3, #2
 800722c:	d107      	bne.n	800723e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800722e:	4b41      	ldr	r3, [pc, #260]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e073      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723e:	4b3d      	ldr	r3, [pc, #244]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e06b      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800724e:	4b39      	ldr	r3, [pc, #228]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f023 0203 	bic.w	r2, r3, #3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4936      	ldr	r1, [pc, #216]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 800725c:	4313      	orrs	r3, r2
 800725e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007260:	f7fc f90e 	bl	8003480 <HAL_GetTick>
 8007264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007266:	e00a      	b.n	800727e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007268:	f7fc f90a 	bl	8003480 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	f241 3288 	movw	r2, #5000	; 0x1388
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e053      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800727e:	4b2d      	ldr	r3, [pc, #180]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 020c 	and.w	r2, r3, #12
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	429a      	cmp	r2, r3
 800728e:	d1eb      	bne.n	8007268 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007290:	4b27      	ldr	r3, [pc, #156]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	429a      	cmp	r2, r3
 800729c:	d210      	bcs.n	80072c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729e:	4b24      	ldr	r3, [pc, #144]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f023 020f 	bic.w	r2, r3, #15
 80072a6:	4922      	ldr	r1, [pc, #136]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ae:	4b20      	ldr	r3, [pc, #128]	; (8007330 <HAL_RCC_ClockConfig+0x1c4>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d001      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e032      	b.n	8007326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072cc:	4b19      	ldr	r3, [pc, #100]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	4916      	ldr	r1, [pc, #88]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0308 	and.w	r3, r3, #8
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d009      	beq.n	80072fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	490e      	ldr	r1, [pc, #56]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072fe:	f000 f831 	bl	8007364 <HAL_RCC_GetSysClockFreq>
 8007302:	4601      	mov	r1, r0
 8007304:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <HAL_RCC_ClockConfig+0x1c8>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	091b      	lsrs	r3, r3, #4
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	4a0a      	ldr	r2, [pc, #40]	; (8007338 <HAL_RCC_ClockConfig+0x1cc>)
 8007310:	5cd3      	ldrb	r3, [r2, r3]
 8007312:	fa21 f303 	lsr.w	r3, r1, r3
 8007316:	4a09      	ldr	r2, [pc, #36]	; (800733c <HAL_RCC_ClockConfig+0x1d0>)
 8007318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <HAL_RCC_ClockConfig+0x1d4>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f7fc f86a 	bl	80033f8 <HAL_InitTick>

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	40023c00 	.word	0x40023c00
 8007334:	40023800 	.word	0x40023800
 8007338:	0800f0d8 	.word	0x0800f0d8
 800733c:	2000000c 	.word	0x2000000c
 8007340:	20000028 	.word	0x20000028

08007344 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <HAL_RCC_EnableCSS+0x1c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a04      	ldr	r2, [pc, #16]	; (8007360 <HAL_RCC_EnableCSS+0x1c>)
 800734e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007352:	6013      	str	r3, [r2, #0]
}
 8007354:	bf00      	nop
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40023800 	.word	0x40023800

08007364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	2300      	movs	r3, #0
 8007374:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800737a:	4b50      	ldr	r3, [pc, #320]	; (80074bc <HAL_RCC_GetSysClockFreq+0x158>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f003 030c 	and.w	r3, r3, #12
 8007382:	2b04      	cmp	r3, #4
 8007384:	d007      	beq.n	8007396 <HAL_RCC_GetSysClockFreq+0x32>
 8007386:	2b08      	cmp	r3, #8
 8007388:	d008      	beq.n	800739c <HAL_RCC_GetSysClockFreq+0x38>
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 808d 	bne.w	80074aa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007390:	4b4b      	ldr	r3, [pc, #300]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007392:	60bb      	str	r3, [r7, #8]
      break;
 8007394:	e08c      	b.n	80074b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007396:	4b4b      	ldr	r3, [pc, #300]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007398:	60bb      	str	r3, [r7, #8]
      break;
 800739a:	e089      	b.n	80074b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800739c:	4b47      	ldr	r3, [pc, #284]	; (80074bc <HAL_RCC_GetSysClockFreq+0x158>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80073a6:	4b45      	ldr	r3, [pc, #276]	; (80074bc <HAL_RCC_GetSysClockFreq+0x158>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d023      	beq.n	80073fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073b2:	4b42      	ldr	r3, [pc, #264]	; (80074bc <HAL_RCC_GetSysClockFreq+0x158>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	099b      	lsrs	r3, r3, #6
 80073b8:	f04f 0400 	mov.w	r4, #0
 80073bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	ea03 0501 	and.w	r5, r3, r1
 80073c8:	ea04 0602 	and.w	r6, r4, r2
 80073cc:	4a3d      	ldr	r2, [pc, #244]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80073ce:	fb02 f106 	mul.w	r1, r2, r6
 80073d2:	2200      	movs	r2, #0
 80073d4:	fb02 f205 	mul.w	r2, r2, r5
 80073d8:	440a      	add	r2, r1
 80073da:	493a      	ldr	r1, [pc, #232]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80073dc:	fba5 0101 	umull	r0, r1, r5, r1
 80073e0:	1853      	adds	r3, r2, r1
 80073e2:	4619      	mov	r1, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f04f 0400 	mov.w	r4, #0
 80073ea:	461a      	mov	r2, r3
 80073ec:	4623      	mov	r3, r4
 80073ee:	f7f8 ff7f 	bl	80002f0 <__aeabi_uldivmod>
 80073f2:	4603      	mov	r3, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	e049      	b.n	800748e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073fa:	4b30      	ldr	r3, [pc, #192]	; (80074bc <HAL_RCC_GetSysClockFreq+0x158>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	099b      	lsrs	r3, r3, #6
 8007400:	f04f 0400 	mov.w	r4, #0
 8007404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	ea03 0501 	and.w	r5, r3, r1
 8007410:	ea04 0602 	and.w	r6, r4, r2
 8007414:	4629      	mov	r1, r5
 8007416:	4632      	mov	r2, r6
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	f04f 0400 	mov.w	r4, #0
 8007420:	0154      	lsls	r4, r2, #5
 8007422:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007426:	014b      	lsls	r3, r1, #5
 8007428:	4619      	mov	r1, r3
 800742a:	4622      	mov	r2, r4
 800742c:	1b49      	subs	r1, r1, r5
 800742e:	eb62 0206 	sbc.w	r2, r2, r6
 8007432:	f04f 0300 	mov.w	r3, #0
 8007436:	f04f 0400 	mov.w	r4, #0
 800743a:	0194      	lsls	r4, r2, #6
 800743c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007440:	018b      	lsls	r3, r1, #6
 8007442:	1a5b      	subs	r3, r3, r1
 8007444:	eb64 0402 	sbc.w	r4, r4, r2
 8007448:	f04f 0100 	mov.w	r1, #0
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	00e2      	lsls	r2, r4, #3
 8007452:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007456:	00d9      	lsls	r1, r3, #3
 8007458:	460b      	mov	r3, r1
 800745a:	4614      	mov	r4, r2
 800745c:	195b      	adds	r3, r3, r5
 800745e:	eb44 0406 	adc.w	r4, r4, r6
 8007462:	f04f 0100 	mov.w	r1, #0
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	02a2      	lsls	r2, r4, #10
 800746c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007470:	0299      	lsls	r1, r3, #10
 8007472:	460b      	mov	r3, r1
 8007474:	4614      	mov	r4, r2
 8007476:	4618      	mov	r0, r3
 8007478:	4621      	mov	r1, r4
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f04f 0400 	mov.w	r4, #0
 8007480:	461a      	mov	r2, r3
 8007482:	4623      	mov	r3, r4
 8007484:	f7f8 ff34 	bl	80002f0 <__aeabi_uldivmod>
 8007488:	4603      	mov	r3, r0
 800748a:	460c      	mov	r4, r1
 800748c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800748e:	4b0b      	ldr	r3, [pc, #44]	; (80074bc <HAL_RCC_GetSysClockFreq+0x158>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	0c1b      	lsrs	r3, r3, #16
 8007494:	f003 0303 	and.w	r3, r3, #3
 8007498:	3301      	adds	r3, #1
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	60bb      	str	r3, [r7, #8]
      break;
 80074a8:	e002      	b.n	80074b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80074ac:	60bb      	str	r3, [r7, #8]
      break;
 80074ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074b0:	68bb      	ldr	r3, [r7, #8]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ba:	bf00      	nop
 80074bc:	40023800 	.word	0x40023800
 80074c0:	00f42400 	.word	0x00f42400
 80074c4:	017d7840 	.word	0x017d7840

080074c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074cc:	4b03      	ldr	r3, [pc, #12]	; (80074dc <HAL_RCC_GetHCLKFreq+0x14>)
 80074ce:	681b      	ldr	r3, [r3, #0]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	2000000c 	.word	0x2000000c

080074e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80074e4:	f7ff fff0 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 80074e8:	4601      	mov	r1, r0
 80074ea:	4b05      	ldr	r3, [pc, #20]	; (8007500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	0a9b      	lsrs	r3, r3, #10
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	4a03      	ldr	r2, [pc, #12]	; (8007504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80074f6:	5cd3      	ldrb	r3, [r2, r3]
 80074f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	40023800 	.word	0x40023800
 8007504:	0800f0e8 	.word	0x0800f0e8

08007508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800750c:	f7ff ffdc 	bl	80074c8 <HAL_RCC_GetHCLKFreq>
 8007510:	4601      	mov	r1, r0
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	0b5b      	lsrs	r3, r3, #13
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	4a03      	ldr	r2, [pc, #12]	; (800752c <HAL_RCC_GetPCLK2Freq+0x24>)
 800751e:	5cd3      	ldrb	r3, [r2, r3]
 8007520:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007524:	4618      	mov	r0, r3
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40023800 	.word	0x40023800
 800752c:	0800f0e8 	.word	0x0800f0e8

08007530 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753c:	2b80      	cmp	r3, #128	; 0x80
 800753e:	d104      	bne.n	800754a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007540:	f000 f80a 	bl	8007558 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007544:	4b03      	ldr	r3, [pc, #12]	; (8007554 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007546:	2280      	movs	r2, #128	; 0x80
 8007548:	701a      	strb	r2, [r3, #0]
  }
}
 800754a:	bf00      	nop
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40023800 	.word	0x40023800
 8007554:	4002380e 	.word	0x4002380e

08007558 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007558:	b480      	push	{r7}
 800755a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007580:	2300      	movs	r3, #0
 8007582:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d012      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007590:	4b69      	ldr	r3, [pc, #420]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	4a68      	ldr	r2, [pc, #416]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007596:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800759a:	6093      	str	r3, [r2, #8]
 800759c:	4b66      	ldr	r3, [pc, #408]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	4964      	ldr	r1, [pc, #400]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80075b2:	2301      	movs	r3, #1
 80075b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d017      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075c2:	4b5d      	ldr	r3, [pc, #372]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d0:	4959      	ldr	r1, [pc, #356]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e0:	d101      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80075e2:	2301      	movs	r3, #1
 80075e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80075ee:	2301      	movs	r3, #1
 80075f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d017      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80075fe:	4b4e      	ldr	r3, [pc, #312]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760c:	494a      	ldr	r1, [pc, #296]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800761c:	d101      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800761e:	2301      	movs	r3, #1
 8007620:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800762a:	2301      	movs	r3, #1
 800762c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800763a:	2301      	movs	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 808b 	beq.w	8007762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800764c:	4b3a      	ldr	r3, [pc, #232]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007650:	4a39      	ldr	r2, [pc, #228]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007656:	6413      	str	r3, [r2, #64]	; 0x40
 8007658:	4b37      	ldr	r3, [pc, #220]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007664:	4b35      	ldr	r3, [pc, #212]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a34      	ldr	r2, [pc, #208]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800766a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800766e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007670:	f7fb ff06 	bl	8003480 <HAL_GetTick>
 8007674:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007676:	e008      	b.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007678:	f7fb ff02 	bl	8003480 <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	2b64      	cmp	r3, #100	; 0x64
 8007684:	d901      	bls.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e38d      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800768a:	4b2c      	ldr	r3, [pc, #176]	; (800773c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0f0      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007696:	4b28      	ldr	r3, [pc, #160]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800769e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d035      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d02e      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80076be:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c2:	4a1d      	ldr	r2, [pc, #116]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80076ca:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ce:	4a1a      	ldr	r2, [pc, #104]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80076dc:	4b16      	ldr	r3, [pc, #88]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d114      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e8:	f7fb feca 	bl	8003480 <HAL_GetTick>
 80076ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076ee:	e00a      	b.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076f0:	f7fb fec6 	bl	8003480 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d901      	bls.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e34f      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007706:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0ee      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800771a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800771e:	d111      	bne.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800772e:	400b      	ands	r3, r1
 8007730:	4901      	ldr	r1, [pc, #4]	; (8007738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007732:	4313      	orrs	r3, r2
 8007734:	608b      	str	r3, [r1, #8]
 8007736:	e00b      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007738:	40023800 	.word	0x40023800
 800773c:	40007000 	.word	0x40007000
 8007740:	0ffffcff 	.word	0x0ffffcff
 8007744:	4bb3      	ldr	r3, [pc, #716]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	4ab2      	ldr	r2, [pc, #712]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800774a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800774e:	6093      	str	r3, [r2, #8]
 8007750:	4bb0      	ldr	r3, [pc, #704]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800775c:	49ad      	ldr	r1, [pc, #692]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800775e:	4313      	orrs	r3, r2
 8007760:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b00      	cmp	r3, #0
 800776c:	d010      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800776e:	4ba9      	ldr	r3, [pc, #676]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007774:	4aa7      	ldr	r2, [pc, #668]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800777a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800777e:	4ba5      	ldr	r3, [pc, #660]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007780:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	49a2      	ldr	r1, [pc, #648]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800779c:	4b9d      	ldr	r3, [pc, #628]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800779e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077aa:	499a      	ldr	r1, [pc, #616]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80077be:	4b95      	ldr	r3, [pc, #596]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077cc:	4991      	ldr	r1, [pc, #580]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077e0:	4b8c      	ldr	r3, [pc, #560]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077ee:	4989      	ldr	r1, [pc, #548]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007802:	4b84      	ldr	r3, [pc, #528]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007810:	4980      	ldr	r1, [pc, #512]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007812:	4313      	orrs	r3, r2
 8007814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007824:	4b7b      	ldr	r3, [pc, #492]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782a:	f023 0203 	bic.w	r2, r3, #3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007832:	4978      	ldr	r1, [pc, #480]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007834:	4313      	orrs	r3, r2
 8007836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007846:	4b73      	ldr	r3, [pc, #460]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784c:	f023 020c 	bic.w	r2, r3, #12
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007854:	496f      	ldr	r1, [pc, #444]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007868:	4b6a      	ldr	r3, [pc, #424]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800786a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007876:	4967      	ldr	r1, [pc, #412]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007878:	4313      	orrs	r3, r2
 800787a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800788a:	4b62      	ldr	r3, [pc, #392]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800788c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007890:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007898:	495e      	ldr	r1, [pc, #376]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800789a:	4313      	orrs	r3, r2
 800789c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80078ac:	4b59      	ldr	r3, [pc, #356]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ba:	4956      	ldr	r1, [pc, #344]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80078ce:	4b51      	ldr	r3, [pc, #324]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078dc:	494d      	ldr	r1, [pc, #308]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80078f0:	4b48      	ldr	r3, [pc, #288]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80078f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fe:	4945      	ldr	r1, [pc, #276]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007900:	4313      	orrs	r3, r2
 8007902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007912:	4b40      	ldr	r3, [pc, #256]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007918:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007920:	493c      	ldr	r1, [pc, #240]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007922:	4313      	orrs	r3, r2
 8007924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007934:	4b37      	ldr	r3, [pc, #220]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007942:	4934      	ldr	r1, [pc, #208]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d011      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007956:	4b2f      	ldr	r3, [pc, #188]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007964:	492b      	ldr	r1, [pc, #172]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007966:	4313      	orrs	r3, r2
 8007968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007974:	d101      	bne.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007976:	2301      	movs	r3, #1
 8007978:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007986:	2301      	movs	r3, #1
 8007988:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007996:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a4:	491b      	ldr	r1, [pc, #108]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80079b8:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c8:	4912      	ldr	r1, [pc, #72]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80079dc:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ec:	4909      	ldr	r1, [pc, #36]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00f      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a00:	4b04      	ldr	r3, [pc, #16]	; (8007a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a10:	e002      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007a12:	bf00      	nop
 8007a14:	40023800 	.word	0x40023800
 8007a18:	4985      	ldr	r1, [pc, #532]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007a2c:	4b80      	ldr	r3, [pc, #512]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a3c:	497c      	ldr	r1, [pc, #496]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d005      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a52:	f040 80d6 	bne.w	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a56:	4b76      	ldr	r3, [pc, #472]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a75      	ldr	r2, [pc, #468]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a62:	f7fb fd0d 	bl	8003480 <HAL_GetTick>
 8007a66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a68:	e008      	b.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a6a:	f7fb fd09 	bl	8003480 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	2b64      	cmp	r3, #100	; 0x64
 8007a76:	d901      	bls.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e194      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a7c:	4b6c      	ldr	r3, [pc, #432]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f0      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d021      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d11d      	bne.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a9c:	4b64      	ldr	r3, [pc, #400]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa2:	0c1b      	lsrs	r3, r3, #16
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007aaa:	4b61      	ldr	r3, [pc, #388]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab0:	0e1b      	lsrs	r3, r3, #24
 8007ab2:	f003 030f 	and.w	r3, r3, #15
 8007ab6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	019a      	lsls	r2, r3, #6
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	041b      	lsls	r3, r3, #16
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	061b      	lsls	r3, r3, #24
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	071b      	lsls	r3, r3, #28
 8007ad0:	4957      	ldr	r1, [pc, #348]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aec:	d00a      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d02e      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b02:	d129      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b04:	4b4a      	ldr	r3, [pc, #296]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b0a:	0c1b      	lsrs	r3, r3, #16
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b12:	4b47      	ldr	r3, [pc, #284]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b18:	0f1b      	lsrs	r3, r3, #28
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	019a      	lsls	r2, r3, #6
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	061b      	lsls	r3, r3, #24
 8007b32:	431a      	orrs	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	071b      	lsls	r3, r3, #28
 8007b38:	493d      	ldr	r1, [pc, #244]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007b40:	4b3b      	ldr	r3, [pc, #236]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b46:	f023 021f 	bic.w	r2, r3, #31
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	4937      	ldr	r1, [pc, #220]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01d      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b64:	4b32      	ldr	r3, [pc, #200]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b6a:	0e1b      	lsrs	r3, r3, #24
 8007b6c:	f003 030f 	and.w	r3, r3, #15
 8007b70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b72:	4b2f      	ldr	r3, [pc, #188]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b78:	0f1b      	lsrs	r3, r3, #28
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	019a      	lsls	r2, r3, #6
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	061b      	lsls	r3, r3, #24
 8007b92:	431a      	orrs	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	071b      	lsls	r3, r3, #28
 8007b98:	4925      	ldr	r1, [pc, #148]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d011      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	019a      	lsls	r2, r3, #6
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	061b      	lsls	r3, r3, #24
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	071b      	lsls	r3, r3, #28
 8007bc8:	4919      	ldr	r1, [pc, #100]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007bd0:	4b17      	ldr	r3, [pc, #92]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a16      	ldr	r2, [pc, #88]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bdc:	f7fb fc50 	bl	8003480 <HAL_GetTick>
 8007be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007be4:	f7fb fc4c 	bl	8003480 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b64      	cmp	r3, #100	; 0x64
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e0d7      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bf6:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0f0      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	f040 80cd 	bne.w	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a08      	ldr	r2, [pc, #32]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c16:	f7fb fc33 	bl	8003480 <HAL_GetTick>
 8007c1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c1c:	e00a      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007c1e:	f7fb fc2f 	bl	8003480 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b64      	cmp	r3, #100	; 0x64
 8007c2a:	d903      	bls.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e0ba      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007c30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c34:	4b5e      	ldr	r3, [pc, #376]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c40:	d0ed      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d009      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d02e      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d12a      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c6a:	4b51      	ldr	r3, [pc, #324]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c78:	4b4d      	ldr	r3, [pc, #308]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c7e:	0f1b      	lsrs	r3, r3, #28
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	019a      	lsls	r2, r3, #6
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	041b      	lsls	r3, r3, #16
 8007c90:	431a      	orrs	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	071b      	lsls	r3, r3, #28
 8007c9e:	4944      	ldr	r1, [pc, #272]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ca6:	4b42      	ldr	r3, [pc, #264]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	021b      	lsls	r3, r3, #8
 8007cb8:	493d      	ldr	r1, [pc, #244]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d022      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cd4:	d11d      	bne.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007cd6:	4b36      	ldr	r3, [pc, #216]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cdc:	0e1b      	lsrs	r3, r3, #24
 8007cde:	f003 030f 	and.w	r3, r3, #15
 8007ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ce4:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cea:	0f1b      	lsrs	r3, r3, #28
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	019a      	lsls	r2, r3, #6
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a1b      	ldr	r3, [r3, #32]
 8007cfc:	041b      	lsls	r3, r3, #16
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	061b      	lsls	r3, r3, #24
 8007d04:	431a      	orrs	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	071b      	lsls	r3, r3, #28
 8007d0a:	4929      	ldr	r1, [pc, #164]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d028      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d1e:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d24:	0e1b      	lsrs	r3, r3, #24
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d2c:	4b20      	ldr	r3, [pc, #128]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	019a      	lsls	r2, r3, #6
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	431a      	orrs	r2, r3
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	061b      	lsls	r3, r3, #24
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	071b      	lsls	r3, r3, #28
 8007d52:	4917      	ldr	r1, [pc, #92]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007d5a:	4b15      	ldr	r3, [pc, #84]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	4911      	ldr	r1, [pc, #68]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007d70:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a0e      	ldr	r2, [pc, #56]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d7c:	f7fb fb80 	bl	8003480 <HAL_GetTick>
 8007d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d82:	e008      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007d84:	f7fb fb7c 	bl	8003480 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b64      	cmp	r3, #100	; 0x64
 8007d90:	d901      	bls.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e007      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da2:	d1ef      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3720      	adds	r7, #32
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	40023800 	.word	0x40023800

08007db4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e06b      	b.n	8007e9e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	7f5b      	ldrb	r3, [r3, #29]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d105      	bne.n	8007ddc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7fa fe10 	bl	80029fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	22ca      	movs	r2, #202	; 0xca
 8007de8:	625a      	str	r2, [r3, #36]	; 0x24
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	2253      	movs	r2, #83	; 0x53
 8007df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f9e8 	bl	80081c8 <RTC_EnterInitMode>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d008      	beq.n	8007e10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	22ff      	movs	r2, #255	; 0xff
 8007e04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2204      	movs	r2, #4
 8007e0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e046      	b.n	8007e9e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6899      	ldr	r1, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	4b23      	ldr	r3, [pc, #140]	; (8007ea8 <HAL_RTC_Init+0xf4>)
 8007e1c:	400b      	ands	r3, r1
 8007e1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6899      	ldr	r1, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	431a      	orrs	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	68d2      	ldr	r2, [r2, #12]
 8007e46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6919      	ldr	r1, [r3, #16]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	041a      	lsls	r2, r3, #16
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e6a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0208 	bic.w	r2, r2, #8
 8007e7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	430a      	orrs	r2, r1
 8007e8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	22ff      	movs	r2, #255	; 0xff
 8007e94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
  }
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	ff8fffbf 	.word	0xff8fffbf

08007eac <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007eac:	b590      	push	{r4, r7, lr}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	7f1b      	ldrb	r3, [r3, #28]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_RTC_SetTime+0x1c>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e0a8      	b.n	800801a <HAL_RTC_SetTime+0x16e>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d126      	bne.n	8007f28 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d102      	bne.n	8007eee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2200      	movs	r2, #0
 8007eec:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f994 	bl	8008220 <RTC_ByteToBcd2>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 f98d 	bl	8008220 <RTC_ByteToBcd2>
 8007f06:	4603      	mov	r3, r0
 8007f08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f0a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	789b      	ldrb	r3, [r3, #2]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f000 f985 	bl	8008220 <RTC_ByteToBcd2>
 8007f16:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007f18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	7b1b      	ldrb	r3, [r3, #12]
 8007f20:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007f22:	4313      	orrs	r3, r2
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	e018      	b.n	8007f5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f48:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007f4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	7b1b      	ldrb	r3, [r3, #12]
 8007f54:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	22ca      	movs	r2, #202	; 0xca
 8007f60:	625a      	str	r2, [r3, #36]	; 0x24
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2253      	movs	r2, #83	; 0x53
 8007f68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f92c 	bl	80081c8 <RTC_EnterInitMode>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00b      	beq.n	8007f8e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	22ff      	movs	r2, #255	; 0xff
 8007f7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2204      	movs	r2, #4
 8007f82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2200      	movs	r2, #0
 8007f88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e045      	b.n	800801a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	4b23      	ldr	r3, [pc, #140]	; (8008024 <HAL_RTC_SetTime+0x178>)
 8007f96:	400b      	ands	r3, r1
 8007f98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6899      	ldr	r1, [r3, #8]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d111      	bne.n	8008004 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 f8c9 	bl	8008178 <HAL_RTC_WaitForSynchro>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	22ff      	movs	r2, #255	; 0xff
 8007ff2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2204      	movs	r2, #4
 8007ff8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e00a      	b.n	800801a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	22ff      	movs	r2, #255	; 0xff
 800800a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008018:	2300      	movs	r3, #0
  }
}
 800801a:	4618      	mov	r0, r3
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	bd90      	pop	{r4, r7, pc}
 8008022:	bf00      	nop
 8008024:	007f7f7f 	.word	0x007f7f7f

08008028 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	7f1b      	ldrb	r3, [r3, #28]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_RTC_SetDate+0x1c>
 8008040:	2302      	movs	r3, #2
 8008042:	e092      	b.n	800816a <HAL_RTC_SetDate+0x142>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2202      	movs	r2, #2
 800804e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10e      	bne.n	8008074 <HAL_RTC_SetDate+0x4c>
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	785b      	ldrb	r3, [r3, #1]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b00      	cmp	r3, #0
 8008060:	d008      	beq.n	8008074 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	785b      	ldrb	r3, [r3, #1]
 8008066:	f023 0310 	bic.w	r3, r3, #16
 800806a:	b2db      	uxtb	r3, r3
 800806c:	330a      	adds	r3, #10
 800806e:	b2da      	uxtb	r2, r3
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d11c      	bne.n	80080b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	78db      	ldrb	r3, [r3, #3]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f8ce 	bl	8008220 <RTC_ByteToBcd2>
 8008084:	4603      	mov	r3, r0
 8008086:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	785b      	ldrb	r3, [r3, #1]
 800808c:	4618      	mov	r0, r3
 800808e:	f000 f8c7 	bl	8008220 <RTC_ByteToBcd2>
 8008092:	4603      	mov	r3, r0
 8008094:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008096:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	789b      	ldrb	r3, [r3, #2]
 800809c:	4618      	mov	r0, r3
 800809e:	f000 f8bf 	bl	8008220 <RTC_ByteToBcd2>
 80080a2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80080a4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]
 80080b2:	e00e      	b.n	80080d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	78db      	ldrb	r3, [r3, #3]
 80080b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	785b      	ldrb	r3, [r3, #1]
 80080be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080c0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80080c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	22ca      	movs	r2, #202	; 0xca
 80080d8:	625a      	str	r2, [r3, #36]	; 0x24
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2253      	movs	r2, #83	; 0x53
 80080e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 f870 	bl	80081c8 <RTC_EnterInitMode>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00b      	beq.n	8008106 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	22ff      	movs	r2, #255	; 0xff
 80080f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2204      	movs	r2, #4
 80080fa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2200      	movs	r2, #0
 8008100:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e031      	b.n	800816a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	6979      	ldr	r1, [r7, #20]
 800810c:	4b19      	ldr	r3, [pc, #100]	; (8008174 <HAL_RTC_SetDate+0x14c>)
 800810e:	400b      	ands	r3, r1
 8008110:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68da      	ldr	r2, [r3, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008120:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 0320 	and.w	r3, r3, #32
 800812c:	2b00      	cmp	r3, #0
 800812e:	d111      	bne.n	8008154 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 f821 	bl	8008178 <HAL_RTC_WaitForSynchro>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	22ff      	movs	r2, #255	; 0xff
 8008142:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2204      	movs	r2, #4
 8008148:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e00a      	b.n	800816a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	22ff      	movs	r2, #255	; 0xff
 800815a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008168:	2300      	movs	r3, #0
  }
}
 800816a:	4618      	mov	r0, r3
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	bd90      	pop	{r4, r7, pc}
 8008172:	bf00      	nop
 8008174:	00ffff3f 	.word	0x00ffff3f

08008178 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008192:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008194:	f7fb f974 	bl	8003480 <HAL_GetTick>
 8008198:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800819a:	e009      	b.n	80081b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800819c:	f7fb f970 	bl	8003480 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081aa:	d901      	bls.n	80081b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e007      	b.n	80081c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0ee      	beq.n	800819c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d119      	bne.n	8008216 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80081ec:	f7fb f948 	bl	8003480 <HAL_GetTick>
 80081f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80081f2:	e009      	b.n	8008208 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80081f4:	f7fb f944 	bl	8003480 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008202:	d901      	bls.n	8008208 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e007      	b.n	8008218 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0ee      	beq.n	80081f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800822e:	e005      	b.n	800823c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	3b0a      	subs	r3, #10
 800823a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	2b09      	cmp	r3, #9
 8008240:	d8f6      	bhi.n	8008230 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	b2db      	uxtb	r3, r3
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	b2da      	uxtb	r2, r3
 800824a:	79fb      	ldrb	r3, [r7, #7]
 800824c:	4313      	orrs	r3, r2
 800824e:	b2db      	uxtb	r3, r3
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e084      	b.n	8008378 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b00      	cmp	r3, #0
 800827e:	d106      	bne.n	800828e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7fa fc33 	bl	8002af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2202      	movs	r2, #2
 8008292:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082ae:	d902      	bls.n	80082b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e002      	b.n	80082bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80082c4:	d007      	beq.n	80082d6 <HAL_SPI_Init+0x7a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082ce:	d002      	beq.n	80082d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10b      	bne.n	80082f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80082e6:	d903      	bls.n	80082f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	631a      	str	r2, [r3, #48]	; 0x30
 80082ee:	e002      	b.n	80082f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	431a      	orrs	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	431a      	orrs	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008314:	431a      	orrs	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	69db      	ldr	r3, [r3, #28]
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	ea42 0103 	orr.w	r1, r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	0c1b      	lsrs	r3, r3, #16
 8008336:	f003 0204 	and.w	r2, r3, #4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	ea42 0103 	orr.w	r1, r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69da      	ldr	r2, [r3, #28]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	603b      	str	r3, [r7, #0]
 800838c:	4613      	mov	r3, r2
 800838e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800839a:	2b01      	cmp	r3, #1
 800839c:	d101      	bne.n	80083a2 <HAL_SPI_Transmit+0x22>
 800839e:	2302      	movs	r3, #2
 80083a0:	e150      	b.n	8008644 <HAL_SPI_Transmit+0x2c4>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083aa:	f7fb f869 	bl	8003480 <HAL_GetTick>
 80083ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d002      	beq.n	80083c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80083c0:	2302      	movs	r3, #2
 80083c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083c4:	e135      	b.n	8008632 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_SPI_Transmit+0x52>
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80083d6:	e12c      	b.n	8008632 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2203      	movs	r2, #3
 80083dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	88fa      	ldrh	r2, [r7, #6]
 80083f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	88fa      	ldrh	r2, [r7, #6]
 80083f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008422:	d107      	bne.n	8008434 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008432:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	d007      	beq.n	8008452 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008450:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800845a:	d94b      	bls.n	80084f4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <HAL_SPI_Transmit+0xea>
 8008464:	8afb      	ldrh	r3, [r7, #22]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d13e      	bne.n	80084e8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	881a      	ldrh	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b01      	subs	r3, #1
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800848e:	e02b      	b.n	80084e8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b02      	cmp	r3, #2
 800849c:	d112      	bne.n	80084c4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	881a      	ldrh	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	1c9a      	adds	r2, r3, #2
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	3b01      	subs	r3, #1
 80084bc:	b29a      	uxth	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084c2:	e011      	b.n	80084e8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084c4:	f7fa ffdc 	bl	8003480 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d803      	bhi.n	80084dc <HAL_SPI_Transmit+0x15c>
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084da:	d102      	bne.n	80084e2 <HAL_SPI_Transmit+0x162>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d102      	bne.n	80084e8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80084e6:	e0a4      	b.n	8008632 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1ce      	bne.n	8008490 <HAL_SPI_Transmit+0x110>
 80084f2:	e07c      	b.n	80085ee <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <HAL_SPI_Transmit+0x182>
 80084fc:	8afb      	ldrh	r3, [r7, #22]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d170      	bne.n	80085e4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b01      	cmp	r3, #1
 800850a:	d912      	bls.n	8008532 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008510:	881a      	ldrh	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851c:	1c9a      	adds	r2, r3, #2
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b02      	subs	r3, #2
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008530:	e058      	b.n	80085e4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	330c      	adds	r3, #12
 800853c:	7812      	ldrb	r2, [r2, #0]
 800853e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008558:	e044      	b.n	80085e4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b02      	cmp	r3, #2
 8008566:	d12b      	bne.n	80085c0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b01      	cmp	r3, #1
 8008570:	d912      	bls.n	8008598 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	881a      	ldrh	r2, [r3, #0]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	1c9a      	adds	r2, r3, #2
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800858c:	b29b      	uxth	r3, r3
 800858e:	3b02      	subs	r3, #2
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008596:	e025      	b.n	80085e4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	7812      	ldrb	r2, [r2, #0]
 80085a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085be:	e011      	b.n	80085e4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085c0:	f7fa ff5e 	bl	8003480 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d803      	bhi.n	80085d8 <HAL_SPI_Transmit+0x258>
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d6:	d102      	bne.n	80085de <HAL_SPI_Transmit+0x25e>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80085e2:	e026      	b.n	8008632 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1b5      	bne.n	800855a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 fca2 	bl	8008f3c <SPI_EndRxTxTransaction>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2220      	movs	r2, #32
 8008602:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800860c:	2300      	movs	r3, #0
 800860e:	613b      	str	r3, [r7, #16]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	613b      	str	r3, [r7, #16]
 8008620:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	77fb      	strb	r3, [r7, #31]
 800862e:	e000      	b.n	8008632 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8008630:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008642:	7ffb      	ldrb	r3, [r7, #31]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3720      	adds	r7, #32
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008668:	d112      	bne.n	8008690 <HAL_SPI_Receive+0x44>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10e      	bne.n	8008690 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2204      	movs	r2, #4
 8008676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800867a:	88fa      	ldrh	r2, [r7, #6]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	4613      	mov	r3, r2
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	68b9      	ldr	r1, [r7, #8]
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f908 	bl	800889c <HAL_SPI_TransmitReceive>
 800868c:	4603      	mov	r3, r0
 800868e:	e101      	b.n	8008894 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <HAL_SPI_Receive+0x52>
 800869a:	2302      	movs	r3, #2
 800869c:	e0fa      	b.n	8008894 <HAL_SPI_Receive+0x248>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086a6:	f7fa feeb 	bl	8003480 <HAL_GetTick>
 80086aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d002      	beq.n	80086be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80086b8:	2302      	movs	r3, #2
 80086ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086bc:	e0e1      	b.n	8008882 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d002      	beq.n	80086ca <HAL_SPI_Receive+0x7e>
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d102      	bne.n	80086d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80086ce:	e0d8      	b.n	8008882 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2204      	movs	r2, #4
 80086d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	88fa      	ldrh	r2, [r7, #6]
 80086e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800871a:	d908      	bls.n	800872e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800872a:	605a      	str	r2, [r3, #4]
 800872c:	e007      	b.n	800873e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800873c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008746:	d107      	bne.n	8008758 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008756:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d007      	beq.n	8008776 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008774:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800877e:	d867      	bhi.n	8008850 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008780:	e030      	b.n	80087e4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b01      	cmp	r3, #1
 800878e:	d117      	bne.n	80087c0 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f103 020c 	add.w	r2, r3, #12
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	7812      	ldrb	r2, [r2, #0]
 800879e:	b2d2      	uxtb	r2, r2
 80087a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3b01      	subs	r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80087be:	e011      	b.n	80087e4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087c0:	f7fa fe5e 	bl	8003480 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d803      	bhi.n	80087d8 <HAL_SPI_Receive+0x18c>
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d6:	d102      	bne.n	80087de <HAL_SPI_Receive+0x192>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80087e2:	e04e      	b.n	8008882 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1c8      	bne.n	8008782 <HAL_SPI_Receive+0x136>
 80087f0:	e034      	b.n	800885c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d115      	bne.n	800882c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	b292      	uxth	r2, r2
 800880c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	1c9a      	adds	r2, r3, #2
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800881e:	b29b      	uxth	r3, r3
 8008820:	3b01      	subs	r3, #1
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800882a:	e011      	b.n	8008850 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800882c:	f7fa fe28 	bl	8003480 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	429a      	cmp	r2, r3
 800883a:	d803      	bhi.n	8008844 <HAL_SPI_Receive+0x1f8>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008842:	d102      	bne.n	800884a <HAL_SPI_Receive+0x1fe>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d102      	bne.n	8008850 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800884e:	e018      	b.n	8008882 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1ca      	bne.n	80087f2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f000 fb13 	bl	8008e8c <SPI_EndRxTransaction>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2220      	movs	r2, #32
 8008870:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	75fb      	strb	r3, [r7, #23]
 800887e:	e000      	b.n	8008882 <HAL_SPI_Receive+0x236>
  }

error :
 8008880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008892:	7dfb      	ldrb	r3, [r7, #23]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	; 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80088aa:	2301      	movs	r3, #1
 80088ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d101      	bne.n	80088c2 <HAL_SPI_TransmitReceive+0x26>
 80088be:	2302      	movs	r3, #2
 80088c0:	e1fb      	b.n	8008cba <HAL_SPI_TransmitReceive+0x41e>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088ca:	f7fa fdd9 	bl	8003480 <HAL_GetTick>
 80088ce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80088d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80088de:	887b      	ldrh	r3, [r7, #2]
 80088e0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80088e2:	887b      	ldrh	r3, [r7, #2]
 80088e4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80088e6:	7efb      	ldrb	r3, [r7, #27]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d00e      	beq.n	800890a <HAL_SPI_TransmitReceive+0x6e>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088f2:	d106      	bne.n	8008902 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <HAL_SPI_TransmitReceive+0x66>
 80088fc:	7efb      	ldrb	r3, [r7, #27]
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d003      	beq.n	800890a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008902:	2302      	movs	r3, #2
 8008904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008908:	e1cd      	b.n	8008ca6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <HAL_SPI_TransmitReceive+0x80>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_SPI_TransmitReceive+0x80>
 8008916:	887b      	ldrh	r3, [r7, #2]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d103      	bne.n	8008924 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008922:	e1c0      	b.n	8008ca6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b04      	cmp	r3, #4
 800892e:	d003      	beq.n	8008938 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2205      	movs	r2, #5
 8008934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	887a      	ldrh	r2, [r7, #2]
 8008948:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	887a      	ldrh	r2, [r7, #2]
 8008950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	887a      	ldrh	r2, [r7, #2]
 800895e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	887a      	ldrh	r2, [r7, #2]
 8008964:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800897a:	d802      	bhi.n	8008982 <HAL_SPI_TransmitReceive+0xe6>
 800897c:	8a3b      	ldrh	r3, [r7, #16]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d908      	bls.n	8008994 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685a      	ldr	r2, [r3, #4]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008990:	605a      	str	r2, [r3, #4]
 8008992:	e007      	b.n	80089a4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ae:	2b40      	cmp	r3, #64	; 0x40
 80089b0:	d007      	beq.n	80089c2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089ca:	d97c      	bls.n	8008ac6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <HAL_SPI_TransmitReceive+0x13e>
 80089d4:	8a7b      	ldrh	r3, [r7, #18]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d169      	bne.n	8008aae <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089de:	881a      	ldrh	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ea:	1c9a      	adds	r2, r3, #2
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089fe:	e056      	b.n	8008aae <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	d11b      	bne.n	8008a46 <HAL_SPI_TransmitReceive+0x1aa>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d016      	beq.n	8008a46 <HAL_SPI_TransmitReceive+0x1aa>
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d113      	bne.n	8008a46 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a22:	881a      	ldrh	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	1c9a      	adds	r2, r3, #2
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d11c      	bne.n	8008a8e <HAL_SPI_TransmitReceive+0x1f2>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d016      	beq.n	8008a8e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	b292      	uxth	r2, r2
 8008a6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a72:	1c9a      	adds	r2, r3, #2
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a8e:	f7fa fcf7 	bl	8003480 <HAL_GetTick>
 8008a92:	4602      	mov	r2, r0
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d807      	bhi.n	8008aae <HAL_SPI_TransmitReceive+0x212>
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa4:	d003      	beq.n	8008aae <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008aac:	e0fb      	b.n	8008ca6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1a3      	bne.n	8008a00 <HAL_SPI_TransmitReceive+0x164>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d19d      	bne.n	8008a00 <HAL_SPI_TransmitReceive+0x164>
 8008ac4:	e0df      	b.n	8008c86 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <HAL_SPI_TransmitReceive+0x23a>
 8008ace:	8a7b      	ldrh	r3, [r7, #18]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	f040 80cb 	bne.w	8008c6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d912      	bls.n	8008b06 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae4:	881a      	ldrh	r2, [r3, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af0:	1c9a      	adds	r2, r3, #2
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	3b02      	subs	r3, #2
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b04:	e0b2      	b.n	8008c6c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	7812      	ldrb	r2, [r2, #0]
 8008b12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29a      	uxth	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b2c:	e09e      	b.n	8008c6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d134      	bne.n	8008ba6 <HAL_SPI_TransmitReceive+0x30a>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d02f      	beq.n	8008ba6 <HAL_SPI_TransmitReceive+0x30a>
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d12c      	bne.n	8008ba6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d912      	bls.n	8008b7c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5a:	881a      	ldrh	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	1c9a      	adds	r2, r3, #2
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b02      	subs	r3, #2
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b7a:	e012      	b.n	8008ba2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	330c      	adds	r3, #12
 8008b86:	7812      	ldrb	r2, [r2, #0]
 8008b88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8e:	1c5a      	adds	r2, r3, #1
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d148      	bne.n	8008c46 <HAL_SPI_TransmitReceive+0x3aa>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d042      	beq.n	8008c46 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d923      	bls.n	8008c14 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd6:	b292      	uxth	r2, r2
 8008bd8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bde:	1c9a      	adds	r2, r3, #2
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b02      	subs	r3, #2
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d81f      	bhi.n	8008c42 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c10:	605a      	str	r2, [r3, #4]
 8008c12:	e016      	b.n	8008c42 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f103 020c 	add.w	r2, r3, #12
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c20:	7812      	ldrb	r2, [r2, #0]
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c42:	2301      	movs	r3, #1
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008c46:	f7fa fc1b 	bl	8003480 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d803      	bhi.n	8008c5e <HAL_SPI_TransmitReceive+0x3c2>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d102      	bne.n	8008c64 <HAL_SPI_TransmitReceive+0x3c8>
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008c6a:	e01c      	b.n	8008ca6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f47f af5b 	bne.w	8008b2e <HAL_SPI_TransmitReceive+0x292>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f47f af54 	bne.w	8008b2e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 f956 	bl	8008f3c <SPI_EndRxTxTransaction>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d006      	beq.n	8008ca4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	661a      	str	r2, [r3, #96]	; 0x60
 8008ca2:	e000      	b.n	8008ca6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008ca4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3728      	adds	r7, #40	; 0x28
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b083      	sub	sp, #12
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008cd0:	b2db      	uxtb	r3, r3
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	60b9      	str	r1, [r7, #8]
 8008ce8:	603b      	str	r3, [r7, #0]
 8008cea:	4613      	mov	r3, r2
 8008cec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cee:	e04c      	b.n	8008d8a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf6:	d048      	beq.n	8008d8a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008cf8:	f7fa fbc2 	bl	8003480 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d902      	bls.n	8008d0e <SPI_WaitFlagStateUntilTimeout+0x30>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d13d      	bne.n	8008d8a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d26:	d111      	bne.n	8008d4c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d30:	d004      	beq.n	8008d3c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d3a:	d107      	bne.n	8008d4c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d54:	d10f      	bne.n	8008d76 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e00f      	b.n	8008daa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4013      	ands	r3, r2
 8008d94:	68ba      	ldr	r2, [r7, #8]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	bf0c      	ite	eq
 8008d9a:	2301      	moveq	r3, #1
 8008d9c:	2300      	movne	r3, #0
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d1a3      	bne.n	8008cf0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	607a      	str	r2, [r7, #4]
 8008dbe:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8008dc0:	e057      	b.n	8008e72 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008dc8:	d106      	bne.n	8008dd8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dde:	d048      	beq.n	8008e72 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008de0:	f7fa fb4e 	bl	8003480 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d902      	bls.n	8008df6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d13d      	bne.n	8008e72 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e0e:	d111      	bne.n	8008e34 <SPI_WaitFifoStateUntilTimeout+0x82>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e18:	d004      	beq.n	8008e24 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e22:	d107      	bne.n	8008e34 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e3c:	d10f      	bne.n	8008e5e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	e008      	b.n	8008e84 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d19f      	bne.n	8008dc2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af02      	add	r7, sp, #8
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ea0:	d111      	bne.n	8008ec6 <SPI_EndRxTransaction+0x3a>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eaa:	d004      	beq.n	8008eb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb4:	d107      	bne.n	8008ec6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ec4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2180      	movs	r1, #128	; 0x80
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7ff ff04 	bl	8008cde <SPI_WaitFlagStateUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d007      	beq.n	8008eec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee0:	f043 0220 	orr.w	r2, r3, #32
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e023      	b.n	8008f34 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef4:	d11d      	bne.n	8008f32 <SPI_EndRxTransaction+0xa6>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008efe:	d004      	beq.n	8008f0a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f08:	d113      	bne.n	8008f32 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff ff4b 	bl	8008db2 <SPI_WaitFifoStateUntilTimeout>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d007      	beq.n	8008f32 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f26:	f043 0220 	orr.w	r2, r3, #32
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e000      	b.n	8008f34 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af02      	add	r7, sp, #8
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff ff2c 	bl	8008db2 <SPI_WaitFifoStateUntilTimeout>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d007      	beq.n	8008f70 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f64:	f043 0220 	orr.w	r2, r3, #32
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e027      	b.n	8008fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2200      	movs	r2, #0
 8008f78:	2180      	movs	r1, #128	; 0x80
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f7ff feaf 	bl	8008cde <SPI_WaitFlagStateUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d007      	beq.n	8008f96 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f8a:	f043 0220 	orr.w	r2, r3, #32
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e014      	b.n	8008fc0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	9300      	str	r3, [sp, #0]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff ff05 	bl	8008db2 <SPI_WaitFifoStateUntilTimeout>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d007      	beq.n	8008fbe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fb2:	f043 0220 	orr.w	r2, r3, #32
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e000      	b.n	8008fc0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e01d      	b.n	8009016 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7f9 fe08 	bl	8002c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	3304      	adds	r3, #4
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f000 fa2e 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2201      	movs	r2, #1
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fe40 	bl	8009cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a17      	ldr	r2, [pc, #92]	; (800909c <HAL_TIM_PWM_Start+0x7c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_TIM_PWM_Start+0x2c>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <HAL_TIM_PWM_Start+0x80>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d101      	bne.n	8009050 <HAL_TIM_PWM_Start+0x30>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <HAL_TIM_PWM_Start+0x32>
 8009050:	2300      	movs	r3, #0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d007      	beq.n	8009066 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009064:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <HAL_TIM_PWM_Start+0x84>)
 800906e:	4013      	ands	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2b06      	cmp	r3, #6
 8009076:	d00b      	beq.n	8009090 <HAL_TIM_PWM_Start+0x70>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800907e:	d007      	beq.n	8009090 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0201 	orr.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	40010000 	.word	0x40010000
 80090a0:	40010400 	.word	0x40010400
 80090a4:	00010007 	.word	0x00010007

080090a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e01d      	b.n	80090f6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d106      	bne.n	80090d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f7f9 fd54 	bl	8002b7c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2202      	movs	r2, #2
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4619      	mov	r1, r3
 80090e6:	4610      	mov	r0, r2
 80090e8:	f000 f9be 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2201      	movs	r2, #1
 80090f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009114:	2302      	movs	r3, #2
 8009116:	e08a      	b.n	800922e <HAL_TIM_IC_ConfigChannel+0x130>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2202      	movs	r2, #2
 8009124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d11b      	bne.n	8009166 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	6819      	ldr	r1, [r3, #0]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f000 fc91 	bl	8009a64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	699a      	ldr	r2, [r3, #24]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 020c 	bic.w	r2, r2, #12
 8009150:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6999      	ldr	r1, [r3, #24]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	430a      	orrs	r2, r1
 8009162:	619a      	str	r2, [r3, #24]
 8009164:	e05a      	b.n	800921c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b04      	cmp	r3, #4
 800916a:	d11c      	bne.n	80091a6 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6818      	ldr	r0, [r3, #0]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	f000 fce6 	bl	8009b4c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800918e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6999      	ldr	r1, [r3, #24]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	021a      	lsls	r2, r3, #8
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	619a      	str	r2, [r3, #24]
 80091a4:	e03a      	b.n	800921c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b08      	cmp	r3, #8
 80091aa:	d11b      	bne.n	80091e4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	f000 fd03 	bl	8009bc6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69da      	ldr	r2, [r3, #28]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 020c 	bic.w	r2, r2, #12
 80091ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	69d9      	ldr	r1, [r3, #28]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	689a      	ldr	r2, [r3, #8]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	61da      	str	r2, [r3, #28]
 80091e2:	e01b      	b.n	800921c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	6819      	ldr	r1, [r3, #0]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f000 fd23 	bl	8009c3e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	69da      	ldr	r2, [r3, #28]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009206:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	69d9      	ldr	r1, [r3, #28]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	021a      	lsls	r2, r3, #8
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800924a:	2b01      	cmp	r3, #1
 800924c:	d101      	bne.n	8009252 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800924e:	2302      	movs	r3, #2
 8009250:	e105      	b.n	800945e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b14      	cmp	r3, #20
 8009266:	f200 80f0 	bhi.w	800944a <HAL_TIM_PWM_ConfigChannel+0x212>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	080092c5 	.word	0x080092c5
 8009274:	0800944b 	.word	0x0800944b
 8009278:	0800944b 	.word	0x0800944b
 800927c:	0800944b 	.word	0x0800944b
 8009280:	08009305 	.word	0x08009305
 8009284:	0800944b 	.word	0x0800944b
 8009288:	0800944b 	.word	0x0800944b
 800928c:	0800944b 	.word	0x0800944b
 8009290:	08009347 	.word	0x08009347
 8009294:	0800944b 	.word	0x0800944b
 8009298:	0800944b 	.word	0x0800944b
 800929c:	0800944b 	.word	0x0800944b
 80092a0:	08009387 	.word	0x08009387
 80092a4:	0800944b 	.word	0x0800944b
 80092a8:	0800944b 	.word	0x0800944b
 80092ac:	0800944b 	.word	0x0800944b
 80092b0:	080093c9 	.word	0x080093c9
 80092b4:	0800944b 	.word	0x0800944b
 80092b8:	0800944b 	.word	0x0800944b
 80092bc:	0800944b 	.word	0x0800944b
 80092c0:	08009409 	.word	0x08009409
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 f96c 	bl	80095a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	699a      	ldr	r2, [r3, #24]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f042 0208 	orr.w	r2, r2, #8
 80092de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699a      	ldr	r2, [r3, #24]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0204 	bic.w	r2, r2, #4
 80092ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6999      	ldr	r1, [r3, #24]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	691a      	ldr	r2, [r3, #16]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	619a      	str	r2, [r3, #24]
      break;
 8009302:	e0a3      	b.n	800944c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68b9      	ldr	r1, [r7, #8]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f9be 	bl	800968c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699a      	ldr	r2, [r3, #24]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800931e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699a      	ldr	r2, [r3, #24]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800932e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6999      	ldr	r1, [r3, #24]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	021a      	lsls	r2, r3, #8
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	619a      	str	r2, [r3, #24]
      break;
 8009344:	e082      	b.n	800944c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fa15 	bl	800977c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0208 	orr.w	r2, r2, #8
 8009360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69da      	ldr	r2, [r3, #28]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0204 	bic.w	r2, r2, #4
 8009370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69d9      	ldr	r1, [r3, #28]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	430a      	orrs	r2, r1
 8009382:	61da      	str	r2, [r3, #28]
      break;
 8009384:	e062      	b.n	800944c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	4618      	mov	r0, r3
 800938e:	f000 fa6b 	bl	8009868 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69da      	ldr	r2, [r3, #28]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	69da      	ldr	r2, [r3, #28]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69d9      	ldr	r1, [r3, #28]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	021a      	lsls	r2, r3, #8
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	61da      	str	r2, [r3, #28]
      break;
 80093c6:	e041      	b.n	800944c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 faa2 	bl	8009918 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f042 0208 	orr.w	r2, r2, #8
 80093e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0204 	bic.w	r2, r2, #4
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	691a      	ldr	r2, [r3, #16]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009406:	e021      	b.n	800944c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	4618      	mov	r0, r3
 8009410:	f000 fad4 	bl	80099bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	021a      	lsls	r2, r3, #8
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009448:	e000      	b.n	800944c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800944a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop

08009468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a40      	ldr	r2, [pc, #256]	; (800957c <TIM_Base_SetConfig+0x114>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d013      	beq.n	80094a8 <TIM_Base_SetConfig+0x40>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009486:	d00f      	beq.n	80094a8 <TIM_Base_SetConfig+0x40>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a3d      	ldr	r2, [pc, #244]	; (8009580 <TIM_Base_SetConfig+0x118>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d00b      	beq.n	80094a8 <TIM_Base_SetConfig+0x40>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a3c      	ldr	r2, [pc, #240]	; (8009584 <TIM_Base_SetConfig+0x11c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d007      	beq.n	80094a8 <TIM_Base_SetConfig+0x40>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a3b      	ldr	r2, [pc, #236]	; (8009588 <TIM_Base_SetConfig+0x120>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d003      	beq.n	80094a8 <TIM_Base_SetConfig+0x40>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a3a      	ldr	r2, [pc, #232]	; (800958c <TIM_Base_SetConfig+0x124>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d108      	bne.n	80094ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a2f      	ldr	r2, [pc, #188]	; (800957c <TIM_Base_SetConfig+0x114>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d02b      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c8:	d027      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a2c      	ldr	r2, [pc, #176]	; (8009580 <TIM_Base_SetConfig+0x118>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d023      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a2b      	ldr	r2, [pc, #172]	; (8009584 <TIM_Base_SetConfig+0x11c>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d01f      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a2a      	ldr	r2, [pc, #168]	; (8009588 <TIM_Base_SetConfig+0x120>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d01b      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a29      	ldr	r2, [pc, #164]	; (800958c <TIM_Base_SetConfig+0x124>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d017      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a28      	ldr	r2, [pc, #160]	; (8009590 <TIM_Base_SetConfig+0x128>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d013      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a27      	ldr	r2, [pc, #156]	; (8009594 <TIM_Base_SetConfig+0x12c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00f      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a26      	ldr	r2, [pc, #152]	; (8009598 <TIM_Base_SetConfig+0x130>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00b      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a25      	ldr	r2, [pc, #148]	; (800959c <TIM_Base_SetConfig+0x134>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d007      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a24      	ldr	r2, [pc, #144]	; (80095a0 <TIM_Base_SetConfig+0x138>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d003      	beq.n	800951a <TIM_Base_SetConfig+0xb2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a23      	ldr	r2, [pc, #140]	; (80095a4 <TIM_Base_SetConfig+0x13c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d108      	bne.n	800952c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a0a      	ldr	r2, [pc, #40]	; (800957c <TIM_Base_SetConfig+0x114>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d003      	beq.n	8009560 <TIM_Base_SetConfig+0xf8>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a0c      	ldr	r2, [pc, #48]	; (800958c <TIM_Base_SetConfig+0x124>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d103      	bne.n	8009568 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	615a      	str	r2, [r3, #20]
}
 800956e:	bf00      	nop
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	40010000 	.word	0x40010000
 8009580:	40000400 	.word	0x40000400
 8009584:	40000800 	.word	0x40000800
 8009588:	40000c00 	.word	0x40000c00
 800958c:	40010400 	.word	0x40010400
 8009590:	40014000 	.word	0x40014000
 8009594:	40014400 	.word	0x40014400
 8009598:	40014800 	.word	0x40014800
 800959c:	40001800 	.word	0x40001800
 80095a0:	40001c00 	.word	0x40001c00
 80095a4:	40002000 	.word	0x40002000

080095a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	f023 0201 	bic.w	r2, r3, #1
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	4b2b      	ldr	r3, [pc, #172]	; (8009680 <TIM_OC1_SetConfig+0xd8>)
 80095d4:	4013      	ands	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 0303 	bic.w	r3, r3, #3
 80095de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f023 0302 	bic.w	r3, r3, #2
 80095f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a21      	ldr	r2, [pc, #132]	; (8009684 <TIM_OC1_SetConfig+0xdc>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d003      	beq.n	800960c <TIM_OC1_SetConfig+0x64>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a20      	ldr	r2, [pc, #128]	; (8009688 <TIM_OC1_SetConfig+0xe0>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d10c      	bne.n	8009626 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f023 0308 	bic.w	r3, r3, #8
 8009612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	4313      	orrs	r3, r2
 800961c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f023 0304 	bic.w	r3, r3, #4
 8009624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a16      	ldr	r2, [pc, #88]	; (8009684 <TIM_OC1_SetConfig+0xdc>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d003      	beq.n	8009636 <TIM_OC1_SetConfig+0x8e>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a15      	ldr	r2, [pc, #84]	; (8009688 <TIM_OC1_SetConfig+0xe0>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d111      	bne.n	800965a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800963c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	4313      	orrs	r3, r2
 800964e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4313      	orrs	r3, r2
 8009658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	621a      	str	r2, [r3, #32]
}
 8009674:	bf00      	nop
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	fffeff8f 	.word	0xfffeff8f
 8009684:	40010000 	.word	0x40010000
 8009688:	40010400 	.word	0x40010400

0800968c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	f023 0210 	bic.w	r2, r3, #16
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	4b2e      	ldr	r3, [pc, #184]	; (8009770 <TIM_OC2_SetConfig+0xe4>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f023 0320 	bic.w	r3, r3, #32
 80096d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a23      	ldr	r2, [pc, #140]	; (8009774 <TIM_OC2_SetConfig+0xe8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d003      	beq.n	80096f4 <TIM_OC2_SetConfig+0x68>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a22      	ldr	r2, [pc, #136]	; (8009778 <TIM_OC2_SetConfig+0xec>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d10d      	bne.n	8009710 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	011b      	lsls	r3, r3, #4
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	4313      	orrs	r3, r2
 8009706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800970e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a18      	ldr	r2, [pc, #96]	; (8009774 <TIM_OC2_SetConfig+0xe8>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d003      	beq.n	8009720 <TIM_OC2_SetConfig+0x94>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a17      	ldr	r2, [pc, #92]	; (8009778 <TIM_OC2_SetConfig+0xec>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d113      	bne.n	8009748 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800972e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	4313      	orrs	r3, r2
 800973a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	4313      	orrs	r3, r2
 8009746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	621a      	str	r2, [r3, #32]
}
 8009762:	bf00      	nop
 8009764:	371c      	adds	r7, #28
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	feff8fff 	.word	0xfeff8fff
 8009774:	40010000 	.word	0x40010000
 8009778:	40010400 	.word	0x40010400

0800977c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	4b2d      	ldr	r3, [pc, #180]	; (800985c <TIM_OC3_SetConfig+0xe0>)
 80097a8:	4013      	ands	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0303 	bic.w	r3, r3, #3
 80097b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	021b      	lsls	r3, r3, #8
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a22      	ldr	r2, [pc, #136]	; (8009860 <TIM_OC3_SetConfig+0xe4>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d003      	beq.n	80097e2 <TIM_OC3_SetConfig+0x66>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a21      	ldr	r2, [pc, #132]	; (8009864 <TIM_OC3_SetConfig+0xe8>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d10d      	bne.n	80097fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	021b      	lsls	r3, r3, #8
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a17      	ldr	r2, [pc, #92]	; (8009860 <TIM_OC3_SetConfig+0xe4>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d003      	beq.n	800980e <TIM_OC3_SetConfig+0x92>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a16      	ldr	r2, [pc, #88]	; (8009864 <TIM_OC3_SetConfig+0xe8>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d113      	bne.n	8009836 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800981c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	695b      	ldr	r3, [r3, #20]
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	4313      	orrs	r3, r2
 8009828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	011b      	lsls	r3, r3, #4
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	4313      	orrs	r3, r2
 8009834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	693a      	ldr	r2, [r7, #16]
 800983a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	685a      	ldr	r2, [r3, #4]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	621a      	str	r2, [r3, #32]
}
 8009850:	bf00      	nop
 8009852:	371c      	adds	r7, #28
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	fffeff8f 	.word	0xfffeff8f
 8009860:	40010000 	.word	0x40010000
 8009864:	40010400 	.word	0x40010400

08009868 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4b1e      	ldr	r3, [pc, #120]	; (800990c <TIM_OC4_SetConfig+0xa4>)
 8009894:	4013      	ands	r3, r2
 8009896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800989e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	021b      	lsls	r3, r3, #8
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	689b      	ldr	r3, [r3, #8]
 80098b8:	031b      	lsls	r3, r3, #12
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a13      	ldr	r2, [pc, #76]	; (8009910 <TIM_OC4_SetConfig+0xa8>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d003      	beq.n	80098d0 <TIM_OC4_SetConfig+0x68>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a12      	ldr	r2, [pc, #72]	; (8009914 <TIM_OC4_SetConfig+0xac>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d109      	bne.n	80098e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	019b      	lsls	r3, r3, #6
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	621a      	str	r2, [r3, #32]
}
 80098fe:	bf00      	nop
 8009900:	371c      	adds	r7, #28
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	feff8fff 	.word	0xfeff8fff
 8009910:	40010000 	.word	0x40010000
 8009914:	40010400 	.word	0x40010400

08009918 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009918:	b480      	push	{r7}
 800991a:	b087      	sub	sp, #28
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	4b1b      	ldr	r3, [pc, #108]	; (80099b0 <TIM_OC5_SetConfig+0x98>)
 8009944:	4013      	ands	r3, r2
 8009946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009958:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	041b      	lsls	r3, r3, #16
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	4313      	orrs	r3, r2
 8009964:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a12      	ldr	r2, [pc, #72]	; (80099b4 <TIM_OC5_SetConfig+0x9c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d003      	beq.n	8009976 <TIM_OC5_SetConfig+0x5e>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a11      	ldr	r2, [pc, #68]	; (80099b8 <TIM_OC5_SetConfig+0xa0>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d109      	bne.n	800998a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800997c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	021b      	lsls	r3, r3, #8
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	4313      	orrs	r3, r2
 8009988:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	621a      	str	r2, [r3, #32]
}
 80099a4:	bf00      	nop
 80099a6:	371c      	adds	r7, #28
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	fffeff8f 	.word	0xfffeff8f
 80099b4:	40010000 	.word	0x40010000
 80099b8:	40010400 	.word	0x40010400

080099bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	4b1c      	ldr	r3, [pc, #112]	; (8009a58 <TIM_OC6_SetConfig+0x9c>)
 80099e8:	4013      	ands	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	021b      	lsls	r3, r3, #8
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	051b      	lsls	r3, r3, #20
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a13      	ldr	r2, [pc, #76]	; (8009a5c <TIM_OC6_SetConfig+0xa0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d003      	beq.n	8009a1c <TIM_OC6_SetConfig+0x60>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a12      	ldr	r2, [pc, #72]	; (8009a60 <TIM_OC6_SetConfig+0xa4>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d109      	bne.n	8009a30 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	695b      	ldr	r3, [r3, #20]
 8009a28:	029b      	lsls	r3, r3, #10
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	621a      	str	r2, [r3, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	feff8fff 	.word	0xfeff8fff
 8009a5c:	40010000 	.word	0x40010000
 8009a60:	40010400 	.word	0x40010400

08009a64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	f023 0201 	bic.w	r2, r3, #1
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6a1b      	ldr	r3, [r3, #32]
 8009a88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4a28      	ldr	r2, [pc, #160]	; (8009b30 <TIM_TI1_SetConfig+0xcc>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d01b      	beq.n	8009aca <TIM_TI1_SetConfig+0x66>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a98:	d017      	beq.n	8009aca <TIM_TI1_SetConfig+0x66>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4a25      	ldr	r2, [pc, #148]	; (8009b34 <TIM_TI1_SetConfig+0xd0>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d013      	beq.n	8009aca <TIM_TI1_SetConfig+0x66>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a24      	ldr	r2, [pc, #144]	; (8009b38 <TIM_TI1_SetConfig+0xd4>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d00f      	beq.n	8009aca <TIM_TI1_SetConfig+0x66>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4a23      	ldr	r2, [pc, #140]	; (8009b3c <TIM_TI1_SetConfig+0xd8>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d00b      	beq.n	8009aca <TIM_TI1_SetConfig+0x66>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	4a22      	ldr	r2, [pc, #136]	; (8009b40 <TIM_TI1_SetConfig+0xdc>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d007      	beq.n	8009aca <TIM_TI1_SetConfig+0x66>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4a21      	ldr	r2, [pc, #132]	; (8009b44 <TIM_TI1_SetConfig+0xe0>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d003      	beq.n	8009aca <TIM_TI1_SetConfig+0x66>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	4a20      	ldr	r2, [pc, #128]	; (8009b48 <TIM_TI1_SetConfig+0xe4>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d101      	bne.n	8009ace <TIM_TI1_SetConfig+0x6a>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e000      	b.n	8009ad0 <TIM_TI1_SetConfig+0x6c>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d008      	beq.n	8009ae6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	f023 0303 	bic.w	r3, r3, #3
 8009ada:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]
 8009ae4:	e003      	b.n	8009aee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f043 0301 	orr.w	r3, r3, #1
 8009aec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009af4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	011b      	lsls	r3, r3, #4
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	f023 030a 	bic.w	r3, r3, #10
 8009b08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	f003 030a 	and.w	r3, r3, #10
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	693a      	ldr	r2, [r7, #16]
 8009b20:	621a      	str	r2, [r3, #32]
}
 8009b22:	bf00      	nop
 8009b24:	371c      	adds	r7, #28
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40000800 	.word	0x40000800
 8009b3c:	40000c00 	.word	0x40000c00
 8009b40:	40010400 	.word	0x40010400
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40001800 	.word	0x40001800

08009b4c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	f023 0210 	bic.w	r2, r3, #16
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	021b      	lsls	r3, r3, #8
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	031b      	lsls	r3, r3, #12
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009ba8:	693a      	ldr	r2, [r7, #16]
 8009baa:	4313      	orrs	r3, r2
 8009bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	621a      	str	r2, [r3, #32]
}
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b087      	sub	sp, #28
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	60f8      	str	r0, [r7, #12]
 8009bce:	60b9      	str	r1, [r7, #8]
 8009bd0:	607a      	str	r2, [r7, #4]
 8009bd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	69db      	ldr	r3, [r3, #28]
 8009be4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	f023 0303 	bic.w	r3, r3, #3
 8009bf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009c16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	021b      	lsls	r3, r3, #8
 8009c1c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	621a      	str	r2, [r3, #32]
}
 8009c32:	bf00      	nop
 8009c34:	371c      	adds	r7, #28
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009c3e:	b480      	push	{r7}
 8009c40:	b087      	sub	sp, #28
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	607a      	str	r2, [r7, #4]
 8009c4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	021b      	lsls	r3, r3, #8
 8009c70:	697a      	ldr	r2, [r7, #20]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	031b      	lsls	r3, r3, #12
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009c90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	031b      	lsls	r3, r3, #12
 8009c96:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	697a      	ldr	r2, [r7, #20]
 8009ca4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	693a      	ldr	r2, [r7, #16]
 8009caa:	621a      	str	r2, [r3, #32]
}
 8009cac:	bf00      	nop
 8009cae:	371c      	adds	r7, #28
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f003 031f 	and.w	r3, r3, #31
 8009cca:	2201      	movs	r2, #1
 8009ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6a1a      	ldr	r2, [r3, #32]
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	401a      	ands	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6a1a      	ldr	r2, [r3, #32]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	f003 031f 	and.w	r3, r3, #31
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	fa01 f303 	lsl.w	r3, r1, r3
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	621a      	str	r2, [r3, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
	...

08009d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d101      	bne.n	8009d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d18:	2302      	movs	r3, #2
 8009d1a:	e06d      	b.n	8009df8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a30      	ldr	r2, [pc, #192]	; (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d004      	beq.n	8009d50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a2f      	ldr	r2, [pc, #188]	; (8009e08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d108      	bne.n	8009d62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a20      	ldr	r2, [pc, #128]	; (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d022      	beq.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8e:	d01d      	beq.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a1d      	ldr	r2, [pc, #116]	; (8009e0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d018      	beq.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a1c      	ldr	r2, [pc, #112]	; (8009e10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d013      	beq.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a1a      	ldr	r2, [pc, #104]	; (8009e14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d00e      	beq.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a15      	ldr	r2, [pc, #84]	; (8009e08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d009      	beq.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a16      	ldr	r2, [pc, #88]	; (8009e18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d004      	beq.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a15      	ldr	r2, [pc, #84]	; (8009e1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d10c      	bne.n	8009de6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40010400 	.word	0x40010400
 8009e0c:	40000400 	.word	0x40000400
 8009e10:	40000800 	.word	0x40000800
 8009e14:	40000c00 	.word	0x40000c00
 8009e18:	40014000 	.word	0x40014000
 8009e1c:	40001800 	.word	0x40001800

08009e20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d101      	bne.n	8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e065      	b.n	8009f08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	699b      	ldr	r3, [r3, #24]
 8009eb0:	041b      	lsls	r3, r3, #16
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a16      	ldr	r2, [pc, #88]	; (8009f14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d004      	beq.n	8009eca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a14      	ldr	r2, [pc, #80]	; (8009f18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d115      	bne.n	8009ef6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed4:	051b      	lsls	r3, r3, #20
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	69db      	ldr	r3, [r3, #28]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	40010000 	.word	0x40010000
 8009f18:	40010400 	.word	0x40010400

08009f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d101      	bne.n	8009f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e040      	b.n	8009fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7f8 ff14 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2224      	movs	r2, #36	; 0x24
 8009f48:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0201 	bic.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fb54 	bl	800a608 <UART_SetConfig>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d101      	bne.n	8009f6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e022      	b.n	8009fb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d002      	beq.n	8009f78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fdf2 	bl	800ab5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	685a      	ldr	r2, [r3, #4]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fe79 	bl	800aca0 <UART_CheckIdleState>
 8009fae:	4603      	mov	r3, r0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08a      	sub	sp, #40	; 0x28
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fcc:	2b20      	cmp	r3, #32
 8009fce:	d17f      	bne.n	800a0d0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <HAL_UART_Transmit+0x24>
 8009fd6:	88fb      	ldrh	r3, [r7, #6]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e078      	b.n	800a0d2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d101      	bne.n	8009fee <HAL_UART_Transmit+0x36>
 8009fea:	2302      	movs	r3, #2
 8009fec:	e071      	b.n	800a0d2 <HAL_UART_Transmit+0x11a>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2221      	movs	r2, #33	; 0x21
 800a000:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a002:	f7f9 fa3d 	bl	8003480 <HAL_GetTick>
 800a006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	88fa      	ldrh	r2, [r7, #6]
 800a00c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	88fa      	ldrh	r2, [r7, #6]
 800a014:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a020:	d108      	bne.n	800a034 <HAL_UART_Transmit+0x7c>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	e003      	b.n	800a03c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a044:	e02c      	b.n	800a0a0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2200      	movs	r2, #0
 800a04e:	2180      	movs	r1, #128	; 0x80
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fe6a 	bl	800ad2a <UART_WaitOnFlagUntilTimeout>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e038      	b.n	800a0d2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10b      	bne.n	800a07e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a074:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	3302      	adds	r3, #2
 800a07a:	61bb      	str	r3, [r7, #24]
 800a07c:	e007      	b.n	800a08e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	3301      	adds	r3, #1
 800a08c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a094:	b29b      	uxth	r3, r3
 800a096:	3b01      	subs	r3, #1
 800a098:	b29a      	uxth	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d1cc      	bne.n	800a046 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	9300      	str	r3, [sp, #0]
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2140      	movs	r1, #64	; 0x40
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f000 fe37 	bl	800ad2a <UART_WaitOnFlagUntilTimeout>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e005      	b.n	800a0d2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2220      	movs	r2, #32
 800a0ca:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e000      	b.n	800a0d2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a0d0:	2302      	movs	r3, #2
  }
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3720      	adds	r7, #32
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
	...

0800a0dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0ee:	2b20      	cmp	r3, #32
 800a0f0:	d16c      	bne.n	800a1cc <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <HAL_UART_Receive_DMA+0x22>
 800a0f8:	88fb      	ldrh	r3, [r7, #6]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e065      	b.n	800a1ce <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d101      	bne.n	800a110 <HAL_UART_Receive_DMA+0x34>
 800a10c:	2302      	movs	r3, #2
 800a10e:	e05e      	b.n	800a1ce <HAL_UART_Receive_DMA+0xf2>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	88fa      	ldrh	r2, [r7, #6]
 800a122:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2222      	movs	r2, #34	; 0x22
 800a130:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a136:	2b00      	cmp	r3, #0
 800a138:	d02a      	beq.n	800a190 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a13e:	4a26      	ldr	r2, [pc, #152]	; (800a1d8 <HAL_UART_Receive_DMA+0xfc>)
 800a140:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a146:	4a25      	ldr	r2, [pc, #148]	; (800a1dc <HAL_UART_Receive_DMA+0x100>)
 800a148:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a14e:	4a24      	ldr	r2, [pc, #144]	; (800a1e0 <HAL_UART_Receive_DMA+0x104>)
 800a150:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a156:	2200      	movs	r2, #0
 800a158:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3324      	adds	r3, #36	; 0x24
 800a164:	4619      	mov	r1, r3
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a16a:	461a      	mov	r2, r3
 800a16c:	88fb      	ldrh	r3, [r7, #6]
 800a16e:	f7fa f833 	bl	80041d8 <HAL_DMA_Start_IT>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00b      	beq.n	800a190 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2210      	movs	r2, #16
 800a17c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2220      	movs	r2, #32
 800a18a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e01e      	b.n	800a1ce <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1a6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689a      	ldr	r2, [r3, #8]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0201 	orr.w	r2, r2, #1
 800a1b6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	e000      	b.n	800a1ce <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800a1cc:	2302      	movs	r3, #2
  }
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3710      	adds	r7, #16
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	0800ae8b 	.word	0x0800ae8b
 800a1dc:	0800aeef 	.word	0x0800aeef
 800a1e0:	0800af0b 	.word	0x0800af0b

0800a1e4 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1f0:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1f6:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d101      	bne.n	800a206 <HAL_UART_DMAPause+0x22>
 800a202:	2302      	movs	r3, #2
 800a204:	e03c      	b.n	800a280 <HAL_UART_DMAPause+0x9c>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a218:	2b80      	cmp	r3, #128	; 0x80
 800a21a:	d10a      	bne.n	800a232 <HAL_UART_DMAPause+0x4e>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b21      	cmp	r3, #33	; 0x21
 800a220:	d107      	bne.n	800a232 <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a230:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a23c:	2b40      	cmp	r3, #64	; 0x40
 800a23e:	d11a      	bne.n	800a276 <HAL_UART_DMAPause+0x92>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	2b22      	cmp	r3, #34	; 0x22
 800a244:	d117      	bne.n	800a276 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a254:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0201 	bic.w	r2, r2, #1
 800a264:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	689a      	ldr	r2, [r3, #8]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a274:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d101      	bne.n	800a2a2 <HAL_UART_DMAResume+0x16>
 800a29e:	2302      	movs	r3, #2
 800a2a0:	e034      	b.n	800a30c <HAL_UART_DMAResume+0x80>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ae:	2b21      	cmp	r3, #33	; 0x21
 800a2b0:	d107      	bne.n	800a2c2 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2c0:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2c6:	2b22      	cmp	r3, #34	; 0x22
 800a2c8:	d11b      	bne.n	800a302 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2208      	movs	r2, #8
 800a2d0:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2e0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689a      	ldr	r2, [r3, #8]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f042 0201 	orr.w	r2, r2, #1
 800a2f0:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a300:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a338:	69fa      	ldr	r2, [r7, #28]
 800a33a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a33e:	4013      	ands	r3, r2
 800a340:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d113      	bne.n	800a370 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	f003 0320 	and.w	r3, r3, #32
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00e      	beq.n	800a370 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	f003 0320 	and.w	r3, r3, #32
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d009      	beq.n	800a370 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 8114 	beq.w	800a58e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	4798      	blx	r3
      }
      return;
 800a36e:	e10e      	b.n	800a58e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f000 80d6 	beq.w	800a524 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f003 0301 	and.w	r3, r3, #1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d105      	bne.n	800a38e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 80cb 	beq.w	800a524 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00e      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x9e>
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d009      	beq.n	800a3b6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ae:	f043 0201 	orr.w	r2, r3, #1
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00e      	beq.n	800a3de <HAL_UART_IRQHandler+0xc6>
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d009      	beq.n	800a3de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3d6:	f043 0204 	orr.w	r2, r3, #4
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00e      	beq.n	800a406 <HAL_UART_IRQHandler+0xee>
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d009      	beq.n	800a406 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2204      	movs	r2, #4
 800a3f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3fe:	f043 0202 	orr.w	r2, r3, #2
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	f003 0308 	and.w	r3, r3, #8
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d013      	beq.n	800a438 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b00      	cmp	r3, #0
 800a418:	d104      	bne.n	800a424 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a420:	2b00      	cmp	r3, #0
 800a422:	d009      	beq.n	800a438 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2208      	movs	r2, #8
 800a42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a430:	f043 0208 	orr.w	r2, r3, #8
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <HAL_UART_IRQHandler+0x14a>
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00a      	beq.n	800a462 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a45a:	f043 0220 	orr.w	r2, r3, #32
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8093 	beq.w	800a592 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00c      	beq.n	800a490 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	f003 0320 	and.w	r3, r3, #32
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d007      	beq.n	800a490 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a494:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a0:	2b40      	cmp	r3, #64	; 0x40
 800a4a2:	d004      	beq.n	800a4ae <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d031      	beq.n	800a512 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fccb 	bl	800ae4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4be:	2b40      	cmp	r3, #64	; 0x40
 800a4c0:	d123      	bne.n	800a50a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	689a      	ldr	r2, [r3, #8]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d013      	beq.n	800a502 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4de:	4a30      	ldr	r2, [pc, #192]	; (800a5a0 <HAL_UART_IRQHandler+0x288>)
 800a4e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7f9 fed6 	bl	8004298 <HAL_DMA_Abort_IT>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d016      	beq.n	800a520 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a500:	e00e      	b.n	800a520 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f86c 	bl	800a5e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a508:	e00a      	b.n	800a520 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f868 	bl	800a5e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a510:	e006      	b.n	800a520 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f864 	bl	800a5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a51e:	e038      	b.n	800a592 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a520:	bf00      	nop
    return;
 800a522:	e036      	b.n	800a592 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00d      	beq.n	800a54a <HAL_UART_IRQHandler+0x232>
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d008      	beq.n	800a54a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f856 	bl	800a5f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a548:	e026      	b.n	800a598 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00d      	beq.n	800a570 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d008      	beq.n	800a570 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a562:	2b00      	cmp	r3, #0
 800a564:	d017      	beq.n	800a596 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	4798      	blx	r3
    }
    return;
 800a56e:	e012      	b.n	800a596 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00e      	beq.n	800a598 <HAL_UART_IRQHandler+0x280>
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a580:	2b00      	cmp	r3, #0
 800a582:	d009      	beq.n	800a598 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fd12 	bl	800afae <UART_EndTransmit_IT>
    return;
 800a58a:	bf00      	nop
 800a58c:	e004      	b.n	800a598 <HAL_UART_IRQHandler+0x280>
      return;
 800a58e:	bf00      	nop
 800a590:	e002      	b.n	800a598 <HAL_UART_IRQHandler+0x280>
    return;
 800a592:	bf00      	nop
 800a594:	e000      	b.n	800a598 <HAL_UART_IRQHandler+0x280>
    return;
 800a596:	bf00      	nop
  }

}
 800a598:	3720      	adds	r7, #32
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800af83 	.word	0x0800af83

0800a5a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a5d4:	bf00      	nop
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a610:	2300      	movs	r3, #0
 800a612:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a614:	2300      	movs	r3, #0
 800a616:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	689a      	ldr	r2, [r3, #8]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	431a      	orrs	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	431a      	orrs	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	69db      	ldr	r3, [r3, #28]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	4bb1      	ldr	r3, [pc, #708]	; (800a8fc <UART_SetConfig+0x2f4>)
 800a638:	4013      	ands	r3, r2
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	6812      	ldr	r2, [r2, #0]
 800a63e:	6939      	ldr	r1, [r7, #16]
 800a640:	430b      	orrs	r3, r1
 800a642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	4313      	orrs	r3, r2
 800a668:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a9f      	ldr	r2, [pc, #636]	; (800a900 <UART_SetConfig+0x2f8>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d121      	bne.n	800a6cc <UART_SetConfig+0xc4>
 800a688:	4b9e      	ldr	r3, [pc, #632]	; (800a904 <UART_SetConfig+0x2fc>)
 800a68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	2b03      	cmp	r3, #3
 800a694:	d816      	bhi.n	800a6c4 <UART_SetConfig+0xbc>
 800a696:	a201      	add	r2, pc, #4	; (adr r2, 800a69c <UART_SetConfig+0x94>)
 800a698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69c:	0800a6ad 	.word	0x0800a6ad
 800a6a0:	0800a6b9 	.word	0x0800a6b9
 800a6a4:	0800a6b3 	.word	0x0800a6b3
 800a6a8:	0800a6bf 	.word	0x0800a6bf
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	77fb      	strb	r3, [r7, #31]
 800a6b0:	e151      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	77fb      	strb	r3, [r7, #31]
 800a6b6:	e14e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	77fb      	strb	r3, [r7, #31]
 800a6bc:	e14b      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6be:	2308      	movs	r3, #8
 800a6c0:	77fb      	strb	r3, [r7, #31]
 800a6c2:	e148      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	77fb      	strb	r3, [r7, #31]
 800a6c8:	bf00      	nop
 800a6ca:	e144      	b.n	800a956 <UART_SetConfig+0x34e>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a8d      	ldr	r2, [pc, #564]	; (800a908 <UART_SetConfig+0x300>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d134      	bne.n	800a740 <UART_SetConfig+0x138>
 800a6d6:	4b8b      	ldr	r3, [pc, #556]	; (800a904 <UART_SetConfig+0x2fc>)
 800a6d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6dc:	f003 030c 	and.w	r3, r3, #12
 800a6e0:	2b0c      	cmp	r3, #12
 800a6e2:	d829      	bhi.n	800a738 <UART_SetConfig+0x130>
 800a6e4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ec <UART_SetConfig+0xe4>)
 800a6e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ea:	bf00      	nop
 800a6ec:	0800a721 	.word	0x0800a721
 800a6f0:	0800a739 	.word	0x0800a739
 800a6f4:	0800a739 	.word	0x0800a739
 800a6f8:	0800a739 	.word	0x0800a739
 800a6fc:	0800a72d 	.word	0x0800a72d
 800a700:	0800a739 	.word	0x0800a739
 800a704:	0800a739 	.word	0x0800a739
 800a708:	0800a739 	.word	0x0800a739
 800a70c:	0800a727 	.word	0x0800a727
 800a710:	0800a739 	.word	0x0800a739
 800a714:	0800a739 	.word	0x0800a739
 800a718:	0800a739 	.word	0x0800a739
 800a71c:	0800a733 	.word	0x0800a733
 800a720:	2300      	movs	r3, #0
 800a722:	77fb      	strb	r3, [r7, #31]
 800a724:	e117      	b.n	800a956 <UART_SetConfig+0x34e>
 800a726:	2302      	movs	r3, #2
 800a728:	77fb      	strb	r3, [r7, #31]
 800a72a:	e114      	b.n	800a956 <UART_SetConfig+0x34e>
 800a72c:	2304      	movs	r3, #4
 800a72e:	77fb      	strb	r3, [r7, #31]
 800a730:	e111      	b.n	800a956 <UART_SetConfig+0x34e>
 800a732:	2308      	movs	r3, #8
 800a734:	77fb      	strb	r3, [r7, #31]
 800a736:	e10e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a738:	2310      	movs	r3, #16
 800a73a:	77fb      	strb	r3, [r7, #31]
 800a73c:	bf00      	nop
 800a73e:	e10a      	b.n	800a956 <UART_SetConfig+0x34e>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a71      	ldr	r2, [pc, #452]	; (800a90c <UART_SetConfig+0x304>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d120      	bne.n	800a78c <UART_SetConfig+0x184>
 800a74a:	4b6e      	ldr	r3, [pc, #440]	; (800a904 <UART_SetConfig+0x2fc>)
 800a74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a750:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a754:	2b10      	cmp	r3, #16
 800a756:	d00f      	beq.n	800a778 <UART_SetConfig+0x170>
 800a758:	2b10      	cmp	r3, #16
 800a75a:	d802      	bhi.n	800a762 <UART_SetConfig+0x15a>
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d005      	beq.n	800a76c <UART_SetConfig+0x164>
 800a760:	e010      	b.n	800a784 <UART_SetConfig+0x17c>
 800a762:	2b20      	cmp	r3, #32
 800a764:	d005      	beq.n	800a772 <UART_SetConfig+0x16a>
 800a766:	2b30      	cmp	r3, #48	; 0x30
 800a768:	d009      	beq.n	800a77e <UART_SetConfig+0x176>
 800a76a:	e00b      	b.n	800a784 <UART_SetConfig+0x17c>
 800a76c:	2300      	movs	r3, #0
 800a76e:	77fb      	strb	r3, [r7, #31]
 800a770:	e0f1      	b.n	800a956 <UART_SetConfig+0x34e>
 800a772:	2302      	movs	r3, #2
 800a774:	77fb      	strb	r3, [r7, #31]
 800a776:	e0ee      	b.n	800a956 <UART_SetConfig+0x34e>
 800a778:	2304      	movs	r3, #4
 800a77a:	77fb      	strb	r3, [r7, #31]
 800a77c:	e0eb      	b.n	800a956 <UART_SetConfig+0x34e>
 800a77e:	2308      	movs	r3, #8
 800a780:	77fb      	strb	r3, [r7, #31]
 800a782:	e0e8      	b.n	800a956 <UART_SetConfig+0x34e>
 800a784:	2310      	movs	r3, #16
 800a786:	77fb      	strb	r3, [r7, #31]
 800a788:	bf00      	nop
 800a78a:	e0e4      	b.n	800a956 <UART_SetConfig+0x34e>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a5f      	ldr	r2, [pc, #380]	; (800a910 <UART_SetConfig+0x308>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d120      	bne.n	800a7d8 <UART_SetConfig+0x1d0>
 800a796:	4b5b      	ldr	r3, [pc, #364]	; (800a904 <UART_SetConfig+0x2fc>)
 800a798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a79c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7a0:	2b40      	cmp	r3, #64	; 0x40
 800a7a2:	d00f      	beq.n	800a7c4 <UART_SetConfig+0x1bc>
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	d802      	bhi.n	800a7ae <UART_SetConfig+0x1a6>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <UART_SetConfig+0x1b0>
 800a7ac:	e010      	b.n	800a7d0 <UART_SetConfig+0x1c8>
 800a7ae:	2b80      	cmp	r3, #128	; 0x80
 800a7b0:	d005      	beq.n	800a7be <UART_SetConfig+0x1b6>
 800a7b2:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b4:	d009      	beq.n	800a7ca <UART_SetConfig+0x1c2>
 800a7b6:	e00b      	b.n	800a7d0 <UART_SetConfig+0x1c8>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	77fb      	strb	r3, [r7, #31]
 800a7bc:	e0cb      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7be:	2302      	movs	r3, #2
 800a7c0:	77fb      	strb	r3, [r7, #31]
 800a7c2:	e0c8      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7c4:	2304      	movs	r3, #4
 800a7c6:	77fb      	strb	r3, [r7, #31]
 800a7c8:	e0c5      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7ca:	2308      	movs	r3, #8
 800a7cc:	77fb      	strb	r3, [r7, #31]
 800a7ce:	e0c2      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7d0:	2310      	movs	r3, #16
 800a7d2:	77fb      	strb	r3, [r7, #31]
 800a7d4:	bf00      	nop
 800a7d6:	e0be      	b.n	800a956 <UART_SetConfig+0x34e>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a4d      	ldr	r2, [pc, #308]	; (800a914 <UART_SetConfig+0x30c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d124      	bne.n	800a82c <UART_SetConfig+0x224>
 800a7e2:	4b48      	ldr	r3, [pc, #288]	; (800a904 <UART_SetConfig+0x2fc>)
 800a7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f0:	d012      	beq.n	800a818 <UART_SetConfig+0x210>
 800a7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7f6:	d802      	bhi.n	800a7fe <UART_SetConfig+0x1f6>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d007      	beq.n	800a80c <UART_SetConfig+0x204>
 800a7fc:	e012      	b.n	800a824 <UART_SetConfig+0x21c>
 800a7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a802:	d006      	beq.n	800a812 <UART_SetConfig+0x20a>
 800a804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a808:	d009      	beq.n	800a81e <UART_SetConfig+0x216>
 800a80a:	e00b      	b.n	800a824 <UART_SetConfig+0x21c>
 800a80c:	2300      	movs	r3, #0
 800a80e:	77fb      	strb	r3, [r7, #31]
 800a810:	e0a1      	b.n	800a956 <UART_SetConfig+0x34e>
 800a812:	2302      	movs	r3, #2
 800a814:	77fb      	strb	r3, [r7, #31]
 800a816:	e09e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a818:	2304      	movs	r3, #4
 800a81a:	77fb      	strb	r3, [r7, #31]
 800a81c:	e09b      	b.n	800a956 <UART_SetConfig+0x34e>
 800a81e:	2308      	movs	r3, #8
 800a820:	77fb      	strb	r3, [r7, #31]
 800a822:	e098      	b.n	800a956 <UART_SetConfig+0x34e>
 800a824:	2310      	movs	r3, #16
 800a826:	77fb      	strb	r3, [r7, #31]
 800a828:	bf00      	nop
 800a82a:	e094      	b.n	800a956 <UART_SetConfig+0x34e>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a39      	ldr	r2, [pc, #228]	; (800a918 <UART_SetConfig+0x310>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d124      	bne.n	800a880 <UART_SetConfig+0x278>
 800a836:	4b33      	ldr	r3, [pc, #204]	; (800a904 <UART_SetConfig+0x2fc>)
 800a838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a83c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a844:	d012      	beq.n	800a86c <UART_SetConfig+0x264>
 800a846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a84a:	d802      	bhi.n	800a852 <UART_SetConfig+0x24a>
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d007      	beq.n	800a860 <UART_SetConfig+0x258>
 800a850:	e012      	b.n	800a878 <UART_SetConfig+0x270>
 800a852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a856:	d006      	beq.n	800a866 <UART_SetConfig+0x25e>
 800a858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a85c:	d009      	beq.n	800a872 <UART_SetConfig+0x26a>
 800a85e:	e00b      	b.n	800a878 <UART_SetConfig+0x270>
 800a860:	2301      	movs	r3, #1
 800a862:	77fb      	strb	r3, [r7, #31]
 800a864:	e077      	b.n	800a956 <UART_SetConfig+0x34e>
 800a866:	2302      	movs	r3, #2
 800a868:	77fb      	strb	r3, [r7, #31]
 800a86a:	e074      	b.n	800a956 <UART_SetConfig+0x34e>
 800a86c:	2304      	movs	r3, #4
 800a86e:	77fb      	strb	r3, [r7, #31]
 800a870:	e071      	b.n	800a956 <UART_SetConfig+0x34e>
 800a872:	2308      	movs	r3, #8
 800a874:	77fb      	strb	r3, [r7, #31]
 800a876:	e06e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a878:	2310      	movs	r3, #16
 800a87a:	77fb      	strb	r3, [r7, #31]
 800a87c:	bf00      	nop
 800a87e:	e06a      	b.n	800a956 <UART_SetConfig+0x34e>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a25      	ldr	r2, [pc, #148]	; (800a91c <UART_SetConfig+0x314>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d124      	bne.n	800a8d4 <UART_SetConfig+0x2cc>
 800a88a:	4b1e      	ldr	r3, [pc, #120]	; (800a904 <UART_SetConfig+0x2fc>)
 800a88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a890:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a898:	d012      	beq.n	800a8c0 <UART_SetConfig+0x2b8>
 800a89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a89e:	d802      	bhi.n	800a8a6 <UART_SetConfig+0x29e>
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d007      	beq.n	800a8b4 <UART_SetConfig+0x2ac>
 800a8a4:	e012      	b.n	800a8cc <UART_SetConfig+0x2c4>
 800a8a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8aa:	d006      	beq.n	800a8ba <UART_SetConfig+0x2b2>
 800a8ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a8b0:	d009      	beq.n	800a8c6 <UART_SetConfig+0x2be>
 800a8b2:	e00b      	b.n	800a8cc <UART_SetConfig+0x2c4>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	77fb      	strb	r3, [r7, #31]
 800a8b8:	e04d      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	77fb      	strb	r3, [r7, #31]
 800a8be:	e04a      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8c0:	2304      	movs	r3, #4
 800a8c2:	77fb      	strb	r3, [r7, #31]
 800a8c4:	e047      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8c6:	2308      	movs	r3, #8
 800a8c8:	77fb      	strb	r3, [r7, #31]
 800a8ca:	e044      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	77fb      	strb	r3, [r7, #31]
 800a8d0:	bf00      	nop
 800a8d2:	e040      	b.n	800a956 <UART_SetConfig+0x34e>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a11      	ldr	r2, [pc, #68]	; (800a920 <UART_SetConfig+0x318>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d139      	bne.n	800a952 <UART_SetConfig+0x34a>
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <UART_SetConfig+0x2fc>)
 800a8e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a8e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8ec:	d027      	beq.n	800a93e <UART_SetConfig+0x336>
 800a8ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8f2:	d817      	bhi.n	800a924 <UART_SetConfig+0x31c>
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d01c      	beq.n	800a932 <UART_SetConfig+0x32a>
 800a8f8:	e027      	b.n	800a94a <UART_SetConfig+0x342>
 800a8fa:	bf00      	nop
 800a8fc:	efff69f3 	.word	0xefff69f3
 800a900:	40011000 	.word	0x40011000
 800a904:	40023800 	.word	0x40023800
 800a908:	40004400 	.word	0x40004400
 800a90c:	40004800 	.word	0x40004800
 800a910:	40004c00 	.word	0x40004c00
 800a914:	40005000 	.word	0x40005000
 800a918:	40011400 	.word	0x40011400
 800a91c:	40007800 	.word	0x40007800
 800a920:	40007c00 	.word	0x40007c00
 800a924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a928:	d006      	beq.n	800a938 <UART_SetConfig+0x330>
 800a92a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a92e:	d009      	beq.n	800a944 <UART_SetConfig+0x33c>
 800a930:	e00b      	b.n	800a94a <UART_SetConfig+0x342>
 800a932:	2300      	movs	r3, #0
 800a934:	77fb      	strb	r3, [r7, #31]
 800a936:	e00e      	b.n	800a956 <UART_SetConfig+0x34e>
 800a938:	2302      	movs	r3, #2
 800a93a:	77fb      	strb	r3, [r7, #31]
 800a93c:	e00b      	b.n	800a956 <UART_SetConfig+0x34e>
 800a93e:	2304      	movs	r3, #4
 800a940:	77fb      	strb	r3, [r7, #31]
 800a942:	e008      	b.n	800a956 <UART_SetConfig+0x34e>
 800a944:	2308      	movs	r3, #8
 800a946:	77fb      	strb	r3, [r7, #31]
 800a948:	e005      	b.n	800a956 <UART_SetConfig+0x34e>
 800a94a:	2310      	movs	r3, #16
 800a94c:	77fb      	strb	r3, [r7, #31]
 800a94e:	bf00      	nop
 800a950:	e001      	b.n	800a956 <UART_SetConfig+0x34e>
 800a952:	2310      	movs	r3, #16
 800a954:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a95e:	d17f      	bne.n	800aa60 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a960:	7ffb      	ldrb	r3, [r7, #31]
 800a962:	2b08      	cmp	r3, #8
 800a964:	d85c      	bhi.n	800aa20 <UART_SetConfig+0x418>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <UART_SetConfig+0x364>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a991 	.word	0x0800a991
 800a970:	0800a9b1 	.word	0x0800a9b1
 800a974:	0800a9d1 	.word	0x0800a9d1
 800a978:	0800aa21 	.word	0x0800aa21
 800a97c:	0800a9e9 	.word	0x0800a9e9
 800a980:	0800aa21 	.word	0x0800aa21
 800a984:	0800aa21 	.word	0x0800aa21
 800a988:	0800aa21 	.word	0x0800aa21
 800a98c:	0800aa09 	.word	0x0800aa09
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a990:	f7fc fda6 	bl	80074e0 <HAL_RCC_GetPCLK1Freq>
 800a994:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	005a      	lsls	r2, r3, #1
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	085b      	lsrs	r3, r3, #1
 800a9a0:	441a      	add	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	61bb      	str	r3, [r7, #24]
        break;
 800a9ae:	e03a      	b.n	800aa26 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9b0:	f7fc fdaa 	bl	8007508 <HAL_RCC_GetPCLK2Freq>
 800a9b4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	005a      	lsls	r2, r3, #1
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	085b      	lsrs	r3, r3, #1
 800a9c0:	441a      	add	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	61bb      	str	r3, [r7, #24]
        break;
 800a9ce:	e02a      	b.n	800aa26 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	085a      	lsrs	r2, r3, #1
 800a9d6:	4b5f      	ldr	r3, [pc, #380]	; (800ab54 <UART_SetConfig+0x54c>)
 800a9d8:	4413      	add	r3, r2
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	6852      	ldr	r2, [r2, #4]
 800a9de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	61bb      	str	r3, [r7, #24]
        break;
 800a9e6:	e01e      	b.n	800aa26 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9e8:	f7fc fcbc 	bl	8007364 <HAL_RCC_GetSysClockFreq>
 800a9ec:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	005a      	lsls	r2, r3, #1
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	085b      	lsrs	r3, r3, #1
 800a9f8:	441a      	add	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	61bb      	str	r3, [r7, #24]
        break;
 800aa06:	e00e      	b.n	800aa26 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	61bb      	str	r3, [r7, #24]
        break;
 800aa1e:	e002      	b.n	800aa26 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	75fb      	strb	r3, [r7, #23]
        break;
 800aa24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	2b0f      	cmp	r3, #15
 800aa2a:	d916      	bls.n	800aa5a <UART_SetConfig+0x452>
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa32:	d212      	bcs.n	800aa5a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	f023 030f 	bic.w	r3, r3, #15
 800aa3c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	085b      	lsrs	r3, r3, #1
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	897b      	ldrh	r3, [r7, #10]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	897a      	ldrh	r2, [r7, #10]
 800aa56:	60da      	str	r2, [r3, #12]
 800aa58:	e070      	b.n	800ab3c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	75fb      	strb	r3, [r7, #23]
 800aa5e:	e06d      	b.n	800ab3c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800aa60:	7ffb      	ldrb	r3, [r7, #31]
 800aa62:	2b08      	cmp	r3, #8
 800aa64:	d859      	bhi.n	800ab1a <UART_SetConfig+0x512>
 800aa66:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <UART_SetConfig+0x464>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa91 	.word	0x0800aa91
 800aa70:	0800aaaf 	.word	0x0800aaaf
 800aa74:	0800aacd 	.word	0x0800aacd
 800aa78:	0800ab1b 	.word	0x0800ab1b
 800aa7c:	0800aae5 	.word	0x0800aae5
 800aa80:	0800ab1b 	.word	0x0800ab1b
 800aa84:	0800ab1b 	.word	0x0800ab1b
 800aa88:	0800ab1b 	.word	0x0800ab1b
 800aa8c:	0800ab03 	.word	0x0800ab03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa90:	f7fc fd26 	bl	80074e0 <HAL_RCC_GetPCLK1Freq>
 800aa94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	085a      	lsrs	r2, r3, #1
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	441a      	add	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	61bb      	str	r3, [r7, #24]
        break;
 800aaac:	e038      	b.n	800ab20 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaae:	f7fc fd2b 	bl	8007508 <HAL_RCC_GetPCLK2Freq>
 800aab2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	085a      	lsrs	r2, r3, #1
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	441a      	add	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	61bb      	str	r3, [r7, #24]
        break;
 800aaca:	e029      	b.n	800ab20 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	085a      	lsrs	r2, r3, #1
 800aad2:	4b21      	ldr	r3, [pc, #132]	; (800ab58 <UART_SetConfig+0x550>)
 800aad4:	4413      	add	r3, r2
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	6852      	ldr	r2, [r2, #4]
 800aada:	fbb3 f3f2 	udiv	r3, r3, r2
 800aade:	b29b      	uxth	r3, r3
 800aae0:	61bb      	str	r3, [r7, #24]
        break;
 800aae2:	e01d      	b.n	800ab20 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aae4:	f7fc fc3e 	bl	8007364 <HAL_RCC_GetSysClockFreq>
 800aae8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	085a      	lsrs	r2, r3, #1
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	441a      	add	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	61bb      	str	r3, [r7, #24]
        break;
 800ab00:	e00e      	b.n	800ab20 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	085b      	lsrs	r3, r3, #1
 800ab08:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	61bb      	str	r3, [r7, #24]
        break;
 800ab18:	e002      	b.n	800ab20 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	75fb      	strb	r3, [r7, #23]
        break;
 800ab1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab20:	69bb      	ldr	r3, [r7, #24]
 800ab22:	2b0f      	cmp	r3, #15
 800ab24:	d908      	bls.n	800ab38 <UART_SetConfig+0x530>
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab2c:	d204      	bcs.n	800ab38 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	60da      	str	r2, [r3, #12]
 800ab36:	e001      	b.n	800ab3c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3720      	adds	r7, #32
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	01e84800 	.word	0x01e84800
 800ab58:	00f42400 	.word	0x00f42400

0800ab5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab68:	f003 0301 	and.w	r3, r3, #1
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00a      	beq.n	800ab86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	430a      	orrs	r2, r1
 800ab84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8a:	f003 0302 	and.w	r3, r3, #2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	430a      	orrs	r2, r1
 800aba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abac:	f003 0304 	and.w	r3, r3, #4
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00a      	beq.n	800abca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	430a      	orrs	r2, r1
 800abc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	430a      	orrs	r2, r1
 800abea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	f003 0310 	and.w	r3, r3, #16
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00a      	beq.n	800ac0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	430a      	orrs	r2, r1
 800ac0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac12:	f003 0320 	and.w	r3, r3, #32
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	689b      	ldr	r3, [r3, #8]
 800ac20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	430a      	orrs	r2, r1
 800ac2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d01a      	beq.n	800ac72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac5a:	d10a      	bne.n	800ac72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	605a      	str	r2, [r3, #4]
  }
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af02      	add	r7, sp, #8
 800aca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800acae:	f7f8 fbe7 	bl	8003480 <HAL_GetTick>
 800acb2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0308 	and.w	r3, r3, #8
 800acbe:	2b08      	cmp	r3, #8
 800acc0:	d10e      	bne.n	800ace0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f82a 	bl	800ad2a <UART_WaitOnFlagUntilTimeout>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acdc:	2303      	movs	r3, #3
 800acde:	e020      	b.n	800ad22 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0304 	and.w	r3, r3, #4
 800acea:	2b04      	cmp	r3, #4
 800acec:	d10e      	bne.n	800ad0c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800acf2:	9300      	str	r3, [sp, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 f814 	bl	800ad2a <UART_WaitOnFlagUntilTimeout>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e00a      	b.n	800ad22 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2220      	movs	r2, #32
 800ad10:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2220      	movs	r2, #32
 800ad16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	60f8      	str	r0, [r7, #12]
 800ad32:	60b9      	str	r1, [r7, #8]
 800ad34:	603b      	str	r3, [r7, #0]
 800ad36:	4613      	mov	r3, r2
 800ad38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad3a:	e05d      	b.n	800adf8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad42:	d059      	beq.n	800adf8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad44:	f7f8 fb9c 	bl	8003480 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	69ba      	ldr	r2, [r7, #24]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d302      	bcc.n	800ad5a <UART_WaitOnFlagUntilTimeout+0x30>
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d11b      	bne.n	800ad92 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ad68:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689a      	ldr	r2, [r3, #8]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f022 0201 	bic.w	r2, r2, #1
 800ad78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2220      	movs	r2, #32
 800ad84:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e042      	b.n	800ae18 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d02b      	beq.n	800adf8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adae:	d123      	bne.n	800adf8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adb8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800adc8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f022 0201 	bic.w	r2, r2, #1
 800add8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2220      	movs	r2, #32
 800adde:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2220      	movs	r2, #32
 800ade4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2220      	movs	r2, #32
 800adea:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e00f      	b.n	800ae18 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69da      	ldr	r2, [r3, #28]
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	4013      	ands	r3, r2
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	bf0c      	ite	eq
 800ae08:	2301      	moveq	r3, #1
 800ae0a:	2300      	movne	r3, #0
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	461a      	mov	r2, r3
 800ae10:	79fb      	ldrb	r3, [r7, #7]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d092      	beq.n	800ad3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800ae36:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ae3e:	bf00      	nop
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ae60:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0201 	bic.w	r2, r2, #1
 800ae70:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2220      	movs	r2, #32
 800ae76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ae7e:	bf00      	nop
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b084      	sub	sp, #16
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae96:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aea0:	d01e      	beq.n	800aee0 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aeb8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	689a      	ldr	r2, [r3, #8]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f022 0201 	bic.w	r2, r2, #1
 800aec8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689a      	ldr	r2, [r3, #8]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aed8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2220      	movs	r2, #32
 800aede:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f7ff fb69 	bl	800a5b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aee6:	bf00      	nop
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aeee:	b580      	push	{r7, lr}
 800aef0:	b084      	sub	sp, #16
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f7ff fb65 	bl	800a5cc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af02:	bf00      	nop
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b086      	sub	sp, #24
 800af0e:	af00      	add	r7, sp, #0
 800af10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af16:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af1c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2e:	2b80      	cmp	r3, #128	; 0x80
 800af30:	d109      	bne.n	800af46 <UART_DMAError+0x3c>
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b21      	cmp	r3, #33	; 0x21
 800af36:	d106      	bne.n	800af46 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800af40:	6978      	ldr	r0, [r7, #20]
 800af42:	f7ff ff6d 	bl	800ae20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af50:	2b40      	cmp	r3, #64	; 0x40
 800af52:	d109      	bne.n	800af68 <UART_DMAError+0x5e>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b22      	cmp	r3, #34	; 0x22
 800af58:	d106      	bne.n	800af68 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800af62:	6978      	ldr	r0, [r7, #20]
 800af64:	f7ff ff71 	bl	800ae4a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af6c:	f043 0210 	orr.w	r2, r3, #16
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af74:	6978      	ldr	r0, [r7, #20]
 800af76:	f7ff fb33 	bl	800a5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af7a:	bf00      	nop
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2200      	movs	r2, #0
 800af94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f7ff fb1d 	bl	800a5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afa6:	bf00      	nop
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afc4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2220      	movs	r2, #32
 800afca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f7ff fae6 	bl	800a5a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800afe0:	b084      	sub	sp, #16
 800afe2:	b480      	push	{r7}
 800afe4:	b085      	sub	sp, #20
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	f107 001c 	add.w	r0, r7, #28
 800afee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aff6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aff8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800affa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800affe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b002:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b006:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b00a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	685a      	ldr	r2, [r3, #4]
 800b016:	4b07      	ldr	r3, [pc, #28]	; (800b034 <SDMMC_Init+0x54>)
 800b018:	4013      	ands	r3, r2
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	431a      	orrs	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	b004      	add	sp, #16
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	ffff8100 	.word	0xffff8100

0800b038 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2203      	movs	r2, #3
 800b044:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b046:	2002      	movs	r0, #2
 800b048:	f7f8 fa26 	bl	8003498 <HAL_Delay>
  
  return HAL_OK;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b056:	b480      	push	{r7}
 800b058:	b083      	sub	sp, #12
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 0303 	and.w	r3, r3, #3
}
 800b066:	4618      	mov	r0, r3
 800b068:	370c      	adds	r7, #12
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
	...

0800b074 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b092:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b098:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b09e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	68da      	ldr	r2, [r3, #12]
 800b0aa:	4b06      	ldr	r3, [pc, #24]	; (800b0c4 <SDMMC_SendCommand+0x50>)
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	68fa      	ldr	r2, [r7, #12]
 800b0b0:	431a      	orrs	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b0b6:	2300      	movs	r3, #0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	fffff000 	.word	0xfffff000

0800b0c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	b2db      	uxtb	r3, r3
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b085      	sub	sp, #20
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	3314      	adds	r3, #20
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	4413      	add	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
}  
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3714      	adds	r7, #20
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr

0800b108 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	; 0x28
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b118:	2307      	movs	r3, #7
 800b11a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b11c:	2340      	movs	r3, #64	; 0x40
 800b11e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b120:	2300      	movs	r3, #0
 800b122:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b128:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b12a:	f107 0310 	add.w	r3, r7, #16
 800b12e:	4619      	mov	r1, r3
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	f7ff ff9f 	bl	800b074 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b136:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13a:	2107      	movs	r1, #7
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f8c9 	bl	800b2d4 <SDMMC_GetCmdResp1>
 800b142:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b146:	4618      	mov	r0, r3
 800b148:	3728      	adds	r7, #40	; 0x28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b088      	sub	sp, #32
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b156:	2300      	movs	r3, #0
 800b158:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b15e:	2300      	movs	r3, #0
 800b160:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b162:	2300      	movs	r3, #0
 800b164:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b16a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b16c:	f107 0308 	add.w	r3, r7, #8
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f7ff ff7e 	bl	800b074 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f883 	bl	800b284 <SDMMC_GetCmdError>
 800b17e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b180:	69fb      	ldr	r3, [r7, #28]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3720      	adds	r7, #32
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b088      	sub	sp, #32
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b192:	2300      	movs	r3, #0
 800b194:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b196:	2302      	movs	r3, #2
 800b198:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b19a:	23c0      	movs	r3, #192	; 0xc0
 800b19c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1a8:	f107 0308 	add.w	r3, r7, #8
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7ff ff60 	bl	800b074 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f979 	bl	800b4ac <SDMMC_GetCmdResp2>
 800b1ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1bc:	69fb      	ldr	r3, [r7, #28]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b088      	sub	sp, #32
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b1d4:	2309      	movs	r3, #9
 800b1d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b1d8:	23c0      	movs	r3, #192	; 0xc0
 800b1da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1e6:	f107 0308 	add.w	r3, r7, #8
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f7ff ff41 	bl	800b074 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f95a 	bl	800b4ac <SDMMC_GetCmdResp2>
 800b1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1fa:	69fb      	ldr	r3, [r7, #28]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3720      	adds	r7, #32
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b088      	sub	sp, #32
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b20e:	2300      	movs	r3, #0
 800b210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b212:	2303      	movs	r3, #3
 800b214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b216:	2340      	movs	r3, #64	; 0x40
 800b218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b21a:	2300      	movs	r3, #0
 800b21c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b224:	f107 0308 	add.w	r3, r7, #8
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff ff22 	bl	800b074 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	2103      	movs	r1, #3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f9b9 	bl	800b5ac <SDMMC_GetCmdResp6>
 800b23a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b23c:	69fb      	ldr	r3, [r7, #28]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3720      	adds	r7, #32
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b088      	sub	sp, #32
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800b254:	2301      	movs	r3, #1
 800b256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b258:	2340      	movs	r3, #64	; 0x40
 800b25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b264:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b266:	f107 0308 	add.w	r3, r7, #8
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ff01 	bl	800b074 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 f960 	bl	800b538 <SDMMC_GetCmdResp3>
 800b278:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b27a:	69fb      	ldr	r3, [r7, #28]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3720      	adds	r7, #32
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b284:	b490      	push	{r4, r7}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b28c:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <SDMMC_GetCmdError+0x48>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a0f      	ldr	r2, [pc, #60]	; (800b2d0 <SDMMC_GetCmdError+0x4c>)
 800b292:	fba2 2303 	umull	r2, r3, r2, r3
 800b296:	0a5b      	lsrs	r3, r3, #9
 800b298:	f241 3288 	movw	r2, #5000	; 0x1388
 800b29c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	1e5c      	subs	r4, r3, #1
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d102      	bne.n	800b2ae <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2ac:	e009      	b.n	800b2c2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d0f2      	beq.n	800b2a0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	22c5      	movs	r2, #197	; 0xc5
 800b2be:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bc90      	pop	{r4, r7}
 800b2ca:	4770      	bx	lr
 800b2cc:	2000000c 	.word	0x2000000c
 800b2d0:	10624dd3 	.word	0x10624dd3

0800b2d4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b2d4:	b590      	push	{r4, r7, lr}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b2e2:	4b6f      	ldr	r3, [pc, #444]	; (800b4a0 <SDMMC_GetCmdResp1+0x1cc>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a6f      	ldr	r2, [pc, #444]	; (800b4a4 <SDMMC_GetCmdResp1+0x1d0>)
 800b2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ec:	0a5b      	lsrs	r3, r3, #9
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2f4:	4623      	mov	r3, r4
 800b2f6:	1e5c      	subs	r4, r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d102      	bne.n	800b302 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b300:	e0c9      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b306:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d0f0      	beq.n	800b2f4 <SDMMC_GetCmdResp1+0x20>
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1eb      	bne.n	800b2f4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b320:	f003 0304 	and.w	r3, r3, #4
 800b324:	2b00      	cmp	r3, #0
 800b326:	d004      	beq.n	800b332 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2204      	movs	r2, #4
 800b32c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b32e:	2304      	movs	r3, #4
 800b330:	e0b1      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d004      	beq.n	800b348 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2201      	movs	r2, #1
 800b342:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b344:	2301      	movs	r3, #1
 800b346:	e0a6      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	22c5      	movs	r2, #197	; 0xc5
 800b34c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f7ff feba 	bl	800b0c8 <SDMMC_GetCommandResponse>
 800b354:	4603      	mov	r3, r0
 800b356:	461a      	mov	r2, r3
 800b358:	7afb      	ldrb	r3, [r7, #11]
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d001      	beq.n	800b362 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b35e:	2301      	movs	r3, #1
 800b360:	e099      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b362:	2100      	movs	r1, #0
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f7ff febc 	bl	800b0e2 <SDMMC_GetResponse>
 800b36a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	4b4e      	ldr	r3, [pc, #312]	; (800b4a8 <SDMMC_GetCmdResp1+0x1d4>)
 800b370:	4013      	ands	r3, r2
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b376:	2300      	movs	r3, #0
 800b378:	e08d      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	da02      	bge.n	800b386 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b380:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b384:	e087      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b390:	2340      	movs	r3, #64	; 0x40
 800b392:	e080      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b39e:	2380      	movs	r3, #128	; 0x80
 800b3a0:	e079      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b3ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3b0:	e071      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b3bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3c0:	e069      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b3cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d0:	e061      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d002      	beq.n	800b3e2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b3dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3e0:	e059      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b3ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3f0:	e051      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b400:	e049      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b40c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b410:	e041      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b41c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b420:	e039      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b42c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b430:	e031      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b43c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b440:	e029      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b44c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b450:	e021      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b45c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b460:	e019      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b46c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b470:	e011      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b47c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b480:	e009      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	f003 0308 	and.w	r3, r3, #8
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b48c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b490:	e001      	b.n	800b496 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b496:	4618      	mov	r0, r3
 800b498:	371c      	adds	r7, #28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd90      	pop	{r4, r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	2000000c 	.word	0x2000000c
 800b4a4:	10624dd3 	.word	0x10624dd3
 800b4a8:	fdffe008 	.word	0xfdffe008

0800b4ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b4ac:	b490      	push	{r4, r7}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4b4:	4b1e      	ldr	r3, [pc, #120]	; (800b530 <SDMMC_GetCmdResp2+0x84>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a1e      	ldr	r2, [pc, #120]	; (800b534 <SDMMC_GetCmdResp2+0x88>)
 800b4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b4be:	0a5b      	lsrs	r3, r3, #9
 800b4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4c8:	4623      	mov	r3, r4
 800b4ca:	1e5c      	subs	r4, r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d102      	bne.n	800b4d6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4d4:	e026      	b.n	800b524 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4da:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0f0      	beq.n	800b4c8 <SDMMC_GetCmdResp2+0x1c>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d1eb      	bne.n	800b4c8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f4:	f003 0304 	and.w	r3, r3, #4
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d004      	beq.n	800b506 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2204      	movs	r2, #4
 800b500:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b502:	2304      	movs	r3, #4
 800b504:	e00e      	b.n	800b524 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2201      	movs	r2, #1
 800b516:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b518:	2301      	movs	r3, #1
 800b51a:	e003      	b.n	800b524 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	22c5      	movs	r2, #197	; 0xc5
 800b520:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bc90      	pop	{r4, r7}
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	2000000c 	.word	0x2000000c
 800b534:	10624dd3 	.word	0x10624dd3

0800b538 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b538:	b490      	push	{r4, r7}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b540:	4b18      	ldr	r3, [pc, #96]	; (800b5a4 <SDMMC_GetCmdResp3+0x6c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a18      	ldr	r2, [pc, #96]	; (800b5a8 <SDMMC_GetCmdResp3+0x70>)
 800b546:	fba2 2303 	umull	r2, r3, r2, r3
 800b54a:	0a5b      	lsrs	r3, r3, #9
 800b54c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b550:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b554:	4623      	mov	r3, r4
 800b556:	1e5c      	subs	r4, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d102      	bne.n	800b562 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b55c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b560:	e01b      	b.n	800b59a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b566:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0f0      	beq.n	800b554 <SDMMC_GetCmdResp3+0x1c>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1eb      	bne.n	800b554 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b580:	f003 0304 	and.w	r3, r3, #4
 800b584:	2b00      	cmp	r3, #0
 800b586:	d004      	beq.n	800b592 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2204      	movs	r2, #4
 800b58c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b58e:	2304      	movs	r3, #4
 800b590:	e003      	b.n	800b59a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	22c5      	movs	r2, #197	; 0xc5
 800b596:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bc90      	pop	{r4, r7}
 800b5a2:	4770      	bx	lr
 800b5a4:	2000000c 	.word	0x2000000c
 800b5a8:	10624dd3 	.word	0x10624dd3

0800b5ac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b5ac:	b590      	push	{r4, r7, lr}
 800b5ae:	b087      	sub	sp, #28
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	60f8      	str	r0, [r7, #12]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5ba:	4b34      	ldr	r3, [pc, #208]	; (800b68c <SDMMC_GetCmdResp6+0xe0>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a34      	ldr	r2, [pc, #208]	; (800b690 <SDMMC_GetCmdResp6+0xe4>)
 800b5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c4:	0a5b      	lsrs	r3, r3, #9
 800b5c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ca:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b5ce:	4623      	mov	r3, r4
 800b5d0:	1e5c      	subs	r4, r3, #1
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d102      	bne.n	800b5dc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5da:	e052      	b.n	800b682 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0f0      	beq.n	800b5ce <SDMMC_GetCmdResp6+0x22>
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1eb      	bne.n	800b5ce <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fa:	f003 0304 	and.w	r3, r3, #4
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d004      	beq.n	800b60c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2204      	movs	r2, #4
 800b606:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b608:	2304      	movs	r3, #4
 800b60a:	e03a      	b.n	800b682 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	d004      	beq.n	800b622 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2201      	movs	r2, #1
 800b61c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b61e:	2301      	movs	r3, #1
 800b620:	e02f      	b.n	800b682 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f7ff fd50 	bl	800b0c8 <SDMMC_GetCommandResponse>
 800b628:	4603      	mov	r3, r0
 800b62a:	461a      	mov	r2, r3
 800b62c:	7afb      	ldrb	r3, [r7, #11]
 800b62e:	4293      	cmp	r3, r2
 800b630:	d001      	beq.n	800b636 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b632:	2301      	movs	r3, #1
 800b634:	e025      	b.n	800b682 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	22c5      	movs	r2, #197	; 0xc5
 800b63a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b63c:	2100      	movs	r1, #0
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff fd4f 	bl	800b0e2 <SDMMC_GetResponse>
 800b644:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d106      	bne.n	800b65e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	0c1b      	lsrs	r3, r3, #16
 800b654:	b29a      	uxth	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	e011      	b.n	800b682 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b668:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b66c:	e009      	b.n	800b682 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b67c:	e001      	b.n	800b682 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b67e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b682:	4618      	mov	r0, r3
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	bd90      	pop	{r4, r7, pc}
 800b68a:	bf00      	nop
 800b68c:	2000000c 	.word	0x2000000c
 800b690:	10624dd3 	.word	0x10624dd3

0800b694 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b6aa:	4b1f      	ldr	r3, [pc, #124]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6ac:	7a5b      	ldrb	r3, [r3, #9]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d131      	bne.n	800b718 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b6b4:	4b1c      	ldr	r3, [pc, #112]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6b6:	7a5b      	ldrb	r3, [r3, #9]
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	4b1a      	ldr	r3, [pc, #104]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6be:	2100      	movs	r1, #0
 800b6c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b6c2:	4b19      	ldr	r3, [pc, #100]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6c4:	7a5b      	ldrb	r3, [r3, #9]
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	4a17      	ldr	r2, [pc, #92]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b6d2:	4b15      	ldr	r3, [pc, #84]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6d4:	7a5b      	ldrb	r3, [r3, #9]
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	461a      	mov	r2, r3
 800b6da:	4b13      	ldr	r3, [pc, #76]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6dc:	4413      	add	r3, r2
 800b6de:	79fa      	ldrb	r2, [r7, #7]
 800b6e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b6e2:	4b11      	ldr	r3, [pc, #68]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6e4:	7a5b      	ldrb	r3, [r3, #9]
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	b2d1      	uxtb	r1, r2
 800b6ec:	4a0e      	ldr	r2, [pc, #56]	; (800b728 <FATFS_LinkDriverEx+0x94>)
 800b6ee:	7251      	strb	r1, [r2, #9]
 800b6f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b6f2:	7dbb      	ldrb	r3, [r7, #22]
 800b6f4:	3330      	adds	r3, #48	; 0x30
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	3301      	adds	r3, #1
 800b700:	223a      	movs	r2, #58	; 0x3a
 800b702:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	3302      	adds	r3, #2
 800b708:	222f      	movs	r2, #47	; 0x2f
 800b70a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	3303      	adds	r3, #3
 800b710:	2200      	movs	r2, #0
 800b712:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b718:	7dfb      	ldrb	r3, [r7, #23]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	20000c84 	.word	0x20000c84

0800b72c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b736:	2200      	movs	r2, #0
 800b738:	6839      	ldr	r1, [r7, #0]
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7ff ffaa 	bl	800b694 <FATFS_LinkDriverEx>
 800b740:	4603      	mov	r3, r0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <__errno>:
 800b74c:	4b01      	ldr	r3, [pc, #4]	; (800b754 <__errno+0x8>)
 800b74e:	6818      	ldr	r0, [r3, #0]
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	20000030 	.word	0x20000030

0800b758 <__libc_init_array>:
 800b758:	b570      	push	{r4, r5, r6, lr}
 800b75a:	4e0d      	ldr	r6, [pc, #52]	; (800b790 <__libc_init_array+0x38>)
 800b75c:	4c0d      	ldr	r4, [pc, #52]	; (800b794 <__libc_init_array+0x3c>)
 800b75e:	1ba4      	subs	r4, r4, r6
 800b760:	10a4      	asrs	r4, r4, #2
 800b762:	2500      	movs	r5, #0
 800b764:	42a5      	cmp	r5, r4
 800b766:	d109      	bne.n	800b77c <__libc_init_array+0x24>
 800b768:	4e0b      	ldr	r6, [pc, #44]	; (800b798 <__libc_init_array+0x40>)
 800b76a:	4c0c      	ldr	r4, [pc, #48]	; (800b79c <__libc_init_array+0x44>)
 800b76c:	f003 fc90 	bl	800f090 <_init>
 800b770:	1ba4      	subs	r4, r4, r6
 800b772:	10a4      	asrs	r4, r4, #2
 800b774:	2500      	movs	r5, #0
 800b776:	42a5      	cmp	r5, r4
 800b778:	d105      	bne.n	800b786 <__libc_init_array+0x2e>
 800b77a:	bd70      	pop	{r4, r5, r6, pc}
 800b77c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b780:	4798      	blx	r3
 800b782:	3501      	adds	r5, #1
 800b784:	e7ee      	b.n	800b764 <__libc_init_array+0xc>
 800b786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b78a:	4798      	blx	r3
 800b78c:	3501      	adds	r5, #1
 800b78e:	e7f2      	b.n	800b776 <__libc_init_array+0x1e>
 800b790:	0800f3b8 	.word	0x0800f3b8
 800b794:	0800f3b8 	.word	0x0800f3b8
 800b798:	0800f3b8 	.word	0x0800f3b8
 800b79c:	0800f3bc 	.word	0x0800f3bc

0800b7a0 <memcpy>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	1e43      	subs	r3, r0, #1
 800b7a4:	440a      	add	r2, r1
 800b7a6:	4291      	cmp	r1, r2
 800b7a8:	d100      	bne.n	800b7ac <memcpy+0xc>
 800b7aa:	bd10      	pop	{r4, pc}
 800b7ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7b4:	e7f7      	b.n	800b7a6 <memcpy+0x6>

0800b7b6 <memset>:
 800b7b6:	4402      	add	r2, r0
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d100      	bne.n	800b7c0 <memset+0xa>
 800b7be:	4770      	bx	lr
 800b7c0:	f803 1b01 	strb.w	r1, [r3], #1
 800b7c4:	e7f9      	b.n	800b7ba <memset+0x4>

0800b7c6 <__cvt>:
 800b7c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7c8:	ed2d 8b02 	vpush	{d8}
 800b7cc:	eeb0 8b40 	vmov.f64	d8, d0
 800b7d0:	b085      	sub	sp, #20
 800b7d2:	4617      	mov	r7, r2
 800b7d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b7d6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b7d8:	ee18 2a90 	vmov	r2, s17
 800b7dc:	f025 0520 	bic.w	r5, r5, #32
 800b7e0:	2a00      	cmp	r2, #0
 800b7e2:	bfb6      	itet	lt
 800b7e4:	222d      	movlt	r2, #45	; 0x2d
 800b7e6:	2200      	movge	r2, #0
 800b7e8:	eeb1 8b40 	vneglt.f64	d8, d0
 800b7ec:	2d46      	cmp	r5, #70	; 0x46
 800b7ee:	460c      	mov	r4, r1
 800b7f0:	701a      	strb	r2, [r3, #0]
 800b7f2:	d004      	beq.n	800b7fe <__cvt+0x38>
 800b7f4:	2d45      	cmp	r5, #69	; 0x45
 800b7f6:	d100      	bne.n	800b7fa <__cvt+0x34>
 800b7f8:	3401      	adds	r4, #1
 800b7fa:	2102      	movs	r1, #2
 800b7fc:	e000      	b.n	800b800 <__cvt+0x3a>
 800b7fe:	2103      	movs	r1, #3
 800b800:	ab03      	add	r3, sp, #12
 800b802:	9301      	str	r3, [sp, #4]
 800b804:	ab02      	add	r3, sp, #8
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	4622      	mov	r2, r4
 800b80a:	4633      	mov	r3, r6
 800b80c:	eeb0 0b48 	vmov.f64	d0, d8
 800b810:	f001 fd1e 	bl	800d250 <_dtoa_r>
 800b814:	2d47      	cmp	r5, #71	; 0x47
 800b816:	d101      	bne.n	800b81c <__cvt+0x56>
 800b818:	07fb      	lsls	r3, r7, #31
 800b81a:	d51e      	bpl.n	800b85a <__cvt+0x94>
 800b81c:	2d46      	cmp	r5, #70	; 0x46
 800b81e:	eb00 0304 	add.w	r3, r0, r4
 800b822:	d10c      	bne.n	800b83e <__cvt+0x78>
 800b824:	7802      	ldrb	r2, [r0, #0]
 800b826:	2a30      	cmp	r2, #48	; 0x30
 800b828:	d107      	bne.n	800b83a <__cvt+0x74>
 800b82a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b832:	bf1c      	itt	ne
 800b834:	f1c4 0401 	rsbne	r4, r4, #1
 800b838:	6034      	strne	r4, [r6, #0]
 800b83a:	6832      	ldr	r2, [r6, #0]
 800b83c:	4413      	add	r3, r2
 800b83e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b846:	d007      	beq.n	800b858 <__cvt+0x92>
 800b848:	2130      	movs	r1, #48	; 0x30
 800b84a:	9a03      	ldr	r2, [sp, #12]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d204      	bcs.n	800b85a <__cvt+0x94>
 800b850:	1c54      	adds	r4, r2, #1
 800b852:	9403      	str	r4, [sp, #12]
 800b854:	7011      	strb	r1, [r2, #0]
 800b856:	e7f8      	b.n	800b84a <__cvt+0x84>
 800b858:	9303      	str	r3, [sp, #12]
 800b85a:	9b03      	ldr	r3, [sp, #12]
 800b85c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b85e:	1a1b      	subs	r3, r3, r0
 800b860:	6013      	str	r3, [r2, #0]
 800b862:	b005      	add	sp, #20
 800b864:	ecbd 8b02 	vpop	{d8}
 800b868:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b86a <__exponent>:
 800b86a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b86c:	2900      	cmp	r1, #0
 800b86e:	4604      	mov	r4, r0
 800b870:	bfba      	itte	lt
 800b872:	4249      	neglt	r1, r1
 800b874:	232d      	movlt	r3, #45	; 0x2d
 800b876:	232b      	movge	r3, #43	; 0x2b
 800b878:	2909      	cmp	r1, #9
 800b87a:	f804 2b02 	strb.w	r2, [r4], #2
 800b87e:	7043      	strb	r3, [r0, #1]
 800b880:	dd20      	ble.n	800b8c4 <__exponent+0x5a>
 800b882:	f10d 0307 	add.w	r3, sp, #7
 800b886:	461f      	mov	r7, r3
 800b888:	260a      	movs	r6, #10
 800b88a:	fb91 f5f6 	sdiv	r5, r1, r6
 800b88e:	fb06 1115 	mls	r1, r6, r5, r1
 800b892:	3130      	adds	r1, #48	; 0x30
 800b894:	2d09      	cmp	r5, #9
 800b896:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b89a:	f103 32ff 	add.w	r2, r3, #4294967295
 800b89e:	4629      	mov	r1, r5
 800b8a0:	dc09      	bgt.n	800b8b6 <__exponent+0x4c>
 800b8a2:	3130      	adds	r1, #48	; 0x30
 800b8a4:	3b02      	subs	r3, #2
 800b8a6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b8aa:	42bb      	cmp	r3, r7
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	d304      	bcc.n	800b8ba <__exponent+0x50>
 800b8b0:	1a10      	subs	r0, r2, r0
 800b8b2:	b003      	add	sp, #12
 800b8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	e7e7      	b.n	800b88a <__exponent+0x20>
 800b8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8be:	f804 2b01 	strb.w	r2, [r4], #1
 800b8c2:	e7f2      	b.n	800b8aa <__exponent+0x40>
 800b8c4:	2330      	movs	r3, #48	; 0x30
 800b8c6:	4419      	add	r1, r3
 800b8c8:	7083      	strb	r3, [r0, #2]
 800b8ca:	1d02      	adds	r2, r0, #4
 800b8cc:	70c1      	strb	r1, [r0, #3]
 800b8ce:	e7ef      	b.n	800b8b0 <__exponent+0x46>

0800b8d0 <_printf_float>:
 800b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d4:	b08d      	sub	sp, #52	; 0x34
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	4616      	mov	r6, r2
 800b8da:	461f      	mov	r7, r3
 800b8dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b8e0:	4605      	mov	r5, r0
 800b8e2:	f002 fd2d 	bl	800e340 <_localeconv_r>
 800b8e6:	f8d0 b000 	ldr.w	fp, [r0]
 800b8ea:	4658      	mov	r0, fp
 800b8ec:	f7f4 fca8 	bl	8000240 <strlen>
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b8f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b8f8:	9005      	str	r0, [sp, #20]
 800b8fa:	3307      	adds	r3, #7
 800b8fc:	f023 0307 	bic.w	r3, r3, #7
 800b900:	f103 0108 	add.w	r1, r3, #8
 800b904:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b908:	6822      	ldr	r2, [r4, #0]
 800b90a:	f8c8 1000 	str.w	r1, [r8]
 800b90e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b912:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b916:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800bba0 <_printf_float+0x2d0>
 800b91a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b91e:	eeb0 6bc0 	vabs.f64	d6, d0
 800b922:	eeb4 6b47 	vcmp.f64	d6, d7
 800b926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b92a:	dd24      	ble.n	800b976 <_printf_float+0xa6>
 800b92c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b934:	d502      	bpl.n	800b93c <_printf_float+0x6c>
 800b936:	232d      	movs	r3, #45	; 0x2d
 800b938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b93c:	499a      	ldr	r1, [pc, #616]	; (800bba8 <_printf_float+0x2d8>)
 800b93e:	4b9b      	ldr	r3, [pc, #620]	; (800bbac <_printf_float+0x2dc>)
 800b940:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b944:	bf8c      	ite	hi
 800b946:	4688      	movhi	r8, r1
 800b948:	4698      	movls	r8, r3
 800b94a:	f022 0204 	bic.w	r2, r2, #4
 800b94e:	2303      	movs	r3, #3
 800b950:	6123      	str	r3, [r4, #16]
 800b952:	6022      	str	r2, [r4, #0]
 800b954:	f04f 0a00 	mov.w	sl, #0
 800b958:	9700      	str	r7, [sp, #0]
 800b95a:	4633      	mov	r3, r6
 800b95c:	aa0b      	add	r2, sp, #44	; 0x2c
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f000 f9e1 	bl	800bd28 <_printf_common>
 800b966:	3001      	adds	r0, #1
 800b968:	f040 8089 	bne.w	800ba7e <_printf_float+0x1ae>
 800b96c:	f04f 30ff 	mov.w	r0, #4294967295
 800b970:	b00d      	add	sp, #52	; 0x34
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	eeb4 0b40 	vcmp.f64	d0, d0
 800b97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b97e:	d702      	bvc.n	800b986 <_printf_float+0xb6>
 800b980:	498b      	ldr	r1, [pc, #556]	; (800bbb0 <_printf_float+0x2e0>)
 800b982:	4b8c      	ldr	r3, [pc, #560]	; (800bbb4 <_printf_float+0x2e4>)
 800b984:	e7dc      	b.n	800b940 <_printf_float+0x70>
 800b986:	6861      	ldr	r1, [r4, #4]
 800b988:	1c4b      	adds	r3, r1, #1
 800b98a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b98e:	ab0a      	add	r3, sp, #40	; 0x28
 800b990:	a809      	add	r0, sp, #36	; 0x24
 800b992:	d13b      	bne.n	800ba0c <_printf_float+0x13c>
 800b994:	2106      	movs	r1, #6
 800b996:	6061      	str	r1, [r4, #4]
 800b998:	f04f 0c00 	mov.w	ip, #0
 800b99c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b9a0:	e9cd 0900 	strd	r0, r9, [sp]
 800b9a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b9a8:	6022      	str	r2, [r4, #0]
 800b9aa:	6861      	ldr	r1, [r4, #4]
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	f7ff ff0a 	bl	800b7c6 <__cvt>
 800b9b2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b9b6:	2b47      	cmp	r3, #71	; 0x47
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	d109      	bne.n	800b9d0 <_printf_float+0x100>
 800b9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9be:	1cd8      	adds	r0, r3, #3
 800b9c0:	db02      	blt.n	800b9c8 <_printf_float+0xf8>
 800b9c2:	6862      	ldr	r2, [r4, #4]
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	dd47      	ble.n	800ba58 <_printf_float+0x188>
 800b9c8:	f1a9 0902 	sub.w	r9, r9, #2
 800b9cc:	fa5f f989 	uxtb.w	r9, r9
 800b9d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b9d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9d6:	d824      	bhi.n	800ba22 <_printf_float+0x152>
 800b9d8:	3901      	subs	r1, #1
 800b9da:	464a      	mov	r2, r9
 800b9dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b9e0:	9109      	str	r1, [sp, #36]	; 0x24
 800b9e2:	f7ff ff42 	bl	800b86a <__exponent>
 800b9e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9e8:	1813      	adds	r3, r2, r0
 800b9ea:	2a01      	cmp	r2, #1
 800b9ec:	4682      	mov	sl, r0
 800b9ee:	6123      	str	r3, [r4, #16]
 800b9f0:	dc02      	bgt.n	800b9f8 <_printf_float+0x128>
 800b9f2:	6822      	ldr	r2, [r4, #0]
 800b9f4:	07d1      	lsls	r1, r2, #31
 800b9f6:	d501      	bpl.n	800b9fc <_printf_float+0x12c>
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	6123      	str	r3, [r4, #16]
 800b9fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d0a9      	beq.n	800b958 <_printf_float+0x88>
 800ba04:	232d      	movs	r3, #45	; 0x2d
 800ba06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba0a:	e7a5      	b.n	800b958 <_printf_float+0x88>
 800ba0c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800ba10:	f000 8178 	beq.w	800bd04 <_printf_float+0x434>
 800ba14:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ba18:	d1be      	bne.n	800b998 <_printf_float+0xc8>
 800ba1a:	2900      	cmp	r1, #0
 800ba1c:	d1bc      	bne.n	800b998 <_printf_float+0xc8>
 800ba1e:	2101      	movs	r1, #1
 800ba20:	e7b9      	b.n	800b996 <_printf_float+0xc6>
 800ba22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ba26:	d119      	bne.n	800ba5c <_printf_float+0x18c>
 800ba28:	2900      	cmp	r1, #0
 800ba2a:	6863      	ldr	r3, [r4, #4]
 800ba2c:	dd0c      	ble.n	800ba48 <_printf_float+0x178>
 800ba2e:	6121      	str	r1, [r4, #16]
 800ba30:	b913      	cbnz	r3, 800ba38 <_printf_float+0x168>
 800ba32:	6822      	ldr	r2, [r4, #0]
 800ba34:	07d2      	lsls	r2, r2, #31
 800ba36:	d502      	bpl.n	800ba3e <_printf_float+0x16e>
 800ba38:	3301      	adds	r3, #1
 800ba3a:	440b      	add	r3, r1
 800ba3c:	6123      	str	r3, [r4, #16]
 800ba3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba40:	65a3      	str	r3, [r4, #88]	; 0x58
 800ba42:	f04f 0a00 	mov.w	sl, #0
 800ba46:	e7d9      	b.n	800b9fc <_printf_float+0x12c>
 800ba48:	b913      	cbnz	r3, 800ba50 <_printf_float+0x180>
 800ba4a:	6822      	ldr	r2, [r4, #0]
 800ba4c:	07d0      	lsls	r0, r2, #31
 800ba4e:	d501      	bpl.n	800ba54 <_printf_float+0x184>
 800ba50:	3302      	adds	r3, #2
 800ba52:	e7f3      	b.n	800ba3c <_printf_float+0x16c>
 800ba54:	2301      	movs	r3, #1
 800ba56:	e7f1      	b.n	800ba3c <_printf_float+0x16c>
 800ba58:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ba5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba60:	4293      	cmp	r3, r2
 800ba62:	db05      	blt.n	800ba70 <_printf_float+0x1a0>
 800ba64:	6822      	ldr	r2, [r4, #0]
 800ba66:	6123      	str	r3, [r4, #16]
 800ba68:	07d1      	lsls	r1, r2, #31
 800ba6a:	d5e8      	bpl.n	800ba3e <_printf_float+0x16e>
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	e7e5      	b.n	800ba3c <_printf_float+0x16c>
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	bfd4      	ite	le
 800ba74:	f1c3 0302 	rsble	r3, r3, #2
 800ba78:	2301      	movgt	r3, #1
 800ba7a:	4413      	add	r3, r2
 800ba7c:	e7de      	b.n	800ba3c <_printf_float+0x16c>
 800ba7e:	6823      	ldr	r3, [r4, #0]
 800ba80:	055a      	lsls	r2, r3, #21
 800ba82:	d407      	bmi.n	800ba94 <_printf_float+0x1c4>
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	4642      	mov	r2, r8
 800ba88:	4631      	mov	r1, r6
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	47b8      	blx	r7
 800ba8e:	3001      	adds	r0, #1
 800ba90:	d12a      	bne.n	800bae8 <_printf_float+0x218>
 800ba92:	e76b      	b.n	800b96c <_printf_float+0x9c>
 800ba94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ba98:	f240 80de 	bls.w	800bc58 <_printf_float+0x388>
 800ba9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800baa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800baa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baa8:	d133      	bne.n	800bb12 <_printf_float+0x242>
 800baaa:	2301      	movs	r3, #1
 800baac:	4a42      	ldr	r2, [pc, #264]	; (800bbb8 <_printf_float+0x2e8>)
 800baae:	4631      	mov	r1, r6
 800bab0:	4628      	mov	r0, r5
 800bab2:	47b8      	blx	r7
 800bab4:	3001      	adds	r0, #1
 800bab6:	f43f af59 	beq.w	800b96c <_printf_float+0x9c>
 800baba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800babe:	429a      	cmp	r2, r3
 800bac0:	db02      	blt.n	800bac8 <_printf_float+0x1f8>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	07d8      	lsls	r0, r3, #31
 800bac6:	d50f      	bpl.n	800bae8 <_printf_float+0x218>
 800bac8:	9b05      	ldr	r3, [sp, #20]
 800baca:	465a      	mov	r2, fp
 800bacc:	4631      	mov	r1, r6
 800bace:	4628      	mov	r0, r5
 800bad0:	47b8      	blx	r7
 800bad2:	3001      	adds	r0, #1
 800bad4:	f43f af4a 	beq.w	800b96c <_printf_float+0x9c>
 800bad8:	f04f 0800 	mov.w	r8, #0
 800badc:	f104 091a 	add.w	r9, r4, #26
 800bae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae2:	3b01      	subs	r3, #1
 800bae4:	4543      	cmp	r3, r8
 800bae6:	dc09      	bgt.n	800bafc <_printf_float+0x22c>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	079b      	lsls	r3, r3, #30
 800baec:	f100 8105 	bmi.w	800bcfa <_printf_float+0x42a>
 800baf0:	68e0      	ldr	r0, [r4, #12]
 800baf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf4:	4298      	cmp	r0, r3
 800baf6:	bfb8      	it	lt
 800baf8:	4618      	movlt	r0, r3
 800bafa:	e739      	b.n	800b970 <_printf_float+0xa0>
 800bafc:	2301      	movs	r3, #1
 800bafe:	464a      	mov	r2, r9
 800bb00:	4631      	mov	r1, r6
 800bb02:	4628      	mov	r0, r5
 800bb04:	47b8      	blx	r7
 800bb06:	3001      	adds	r0, #1
 800bb08:	f43f af30 	beq.w	800b96c <_printf_float+0x9c>
 800bb0c:	f108 0801 	add.w	r8, r8, #1
 800bb10:	e7e6      	b.n	800bae0 <_printf_float+0x210>
 800bb12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dc2b      	bgt.n	800bb70 <_printf_float+0x2a0>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	4a27      	ldr	r2, [pc, #156]	; (800bbb8 <_printf_float+0x2e8>)
 800bb1c:	4631      	mov	r1, r6
 800bb1e:	4628      	mov	r0, r5
 800bb20:	47b8      	blx	r7
 800bb22:	3001      	adds	r0, #1
 800bb24:	f43f af22 	beq.w	800b96c <_printf_float+0x9c>
 800bb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb2a:	b923      	cbnz	r3, 800bb36 <_printf_float+0x266>
 800bb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb2e:	b913      	cbnz	r3, 800bb36 <_printf_float+0x266>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	07d9      	lsls	r1, r3, #31
 800bb34:	d5d8      	bpl.n	800bae8 <_printf_float+0x218>
 800bb36:	9b05      	ldr	r3, [sp, #20]
 800bb38:	465a      	mov	r2, fp
 800bb3a:	4631      	mov	r1, r6
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	47b8      	blx	r7
 800bb40:	3001      	adds	r0, #1
 800bb42:	f43f af13 	beq.w	800b96c <_printf_float+0x9c>
 800bb46:	f04f 0900 	mov.w	r9, #0
 800bb4a:	f104 0a1a 	add.w	sl, r4, #26
 800bb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb50:	425b      	negs	r3, r3
 800bb52:	454b      	cmp	r3, r9
 800bb54:	dc01      	bgt.n	800bb5a <_printf_float+0x28a>
 800bb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb58:	e795      	b.n	800ba86 <_printf_float+0x1b6>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4652      	mov	r2, sl
 800bb5e:	4631      	mov	r1, r6
 800bb60:	4628      	mov	r0, r5
 800bb62:	47b8      	blx	r7
 800bb64:	3001      	adds	r0, #1
 800bb66:	f43f af01 	beq.w	800b96c <_printf_float+0x9c>
 800bb6a:	f109 0901 	add.w	r9, r9, #1
 800bb6e:	e7ee      	b.n	800bb4e <_printf_float+0x27e>
 800bb70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb74:	429a      	cmp	r2, r3
 800bb76:	bfa8      	it	ge
 800bb78:	461a      	movge	r2, r3
 800bb7a:	2a00      	cmp	r2, #0
 800bb7c:	4691      	mov	r9, r2
 800bb7e:	dd07      	ble.n	800bb90 <_printf_float+0x2c0>
 800bb80:	4613      	mov	r3, r2
 800bb82:	4631      	mov	r1, r6
 800bb84:	4642      	mov	r2, r8
 800bb86:	4628      	mov	r0, r5
 800bb88:	47b8      	blx	r7
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	f43f aeee 	beq.w	800b96c <_printf_float+0x9c>
 800bb90:	f104 031a 	add.w	r3, r4, #26
 800bb94:	f04f 0a00 	mov.w	sl, #0
 800bb98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb9c:	9307      	str	r3, [sp, #28]
 800bb9e:	e017      	b.n	800bbd0 <_printf_float+0x300>
 800bba0:	ffffffff 	.word	0xffffffff
 800bba4:	7fefffff 	.word	0x7fefffff
 800bba8:	0800f0fc 	.word	0x0800f0fc
 800bbac:	0800f0f8 	.word	0x0800f0f8
 800bbb0:	0800f104 	.word	0x0800f104
 800bbb4:	0800f100 	.word	0x0800f100
 800bbb8:	0800f108 	.word	0x0800f108
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	9a07      	ldr	r2, [sp, #28]
 800bbc0:	4631      	mov	r1, r6
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	47b8      	blx	r7
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	f43f aed0 	beq.w	800b96c <_printf_float+0x9c>
 800bbcc:	f10a 0a01 	add.w	sl, sl, #1
 800bbd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bbd2:	9306      	str	r3, [sp, #24]
 800bbd4:	eba3 0309 	sub.w	r3, r3, r9
 800bbd8:	4553      	cmp	r3, sl
 800bbda:	dcef      	bgt.n	800bbbc <_printf_float+0x2ec>
 800bbdc:	9b06      	ldr	r3, [sp, #24]
 800bbde:	4498      	add	r8, r3
 800bbe0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	db15      	blt.n	800bc14 <_printf_float+0x344>
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	07da      	lsls	r2, r3, #31
 800bbec:	d412      	bmi.n	800bc14 <_printf_float+0x344>
 800bbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf0:	9a06      	ldr	r2, [sp, #24]
 800bbf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbf4:	1a9a      	subs	r2, r3, r2
 800bbf6:	eba3 0a01 	sub.w	sl, r3, r1
 800bbfa:	4592      	cmp	sl, r2
 800bbfc:	bfa8      	it	ge
 800bbfe:	4692      	movge	sl, r2
 800bc00:	f1ba 0f00 	cmp.w	sl, #0
 800bc04:	dc0e      	bgt.n	800bc24 <_printf_float+0x354>
 800bc06:	f04f 0800 	mov.w	r8, #0
 800bc0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc0e:	f104 091a 	add.w	r9, r4, #26
 800bc12:	e019      	b.n	800bc48 <_printf_float+0x378>
 800bc14:	9b05      	ldr	r3, [sp, #20]
 800bc16:	465a      	mov	r2, fp
 800bc18:	4631      	mov	r1, r6
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	47b8      	blx	r7
 800bc1e:	3001      	adds	r0, #1
 800bc20:	d1e5      	bne.n	800bbee <_printf_float+0x31e>
 800bc22:	e6a3      	b.n	800b96c <_printf_float+0x9c>
 800bc24:	4653      	mov	r3, sl
 800bc26:	4642      	mov	r2, r8
 800bc28:	4631      	mov	r1, r6
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	47b8      	blx	r7
 800bc2e:	3001      	adds	r0, #1
 800bc30:	d1e9      	bne.n	800bc06 <_printf_float+0x336>
 800bc32:	e69b      	b.n	800b96c <_printf_float+0x9c>
 800bc34:	2301      	movs	r3, #1
 800bc36:	464a      	mov	r2, r9
 800bc38:	4631      	mov	r1, r6
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	47b8      	blx	r7
 800bc3e:	3001      	adds	r0, #1
 800bc40:	f43f ae94 	beq.w	800b96c <_printf_float+0x9c>
 800bc44:	f108 0801 	add.w	r8, r8, #1
 800bc48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc4c:	1a9b      	subs	r3, r3, r2
 800bc4e:	eba3 030a 	sub.w	r3, r3, sl
 800bc52:	4543      	cmp	r3, r8
 800bc54:	dcee      	bgt.n	800bc34 <_printf_float+0x364>
 800bc56:	e747      	b.n	800bae8 <_printf_float+0x218>
 800bc58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc5a:	2a01      	cmp	r2, #1
 800bc5c:	dc01      	bgt.n	800bc62 <_printf_float+0x392>
 800bc5e:	07db      	lsls	r3, r3, #31
 800bc60:	d539      	bpl.n	800bcd6 <_printf_float+0x406>
 800bc62:	2301      	movs	r3, #1
 800bc64:	4642      	mov	r2, r8
 800bc66:	4631      	mov	r1, r6
 800bc68:	4628      	mov	r0, r5
 800bc6a:	47b8      	blx	r7
 800bc6c:	3001      	adds	r0, #1
 800bc6e:	f43f ae7d 	beq.w	800b96c <_printf_float+0x9c>
 800bc72:	9b05      	ldr	r3, [sp, #20]
 800bc74:	465a      	mov	r2, fp
 800bc76:	4631      	mov	r1, r6
 800bc78:	4628      	mov	r0, r5
 800bc7a:	47b8      	blx	r7
 800bc7c:	3001      	adds	r0, #1
 800bc7e:	f108 0801 	add.w	r8, r8, #1
 800bc82:	f43f ae73 	beq.w	800b96c <_printf_float+0x9c>
 800bc86:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800bc8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc98:	d018      	beq.n	800bccc <_printf_float+0x3fc>
 800bc9a:	4642      	mov	r2, r8
 800bc9c:	4631      	mov	r1, r6
 800bc9e:	4628      	mov	r0, r5
 800bca0:	47b8      	blx	r7
 800bca2:	3001      	adds	r0, #1
 800bca4:	d10e      	bne.n	800bcc4 <_printf_float+0x3f4>
 800bca6:	e661      	b.n	800b96c <_printf_float+0x9c>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	464a      	mov	r2, r9
 800bcac:	4631      	mov	r1, r6
 800bcae:	4628      	mov	r0, r5
 800bcb0:	47b8      	blx	r7
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	f43f ae5a 	beq.w	800b96c <_printf_float+0x9c>
 800bcb8:	f108 0801 	add.w	r8, r8, #1
 800bcbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	4543      	cmp	r3, r8
 800bcc2:	dcf1      	bgt.n	800bca8 <_printf_float+0x3d8>
 800bcc4:	4653      	mov	r3, sl
 800bcc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bcca:	e6dd      	b.n	800ba88 <_printf_float+0x1b8>
 800bccc:	f04f 0800 	mov.w	r8, #0
 800bcd0:	f104 091a 	add.w	r9, r4, #26
 800bcd4:	e7f2      	b.n	800bcbc <_printf_float+0x3ec>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e7df      	b.n	800bc9a <_printf_float+0x3ca>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	464a      	mov	r2, r9
 800bcde:	4631      	mov	r1, r6
 800bce0:	4628      	mov	r0, r5
 800bce2:	47b8      	blx	r7
 800bce4:	3001      	adds	r0, #1
 800bce6:	f43f ae41 	beq.w	800b96c <_printf_float+0x9c>
 800bcea:	f108 0801 	add.w	r8, r8, #1
 800bcee:	68e3      	ldr	r3, [r4, #12]
 800bcf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcf2:	1a9b      	subs	r3, r3, r2
 800bcf4:	4543      	cmp	r3, r8
 800bcf6:	dcf0      	bgt.n	800bcda <_printf_float+0x40a>
 800bcf8:	e6fa      	b.n	800baf0 <_printf_float+0x220>
 800bcfa:	f04f 0800 	mov.w	r8, #0
 800bcfe:	f104 0919 	add.w	r9, r4, #25
 800bd02:	e7f4      	b.n	800bcee <_printf_float+0x41e>
 800bd04:	2900      	cmp	r1, #0
 800bd06:	f43f ae8a 	beq.w	800ba1e <_printf_float+0x14e>
 800bd0a:	f04f 0c00 	mov.w	ip, #0
 800bd0e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800bd12:	e9cd 0900 	strd	r0, r9, [sp]
 800bd16:	6022      	str	r2, [r4, #0]
 800bd18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	f7ff fd52 	bl	800b7c6 <__cvt>
 800bd22:	4680      	mov	r8, r0
 800bd24:	e64a      	b.n	800b9bc <_printf_float+0xec>
 800bd26:	bf00      	nop

0800bd28 <_printf_common>:
 800bd28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd2c:	4691      	mov	r9, r2
 800bd2e:	461f      	mov	r7, r3
 800bd30:	688a      	ldr	r2, [r1, #8]
 800bd32:	690b      	ldr	r3, [r1, #16]
 800bd34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	bfb8      	it	lt
 800bd3c:	4613      	movlt	r3, r2
 800bd3e:	f8c9 3000 	str.w	r3, [r9]
 800bd42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd46:	4606      	mov	r6, r0
 800bd48:	460c      	mov	r4, r1
 800bd4a:	b112      	cbz	r2, 800bd52 <_printf_common+0x2a>
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	f8c9 3000 	str.w	r3, [r9]
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	0699      	lsls	r1, r3, #26
 800bd56:	bf42      	ittt	mi
 800bd58:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bd5c:	3302      	addmi	r3, #2
 800bd5e:	f8c9 3000 	strmi.w	r3, [r9]
 800bd62:	6825      	ldr	r5, [r4, #0]
 800bd64:	f015 0506 	ands.w	r5, r5, #6
 800bd68:	d107      	bne.n	800bd7a <_printf_common+0x52>
 800bd6a:	f104 0a19 	add.w	sl, r4, #25
 800bd6e:	68e3      	ldr	r3, [r4, #12]
 800bd70:	f8d9 2000 	ldr.w	r2, [r9]
 800bd74:	1a9b      	subs	r3, r3, r2
 800bd76:	42ab      	cmp	r3, r5
 800bd78:	dc28      	bgt.n	800bdcc <_printf_common+0xa4>
 800bd7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	3300      	adds	r3, #0
 800bd82:	bf18      	it	ne
 800bd84:	2301      	movne	r3, #1
 800bd86:	0692      	lsls	r2, r2, #26
 800bd88:	d42d      	bmi.n	800bde6 <_printf_common+0xbe>
 800bd8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd8e:	4639      	mov	r1, r7
 800bd90:	4630      	mov	r0, r6
 800bd92:	47c0      	blx	r8
 800bd94:	3001      	adds	r0, #1
 800bd96:	d020      	beq.n	800bdda <_printf_common+0xb2>
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	68e5      	ldr	r5, [r4, #12]
 800bd9c:	f8d9 2000 	ldr.w	r2, [r9]
 800bda0:	f003 0306 	and.w	r3, r3, #6
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	bf08      	it	eq
 800bda8:	1aad      	subeq	r5, r5, r2
 800bdaa:	68a3      	ldr	r3, [r4, #8]
 800bdac:	6922      	ldr	r2, [r4, #16]
 800bdae:	bf0c      	ite	eq
 800bdb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdb4:	2500      	movne	r5, #0
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	bfc4      	itt	gt
 800bdba:	1a9b      	subgt	r3, r3, r2
 800bdbc:	18ed      	addgt	r5, r5, r3
 800bdbe:	f04f 0900 	mov.w	r9, #0
 800bdc2:	341a      	adds	r4, #26
 800bdc4:	454d      	cmp	r5, r9
 800bdc6:	d11a      	bne.n	800bdfe <_printf_common+0xd6>
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e008      	b.n	800bdde <_printf_common+0xb6>
 800bdcc:	2301      	movs	r3, #1
 800bdce:	4652      	mov	r2, sl
 800bdd0:	4639      	mov	r1, r7
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	47c0      	blx	r8
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	d103      	bne.n	800bde2 <_printf_common+0xba>
 800bdda:	f04f 30ff 	mov.w	r0, #4294967295
 800bdde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde2:	3501      	adds	r5, #1
 800bde4:	e7c3      	b.n	800bd6e <_printf_common+0x46>
 800bde6:	18e1      	adds	r1, r4, r3
 800bde8:	1c5a      	adds	r2, r3, #1
 800bdea:	2030      	movs	r0, #48	; 0x30
 800bdec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdf0:	4422      	add	r2, r4
 800bdf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdfa:	3302      	adds	r3, #2
 800bdfc:	e7c5      	b.n	800bd8a <_printf_common+0x62>
 800bdfe:	2301      	movs	r3, #1
 800be00:	4622      	mov	r2, r4
 800be02:	4639      	mov	r1, r7
 800be04:	4630      	mov	r0, r6
 800be06:	47c0      	blx	r8
 800be08:	3001      	adds	r0, #1
 800be0a:	d0e6      	beq.n	800bdda <_printf_common+0xb2>
 800be0c:	f109 0901 	add.w	r9, r9, #1
 800be10:	e7d8      	b.n	800bdc4 <_printf_common+0x9c>
	...

0800be14 <_printf_i>:
 800be14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800be1c:	460c      	mov	r4, r1
 800be1e:	7e09      	ldrb	r1, [r1, #24]
 800be20:	b085      	sub	sp, #20
 800be22:	296e      	cmp	r1, #110	; 0x6e
 800be24:	4617      	mov	r7, r2
 800be26:	4606      	mov	r6, r0
 800be28:	4698      	mov	r8, r3
 800be2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be2c:	f000 80b3 	beq.w	800bf96 <_printf_i+0x182>
 800be30:	d822      	bhi.n	800be78 <_printf_i+0x64>
 800be32:	2963      	cmp	r1, #99	; 0x63
 800be34:	d036      	beq.n	800bea4 <_printf_i+0x90>
 800be36:	d80a      	bhi.n	800be4e <_printf_i+0x3a>
 800be38:	2900      	cmp	r1, #0
 800be3a:	f000 80b9 	beq.w	800bfb0 <_printf_i+0x19c>
 800be3e:	2958      	cmp	r1, #88	; 0x58
 800be40:	f000 8083 	beq.w	800bf4a <_printf_i+0x136>
 800be44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800be4c:	e032      	b.n	800beb4 <_printf_i+0xa0>
 800be4e:	2964      	cmp	r1, #100	; 0x64
 800be50:	d001      	beq.n	800be56 <_printf_i+0x42>
 800be52:	2969      	cmp	r1, #105	; 0x69
 800be54:	d1f6      	bne.n	800be44 <_printf_i+0x30>
 800be56:	6820      	ldr	r0, [r4, #0]
 800be58:	6813      	ldr	r3, [r2, #0]
 800be5a:	0605      	lsls	r5, r0, #24
 800be5c:	f103 0104 	add.w	r1, r3, #4
 800be60:	d52a      	bpl.n	800beb8 <_printf_i+0xa4>
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6011      	str	r1, [r2, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	da03      	bge.n	800be72 <_printf_i+0x5e>
 800be6a:	222d      	movs	r2, #45	; 0x2d
 800be6c:	425b      	negs	r3, r3
 800be6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be72:	486f      	ldr	r0, [pc, #444]	; (800c030 <_printf_i+0x21c>)
 800be74:	220a      	movs	r2, #10
 800be76:	e039      	b.n	800beec <_printf_i+0xd8>
 800be78:	2973      	cmp	r1, #115	; 0x73
 800be7a:	f000 809d 	beq.w	800bfb8 <_printf_i+0x1a4>
 800be7e:	d808      	bhi.n	800be92 <_printf_i+0x7e>
 800be80:	296f      	cmp	r1, #111	; 0x6f
 800be82:	d020      	beq.n	800bec6 <_printf_i+0xb2>
 800be84:	2970      	cmp	r1, #112	; 0x70
 800be86:	d1dd      	bne.n	800be44 <_printf_i+0x30>
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	f043 0320 	orr.w	r3, r3, #32
 800be8e:	6023      	str	r3, [r4, #0]
 800be90:	e003      	b.n	800be9a <_printf_i+0x86>
 800be92:	2975      	cmp	r1, #117	; 0x75
 800be94:	d017      	beq.n	800bec6 <_printf_i+0xb2>
 800be96:	2978      	cmp	r1, #120	; 0x78
 800be98:	d1d4      	bne.n	800be44 <_printf_i+0x30>
 800be9a:	2378      	movs	r3, #120	; 0x78
 800be9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bea0:	4864      	ldr	r0, [pc, #400]	; (800c034 <_printf_i+0x220>)
 800bea2:	e055      	b.n	800bf50 <_printf_i+0x13c>
 800bea4:	6813      	ldr	r3, [r2, #0]
 800bea6:	1d19      	adds	r1, r3, #4
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	6011      	str	r1, [r2, #0]
 800beac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800beb4:	2301      	movs	r3, #1
 800beb6:	e08c      	b.n	800bfd2 <_printf_i+0x1be>
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	6011      	str	r1, [r2, #0]
 800bebc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bec0:	bf18      	it	ne
 800bec2:	b21b      	sxthne	r3, r3
 800bec4:	e7cf      	b.n	800be66 <_printf_i+0x52>
 800bec6:	6813      	ldr	r3, [r2, #0]
 800bec8:	6825      	ldr	r5, [r4, #0]
 800beca:	1d18      	adds	r0, r3, #4
 800becc:	6010      	str	r0, [r2, #0]
 800bece:	0628      	lsls	r0, r5, #24
 800bed0:	d501      	bpl.n	800bed6 <_printf_i+0xc2>
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	e002      	b.n	800bedc <_printf_i+0xc8>
 800bed6:	0668      	lsls	r0, r5, #25
 800bed8:	d5fb      	bpl.n	800bed2 <_printf_i+0xbe>
 800beda:	881b      	ldrh	r3, [r3, #0]
 800bedc:	4854      	ldr	r0, [pc, #336]	; (800c030 <_printf_i+0x21c>)
 800bede:	296f      	cmp	r1, #111	; 0x6f
 800bee0:	bf14      	ite	ne
 800bee2:	220a      	movne	r2, #10
 800bee4:	2208      	moveq	r2, #8
 800bee6:	2100      	movs	r1, #0
 800bee8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beec:	6865      	ldr	r5, [r4, #4]
 800beee:	60a5      	str	r5, [r4, #8]
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	f2c0 8095 	blt.w	800c020 <_printf_i+0x20c>
 800bef6:	6821      	ldr	r1, [r4, #0]
 800bef8:	f021 0104 	bic.w	r1, r1, #4
 800befc:	6021      	str	r1, [r4, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d13d      	bne.n	800bf7e <_printf_i+0x16a>
 800bf02:	2d00      	cmp	r5, #0
 800bf04:	f040 808e 	bne.w	800c024 <_printf_i+0x210>
 800bf08:	4665      	mov	r5, ip
 800bf0a:	2a08      	cmp	r2, #8
 800bf0c:	d10b      	bne.n	800bf26 <_printf_i+0x112>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	07db      	lsls	r3, r3, #31
 800bf12:	d508      	bpl.n	800bf26 <_printf_i+0x112>
 800bf14:	6923      	ldr	r3, [r4, #16]
 800bf16:	6862      	ldr	r2, [r4, #4]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	bfde      	ittt	le
 800bf1c:	2330      	movle	r3, #48	; 0x30
 800bf1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf22:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf26:	ebac 0305 	sub.w	r3, ip, r5
 800bf2a:	6123      	str	r3, [r4, #16]
 800bf2c:	f8cd 8000 	str.w	r8, [sp]
 800bf30:	463b      	mov	r3, r7
 800bf32:	aa03      	add	r2, sp, #12
 800bf34:	4621      	mov	r1, r4
 800bf36:	4630      	mov	r0, r6
 800bf38:	f7ff fef6 	bl	800bd28 <_printf_common>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d14d      	bne.n	800bfdc <_printf_i+0x1c8>
 800bf40:	f04f 30ff 	mov.w	r0, #4294967295
 800bf44:	b005      	add	sp, #20
 800bf46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf4a:	4839      	ldr	r0, [pc, #228]	; (800c030 <_printf_i+0x21c>)
 800bf4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bf50:	6813      	ldr	r3, [r2, #0]
 800bf52:	6821      	ldr	r1, [r4, #0]
 800bf54:	1d1d      	adds	r5, r3, #4
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6015      	str	r5, [r2, #0]
 800bf5a:	060a      	lsls	r2, r1, #24
 800bf5c:	d50b      	bpl.n	800bf76 <_printf_i+0x162>
 800bf5e:	07ca      	lsls	r2, r1, #31
 800bf60:	bf44      	itt	mi
 800bf62:	f041 0120 	orrmi.w	r1, r1, #32
 800bf66:	6021      	strmi	r1, [r4, #0]
 800bf68:	b91b      	cbnz	r3, 800bf72 <_printf_i+0x15e>
 800bf6a:	6822      	ldr	r2, [r4, #0]
 800bf6c:	f022 0220 	bic.w	r2, r2, #32
 800bf70:	6022      	str	r2, [r4, #0]
 800bf72:	2210      	movs	r2, #16
 800bf74:	e7b7      	b.n	800bee6 <_printf_i+0xd2>
 800bf76:	064d      	lsls	r5, r1, #25
 800bf78:	bf48      	it	mi
 800bf7a:	b29b      	uxthmi	r3, r3
 800bf7c:	e7ef      	b.n	800bf5e <_printf_i+0x14a>
 800bf7e:	4665      	mov	r5, ip
 800bf80:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf84:	fb02 3311 	mls	r3, r2, r1, r3
 800bf88:	5cc3      	ldrb	r3, [r0, r3]
 800bf8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bf8e:	460b      	mov	r3, r1
 800bf90:	2900      	cmp	r1, #0
 800bf92:	d1f5      	bne.n	800bf80 <_printf_i+0x16c>
 800bf94:	e7b9      	b.n	800bf0a <_printf_i+0xf6>
 800bf96:	6813      	ldr	r3, [r2, #0]
 800bf98:	6825      	ldr	r5, [r4, #0]
 800bf9a:	6961      	ldr	r1, [r4, #20]
 800bf9c:	1d18      	adds	r0, r3, #4
 800bf9e:	6010      	str	r0, [r2, #0]
 800bfa0:	0628      	lsls	r0, r5, #24
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	d501      	bpl.n	800bfaa <_printf_i+0x196>
 800bfa6:	6019      	str	r1, [r3, #0]
 800bfa8:	e002      	b.n	800bfb0 <_printf_i+0x19c>
 800bfaa:	066a      	lsls	r2, r5, #25
 800bfac:	d5fb      	bpl.n	800bfa6 <_printf_i+0x192>
 800bfae:	8019      	strh	r1, [r3, #0]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	6123      	str	r3, [r4, #16]
 800bfb4:	4665      	mov	r5, ip
 800bfb6:	e7b9      	b.n	800bf2c <_printf_i+0x118>
 800bfb8:	6813      	ldr	r3, [r2, #0]
 800bfba:	1d19      	adds	r1, r3, #4
 800bfbc:	6011      	str	r1, [r2, #0]
 800bfbe:	681d      	ldr	r5, [r3, #0]
 800bfc0:	6862      	ldr	r2, [r4, #4]
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	f7f4 f943 	bl	8000250 <memchr>
 800bfca:	b108      	cbz	r0, 800bfd0 <_printf_i+0x1bc>
 800bfcc:	1b40      	subs	r0, r0, r5
 800bfce:	6060      	str	r0, [r4, #4]
 800bfd0:	6863      	ldr	r3, [r4, #4]
 800bfd2:	6123      	str	r3, [r4, #16]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfda:	e7a7      	b.n	800bf2c <_printf_i+0x118>
 800bfdc:	6923      	ldr	r3, [r4, #16]
 800bfde:	462a      	mov	r2, r5
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	47c0      	blx	r8
 800bfe6:	3001      	adds	r0, #1
 800bfe8:	d0aa      	beq.n	800bf40 <_printf_i+0x12c>
 800bfea:	6823      	ldr	r3, [r4, #0]
 800bfec:	079b      	lsls	r3, r3, #30
 800bfee:	d413      	bmi.n	800c018 <_printf_i+0x204>
 800bff0:	68e0      	ldr	r0, [r4, #12]
 800bff2:	9b03      	ldr	r3, [sp, #12]
 800bff4:	4298      	cmp	r0, r3
 800bff6:	bfb8      	it	lt
 800bff8:	4618      	movlt	r0, r3
 800bffa:	e7a3      	b.n	800bf44 <_printf_i+0x130>
 800bffc:	2301      	movs	r3, #1
 800bffe:	464a      	mov	r2, r9
 800c000:	4639      	mov	r1, r7
 800c002:	4630      	mov	r0, r6
 800c004:	47c0      	blx	r8
 800c006:	3001      	adds	r0, #1
 800c008:	d09a      	beq.n	800bf40 <_printf_i+0x12c>
 800c00a:	3501      	adds	r5, #1
 800c00c:	68e3      	ldr	r3, [r4, #12]
 800c00e:	9a03      	ldr	r2, [sp, #12]
 800c010:	1a9b      	subs	r3, r3, r2
 800c012:	42ab      	cmp	r3, r5
 800c014:	dcf2      	bgt.n	800bffc <_printf_i+0x1e8>
 800c016:	e7eb      	b.n	800bff0 <_printf_i+0x1dc>
 800c018:	2500      	movs	r5, #0
 800c01a:	f104 0919 	add.w	r9, r4, #25
 800c01e:	e7f5      	b.n	800c00c <_printf_i+0x1f8>
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1ac      	bne.n	800bf7e <_printf_i+0x16a>
 800c024:	7803      	ldrb	r3, [r0, #0]
 800c026:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c02a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c02e:	e76c      	b.n	800bf0a <_printf_i+0xf6>
 800c030:	0800f10a 	.word	0x0800f10a
 800c034:	0800f11b 	.word	0x0800f11b

0800c038 <_scanf_float>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	469a      	mov	sl, r3
 800c03e:	688b      	ldr	r3, [r1, #8]
 800c040:	4616      	mov	r6, r2
 800c042:	1e5a      	subs	r2, r3, #1
 800c044:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c048:	b087      	sub	sp, #28
 800c04a:	bf83      	ittte	hi
 800c04c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c050:	189b      	addhi	r3, r3, r2
 800c052:	9301      	strhi	r3, [sp, #4]
 800c054:	2300      	movls	r3, #0
 800c056:	bf86      	itte	hi
 800c058:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c05c:	608b      	strhi	r3, [r1, #8]
 800c05e:	9301      	strls	r3, [sp, #4]
 800c060:	680b      	ldr	r3, [r1, #0]
 800c062:	4688      	mov	r8, r1
 800c064:	f04f 0b00 	mov.w	fp, #0
 800c068:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c06c:	f848 3b1c 	str.w	r3, [r8], #28
 800c070:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c074:	4607      	mov	r7, r0
 800c076:	460c      	mov	r4, r1
 800c078:	4645      	mov	r5, r8
 800c07a:	465a      	mov	r2, fp
 800c07c:	46d9      	mov	r9, fp
 800c07e:	f8cd b008 	str.w	fp, [sp, #8]
 800c082:	68a1      	ldr	r1, [r4, #8]
 800c084:	b181      	cbz	r1, 800c0a8 <_scanf_float+0x70>
 800c086:	6833      	ldr	r3, [r6, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	2b49      	cmp	r3, #73	; 0x49
 800c08c:	d071      	beq.n	800c172 <_scanf_float+0x13a>
 800c08e:	d84d      	bhi.n	800c12c <_scanf_float+0xf4>
 800c090:	2b39      	cmp	r3, #57	; 0x39
 800c092:	d840      	bhi.n	800c116 <_scanf_float+0xde>
 800c094:	2b31      	cmp	r3, #49	; 0x31
 800c096:	f080 8088 	bcs.w	800c1aa <_scanf_float+0x172>
 800c09a:	2b2d      	cmp	r3, #45	; 0x2d
 800c09c:	f000 8090 	beq.w	800c1c0 <_scanf_float+0x188>
 800c0a0:	d815      	bhi.n	800c0ce <_scanf_float+0x96>
 800c0a2:	2b2b      	cmp	r3, #43	; 0x2b
 800c0a4:	f000 808c 	beq.w	800c1c0 <_scanf_float+0x188>
 800c0a8:	f1b9 0f00 	cmp.w	r9, #0
 800c0ac:	d003      	beq.n	800c0b6 <_scanf_float+0x7e>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	3a01      	subs	r2, #1
 800c0b8:	2a01      	cmp	r2, #1
 800c0ba:	f200 80ea 	bhi.w	800c292 <_scanf_float+0x25a>
 800c0be:	4545      	cmp	r5, r8
 800c0c0:	f200 80dc 	bhi.w	800c27c <_scanf_float+0x244>
 800c0c4:	2601      	movs	r6, #1
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	b007      	add	sp, #28
 800c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ce:	2b2e      	cmp	r3, #46	; 0x2e
 800c0d0:	f000 809f 	beq.w	800c212 <_scanf_float+0x1da>
 800c0d4:	2b30      	cmp	r3, #48	; 0x30
 800c0d6:	d1e7      	bne.n	800c0a8 <_scanf_float+0x70>
 800c0d8:	6820      	ldr	r0, [r4, #0]
 800c0da:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c0de:	d064      	beq.n	800c1aa <_scanf_float+0x172>
 800c0e0:	9b01      	ldr	r3, [sp, #4]
 800c0e2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c0e6:	6020      	str	r0, [r4, #0]
 800c0e8:	f109 0901 	add.w	r9, r9, #1
 800c0ec:	b11b      	cbz	r3, 800c0f6 <_scanf_float+0xbe>
 800c0ee:	3b01      	subs	r3, #1
 800c0f0:	3101      	adds	r1, #1
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	60a1      	str	r1, [r4, #8]
 800c0f6:	68a3      	ldr	r3, [r4, #8]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	60a3      	str	r3, [r4, #8]
 800c0fc:	6923      	ldr	r3, [r4, #16]
 800c0fe:	3301      	adds	r3, #1
 800c100:	6123      	str	r3, [r4, #16]
 800c102:	6873      	ldr	r3, [r6, #4]
 800c104:	3b01      	subs	r3, #1
 800c106:	2b00      	cmp	r3, #0
 800c108:	6073      	str	r3, [r6, #4]
 800c10a:	f340 80ac 	ble.w	800c266 <_scanf_float+0x22e>
 800c10e:	6833      	ldr	r3, [r6, #0]
 800c110:	3301      	adds	r3, #1
 800c112:	6033      	str	r3, [r6, #0]
 800c114:	e7b5      	b.n	800c082 <_scanf_float+0x4a>
 800c116:	2b45      	cmp	r3, #69	; 0x45
 800c118:	f000 8085 	beq.w	800c226 <_scanf_float+0x1ee>
 800c11c:	2b46      	cmp	r3, #70	; 0x46
 800c11e:	d06a      	beq.n	800c1f6 <_scanf_float+0x1be>
 800c120:	2b41      	cmp	r3, #65	; 0x41
 800c122:	d1c1      	bne.n	800c0a8 <_scanf_float+0x70>
 800c124:	2a01      	cmp	r2, #1
 800c126:	d1bf      	bne.n	800c0a8 <_scanf_float+0x70>
 800c128:	2202      	movs	r2, #2
 800c12a:	e046      	b.n	800c1ba <_scanf_float+0x182>
 800c12c:	2b65      	cmp	r3, #101	; 0x65
 800c12e:	d07a      	beq.n	800c226 <_scanf_float+0x1ee>
 800c130:	d818      	bhi.n	800c164 <_scanf_float+0x12c>
 800c132:	2b54      	cmp	r3, #84	; 0x54
 800c134:	d066      	beq.n	800c204 <_scanf_float+0x1cc>
 800c136:	d811      	bhi.n	800c15c <_scanf_float+0x124>
 800c138:	2b4e      	cmp	r3, #78	; 0x4e
 800c13a:	d1b5      	bne.n	800c0a8 <_scanf_float+0x70>
 800c13c:	2a00      	cmp	r2, #0
 800c13e:	d146      	bne.n	800c1ce <_scanf_float+0x196>
 800c140:	f1b9 0f00 	cmp.w	r9, #0
 800c144:	d145      	bne.n	800c1d2 <_scanf_float+0x19a>
 800c146:	6821      	ldr	r1, [r4, #0]
 800c148:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c14c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c150:	d13f      	bne.n	800c1d2 <_scanf_float+0x19a>
 800c152:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c156:	6021      	str	r1, [r4, #0]
 800c158:	2201      	movs	r2, #1
 800c15a:	e02e      	b.n	800c1ba <_scanf_float+0x182>
 800c15c:	2b59      	cmp	r3, #89	; 0x59
 800c15e:	d01e      	beq.n	800c19e <_scanf_float+0x166>
 800c160:	2b61      	cmp	r3, #97	; 0x61
 800c162:	e7de      	b.n	800c122 <_scanf_float+0xea>
 800c164:	2b6e      	cmp	r3, #110	; 0x6e
 800c166:	d0e9      	beq.n	800c13c <_scanf_float+0x104>
 800c168:	d815      	bhi.n	800c196 <_scanf_float+0x15e>
 800c16a:	2b66      	cmp	r3, #102	; 0x66
 800c16c:	d043      	beq.n	800c1f6 <_scanf_float+0x1be>
 800c16e:	2b69      	cmp	r3, #105	; 0x69
 800c170:	d19a      	bne.n	800c0a8 <_scanf_float+0x70>
 800c172:	f1bb 0f00 	cmp.w	fp, #0
 800c176:	d138      	bne.n	800c1ea <_scanf_float+0x1b2>
 800c178:	f1b9 0f00 	cmp.w	r9, #0
 800c17c:	d197      	bne.n	800c0ae <_scanf_float+0x76>
 800c17e:	6821      	ldr	r1, [r4, #0]
 800c180:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c184:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c188:	d195      	bne.n	800c0b6 <_scanf_float+0x7e>
 800c18a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c18e:	6021      	str	r1, [r4, #0]
 800c190:	f04f 0b01 	mov.w	fp, #1
 800c194:	e011      	b.n	800c1ba <_scanf_float+0x182>
 800c196:	2b74      	cmp	r3, #116	; 0x74
 800c198:	d034      	beq.n	800c204 <_scanf_float+0x1cc>
 800c19a:	2b79      	cmp	r3, #121	; 0x79
 800c19c:	d184      	bne.n	800c0a8 <_scanf_float+0x70>
 800c19e:	f1bb 0f07 	cmp.w	fp, #7
 800c1a2:	d181      	bne.n	800c0a8 <_scanf_float+0x70>
 800c1a4:	f04f 0b08 	mov.w	fp, #8
 800c1a8:	e007      	b.n	800c1ba <_scanf_float+0x182>
 800c1aa:	eb12 0f0b 	cmn.w	r2, fp
 800c1ae:	f47f af7b 	bne.w	800c0a8 <_scanf_float+0x70>
 800c1b2:	6821      	ldr	r1, [r4, #0]
 800c1b4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c1b8:	6021      	str	r1, [r4, #0]
 800c1ba:	702b      	strb	r3, [r5, #0]
 800c1bc:	3501      	adds	r5, #1
 800c1be:	e79a      	b.n	800c0f6 <_scanf_float+0xbe>
 800c1c0:	6821      	ldr	r1, [r4, #0]
 800c1c2:	0608      	lsls	r0, r1, #24
 800c1c4:	f57f af70 	bpl.w	800c0a8 <_scanf_float+0x70>
 800c1c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c1cc:	e7f4      	b.n	800c1b8 <_scanf_float+0x180>
 800c1ce:	2a02      	cmp	r2, #2
 800c1d0:	d047      	beq.n	800c262 <_scanf_float+0x22a>
 800c1d2:	f1bb 0f01 	cmp.w	fp, #1
 800c1d6:	d003      	beq.n	800c1e0 <_scanf_float+0x1a8>
 800c1d8:	f1bb 0f04 	cmp.w	fp, #4
 800c1dc:	f47f af64 	bne.w	800c0a8 <_scanf_float+0x70>
 800c1e0:	f10b 0b01 	add.w	fp, fp, #1
 800c1e4:	fa5f fb8b 	uxtb.w	fp, fp
 800c1e8:	e7e7      	b.n	800c1ba <_scanf_float+0x182>
 800c1ea:	f1bb 0f03 	cmp.w	fp, #3
 800c1ee:	d0f7      	beq.n	800c1e0 <_scanf_float+0x1a8>
 800c1f0:	f1bb 0f05 	cmp.w	fp, #5
 800c1f4:	e7f2      	b.n	800c1dc <_scanf_float+0x1a4>
 800c1f6:	f1bb 0f02 	cmp.w	fp, #2
 800c1fa:	f47f af55 	bne.w	800c0a8 <_scanf_float+0x70>
 800c1fe:	f04f 0b03 	mov.w	fp, #3
 800c202:	e7da      	b.n	800c1ba <_scanf_float+0x182>
 800c204:	f1bb 0f06 	cmp.w	fp, #6
 800c208:	f47f af4e 	bne.w	800c0a8 <_scanf_float+0x70>
 800c20c:	f04f 0b07 	mov.w	fp, #7
 800c210:	e7d3      	b.n	800c1ba <_scanf_float+0x182>
 800c212:	6821      	ldr	r1, [r4, #0]
 800c214:	0588      	lsls	r0, r1, #22
 800c216:	f57f af47 	bpl.w	800c0a8 <_scanf_float+0x70>
 800c21a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800c21e:	6021      	str	r1, [r4, #0]
 800c220:	f8cd 9008 	str.w	r9, [sp, #8]
 800c224:	e7c9      	b.n	800c1ba <_scanf_float+0x182>
 800c226:	6821      	ldr	r1, [r4, #0]
 800c228:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800c22c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c230:	d006      	beq.n	800c240 <_scanf_float+0x208>
 800c232:	0548      	lsls	r0, r1, #21
 800c234:	f57f af38 	bpl.w	800c0a8 <_scanf_float+0x70>
 800c238:	f1b9 0f00 	cmp.w	r9, #0
 800c23c:	f43f af3b 	beq.w	800c0b6 <_scanf_float+0x7e>
 800c240:	0588      	lsls	r0, r1, #22
 800c242:	bf58      	it	pl
 800c244:	9802      	ldrpl	r0, [sp, #8]
 800c246:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c24a:	bf58      	it	pl
 800c24c:	eba9 0000 	subpl.w	r0, r9, r0
 800c250:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800c254:	bf58      	it	pl
 800c256:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800c25a:	6021      	str	r1, [r4, #0]
 800c25c:	f04f 0900 	mov.w	r9, #0
 800c260:	e7ab      	b.n	800c1ba <_scanf_float+0x182>
 800c262:	2203      	movs	r2, #3
 800c264:	e7a9      	b.n	800c1ba <_scanf_float+0x182>
 800c266:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c26a:	9205      	str	r2, [sp, #20]
 800c26c:	4631      	mov	r1, r6
 800c26e:	4638      	mov	r0, r7
 800c270:	4798      	blx	r3
 800c272:	9a05      	ldr	r2, [sp, #20]
 800c274:	2800      	cmp	r0, #0
 800c276:	f43f af04 	beq.w	800c082 <_scanf_float+0x4a>
 800c27a:	e715      	b.n	800c0a8 <_scanf_float+0x70>
 800c27c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c280:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c284:	4632      	mov	r2, r6
 800c286:	4638      	mov	r0, r7
 800c288:	4798      	blx	r3
 800c28a:	6923      	ldr	r3, [r4, #16]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	6123      	str	r3, [r4, #16]
 800c290:	e715      	b.n	800c0be <_scanf_float+0x86>
 800c292:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c296:	2b06      	cmp	r3, #6
 800c298:	d80a      	bhi.n	800c2b0 <_scanf_float+0x278>
 800c29a:	f1bb 0f02 	cmp.w	fp, #2
 800c29e:	d966      	bls.n	800c36e <_scanf_float+0x336>
 800c2a0:	f1ab 0b03 	sub.w	fp, fp, #3
 800c2a4:	fa5f fb8b 	uxtb.w	fp, fp
 800c2a8:	eba5 0b0b 	sub.w	fp, r5, fp
 800c2ac:	455d      	cmp	r5, fp
 800c2ae:	d149      	bne.n	800c344 <_scanf_float+0x30c>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	05da      	lsls	r2, r3, #23
 800c2b4:	d51f      	bpl.n	800c2f6 <_scanf_float+0x2be>
 800c2b6:	055b      	lsls	r3, r3, #21
 800c2b8:	d466      	bmi.n	800c388 <_scanf_float+0x350>
 800c2ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c2be:	6923      	ldr	r3, [r4, #16]
 800c2c0:	2965      	cmp	r1, #101	; 0x65
 800c2c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c2c6:	f105 3bff 	add.w	fp, r5, #4294967295
 800c2ca:	6123      	str	r3, [r4, #16]
 800c2cc:	d00d      	beq.n	800c2ea <_scanf_float+0x2b2>
 800c2ce:	2945      	cmp	r1, #69	; 0x45
 800c2d0:	d00b      	beq.n	800c2ea <_scanf_float+0x2b2>
 800c2d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2d6:	4632      	mov	r2, r6
 800c2d8:	4638      	mov	r0, r7
 800c2da:	4798      	blx	r3
 800c2dc:	6923      	ldr	r3, [r4, #16]
 800c2de:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	f1a5 0b02 	sub.w	fp, r5, #2
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2ee:	4632      	mov	r2, r6
 800c2f0:	4638      	mov	r0, r7
 800c2f2:	4798      	blx	r3
 800c2f4:	465d      	mov	r5, fp
 800c2f6:	6826      	ldr	r6, [r4, #0]
 800c2f8:	f016 0610 	ands.w	r6, r6, #16
 800c2fc:	d170      	bne.n	800c3e0 <_scanf_float+0x3a8>
 800c2fe:	702e      	strb	r6, [r5, #0]
 800c300:	6823      	ldr	r3, [r4, #0]
 800c302:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c30a:	d140      	bne.n	800c38e <_scanf_float+0x356>
 800c30c:	9b02      	ldr	r3, [sp, #8]
 800c30e:	eba9 0303 	sub.w	r3, r9, r3
 800c312:	425a      	negs	r2, r3
 800c314:	2b00      	cmp	r3, #0
 800c316:	d147      	bne.n	800c3a8 <_scanf_float+0x370>
 800c318:	2200      	movs	r2, #0
 800c31a:	4638      	mov	r0, r7
 800c31c:	4641      	mov	r1, r8
 800c31e:	f000 fe6b 	bl	800cff8 <_strtod_r>
 800c322:	6820      	ldr	r0, [r4, #0]
 800c324:	f8da 3000 	ldr.w	r3, [sl]
 800c328:	f010 0f02 	tst.w	r0, #2
 800c32c:	f103 0204 	add.w	r2, r3, #4
 800c330:	f8ca 2000 	str.w	r2, [sl]
 800c334:	d043      	beq.n	800c3be <_scanf_float+0x386>
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	ed83 0b00 	vstr	d0, [r3]
 800c33c:	68e3      	ldr	r3, [r4, #12]
 800c33e:	3301      	adds	r3, #1
 800c340:	60e3      	str	r3, [r4, #12]
 800c342:	e6c0      	b.n	800c0c6 <_scanf_float+0x8e>
 800c344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c348:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c34c:	4632      	mov	r2, r6
 800c34e:	4638      	mov	r0, r7
 800c350:	4798      	blx	r3
 800c352:	6923      	ldr	r3, [r4, #16]
 800c354:	3b01      	subs	r3, #1
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	e7a8      	b.n	800c2ac <_scanf_float+0x274>
 800c35a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c35e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c362:	4632      	mov	r2, r6
 800c364:	4638      	mov	r0, r7
 800c366:	4798      	blx	r3
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	6123      	str	r3, [r4, #16]
 800c36e:	4545      	cmp	r5, r8
 800c370:	d8f3      	bhi.n	800c35a <_scanf_float+0x322>
 800c372:	e6a7      	b.n	800c0c4 <_scanf_float+0x8c>
 800c374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c378:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c37c:	4632      	mov	r2, r6
 800c37e:	4638      	mov	r0, r7
 800c380:	4798      	blx	r3
 800c382:	6923      	ldr	r3, [r4, #16]
 800c384:	3b01      	subs	r3, #1
 800c386:	6123      	str	r3, [r4, #16]
 800c388:	4545      	cmp	r5, r8
 800c38a:	d8f3      	bhi.n	800c374 <_scanf_float+0x33c>
 800c38c:	e69a      	b.n	800c0c4 <_scanf_float+0x8c>
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d0c1      	beq.n	800c318 <_scanf_float+0x2e0>
 800c394:	9904      	ldr	r1, [sp, #16]
 800c396:	230a      	movs	r3, #10
 800c398:	4632      	mov	r2, r6
 800c39a:	3101      	adds	r1, #1
 800c39c:	4638      	mov	r0, r7
 800c39e:	f000 feb7 	bl	800d110 <_strtol_r>
 800c3a2:	9b03      	ldr	r3, [sp, #12]
 800c3a4:	9d04      	ldr	r5, [sp, #16]
 800c3a6:	1ac2      	subs	r2, r0, r3
 800c3a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c3ac:	429d      	cmp	r5, r3
 800c3ae:	bf28      	it	cs
 800c3b0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c3b4:	490b      	ldr	r1, [pc, #44]	; (800c3e4 <_scanf_float+0x3ac>)
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 f81c 	bl	800c3f4 <siprintf>
 800c3bc:	e7ac      	b.n	800c318 <_scanf_float+0x2e0>
 800c3be:	f010 0004 	ands.w	r0, r0, #4
 800c3c2:	d1b8      	bne.n	800c336 <_scanf_float+0x2fe>
 800c3c4:	eeb4 0b40 	vcmp.f64	d0, d0
 800c3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3cc:	681d      	ldr	r5, [r3, #0]
 800c3ce:	d704      	bvc.n	800c3da <_scanf_float+0x3a2>
 800c3d0:	f000 f80a 	bl	800c3e8 <nanf>
 800c3d4:	ed85 0a00 	vstr	s0, [r5]
 800c3d8:	e7b0      	b.n	800c33c <_scanf_float+0x304>
 800c3da:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c3de:	e7f9      	b.n	800c3d4 <_scanf_float+0x39c>
 800c3e0:	2600      	movs	r6, #0
 800c3e2:	e670      	b.n	800c0c6 <_scanf_float+0x8e>
 800c3e4:	0800f12c 	.word	0x0800f12c

0800c3e8 <nanf>:
 800c3e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c3f0 <nanf+0x8>
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	7fc00000 	.word	0x7fc00000

0800c3f4 <siprintf>:
 800c3f4:	b40e      	push	{r1, r2, r3}
 800c3f6:	b500      	push	{lr}
 800c3f8:	b09c      	sub	sp, #112	; 0x70
 800c3fa:	ab1d      	add	r3, sp, #116	; 0x74
 800c3fc:	9002      	str	r0, [sp, #8]
 800c3fe:	9006      	str	r0, [sp, #24]
 800c400:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c404:	4809      	ldr	r0, [pc, #36]	; (800c42c <siprintf+0x38>)
 800c406:	9107      	str	r1, [sp, #28]
 800c408:	9104      	str	r1, [sp, #16]
 800c40a:	4909      	ldr	r1, [pc, #36]	; (800c430 <siprintf+0x3c>)
 800c40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c410:	9105      	str	r1, [sp, #20]
 800c412:	6800      	ldr	r0, [r0, #0]
 800c414:	9301      	str	r3, [sp, #4]
 800c416:	a902      	add	r1, sp, #8
 800c418:	f002 fcca 	bl	800edb0 <_svfiprintf_r>
 800c41c:	9b02      	ldr	r3, [sp, #8]
 800c41e:	2200      	movs	r2, #0
 800c420:	701a      	strb	r2, [r3, #0]
 800c422:	b01c      	add	sp, #112	; 0x70
 800c424:	f85d eb04 	ldr.w	lr, [sp], #4
 800c428:	b003      	add	sp, #12
 800c42a:	4770      	bx	lr
 800c42c:	20000030 	.word	0x20000030
 800c430:	ffff0208 	.word	0xffff0208

0800c434 <sulp>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	4604      	mov	r4, r0
 800c438:	460d      	mov	r5, r1
 800c43a:	4616      	mov	r6, r2
 800c43c:	ec45 4b10 	vmov	d0, r4, r5
 800c440:	f002 fa72 	bl	800e928 <__ulp>
 800c444:	b17e      	cbz	r6, 800c466 <sulp+0x32>
 800c446:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c44a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c44e:	2b00      	cmp	r3, #0
 800c450:	dd09      	ble.n	800c466 <sulp+0x32>
 800c452:	051b      	lsls	r3, r3, #20
 800c454:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c458:	2000      	movs	r0, #0
 800c45a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c45e:	ec41 0b17 	vmov	d7, r0, r1
 800c462:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c466:	bd70      	pop	{r4, r5, r6, pc}

0800c468 <_strtod_l>:
 800c468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46c:	ed2d 8b0c 	vpush	{d8-d13}
 800c470:	4698      	mov	r8, r3
 800c472:	b09d      	sub	sp, #116	; 0x74
 800c474:	2300      	movs	r3, #0
 800c476:	4604      	mov	r4, r0
 800c478:	4640      	mov	r0, r8
 800c47a:	460e      	mov	r6, r1
 800c47c:	9214      	str	r2, [sp, #80]	; 0x50
 800c47e:	9318      	str	r3, [sp, #96]	; 0x60
 800c480:	f001 ff5b 	bl	800e33a <__localeconv_l>
 800c484:	4681      	mov	r9, r0
 800c486:	6800      	ldr	r0, [r0, #0]
 800c488:	f7f3 feda 	bl	8000240 <strlen>
 800c48c:	f04f 0a00 	mov.w	sl, #0
 800c490:	4607      	mov	r7, r0
 800c492:	f04f 0b00 	mov.w	fp, #0
 800c496:	9617      	str	r6, [sp, #92]	; 0x5c
 800c498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c49a:	781a      	ldrb	r2, [r3, #0]
 800c49c:	2a0d      	cmp	r2, #13
 800c49e:	d834      	bhi.n	800c50a <_strtod_l+0xa2>
 800c4a0:	2a09      	cmp	r2, #9
 800c4a2:	d238      	bcs.n	800c516 <_strtod_l+0xae>
 800c4a4:	2a00      	cmp	r2, #0
 800c4a6:	d040      	beq.n	800c52a <_strtod_l+0xc2>
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	930d      	str	r3, [sp, #52]	; 0x34
 800c4ac:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c4ae:	782b      	ldrb	r3, [r5, #0]
 800c4b0:	2b30      	cmp	r3, #48	; 0x30
 800c4b2:	f040 80b3 	bne.w	800c61c <_strtod_l+0x1b4>
 800c4b6:	786b      	ldrb	r3, [r5, #1]
 800c4b8:	2b58      	cmp	r3, #88	; 0x58
 800c4ba:	d001      	beq.n	800c4c0 <_strtod_l+0x58>
 800c4bc:	2b78      	cmp	r3, #120	; 0x78
 800c4be:	d169      	bne.n	800c594 <_strtod_l+0x12c>
 800c4c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4c2:	9301      	str	r3, [sp, #4]
 800c4c4:	ab18      	add	r3, sp, #96	; 0x60
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	f8cd 8008 	str.w	r8, [sp, #8]
 800c4cc:	ab19      	add	r3, sp, #100	; 0x64
 800c4ce:	4a8f      	ldr	r2, [pc, #572]	; (800c70c <_strtod_l+0x2a4>)
 800c4d0:	a917      	add	r1, sp, #92	; 0x5c
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f001 fc57 	bl	800dd86 <__gethex>
 800c4d8:	f010 0607 	ands.w	r6, r0, #7
 800c4dc:	4607      	mov	r7, r0
 800c4de:	d005      	beq.n	800c4ec <_strtod_l+0x84>
 800c4e0:	2e06      	cmp	r6, #6
 800c4e2:	d12c      	bne.n	800c53e <_strtod_l+0xd6>
 800c4e4:	3501      	adds	r5, #1
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	9517      	str	r5, [sp, #92]	; 0x5c
 800c4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800c4ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	f040 855e 	bne.w	800cfb0 <_strtod_l+0xb48>
 800c4f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4f6:	b1eb      	cbz	r3, 800c534 <_strtod_l+0xcc>
 800c4f8:	ec4b ab17 	vmov	d7, sl, fp
 800c4fc:	eeb1 0b47 	vneg.f64	d0, d7
 800c500:	b01d      	add	sp, #116	; 0x74
 800c502:	ecbd 8b0c 	vpop	{d8-d13}
 800c506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50a:	2a2b      	cmp	r2, #43	; 0x2b
 800c50c:	d015      	beq.n	800c53a <_strtod_l+0xd2>
 800c50e:	2a2d      	cmp	r2, #45	; 0x2d
 800c510:	d004      	beq.n	800c51c <_strtod_l+0xb4>
 800c512:	2a20      	cmp	r2, #32
 800c514:	d1c8      	bne.n	800c4a8 <_strtod_l+0x40>
 800c516:	3301      	adds	r3, #1
 800c518:	9317      	str	r3, [sp, #92]	; 0x5c
 800c51a:	e7bd      	b.n	800c498 <_strtod_l+0x30>
 800c51c:	2201      	movs	r2, #1
 800c51e:	920d      	str	r2, [sp, #52]	; 0x34
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	9217      	str	r2, [sp, #92]	; 0x5c
 800c524:	785b      	ldrb	r3, [r3, #1]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1c0      	bne.n	800c4ac <_strtod_l+0x44>
 800c52a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c52c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f040 853c 	bne.w	800cfac <_strtod_l+0xb44>
 800c534:	ec4b ab10 	vmov	d0, sl, fp
 800c538:	e7e2      	b.n	800c500 <_strtod_l+0x98>
 800c53a:	2200      	movs	r2, #0
 800c53c:	e7ef      	b.n	800c51e <_strtod_l+0xb6>
 800c53e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c540:	b13a      	cbz	r2, 800c552 <_strtod_l+0xea>
 800c542:	2135      	movs	r1, #53	; 0x35
 800c544:	a81a      	add	r0, sp, #104	; 0x68
 800c546:	f002 fae8 	bl	800eb1a <__copybits>
 800c54a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c54c:	4620      	mov	r0, r4
 800c54e:	f001 ff53 	bl	800e3f8 <_Bfree>
 800c552:	3e01      	subs	r6, #1
 800c554:	2e04      	cmp	r6, #4
 800c556:	d806      	bhi.n	800c566 <_strtod_l+0xfe>
 800c558:	e8df f006 	tbb	[pc, r6]
 800c55c:	1714030a 	.word	0x1714030a
 800c560:	0a          	.byte	0x0a
 800c561:	00          	.byte	0x00
 800c562:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c566:	073b      	lsls	r3, r7, #28
 800c568:	d5c0      	bpl.n	800c4ec <_strtod_l+0x84>
 800c56a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c56e:	e7bd      	b.n	800c4ec <_strtod_l+0x84>
 800c570:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c574:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c576:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c57a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c57e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c582:	e7f0      	b.n	800c566 <_strtod_l+0xfe>
 800c584:	f8df b188 	ldr.w	fp, [pc, #392]	; 800c710 <_strtod_l+0x2a8>
 800c588:	e7ed      	b.n	800c566 <_strtod_l+0xfe>
 800c58a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c58e:	f04f 3aff 	mov.w	sl, #4294967295
 800c592:	e7e8      	b.n	800c566 <_strtod_l+0xfe>
 800c594:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	9217      	str	r2, [sp, #92]	; 0x5c
 800c59a:	785b      	ldrb	r3, [r3, #1]
 800c59c:	2b30      	cmp	r3, #48	; 0x30
 800c59e:	d0f9      	beq.n	800c594 <_strtod_l+0x12c>
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d0a3      	beq.n	800c4ec <_strtod_l+0x84>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c5a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9306      	str	r3, [sp, #24]
 800c5b0:	9308      	str	r3, [sp, #32]
 800c5b2:	461d      	mov	r5, r3
 800c5b4:	220a      	movs	r2, #10
 800c5b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c5b8:	f890 8000 	ldrb.w	r8, [r0]
 800c5bc:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800c5c0:	b2d9      	uxtb	r1, r3
 800c5c2:	2909      	cmp	r1, #9
 800c5c4:	d92c      	bls.n	800c620 <_strtod_l+0x1b8>
 800c5c6:	463a      	mov	r2, r7
 800c5c8:	f8d9 1000 	ldr.w	r1, [r9]
 800c5cc:	f002 fcf8 	bl	800efc0 <strncmp>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	d035      	beq.n	800c640 <_strtod_l+0x1d8>
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	4642      	mov	r2, r8
 800c5d8:	462b      	mov	r3, r5
 800c5da:	4601      	mov	r1, r0
 800c5dc:	9004      	str	r0, [sp, #16]
 800c5de:	2a65      	cmp	r2, #101	; 0x65
 800c5e0:	d001      	beq.n	800c5e6 <_strtod_l+0x17e>
 800c5e2:	2a45      	cmp	r2, #69	; 0x45
 800c5e4:	d117      	bne.n	800c616 <_strtod_l+0x1ae>
 800c5e6:	b923      	cbnz	r3, 800c5f2 <_strtod_l+0x18a>
 800c5e8:	b910      	cbnz	r0, 800c5f0 <_strtod_l+0x188>
 800c5ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d09c      	beq.n	800c52a <_strtod_l+0xc2>
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c5f4:	1c72      	adds	r2, r6, #1
 800c5f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800c5f8:	7872      	ldrb	r2, [r6, #1]
 800c5fa:	2a2b      	cmp	r2, #43	; 0x2b
 800c5fc:	f000 8082 	beq.w	800c704 <_strtod_l+0x29c>
 800c600:	2a2d      	cmp	r2, #45	; 0x2d
 800c602:	d079      	beq.n	800c6f8 <_strtod_l+0x290>
 800c604:	f04f 0e00 	mov.w	lr, #0
 800c608:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c60c:	f1bc 0f09 	cmp.w	ip, #9
 800c610:	f240 8086 	bls.w	800c720 <_strtod_l+0x2b8>
 800c614:	9617      	str	r6, [sp, #92]	; 0x5c
 800c616:	f04f 0800 	mov.w	r8, #0
 800c61a:	e0a8      	b.n	800c76e <_strtod_l+0x306>
 800c61c:	2300      	movs	r3, #0
 800c61e:	e7c2      	b.n	800c5a6 <_strtod_l+0x13e>
 800c620:	2d08      	cmp	r5, #8
 800c622:	bfd5      	itete	le
 800c624:	9908      	ldrle	r1, [sp, #32]
 800c626:	9906      	ldrgt	r1, [sp, #24]
 800c628:	fb02 3301 	mlale	r3, r2, r1, r3
 800c62c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c630:	f100 0001 	add.w	r0, r0, #1
 800c634:	bfd4      	ite	le
 800c636:	9308      	strle	r3, [sp, #32]
 800c638:	9306      	strgt	r3, [sp, #24]
 800c63a:	3501      	adds	r5, #1
 800c63c:	9017      	str	r0, [sp, #92]	; 0x5c
 800c63e:	e7ba      	b.n	800c5b6 <_strtod_l+0x14e>
 800c640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c642:	19da      	adds	r2, r3, r7
 800c644:	9217      	str	r2, [sp, #92]	; 0x5c
 800c646:	5dda      	ldrb	r2, [r3, r7]
 800c648:	2d00      	cmp	r5, #0
 800c64a:	d038      	beq.n	800c6be <_strtod_l+0x256>
 800c64c:	4601      	mov	r1, r0
 800c64e:	462b      	mov	r3, r5
 800c650:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c654:	2f09      	cmp	r7, #9
 800c656:	d913      	bls.n	800c680 <_strtod_l+0x218>
 800c658:	2701      	movs	r7, #1
 800c65a:	9704      	str	r7, [sp, #16]
 800c65c:	e7bf      	b.n	800c5de <_strtod_l+0x176>
 800c65e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c660:	1c5a      	adds	r2, r3, #1
 800c662:	9217      	str	r2, [sp, #92]	; 0x5c
 800c664:	785a      	ldrb	r2, [r3, #1]
 800c666:	3001      	adds	r0, #1
 800c668:	2a30      	cmp	r2, #48	; 0x30
 800c66a:	d0f8      	beq.n	800c65e <_strtod_l+0x1f6>
 800c66c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c670:	2b08      	cmp	r3, #8
 800c672:	f200 84a2 	bhi.w	800cfba <_strtod_l+0xb52>
 800c676:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c678:	930c      	str	r3, [sp, #48]	; 0x30
 800c67a:	4601      	mov	r1, r0
 800c67c:	2000      	movs	r0, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800c684:	f100 0701 	add.w	r7, r0, #1
 800c688:	d013      	beq.n	800c6b2 <_strtod_l+0x24a>
 800c68a:	4439      	add	r1, r7
 800c68c:	eb00 0e03 	add.w	lr, r0, r3
 800c690:	461f      	mov	r7, r3
 800c692:	f04f 0c0a 	mov.w	ip, #10
 800c696:	45be      	cmp	lr, r7
 800c698:	d113      	bne.n	800c6c2 <_strtod_l+0x25a>
 800c69a:	181f      	adds	r7, r3, r0
 800c69c:	2f08      	cmp	r7, #8
 800c69e:	f103 0301 	add.w	r3, r3, #1
 800c6a2:	4403      	add	r3, r0
 800c6a4:	dc1d      	bgt.n	800c6e2 <_strtod_l+0x27a>
 800c6a6:	9a08      	ldr	r2, [sp, #32]
 800c6a8:	200a      	movs	r0, #10
 800c6aa:	fb00 8202 	mla	r2, r0, r2, r8
 800c6ae:	9208      	str	r2, [sp, #32]
 800c6b0:	2700      	movs	r7, #0
 800c6b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c6b4:	1c50      	adds	r0, r2, #1
 800c6b6:	9017      	str	r0, [sp, #92]	; 0x5c
 800c6b8:	7852      	ldrb	r2, [r2, #1]
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	e7c8      	b.n	800c650 <_strtod_l+0x1e8>
 800c6be:	4628      	mov	r0, r5
 800c6c0:	e7d2      	b.n	800c668 <_strtod_l+0x200>
 800c6c2:	2f08      	cmp	r7, #8
 800c6c4:	f107 0701 	add.w	r7, r7, #1
 800c6c8:	dc04      	bgt.n	800c6d4 <_strtod_l+0x26c>
 800c6ca:	9a08      	ldr	r2, [sp, #32]
 800c6cc:	fb0c f202 	mul.w	r2, ip, r2
 800c6d0:	9208      	str	r2, [sp, #32]
 800c6d2:	e7e0      	b.n	800c696 <_strtod_l+0x22e>
 800c6d4:	2f10      	cmp	r7, #16
 800c6d6:	bfde      	ittt	le
 800c6d8:	9a06      	ldrle	r2, [sp, #24]
 800c6da:	fb0c f202 	mulle.w	r2, ip, r2
 800c6de:	9206      	strle	r2, [sp, #24]
 800c6e0:	e7d9      	b.n	800c696 <_strtod_l+0x22e>
 800c6e2:	2b10      	cmp	r3, #16
 800c6e4:	bfdf      	itttt	le
 800c6e6:	9a06      	ldrle	r2, [sp, #24]
 800c6e8:	200a      	movle	r0, #10
 800c6ea:	fb00 8202 	mlale	r2, r0, r2, r8
 800c6ee:	9206      	strle	r2, [sp, #24]
 800c6f0:	e7de      	b.n	800c6b0 <_strtod_l+0x248>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	9304      	str	r3, [sp, #16]
 800c6f6:	e777      	b.n	800c5e8 <_strtod_l+0x180>
 800c6f8:	f04f 0e01 	mov.w	lr, #1
 800c6fc:	1cb2      	adds	r2, r6, #2
 800c6fe:	9217      	str	r2, [sp, #92]	; 0x5c
 800c700:	78b2      	ldrb	r2, [r6, #2]
 800c702:	e781      	b.n	800c608 <_strtod_l+0x1a0>
 800c704:	f04f 0e00 	mov.w	lr, #0
 800c708:	e7f8      	b.n	800c6fc <_strtod_l+0x294>
 800c70a:	bf00      	nop
 800c70c:	0800f134 	.word	0x0800f134
 800c710:	7ff00000 	.word	0x7ff00000
 800c714:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c716:	f102 0c01 	add.w	ip, r2, #1
 800c71a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c71e:	7852      	ldrb	r2, [r2, #1]
 800c720:	2a30      	cmp	r2, #48	; 0x30
 800c722:	d0f7      	beq.n	800c714 <_strtod_l+0x2ac>
 800c724:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800c728:	f1bc 0f08 	cmp.w	ip, #8
 800c72c:	f63f af73 	bhi.w	800c616 <_strtod_l+0x1ae>
 800c730:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800c734:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c736:	920e      	str	r2, [sp, #56]	; 0x38
 800c738:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c73a:	f102 0c01 	add.w	ip, r2, #1
 800c73e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c742:	7852      	ldrb	r2, [r2, #1]
 800c744:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800c748:	f1b9 0f09 	cmp.w	r9, #9
 800c74c:	d939      	bls.n	800c7c2 <_strtod_l+0x35a>
 800c74e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c750:	ebac 0c07 	sub.w	ip, ip, r7
 800c754:	f1bc 0f08 	cmp.w	ip, #8
 800c758:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800c75c:	dc37      	bgt.n	800c7ce <_strtod_l+0x366>
 800c75e:	45e0      	cmp	r8, ip
 800c760:	bfa8      	it	ge
 800c762:	46e0      	movge	r8, ip
 800c764:	f1be 0f00 	cmp.w	lr, #0
 800c768:	d001      	beq.n	800c76e <_strtod_l+0x306>
 800c76a:	f1c8 0800 	rsb	r8, r8, #0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d151      	bne.n	800c816 <_strtod_l+0x3ae>
 800c772:	2800      	cmp	r0, #0
 800c774:	f47f aeba 	bne.w	800c4ec <_strtod_l+0x84>
 800c778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f47f aeb6 	bne.w	800c4ec <_strtod_l+0x84>
 800c780:	9b04      	ldr	r3, [sp, #16]
 800c782:	2b00      	cmp	r3, #0
 800c784:	f47f aed1 	bne.w	800c52a <_strtod_l+0xc2>
 800c788:	2a4e      	cmp	r2, #78	; 0x4e
 800c78a:	d027      	beq.n	800c7dc <_strtod_l+0x374>
 800c78c:	dc21      	bgt.n	800c7d2 <_strtod_l+0x36a>
 800c78e:	2a49      	cmp	r2, #73	; 0x49
 800c790:	f47f aecb 	bne.w	800c52a <_strtod_l+0xc2>
 800c794:	499a      	ldr	r1, [pc, #616]	; (800ca00 <_strtod_l+0x598>)
 800c796:	a817      	add	r0, sp, #92	; 0x5c
 800c798:	f001 fd28 	bl	800e1ec <__match>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	f43f aec4 	beq.w	800c52a <_strtod_l+0xc2>
 800c7a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7a4:	4997      	ldr	r1, [pc, #604]	; (800ca04 <_strtod_l+0x59c>)
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	a817      	add	r0, sp, #92	; 0x5c
 800c7aa:	9317      	str	r3, [sp, #92]	; 0x5c
 800c7ac:	f001 fd1e 	bl	800e1ec <__match>
 800c7b0:	b910      	cbnz	r0, 800c7b8 <_strtod_l+0x350>
 800c7b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800c7b8:	f8df b260 	ldr.w	fp, [pc, #608]	; 800ca1c <_strtod_l+0x5b4>
 800c7bc:	f04f 0a00 	mov.w	sl, #0
 800c7c0:	e694      	b.n	800c4ec <_strtod_l+0x84>
 800c7c2:	270a      	movs	r7, #10
 800c7c4:	fb07 2808 	mla	r8, r7, r8, r2
 800c7c8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800c7cc:	e7b4      	b.n	800c738 <_strtod_l+0x2d0>
 800c7ce:	46e0      	mov	r8, ip
 800c7d0:	e7c8      	b.n	800c764 <_strtod_l+0x2fc>
 800c7d2:	2a69      	cmp	r2, #105	; 0x69
 800c7d4:	d0de      	beq.n	800c794 <_strtod_l+0x32c>
 800c7d6:	2a6e      	cmp	r2, #110	; 0x6e
 800c7d8:	f47f aea7 	bne.w	800c52a <_strtod_l+0xc2>
 800c7dc:	498a      	ldr	r1, [pc, #552]	; (800ca08 <_strtod_l+0x5a0>)
 800c7de:	a817      	add	r0, sp, #92	; 0x5c
 800c7e0:	f001 fd04 	bl	800e1ec <__match>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	f43f aea0 	beq.w	800c52a <_strtod_l+0xc2>
 800c7ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b28      	cmp	r3, #40	; 0x28
 800c7f0:	d10e      	bne.n	800c810 <_strtod_l+0x3a8>
 800c7f2:	aa1a      	add	r2, sp, #104	; 0x68
 800c7f4:	4985      	ldr	r1, [pc, #532]	; (800ca0c <_strtod_l+0x5a4>)
 800c7f6:	a817      	add	r0, sp, #92	; 0x5c
 800c7f8:	f001 fd0c 	bl	800e214 <__hexnan>
 800c7fc:	2805      	cmp	r0, #5
 800c7fe:	d107      	bne.n	800c810 <_strtod_l+0x3a8>
 800c800:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c802:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c806:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c80a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c80e:	e66d      	b.n	800c4ec <_strtod_l+0x84>
 800c810:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800ca20 <_strtod_l+0x5b8>
 800c814:	e7d2      	b.n	800c7bc <_strtod_l+0x354>
 800c816:	eddd 7a08 	vldr	s15, [sp, #32]
 800c81a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c81e:	eba8 0201 	sub.w	r2, r8, r1
 800c822:	2d00      	cmp	r5, #0
 800c824:	bf08      	it	eq
 800c826:	461d      	moveq	r5, r3
 800c828:	2b10      	cmp	r3, #16
 800c82a:	9204      	str	r2, [sp, #16]
 800c82c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c830:	461a      	mov	r2, r3
 800c832:	bfa8      	it	ge
 800c834:	2210      	movge	r2, #16
 800c836:	2b09      	cmp	r3, #9
 800c838:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c83c:	dc14      	bgt.n	800c868 <_strtod_l+0x400>
 800c83e:	9904      	ldr	r1, [sp, #16]
 800c840:	2900      	cmp	r1, #0
 800c842:	f43f ae53 	beq.w	800c4ec <_strtod_l+0x84>
 800c846:	9904      	ldr	r1, [sp, #16]
 800c848:	dd72      	ble.n	800c930 <_strtod_l+0x4c8>
 800c84a:	2916      	cmp	r1, #22
 800c84c:	dc5a      	bgt.n	800c904 <_strtod_l+0x49c>
 800c84e:	4970      	ldr	r1, [pc, #448]	; (800ca10 <_strtod_l+0x5a8>)
 800c850:	9b04      	ldr	r3, [sp, #16]
 800c852:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c856:	ed91 7b00 	vldr	d7, [r1]
 800c85a:	ec4b ab16 	vmov	d6, sl, fp
 800c85e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c862:	ec5b ab17 	vmov	sl, fp, d7
 800c866:	e641      	b.n	800c4ec <_strtod_l+0x84>
 800c868:	4969      	ldr	r1, [pc, #420]	; (800ca10 <_strtod_l+0x5a8>)
 800c86a:	eddd 7a06 	vldr	s15, [sp, #24]
 800c86e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c872:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800c876:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800c87a:	2b0f      	cmp	r3, #15
 800c87c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c880:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c884:	ec5b ab17 	vmov	sl, fp, d7
 800c888:	ddd9      	ble.n	800c83e <_strtod_l+0x3d6>
 800c88a:	9904      	ldr	r1, [sp, #16]
 800c88c:	1a9a      	subs	r2, r3, r2
 800c88e:	440a      	add	r2, r1
 800c890:	2a00      	cmp	r2, #0
 800c892:	f340 8096 	ble.w	800c9c2 <_strtod_l+0x55a>
 800c896:	f012 000f 	ands.w	r0, r2, #15
 800c89a:	d00a      	beq.n	800c8b2 <_strtod_l+0x44a>
 800c89c:	495c      	ldr	r1, [pc, #368]	; (800ca10 <_strtod_l+0x5a8>)
 800c89e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c8a2:	ed91 7b00 	vldr	d7, [r1]
 800c8a6:	ec4b ab16 	vmov	d6, sl, fp
 800c8aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8ae:	ec5b ab17 	vmov	sl, fp, d7
 800c8b2:	f032 020f 	bics.w	r2, r2, #15
 800c8b6:	d072      	beq.n	800c99e <_strtod_l+0x536>
 800c8b8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c8bc:	dd45      	ble.n	800c94a <_strtod_l+0x4e2>
 800c8be:	2500      	movs	r5, #0
 800c8c0:	46a8      	mov	r8, r5
 800c8c2:	9506      	str	r5, [sp, #24]
 800c8c4:	46a9      	mov	r9, r5
 800c8c6:	2322      	movs	r3, #34	; 0x22
 800c8c8:	f8df b150 	ldr.w	fp, [pc, #336]	; 800ca1c <_strtod_l+0x5b4>
 800c8cc:	6023      	str	r3, [r4, #0]
 800c8ce:	f04f 0a00 	mov.w	sl, #0
 800c8d2:	9b06      	ldr	r3, [sp, #24]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f43f ae09 	beq.w	800c4ec <_strtod_l+0x84>
 800c8da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f001 fd8b 	bl	800e3f8 <_Bfree>
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f001 fd87 	bl	800e3f8 <_Bfree>
 800c8ea:	4641      	mov	r1, r8
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	f001 fd83 	bl	800e3f8 <_Bfree>
 800c8f2:	9906      	ldr	r1, [sp, #24]
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f001 fd7f 	bl	800e3f8 <_Bfree>
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f001 fd7b 	bl	800e3f8 <_Bfree>
 800c902:	e5f3      	b.n	800c4ec <_strtod_l+0x84>
 800c904:	9804      	ldr	r0, [sp, #16]
 800c906:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c90a:	4281      	cmp	r1, r0
 800c90c:	dbbd      	blt.n	800c88a <_strtod_l+0x422>
 800c90e:	4a40      	ldr	r2, [pc, #256]	; (800ca10 <_strtod_l+0x5a8>)
 800c910:	f1c3 030f 	rsb	r3, r3, #15
 800c914:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c918:	ed91 7b00 	vldr	d7, [r1]
 800c91c:	ec4b ab16 	vmov	d6, sl, fp
 800c920:	1ac3      	subs	r3, r0, r3
 800c922:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c926:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c92a:	ed92 6b00 	vldr	d6, [r2]
 800c92e:	e796      	b.n	800c85e <_strtod_l+0x3f6>
 800c930:	3116      	adds	r1, #22
 800c932:	dbaa      	blt.n	800c88a <_strtod_l+0x422>
 800c934:	4936      	ldr	r1, [pc, #216]	; (800ca10 <_strtod_l+0x5a8>)
 800c936:	9b04      	ldr	r3, [sp, #16]
 800c938:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800c93c:	ed91 7b00 	vldr	d7, [r1]
 800c940:	ec4b ab16 	vmov	d6, sl, fp
 800c944:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c948:	e78b      	b.n	800c862 <_strtod_l+0x3fa>
 800c94a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800c94e:	2000      	movs	r0, #0
 800c950:	4e30      	ldr	r6, [pc, #192]	; (800ca14 <_strtod_l+0x5ac>)
 800c952:	1112      	asrs	r2, r2, #4
 800c954:	4601      	mov	r1, r0
 800c956:	2a01      	cmp	r2, #1
 800c958:	dc23      	bgt.n	800c9a2 <_strtod_l+0x53a>
 800c95a:	b108      	cbz	r0, 800c960 <_strtod_l+0x4f8>
 800c95c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800c960:	4a2c      	ldr	r2, [pc, #176]	; (800ca14 <_strtod_l+0x5ac>)
 800c962:	482d      	ldr	r0, [pc, #180]	; (800ca18 <_strtod_l+0x5b0>)
 800c964:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800c968:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c96c:	ed91 7b00 	vldr	d7, [r1]
 800c970:	ec4b ab16 	vmov	d6, sl, fp
 800c974:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c978:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c97c:	9907      	ldr	r1, [sp, #28]
 800c97e:	4a27      	ldr	r2, [pc, #156]	; (800ca1c <_strtod_l+0x5b4>)
 800c980:	400a      	ands	r2, r1
 800c982:	4282      	cmp	r2, r0
 800c984:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800c988:	d899      	bhi.n	800c8be <_strtod_l+0x456>
 800c98a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c98e:	4282      	cmp	r2, r0
 800c990:	bf86      	itte	hi
 800c992:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800ca24 <_strtod_l+0x5bc>
 800c996:	f04f 3aff 	movhi.w	sl, #4294967295
 800c99a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800c99e:	2700      	movs	r7, #0
 800c9a0:	e070      	b.n	800ca84 <_strtod_l+0x61c>
 800c9a2:	07d7      	lsls	r7, r2, #31
 800c9a4:	d50a      	bpl.n	800c9bc <_strtod_l+0x554>
 800c9a6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800c9aa:	ed90 7b00 	vldr	d7, [r0]
 800c9ae:	ed9d 6b06 	vldr	d6, [sp, #24]
 800c9b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c9b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	3101      	adds	r1, #1
 800c9be:	1052      	asrs	r2, r2, #1
 800c9c0:	e7c9      	b.n	800c956 <_strtod_l+0x4ee>
 800c9c2:	d0ec      	beq.n	800c99e <_strtod_l+0x536>
 800c9c4:	4252      	negs	r2, r2
 800c9c6:	f012 000f 	ands.w	r0, r2, #15
 800c9ca:	d00a      	beq.n	800c9e2 <_strtod_l+0x57a>
 800c9cc:	4910      	ldr	r1, [pc, #64]	; (800ca10 <_strtod_l+0x5a8>)
 800c9ce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c9d2:	ed91 7b00 	vldr	d7, [r1]
 800c9d6:	ec4b ab16 	vmov	d6, sl, fp
 800c9da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c9de:	ec5b ab17 	vmov	sl, fp, d7
 800c9e2:	1112      	asrs	r2, r2, #4
 800c9e4:	d0db      	beq.n	800c99e <_strtod_l+0x536>
 800c9e6:	2a1f      	cmp	r2, #31
 800c9e8:	dd1e      	ble.n	800ca28 <_strtod_l+0x5c0>
 800c9ea:	2500      	movs	r5, #0
 800c9ec:	46a8      	mov	r8, r5
 800c9ee:	9506      	str	r5, [sp, #24]
 800c9f0:	46a9      	mov	r9, r5
 800c9f2:	2322      	movs	r3, #34	; 0x22
 800c9f4:	f04f 0a00 	mov.w	sl, #0
 800c9f8:	f04f 0b00 	mov.w	fp, #0
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	e768      	b.n	800c8d2 <_strtod_l+0x46a>
 800ca00:	0800f0fd 	.word	0x0800f0fd
 800ca04:	0800f18b 	.word	0x0800f18b
 800ca08:	0800f105 	.word	0x0800f105
 800ca0c:	0800f148 	.word	0x0800f148
 800ca10:	0800f1c8 	.word	0x0800f1c8
 800ca14:	0800f1a0 	.word	0x0800f1a0
 800ca18:	7ca00000 	.word	0x7ca00000
 800ca1c:	7ff00000 	.word	0x7ff00000
 800ca20:	fff80000 	.word	0xfff80000
 800ca24:	7fefffff 	.word	0x7fefffff
 800ca28:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800ca2c:	f012 0710 	ands.w	r7, r2, #16
 800ca30:	49ab      	ldr	r1, [pc, #684]	; (800cce0 <_strtod_l+0x878>)
 800ca32:	bf18      	it	ne
 800ca34:	276a      	movne	r7, #106	; 0x6a
 800ca36:	2000      	movs	r0, #0
 800ca38:	2a00      	cmp	r2, #0
 800ca3a:	f300 8113 	bgt.w	800cc64 <_strtod_l+0x7fc>
 800ca3e:	b108      	cbz	r0, 800ca44 <_strtod_l+0x5dc>
 800ca40:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800ca44:	b1bf      	cbz	r7, 800ca76 <_strtod_l+0x60e>
 800ca46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ca4a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800ca4e:	2a00      	cmp	r2, #0
 800ca50:	4659      	mov	r1, fp
 800ca52:	dd10      	ble.n	800ca76 <_strtod_l+0x60e>
 800ca54:	2a1f      	cmp	r2, #31
 800ca56:	f340 8113 	ble.w	800cc80 <_strtod_l+0x818>
 800ca5a:	2a34      	cmp	r2, #52	; 0x34
 800ca5c:	bfde      	ittt	le
 800ca5e:	3a20      	suble	r2, #32
 800ca60:	f04f 30ff 	movle.w	r0, #4294967295
 800ca64:	fa00 f202 	lslle.w	r2, r0, r2
 800ca68:	f04f 0a00 	mov.w	sl, #0
 800ca6c:	bfcc      	ite	gt
 800ca6e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ca72:	ea02 0b01 	andle.w	fp, r2, r1
 800ca76:	ec4b ab17 	vmov	d7, sl, fp
 800ca7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca82:	d0b2      	beq.n	800c9ea <_strtod_l+0x582>
 800ca84:	9a08      	ldr	r2, [sp, #32]
 800ca86:	9200      	str	r2, [sp, #0]
 800ca88:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ca8a:	462a      	mov	r2, r5
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f001 fd05 	bl	800e49c <__s2b>
 800ca92:	9006      	str	r0, [sp, #24]
 800ca94:	2800      	cmp	r0, #0
 800ca96:	f43f af12 	beq.w	800c8be <_strtod_l+0x456>
 800ca9a:	9a04      	ldr	r2, [sp, #16]
 800ca9c:	9b04      	ldr	r3, [sp, #16]
 800ca9e:	2a00      	cmp	r2, #0
 800caa0:	f1c3 0300 	rsb	r3, r3, #0
 800caa4:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800ccc8 <_strtod_l+0x860>
 800caa8:	bfa8      	it	ge
 800caaa:	2300      	movge	r3, #0
 800caac:	ed9f ab88 	vldr	d10, [pc, #544]	; 800ccd0 <_strtod_l+0x868>
 800cab0:	ed9f bb89 	vldr	d11, [pc, #548]	; 800ccd8 <_strtod_l+0x870>
 800cab4:	930e      	str	r3, [sp, #56]	; 0x38
 800cab6:	2500      	movs	r5, #0
 800cab8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cabc:	9310      	str	r3, [sp, #64]	; 0x40
 800cabe:	46a8      	mov	r8, r5
 800cac0:	9b06      	ldr	r3, [sp, #24]
 800cac2:	4620      	mov	r0, r4
 800cac4:	6859      	ldr	r1, [r3, #4]
 800cac6:	f001 fc63 	bl	800e390 <_Balloc>
 800caca:	4681      	mov	r9, r0
 800cacc:	2800      	cmp	r0, #0
 800cace:	f43f aefa 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cad2:	9b06      	ldr	r3, [sp, #24]
 800cad4:	691a      	ldr	r2, [r3, #16]
 800cad6:	3202      	adds	r2, #2
 800cad8:	f103 010c 	add.w	r1, r3, #12
 800cadc:	0092      	lsls	r2, r2, #2
 800cade:	300c      	adds	r0, #12
 800cae0:	f7fe fe5e 	bl	800b7a0 <memcpy>
 800cae4:	aa1a      	add	r2, sp, #104	; 0x68
 800cae6:	a919      	add	r1, sp, #100	; 0x64
 800cae8:	ec4b ab10 	vmov	d0, sl, fp
 800caec:	4620      	mov	r0, r4
 800caee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800caf2:	f001 ff8f 	bl	800ea14 <__d2b>
 800caf6:	9018      	str	r0, [sp, #96]	; 0x60
 800caf8:	2800      	cmp	r0, #0
 800cafa:	f43f aee4 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cafe:	2101      	movs	r1, #1
 800cb00:	4620      	mov	r0, r4
 800cb02:	f001 fd57 	bl	800e5b4 <__i2b>
 800cb06:	4680      	mov	r8, r0
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	f43f aedc 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cb0e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800cb10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cb12:	2e00      	cmp	r6, #0
 800cb14:	bfb1      	iteee	lt
 800cb16:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800cb18:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800cb1a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800cb1c:	18f3      	addge	r3, r6, r3
 800cb1e:	bfba      	itte	lt
 800cb20:	1b98      	sublt	r0, r3, r6
 800cb22:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cb24:	9308      	strge	r3, [sp, #32]
 800cb26:	eba6 0607 	sub.w	r6, r6, r7
 800cb2a:	bfb8      	it	lt
 800cb2c:	9308      	strlt	r3, [sp, #32]
 800cb2e:	4416      	add	r6, r2
 800cb30:	4b6c      	ldr	r3, [pc, #432]	; (800cce4 <_strtod_l+0x87c>)
 800cb32:	3e01      	subs	r6, #1
 800cb34:	429e      	cmp	r6, r3
 800cb36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cb3a:	f280 80b4 	bge.w	800cca6 <_strtod_l+0x83e>
 800cb3e:	1b9b      	subs	r3, r3, r6
 800cb40:	2b1f      	cmp	r3, #31
 800cb42:	eba2 0203 	sub.w	r2, r2, r3
 800cb46:	f04f 0101 	mov.w	r1, #1
 800cb4a:	f300 80a0 	bgt.w	800cc8e <_strtod_l+0x826>
 800cb4e:	fa01 f303 	lsl.w	r3, r1, r3
 800cb52:	9311      	str	r3, [sp, #68]	; 0x44
 800cb54:	2300      	movs	r3, #0
 800cb56:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb58:	9b08      	ldr	r3, [sp, #32]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	4402      	add	r2, r0
 800cb5e:	18be      	adds	r6, r7, r2
 800cb60:	9a08      	ldr	r2, [sp, #32]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	bfa8      	it	ge
 800cb66:	461a      	movge	r2, r3
 800cb68:	42b2      	cmp	r2, r6
 800cb6a:	bfa8      	it	ge
 800cb6c:	4632      	movge	r2, r6
 800cb6e:	2a00      	cmp	r2, #0
 800cb70:	dd04      	ble.n	800cb7c <_strtod_l+0x714>
 800cb72:	9908      	ldr	r1, [sp, #32]
 800cb74:	1a9b      	subs	r3, r3, r2
 800cb76:	1ab6      	subs	r6, r6, r2
 800cb78:	1a8a      	subs	r2, r1, r2
 800cb7a:	9208      	str	r2, [sp, #32]
 800cb7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb7e:	b1c2      	cbz	r2, 800cbb2 <_strtod_l+0x74a>
 800cb80:	4641      	mov	r1, r8
 800cb82:	4620      	mov	r0, r4
 800cb84:	9315      	str	r3, [sp, #84]	; 0x54
 800cb86:	f001 fdb5 	bl	800e6f4 <__pow5mult>
 800cb8a:	4680      	mov	r8, r0
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	f43f ae9a 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cb92:	4601      	mov	r1, r0
 800cb94:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cb96:	4620      	mov	r0, r4
 800cb98:	f001 fd15 	bl	800e5c6 <__multiply>
 800cb9c:	900c      	str	r0, [sp, #48]	; 0x30
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	f43f ae91 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cba4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cba6:	4620      	mov	r0, r4
 800cba8:	f001 fc26 	bl	800e3f8 <_Bfree>
 800cbac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbb0:	9218      	str	r2, [sp, #96]	; 0x60
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	dc7c      	bgt.n	800ccb0 <_strtod_l+0x848>
 800cbb6:	9b04      	ldr	r3, [sp, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	dd08      	ble.n	800cbce <_strtod_l+0x766>
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	f001 fd97 	bl	800e6f4 <__pow5mult>
 800cbc6:	4681      	mov	r9, r0
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	f43f ae7c 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cbce:	2e00      	cmp	r6, #0
 800cbd0:	dd08      	ble.n	800cbe4 <_strtod_l+0x77c>
 800cbd2:	4649      	mov	r1, r9
 800cbd4:	4632      	mov	r2, r6
 800cbd6:	4620      	mov	r0, r4
 800cbd8:	f001 fdda 	bl	800e790 <__lshift>
 800cbdc:	4681      	mov	r9, r0
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	f43f ae71 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cbe4:	9b08      	ldr	r3, [sp, #32]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	dd08      	ble.n	800cbfc <_strtod_l+0x794>
 800cbea:	4641      	mov	r1, r8
 800cbec:	461a      	mov	r2, r3
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f001 fdce 	bl	800e790 <__lshift>
 800cbf4:	4680      	mov	r8, r0
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	f43f ae65 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cbfc:	464a      	mov	r2, r9
 800cbfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc00:	4620      	mov	r0, r4
 800cc02:	f001 fe33 	bl	800e86c <__mdiff>
 800cc06:	4605      	mov	r5, r0
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	f43f ae5c 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cc0e:	68c3      	ldr	r3, [r0, #12]
 800cc10:	930c      	str	r3, [sp, #48]	; 0x30
 800cc12:	2300      	movs	r3, #0
 800cc14:	60c3      	str	r3, [r0, #12]
 800cc16:	4641      	mov	r1, r8
 800cc18:	f001 fe0e 	bl	800e838 <__mcmp>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	da63      	bge.n	800cce8 <_strtod_l+0x880>
 800cc20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc22:	b9e3      	cbnz	r3, 800cc5e <_strtod_l+0x7f6>
 800cc24:	f1ba 0f00 	cmp.w	sl, #0
 800cc28:	d119      	bne.n	800cc5e <_strtod_l+0x7f6>
 800cc2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc2e:	b9b3      	cbnz	r3, 800cc5e <_strtod_l+0x7f6>
 800cc30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc34:	0d1b      	lsrs	r3, r3, #20
 800cc36:	051b      	lsls	r3, r3, #20
 800cc38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cc3c:	d90f      	bls.n	800cc5e <_strtod_l+0x7f6>
 800cc3e:	696b      	ldr	r3, [r5, #20]
 800cc40:	b913      	cbnz	r3, 800cc48 <_strtod_l+0x7e0>
 800cc42:	692b      	ldr	r3, [r5, #16]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	dd0a      	ble.n	800cc5e <_strtod_l+0x7f6>
 800cc48:	4629      	mov	r1, r5
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f001 fd9f 	bl	800e790 <__lshift>
 800cc52:	4641      	mov	r1, r8
 800cc54:	4605      	mov	r5, r0
 800cc56:	f001 fdef 	bl	800e838 <__mcmp>
 800cc5a:	2800      	cmp	r0, #0
 800cc5c:	dc75      	bgt.n	800cd4a <_strtod_l+0x8e2>
 800cc5e:	2f00      	cmp	r7, #0
 800cc60:	d17f      	bne.n	800cd62 <_strtod_l+0x8fa>
 800cc62:	e63a      	b.n	800c8da <_strtod_l+0x472>
 800cc64:	07d6      	lsls	r6, r2, #31
 800cc66:	d508      	bpl.n	800cc7a <_strtod_l+0x812>
 800cc68:	ed9d 6b06 	vldr	d6, [sp, #24]
 800cc6c:	ed91 7b00 	vldr	d7, [r1]
 800cc70:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cc74:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cc78:	2001      	movs	r0, #1
 800cc7a:	1052      	asrs	r2, r2, #1
 800cc7c:	3108      	adds	r1, #8
 800cc7e:	e6db      	b.n	800ca38 <_strtod_l+0x5d0>
 800cc80:	f04f 31ff 	mov.w	r1, #4294967295
 800cc84:	fa01 f202 	lsl.w	r2, r1, r2
 800cc88:	ea02 0a0a 	and.w	sl, r2, sl
 800cc8c:	e6f3      	b.n	800ca76 <_strtod_l+0x60e>
 800cc8e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800cc92:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800cc96:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800cc9a:	36e2      	adds	r6, #226	; 0xe2
 800cc9c:	fa01 f306 	lsl.w	r3, r1, r6
 800cca0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cca2:	9111      	str	r1, [sp, #68]	; 0x44
 800cca4:	e758      	b.n	800cb58 <_strtod_l+0x6f0>
 800cca6:	2300      	movs	r3, #0
 800cca8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccaa:	2301      	movs	r3, #1
 800ccac:	9311      	str	r3, [sp, #68]	; 0x44
 800ccae:	e753      	b.n	800cb58 <_strtod_l+0x6f0>
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f001 fd6b 	bl	800e790 <__lshift>
 800ccba:	9018      	str	r0, [sp, #96]	; 0x60
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	f47f af7a 	bne.w	800cbb6 <_strtod_l+0x74e>
 800ccc2:	e600      	b.n	800c8c6 <_strtod_l+0x45e>
 800ccc4:	f3af 8000 	nop.w
 800ccc8:	94a03595 	.word	0x94a03595
 800cccc:	3fdfffff 	.word	0x3fdfffff
 800ccd0:	35afe535 	.word	0x35afe535
 800ccd4:	3fe00000 	.word	0x3fe00000
 800ccd8:	94a03595 	.word	0x94a03595
 800ccdc:	3fcfffff 	.word	0x3fcfffff
 800cce0:	0800f160 	.word	0x0800f160
 800cce4:	fffffc02 	.word	0xfffffc02
 800cce8:	f8cd b020 	str.w	fp, [sp, #32]
 800ccec:	f040 8085 	bne.w	800cdfa <_strtod_l+0x992>
 800ccf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccf6:	b322      	cbz	r2, 800cd42 <_strtod_l+0x8da>
 800ccf8:	4ab7      	ldr	r2, [pc, #732]	; (800cfd8 <_strtod_l+0xb70>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d154      	bne.n	800cda8 <_strtod_l+0x940>
 800ccfe:	4651      	mov	r1, sl
 800cd00:	b1e7      	cbz	r7, 800cd3c <_strtod_l+0x8d4>
 800cd02:	4bb6      	ldr	r3, [pc, #728]	; (800cfdc <_strtod_l+0xb74>)
 800cd04:	465a      	mov	r2, fp
 800cd06:	4013      	ands	r3, r2
 800cd08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd10:	d803      	bhi.n	800cd1a <_strtod_l+0x8b2>
 800cd12:	0d1b      	lsrs	r3, r3, #20
 800cd14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd18:	409a      	lsls	r2, r3
 800cd1a:	4291      	cmp	r1, r2
 800cd1c:	d144      	bne.n	800cda8 <_strtod_l+0x940>
 800cd1e:	4bb0      	ldr	r3, [pc, #704]	; (800cfe0 <_strtod_l+0xb78>)
 800cd20:	9a08      	ldr	r2, [sp, #32]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d102      	bne.n	800cd2c <_strtod_l+0x8c4>
 800cd26:	3101      	adds	r1, #1
 800cd28:	f43f adcd 	beq.w	800c8c6 <_strtod_l+0x45e>
 800cd2c:	4bab      	ldr	r3, [pc, #684]	; (800cfdc <_strtod_l+0xb74>)
 800cd2e:	9a08      	ldr	r2, [sp, #32]
 800cd30:	401a      	ands	r2, r3
 800cd32:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800cd36:	f04f 0a00 	mov.w	sl, #0
 800cd3a:	e790      	b.n	800cc5e <_strtod_l+0x7f6>
 800cd3c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd40:	e7eb      	b.n	800cd1a <_strtod_l+0x8b2>
 800cd42:	bb8b      	cbnz	r3, 800cda8 <_strtod_l+0x940>
 800cd44:	f1ba 0f00 	cmp.w	sl, #0
 800cd48:	d12e      	bne.n	800cda8 <_strtod_l+0x940>
 800cd4a:	465b      	mov	r3, fp
 800cd4c:	4aa3      	ldr	r2, [pc, #652]	; (800cfdc <_strtod_l+0xb74>)
 800cd4e:	b30f      	cbz	r7, 800cd94 <_strtod_l+0x92c>
 800cd50:	ea02 010b 	and.w	r1, r2, fp
 800cd54:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cd58:	dc1c      	bgt.n	800cd94 <_strtod_l+0x92c>
 800cd5a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cd5e:	f77f ae48 	ble.w	800c9f2 <_strtod_l+0x58a>
 800cd62:	4aa0      	ldr	r2, [pc, #640]	; (800cfe4 <_strtod_l+0xb7c>)
 800cd64:	2300      	movs	r3, #0
 800cd66:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800cd6a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800cd6e:	ec4b ab17 	vmov	d7, sl, fp
 800cd72:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd76:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cd7a:	9b05      	ldr	r3, [sp, #20]
 800cd7c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	f47f adaa 	bne.w	800c8da <_strtod_l+0x472>
 800cd86:	9b04      	ldr	r3, [sp, #16]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f47f ada6 	bne.w	800c8da <_strtod_l+0x472>
 800cd8e:	2322      	movs	r3, #34	; 0x22
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	e5a2      	b.n	800c8da <_strtod_l+0x472>
 800cd94:	4013      	ands	r3, r2
 800cd96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cd9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cd9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cda2:	f04f 3aff 	mov.w	sl, #4294967295
 800cda6:	e75a      	b.n	800cc5e <_strtod_l+0x7f6>
 800cda8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdaa:	b18b      	cbz	r3, 800cdd0 <_strtod_l+0x968>
 800cdac:	9a08      	ldr	r2, [sp, #32]
 800cdae:	4213      	tst	r3, r2
 800cdb0:	f43f af55 	beq.w	800cc5e <_strtod_l+0x7f6>
 800cdb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdb6:	463a      	mov	r2, r7
 800cdb8:	4650      	mov	r0, sl
 800cdba:	4659      	mov	r1, fp
 800cdbc:	b163      	cbz	r3, 800cdd8 <_strtod_l+0x970>
 800cdbe:	f7ff fb39 	bl	800c434 <sulp>
 800cdc2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800cdc6:	ee37 7b00 	vadd.f64	d7, d7, d0
 800cdca:	ec5b ab17 	vmov	sl, fp, d7
 800cdce:	e746      	b.n	800cc5e <_strtod_l+0x7f6>
 800cdd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdd2:	ea13 0f0a 	tst.w	r3, sl
 800cdd6:	e7eb      	b.n	800cdb0 <_strtod_l+0x948>
 800cdd8:	f7ff fb2c 	bl	800c434 <sulp>
 800cddc:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800cde0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800cde4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cde8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cdf4:	f43f adfd 	beq.w	800c9f2 <_strtod_l+0x58a>
 800cdf8:	e731      	b.n	800cc5e <_strtod_l+0x7f6>
 800cdfa:	4641      	mov	r1, r8
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	f001 fe58 	bl	800eab2 <__ratio>
 800ce02:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ce06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ce0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0e:	d869      	bhi.n	800cee4 <_strtod_l+0xa7c>
 800ce10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d045      	beq.n	800cea2 <_strtod_l+0xa3a>
 800ce16:	4b74      	ldr	r3, [pc, #464]	; (800cfe8 <_strtod_l+0xb80>)
 800ce18:	2200      	movs	r2, #0
 800ce1a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800ce1e:	9808      	ldr	r0, [sp, #32]
 800ce20:	496e      	ldr	r1, [pc, #440]	; (800cfdc <_strtod_l+0xb74>)
 800ce22:	ea00 0601 	and.w	r6, r0, r1
 800ce26:	4871      	ldr	r0, [pc, #452]	; (800cfec <_strtod_l+0xb84>)
 800ce28:	4286      	cmp	r6, r0
 800ce2a:	f040 8089 	bne.w	800cf40 <_strtod_l+0xad8>
 800ce2e:	910f      	str	r1, [sp, #60]	; 0x3c
 800ce30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ce34:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800ce38:	9908      	ldr	r1, [sp, #32]
 800ce3a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800ce3e:	ec4b ab10 	vmov	d0, sl, fp
 800ce42:	ec43 2b1c 	vmov	d12, r2, r3
 800ce46:	f001 fd6f 	bl	800e928 <__ulp>
 800ce4a:	ec4b ab1d 	vmov	d13, sl, fp
 800ce4e:	eeac db00 	vfma.f64	d13, d12, d0
 800ce52:	ed8d db08 	vstr	d13, [sp, #32]
 800ce56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ce5a:	4a65      	ldr	r2, [pc, #404]	; (800cff0 <_strtod_l+0xb88>)
 800ce5c:	4019      	ands	r1, r3
 800ce5e:	4291      	cmp	r1, r2
 800ce60:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800ce64:	d948      	bls.n	800cef8 <_strtod_l+0xa90>
 800ce66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce68:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d103      	bne.n	800ce78 <_strtod_l+0xa10>
 800ce70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce72:	3301      	adds	r3, #1
 800ce74:	f43f ad27 	beq.w	800c8c6 <_strtod_l+0x45e>
 800ce78:	f8df b164 	ldr.w	fp, [pc, #356]	; 800cfe0 <_strtod_l+0xb78>
 800ce7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ce80:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ce82:	4620      	mov	r0, r4
 800ce84:	f001 fab8 	bl	800e3f8 <_Bfree>
 800ce88:	4649      	mov	r1, r9
 800ce8a:	4620      	mov	r0, r4
 800ce8c:	f001 fab4 	bl	800e3f8 <_Bfree>
 800ce90:	4641      	mov	r1, r8
 800ce92:	4620      	mov	r0, r4
 800ce94:	f001 fab0 	bl	800e3f8 <_Bfree>
 800ce98:	4629      	mov	r1, r5
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f001 faac 	bl	800e3f8 <_Bfree>
 800cea0:	e60e      	b.n	800cac0 <_strtod_l+0x658>
 800cea2:	f1ba 0f00 	cmp.w	sl, #0
 800cea6:	d113      	bne.n	800ced0 <_strtod_l+0xa68>
 800cea8:	9b08      	ldr	r3, [sp, #32]
 800ceaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceae:	b9b3      	cbnz	r3, 800cede <_strtod_l+0xa76>
 800ceb0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ceb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ceb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cebc:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800cec0:	d401      	bmi.n	800cec6 <_strtod_l+0xa5e>
 800cec2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cec6:	eeb1 7b48 	vneg.f64	d7, d8
 800ceca:	ec53 2b17 	vmov	r2, r3, d7
 800cece:	e7a6      	b.n	800ce1e <_strtod_l+0x9b6>
 800ced0:	f1ba 0f01 	cmp.w	sl, #1
 800ced4:	d103      	bne.n	800cede <_strtod_l+0xa76>
 800ced6:	9b08      	ldr	r3, [sp, #32]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f43f ad8a 	beq.w	800c9f2 <_strtod_l+0x58a>
 800cede:	2200      	movs	r2, #0
 800cee0:	4b44      	ldr	r3, [pc, #272]	; (800cff4 <_strtod_l+0xb8c>)
 800cee2:	e79a      	b.n	800ce1a <_strtod_l+0x9b2>
 800cee4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cee6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800ceea:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d0e9      	beq.n	800cec6 <_strtod_l+0xa5e>
 800cef2:	ec53 2b18 	vmov	r2, r3, d8
 800cef6:	e792      	b.n	800ce1e <_strtod_l+0x9b6>
 800cef8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cefc:	2f00      	cmp	r7, #0
 800cefe:	d1bf      	bne.n	800ce80 <_strtod_l+0xa18>
 800cf00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf04:	0d1b      	lsrs	r3, r3, #20
 800cf06:	051b      	lsls	r3, r3, #20
 800cf08:	429e      	cmp	r6, r3
 800cf0a:	d1b9      	bne.n	800ce80 <_strtod_l+0xa18>
 800cf0c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800cf10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf12:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800cf16:	ee38 8b40 	vsub.f64	d8, d8, d0
 800cf1a:	b92b      	cbnz	r3, 800cf28 <_strtod_l+0xac0>
 800cf1c:	f1ba 0f00 	cmp.w	sl, #0
 800cf20:	d102      	bne.n	800cf28 <_strtod_l+0xac0>
 800cf22:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800cf26:	b3d2      	cbz	r2, 800cf9e <_strtod_l+0xb36>
 800cf28:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800cf2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf30:	f53f acd3 	bmi.w	800c8da <_strtod_l+0x472>
 800cf34:	eeb4 8bca 	vcmpe.f64	d8, d10
 800cf38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf3c:	dda0      	ble.n	800ce80 <_strtod_l+0xa18>
 800cf3e:	e4cc      	b.n	800c8da <_strtod_l+0x472>
 800cf40:	b1ef      	cbz	r7, 800cf7e <_strtod_l+0xb16>
 800cf42:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800cf46:	d81a      	bhi.n	800cf7e <_strtod_l+0xb16>
 800cf48:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800cfd0 <_strtod_l+0xb68>
 800cf4c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf54:	d810      	bhi.n	800cf78 <_strtod_l+0xb10>
 800cf56:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800cf5a:	ee17 3a90 	vmov	r3, s15
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	bf08      	it	eq
 800cf62:	2301      	moveq	r3, #1
 800cf64:	ee07 3a90 	vmov	s15, r3
 800cf68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf6a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800cf6e:	b99b      	cbnz	r3, 800cf98 <_strtod_l+0xb30>
 800cf70:	eeb1 7b48 	vneg.f64	d7, d8
 800cf74:	ec53 2b17 	vmov	r2, r3, d7
 800cf78:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800cf7c:	1b8b      	subs	r3, r1, r6
 800cf7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cf82:	ec43 2b1c 	vmov	d12, r2, r3
 800cf86:	f001 fccf 	bl	800e928 <__ulp>
 800cf8a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800cf8e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800cf92:	ec5b ab17 	vmov	sl, fp, d7
 800cf96:	e7b1      	b.n	800cefc <_strtod_l+0xa94>
 800cf98:	ec53 2b18 	vmov	r2, r3, d8
 800cf9c:	e7ec      	b.n	800cf78 <_strtod_l+0xb10>
 800cf9e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800cfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa6:	f57f af6b 	bpl.w	800ce80 <_strtod_l+0xa18>
 800cfaa:	e496      	b.n	800c8da <_strtod_l+0x472>
 800cfac:	2300      	movs	r3, #0
 800cfae:	930d      	str	r3, [sp, #52]	; 0x34
 800cfb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfb4:	6013      	str	r3, [r2, #0]
 800cfb6:	f7ff ba9d 	b.w	800c4f4 <_strtod_l+0x8c>
 800cfba:	2a65      	cmp	r2, #101	; 0x65
 800cfbc:	f04f 0100 	mov.w	r1, #0
 800cfc0:	f43f ab97 	beq.w	800c6f2 <_strtod_l+0x28a>
 800cfc4:	2701      	movs	r7, #1
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	9704      	str	r7, [sp, #16]
 800cfca:	f7ff bb0a 	b.w	800c5e2 <_strtod_l+0x17a>
 800cfce:	bf00      	nop
 800cfd0:	ffc00000 	.word	0xffc00000
 800cfd4:	41dfffff 	.word	0x41dfffff
 800cfd8:	000fffff 	.word	0x000fffff
 800cfdc:	7ff00000 	.word	0x7ff00000
 800cfe0:	7fefffff 	.word	0x7fefffff
 800cfe4:	39500000 	.word	0x39500000
 800cfe8:	3ff00000 	.word	0x3ff00000
 800cfec:	7fe00000 	.word	0x7fe00000
 800cff0:	7c9fffff 	.word	0x7c9fffff
 800cff4:	bff00000 	.word	0xbff00000

0800cff8 <_strtod_r>:
 800cff8:	4b05      	ldr	r3, [pc, #20]	; (800d010 <_strtod_r+0x18>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	b410      	push	{r4}
 800cffe:	6a1b      	ldr	r3, [r3, #32]
 800d000:	4c04      	ldr	r4, [pc, #16]	; (800d014 <_strtod_r+0x1c>)
 800d002:	2b00      	cmp	r3, #0
 800d004:	bf08      	it	eq
 800d006:	4623      	moveq	r3, r4
 800d008:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d00c:	f7ff ba2c 	b.w	800c468 <_strtod_l>
 800d010:	20000030 	.word	0x20000030
 800d014:	20000094 	.word	0x20000094

0800d018 <_strtol_l.isra.0>:
 800d018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d01c:	4680      	mov	r8, r0
 800d01e:	4689      	mov	r9, r1
 800d020:	4692      	mov	sl, r2
 800d022:	461e      	mov	r6, r3
 800d024:	460f      	mov	r7, r1
 800d026:	463d      	mov	r5, r7
 800d028:	9808      	ldr	r0, [sp, #32]
 800d02a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d02e:	f001 f981 	bl	800e334 <__locale_ctype_ptr_l>
 800d032:	4420      	add	r0, r4
 800d034:	7843      	ldrb	r3, [r0, #1]
 800d036:	f013 0308 	ands.w	r3, r3, #8
 800d03a:	d132      	bne.n	800d0a2 <_strtol_l.isra.0+0x8a>
 800d03c:	2c2d      	cmp	r4, #45	; 0x2d
 800d03e:	d132      	bne.n	800d0a6 <_strtol_l.isra.0+0x8e>
 800d040:	787c      	ldrb	r4, [r7, #1]
 800d042:	1cbd      	adds	r5, r7, #2
 800d044:	2201      	movs	r2, #1
 800d046:	2e00      	cmp	r6, #0
 800d048:	d05d      	beq.n	800d106 <_strtol_l.isra.0+0xee>
 800d04a:	2e10      	cmp	r6, #16
 800d04c:	d109      	bne.n	800d062 <_strtol_l.isra.0+0x4a>
 800d04e:	2c30      	cmp	r4, #48	; 0x30
 800d050:	d107      	bne.n	800d062 <_strtol_l.isra.0+0x4a>
 800d052:	782b      	ldrb	r3, [r5, #0]
 800d054:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d058:	2b58      	cmp	r3, #88	; 0x58
 800d05a:	d14f      	bne.n	800d0fc <_strtol_l.isra.0+0xe4>
 800d05c:	786c      	ldrb	r4, [r5, #1]
 800d05e:	2610      	movs	r6, #16
 800d060:	3502      	adds	r5, #2
 800d062:	2a00      	cmp	r2, #0
 800d064:	bf14      	ite	ne
 800d066:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d06a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d06e:	2700      	movs	r7, #0
 800d070:	fbb1 fcf6 	udiv	ip, r1, r6
 800d074:	4638      	mov	r0, r7
 800d076:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d07a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d07e:	2b09      	cmp	r3, #9
 800d080:	d817      	bhi.n	800d0b2 <_strtol_l.isra.0+0x9a>
 800d082:	461c      	mov	r4, r3
 800d084:	42a6      	cmp	r6, r4
 800d086:	dd23      	ble.n	800d0d0 <_strtol_l.isra.0+0xb8>
 800d088:	1c7b      	adds	r3, r7, #1
 800d08a:	d007      	beq.n	800d09c <_strtol_l.isra.0+0x84>
 800d08c:	4584      	cmp	ip, r0
 800d08e:	d31c      	bcc.n	800d0ca <_strtol_l.isra.0+0xb2>
 800d090:	d101      	bne.n	800d096 <_strtol_l.isra.0+0x7e>
 800d092:	45a6      	cmp	lr, r4
 800d094:	db19      	blt.n	800d0ca <_strtol_l.isra.0+0xb2>
 800d096:	fb00 4006 	mla	r0, r0, r6, r4
 800d09a:	2701      	movs	r7, #1
 800d09c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0a0:	e7eb      	b.n	800d07a <_strtol_l.isra.0+0x62>
 800d0a2:	462f      	mov	r7, r5
 800d0a4:	e7bf      	b.n	800d026 <_strtol_l.isra.0+0xe>
 800d0a6:	2c2b      	cmp	r4, #43	; 0x2b
 800d0a8:	bf04      	itt	eq
 800d0aa:	1cbd      	addeq	r5, r7, #2
 800d0ac:	787c      	ldrbeq	r4, [r7, #1]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	e7c9      	b.n	800d046 <_strtol_l.isra.0+0x2e>
 800d0b2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d0b6:	2b19      	cmp	r3, #25
 800d0b8:	d801      	bhi.n	800d0be <_strtol_l.isra.0+0xa6>
 800d0ba:	3c37      	subs	r4, #55	; 0x37
 800d0bc:	e7e2      	b.n	800d084 <_strtol_l.isra.0+0x6c>
 800d0be:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d0c2:	2b19      	cmp	r3, #25
 800d0c4:	d804      	bhi.n	800d0d0 <_strtol_l.isra.0+0xb8>
 800d0c6:	3c57      	subs	r4, #87	; 0x57
 800d0c8:	e7dc      	b.n	800d084 <_strtol_l.isra.0+0x6c>
 800d0ca:	f04f 37ff 	mov.w	r7, #4294967295
 800d0ce:	e7e5      	b.n	800d09c <_strtol_l.isra.0+0x84>
 800d0d0:	1c7b      	adds	r3, r7, #1
 800d0d2:	d108      	bne.n	800d0e6 <_strtol_l.isra.0+0xce>
 800d0d4:	2322      	movs	r3, #34	; 0x22
 800d0d6:	f8c8 3000 	str.w	r3, [r8]
 800d0da:	4608      	mov	r0, r1
 800d0dc:	f1ba 0f00 	cmp.w	sl, #0
 800d0e0:	d107      	bne.n	800d0f2 <_strtol_l.isra.0+0xda>
 800d0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e6:	b102      	cbz	r2, 800d0ea <_strtol_l.isra.0+0xd2>
 800d0e8:	4240      	negs	r0, r0
 800d0ea:	f1ba 0f00 	cmp.w	sl, #0
 800d0ee:	d0f8      	beq.n	800d0e2 <_strtol_l.isra.0+0xca>
 800d0f0:	b10f      	cbz	r7, 800d0f6 <_strtol_l.isra.0+0xde>
 800d0f2:	f105 39ff 	add.w	r9, r5, #4294967295
 800d0f6:	f8ca 9000 	str.w	r9, [sl]
 800d0fa:	e7f2      	b.n	800d0e2 <_strtol_l.isra.0+0xca>
 800d0fc:	2430      	movs	r4, #48	; 0x30
 800d0fe:	2e00      	cmp	r6, #0
 800d100:	d1af      	bne.n	800d062 <_strtol_l.isra.0+0x4a>
 800d102:	2608      	movs	r6, #8
 800d104:	e7ad      	b.n	800d062 <_strtol_l.isra.0+0x4a>
 800d106:	2c30      	cmp	r4, #48	; 0x30
 800d108:	d0a3      	beq.n	800d052 <_strtol_l.isra.0+0x3a>
 800d10a:	260a      	movs	r6, #10
 800d10c:	e7a9      	b.n	800d062 <_strtol_l.isra.0+0x4a>
	...

0800d110 <_strtol_r>:
 800d110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d112:	4c06      	ldr	r4, [pc, #24]	; (800d12c <_strtol_r+0x1c>)
 800d114:	4d06      	ldr	r5, [pc, #24]	; (800d130 <_strtol_r+0x20>)
 800d116:	6824      	ldr	r4, [r4, #0]
 800d118:	6a24      	ldr	r4, [r4, #32]
 800d11a:	2c00      	cmp	r4, #0
 800d11c:	bf08      	it	eq
 800d11e:	462c      	moveq	r4, r5
 800d120:	9400      	str	r4, [sp, #0]
 800d122:	f7ff ff79 	bl	800d018 <_strtol_l.isra.0>
 800d126:	b003      	add	sp, #12
 800d128:	bd30      	pop	{r4, r5, pc}
 800d12a:	bf00      	nop
 800d12c:	20000030 	.word	0x20000030
 800d130:	20000094 	.word	0x20000094

0800d134 <quorem>:
 800d134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	6903      	ldr	r3, [r0, #16]
 800d13a:	690c      	ldr	r4, [r1, #16]
 800d13c:	42a3      	cmp	r3, r4
 800d13e:	4680      	mov	r8, r0
 800d140:	f2c0 8082 	blt.w	800d248 <quorem+0x114>
 800d144:	3c01      	subs	r4, #1
 800d146:	f101 0714 	add.w	r7, r1, #20
 800d14a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d14e:	f100 0614 	add.w	r6, r0, #20
 800d152:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d156:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d15a:	eb06 030c 	add.w	r3, r6, ip
 800d15e:	3501      	adds	r5, #1
 800d160:	eb07 090c 	add.w	r9, r7, ip
 800d164:	9301      	str	r3, [sp, #4]
 800d166:	fbb0 f5f5 	udiv	r5, r0, r5
 800d16a:	b395      	cbz	r5, 800d1d2 <quorem+0x9e>
 800d16c:	f04f 0a00 	mov.w	sl, #0
 800d170:	4638      	mov	r0, r7
 800d172:	46b6      	mov	lr, r6
 800d174:	46d3      	mov	fp, sl
 800d176:	f850 2b04 	ldr.w	r2, [r0], #4
 800d17a:	b293      	uxth	r3, r2
 800d17c:	fb05 a303 	mla	r3, r5, r3, sl
 800d180:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d184:	b29b      	uxth	r3, r3
 800d186:	ebab 0303 	sub.w	r3, fp, r3
 800d18a:	0c12      	lsrs	r2, r2, #16
 800d18c:	f8de b000 	ldr.w	fp, [lr]
 800d190:	fb05 a202 	mla	r2, r5, r2, sl
 800d194:	fa13 f38b 	uxtah	r3, r3, fp
 800d198:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d19c:	fa1f fb82 	uxth.w	fp, r2
 800d1a0:	f8de 2000 	ldr.w	r2, [lr]
 800d1a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d1a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1ac:	b29b      	uxth	r3, r3
 800d1ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1b2:	4581      	cmp	r9, r0
 800d1b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d1b8:	f84e 3b04 	str.w	r3, [lr], #4
 800d1bc:	d2db      	bcs.n	800d176 <quorem+0x42>
 800d1be:	f856 300c 	ldr.w	r3, [r6, ip]
 800d1c2:	b933      	cbnz	r3, 800d1d2 <quorem+0x9e>
 800d1c4:	9b01      	ldr	r3, [sp, #4]
 800d1c6:	3b04      	subs	r3, #4
 800d1c8:	429e      	cmp	r6, r3
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	d330      	bcc.n	800d230 <quorem+0xfc>
 800d1ce:	f8c8 4010 	str.w	r4, [r8, #16]
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	f001 fb30 	bl	800e838 <__mcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	db25      	blt.n	800d228 <quorem+0xf4>
 800d1dc:	3501      	adds	r5, #1
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f04f 0c00 	mov.w	ip, #0
 800d1e4:	f857 2b04 	ldr.w	r2, [r7], #4
 800d1e8:	f8d0 e000 	ldr.w	lr, [r0]
 800d1ec:	b293      	uxth	r3, r2
 800d1ee:	ebac 0303 	sub.w	r3, ip, r3
 800d1f2:	0c12      	lsrs	r2, r2, #16
 800d1f4:	fa13 f38e 	uxtah	r3, r3, lr
 800d1f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d1fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d200:	b29b      	uxth	r3, r3
 800d202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d206:	45b9      	cmp	r9, r7
 800d208:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d20c:	f840 3b04 	str.w	r3, [r0], #4
 800d210:	d2e8      	bcs.n	800d1e4 <quorem+0xb0>
 800d212:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d216:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d21a:	b92a      	cbnz	r2, 800d228 <quorem+0xf4>
 800d21c:	3b04      	subs	r3, #4
 800d21e:	429e      	cmp	r6, r3
 800d220:	461a      	mov	r2, r3
 800d222:	d30b      	bcc.n	800d23c <quorem+0x108>
 800d224:	f8c8 4010 	str.w	r4, [r8, #16]
 800d228:	4628      	mov	r0, r5
 800d22a:	b003      	add	sp, #12
 800d22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d230:	6812      	ldr	r2, [r2, #0]
 800d232:	3b04      	subs	r3, #4
 800d234:	2a00      	cmp	r2, #0
 800d236:	d1ca      	bne.n	800d1ce <quorem+0x9a>
 800d238:	3c01      	subs	r4, #1
 800d23a:	e7c5      	b.n	800d1c8 <quorem+0x94>
 800d23c:	6812      	ldr	r2, [r2, #0]
 800d23e:	3b04      	subs	r3, #4
 800d240:	2a00      	cmp	r2, #0
 800d242:	d1ef      	bne.n	800d224 <quorem+0xf0>
 800d244:	3c01      	subs	r4, #1
 800d246:	e7ea      	b.n	800d21e <quorem+0xea>
 800d248:	2000      	movs	r0, #0
 800d24a:	e7ee      	b.n	800d22a <quorem+0xf6>
 800d24c:	0000      	movs	r0, r0
	...

0800d250 <_dtoa_r>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	ec57 6b10 	vmov	r6, r7, d0
 800d258:	b095      	sub	sp, #84	; 0x54
 800d25a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d25c:	9108      	str	r1, [sp, #32]
 800d25e:	4604      	mov	r4, r0
 800d260:	920a      	str	r2, [sp, #40]	; 0x28
 800d262:	9311      	str	r3, [sp, #68]	; 0x44
 800d264:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d268:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d26c:	b93d      	cbnz	r5, 800d27e <_dtoa_r+0x2e>
 800d26e:	2010      	movs	r0, #16
 800d270:	f001 f874 	bl	800e35c <malloc>
 800d274:	6260      	str	r0, [r4, #36]	; 0x24
 800d276:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d27a:	6005      	str	r5, [r0, #0]
 800d27c:	60c5      	str	r5, [r0, #12]
 800d27e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d280:	6819      	ldr	r1, [r3, #0]
 800d282:	b151      	cbz	r1, 800d29a <_dtoa_r+0x4a>
 800d284:	685a      	ldr	r2, [r3, #4]
 800d286:	604a      	str	r2, [r1, #4]
 800d288:	2301      	movs	r3, #1
 800d28a:	4093      	lsls	r3, r2
 800d28c:	608b      	str	r3, [r1, #8]
 800d28e:	4620      	mov	r0, r4
 800d290:	f001 f8b2 	bl	800e3f8 <_Bfree>
 800d294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d296:	2200      	movs	r2, #0
 800d298:	601a      	str	r2, [r3, #0]
 800d29a:	1e3b      	subs	r3, r7, #0
 800d29c:	bfb9      	ittee	lt
 800d29e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d2a2:	9303      	strlt	r3, [sp, #12]
 800d2a4:	2300      	movge	r3, #0
 800d2a6:	f8c8 3000 	strge.w	r3, [r8]
 800d2aa:	9d03      	ldr	r5, [sp, #12]
 800d2ac:	4bac      	ldr	r3, [pc, #688]	; (800d560 <_dtoa_r+0x310>)
 800d2ae:	bfbc      	itt	lt
 800d2b0:	2201      	movlt	r2, #1
 800d2b2:	f8c8 2000 	strlt.w	r2, [r8]
 800d2b6:	43ab      	bics	r3, r5
 800d2b8:	d11b      	bne.n	800d2f2 <_dtoa_r+0xa2>
 800d2ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d2bc:	f242 730f 	movw	r3, #9999	; 0x270f
 800d2c0:	6013      	str	r3, [r2, #0]
 800d2c2:	9b02      	ldr	r3, [sp, #8]
 800d2c4:	b923      	cbnz	r3, 800d2d0 <_dtoa_r+0x80>
 800d2c6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d2ca:	2d00      	cmp	r5, #0
 800d2cc:	f000 84dd 	beq.w	800dc8a <_dtoa_r+0xa3a>
 800d2d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d2d2:	b953      	cbnz	r3, 800d2ea <_dtoa_r+0x9a>
 800d2d4:	4ba3      	ldr	r3, [pc, #652]	; (800d564 <_dtoa_r+0x314>)
 800d2d6:	e020      	b.n	800d31a <_dtoa_r+0xca>
 800d2d8:	4ba3      	ldr	r3, [pc, #652]	; (800d568 <_dtoa_r+0x318>)
 800d2da:	9304      	str	r3, [sp, #16]
 800d2dc:	3308      	adds	r3, #8
 800d2de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d2e0:	6013      	str	r3, [r2, #0]
 800d2e2:	9804      	ldr	r0, [sp, #16]
 800d2e4:	b015      	add	sp, #84	; 0x54
 800d2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ea:	4b9e      	ldr	r3, [pc, #632]	; (800d564 <_dtoa_r+0x314>)
 800d2ec:	9304      	str	r3, [sp, #16]
 800d2ee:	3303      	adds	r3, #3
 800d2f0:	e7f5      	b.n	800d2de <_dtoa_r+0x8e>
 800d2f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d302:	d10c      	bne.n	800d31e <_dtoa_r+0xce>
 800d304:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d306:	2301      	movs	r3, #1
 800d308:	6013      	str	r3, [r2, #0]
 800d30a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 84b9 	beq.w	800dc84 <_dtoa_r+0xa34>
 800d312:	4b96      	ldr	r3, [pc, #600]	; (800d56c <_dtoa_r+0x31c>)
 800d314:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d316:	6013      	str	r3, [r2, #0]
 800d318:	3b01      	subs	r3, #1
 800d31a:	9304      	str	r3, [sp, #16]
 800d31c:	e7e1      	b.n	800d2e2 <_dtoa_r+0x92>
 800d31e:	a913      	add	r1, sp, #76	; 0x4c
 800d320:	aa12      	add	r2, sp, #72	; 0x48
 800d322:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d326:	4620      	mov	r0, r4
 800d328:	f001 fb74 	bl	800ea14 <__d2b>
 800d32c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d330:	9001      	str	r0, [sp, #4]
 800d332:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d334:	2e00      	cmp	r6, #0
 800d336:	d046      	beq.n	800d3c6 <_dtoa_r+0x176>
 800d338:	9805      	ldr	r0, [sp, #20]
 800d33a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d33e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d342:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d346:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d34a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d34e:	2700      	movs	r7, #0
 800d350:	ee07 aa90 	vmov	s15, sl
 800d354:	ec43 2b16 	vmov	d6, r2, r3
 800d358:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d35c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800d548 <_dtoa_r+0x2f8>
 800d360:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d364:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d368:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d550 <_dtoa_r+0x300>
 800d36c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d370:	eeb0 7b46 	vmov.f64	d7, d6
 800d374:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d558 <_dtoa_r+0x308>
 800d378:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d37c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d380:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d388:	ee16 ba90 	vmov	fp, s13
 800d38c:	d508      	bpl.n	800d3a0 <_dtoa_r+0x150>
 800d38e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d392:	eeb4 6b47 	vcmp.f64	d6, d7
 800d396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39a:	bf18      	it	ne
 800d39c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d3a0:	f1bb 0f16 	cmp.w	fp, #22
 800d3a4:	d834      	bhi.n	800d410 <_dtoa_r+0x1c0>
 800d3a6:	4b72      	ldr	r3, [pc, #456]	; (800d570 <_dtoa_r+0x320>)
 800d3a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d3ac:	ed93 7b00 	vldr	d7, [r3]
 800d3b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d3b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3bc:	dd01      	ble.n	800d3c2 <_dtoa_r+0x172>
 800d3be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	e025      	b.n	800d412 <_dtoa_r+0x1c2>
 800d3c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3c8:	eb01 0a03 	add.w	sl, r1, r3
 800d3cc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d3d0:	2b20      	cmp	r3, #32
 800d3d2:	dd17      	ble.n	800d404 <_dtoa_r+0x1b4>
 800d3d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d3d8:	9a02      	ldr	r2, [sp, #8]
 800d3da:	409d      	lsls	r5, r3
 800d3dc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d3e4:	432b      	orrs	r3, r5
 800d3e6:	ee07 3a90 	vmov	s15, r3
 800d3ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d3ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d3f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d3f6:	9805      	ldr	r0, [sp, #20]
 800d3f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3fc:	2701      	movs	r7, #1
 800d3fe:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d402:	e7a5      	b.n	800d350 <_dtoa_r+0x100>
 800d404:	9a02      	ldr	r2, [sp, #8]
 800d406:	f1c3 0320 	rsb	r3, r3, #32
 800d40a:	fa02 f303 	lsl.w	r3, r2, r3
 800d40e:	e7ea      	b.n	800d3e6 <_dtoa_r+0x196>
 800d410:	2301      	movs	r3, #1
 800d412:	eba1 0a0a 	sub.w	sl, r1, sl
 800d416:	9310      	str	r3, [sp, #64]	; 0x40
 800d418:	f1ba 0301 	subs.w	r3, sl, #1
 800d41c:	9307      	str	r3, [sp, #28]
 800d41e:	bf43      	ittte	mi
 800d420:	2300      	movmi	r3, #0
 800d422:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d426:	9307      	strmi	r3, [sp, #28]
 800d428:	f04f 0a00 	movpl.w	sl, #0
 800d42c:	f1bb 0f00 	cmp.w	fp, #0
 800d430:	db19      	blt.n	800d466 <_dtoa_r+0x216>
 800d432:	9b07      	ldr	r3, [sp, #28]
 800d434:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d438:	445b      	add	r3, fp
 800d43a:	9307      	str	r3, [sp, #28]
 800d43c:	f04f 0800 	mov.w	r8, #0
 800d440:	9b08      	ldr	r3, [sp, #32]
 800d442:	2b09      	cmp	r3, #9
 800d444:	d866      	bhi.n	800d514 <_dtoa_r+0x2c4>
 800d446:	2b05      	cmp	r3, #5
 800d448:	bfc4      	itt	gt
 800d44a:	3b04      	subgt	r3, #4
 800d44c:	9308      	strgt	r3, [sp, #32]
 800d44e:	9b08      	ldr	r3, [sp, #32]
 800d450:	f1a3 0302 	sub.w	r3, r3, #2
 800d454:	bfcc      	ite	gt
 800d456:	2500      	movgt	r5, #0
 800d458:	2501      	movle	r5, #1
 800d45a:	2b03      	cmp	r3, #3
 800d45c:	d866      	bhi.n	800d52c <_dtoa_r+0x2dc>
 800d45e:	e8df f003 	tbb	[pc, r3]
 800d462:	5755      	.short	0x5755
 800d464:	4909      	.short	0x4909
 800d466:	2300      	movs	r3, #0
 800d468:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d46c:	f1cb 0800 	rsb	r8, fp, #0
 800d470:	930b      	str	r3, [sp, #44]	; 0x2c
 800d472:	e7e5      	b.n	800d440 <_dtoa_r+0x1f0>
 800d474:	2301      	movs	r3, #1
 800d476:	9309      	str	r3, [sp, #36]	; 0x24
 800d478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	dd59      	ble.n	800d532 <_dtoa_r+0x2e2>
 800d47e:	9306      	str	r3, [sp, #24]
 800d480:	4699      	mov	r9, r3
 800d482:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d484:	2200      	movs	r2, #0
 800d486:	6072      	str	r2, [r6, #4]
 800d488:	2204      	movs	r2, #4
 800d48a:	f102 0014 	add.w	r0, r2, #20
 800d48e:	4298      	cmp	r0, r3
 800d490:	6871      	ldr	r1, [r6, #4]
 800d492:	d953      	bls.n	800d53c <_dtoa_r+0x2ec>
 800d494:	4620      	mov	r0, r4
 800d496:	f000 ff7b 	bl	800e390 <_Balloc>
 800d49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d49c:	6030      	str	r0, [r6, #0]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	9304      	str	r3, [sp, #16]
 800d4a2:	f1b9 0f0e 	cmp.w	r9, #14
 800d4a6:	f200 80c2 	bhi.w	800d62e <_dtoa_r+0x3de>
 800d4aa:	2d00      	cmp	r5, #0
 800d4ac:	f000 80bf 	beq.w	800d62e <_dtoa_r+0x3de>
 800d4b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4b4:	f1bb 0f00 	cmp.w	fp, #0
 800d4b8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d4bc:	f340 80e6 	ble.w	800d68c <_dtoa_r+0x43c>
 800d4c0:	4a2b      	ldr	r2, [pc, #172]	; (800d570 <_dtoa_r+0x320>)
 800d4c2:	f00b 030f 	and.w	r3, fp, #15
 800d4c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4ca:	ed93 7b00 	vldr	d7, [r3]
 800d4ce:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d4d2:	06da      	lsls	r2, r3, #27
 800d4d4:	f140 80d8 	bpl.w	800d688 <_dtoa_r+0x438>
 800d4d8:	4a26      	ldr	r2, [pc, #152]	; (800d574 <_dtoa_r+0x324>)
 800d4da:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d4de:	ed92 6b08 	vldr	d6, [r2, #32]
 800d4e2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d4e6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d4ea:	f003 030f 	and.w	r3, r3, #15
 800d4ee:	2203      	movs	r2, #3
 800d4f0:	4920      	ldr	r1, [pc, #128]	; (800d574 <_dtoa_r+0x324>)
 800d4f2:	e04a      	b.n	800d58a <_dtoa_r+0x33a>
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4fa:	445b      	add	r3, fp
 800d4fc:	f103 0901 	add.w	r9, r3, #1
 800d500:	9306      	str	r3, [sp, #24]
 800d502:	464b      	mov	r3, r9
 800d504:	2b01      	cmp	r3, #1
 800d506:	bfb8      	it	lt
 800d508:	2301      	movlt	r3, #1
 800d50a:	e7ba      	b.n	800d482 <_dtoa_r+0x232>
 800d50c:	2300      	movs	r3, #0
 800d50e:	e7b2      	b.n	800d476 <_dtoa_r+0x226>
 800d510:	2300      	movs	r3, #0
 800d512:	e7f0      	b.n	800d4f6 <_dtoa_r+0x2a6>
 800d514:	2501      	movs	r5, #1
 800d516:	2300      	movs	r3, #0
 800d518:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d51c:	f04f 33ff 	mov.w	r3, #4294967295
 800d520:	9306      	str	r3, [sp, #24]
 800d522:	4699      	mov	r9, r3
 800d524:	2200      	movs	r2, #0
 800d526:	2312      	movs	r3, #18
 800d528:	920a      	str	r2, [sp, #40]	; 0x28
 800d52a:	e7aa      	b.n	800d482 <_dtoa_r+0x232>
 800d52c:	2301      	movs	r3, #1
 800d52e:	9309      	str	r3, [sp, #36]	; 0x24
 800d530:	e7f4      	b.n	800d51c <_dtoa_r+0x2cc>
 800d532:	2301      	movs	r3, #1
 800d534:	9306      	str	r3, [sp, #24]
 800d536:	4699      	mov	r9, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	e7f5      	b.n	800d528 <_dtoa_r+0x2d8>
 800d53c:	3101      	adds	r1, #1
 800d53e:	6071      	str	r1, [r6, #4]
 800d540:	0052      	lsls	r2, r2, #1
 800d542:	e7a2      	b.n	800d48a <_dtoa_r+0x23a>
 800d544:	f3af 8000 	nop.w
 800d548:	636f4361 	.word	0x636f4361
 800d54c:	3fd287a7 	.word	0x3fd287a7
 800d550:	8b60c8b3 	.word	0x8b60c8b3
 800d554:	3fc68a28 	.word	0x3fc68a28
 800d558:	509f79fb 	.word	0x509f79fb
 800d55c:	3fd34413 	.word	0x3fd34413
 800d560:	7ff00000 	.word	0x7ff00000
 800d564:	0800f191 	.word	0x0800f191
 800d568:	0800f188 	.word	0x0800f188
 800d56c:	0800f109 	.word	0x0800f109
 800d570:	0800f1c8 	.word	0x0800f1c8
 800d574:	0800f1a0 	.word	0x0800f1a0
 800d578:	07de      	lsls	r6, r3, #31
 800d57a:	d504      	bpl.n	800d586 <_dtoa_r+0x336>
 800d57c:	ed91 6b00 	vldr	d6, [r1]
 800d580:	3201      	adds	r2, #1
 800d582:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d586:	105b      	asrs	r3, r3, #1
 800d588:	3108      	adds	r1, #8
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1f4      	bne.n	800d578 <_dtoa_r+0x328>
 800d58e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d592:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d596:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d59a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f000 80a7 	beq.w	800d6f0 <_dtoa_r+0x4a0>
 800d5a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d5a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b2:	f140 809d 	bpl.w	800d6f0 <_dtoa_r+0x4a0>
 800d5b6:	f1b9 0f00 	cmp.w	r9, #0
 800d5ba:	f000 8099 	beq.w	800d6f0 <_dtoa_r+0x4a0>
 800d5be:	9b06      	ldr	r3, [sp, #24]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	dd30      	ble.n	800d626 <_dtoa_r+0x3d6>
 800d5c4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d5c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d5cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d5d0:	9d06      	ldr	r5, [sp, #24]
 800d5d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d5d6:	3201      	adds	r2, #1
 800d5d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d5dc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d5e0:	ee07 2a90 	vmov	s15, r2
 800d5e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d5e8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d5ec:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d5f0:	9a03      	ldr	r2, [sp, #12]
 800d5f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5f6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	d17b      	bne.n	800d6f6 <_dtoa_r+0x4a6>
 800d5fe:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d602:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d606:	ec41 0b17 	vmov	d7, r0, r1
 800d60a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d612:	f300 8253 	bgt.w	800dabc <_dtoa_r+0x86c>
 800d616:	eeb1 7b47 	vneg.f64	d7, d7
 800d61a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d622:	f100 8249 	bmi.w	800dab8 <_dtoa_r+0x868>
 800d626:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d62a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d62e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d630:	2b00      	cmp	r3, #0
 800d632:	f2c0 8119 	blt.w	800d868 <_dtoa_r+0x618>
 800d636:	f1bb 0f0e 	cmp.w	fp, #14
 800d63a:	f300 8115 	bgt.w	800d868 <_dtoa_r+0x618>
 800d63e:	4bc3      	ldr	r3, [pc, #780]	; (800d94c <_dtoa_r+0x6fc>)
 800d640:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d644:	ed93 6b00 	vldr	d6, [r3]
 800d648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f280 80ba 	bge.w	800d7c4 <_dtoa_r+0x574>
 800d650:	f1b9 0f00 	cmp.w	r9, #0
 800d654:	f300 80b6 	bgt.w	800d7c4 <_dtoa_r+0x574>
 800d658:	f040 822d 	bne.w	800dab6 <_dtoa_r+0x866>
 800d65c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d660:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d664:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d668:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d670:	464d      	mov	r5, r9
 800d672:	464f      	mov	r7, r9
 800d674:	f280 8204 	bge.w	800da80 <_dtoa_r+0x830>
 800d678:	9b04      	ldr	r3, [sp, #16]
 800d67a:	9a04      	ldr	r2, [sp, #16]
 800d67c:	1c5e      	adds	r6, r3, #1
 800d67e:	2331      	movs	r3, #49	; 0x31
 800d680:	7013      	strb	r3, [r2, #0]
 800d682:	f10b 0b01 	add.w	fp, fp, #1
 800d686:	e1ff      	b.n	800da88 <_dtoa_r+0x838>
 800d688:	2202      	movs	r2, #2
 800d68a:	e731      	b.n	800d4f0 <_dtoa_r+0x2a0>
 800d68c:	d02e      	beq.n	800d6ec <_dtoa_r+0x49c>
 800d68e:	f1cb 0300 	rsb	r3, fp, #0
 800d692:	4aae      	ldr	r2, [pc, #696]	; (800d94c <_dtoa_r+0x6fc>)
 800d694:	f003 010f 	and.w	r1, r3, #15
 800d698:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d69c:	ed92 7b00 	vldr	d7, [r2]
 800d6a0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d6a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d6a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d6ac:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d6b0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d6b4:	49a6      	ldr	r1, [pc, #664]	; (800d950 <_dtoa_r+0x700>)
 800d6b6:	111b      	asrs	r3, r3, #4
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	2202      	movs	r2, #2
 800d6bc:	b93b      	cbnz	r3, 800d6ce <_dtoa_r+0x47e>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	f43f af6b 	beq.w	800d59a <_dtoa_r+0x34a>
 800d6c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6cc:	e765      	b.n	800d59a <_dtoa_r+0x34a>
 800d6ce:	07dd      	lsls	r5, r3, #31
 800d6d0:	d509      	bpl.n	800d6e6 <_dtoa_r+0x496>
 800d6d2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d6d6:	ed91 7b00 	vldr	d7, [r1]
 800d6da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d6de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d6e2:	3201      	adds	r2, #1
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	105b      	asrs	r3, r3, #1
 800d6e8:	3108      	adds	r1, #8
 800d6ea:	e7e7      	b.n	800d6bc <_dtoa_r+0x46c>
 800d6ec:	2202      	movs	r2, #2
 800d6ee:	e754      	b.n	800d59a <_dtoa_r+0x34a>
 800d6f0:	465b      	mov	r3, fp
 800d6f2:	464d      	mov	r5, r9
 800d6f4:	e770      	b.n	800d5d8 <_dtoa_r+0x388>
 800d6f6:	4a95      	ldr	r2, [pc, #596]	; (800d94c <_dtoa_r+0x6fc>)
 800d6f8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d6fc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d702:	ec41 0b17 	vmov	d7, r0, r1
 800d706:	b35a      	cbz	r2, 800d760 <_dtoa_r+0x510>
 800d708:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d70c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d710:	9e04      	ldr	r6, [sp, #16]
 800d712:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d716:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d71a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d71e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d722:	ee14 2a90 	vmov	r2, s9
 800d726:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d72a:	3230      	adds	r2, #48	; 0x30
 800d72c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d730:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d738:	f806 2b01 	strb.w	r2, [r6], #1
 800d73c:	d43b      	bmi.n	800d7b6 <_dtoa_r+0x566>
 800d73e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d742:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74a:	d472      	bmi.n	800d832 <_dtoa_r+0x5e2>
 800d74c:	9a04      	ldr	r2, [sp, #16]
 800d74e:	1ab2      	subs	r2, r6, r2
 800d750:	4295      	cmp	r5, r2
 800d752:	f77f af68 	ble.w	800d626 <_dtoa_r+0x3d6>
 800d756:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d75a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d75e:	e7de      	b.n	800d71e <_dtoa_r+0x4ce>
 800d760:	9a04      	ldr	r2, [sp, #16]
 800d762:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d766:	1956      	adds	r6, r2, r5
 800d768:	4611      	mov	r1, r2
 800d76a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d76e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d772:	ee14 2a90 	vmov	r2, s9
 800d776:	3230      	adds	r2, #48	; 0x30
 800d778:	f801 2b01 	strb.w	r2, [r1], #1
 800d77c:	42b1      	cmp	r1, r6
 800d77e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d782:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d786:	d11a      	bne.n	800d7be <_dtoa_r+0x56e>
 800d788:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d78c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d790:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d798:	dc4b      	bgt.n	800d832 <_dtoa_r+0x5e2>
 800d79a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d79e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a6:	f57f af3e 	bpl.w	800d626 <_dtoa_r+0x3d6>
 800d7aa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d7ae:	2a30      	cmp	r2, #48	; 0x30
 800d7b0:	f106 31ff 	add.w	r1, r6, #4294967295
 800d7b4:	d001      	beq.n	800d7ba <_dtoa_r+0x56a>
 800d7b6:	469b      	mov	fp, r3
 800d7b8:	e02a      	b.n	800d810 <_dtoa_r+0x5c0>
 800d7ba:	460e      	mov	r6, r1
 800d7bc:	e7f5      	b.n	800d7aa <_dtoa_r+0x55a>
 800d7be:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d7c2:	e7d4      	b.n	800d76e <_dtoa_r+0x51e>
 800d7c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d7c8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d7cc:	9e04      	ldr	r6, [sp, #16]
 800d7ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d7d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d7d6:	ee15 3a10 	vmov	r3, s10
 800d7da:	3330      	adds	r3, #48	; 0x30
 800d7dc:	f806 3b01 	strb.w	r3, [r6], #1
 800d7e0:	9b04      	ldr	r3, [sp, #16]
 800d7e2:	1af3      	subs	r3, r6, r3
 800d7e4:	4599      	cmp	r9, r3
 800d7e6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d7ea:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d7ee:	d133      	bne.n	800d858 <_dtoa_r+0x608>
 800d7f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d7f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7fc:	dc18      	bgt.n	800d830 <_dtoa_r+0x5e0>
 800d7fe:	eeb4 7b46 	vcmp.f64	d7, d6
 800d802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d806:	d103      	bne.n	800d810 <_dtoa_r+0x5c0>
 800d808:	ee15 3a10 	vmov	r3, s10
 800d80c:	07db      	lsls	r3, r3, #31
 800d80e:	d40f      	bmi.n	800d830 <_dtoa_r+0x5e0>
 800d810:	9901      	ldr	r1, [sp, #4]
 800d812:	4620      	mov	r0, r4
 800d814:	f000 fdf0 	bl	800e3f8 <_Bfree>
 800d818:	2300      	movs	r3, #0
 800d81a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d81c:	7033      	strb	r3, [r6, #0]
 800d81e:	f10b 0301 	add.w	r3, fp, #1
 800d822:	6013      	str	r3, [r2, #0]
 800d824:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d826:	2b00      	cmp	r3, #0
 800d828:	f43f ad5b 	beq.w	800d2e2 <_dtoa_r+0x92>
 800d82c:	601e      	str	r6, [r3, #0]
 800d82e:	e558      	b.n	800d2e2 <_dtoa_r+0x92>
 800d830:	465b      	mov	r3, fp
 800d832:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d836:	2939      	cmp	r1, #57	; 0x39
 800d838:	f106 32ff 	add.w	r2, r6, #4294967295
 800d83c:	d106      	bne.n	800d84c <_dtoa_r+0x5fc>
 800d83e:	9904      	ldr	r1, [sp, #16]
 800d840:	4291      	cmp	r1, r2
 800d842:	d107      	bne.n	800d854 <_dtoa_r+0x604>
 800d844:	2230      	movs	r2, #48	; 0x30
 800d846:	700a      	strb	r2, [r1, #0]
 800d848:	3301      	adds	r3, #1
 800d84a:	460a      	mov	r2, r1
 800d84c:	7811      	ldrb	r1, [r2, #0]
 800d84e:	3101      	adds	r1, #1
 800d850:	7011      	strb	r1, [r2, #0]
 800d852:	e7b0      	b.n	800d7b6 <_dtoa_r+0x566>
 800d854:	4616      	mov	r6, r2
 800d856:	e7ec      	b.n	800d832 <_dtoa_r+0x5e2>
 800d858:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d85c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d864:	d1b3      	bne.n	800d7ce <_dtoa_r+0x57e>
 800d866:	e7d3      	b.n	800d810 <_dtoa_r+0x5c0>
 800d868:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d86a:	2a00      	cmp	r2, #0
 800d86c:	f000 808d 	beq.w	800d98a <_dtoa_r+0x73a>
 800d870:	9a08      	ldr	r2, [sp, #32]
 800d872:	2a01      	cmp	r2, #1
 800d874:	dc72      	bgt.n	800d95c <_dtoa_r+0x70c>
 800d876:	2f00      	cmp	r7, #0
 800d878:	d06c      	beq.n	800d954 <_dtoa_r+0x704>
 800d87a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d87e:	4645      	mov	r5, r8
 800d880:	4656      	mov	r6, sl
 800d882:	9a07      	ldr	r2, [sp, #28]
 800d884:	2101      	movs	r1, #1
 800d886:	441a      	add	r2, r3
 800d888:	4620      	mov	r0, r4
 800d88a:	449a      	add	sl, r3
 800d88c:	9207      	str	r2, [sp, #28]
 800d88e:	f000 fe91 	bl	800e5b4 <__i2b>
 800d892:	4607      	mov	r7, r0
 800d894:	2e00      	cmp	r6, #0
 800d896:	dd0b      	ble.n	800d8b0 <_dtoa_r+0x660>
 800d898:	9b07      	ldr	r3, [sp, #28]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	dd08      	ble.n	800d8b0 <_dtoa_r+0x660>
 800d89e:	42b3      	cmp	r3, r6
 800d8a0:	9a07      	ldr	r2, [sp, #28]
 800d8a2:	bfa8      	it	ge
 800d8a4:	4633      	movge	r3, r6
 800d8a6:	ebaa 0a03 	sub.w	sl, sl, r3
 800d8aa:	1af6      	subs	r6, r6, r3
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	9307      	str	r3, [sp, #28]
 800d8b0:	f1b8 0f00 	cmp.w	r8, #0
 800d8b4:	d01d      	beq.n	800d8f2 <_dtoa_r+0x6a2>
 800d8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d06a      	beq.n	800d992 <_dtoa_r+0x742>
 800d8bc:	b18d      	cbz	r5, 800d8e2 <_dtoa_r+0x692>
 800d8be:	4639      	mov	r1, r7
 800d8c0:	462a      	mov	r2, r5
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f000 ff16 	bl	800e6f4 <__pow5mult>
 800d8c8:	9a01      	ldr	r2, [sp, #4]
 800d8ca:	4601      	mov	r1, r0
 800d8cc:	4607      	mov	r7, r0
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	f000 fe79 	bl	800e5c6 <__multiply>
 800d8d4:	9901      	ldr	r1, [sp, #4]
 800d8d6:	900c      	str	r0, [sp, #48]	; 0x30
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f000 fd8d 	bl	800e3f8 <_Bfree>
 800d8de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	ebb8 0205 	subs.w	r2, r8, r5
 800d8e6:	d004      	beq.n	800d8f2 <_dtoa_r+0x6a2>
 800d8e8:	9901      	ldr	r1, [sp, #4]
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f000 ff02 	bl	800e6f4 <__pow5mult>
 800d8f0:	9001      	str	r0, [sp, #4]
 800d8f2:	2101      	movs	r1, #1
 800d8f4:	4620      	mov	r0, r4
 800d8f6:	f000 fe5d 	bl	800e5b4 <__i2b>
 800d8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8fc:	4605      	mov	r5, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f000 81ca 	beq.w	800dc98 <_dtoa_r+0xa48>
 800d904:	461a      	mov	r2, r3
 800d906:	4601      	mov	r1, r0
 800d908:	4620      	mov	r0, r4
 800d90a:	f000 fef3 	bl	800e6f4 <__pow5mult>
 800d90e:	9b08      	ldr	r3, [sp, #32]
 800d910:	2b01      	cmp	r3, #1
 800d912:	4605      	mov	r5, r0
 800d914:	dc44      	bgt.n	800d9a0 <_dtoa_r+0x750>
 800d916:	9b02      	ldr	r3, [sp, #8]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d13c      	bne.n	800d996 <_dtoa_r+0x746>
 800d91c:	9b03      	ldr	r3, [sp, #12]
 800d91e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d922:	2b00      	cmp	r3, #0
 800d924:	d137      	bne.n	800d996 <_dtoa_r+0x746>
 800d926:	9b03      	ldr	r3, [sp, #12]
 800d928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d92c:	0d1b      	lsrs	r3, r3, #20
 800d92e:	051b      	lsls	r3, r3, #20
 800d930:	2b00      	cmp	r3, #0
 800d932:	d033      	beq.n	800d99c <_dtoa_r+0x74c>
 800d934:	9b07      	ldr	r3, [sp, #28]
 800d936:	3301      	adds	r3, #1
 800d938:	f10a 0a01 	add.w	sl, sl, #1
 800d93c:	9307      	str	r3, [sp, #28]
 800d93e:	f04f 0801 	mov.w	r8, #1
 800d942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d944:	bb73      	cbnz	r3, 800d9a4 <_dtoa_r+0x754>
 800d946:	2001      	movs	r0, #1
 800d948:	e034      	b.n	800d9b4 <_dtoa_r+0x764>
 800d94a:	bf00      	nop
 800d94c:	0800f1c8 	.word	0x0800f1c8
 800d950:	0800f1a0 	.word	0x0800f1a0
 800d954:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d95a:	e790      	b.n	800d87e <_dtoa_r+0x62e>
 800d95c:	f109 35ff 	add.w	r5, r9, #4294967295
 800d960:	45a8      	cmp	r8, r5
 800d962:	bfbf      	itttt	lt
 800d964:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800d966:	eba5 0808 	sublt.w	r8, r5, r8
 800d96a:	4443      	addlt	r3, r8
 800d96c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800d96e:	bfb6      	itet	lt
 800d970:	46a8      	movlt	r8, r5
 800d972:	eba8 0505 	subge.w	r5, r8, r5
 800d976:	2500      	movlt	r5, #0
 800d978:	f1b9 0f00 	cmp.w	r9, #0
 800d97c:	bfb9      	ittee	lt
 800d97e:	ebaa 0609 	sublt.w	r6, sl, r9
 800d982:	2300      	movlt	r3, #0
 800d984:	4656      	movge	r6, sl
 800d986:	464b      	movge	r3, r9
 800d988:	e77b      	b.n	800d882 <_dtoa_r+0x632>
 800d98a:	4645      	mov	r5, r8
 800d98c:	4656      	mov	r6, sl
 800d98e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d990:	e780      	b.n	800d894 <_dtoa_r+0x644>
 800d992:	4642      	mov	r2, r8
 800d994:	e7a8      	b.n	800d8e8 <_dtoa_r+0x698>
 800d996:	f04f 0800 	mov.w	r8, #0
 800d99a:	e7d2      	b.n	800d942 <_dtoa_r+0x6f2>
 800d99c:	4698      	mov	r8, r3
 800d99e:	e7d0      	b.n	800d942 <_dtoa_r+0x6f2>
 800d9a0:	f04f 0800 	mov.w	r8, #0
 800d9a4:	692b      	ldr	r3, [r5, #16]
 800d9a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d9aa:	6918      	ldr	r0, [r3, #16]
 800d9ac:	f000 fdb4 	bl	800e518 <__hi0bits>
 800d9b0:	f1c0 0020 	rsb	r0, r0, #32
 800d9b4:	9b07      	ldr	r3, [sp, #28]
 800d9b6:	4418      	add	r0, r3
 800d9b8:	f010 001f 	ands.w	r0, r0, #31
 800d9bc:	d047      	beq.n	800da4e <_dtoa_r+0x7fe>
 800d9be:	f1c0 0320 	rsb	r3, r0, #32
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	dd3b      	ble.n	800da3e <_dtoa_r+0x7ee>
 800d9c6:	9b07      	ldr	r3, [sp, #28]
 800d9c8:	f1c0 001c 	rsb	r0, r0, #28
 800d9cc:	4482      	add	sl, r0
 800d9ce:	4406      	add	r6, r0
 800d9d0:	4403      	add	r3, r0
 800d9d2:	9307      	str	r3, [sp, #28]
 800d9d4:	f1ba 0f00 	cmp.w	sl, #0
 800d9d8:	dd05      	ble.n	800d9e6 <_dtoa_r+0x796>
 800d9da:	4652      	mov	r2, sl
 800d9dc:	9901      	ldr	r1, [sp, #4]
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f000 fed6 	bl	800e790 <__lshift>
 800d9e4:	9001      	str	r0, [sp, #4]
 800d9e6:	9b07      	ldr	r3, [sp, #28]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	dd05      	ble.n	800d9f8 <_dtoa_r+0x7a8>
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f000 fecd 	bl	800e790 <__lshift>
 800d9f6:	4605      	mov	r5, r0
 800d9f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d9fa:	b353      	cbz	r3, 800da52 <_dtoa_r+0x802>
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	9801      	ldr	r0, [sp, #4]
 800da00:	f000 ff1a 	bl	800e838 <__mcmp>
 800da04:	2800      	cmp	r0, #0
 800da06:	da24      	bge.n	800da52 <_dtoa_r+0x802>
 800da08:	2300      	movs	r3, #0
 800da0a:	220a      	movs	r2, #10
 800da0c:	9901      	ldr	r1, [sp, #4]
 800da0e:	4620      	mov	r0, r4
 800da10:	f000 fd09 	bl	800e426 <__multadd>
 800da14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da16:	9001      	str	r0, [sp, #4]
 800da18:	f10b 3bff 	add.w	fp, fp, #4294967295
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f000 8142 	beq.w	800dca6 <_dtoa_r+0xa56>
 800da22:	2300      	movs	r3, #0
 800da24:	4639      	mov	r1, r7
 800da26:	220a      	movs	r2, #10
 800da28:	4620      	mov	r0, r4
 800da2a:	f000 fcfc 	bl	800e426 <__multadd>
 800da2e:	9b06      	ldr	r3, [sp, #24]
 800da30:	2b00      	cmp	r3, #0
 800da32:	4607      	mov	r7, r0
 800da34:	dc4b      	bgt.n	800dace <_dtoa_r+0x87e>
 800da36:	9b08      	ldr	r3, [sp, #32]
 800da38:	2b02      	cmp	r3, #2
 800da3a:	dd48      	ble.n	800dace <_dtoa_r+0x87e>
 800da3c:	e011      	b.n	800da62 <_dtoa_r+0x812>
 800da3e:	d0c9      	beq.n	800d9d4 <_dtoa_r+0x784>
 800da40:	9a07      	ldr	r2, [sp, #28]
 800da42:	331c      	adds	r3, #28
 800da44:	441a      	add	r2, r3
 800da46:	449a      	add	sl, r3
 800da48:	441e      	add	r6, r3
 800da4a:	4613      	mov	r3, r2
 800da4c:	e7c1      	b.n	800d9d2 <_dtoa_r+0x782>
 800da4e:	4603      	mov	r3, r0
 800da50:	e7f6      	b.n	800da40 <_dtoa_r+0x7f0>
 800da52:	f1b9 0f00 	cmp.w	r9, #0
 800da56:	dc34      	bgt.n	800dac2 <_dtoa_r+0x872>
 800da58:	9b08      	ldr	r3, [sp, #32]
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	dd31      	ble.n	800dac2 <_dtoa_r+0x872>
 800da5e:	f8cd 9018 	str.w	r9, [sp, #24]
 800da62:	9b06      	ldr	r3, [sp, #24]
 800da64:	b963      	cbnz	r3, 800da80 <_dtoa_r+0x830>
 800da66:	4629      	mov	r1, r5
 800da68:	2205      	movs	r2, #5
 800da6a:	4620      	mov	r0, r4
 800da6c:	f000 fcdb 	bl	800e426 <__multadd>
 800da70:	4601      	mov	r1, r0
 800da72:	4605      	mov	r5, r0
 800da74:	9801      	ldr	r0, [sp, #4]
 800da76:	f000 fedf 	bl	800e838 <__mcmp>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f73f adfc 	bgt.w	800d678 <_dtoa_r+0x428>
 800da80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da82:	9e04      	ldr	r6, [sp, #16]
 800da84:	ea6f 0b03 	mvn.w	fp, r3
 800da88:	f04f 0900 	mov.w	r9, #0
 800da8c:	4629      	mov	r1, r5
 800da8e:	4620      	mov	r0, r4
 800da90:	f000 fcb2 	bl	800e3f8 <_Bfree>
 800da94:	2f00      	cmp	r7, #0
 800da96:	f43f aebb 	beq.w	800d810 <_dtoa_r+0x5c0>
 800da9a:	f1b9 0f00 	cmp.w	r9, #0
 800da9e:	d005      	beq.n	800daac <_dtoa_r+0x85c>
 800daa0:	45b9      	cmp	r9, r7
 800daa2:	d003      	beq.n	800daac <_dtoa_r+0x85c>
 800daa4:	4649      	mov	r1, r9
 800daa6:	4620      	mov	r0, r4
 800daa8:	f000 fca6 	bl	800e3f8 <_Bfree>
 800daac:	4639      	mov	r1, r7
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 fca2 	bl	800e3f8 <_Bfree>
 800dab4:	e6ac      	b.n	800d810 <_dtoa_r+0x5c0>
 800dab6:	2500      	movs	r5, #0
 800dab8:	462f      	mov	r7, r5
 800daba:	e7e1      	b.n	800da80 <_dtoa_r+0x830>
 800dabc:	469b      	mov	fp, r3
 800dabe:	462f      	mov	r7, r5
 800dac0:	e5da      	b.n	800d678 <_dtoa_r+0x428>
 800dac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac4:	f8cd 9018 	str.w	r9, [sp, #24]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 80f3 	beq.w	800dcb4 <_dtoa_r+0xa64>
 800dace:	2e00      	cmp	r6, #0
 800dad0:	dd05      	ble.n	800dade <_dtoa_r+0x88e>
 800dad2:	4639      	mov	r1, r7
 800dad4:	4632      	mov	r2, r6
 800dad6:	4620      	mov	r0, r4
 800dad8:	f000 fe5a 	bl	800e790 <__lshift>
 800dadc:	4607      	mov	r7, r0
 800dade:	f1b8 0f00 	cmp.w	r8, #0
 800dae2:	d04c      	beq.n	800db7e <_dtoa_r+0x92e>
 800dae4:	6879      	ldr	r1, [r7, #4]
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 fc52 	bl	800e390 <_Balloc>
 800daec:	693a      	ldr	r2, [r7, #16]
 800daee:	3202      	adds	r2, #2
 800daf0:	4606      	mov	r6, r0
 800daf2:	0092      	lsls	r2, r2, #2
 800daf4:	f107 010c 	add.w	r1, r7, #12
 800daf8:	300c      	adds	r0, #12
 800dafa:	f7fd fe51 	bl	800b7a0 <memcpy>
 800dafe:	2201      	movs	r2, #1
 800db00:	4631      	mov	r1, r6
 800db02:	4620      	mov	r0, r4
 800db04:	f000 fe44 	bl	800e790 <__lshift>
 800db08:	9b02      	ldr	r3, [sp, #8]
 800db0a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800db0e:	f003 0301 	and.w	r3, r3, #1
 800db12:	46b9      	mov	r9, r7
 800db14:	9307      	str	r3, [sp, #28]
 800db16:	4607      	mov	r7, r0
 800db18:	4629      	mov	r1, r5
 800db1a:	9801      	ldr	r0, [sp, #4]
 800db1c:	f7ff fb0a 	bl	800d134 <quorem>
 800db20:	4649      	mov	r1, r9
 800db22:	4606      	mov	r6, r0
 800db24:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800db28:	9801      	ldr	r0, [sp, #4]
 800db2a:	f000 fe85 	bl	800e838 <__mcmp>
 800db2e:	463a      	mov	r2, r7
 800db30:	9002      	str	r0, [sp, #8]
 800db32:	4629      	mov	r1, r5
 800db34:	4620      	mov	r0, r4
 800db36:	f000 fe99 	bl	800e86c <__mdiff>
 800db3a:	68c3      	ldr	r3, [r0, #12]
 800db3c:	4602      	mov	r2, r0
 800db3e:	bb03      	cbnz	r3, 800db82 <_dtoa_r+0x932>
 800db40:	4601      	mov	r1, r0
 800db42:	9009      	str	r0, [sp, #36]	; 0x24
 800db44:	9801      	ldr	r0, [sp, #4]
 800db46:	f000 fe77 	bl	800e838 <__mcmp>
 800db4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db4c:	4603      	mov	r3, r0
 800db4e:	4611      	mov	r1, r2
 800db50:	4620      	mov	r0, r4
 800db52:	9309      	str	r3, [sp, #36]	; 0x24
 800db54:	f000 fc50 	bl	800e3f8 <_Bfree>
 800db58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5a:	b9a3      	cbnz	r3, 800db86 <_dtoa_r+0x936>
 800db5c:	9a08      	ldr	r2, [sp, #32]
 800db5e:	b992      	cbnz	r2, 800db86 <_dtoa_r+0x936>
 800db60:	9a07      	ldr	r2, [sp, #28]
 800db62:	b982      	cbnz	r2, 800db86 <_dtoa_r+0x936>
 800db64:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800db68:	d029      	beq.n	800dbbe <_dtoa_r+0x96e>
 800db6a:	9b02      	ldr	r3, [sp, #8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	dd01      	ble.n	800db74 <_dtoa_r+0x924>
 800db70:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800db74:	f10a 0601 	add.w	r6, sl, #1
 800db78:	f88a 8000 	strb.w	r8, [sl]
 800db7c:	e786      	b.n	800da8c <_dtoa_r+0x83c>
 800db7e:	4638      	mov	r0, r7
 800db80:	e7c2      	b.n	800db08 <_dtoa_r+0x8b8>
 800db82:	2301      	movs	r3, #1
 800db84:	e7e3      	b.n	800db4e <_dtoa_r+0x8fe>
 800db86:	9a02      	ldr	r2, [sp, #8]
 800db88:	2a00      	cmp	r2, #0
 800db8a:	db04      	blt.n	800db96 <_dtoa_r+0x946>
 800db8c:	d124      	bne.n	800dbd8 <_dtoa_r+0x988>
 800db8e:	9a08      	ldr	r2, [sp, #32]
 800db90:	bb12      	cbnz	r2, 800dbd8 <_dtoa_r+0x988>
 800db92:	9a07      	ldr	r2, [sp, #28]
 800db94:	bb02      	cbnz	r2, 800dbd8 <_dtoa_r+0x988>
 800db96:	2b00      	cmp	r3, #0
 800db98:	ddec      	ble.n	800db74 <_dtoa_r+0x924>
 800db9a:	2201      	movs	r2, #1
 800db9c:	9901      	ldr	r1, [sp, #4]
 800db9e:	4620      	mov	r0, r4
 800dba0:	f000 fdf6 	bl	800e790 <__lshift>
 800dba4:	4629      	mov	r1, r5
 800dba6:	9001      	str	r0, [sp, #4]
 800dba8:	f000 fe46 	bl	800e838 <__mcmp>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	dc03      	bgt.n	800dbb8 <_dtoa_r+0x968>
 800dbb0:	d1e0      	bne.n	800db74 <_dtoa_r+0x924>
 800dbb2:	f018 0f01 	tst.w	r8, #1
 800dbb6:	d0dd      	beq.n	800db74 <_dtoa_r+0x924>
 800dbb8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dbbc:	d1d8      	bne.n	800db70 <_dtoa_r+0x920>
 800dbbe:	2339      	movs	r3, #57	; 0x39
 800dbc0:	f10a 0601 	add.w	r6, sl, #1
 800dbc4:	f88a 3000 	strb.w	r3, [sl]
 800dbc8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dbcc:	2b39      	cmp	r3, #57	; 0x39
 800dbce:	f106 32ff 	add.w	r2, r6, #4294967295
 800dbd2:	d04c      	beq.n	800dc6e <_dtoa_r+0xa1e>
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	e051      	b.n	800dc7c <_dtoa_r+0xa2c>
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f10a 0601 	add.w	r6, sl, #1
 800dbde:	dd05      	ble.n	800dbec <_dtoa_r+0x99c>
 800dbe0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dbe4:	d0eb      	beq.n	800dbbe <_dtoa_r+0x96e>
 800dbe6:	f108 0801 	add.w	r8, r8, #1
 800dbea:	e7c5      	b.n	800db78 <_dtoa_r+0x928>
 800dbec:	9b04      	ldr	r3, [sp, #16]
 800dbee:	9a06      	ldr	r2, [sp, #24]
 800dbf0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800dbf4:	1af3      	subs	r3, r6, r3
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d021      	beq.n	800dc3e <_dtoa_r+0x9ee>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	220a      	movs	r2, #10
 800dbfe:	9901      	ldr	r1, [sp, #4]
 800dc00:	4620      	mov	r0, r4
 800dc02:	f000 fc10 	bl	800e426 <__multadd>
 800dc06:	45b9      	cmp	r9, r7
 800dc08:	9001      	str	r0, [sp, #4]
 800dc0a:	f04f 0300 	mov.w	r3, #0
 800dc0e:	f04f 020a 	mov.w	r2, #10
 800dc12:	4649      	mov	r1, r9
 800dc14:	4620      	mov	r0, r4
 800dc16:	d105      	bne.n	800dc24 <_dtoa_r+0x9d4>
 800dc18:	f000 fc05 	bl	800e426 <__multadd>
 800dc1c:	4681      	mov	r9, r0
 800dc1e:	4607      	mov	r7, r0
 800dc20:	46b2      	mov	sl, r6
 800dc22:	e779      	b.n	800db18 <_dtoa_r+0x8c8>
 800dc24:	f000 fbff 	bl	800e426 <__multadd>
 800dc28:	4639      	mov	r1, r7
 800dc2a:	4681      	mov	r9, r0
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	220a      	movs	r2, #10
 800dc30:	4620      	mov	r0, r4
 800dc32:	f000 fbf8 	bl	800e426 <__multadd>
 800dc36:	4607      	mov	r7, r0
 800dc38:	e7f2      	b.n	800dc20 <_dtoa_r+0x9d0>
 800dc3a:	f04f 0900 	mov.w	r9, #0
 800dc3e:	2201      	movs	r2, #1
 800dc40:	9901      	ldr	r1, [sp, #4]
 800dc42:	4620      	mov	r0, r4
 800dc44:	f000 fda4 	bl	800e790 <__lshift>
 800dc48:	4629      	mov	r1, r5
 800dc4a:	9001      	str	r0, [sp, #4]
 800dc4c:	f000 fdf4 	bl	800e838 <__mcmp>
 800dc50:	2800      	cmp	r0, #0
 800dc52:	dcb9      	bgt.n	800dbc8 <_dtoa_r+0x978>
 800dc54:	d102      	bne.n	800dc5c <_dtoa_r+0xa0c>
 800dc56:	f018 0f01 	tst.w	r8, #1
 800dc5a:	d1b5      	bne.n	800dbc8 <_dtoa_r+0x978>
 800dc5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc60:	2b30      	cmp	r3, #48	; 0x30
 800dc62:	f106 32ff 	add.w	r2, r6, #4294967295
 800dc66:	f47f af11 	bne.w	800da8c <_dtoa_r+0x83c>
 800dc6a:	4616      	mov	r6, r2
 800dc6c:	e7f6      	b.n	800dc5c <_dtoa_r+0xa0c>
 800dc6e:	9b04      	ldr	r3, [sp, #16]
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d105      	bne.n	800dc80 <_dtoa_r+0xa30>
 800dc74:	9a04      	ldr	r2, [sp, #16]
 800dc76:	f10b 0b01 	add.w	fp, fp, #1
 800dc7a:	2331      	movs	r3, #49	; 0x31
 800dc7c:	7013      	strb	r3, [r2, #0]
 800dc7e:	e705      	b.n	800da8c <_dtoa_r+0x83c>
 800dc80:	4616      	mov	r6, r2
 800dc82:	e7a1      	b.n	800dbc8 <_dtoa_r+0x978>
 800dc84:	4b16      	ldr	r3, [pc, #88]	; (800dce0 <_dtoa_r+0xa90>)
 800dc86:	f7ff bb48 	b.w	800d31a <_dtoa_r+0xca>
 800dc8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f47f ab23 	bne.w	800d2d8 <_dtoa_r+0x88>
 800dc92:	4b14      	ldr	r3, [pc, #80]	; (800dce4 <_dtoa_r+0xa94>)
 800dc94:	f7ff bb41 	b.w	800d31a <_dtoa_r+0xca>
 800dc98:	9b08      	ldr	r3, [sp, #32]
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	f77f ae3b 	ble.w	800d916 <_dtoa_r+0x6c6>
 800dca0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800dca4:	e64f      	b.n	800d946 <_dtoa_r+0x6f6>
 800dca6:	9b06      	ldr	r3, [sp, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	dc03      	bgt.n	800dcb4 <_dtoa_r+0xa64>
 800dcac:	9b08      	ldr	r3, [sp, #32]
 800dcae:	2b02      	cmp	r3, #2
 800dcb0:	f73f aed7 	bgt.w	800da62 <_dtoa_r+0x812>
 800dcb4:	9e04      	ldr	r6, [sp, #16]
 800dcb6:	9801      	ldr	r0, [sp, #4]
 800dcb8:	4629      	mov	r1, r5
 800dcba:	f7ff fa3b 	bl	800d134 <quorem>
 800dcbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dcc2:	f806 8b01 	strb.w	r8, [r6], #1
 800dcc6:	9b04      	ldr	r3, [sp, #16]
 800dcc8:	9a06      	ldr	r2, [sp, #24]
 800dcca:	1af3      	subs	r3, r6, r3
 800dccc:	429a      	cmp	r2, r3
 800dcce:	ddb4      	ble.n	800dc3a <_dtoa_r+0x9ea>
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	220a      	movs	r2, #10
 800dcd4:	9901      	ldr	r1, [sp, #4]
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f000 fba5 	bl	800e426 <__multadd>
 800dcdc:	9001      	str	r0, [sp, #4]
 800dcde:	e7ea      	b.n	800dcb6 <_dtoa_r+0xa66>
 800dce0:	0800f108 	.word	0x0800f108
 800dce4:	0800f188 	.word	0x0800f188

0800dce8 <rshift>:
 800dce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcea:	6906      	ldr	r6, [r0, #16]
 800dcec:	114b      	asrs	r3, r1, #5
 800dcee:	429e      	cmp	r6, r3
 800dcf0:	f100 0414 	add.w	r4, r0, #20
 800dcf4:	dd30      	ble.n	800dd58 <rshift+0x70>
 800dcf6:	f011 011f 	ands.w	r1, r1, #31
 800dcfa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dcfe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800dd02:	d108      	bne.n	800dd16 <rshift+0x2e>
 800dd04:	4621      	mov	r1, r4
 800dd06:	42b2      	cmp	r2, r6
 800dd08:	460b      	mov	r3, r1
 800dd0a:	d211      	bcs.n	800dd30 <rshift+0x48>
 800dd0c:	f852 3b04 	ldr.w	r3, [r2], #4
 800dd10:	f841 3b04 	str.w	r3, [r1], #4
 800dd14:	e7f7      	b.n	800dd06 <rshift+0x1e>
 800dd16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800dd1a:	f1c1 0c20 	rsb	ip, r1, #32
 800dd1e:	40cd      	lsrs	r5, r1
 800dd20:	3204      	adds	r2, #4
 800dd22:	4623      	mov	r3, r4
 800dd24:	42b2      	cmp	r2, r6
 800dd26:	4617      	mov	r7, r2
 800dd28:	d30c      	bcc.n	800dd44 <rshift+0x5c>
 800dd2a:	601d      	str	r5, [r3, #0]
 800dd2c:	b105      	cbz	r5, 800dd30 <rshift+0x48>
 800dd2e:	3304      	adds	r3, #4
 800dd30:	1b1a      	subs	r2, r3, r4
 800dd32:	42a3      	cmp	r3, r4
 800dd34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dd38:	bf08      	it	eq
 800dd3a:	2300      	moveq	r3, #0
 800dd3c:	6102      	str	r2, [r0, #16]
 800dd3e:	bf08      	it	eq
 800dd40:	6143      	streq	r3, [r0, #20]
 800dd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd44:	683f      	ldr	r7, [r7, #0]
 800dd46:	fa07 f70c 	lsl.w	r7, r7, ip
 800dd4a:	433d      	orrs	r5, r7
 800dd4c:	f843 5b04 	str.w	r5, [r3], #4
 800dd50:	f852 5b04 	ldr.w	r5, [r2], #4
 800dd54:	40cd      	lsrs	r5, r1
 800dd56:	e7e5      	b.n	800dd24 <rshift+0x3c>
 800dd58:	4623      	mov	r3, r4
 800dd5a:	e7e9      	b.n	800dd30 <rshift+0x48>

0800dd5c <__hexdig_fun>:
 800dd5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dd60:	2b09      	cmp	r3, #9
 800dd62:	d802      	bhi.n	800dd6a <__hexdig_fun+0xe>
 800dd64:	3820      	subs	r0, #32
 800dd66:	b2c0      	uxtb	r0, r0
 800dd68:	4770      	bx	lr
 800dd6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dd6e:	2b05      	cmp	r3, #5
 800dd70:	d801      	bhi.n	800dd76 <__hexdig_fun+0x1a>
 800dd72:	3847      	subs	r0, #71	; 0x47
 800dd74:	e7f7      	b.n	800dd66 <__hexdig_fun+0xa>
 800dd76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd7a:	2b05      	cmp	r3, #5
 800dd7c:	d801      	bhi.n	800dd82 <__hexdig_fun+0x26>
 800dd7e:	3827      	subs	r0, #39	; 0x27
 800dd80:	e7f1      	b.n	800dd66 <__hexdig_fun+0xa>
 800dd82:	2000      	movs	r0, #0
 800dd84:	4770      	bx	lr

0800dd86 <__gethex>:
 800dd86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8a:	b08b      	sub	sp, #44	; 0x2c
 800dd8c:	468a      	mov	sl, r1
 800dd8e:	9002      	str	r0, [sp, #8]
 800dd90:	9816      	ldr	r0, [sp, #88]	; 0x58
 800dd92:	9306      	str	r3, [sp, #24]
 800dd94:	4690      	mov	r8, r2
 800dd96:	f000 fad0 	bl	800e33a <__localeconv_l>
 800dd9a:	6803      	ldr	r3, [r0, #0]
 800dd9c:	9303      	str	r3, [sp, #12]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f2 fa4e 	bl	8000240 <strlen>
 800dda4:	9b03      	ldr	r3, [sp, #12]
 800dda6:	9001      	str	r0, [sp, #4]
 800dda8:	4403      	add	r3, r0
 800ddaa:	f04f 0b00 	mov.w	fp, #0
 800ddae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ddb2:	9307      	str	r3, [sp, #28]
 800ddb4:	f8da 3000 	ldr.w	r3, [sl]
 800ddb8:	3302      	adds	r3, #2
 800ddba:	461f      	mov	r7, r3
 800ddbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ddc0:	2830      	cmp	r0, #48	; 0x30
 800ddc2:	d06c      	beq.n	800de9e <__gethex+0x118>
 800ddc4:	f7ff ffca 	bl	800dd5c <__hexdig_fun>
 800ddc8:	4604      	mov	r4, r0
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d16a      	bne.n	800dea4 <__gethex+0x11e>
 800ddce:	9a01      	ldr	r2, [sp, #4]
 800ddd0:	9903      	ldr	r1, [sp, #12]
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	f001 f8f4 	bl	800efc0 <strncmp>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	d166      	bne.n	800deaa <__gethex+0x124>
 800dddc:	9b01      	ldr	r3, [sp, #4]
 800ddde:	5cf8      	ldrb	r0, [r7, r3]
 800dde0:	18fe      	adds	r6, r7, r3
 800dde2:	f7ff ffbb 	bl	800dd5c <__hexdig_fun>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d062      	beq.n	800deb0 <__gethex+0x12a>
 800ddea:	4633      	mov	r3, r6
 800ddec:	7818      	ldrb	r0, [r3, #0]
 800ddee:	2830      	cmp	r0, #48	; 0x30
 800ddf0:	461f      	mov	r7, r3
 800ddf2:	f103 0301 	add.w	r3, r3, #1
 800ddf6:	d0f9      	beq.n	800ddec <__gethex+0x66>
 800ddf8:	f7ff ffb0 	bl	800dd5c <__hexdig_fun>
 800ddfc:	fab0 f580 	clz	r5, r0
 800de00:	096d      	lsrs	r5, r5, #5
 800de02:	4634      	mov	r4, r6
 800de04:	f04f 0b01 	mov.w	fp, #1
 800de08:	463a      	mov	r2, r7
 800de0a:	4616      	mov	r6, r2
 800de0c:	3201      	adds	r2, #1
 800de0e:	7830      	ldrb	r0, [r6, #0]
 800de10:	f7ff ffa4 	bl	800dd5c <__hexdig_fun>
 800de14:	2800      	cmp	r0, #0
 800de16:	d1f8      	bne.n	800de0a <__gethex+0x84>
 800de18:	9a01      	ldr	r2, [sp, #4]
 800de1a:	9903      	ldr	r1, [sp, #12]
 800de1c:	4630      	mov	r0, r6
 800de1e:	f001 f8cf 	bl	800efc0 <strncmp>
 800de22:	b950      	cbnz	r0, 800de3a <__gethex+0xb4>
 800de24:	b954      	cbnz	r4, 800de3c <__gethex+0xb6>
 800de26:	9b01      	ldr	r3, [sp, #4]
 800de28:	18f4      	adds	r4, r6, r3
 800de2a:	4622      	mov	r2, r4
 800de2c:	4616      	mov	r6, r2
 800de2e:	3201      	adds	r2, #1
 800de30:	7830      	ldrb	r0, [r6, #0]
 800de32:	f7ff ff93 	bl	800dd5c <__hexdig_fun>
 800de36:	2800      	cmp	r0, #0
 800de38:	d1f8      	bne.n	800de2c <__gethex+0xa6>
 800de3a:	b10c      	cbz	r4, 800de40 <__gethex+0xba>
 800de3c:	1ba4      	subs	r4, r4, r6
 800de3e:	00a4      	lsls	r4, r4, #2
 800de40:	7833      	ldrb	r3, [r6, #0]
 800de42:	2b50      	cmp	r3, #80	; 0x50
 800de44:	d001      	beq.n	800de4a <__gethex+0xc4>
 800de46:	2b70      	cmp	r3, #112	; 0x70
 800de48:	d140      	bne.n	800decc <__gethex+0x146>
 800de4a:	7873      	ldrb	r3, [r6, #1]
 800de4c:	2b2b      	cmp	r3, #43	; 0x2b
 800de4e:	d031      	beq.n	800deb4 <__gethex+0x12e>
 800de50:	2b2d      	cmp	r3, #45	; 0x2d
 800de52:	d033      	beq.n	800debc <__gethex+0x136>
 800de54:	1c71      	adds	r1, r6, #1
 800de56:	f04f 0900 	mov.w	r9, #0
 800de5a:	7808      	ldrb	r0, [r1, #0]
 800de5c:	f7ff ff7e 	bl	800dd5c <__hexdig_fun>
 800de60:	1e43      	subs	r3, r0, #1
 800de62:	b2db      	uxtb	r3, r3
 800de64:	2b18      	cmp	r3, #24
 800de66:	d831      	bhi.n	800decc <__gethex+0x146>
 800de68:	f1a0 0210 	sub.w	r2, r0, #16
 800de6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de70:	f7ff ff74 	bl	800dd5c <__hexdig_fun>
 800de74:	1e43      	subs	r3, r0, #1
 800de76:	b2db      	uxtb	r3, r3
 800de78:	2b18      	cmp	r3, #24
 800de7a:	d922      	bls.n	800dec2 <__gethex+0x13c>
 800de7c:	f1b9 0f00 	cmp.w	r9, #0
 800de80:	d000      	beq.n	800de84 <__gethex+0xfe>
 800de82:	4252      	negs	r2, r2
 800de84:	4414      	add	r4, r2
 800de86:	f8ca 1000 	str.w	r1, [sl]
 800de8a:	b30d      	cbz	r5, 800ded0 <__gethex+0x14a>
 800de8c:	f1bb 0f00 	cmp.w	fp, #0
 800de90:	bf0c      	ite	eq
 800de92:	2706      	moveq	r7, #6
 800de94:	2700      	movne	r7, #0
 800de96:	4638      	mov	r0, r7
 800de98:	b00b      	add	sp, #44	; 0x2c
 800de9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9e:	f10b 0b01 	add.w	fp, fp, #1
 800dea2:	e78a      	b.n	800ddba <__gethex+0x34>
 800dea4:	2500      	movs	r5, #0
 800dea6:	462c      	mov	r4, r5
 800dea8:	e7ae      	b.n	800de08 <__gethex+0x82>
 800deaa:	463e      	mov	r6, r7
 800deac:	2501      	movs	r5, #1
 800deae:	e7c7      	b.n	800de40 <__gethex+0xba>
 800deb0:	4604      	mov	r4, r0
 800deb2:	e7fb      	b.n	800deac <__gethex+0x126>
 800deb4:	f04f 0900 	mov.w	r9, #0
 800deb8:	1cb1      	adds	r1, r6, #2
 800deba:	e7ce      	b.n	800de5a <__gethex+0xd4>
 800debc:	f04f 0901 	mov.w	r9, #1
 800dec0:	e7fa      	b.n	800deb8 <__gethex+0x132>
 800dec2:	230a      	movs	r3, #10
 800dec4:	fb03 0202 	mla	r2, r3, r2, r0
 800dec8:	3a10      	subs	r2, #16
 800deca:	e7cf      	b.n	800de6c <__gethex+0xe6>
 800decc:	4631      	mov	r1, r6
 800dece:	e7da      	b.n	800de86 <__gethex+0x100>
 800ded0:	1bf3      	subs	r3, r6, r7
 800ded2:	3b01      	subs	r3, #1
 800ded4:	4629      	mov	r1, r5
 800ded6:	2b07      	cmp	r3, #7
 800ded8:	dc49      	bgt.n	800df6e <__gethex+0x1e8>
 800deda:	9802      	ldr	r0, [sp, #8]
 800dedc:	f000 fa58 	bl	800e390 <_Balloc>
 800dee0:	9b01      	ldr	r3, [sp, #4]
 800dee2:	f100 0914 	add.w	r9, r0, #20
 800dee6:	f04f 0b00 	mov.w	fp, #0
 800deea:	f1c3 0301 	rsb	r3, r3, #1
 800deee:	4605      	mov	r5, r0
 800def0:	f8cd 9010 	str.w	r9, [sp, #16]
 800def4:	46da      	mov	sl, fp
 800def6:	9308      	str	r3, [sp, #32]
 800def8:	42b7      	cmp	r7, r6
 800defa:	d33b      	bcc.n	800df74 <__gethex+0x1ee>
 800defc:	9804      	ldr	r0, [sp, #16]
 800defe:	f840 ab04 	str.w	sl, [r0], #4
 800df02:	eba0 0009 	sub.w	r0, r0, r9
 800df06:	1080      	asrs	r0, r0, #2
 800df08:	6128      	str	r0, [r5, #16]
 800df0a:	0147      	lsls	r7, r0, #5
 800df0c:	4650      	mov	r0, sl
 800df0e:	f000 fb03 	bl	800e518 <__hi0bits>
 800df12:	f8d8 6000 	ldr.w	r6, [r8]
 800df16:	1a3f      	subs	r7, r7, r0
 800df18:	42b7      	cmp	r7, r6
 800df1a:	dd64      	ble.n	800dfe6 <__gethex+0x260>
 800df1c:	1bbf      	subs	r7, r7, r6
 800df1e:	4639      	mov	r1, r7
 800df20:	4628      	mov	r0, r5
 800df22:	f000 fe14 	bl	800eb4e <__any_on>
 800df26:	4682      	mov	sl, r0
 800df28:	b178      	cbz	r0, 800df4a <__gethex+0x1c4>
 800df2a:	1e7b      	subs	r3, r7, #1
 800df2c:	1159      	asrs	r1, r3, #5
 800df2e:	f003 021f 	and.w	r2, r3, #31
 800df32:	f04f 0a01 	mov.w	sl, #1
 800df36:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800df3a:	fa0a f202 	lsl.w	r2, sl, r2
 800df3e:	420a      	tst	r2, r1
 800df40:	d003      	beq.n	800df4a <__gethex+0x1c4>
 800df42:	4553      	cmp	r3, sl
 800df44:	dc46      	bgt.n	800dfd4 <__gethex+0x24e>
 800df46:	f04f 0a02 	mov.w	sl, #2
 800df4a:	4639      	mov	r1, r7
 800df4c:	4628      	mov	r0, r5
 800df4e:	f7ff fecb 	bl	800dce8 <rshift>
 800df52:	443c      	add	r4, r7
 800df54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df58:	42a3      	cmp	r3, r4
 800df5a:	da52      	bge.n	800e002 <__gethex+0x27c>
 800df5c:	4629      	mov	r1, r5
 800df5e:	9802      	ldr	r0, [sp, #8]
 800df60:	f000 fa4a 	bl	800e3f8 <_Bfree>
 800df64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df66:	2300      	movs	r3, #0
 800df68:	6013      	str	r3, [r2, #0]
 800df6a:	27a3      	movs	r7, #163	; 0xa3
 800df6c:	e793      	b.n	800de96 <__gethex+0x110>
 800df6e:	3101      	adds	r1, #1
 800df70:	105b      	asrs	r3, r3, #1
 800df72:	e7b0      	b.n	800ded6 <__gethex+0x150>
 800df74:	1e73      	subs	r3, r6, #1
 800df76:	9305      	str	r3, [sp, #20]
 800df78:	9a07      	ldr	r2, [sp, #28]
 800df7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df7e:	4293      	cmp	r3, r2
 800df80:	d018      	beq.n	800dfb4 <__gethex+0x22e>
 800df82:	f1bb 0f20 	cmp.w	fp, #32
 800df86:	d107      	bne.n	800df98 <__gethex+0x212>
 800df88:	9b04      	ldr	r3, [sp, #16]
 800df8a:	f8c3 a000 	str.w	sl, [r3]
 800df8e:	3304      	adds	r3, #4
 800df90:	f04f 0a00 	mov.w	sl, #0
 800df94:	9304      	str	r3, [sp, #16]
 800df96:	46d3      	mov	fp, sl
 800df98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800df9c:	f7ff fede 	bl	800dd5c <__hexdig_fun>
 800dfa0:	f000 000f 	and.w	r0, r0, #15
 800dfa4:	fa00 f00b 	lsl.w	r0, r0, fp
 800dfa8:	ea4a 0a00 	orr.w	sl, sl, r0
 800dfac:	f10b 0b04 	add.w	fp, fp, #4
 800dfb0:	9b05      	ldr	r3, [sp, #20]
 800dfb2:	e00d      	b.n	800dfd0 <__gethex+0x24a>
 800dfb4:	9b05      	ldr	r3, [sp, #20]
 800dfb6:	9a08      	ldr	r2, [sp, #32]
 800dfb8:	4413      	add	r3, r2
 800dfba:	42bb      	cmp	r3, r7
 800dfbc:	d3e1      	bcc.n	800df82 <__gethex+0x1fc>
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	9a01      	ldr	r2, [sp, #4]
 800dfc2:	9903      	ldr	r1, [sp, #12]
 800dfc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfc6:	f000 fffb 	bl	800efc0 <strncmp>
 800dfca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d1d8      	bne.n	800df82 <__gethex+0x1fc>
 800dfd0:	461e      	mov	r6, r3
 800dfd2:	e791      	b.n	800def8 <__gethex+0x172>
 800dfd4:	1eb9      	subs	r1, r7, #2
 800dfd6:	4628      	mov	r0, r5
 800dfd8:	f000 fdb9 	bl	800eb4e <__any_on>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d0b2      	beq.n	800df46 <__gethex+0x1c0>
 800dfe0:	f04f 0a03 	mov.w	sl, #3
 800dfe4:	e7b1      	b.n	800df4a <__gethex+0x1c4>
 800dfe6:	da09      	bge.n	800dffc <__gethex+0x276>
 800dfe8:	1bf7      	subs	r7, r6, r7
 800dfea:	4629      	mov	r1, r5
 800dfec:	463a      	mov	r2, r7
 800dfee:	9802      	ldr	r0, [sp, #8]
 800dff0:	f000 fbce 	bl	800e790 <__lshift>
 800dff4:	1be4      	subs	r4, r4, r7
 800dff6:	4605      	mov	r5, r0
 800dff8:	f100 0914 	add.w	r9, r0, #20
 800dffc:	f04f 0a00 	mov.w	sl, #0
 800e000:	e7a8      	b.n	800df54 <__gethex+0x1ce>
 800e002:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e006:	42a0      	cmp	r0, r4
 800e008:	dd6a      	ble.n	800e0e0 <__gethex+0x35a>
 800e00a:	1b04      	subs	r4, r0, r4
 800e00c:	42a6      	cmp	r6, r4
 800e00e:	dc2e      	bgt.n	800e06e <__gethex+0x2e8>
 800e010:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e014:	2b02      	cmp	r3, #2
 800e016:	d022      	beq.n	800e05e <__gethex+0x2d8>
 800e018:	2b03      	cmp	r3, #3
 800e01a:	d024      	beq.n	800e066 <__gethex+0x2e0>
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d115      	bne.n	800e04c <__gethex+0x2c6>
 800e020:	42a6      	cmp	r6, r4
 800e022:	d113      	bne.n	800e04c <__gethex+0x2c6>
 800e024:	2e01      	cmp	r6, #1
 800e026:	dc0b      	bgt.n	800e040 <__gethex+0x2ba>
 800e028:	9a06      	ldr	r2, [sp, #24]
 800e02a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	2301      	movs	r3, #1
 800e032:	612b      	str	r3, [r5, #16]
 800e034:	f8c9 3000 	str.w	r3, [r9]
 800e038:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e03a:	2762      	movs	r7, #98	; 0x62
 800e03c:	601d      	str	r5, [r3, #0]
 800e03e:	e72a      	b.n	800de96 <__gethex+0x110>
 800e040:	1e71      	subs	r1, r6, #1
 800e042:	4628      	mov	r0, r5
 800e044:	f000 fd83 	bl	800eb4e <__any_on>
 800e048:	2800      	cmp	r0, #0
 800e04a:	d1ed      	bne.n	800e028 <__gethex+0x2a2>
 800e04c:	4629      	mov	r1, r5
 800e04e:	9802      	ldr	r0, [sp, #8]
 800e050:	f000 f9d2 	bl	800e3f8 <_Bfree>
 800e054:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e056:	2300      	movs	r3, #0
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	2750      	movs	r7, #80	; 0x50
 800e05c:	e71b      	b.n	800de96 <__gethex+0x110>
 800e05e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e060:	2b00      	cmp	r3, #0
 800e062:	d0e1      	beq.n	800e028 <__gethex+0x2a2>
 800e064:	e7f2      	b.n	800e04c <__gethex+0x2c6>
 800e066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d1dd      	bne.n	800e028 <__gethex+0x2a2>
 800e06c:	e7ee      	b.n	800e04c <__gethex+0x2c6>
 800e06e:	1e67      	subs	r7, r4, #1
 800e070:	f1ba 0f00 	cmp.w	sl, #0
 800e074:	d131      	bne.n	800e0da <__gethex+0x354>
 800e076:	b127      	cbz	r7, 800e082 <__gethex+0x2fc>
 800e078:	4639      	mov	r1, r7
 800e07a:	4628      	mov	r0, r5
 800e07c:	f000 fd67 	bl	800eb4e <__any_on>
 800e080:	4682      	mov	sl, r0
 800e082:	117a      	asrs	r2, r7, #5
 800e084:	2301      	movs	r3, #1
 800e086:	f007 071f 	and.w	r7, r7, #31
 800e08a:	fa03 f707 	lsl.w	r7, r3, r7
 800e08e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e092:	4621      	mov	r1, r4
 800e094:	421f      	tst	r7, r3
 800e096:	4628      	mov	r0, r5
 800e098:	bf18      	it	ne
 800e09a:	f04a 0a02 	orrne.w	sl, sl, #2
 800e09e:	1b36      	subs	r6, r6, r4
 800e0a0:	f7ff fe22 	bl	800dce8 <rshift>
 800e0a4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e0a8:	2702      	movs	r7, #2
 800e0aa:	f1ba 0f00 	cmp.w	sl, #0
 800e0ae:	d048      	beq.n	800e142 <__gethex+0x3bc>
 800e0b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d015      	beq.n	800e0e4 <__gethex+0x35e>
 800e0b8:	2b03      	cmp	r3, #3
 800e0ba:	d017      	beq.n	800e0ec <__gethex+0x366>
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d109      	bne.n	800e0d4 <__gethex+0x34e>
 800e0c0:	f01a 0f02 	tst.w	sl, #2
 800e0c4:	d006      	beq.n	800e0d4 <__gethex+0x34e>
 800e0c6:	f8d9 3000 	ldr.w	r3, [r9]
 800e0ca:	ea4a 0a03 	orr.w	sl, sl, r3
 800e0ce:	f01a 0f01 	tst.w	sl, #1
 800e0d2:	d10e      	bne.n	800e0f2 <__gethex+0x36c>
 800e0d4:	f047 0710 	orr.w	r7, r7, #16
 800e0d8:	e033      	b.n	800e142 <__gethex+0x3bc>
 800e0da:	f04f 0a01 	mov.w	sl, #1
 800e0de:	e7d0      	b.n	800e082 <__gethex+0x2fc>
 800e0e0:	2701      	movs	r7, #1
 800e0e2:	e7e2      	b.n	800e0aa <__gethex+0x324>
 800e0e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0e6:	f1c3 0301 	rsb	r3, r3, #1
 800e0ea:	9315      	str	r3, [sp, #84]	; 0x54
 800e0ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0f0      	beq.n	800e0d4 <__gethex+0x34e>
 800e0f2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e0f6:	f105 0314 	add.w	r3, r5, #20
 800e0fa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e0fe:	eb03 010a 	add.w	r1, r3, sl
 800e102:	f04f 0c00 	mov.w	ip, #0
 800e106:	4618      	mov	r0, r3
 800e108:	f853 2b04 	ldr.w	r2, [r3], #4
 800e10c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e110:	d01c      	beq.n	800e14c <__gethex+0x3c6>
 800e112:	3201      	adds	r2, #1
 800e114:	6002      	str	r2, [r0, #0]
 800e116:	2f02      	cmp	r7, #2
 800e118:	f105 0314 	add.w	r3, r5, #20
 800e11c:	d138      	bne.n	800e190 <__gethex+0x40a>
 800e11e:	f8d8 2000 	ldr.w	r2, [r8]
 800e122:	3a01      	subs	r2, #1
 800e124:	42b2      	cmp	r2, r6
 800e126:	d10a      	bne.n	800e13e <__gethex+0x3b8>
 800e128:	1171      	asrs	r1, r6, #5
 800e12a:	2201      	movs	r2, #1
 800e12c:	f006 061f 	and.w	r6, r6, #31
 800e130:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e134:	fa02 f606 	lsl.w	r6, r2, r6
 800e138:	421e      	tst	r6, r3
 800e13a:	bf18      	it	ne
 800e13c:	4617      	movne	r7, r2
 800e13e:	f047 0720 	orr.w	r7, r7, #32
 800e142:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e144:	601d      	str	r5, [r3, #0]
 800e146:	9b06      	ldr	r3, [sp, #24]
 800e148:	601c      	str	r4, [r3, #0]
 800e14a:	e6a4      	b.n	800de96 <__gethex+0x110>
 800e14c:	4299      	cmp	r1, r3
 800e14e:	f843 cc04 	str.w	ip, [r3, #-4]
 800e152:	d8d8      	bhi.n	800e106 <__gethex+0x380>
 800e154:	68ab      	ldr	r3, [r5, #8]
 800e156:	4599      	cmp	r9, r3
 800e158:	db12      	blt.n	800e180 <__gethex+0x3fa>
 800e15a:	6869      	ldr	r1, [r5, #4]
 800e15c:	9802      	ldr	r0, [sp, #8]
 800e15e:	3101      	adds	r1, #1
 800e160:	f000 f916 	bl	800e390 <_Balloc>
 800e164:	692a      	ldr	r2, [r5, #16]
 800e166:	3202      	adds	r2, #2
 800e168:	f105 010c 	add.w	r1, r5, #12
 800e16c:	4683      	mov	fp, r0
 800e16e:	0092      	lsls	r2, r2, #2
 800e170:	300c      	adds	r0, #12
 800e172:	f7fd fb15 	bl	800b7a0 <memcpy>
 800e176:	4629      	mov	r1, r5
 800e178:	9802      	ldr	r0, [sp, #8]
 800e17a:	f000 f93d 	bl	800e3f8 <_Bfree>
 800e17e:	465d      	mov	r5, fp
 800e180:	692b      	ldr	r3, [r5, #16]
 800e182:	1c5a      	adds	r2, r3, #1
 800e184:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e188:	612a      	str	r2, [r5, #16]
 800e18a:	2201      	movs	r2, #1
 800e18c:	615a      	str	r2, [r3, #20]
 800e18e:	e7c2      	b.n	800e116 <__gethex+0x390>
 800e190:	692a      	ldr	r2, [r5, #16]
 800e192:	454a      	cmp	r2, r9
 800e194:	dd0b      	ble.n	800e1ae <__gethex+0x428>
 800e196:	2101      	movs	r1, #1
 800e198:	4628      	mov	r0, r5
 800e19a:	f7ff fda5 	bl	800dce8 <rshift>
 800e19e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1a2:	3401      	adds	r4, #1
 800e1a4:	42a3      	cmp	r3, r4
 800e1a6:	f6ff aed9 	blt.w	800df5c <__gethex+0x1d6>
 800e1aa:	2701      	movs	r7, #1
 800e1ac:	e7c7      	b.n	800e13e <__gethex+0x3b8>
 800e1ae:	f016 061f 	ands.w	r6, r6, #31
 800e1b2:	d0fa      	beq.n	800e1aa <__gethex+0x424>
 800e1b4:	449a      	add	sl, r3
 800e1b6:	f1c6 0620 	rsb	r6, r6, #32
 800e1ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e1be:	f000 f9ab 	bl	800e518 <__hi0bits>
 800e1c2:	42b0      	cmp	r0, r6
 800e1c4:	dbe7      	blt.n	800e196 <__gethex+0x410>
 800e1c6:	e7f0      	b.n	800e1aa <__gethex+0x424>

0800e1c8 <L_shift>:
 800e1c8:	f1c2 0208 	rsb	r2, r2, #8
 800e1cc:	0092      	lsls	r2, r2, #2
 800e1ce:	b570      	push	{r4, r5, r6, lr}
 800e1d0:	f1c2 0620 	rsb	r6, r2, #32
 800e1d4:	6843      	ldr	r3, [r0, #4]
 800e1d6:	6804      	ldr	r4, [r0, #0]
 800e1d8:	fa03 f506 	lsl.w	r5, r3, r6
 800e1dc:	432c      	orrs	r4, r5
 800e1de:	40d3      	lsrs	r3, r2
 800e1e0:	6004      	str	r4, [r0, #0]
 800e1e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e1e6:	4288      	cmp	r0, r1
 800e1e8:	d3f4      	bcc.n	800e1d4 <L_shift+0xc>
 800e1ea:	bd70      	pop	{r4, r5, r6, pc}

0800e1ec <__match>:
 800e1ec:	b530      	push	{r4, r5, lr}
 800e1ee:	6803      	ldr	r3, [r0, #0]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1f6:	b914      	cbnz	r4, 800e1fe <__match+0x12>
 800e1f8:	6003      	str	r3, [r0, #0]
 800e1fa:	2001      	movs	r0, #1
 800e1fc:	bd30      	pop	{r4, r5, pc}
 800e1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e202:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e206:	2d19      	cmp	r5, #25
 800e208:	bf98      	it	ls
 800e20a:	3220      	addls	r2, #32
 800e20c:	42a2      	cmp	r2, r4
 800e20e:	d0f0      	beq.n	800e1f2 <__match+0x6>
 800e210:	2000      	movs	r0, #0
 800e212:	e7f3      	b.n	800e1fc <__match+0x10>

0800e214 <__hexnan>:
 800e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e218:	680b      	ldr	r3, [r1, #0]
 800e21a:	6801      	ldr	r1, [r0, #0]
 800e21c:	115f      	asrs	r7, r3, #5
 800e21e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e222:	f013 031f 	ands.w	r3, r3, #31
 800e226:	b087      	sub	sp, #28
 800e228:	bf18      	it	ne
 800e22a:	3704      	addne	r7, #4
 800e22c:	2500      	movs	r5, #0
 800e22e:	1f3e      	subs	r6, r7, #4
 800e230:	4682      	mov	sl, r0
 800e232:	4690      	mov	r8, r2
 800e234:	9301      	str	r3, [sp, #4]
 800e236:	f847 5c04 	str.w	r5, [r7, #-4]
 800e23a:	46b1      	mov	r9, r6
 800e23c:	4634      	mov	r4, r6
 800e23e:	9502      	str	r5, [sp, #8]
 800e240:	46ab      	mov	fp, r5
 800e242:	784a      	ldrb	r2, [r1, #1]
 800e244:	1c4b      	adds	r3, r1, #1
 800e246:	9303      	str	r3, [sp, #12]
 800e248:	b342      	cbz	r2, 800e29c <__hexnan+0x88>
 800e24a:	4610      	mov	r0, r2
 800e24c:	9105      	str	r1, [sp, #20]
 800e24e:	9204      	str	r2, [sp, #16]
 800e250:	f7ff fd84 	bl	800dd5c <__hexdig_fun>
 800e254:	2800      	cmp	r0, #0
 800e256:	d143      	bne.n	800e2e0 <__hexnan+0xcc>
 800e258:	9a04      	ldr	r2, [sp, #16]
 800e25a:	9905      	ldr	r1, [sp, #20]
 800e25c:	2a20      	cmp	r2, #32
 800e25e:	d818      	bhi.n	800e292 <__hexnan+0x7e>
 800e260:	9b02      	ldr	r3, [sp, #8]
 800e262:	459b      	cmp	fp, r3
 800e264:	dd13      	ble.n	800e28e <__hexnan+0x7a>
 800e266:	454c      	cmp	r4, r9
 800e268:	d206      	bcs.n	800e278 <__hexnan+0x64>
 800e26a:	2d07      	cmp	r5, #7
 800e26c:	dc04      	bgt.n	800e278 <__hexnan+0x64>
 800e26e:	462a      	mov	r2, r5
 800e270:	4649      	mov	r1, r9
 800e272:	4620      	mov	r0, r4
 800e274:	f7ff ffa8 	bl	800e1c8 <L_shift>
 800e278:	4544      	cmp	r4, r8
 800e27a:	d944      	bls.n	800e306 <__hexnan+0xf2>
 800e27c:	2300      	movs	r3, #0
 800e27e:	f1a4 0904 	sub.w	r9, r4, #4
 800e282:	f844 3c04 	str.w	r3, [r4, #-4]
 800e286:	f8cd b008 	str.w	fp, [sp, #8]
 800e28a:	464c      	mov	r4, r9
 800e28c:	461d      	mov	r5, r3
 800e28e:	9903      	ldr	r1, [sp, #12]
 800e290:	e7d7      	b.n	800e242 <__hexnan+0x2e>
 800e292:	2a29      	cmp	r2, #41	; 0x29
 800e294:	d14a      	bne.n	800e32c <__hexnan+0x118>
 800e296:	3102      	adds	r1, #2
 800e298:	f8ca 1000 	str.w	r1, [sl]
 800e29c:	f1bb 0f00 	cmp.w	fp, #0
 800e2a0:	d044      	beq.n	800e32c <__hexnan+0x118>
 800e2a2:	454c      	cmp	r4, r9
 800e2a4:	d206      	bcs.n	800e2b4 <__hexnan+0xa0>
 800e2a6:	2d07      	cmp	r5, #7
 800e2a8:	dc04      	bgt.n	800e2b4 <__hexnan+0xa0>
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f7ff ff8a 	bl	800e1c8 <L_shift>
 800e2b4:	4544      	cmp	r4, r8
 800e2b6:	d928      	bls.n	800e30a <__hexnan+0xf6>
 800e2b8:	4643      	mov	r3, r8
 800e2ba:	f854 2b04 	ldr.w	r2, [r4], #4
 800e2be:	f843 2b04 	str.w	r2, [r3], #4
 800e2c2:	42a6      	cmp	r6, r4
 800e2c4:	d2f9      	bcs.n	800e2ba <__hexnan+0xa6>
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f843 2b04 	str.w	r2, [r3], #4
 800e2cc:	429e      	cmp	r6, r3
 800e2ce:	d2fb      	bcs.n	800e2c8 <__hexnan+0xb4>
 800e2d0:	6833      	ldr	r3, [r6, #0]
 800e2d2:	b91b      	cbnz	r3, 800e2dc <__hexnan+0xc8>
 800e2d4:	4546      	cmp	r6, r8
 800e2d6:	d127      	bne.n	800e328 <__hexnan+0x114>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	6033      	str	r3, [r6, #0]
 800e2dc:	2005      	movs	r0, #5
 800e2de:	e026      	b.n	800e32e <__hexnan+0x11a>
 800e2e0:	3501      	adds	r5, #1
 800e2e2:	2d08      	cmp	r5, #8
 800e2e4:	f10b 0b01 	add.w	fp, fp, #1
 800e2e8:	dd06      	ble.n	800e2f8 <__hexnan+0xe4>
 800e2ea:	4544      	cmp	r4, r8
 800e2ec:	d9cf      	bls.n	800e28e <__hexnan+0x7a>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2f4:	2501      	movs	r5, #1
 800e2f6:	3c04      	subs	r4, #4
 800e2f8:	6822      	ldr	r2, [r4, #0]
 800e2fa:	f000 000f 	and.w	r0, r0, #15
 800e2fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e302:	6020      	str	r0, [r4, #0]
 800e304:	e7c3      	b.n	800e28e <__hexnan+0x7a>
 800e306:	2508      	movs	r5, #8
 800e308:	e7c1      	b.n	800e28e <__hexnan+0x7a>
 800e30a:	9b01      	ldr	r3, [sp, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d0df      	beq.n	800e2d0 <__hexnan+0xbc>
 800e310:	f04f 32ff 	mov.w	r2, #4294967295
 800e314:	f1c3 0320 	rsb	r3, r3, #32
 800e318:	fa22 f303 	lsr.w	r3, r2, r3
 800e31c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e320:	401a      	ands	r2, r3
 800e322:	f847 2c04 	str.w	r2, [r7, #-4]
 800e326:	e7d3      	b.n	800e2d0 <__hexnan+0xbc>
 800e328:	3e04      	subs	r6, #4
 800e32a:	e7d1      	b.n	800e2d0 <__hexnan+0xbc>
 800e32c:	2004      	movs	r0, #4
 800e32e:	b007      	add	sp, #28
 800e330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e334 <__locale_ctype_ptr_l>:
 800e334:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e338:	4770      	bx	lr

0800e33a <__localeconv_l>:
 800e33a:	30f0      	adds	r0, #240	; 0xf0
 800e33c:	4770      	bx	lr
	...

0800e340 <_localeconv_r>:
 800e340:	4b04      	ldr	r3, [pc, #16]	; (800e354 <_localeconv_r+0x14>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6a18      	ldr	r0, [r3, #32]
 800e346:	4b04      	ldr	r3, [pc, #16]	; (800e358 <_localeconv_r+0x18>)
 800e348:	2800      	cmp	r0, #0
 800e34a:	bf08      	it	eq
 800e34c:	4618      	moveq	r0, r3
 800e34e:	30f0      	adds	r0, #240	; 0xf0
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	20000030 	.word	0x20000030
 800e358:	20000094 	.word	0x20000094

0800e35c <malloc>:
 800e35c:	4b02      	ldr	r3, [pc, #8]	; (800e368 <malloc+0xc>)
 800e35e:	4601      	mov	r1, r0
 800e360:	6818      	ldr	r0, [r3, #0]
 800e362:	f000 bc71 	b.w	800ec48 <_malloc_r>
 800e366:	bf00      	nop
 800e368:	20000030 	.word	0x20000030

0800e36c <__ascii_mbtowc>:
 800e36c:	b082      	sub	sp, #8
 800e36e:	b901      	cbnz	r1, 800e372 <__ascii_mbtowc+0x6>
 800e370:	a901      	add	r1, sp, #4
 800e372:	b142      	cbz	r2, 800e386 <__ascii_mbtowc+0x1a>
 800e374:	b14b      	cbz	r3, 800e38a <__ascii_mbtowc+0x1e>
 800e376:	7813      	ldrb	r3, [r2, #0]
 800e378:	600b      	str	r3, [r1, #0]
 800e37a:	7812      	ldrb	r2, [r2, #0]
 800e37c:	1c10      	adds	r0, r2, #0
 800e37e:	bf18      	it	ne
 800e380:	2001      	movne	r0, #1
 800e382:	b002      	add	sp, #8
 800e384:	4770      	bx	lr
 800e386:	4610      	mov	r0, r2
 800e388:	e7fb      	b.n	800e382 <__ascii_mbtowc+0x16>
 800e38a:	f06f 0001 	mvn.w	r0, #1
 800e38e:	e7f8      	b.n	800e382 <__ascii_mbtowc+0x16>

0800e390 <_Balloc>:
 800e390:	b570      	push	{r4, r5, r6, lr}
 800e392:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e394:	4604      	mov	r4, r0
 800e396:	460e      	mov	r6, r1
 800e398:	b93d      	cbnz	r5, 800e3aa <_Balloc+0x1a>
 800e39a:	2010      	movs	r0, #16
 800e39c:	f7ff ffde 	bl	800e35c <malloc>
 800e3a0:	6260      	str	r0, [r4, #36]	; 0x24
 800e3a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e3a6:	6005      	str	r5, [r0, #0]
 800e3a8:	60c5      	str	r5, [r0, #12]
 800e3aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e3ac:	68eb      	ldr	r3, [r5, #12]
 800e3ae:	b183      	cbz	r3, 800e3d2 <_Balloc+0x42>
 800e3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e3b8:	b9b8      	cbnz	r0, 800e3ea <_Balloc+0x5a>
 800e3ba:	2101      	movs	r1, #1
 800e3bc:	fa01 f506 	lsl.w	r5, r1, r6
 800e3c0:	1d6a      	adds	r2, r5, #5
 800e3c2:	0092      	lsls	r2, r2, #2
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 fbe3 	bl	800eb90 <_calloc_r>
 800e3ca:	b160      	cbz	r0, 800e3e6 <_Balloc+0x56>
 800e3cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e3d0:	e00e      	b.n	800e3f0 <_Balloc+0x60>
 800e3d2:	2221      	movs	r2, #33	; 0x21
 800e3d4:	2104      	movs	r1, #4
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 fbda 	bl	800eb90 <_calloc_r>
 800e3dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3de:	60e8      	str	r0, [r5, #12]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d1e4      	bne.n	800e3b0 <_Balloc+0x20>
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ea:	6802      	ldr	r2, [r0, #0]
 800e3ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e3f6:	e7f7      	b.n	800e3e8 <_Balloc+0x58>

0800e3f8 <_Bfree>:
 800e3f8:	b570      	push	{r4, r5, r6, lr}
 800e3fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	460d      	mov	r5, r1
 800e400:	b93c      	cbnz	r4, 800e412 <_Bfree+0x1a>
 800e402:	2010      	movs	r0, #16
 800e404:	f7ff ffaa 	bl	800e35c <malloc>
 800e408:	6270      	str	r0, [r6, #36]	; 0x24
 800e40a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e40e:	6004      	str	r4, [r0, #0]
 800e410:	60c4      	str	r4, [r0, #12]
 800e412:	b13d      	cbz	r5, 800e424 <_Bfree+0x2c>
 800e414:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e416:	686a      	ldr	r2, [r5, #4]
 800e418:	68db      	ldr	r3, [r3, #12]
 800e41a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e41e:	6029      	str	r1, [r5, #0]
 800e420:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e424:	bd70      	pop	{r4, r5, r6, pc}

0800e426 <__multadd>:
 800e426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e42a:	690d      	ldr	r5, [r1, #16]
 800e42c:	461f      	mov	r7, r3
 800e42e:	4606      	mov	r6, r0
 800e430:	460c      	mov	r4, r1
 800e432:	f101 0c14 	add.w	ip, r1, #20
 800e436:	2300      	movs	r3, #0
 800e438:	f8dc 0000 	ldr.w	r0, [ip]
 800e43c:	b281      	uxth	r1, r0
 800e43e:	fb02 7101 	mla	r1, r2, r1, r7
 800e442:	0c0f      	lsrs	r7, r1, #16
 800e444:	0c00      	lsrs	r0, r0, #16
 800e446:	fb02 7000 	mla	r0, r2, r0, r7
 800e44a:	b289      	uxth	r1, r1
 800e44c:	3301      	adds	r3, #1
 800e44e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e452:	429d      	cmp	r5, r3
 800e454:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e458:	f84c 1b04 	str.w	r1, [ip], #4
 800e45c:	dcec      	bgt.n	800e438 <__multadd+0x12>
 800e45e:	b1d7      	cbz	r7, 800e496 <__multadd+0x70>
 800e460:	68a3      	ldr	r3, [r4, #8]
 800e462:	42ab      	cmp	r3, r5
 800e464:	dc12      	bgt.n	800e48c <__multadd+0x66>
 800e466:	6861      	ldr	r1, [r4, #4]
 800e468:	4630      	mov	r0, r6
 800e46a:	3101      	adds	r1, #1
 800e46c:	f7ff ff90 	bl	800e390 <_Balloc>
 800e470:	6922      	ldr	r2, [r4, #16]
 800e472:	3202      	adds	r2, #2
 800e474:	f104 010c 	add.w	r1, r4, #12
 800e478:	4680      	mov	r8, r0
 800e47a:	0092      	lsls	r2, r2, #2
 800e47c:	300c      	adds	r0, #12
 800e47e:	f7fd f98f 	bl	800b7a0 <memcpy>
 800e482:	4621      	mov	r1, r4
 800e484:	4630      	mov	r0, r6
 800e486:	f7ff ffb7 	bl	800e3f8 <_Bfree>
 800e48a:	4644      	mov	r4, r8
 800e48c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e490:	3501      	adds	r5, #1
 800e492:	615f      	str	r7, [r3, #20]
 800e494:	6125      	str	r5, [r4, #16]
 800e496:	4620      	mov	r0, r4
 800e498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e49c <__s2b>:
 800e49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4a0:	460c      	mov	r4, r1
 800e4a2:	4615      	mov	r5, r2
 800e4a4:	461f      	mov	r7, r3
 800e4a6:	2209      	movs	r2, #9
 800e4a8:	3308      	adds	r3, #8
 800e4aa:	4606      	mov	r6, r0
 800e4ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4b0:	2100      	movs	r1, #0
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	db20      	blt.n	800e4fa <__s2b+0x5e>
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7ff ff69 	bl	800e390 <_Balloc>
 800e4be:	9b08      	ldr	r3, [sp, #32]
 800e4c0:	6143      	str	r3, [r0, #20]
 800e4c2:	2d09      	cmp	r5, #9
 800e4c4:	f04f 0301 	mov.w	r3, #1
 800e4c8:	6103      	str	r3, [r0, #16]
 800e4ca:	dd19      	ble.n	800e500 <__s2b+0x64>
 800e4cc:	f104 0809 	add.w	r8, r4, #9
 800e4d0:	46c1      	mov	r9, r8
 800e4d2:	442c      	add	r4, r5
 800e4d4:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e4d8:	4601      	mov	r1, r0
 800e4da:	3b30      	subs	r3, #48	; 0x30
 800e4dc:	220a      	movs	r2, #10
 800e4de:	4630      	mov	r0, r6
 800e4e0:	f7ff ffa1 	bl	800e426 <__multadd>
 800e4e4:	45a1      	cmp	r9, r4
 800e4e6:	d1f5      	bne.n	800e4d4 <__s2b+0x38>
 800e4e8:	eb08 0405 	add.w	r4, r8, r5
 800e4ec:	3c08      	subs	r4, #8
 800e4ee:	1b2d      	subs	r5, r5, r4
 800e4f0:	1963      	adds	r3, r4, r5
 800e4f2:	42bb      	cmp	r3, r7
 800e4f4:	db07      	blt.n	800e506 <__s2b+0x6a>
 800e4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4fa:	0052      	lsls	r2, r2, #1
 800e4fc:	3101      	adds	r1, #1
 800e4fe:	e7d9      	b.n	800e4b4 <__s2b+0x18>
 800e500:	340a      	adds	r4, #10
 800e502:	2509      	movs	r5, #9
 800e504:	e7f3      	b.n	800e4ee <__s2b+0x52>
 800e506:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e50a:	4601      	mov	r1, r0
 800e50c:	3b30      	subs	r3, #48	; 0x30
 800e50e:	220a      	movs	r2, #10
 800e510:	4630      	mov	r0, r6
 800e512:	f7ff ff88 	bl	800e426 <__multadd>
 800e516:	e7eb      	b.n	800e4f0 <__s2b+0x54>

0800e518 <__hi0bits>:
 800e518:	0c02      	lsrs	r2, r0, #16
 800e51a:	0412      	lsls	r2, r2, #16
 800e51c:	4603      	mov	r3, r0
 800e51e:	b9b2      	cbnz	r2, 800e54e <__hi0bits+0x36>
 800e520:	0403      	lsls	r3, r0, #16
 800e522:	2010      	movs	r0, #16
 800e524:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e528:	bf04      	itt	eq
 800e52a:	021b      	lsleq	r3, r3, #8
 800e52c:	3008      	addeq	r0, #8
 800e52e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e532:	bf04      	itt	eq
 800e534:	011b      	lsleq	r3, r3, #4
 800e536:	3004      	addeq	r0, #4
 800e538:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e53c:	bf04      	itt	eq
 800e53e:	009b      	lsleq	r3, r3, #2
 800e540:	3002      	addeq	r0, #2
 800e542:	2b00      	cmp	r3, #0
 800e544:	db06      	blt.n	800e554 <__hi0bits+0x3c>
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	d503      	bpl.n	800e552 <__hi0bits+0x3a>
 800e54a:	3001      	adds	r0, #1
 800e54c:	4770      	bx	lr
 800e54e:	2000      	movs	r0, #0
 800e550:	e7e8      	b.n	800e524 <__hi0bits+0xc>
 800e552:	2020      	movs	r0, #32
 800e554:	4770      	bx	lr

0800e556 <__lo0bits>:
 800e556:	6803      	ldr	r3, [r0, #0]
 800e558:	f013 0207 	ands.w	r2, r3, #7
 800e55c:	4601      	mov	r1, r0
 800e55e:	d00b      	beq.n	800e578 <__lo0bits+0x22>
 800e560:	07da      	lsls	r2, r3, #31
 800e562:	d423      	bmi.n	800e5ac <__lo0bits+0x56>
 800e564:	0798      	lsls	r0, r3, #30
 800e566:	bf49      	itett	mi
 800e568:	085b      	lsrmi	r3, r3, #1
 800e56a:	089b      	lsrpl	r3, r3, #2
 800e56c:	2001      	movmi	r0, #1
 800e56e:	600b      	strmi	r3, [r1, #0]
 800e570:	bf5c      	itt	pl
 800e572:	600b      	strpl	r3, [r1, #0]
 800e574:	2002      	movpl	r0, #2
 800e576:	4770      	bx	lr
 800e578:	b298      	uxth	r0, r3
 800e57a:	b9a8      	cbnz	r0, 800e5a8 <__lo0bits+0x52>
 800e57c:	0c1b      	lsrs	r3, r3, #16
 800e57e:	2010      	movs	r0, #16
 800e580:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e584:	bf04      	itt	eq
 800e586:	0a1b      	lsreq	r3, r3, #8
 800e588:	3008      	addeq	r0, #8
 800e58a:	071a      	lsls	r2, r3, #28
 800e58c:	bf04      	itt	eq
 800e58e:	091b      	lsreq	r3, r3, #4
 800e590:	3004      	addeq	r0, #4
 800e592:	079a      	lsls	r2, r3, #30
 800e594:	bf04      	itt	eq
 800e596:	089b      	lsreq	r3, r3, #2
 800e598:	3002      	addeq	r0, #2
 800e59a:	07da      	lsls	r2, r3, #31
 800e59c:	d402      	bmi.n	800e5a4 <__lo0bits+0x4e>
 800e59e:	085b      	lsrs	r3, r3, #1
 800e5a0:	d006      	beq.n	800e5b0 <__lo0bits+0x5a>
 800e5a2:	3001      	adds	r0, #1
 800e5a4:	600b      	str	r3, [r1, #0]
 800e5a6:	4770      	bx	lr
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	e7e9      	b.n	800e580 <__lo0bits+0x2a>
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	4770      	bx	lr
 800e5b0:	2020      	movs	r0, #32
 800e5b2:	4770      	bx	lr

0800e5b4 <__i2b>:
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	460c      	mov	r4, r1
 800e5b8:	2101      	movs	r1, #1
 800e5ba:	f7ff fee9 	bl	800e390 <_Balloc>
 800e5be:	2201      	movs	r2, #1
 800e5c0:	6144      	str	r4, [r0, #20]
 800e5c2:	6102      	str	r2, [r0, #16]
 800e5c4:	bd10      	pop	{r4, pc}

0800e5c6 <__multiply>:
 800e5c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ca:	4614      	mov	r4, r2
 800e5cc:	690a      	ldr	r2, [r1, #16]
 800e5ce:	6923      	ldr	r3, [r4, #16]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	bfb8      	it	lt
 800e5d4:	460b      	movlt	r3, r1
 800e5d6:	4688      	mov	r8, r1
 800e5d8:	bfbc      	itt	lt
 800e5da:	46a0      	movlt	r8, r4
 800e5dc:	461c      	movlt	r4, r3
 800e5de:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e5e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e5e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e5ee:	eb07 0609 	add.w	r6, r7, r9
 800e5f2:	42b3      	cmp	r3, r6
 800e5f4:	bfb8      	it	lt
 800e5f6:	3101      	addlt	r1, #1
 800e5f8:	f7ff feca 	bl	800e390 <_Balloc>
 800e5fc:	f100 0514 	add.w	r5, r0, #20
 800e600:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e604:	462b      	mov	r3, r5
 800e606:	2200      	movs	r2, #0
 800e608:	4573      	cmp	r3, lr
 800e60a:	d316      	bcc.n	800e63a <__multiply+0x74>
 800e60c:	f104 0214 	add.w	r2, r4, #20
 800e610:	f108 0114 	add.w	r1, r8, #20
 800e614:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e618:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	9b00      	ldr	r3, [sp, #0]
 800e620:	9201      	str	r2, [sp, #4]
 800e622:	4293      	cmp	r3, r2
 800e624:	d80c      	bhi.n	800e640 <__multiply+0x7a>
 800e626:	2e00      	cmp	r6, #0
 800e628:	dd03      	ble.n	800e632 <__multiply+0x6c>
 800e62a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d05d      	beq.n	800e6ee <__multiply+0x128>
 800e632:	6106      	str	r6, [r0, #16]
 800e634:	b003      	add	sp, #12
 800e636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e63a:	f843 2b04 	str.w	r2, [r3], #4
 800e63e:	e7e3      	b.n	800e608 <__multiply+0x42>
 800e640:	f8b2 b000 	ldrh.w	fp, [r2]
 800e644:	f1bb 0f00 	cmp.w	fp, #0
 800e648:	d023      	beq.n	800e692 <__multiply+0xcc>
 800e64a:	4689      	mov	r9, r1
 800e64c:	46ac      	mov	ip, r5
 800e64e:	f04f 0800 	mov.w	r8, #0
 800e652:	f859 4b04 	ldr.w	r4, [r9], #4
 800e656:	f8dc a000 	ldr.w	sl, [ip]
 800e65a:	b2a3      	uxth	r3, r4
 800e65c:	fa1f fa8a 	uxth.w	sl, sl
 800e660:	fb0b a303 	mla	r3, fp, r3, sl
 800e664:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e668:	f8dc 4000 	ldr.w	r4, [ip]
 800e66c:	4443      	add	r3, r8
 800e66e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e672:	fb0b 840a 	mla	r4, fp, sl, r8
 800e676:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e67a:	46e2      	mov	sl, ip
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e682:	454f      	cmp	r7, r9
 800e684:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e688:	f84a 3b04 	str.w	r3, [sl], #4
 800e68c:	d82b      	bhi.n	800e6e6 <__multiply+0x120>
 800e68e:	f8cc 8004 	str.w	r8, [ip, #4]
 800e692:	9b01      	ldr	r3, [sp, #4]
 800e694:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e698:	3204      	adds	r2, #4
 800e69a:	f1ba 0f00 	cmp.w	sl, #0
 800e69e:	d020      	beq.n	800e6e2 <__multiply+0x11c>
 800e6a0:	682b      	ldr	r3, [r5, #0]
 800e6a2:	4689      	mov	r9, r1
 800e6a4:	46a8      	mov	r8, r5
 800e6a6:	f04f 0b00 	mov.w	fp, #0
 800e6aa:	f8b9 c000 	ldrh.w	ip, [r9]
 800e6ae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e6b2:	fb0a 440c 	mla	r4, sl, ip, r4
 800e6b6:	445c      	add	r4, fp
 800e6b8:	46c4      	mov	ip, r8
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e6c0:	f84c 3b04 	str.w	r3, [ip], #4
 800e6c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e6c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e6cc:	0c1b      	lsrs	r3, r3, #16
 800e6ce:	fb0a b303 	mla	r3, sl, r3, fp
 800e6d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e6d6:	454f      	cmp	r7, r9
 800e6d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e6dc:	d805      	bhi.n	800e6ea <__multiply+0x124>
 800e6de:	f8c8 3004 	str.w	r3, [r8, #4]
 800e6e2:	3504      	adds	r5, #4
 800e6e4:	e79b      	b.n	800e61e <__multiply+0x58>
 800e6e6:	46d4      	mov	ip, sl
 800e6e8:	e7b3      	b.n	800e652 <__multiply+0x8c>
 800e6ea:	46e0      	mov	r8, ip
 800e6ec:	e7dd      	b.n	800e6aa <__multiply+0xe4>
 800e6ee:	3e01      	subs	r6, #1
 800e6f0:	e799      	b.n	800e626 <__multiply+0x60>
	...

0800e6f4 <__pow5mult>:
 800e6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f8:	4615      	mov	r5, r2
 800e6fa:	f012 0203 	ands.w	r2, r2, #3
 800e6fe:	4606      	mov	r6, r0
 800e700:	460f      	mov	r7, r1
 800e702:	d007      	beq.n	800e714 <__pow5mult+0x20>
 800e704:	3a01      	subs	r2, #1
 800e706:	4c21      	ldr	r4, [pc, #132]	; (800e78c <__pow5mult+0x98>)
 800e708:	2300      	movs	r3, #0
 800e70a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e70e:	f7ff fe8a 	bl	800e426 <__multadd>
 800e712:	4607      	mov	r7, r0
 800e714:	10ad      	asrs	r5, r5, #2
 800e716:	d035      	beq.n	800e784 <__pow5mult+0x90>
 800e718:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e71a:	b93c      	cbnz	r4, 800e72c <__pow5mult+0x38>
 800e71c:	2010      	movs	r0, #16
 800e71e:	f7ff fe1d 	bl	800e35c <malloc>
 800e722:	6270      	str	r0, [r6, #36]	; 0x24
 800e724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e728:	6004      	str	r4, [r0, #0]
 800e72a:	60c4      	str	r4, [r0, #12]
 800e72c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e734:	b94c      	cbnz	r4, 800e74a <__pow5mult+0x56>
 800e736:	f240 2171 	movw	r1, #625	; 0x271
 800e73a:	4630      	mov	r0, r6
 800e73c:	f7ff ff3a 	bl	800e5b4 <__i2b>
 800e740:	2300      	movs	r3, #0
 800e742:	f8c8 0008 	str.w	r0, [r8, #8]
 800e746:	4604      	mov	r4, r0
 800e748:	6003      	str	r3, [r0, #0]
 800e74a:	f04f 0800 	mov.w	r8, #0
 800e74e:	07eb      	lsls	r3, r5, #31
 800e750:	d50a      	bpl.n	800e768 <__pow5mult+0x74>
 800e752:	4639      	mov	r1, r7
 800e754:	4622      	mov	r2, r4
 800e756:	4630      	mov	r0, r6
 800e758:	f7ff ff35 	bl	800e5c6 <__multiply>
 800e75c:	4639      	mov	r1, r7
 800e75e:	4681      	mov	r9, r0
 800e760:	4630      	mov	r0, r6
 800e762:	f7ff fe49 	bl	800e3f8 <_Bfree>
 800e766:	464f      	mov	r7, r9
 800e768:	106d      	asrs	r5, r5, #1
 800e76a:	d00b      	beq.n	800e784 <__pow5mult+0x90>
 800e76c:	6820      	ldr	r0, [r4, #0]
 800e76e:	b938      	cbnz	r0, 800e780 <__pow5mult+0x8c>
 800e770:	4622      	mov	r2, r4
 800e772:	4621      	mov	r1, r4
 800e774:	4630      	mov	r0, r6
 800e776:	f7ff ff26 	bl	800e5c6 <__multiply>
 800e77a:	6020      	str	r0, [r4, #0]
 800e77c:	f8c0 8000 	str.w	r8, [r0]
 800e780:	4604      	mov	r4, r0
 800e782:	e7e4      	b.n	800e74e <__pow5mult+0x5a>
 800e784:	4638      	mov	r0, r7
 800e786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e78a:	bf00      	nop
 800e78c:	0800f290 	.word	0x0800f290

0800e790 <__lshift>:
 800e790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e794:	460c      	mov	r4, r1
 800e796:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e79a:	6923      	ldr	r3, [r4, #16]
 800e79c:	6849      	ldr	r1, [r1, #4]
 800e79e:	eb0a 0903 	add.w	r9, sl, r3
 800e7a2:	68a3      	ldr	r3, [r4, #8]
 800e7a4:	4607      	mov	r7, r0
 800e7a6:	4616      	mov	r6, r2
 800e7a8:	f109 0501 	add.w	r5, r9, #1
 800e7ac:	42ab      	cmp	r3, r5
 800e7ae:	db32      	blt.n	800e816 <__lshift+0x86>
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	f7ff fded 	bl	800e390 <_Balloc>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	4680      	mov	r8, r0
 800e7ba:	f100 0114 	add.w	r1, r0, #20
 800e7be:	461a      	mov	r2, r3
 800e7c0:	4553      	cmp	r3, sl
 800e7c2:	db2b      	blt.n	800e81c <__lshift+0x8c>
 800e7c4:	6920      	ldr	r0, [r4, #16]
 800e7c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e7ca:	f104 0314 	add.w	r3, r4, #20
 800e7ce:	f016 021f 	ands.w	r2, r6, #31
 800e7d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e7d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e7da:	d025      	beq.n	800e828 <__lshift+0x98>
 800e7dc:	f1c2 0e20 	rsb	lr, r2, #32
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	681e      	ldr	r6, [r3, #0]
 800e7e4:	468a      	mov	sl, r1
 800e7e6:	4096      	lsls	r6, r2
 800e7e8:	4330      	orrs	r0, r6
 800e7ea:	f84a 0b04 	str.w	r0, [sl], #4
 800e7ee:	f853 0b04 	ldr.w	r0, [r3], #4
 800e7f2:	459c      	cmp	ip, r3
 800e7f4:	fa20 f00e 	lsr.w	r0, r0, lr
 800e7f8:	d814      	bhi.n	800e824 <__lshift+0x94>
 800e7fa:	6048      	str	r0, [r1, #4]
 800e7fc:	b108      	cbz	r0, 800e802 <__lshift+0x72>
 800e7fe:	f109 0502 	add.w	r5, r9, #2
 800e802:	3d01      	subs	r5, #1
 800e804:	4638      	mov	r0, r7
 800e806:	f8c8 5010 	str.w	r5, [r8, #16]
 800e80a:	4621      	mov	r1, r4
 800e80c:	f7ff fdf4 	bl	800e3f8 <_Bfree>
 800e810:	4640      	mov	r0, r8
 800e812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e816:	3101      	adds	r1, #1
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	e7c7      	b.n	800e7ac <__lshift+0x1c>
 800e81c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e820:	3301      	adds	r3, #1
 800e822:	e7cd      	b.n	800e7c0 <__lshift+0x30>
 800e824:	4651      	mov	r1, sl
 800e826:	e7dc      	b.n	800e7e2 <__lshift+0x52>
 800e828:	3904      	subs	r1, #4
 800e82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e82e:	f841 2f04 	str.w	r2, [r1, #4]!
 800e832:	459c      	cmp	ip, r3
 800e834:	d8f9      	bhi.n	800e82a <__lshift+0x9a>
 800e836:	e7e4      	b.n	800e802 <__lshift+0x72>

0800e838 <__mcmp>:
 800e838:	6903      	ldr	r3, [r0, #16]
 800e83a:	690a      	ldr	r2, [r1, #16]
 800e83c:	1a9b      	subs	r3, r3, r2
 800e83e:	b530      	push	{r4, r5, lr}
 800e840:	d10c      	bne.n	800e85c <__mcmp+0x24>
 800e842:	0092      	lsls	r2, r2, #2
 800e844:	3014      	adds	r0, #20
 800e846:	3114      	adds	r1, #20
 800e848:	1884      	adds	r4, r0, r2
 800e84a:	4411      	add	r1, r2
 800e84c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e850:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e854:	4295      	cmp	r5, r2
 800e856:	d003      	beq.n	800e860 <__mcmp+0x28>
 800e858:	d305      	bcc.n	800e866 <__mcmp+0x2e>
 800e85a:	2301      	movs	r3, #1
 800e85c:	4618      	mov	r0, r3
 800e85e:	bd30      	pop	{r4, r5, pc}
 800e860:	42a0      	cmp	r0, r4
 800e862:	d3f3      	bcc.n	800e84c <__mcmp+0x14>
 800e864:	e7fa      	b.n	800e85c <__mcmp+0x24>
 800e866:	f04f 33ff 	mov.w	r3, #4294967295
 800e86a:	e7f7      	b.n	800e85c <__mcmp+0x24>

0800e86c <__mdiff>:
 800e86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e870:	460d      	mov	r5, r1
 800e872:	4607      	mov	r7, r0
 800e874:	4611      	mov	r1, r2
 800e876:	4628      	mov	r0, r5
 800e878:	4614      	mov	r4, r2
 800e87a:	f7ff ffdd 	bl	800e838 <__mcmp>
 800e87e:	1e06      	subs	r6, r0, #0
 800e880:	d108      	bne.n	800e894 <__mdiff+0x28>
 800e882:	4631      	mov	r1, r6
 800e884:	4638      	mov	r0, r7
 800e886:	f7ff fd83 	bl	800e390 <_Balloc>
 800e88a:	2301      	movs	r3, #1
 800e88c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e894:	bfa4      	itt	ge
 800e896:	4623      	movge	r3, r4
 800e898:	462c      	movge	r4, r5
 800e89a:	4638      	mov	r0, r7
 800e89c:	6861      	ldr	r1, [r4, #4]
 800e89e:	bfa6      	itte	ge
 800e8a0:	461d      	movge	r5, r3
 800e8a2:	2600      	movge	r6, #0
 800e8a4:	2601      	movlt	r6, #1
 800e8a6:	f7ff fd73 	bl	800e390 <_Balloc>
 800e8aa:	692b      	ldr	r3, [r5, #16]
 800e8ac:	60c6      	str	r6, [r0, #12]
 800e8ae:	6926      	ldr	r6, [r4, #16]
 800e8b0:	f105 0914 	add.w	r9, r5, #20
 800e8b4:	f104 0214 	add.w	r2, r4, #20
 800e8b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e8bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e8c0:	f100 0514 	add.w	r5, r0, #20
 800e8c4:	f04f 0e00 	mov.w	lr, #0
 800e8c8:	f852 ab04 	ldr.w	sl, [r2], #4
 800e8cc:	f859 4b04 	ldr.w	r4, [r9], #4
 800e8d0:	fa1e f18a 	uxtah	r1, lr, sl
 800e8d4:	b2a3      	uxth	r3, r4
 800e8d6:	1ac9      	subs	r1, r1, r3
 800e8d8:	0c23      	lsrs	r3, r4, #16
 800e8da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e8de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e8e2:	b289      	uxth	r1, r1
 800e8e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e8e8:	45c8      	cmp	r8, r9
 800e8ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e8ee:	4694      	mov	ip, r2
 800e8f0:	f845 3b04 	str.w	r3, [r5], #4
 800e8f4:	d8e8      	bhi.n	800e8c8 <__mdiff+0x5c>
 800e8f6:	45bc      	cmp	ip, r7
 800e8f8:	d304      	bcc.n	800e904 <__mdiff+0x98>
 800e8fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e8fe:	b183      	cbz	r3, 800e922 <__mdiff+0xb6>
 800e900:	6106      	str	r6, [r0, #16]
 800e902:	e7c5      	b.n	800e890 <__mdiff+0x24>
 800e904:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e908:	fa1e f381 	uxtah	r3, lr, r1
 800e90c:	141a      	asrs	r2, r3, #16
 800e90e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e912:	b29b      	uxth	r3, r3
 800e914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e918:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e91c:	f845 3b04 	str.w	r3, [r5], #4
 800e920:	e7e9      	b.n	800e8f6 <__mdiff+0x8a>
 800e922:	3e01      	subs	r6, #1
 800e924:	e7e9      	b.n	800e8fa <__mdiff+0x8e>
	...

0800e928 <__ulp>:
 800e928:	4b12      	ldr	r3, [pc, #72]	; (800e974 <__ulp+0x4c>)
 800e92a:	ee10 2a90 	vmov	r2, s1
 800e92e:	401a      	ands	r2, r3
 800e930:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e934:	2b00      	cmp	r3, #0
 800e936:	dd04      	ble.n	800e942 <__ulp+0x1a>
 800e938:	2000      	movs	r0, #0
 800e93a:	4619      	mov	r1, r3
 800e93c:	ec41 0b10 	vmov	d0, r0, r1
 800e940:	4770      	bx	lr
 800e942:	425b      	negs	r3, r3
 800e944:	151b      	asrs	r3, r3, #20
 800e946:	2b13      	cmp	r3, #19
 800e948:	f04f 0000 	mov.w	r0, #0
 800e94c:	f04f 0100 	mov.w	r1, #0
 800e950:	dc04      	bgt.n	800e95c <__ulp+0x34>
 800e952:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e956:	fa42 f103 	asr.w	r1, r2, r3
 800e95a:	e7ef      	b.n	800e93c <__ulp+0x14>
 800e95c:	3b14      	subs	r3, #20
 800e95e:	2b1e      	cmp	r3, #30
 800e960:	f04f 0201 	mov.w	r2, #1
 800e964:	bfda      	itte	le
 800e966:	f1c3 031f 	rsble	r3, r3, #31
 800e96a:	fa02 f303 	lslle.w	r3, r2, r3
 800e96e:	4613      	movgt	r3, r2
 800e970:	4618      	mov	r0, r3
 800e972:	e7e3      	b.n	800e93c <__ulp+0x14>
 800e974:	7ff00000 	.word	0x7ff00000

0800e978 <__b2d>:
 800e978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97a:	6905      	ldr	r5, [r0, #16]
 800e97c:	f100 0714 	add.w	r7, r0, #20
 800e980:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e984:	1f2e      	subs	r6, r5, #4
 800e986:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e98a:	4620      	mov	r0, r4
 800e98c:	f7ff fdc4 	bl	800e518 <__hi0bits>
 800e990:	f1c0 0320 	rsb	r3, r0, #32
 800e994:	280a      	cmp	r0, #10
 800e996:	600b      	str	r3, [r1, #0]
 800e998:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ea10 <__b2d+0x98>
 800e99c:	dc14      	bgt.n	800e9c8 <__b2d+0x50>
 800e99e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e9a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800e9a6:	42b7      	cmp	r7, r6
 800e9a8:	ea41 030c 	orr.w	r3, r1, ip
 800e9ac:	bf34      	ite	cc
 800e9ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9b2:	2100      	movcs	r1, #0
 800e9b4:	3015      	adds	r0, #21
 800e9b6:	fa04 f000 	lsl.w	r0, r4, r0
 800e9ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800e9be:	ea40 0201 	orr.w	r2, r0, r1
 800e9c2:	ec43 2b10 	vmov	d0, r2, r3
 800e9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9c8:	42b7      	cmp	r7, r6
 800e9ca:	bf3a      	itte	cc
 800e9cc:	f1a5 0608 	subcc.w	r6, r5, #8
 800e9d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e9d4:	2100      	movcs	r1, #0
 800e9d6:	380b      	subs	r0, #11
 800e9d8:	d015      	beq.n	800ea06 <__b2d+0x8e>
 800e9da:	4084      	lsls	r4, r0
 800e9dc:	f1c0 0520 	rsb	r5, r0, #32
 800e9e0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e9e4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e9e8:	42be      	cmp	r6, r7
 800e9ea:	fa21 fc05 	lsr.w	ip, r1, r5
 800e9ee:	ea44 030c 	orr.w	r3, r4, ip
 800e9f2:	bf8c      	ite	hi
 800e9f4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e9f8:	2400      	movls	r4, #0
 800e9fa:	fa01 f000 	lsl.w	r0, r1, r0
 800e9fe:	40ec      	lsrs	r4, r5
 800ea00:	ea40 0204 	orr.w	r2, r0, r4
 800ea04:	e7dd      	b.n	800e9c2 <__b2d+0x4a>
 800ea06:	ea44 030c 	orr.w	r3, r4, ip
 800ea0a:	460a      	mov	r2, r1
 800ea0c:	e7d9      	b.n	800e9c2 <__b2d+0x4a>
 800ea0e:	bf00      	nop
 800ea10:	3ff00000 	.word	0x3ff00000

0800ea14 <__d2b>:
 800ea14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ea18:	460e      	mov	r6, r1
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	ec59 8b10 	vmov	r8, r9, d0
 800ea20:	4615      	mov	r5, r2
 800ea22:	f7ff fcb5 	bl	800e390 <_Balloc>
 800ea26:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ea2a:	4607      	mov	r7, r0
 800ea2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ea30:	bb34      	cbnz	r4, 800ea80 <__d2b+0x6c>
 800ea32:	9301      	str	r3, [sp, #4]
 800ea34:	f1b8 0300 	subs.w	r3, r8, #0
 800ea38:	d027      	beq.n	800ea8a <__d2b+0x76>
 800ea3a:	a802      	add	r0, sp, #8
 800ea3c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ea40:	f7ff fd89 	bl	800e556 <__lo0bits>
 800ea44:	9900      	ldr	r1, [sp, #0]
 800ea46:	b1f0      	cbz	r0, 800ea86 <__d2b+0x72>
 800ea48:	9a01      	ldr	r2, [sp, #4]
 800ea4a:	f1c0 0320 	rsb	r3, r0, #32
 800ea4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ea52:	430b      	orrs	r3, r1
 800ea54:	40c2      	lsrs	r2, r0
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	9201      	str	r2, [sp, #4]
 800ea5a:	9b01      	ldr	r3, [sp, #4]
 800ea5c:	61bb      	str	r3, [r7, #24]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	bf14      	ite	ne
 800ea62:	2102      	movne	r1, #2
 800ea64:	2101      	moveq	r1, #1
 800ea66:	6139      	str	r1, [r7, #16]
 800ea68:	b1c4      	cbz	r4, 800ea9c <__d2b+0x88>
 800ea6a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ea6e:	4404      	add	r4, r0
 800ea70:	6034      	str	r4, [r6, #0]
 800ea72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ea76:	6028      	str	r0, [r5, #0]
 800ea78:	4638      	mov	r0, r7
 800ea7a:	b003      	add	sp, #12
 800ea7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea84:	e7d5      	b.n	800ea32 <__d2b+0x1e>
 800ea86:	6179      	str	r1, [r7, #20]
 800ea88:	e7e7      	b.n	800ea5a <__d2b+0x46>
 800ea8a:	a801      	add	r0, sp, #4
 800ea8c:	f7ff fd63 	bl	800e556 <__lo0bits>
 800ea90:	9b01      	ldr	r3, [sp, #4]
 800ea92:	617b      	str	r3, [r7, #20]
 800ea94:	2101      	movs	r1, #1
 800ea96:	6139      	str	r1, [r7, #16]
 800ea98:	3020      	adds	r0, #32
 800ea9a:	e7e5      	b.n	800ea68 <__d2b+0x54>
 800ea9c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800eaa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eaa4:	6030      	str	r0, [r6, #0]
 800eaa6:	6918      	ldr	r0, [r3, #16]
 800eaa8:	f7ff fd36 	bl	800e518 <__hi0bits>
 800eaac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800eab0:	e7e1      	b.n	800ea76 <__d2b+0x62>

0800eab2 <__ratio>:
 800eab2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab6:	4688      	mov	r8, r1
 800eab8:	4669      	mov	r1, sp
 800eaba:	4681      	mov	r9, r0
 800eabc:	f7ff ff5c 	bl	800e978 <__b2d>
 800eac0:	a901      	add	r1, sp, #4
 800eac2:	4640      	mov	r0, r8
 800eac4:	ec57 6b10 	vmov	r6, r7, d0
 800eac8:	ee10 4a10 	vmov	r4, s0
 800eacc:	f7ff ff54 	bl	800e978 <__b2d>
 800ead0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ead4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ead8:	eba3 0c02 	sub.w	ip, r3, r2
 800eadc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eae0:	1a9b      	subs	r3, r3, r2
 800eae2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eae6:	ec51 0b10 	vmov	r0, r1, d0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	ee10 aa10 	vmov	sl, s0
 800eaf0:	bfce      	itee	gt
 800eaf2:	463a      	movgt	r2, r7
 800eaf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eaf8:	460a      	movle	r2, r1
 800eafa:	463d      	mov	r5, r7
 800eafc:	468b      	mov	fp, r1
 800eafe:	bfcc      	ite	gt
 800eb00:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800eb04:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800eb08:	ec45 4b17 	vmov	d7, r4, r5
 800eb0c:	ec4b ab16 	vmov	d6, sl, fp
 800eb10:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800eb14:	b003      	add	sp, #12
 800eb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb1a <__copybits>:
 800eb1a:	3901      	subs	r1, #1
 800eb1c:	b510      	push	{r4, lr}
 800eb1e:	1149      	asrs	r1, r1, #5
 800eb20:	6914      	ldr	r4, [r2, #16]
 800eb22:	3101      	adds	r1, #1
 800eb24:	f102 0314 	add.w	r3, r2, #20
 800eb28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800eb2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eb30:	42a3      	cmp	r3, r4
 800eb32:	4602      	mov	r2, r0
 800eb34:	d303      	bcc.n	800eb3e <__copybits+0x24>
 800eb36:	2300      	movs	r3, #0
 800eb38:	428a      	cmp	r2, r1
 800eb3a:	d305      	bcc.n	800eb48 <__copybits+0x2e>
 800eb3c:	bd10      	pop	{r4, pc}
 800eb3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb42:	f840 2b04 	str.w	r2, [r0], #4
 800eb46:	e7f3      	b.n	800eb30 <__copybits+0x16>
 800eb48:	f842 3b04 	str.w	r3, [r2], #4
 800eb4c:	e7f4      	b.n	800eb38 <__copybits+0x1e>

0800eb4e <__any_on>:
 800eb4e:	f100 0214 	add.w	r2, r0, #20
 800eb52:	6900      	ldr	r0, [r0, #16]
 800eb54:	114b      	asrs	r3, r1, #5
 800eb56:	4298      	cmp	r0, r3
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	db11      	blt.n	800eb80 <__any_on+0x32>
 800eb5c:	dd0a      	ble.n	800eb74 <__any_on+0x26>
 800eb5e:	f011 011f 	ands.w	r1, r1, #31
 800eb62:	d007      	beq.n	800eb74 <__any_on+0x26>
 800eb64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eb68:	fa24 f001 	lsr.w	r0, r4, r1
 800eb6c:	fa00 f101 	lsl.w	r1, r0, r1
 800eb70:	428c      	cmp	r4, r1
 800eb72:	d10b      	bne.n	800eb8c <__any_on+0x3e>
 800eb74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d803      	bhi.n	800eb84 <__any_on+0x36>
 800eb7c:	2000      	movs	r0, #0
 800eb7e:	bd10      	pop	{r4, pc}
 800eb80:	4603      	mov	r3, r0
 800eb82:	e7f7      	b.n	800eb74 <__any_on+0x26>
 800eb84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb88:	2900      	cmp	r1, #0
 800eb8a:	d0f5      	beq.n	800eb78 <__any_on+0x2a>
 800eb8c:	2001      	movs	r0, #1
 800eb8e:	e7f6      	b.n	800eb7e <__any_on+0x30>

0800eb90 <_calloc_r>:
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	fb02 f401 	mul.w	r4, r2, r1
 800eb96:	4621      	mov	r1, r4
 800eb98:	f000 f856 	bl	800ec48 <_malloc_r>
 800eb9c:	4605      	mov	r5, r0
 800eb9e:	b118      	cbz	r0, 800eba8 <_calloc_r+0x18>
 800eba0:	4622      	mov	r2, r4
 800eba2:	2100      	movs	r1, #0
 800eba4:	f7fc fe07 	bl	800b7b6 <memset>
 800eba8:	4628      	mov	r0, r5
 800ebaa:	bd38      	pop	{r3, r4, r5, pc}

0800ebac <_free_r>:
 800ebac:	b538      	push	{r3, r4, r5, lr}
 800ebae:	4605      	mov	r5, r0
 800ebb0:	2900      	cmp	r1, #0
 800ebb2:	d045      	beq.n	800ec40 <_free_r+0x94>
 800ebb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ebb8:	1f0c      	subs	r4, r1, #4
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	bfb8      	it	lt
 800ebbe:	18e4      	addlt	r4, r4, r3
 800ebc0:	f000 fa36 	bl	800f030 <__malloc_lock>
 800ebc4:	4a1f      	ldr	r2, [pc, #124]	; (800ec44 <_free_r+0x98>)
 800ebc6:	6813      	ldr	r3, [r2, #0]
 800ebc8:	4610      	mov	r0, r2
 800ebca:	b933      	cbnz	r3, 800ebda <_free_r+0x2e>
 800ebcc:	6063      	str	r3, [r4, #4]
 800ebce:	6014      	str	r4, [r2, #0]
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebd6:	f000 ba2c 	b.w	800f032 <__malloc_unlock>
 800ebda:	42a3      	cmp	r3, r4
 800ebdc:	d90c      	bls.n	800ebf8 <_free_r+0x4c>
 800ebde:	6821      	ldr	r1, [r4, #0]
 800ebe0:	1862      	adds	r2, r4, r1
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	bf04      	itt	eq
 800ebe6:	681a      	ldreq	r2, [r3, #0]
 800ebe8:	685b      	ldreq	r3, [r3, #4]
 800ebea:	6063      	str	r3, [r4, #4]
 800ebec:	bf04      	itt	eq
 800ebee:	1852      	addeq	r2, r2, r1
 800ebf0:	6022      	streq	r2, [r4, #0]
 800ebf2:	6004      	str	r4, [r0, #0]
 800ebf4:	e7ec      	b.n	800ebd0 <_free_r+0x24>
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	685a      	ldr	r2, [r3, #4]
 800ebfa:	b10a      	cbz	r2, 800ec00 <_free_r+0x54>
 800ebfc:	42a2      	cmp	r2, r4
 800ebfe:	d9fa      	bls.n	800ebf6 <_free_r+0x4a>
 800ec00:	6819      	ldr	r1, [r3, #0]
 800ec02:	1858      	adds	r0, r3, r1
 800ec04:	42a0      	cmp	r0, r4
 800ec06:	d10b      	bne.n	800ec20 <_free_r+0x74>
 800ec08:	6820      	ldr	r0, [r4, #0]
 800ec0a:	4401      	add	r1, r0
 800ec0c:	1858      	adds	r0, r3, r1
 800ec0e:	4282      	cmp	r2, r0
 800ec10:	6019      	str	r1, [r3, #0]
 800ec12:	d1dd      	bne.n	800ebd0 <_free_r+0x24>
 800ec14:	6810      	ldr	r0, [r2, #0]
 800ec16:	6852      	ldr	r2, [r2, #4]
 800ec18:	605a      	str	r2, [r3, #4]
 800ec1a:	4401      	add	r1, r0
 800ec1c:	6019      	str	r1, [r3, #0]
 800ec1e:	e7d7      	b.n	800ebd0 <_free_r+0x24>
 800ec20:	d902      	bls.n	800ec28 <_free_r+0x7c>
 800ec22:	230c      	movs	r3, #12
 800ec24:	602b      	str	r3, [r5, #0]
 800ec26:	e7d3      	b.n	800ebd0 <_free_r+0x24>
 800ec28:	6820      	ldr	r0, [r4, #0]
 800ec2a:	1821      	adds	r1, r4, r0
 800ec2c:	428a      	cmp	r2, r1
 800ec2e:	bf04      	itt	eq
 800ec30:	6811      	ldreq	r1, [r2, #0]
 800ec32:	6852      	ldreq	r2, [r2, #4]
 800ec34:	6062      	str	r2, [r4, #4]
 800ec36:	bf04      	itt	eq
 800ec38:	1809      	addeq	r1, r1, r0
 800ec3a:	6021      	streq	r1, [r4, #0]
 800ec3c:	605c      	str	r4, [r3, #4]
 800ec3e:	e7c7      	b.n	800ebd0 <_free_r+0x24>
 800ec40:	bd38      	pop	{r3, r4, r5, pc}
 800ec42:	bf00      	nop
 800ec44:	20000c90 	.word	0x20000c90

0800ec48 <_malloc_r>:
 800ec48:	b570      	push	{r4, r5, r6, lr}
 800ec4a:	1ccd      	adds	r5, r1, #3
 800ec4c:	f025 0503 	bic.w	r5, r5, #3
 800ec50:	3508      	adds	r5, #8
 800ec52:	2d0c      	cmp	r5, #12
 800ec54:	bf38      	it	cc
 800ec56:	250c      	movcc	r5, #12
 800ec58:	2d00      	cmp	r5, #0
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	db01      	blt.n	800ec62 <_malloc_r+0x1a>
 800ec5e:	42a9      	cmp	r1, r5
 800ec60:	d903      	bls.n	800ec6a <_malloc_r+0x22>
 800ec62:	230c      	movs	r3, #12
 800ec64:	6033      	str	r3, [r6, #0]
 800ec66:	2000      	movs	r0, #0
 800ec68:	bd70      	pop	{r4, r5, r6, pc}
 800ec6a:	f000 f9e1 	bl	800f030 <__malloc_lock>
 800ec6e:	4a21      	ldr	r2, [pc, #132]	; (800ecf4 <_malloc_r+0xac>)
 800ec70:	6814      	ldr	r4, [r2, #0]
 800ec72:	4621      	mov	r1, r4
 800ec74:	b991      	cbnz	r1, 800ec9c <_malloc_r+0x54>
 800ec76:	4c20      	ldr	r4, [pc, #128]	; (800ecf8 <_malloc_r+0xb0>)
 800ec78:	6823      	ldr	r3, [r4, #0]
 800ec7a:	b91b      	cbnz	r3, 800ec84 <_malloc_r+0x3c>
 800ec7c:	4630      	mov	r0, r6
 800ec7e:	f000 f98f 	bl	800efa0 <_sbrk_r>
 800ec82:	6020      	str	r0, [r4, #0]
 800ec84:	4629      	mov	r1, r5
 800ec86:	4630      	mov	r0, r6
 800ec88:	f000 f98a 	bl	800efa0 <_sbrk_r>
 800ec8c:	1c43      	adds	r3, r0, #1
 800ec8e:	d124      	bne.n	800ecda <_malloc_r+0x92>
 800ec90:	230c      	movs	r3, #12
 800ec92:	6033      	str	r3, [r6, #0]
 800ec94:	4630      	mov	r0, r6
 800ec96:	f000 f9cc 	bl	800f032 <__malloc_unlock>
 800ec9a:	e7e4      	b.n	800ec66 <_malloc_r+0x1e>
 800ec9c:	680b      	ldr	r3, [r1, #0]
 800ec9e:	1b5b      	subs	r3, r3, r5
 800eca0:	d418      	bmi.n	800ecd4 <_malloc_r+0x8c>
 800eca2:	2b0b      	cmp	r3, #11
 800eca4:	d90f      	bls.n	800ecc6 <_malloc_r+0x7e>
 800eca6:	600b      	str	r3, [r1, #0]
 800eca8:	50cd      	str	r5, [r1, r3]
 800ecaa:	18cc      	adds	r4, r1, r3
 800ecac:	4630      	mov	r0, r6
 800ecae:	f000 f9c0 	bl	800f032 <__malloc_unlock>
 800ecb2:	f104 000b 	add.w	r0, r4, #11
 800ecb6:	1d23      	adds	r3, r4, #4
 800ecb8:	f020 0007 	bic.w	r0, r0, #7
 800ecbc:	1ac3      	subs	r3, r0, r3
 800ecbe:	d0d3      	beq.n	800ec68 <_malloc_r+0x20>
 800ecc0:	425a      	negs	r2, r3
 800ecc2:	50e2      	str	r2, [r4, r3]
 800ecc4:	e7d0      	b.n	800ec68 <_malloc_r+0x20>
 800ecc6:	428c      	cmp	r4, r1
 800ecc8:	684b      	ldr	r3, [r1, #4]
 800ecca:	bf16      	itet	ne
 800eccc:	6063      	strne	r3, [r4, #4]
 800ecce:	6013      	streq	r3, [r2, #0]
 800ecd0:	460c      	movne	r4, r1
 800ecd2:	e7eb      	b.n	800ecac <_malloc_r+0x64>
 800ecd4:	460c      	mov	r4, r1
 800ecd6:	6849      	ldr	r1, [r1, #4]
 800ecd8:	e7cc      	b.n	800ec74 <_malloc_r+0x2c>
 800ecda:	1cc4      	adds	r4, r0, #3
 800ecdc:	f024 0403 	bic.w	r4, r4, #3
 800ece0:	42a0      	cmp	r0, r4
 800ece2:	d005      	beq.n	800ecf0 <_malloc_r+0xa8>
 800ece4:	1a21      	subs	r1, r4, r0
 800ece6:	4630      	mov	r0, r6
 800ece8:	f000 f95a 	bl	800efa0 <_sbrk_r>
 800ecec:	3001      	adds	r0, #1
 800ecee:	d0cf      	beq.n	800ec90 <_malloc_r+0x48>
 800ecf0:	6025      	str	r5, [r4, #0]
 800ecf2:	e7db      	b.n	800ecac <_malloc_r+0x64>
 800ecf4:	20000c90 	.word	0x20000c90
 800ecf8:	20000c94 	.word	0x20000c94

0800ecfc <__ssputs_r>:
 800ecfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed00:	688e      	ldr	r6, [r1, #8]
 800ed02:	429e      	cmp	r6, r3
 800ed04:	4682      	mov	sl, r0
 800ed06:	460c      	mov	r4, r1
 800ed08:	4690      	mov	r8, r2
 800ed0a:	4699      	mov	r9, r3
 800ed0c:	d837      	bhi.n	800ed7e <__ssputs_r+0x82>
 800ed0e:	898a      	ldrh	r2, [r1, #12]
 800ed10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed14:	d031      	beq.n	800ed7a <__ssputs_r+0x7e>
 800ed16:	6825      	ldr	r5, [r4, #0]
 800ed18:	6909      	ldr	r1, [r1, #16]
 800ed1a:	1a6f      	subs	r7, r5, r1
 800ed1c:	6965      	ldr	r5, [r4, #20]
 800ed1e:	2302      	movs	r3, #2
 800ed20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed24:	fb95 f5f3 	sdiv	r5, r5, r3
 800ed28:	f109 0301 	add.w	r3, r9, #1
 800ed2c:	443b      	add	r3, r7
 800ed2e:	429d      	cmp	r5, r3
 800ed30:	bf38      	it	cc
 800ed32:	461d      	movcc	r5, r3
 800ed34:	0553      	lsls	r3, r2, #21
 800ed36:	d530      	bpl.n	800ed9a <__ssputs_r+0x9e>
 800ed38:	4629      	mov	r1, r5
 800ed3a:	f7ff ff85 	bl	800ec48 <_malloc_r>
 800ed3e:	4606      	mov	r6, r0
 800ed40:	b950      	cbnz	r0, 800ed58 <__ssputs_r+0x5c>
 800ed42:	230c      	movs	r3, #12
 800ed44:	f8ca 3000 	str.w	r3, [sl]
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed4e:	81a3      	strh	r3, [r4, #12]
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed58:	463a      	mov	r2, r7
 800ed5a:	6921      	ldr	r1, [r4, #16]
 800ed5c:	f7fc fd20 	bl	800b7a0 <memcpy>
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed6a:	81a3      	strh	r3, [r4, #12]
 800ed6c:	6126      	str	r6, [r4, #16]
 800ed6e:	6165      	str	r5, [r4, #20]
 800ed70:	443e      	add	r6, r7
 800ed72:	1bed      	subs	r5, r5, r7
 800ed74:	6026      	str	r6, [r4, #0]
 800ed76:	60a5      	str	r5, [r4, #8]
 800ed78:	464e      	mov	r6, r9
 800ed7a:	454e      	cmp	r6, r9
 800ed7c:	d900      	bls.n	800ed80 <__ssputs_r+0x84>
 800ed7e:	464e      	mov	r6, r9
 800ed80:	4632      	mov	r2, r6
 800ed82:	4641      	mov	r1, r8
 800ed84:	6820      	ldr	r0, [r4, #0]
 800ed86:	f000 f93a 	bl	800effe <memmove>
 800ed8a:	68a3      	ldr	r3, [r4, #8]
 800ed8c:	1b9b      	subs	r3, r3, r6
 800ed8e:	60a3      	str	r3, [r4, #8]
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	441e      	add	r6, r3
 800ed94:	6026      	str	r6, [r4, #0]
 800ed96:	2000      	movs	r0, #0
 800ed98:	e7dc      	b.n	800ed54 <__ssputs_r+0x58>
 800ed9a:	462a      	mov	r2, r5
 800ed9c:	f000 f94a 	bl	800f034 <_realloc_r>
 800eda0:	4606      	mov	r6, r0
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d1e2      	bne.n	800ed6c <__ssputs_r+0x70>
 800eda6:	6921      	ldr	r1, [r4, #16]
 800eda8:	4650      	mov	r0, sl
 800edaa:	f7ff feff 	bl	800ebac <_free_r>
 800edae:	e7c8      	b.n	800ed42 <__ssputs_r+0x46>

0800edb0 <_svfiprintf_r>:
 800edb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb4:	461d      	mov	r5, r3
 800edb6:	898b      	ldrh	r3, [r1, #12]
 800edb8:	061f      	lsls	r7, r3, #24
 800edba:	b09d      	sub	sp, #116	; 0x74
 800edbc:	4680      	mov	r8, r0
 800edbe:	460c      	mov	r4, r1
 800edc0:	4616      	mov	r6, r2
 800edc2:	d50f      	bpl.n	800ede4 <_svfiprintf_r+0x34>
 800edc4:	690b      	ldr	r3, [r1, #16]
 800edc6:	b96b      	cbnz	r3, 800ede4 <_svfiprintf_r+0x34>
 800edc8:	2140      	movs	r1, #64	; 0x40
 800edca:	f7ff ff3d 	bl	800ec48 <_malloc_r>
 800edce:	6020      	str	r0, [r4, #0]
 800edd0:	6120      	str	r0, [r4, #16]
 800edd2:	b928      	cbnz	r0, 800ede0 <_svfiprintf_r+0x30>
 800edd4:	230c      	movs	r3, #12
 800edd6:	f8c8 3000 	str.w	r3, [r8]
 800edda:	f04f 30ff 	mov.w	r0, #4294967295
 800edde:	e0c8      	b.n	800ef72 <_svfiprintf_r+0x1c2>
 800ede0:	2340      	movs	r3, #64	; 0x40
 800ede2:	6163      	str	r3, [r4, #20]
 800ede4:	2300      	movs	r3, #0
 800ede6:	9309      	str	r3, [sp, #36]	; 0x24
 800ede8:	2320      	movs	r3, #32
 800edea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edee:	2330      	movs	r3, #48	; 0x30
 800edf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edf4:	9503      	str	r5, [sp, #12]
 800edf6:	f04f 0b01 	mov.w	fp, #1
 800edfa:	4637      	mov	r7, r6
 800edfc:	463d      	mov	r5, r7
 800edfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee02:	b10b      	cbz	r3, 800ee08 <_svfiprintf_r+0x58>
 800ee04:	2b25      	cmp	r3, #37	; 0x25
 800ee06:	d13e      	bne.n	800ee86 <_svfiprintf_r+0xd6>
 800ee08:	ebb7 0a06 	subs.w	sl, r7, r6
 800ee0c:	d00b      	beq.n	800ee26 <_svfiprintf_r+0x76>
 800ee0e:	4653      	mov	r3, sl
 800ee10:	4632      	mov	r2, r6
 800ee12:	4621      	mov	r1, r4
 800ee14:	4640      	mov	r0, r8
 800ee16:	f7ff ff71 	bl	800ecfc <__ssputs_r>
 800ee1a:	3001      	adds	r0, #1
 800ee1c:	f000 80a4 	beq.w	800ef68 <_svfiprintf_r+0x1b8>
 800ee20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee22:	4453      	add	r3, sl
 800ee24:	9309      	str	r3, [sp, #36]	; 0x24
 800ee26:	783b      	ldrb	r3, [r7, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f000 809d 	beq.w	800ef68 <_svfiprintf_r+0x1b8>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f04f 32ff 	mov.w	r2, #4294967295
 800ee34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee38:	9304      	str	r3, [sp, #16]
 800ee3a:	9307      	str	r3, [sp, #28]
 800ee3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee40:	931a      	str	r3, [sp, #104]	; 0x68
 800ee42:	462f      	mov	r7, r5
 800ee44:	2205      	movs	r2, #5
 800ee46:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ee4a:	4850      	ldr	r0, [pc, #320]	; (800ef8c <_svfiprintf_r+0x1dc>)
 800ee4c:	f7f1 fa00 	bl	8000250 <memchr>
 800ee50:	9b04      	ldr	r3, [sp, #16]
 800ee52:	b9d0      	cbnz	r0, 800ee8a <_svfiprintf_r+0xda>
 800ee54:	06d9      	lsls	r1, r3, #27
 800ee56:	bf44      	itt	mi
 800ee58:	2220      	movmi	r2, #32
 800ee5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee5e:	071a      	lsls	r2, r3, #28
 800ee60:	bf44      	itt	mi
 800ee62:	222b      	movmi	r2, #43	; 0x2b
 800ee64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee68:	782a      	ldrb	r2, [r5, #0]
 800ee6a:	2a2a      	cmp	r2, #42	; 0x2a
 800ee6c:	d015      	beq.n	800ee9a <_svfiprintf_r+0xea>
 800ee6e:	9a07      	ldr	r2, [sp, #28]
 800ee70:	462f      	mov	r7, r5
 800ee72:	2000      	movs	r0, #0
 800ee74:	250a      	movs	r5, #10
 800ee76:	4639      	mov	r1, r7
 800ee78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee7c:	3b30      	subs	r3, #48	; 0x30
 800ee7e:	2b09      	cmp	r3, #9
 800ee80:	d94d      	bls.n	800ef1e <_svfiprintf_r+0x16e>
 800ee82:	b1b8      	cbz	r0, 800eeb4 <_svfiprintf_r+0x104>
 800ee84:	e00f      	b.n	800eea6 <_svfiprintf_r+0xf6>
 800ee86:	462f      	mov	r7, r5
 800ee88:	e7b8      	b.n	800edfc <_svfiprintf_r+0x4c>
 800ee8a:	4a40      	ldr	r2, [pc, #256]	; (800ef8c <_svfiprintf_r+0x1dc>)
 800ee8c:	1a80      	subs	r0, r0, r2
 800ee8e:	fa0b f000 	lsl.w	r0, fp, r0
 800ee92:	4318      	orrs	r0, r3
 800ee94:	9004      	str	r0, [sp, #16]
 800ee96:	463d      	mov	r5, r7
 800ee98:	e7d3      	b.n	800ee42 <_svfiprintf_r+0x92>
 800ee9a:	9a03      	ldr	r2, [sp, #12]
 800ee9c:	1d11      	adds	r1, r2, #4
 800ee9e:	6812      	ldr	r2, [r2, #0]
 800eea0:	9103      	str	r1, [sp, #12]
 800eea2:	2a00      	cmp	r2, #0
 800eea4:	db01      	blt.n	800eeaa <_svfiprintf_r+0xfa>
 800eea6:	9207      	str	r2, [sp, #28]
 800eea8:	e004      	b.n	800eeb4 <_svfiprintf_r+0x104>
 800eeaa:	4252      	negs	r2, r2
 800eeac:	f043 0302 	orr.w	r3, r3, #2
 800eeb0:	9207      	str	r2, [sp, #28]
 800eeb2:	9304      	str	r3, [sp, #16]
 800eeb4:	783b      	ldrb	r3, [r7, #0]
 800eeb6:	2b2e      	cmp	r3, #46	; 0x2e
 800eeb8:	d10c      	bne.n	800eed4 <_svfiprintf_r+0x124>
 800eeba:	787b      	ldrb	r3, [r7, #1]
 800eebc:	2b2a      	cmp	r3, #42	; 0x2a
 800eebe:	d133      	bne.n	800ef28 <_svfiprintf_r+0x178>
 800eec0:	9b03      	ldr	r3, [sp, #12]
 800eec2:	1d1a      	adds	r2, r3, #4
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	9203      	str	r2, [sp, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	bfb8      	it	lt
 800eecc:	f04f 33ff 	movlt.w	r3, #4294967295
 800eed0:	3702      	adds	r7, #2
 800eed2:	9305      	str	r3, [sp, #20]
 800eed4:	4d2e      	ldr	r5, [pc, #184]	; (800ef90 <_svfiprintf_r+0x1e0>)
 800eed6:	7839      	ldrb	r1, [r7, #0]
 800eed8:	2203      	movs	r2, #3
 800eeda:	4628      	mov	r0, r5
 800eedc:	f7f1 f9b8 	bl	8000250 <memchr>
 800eee0:	b138      	cbz	r0, 800eef2 <_svfiprintf_r+0x142>
 800eee2:	2340      	movs	r3, #64	; 0x40
 800eee4:	1b40      	subs	r0, r0, r5
 800eee6:	fa03 f000 	lsl.w	r0, r3, r0
 800eeea:	9b04      	ldr	r3, [sp, #16]
 800eeec:	4303      	orrs	r3, r0
 800eeee:	3701      	adds	r7, #1
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	7839      	ldrb	r1, [r7, #0]
 800eef4:	4827      	ldr	r0, [pc, #156]	; (800ef94 <_svfiprintf_r+0x1e4>)
 800eef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eefa:	2206      	movs	r2, #6
 800eefc:	1c7e      	adds	r6, r7, #1
 800eefe:	f7f1 f9a7 	bl	8000250 <memchr>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d038      	beq.n	800ef78 <_svfiprintf_r+0x1c8>
 800ef06:	4b24      	ldr	r3, [pc, #144]	; (800ef98 <_svfiprintf_r+0x1e8>)
 800ef08:	bb13      	cbnz	r3, 800ef50 <_svfiprintf_r+0x1a0>
 800ef0a:	9b03      	ldr	r3, [sp, #12]
 800ef0c:	3307      	adds	r3, #7
 800ef0e:	f023 0307 	bic.w	r3, r3, #7
 800ef12:	3308      	adds	r3, #8
 800ef14:	9303      	str	r3, [sp, #12]
 800ef16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef18:	444b      	add	r3, r9
 800ef1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef1c:	e76d      	b.n	800edfa <_svfiprintf_r+0x4a>
 800ef1e:	fb05 3202 	mla	r2, r5, r2, r3
 800ef22:	2001      	movs	r0, #1
 800ef24:	460f      	mov	r7, r1
 800ef26:	e7a6      	b.n	800ee76 <_svfiprintf_r+0xc6>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	3701      	adds	r7, #1
 800ef2c:	9305      	str	r3, [sp, #20]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	250a      	movs	r5, #10
 800ef32:	4638      	mov	r0, r7
 800ef34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef38:	3a30      	subs	r2, #48	; 0x30
 800ef3a:	2a09      	cmp	r2, #9
 800ef3c:	d903      	bls.n	800ef46 <_svfiprintf_r+0x196>
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d0c8      	beq.n	800eed4 <_svfiprintf_r+0x124>
 800ef42:	9105      	str	r1, [sp, #20]
 800ef44:	e7c6      	b.n	800eed4 <_svfiprintf_r+0x124>
 800ef46:	fb05 2101 	mla	r1, r5, r1, r2
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	e7f0      	b.n	800ef32 <_svfiprintf_r+0x182>
 800ef50:	ab03      	add	r3, sp, #12
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	4622      	mov	r2, r4
 800ef56:	4b11      	ldr	r3, [pc, #68]	; (800ef9c <_svfiprintf_r+0x1ec>)
 800ef58:	a904      	add	r1, sp, #16
 800ef5a:	4640      	mov	r0, r8
 800ef5c:	f7fc fcb8 	bl	800b8d0 <_printf_float>
 800ef60:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef64:	4681      	mov	r9, r0
 800ef66:	d1d6      	bne.n	800ef16 <_svfiprintf_r+0x166>
 800ef68:	89a3      	ldrh	r3, [r4, #12]
 800ef6a:	065b      	lsls	r3, r3, #25
 800ef6c:	f53f af35 	bmi.w	800edda <_svfiprintf_r+0x2a>
 800ef70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef72:	b01d      	add	sp, #116	; 0x74
 800ef74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef78:	ab03      	add	r3, sp, #12
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	4622      	mov	r2, r4
 800ef7e:	4b07      	ldr	r3, [pc, #28]	; (800ef9c <_svfiprintf_r+0x1ec>)
 800ef80:	a904      	add	r1, sp, #16
 800ef82:	4640      	mov	r0, r8
 800ef84:	f7fc ff46 	bl	800be14 <_printf_i>
 800ef88:	e7ea      	b.n	800ef60 <_svfiprintf_r+0x1b0>
 800ef8a:	bf00      	nop
 800ef8c:	0800f29c 	.word	0x0800f29c
 800ef90:	0800f2a2 	.word	0x0800f2a2
 800ef94:	0800f2a6 	.word	0x0800f2a6
 800ef98:	0800b8d1 	.word	0x0800b8d1
 800ef9c:	0800ecfd 	.word	0x0800ecfd

0800efa0 <_sbrk_r>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	4c06      	ldr	r4, [pc, #24]	; (800efbc <_sbrk_r+0x1c>)
 800efa4:	2300      	movs	r3, #0
 800efa6:	4605      	mov	r5, r0
 800efa8:	4608      	mov	r0, r1
 800efaa:	6023      	str	r3, [r4, #0]
 800efac:	f7f4 f8d6 	bl	800315c <_sbrk>
 800efb0:	1c43      	adds	r3, r0, #1
 800efb2:	d102      	bne.n	800efba <_sbrk_r+0x1a>
 800efb4:	6823      	ldr	r3, [r4, #0]
 800efb6:	b103      	cbz	r3, 800efba <_sbrk_r+0x1a>
 800efb8:	602b      	str	r3, [r5, #0]
 800efba:	bd38      	pop	{r3, r4, r5, pc}
 800efbc:	20004318 	.word	0x20004318

0800efc0 <strncmp>:
 800efc0:	b510      	push	{r4, lr}
 800efc2:	b16a      	cbz	r2, 800efe0 <strncmp+0x20>
 800efc4:	3901      	subs	r1, #1
 800efc6:	1884      	adds	r4, r0, r2
 800efc8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800efcc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d103      	bne.n	800efdc <strncmp+0x1c>
 800efd4:	42a0      	cmp	r0, r4
 800efd6:	d001      	beq.n	800efdc <strncmp+0x1c>
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d1f5      	bne.n	800efc8 <strncmp+0x8>
 800efdc:	1a98      	subs	r0, r3, r2
 800efde:	bd10      	pop	{r4, pc}
 800efe0:	4610      	mov	r0, r2
 800efe2:	e7fc      	b.n	800efde <strncmp+0x1e>

0800efe4 <__ascii_wctomb>:
 800efe4:	b149      	cbz	r1, 800effa <__ascii_wctomb+0x16>
 800efe6:	2aff      	cmp	r2, #255	; 0xff
 800efe8:	bf85      	ittet	hi
 800efea:	238a      	movhi	r3, #138	; 0x8a
 800efec:	6003      	strhi	r3, [r0, #0]
 800efee:	700a      	strbls	r2, [r1, #0]
 800eff0:	f04f 30ff 	movhi.w	r0, #4294967295
 800eff4:	bf98      	it	ls
 800eff6:	2001      	movls	r0, #1
 800eff8:	4770      	bx	lr
 800effa:	4608      	mov	r0, r1
 800effc:	4770      	bx	lr

0800effe <memmove>:
 800effe:	4288      	cmp	r0, r1
 800f000:	b510      	push	{r4, lr}
 800f002:	eb01 0302 	add.w	r3, r1, r2
 800f006:	d807      	bhi.n	800f018 <memmove+0x1a>
 800f008:	1e42      	subs	r2, r0, #1
 800f00a:	4299      	cmp	r1, r3
 800f00c:	d00a      	beq.n	800f024 <memmove+0x26>
 800f00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f012:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f016:	e7f8      	b.n	800f00a <memmove+0xc>
 800f018:	4283      	cmp	r3, r0
 800f01a:	d9f5      	bls.n	800f008 <memmove+0xa>
 800f01c:	1881      	adds	r1, r0, r2
 800f01e:	1ad2      	subs	r2, r2, r3
 800f020:	42d3      	cmn	r3, r2
 800f022:	d100      	bne.n	800f026 <memmove+0x28>
 800f024:	bd10      	pop	{r4, pc}
 800f026:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f02a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f02e:	e7f7      	b.n	800f020 <memmove+0x22>

0800f030 <__malloc_lock>:
 800f030:	4770      	bx	lr

0800f032 <__malloc_unlock>:
 800f032:	4770      	bx	lr

0800f034 <_realloc_r>:
 800f034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f036:	4607      	mov	r7, r0
 800f038:	4614      	mov	r4, r2
 800f03a:	460e      	mov	r6, r1
 800f03c:	b921      	cbnz	r1, 800f048 <_realloc_r+0x14>
 800f03e:	4611      	mov	r1, r2
 800f040:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f044:	f7ff be00 	b.w	800ec48 <_malloc_r>
 800f048:	b922      	cbnz	r2, 800f054 <_realloc_r+0x20>
 800f04a:	f7ff fdaf 	bl	800ebac <_free_r>
 800f04e:	4625      	mov	r5, r4
 800f050:	4628      	mov	r0, r5
 800f052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f054:	f000 f814 	bl	800f080 <_malloc_usable_size_r>
 800f058:	42a0      	cmp	r0, r4
 800f05a:	d20f      	bcs.n	800f07c <_realloc_r+0x48>
 800f05c:	4621      	mov	r1, r4
 800f05e:	4638      	mov	r0, r7
 800f060:	f7ff fdf2 	bl	800ec48 <_malloc_r>
 800f064:	4605      	mov	r5, r0
 800f066:	2800      	cmp	r0, #0
 800f068:	d0f2      	beq.n	800f050 <_realloc_r+0x1c>
 800f06a:	4631      	mov	r1, r6
 800f06c:	4622      	mov	r2, r4
 800f06e:	f7fc fb97 	bl	800b7a0 <memcpy>
 800f072:	4631      	mov	r1, r6
 800f074:	4638      	mov	r0, r7
 800f076:	f7ff fd99 	bl	800ebac <_free_r>
 800f07a:	e7e9      	b.n	800f050 <_realloc_r+0x1c>
 800f07c:	4635      	mov	r5, r6
 800f07e:	e7e7      	b.n	800f050 <_realloc_r+0x1c>

0800f080 <_malloc_usable_size_r>:
 800f080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f084:	1f18      	subs	r0, r3, #4
 800f086:	2b00      	cmp	r3, #0
 800f088:	bfbc      	itt	lt
 800f08a:	580b      	ldrlt	r3, [r1, r0]
 800f08c:	18c0      	addlt	r0, r0, r3
 800f08e:	4770      	bx	lr

0800f090 <_init>:
 800f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f092:	bf00      	nop
 800f094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f096:	bc08      	pop	{r3}
 800f098:	469e      	mov	lr, r3
 800f09a:	4770      	bx	lr

0800f09c <_fini>:
 800f09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f09e:	bf00      	nop
 800f0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0a2:	bc08      	pop	{r3}
 800f0a4:	469e      	mov	lr, r3
 800f0a6:	4770      	bx	lr
