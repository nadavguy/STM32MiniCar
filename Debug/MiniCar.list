
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdbc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800cfc0  0800cfc0  0001cfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d338  0800d338  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d338  0800d338  0001d338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d340  0800d340  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d340  0800d340  0001d340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d344  0800d344  0001d344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dd8  200001f8  0800d53c  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002fd0  0800d53c  00022fd0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d321  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043ce  00000000  00000000  0004d543  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002318  00000000  00000000  00051918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002100  00000000  00000000  00053c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006356  00000000  00000000  00055d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a5d2  00000000  00000000  0005c086  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011bb2f  00000000  00000000  00076658  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00192187  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3fc  00000000  00000000  00192204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cfa4 	.word	0x0800cfa4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800cfa4 	.word	0x0800cfa4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <CheckButton>:
uint32_t ButtonPressCycleStart = 0;
uint32_t ButtonPressDurationmSec[5] = {0};
uint8_t ButtonCycle = 0;

void CheckButton(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af02      	add	r7, sp, #8
	PA0PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80005f6:	2101      	movs	r1, #1
 80005f8:	487d      	ldr	r0, [pc, #500]	; (80007f0 <CheckButton+0x200>)
 80005fa:	f003 fcd1 	bl	8003fa0 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b7c      	ldr	r3, [pc, #496]	; (80007f4 <CheckButton+0x204>)
 8000604:	701a      	strb	r2, [r3, #0]
	if (PA0PinState == GPIO_PIN_RESET)
 8000606:	4b7b      	ldr	r3, [pc, #492]	; (80007f4 <CheckButton+0x204>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d108      	bne.n	8000620 <CheckButton+0x30>
	{
		SetRGB(0, 250, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	21fa      	movs	r1, #250	; 0xfa
 8000612:	2000      	movs	r0, #0
 8000614:	f000 f91e 	bl	8000854 <SetRGB>
		ButtonIsLow = true;
 8000618:	4b77      	ldr	r3, [pc, #476]	; (80007f8 <CheckButton+0x208>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		if (ButtonCycle == 0)
		{
			ButtonPressCycleStart = HAL_GetTick();
		}
	}
}
 800061e:	e0df      	b.n	80007e0 <CheckButton+0x1f0>
		if (ButtonIsLow)
 8000620:	4b75      	ldr	r3, [pc, #468]	; (80007f8 <CheckButton+0x208>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d044      	beq.n	80006b2 <CheckButton+0xc2>
			if (ButtonCycle < 5)
 8000628:	4b74      	ldr	r3, [pc, #464]	; (80007fc <CheckButton+0x20c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d818      	bhi.n	8000662 <CheckButton+0x72>
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 8000630:	f002 f976 	bl	8002920 <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
						- ButtonPressStart) / 100) * 100;
 8000636:	4b72      	ldr	r3, [pc, #456]	; (8000800 <CheckButton+0x210>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	4a71      	ldr	r2, [pc, #452]	; (8000804 <CheckButton+0x214>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	095b      	lsrs	r3, r3, #5
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 8000644:	4a6d      	ldr	r2, [pc, #436]	; (80007fc <CheckButton+0x20c>)
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	4611      	mov	r1, r2
						- ButtonPressStart) / 100) * 100;
 800064a:	2264      	movs	r2, #100	; 0x64
 800064c:	fb02 f303 	mul.w	r3, r2, r3
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 8000650:	4a6d      	ldr	r2, [pc, #436]	; (8000808 <CheckButton+0x218>)
 8000652:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				ButtonCycle++;
 8000656:	4b69      	ldr	r3, [pc, #420]	; (80007fc <CheckButton+0x20c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b67      	ldr	r3, [pc, #412]	; (80007fc <CheckButton+0x20c>)
 8000660:	701a      	strb	r2, [r3, #0]
			if (ButtonCycle >= 5)
 8000662:	4b66      	ldr	r3, [pc, #408]	; (80007fc <CheckButton+0x20c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d907      	bls.n	800067a <CheckButton+0x8a>
				ButtonCycle = 0;
 800066a:	4b64      	ldr	r3, [pc, #400]	; (80007fc <CheckButton+0x20c>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
				memset(ButtonPressDurationmSec, 0, 20);
 8000670:	2214      	movs	r2, #20
 8000672:	2100      	movs	r1, #0
 8000674:	4864      	ldr	r0, [pc, #400]	; (8000808 <CheckButton+0x218>)
 8000676:	f009 f81d 	bl	80096b4 <memset>
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 800067a:	f001 fcc1 	bl	8002000 <CurrentTime>
 800067e:	ec55 4b10 	vmov	r4, r5, d0
					CurrentTime(), (HAL_GetTick() - ButtonPressStart) / 1000.0);
 8000682:	f002 f94d 	bl	8002920 <HAL_GetTick>
 8000686:	4602      	mov	r2, r0
 8000688:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <CheckButton+0x210>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	1ad3      	subs	r3, r2, r3
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000696:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80007e8 <CheckButton+0x1f8>
 800069a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800069e:	ed8d 7b00 	vstr	d7, [sp]
 80006a2:	4622      	mov	r2, r4
 80006a4:	462b      	mov	r3, r5
 80006a6:	4959      	ldr	r1, [pc, #356]	; (800080c <CheckButton+0x21c>)
 80006a8:	4859      	ldr	r0, [pc, #356]	; (8000810 <CheckButton+0x220>)
 80006aa:	f009 fe23 	bl	800a2f4 <siprintf>
			SendToScreen();
 80006ae:	f001 f859 	bl	8001764 <SendToScreen>
		if (HAL_GetTick() - ButtonPressCycleStart > 3000)
 80006b2:	f002 f935 	bl	8002920 <HAL_GetTick>
 80006b6:	4602      	mov	r2, r0
 80006b8:	4b56      	ldr	r3, [pc, #344]	; (8000814 <CheckButton+0x224>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d973      	bls.n	80007ae <CheckButton+0x1be>
			if (ButtonPressDurationmSec[0] >= 2000)
 80006c6:	4b50      	ldr	r3, [pc, #320]	; (8000808 <CheckButton+0x218>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006ce:	d30c      	bcc.n	80006ea <CheckButton+0xfa>
				sprintf(USBTXArray, "%6.3f, Do this\r\n", CurrentTime());
 80006d0:	f001 fc96 	bl	8002000 <CurrentTime>
 80006d4:	ec54 3b10 	vmov	r3, r4, d0
 80006d8:	461a      	mov	r2, r3
 80006da:	4623      	mov	r3, r4
 80006dc:	494e      	ldr	r1, [pc, #312]	; (8000818 <CheckButton+0x228>)
 80006de:	484c      	ldr	r0, [pc, #304]	; (8000810 <CheckButton+0x220>)
 80006e0:	f009 fe08 	bl	800a2f4 <siprintf>
				SendToScreen();
 80006e4:	f001 f83e 	bl	8001764 <SendToScreen>
 80006e8:	e059      	b.n	800079e <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 80006ea:	4b47      	ldr	r3, [pc, #284]	; (8000808 <CheckButton+0x218>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006f2:	d311      	bcc.n	8000718 <CheckButton+0x128>
					&& (ButtonPressDurationmSec[1] >= 1000))
 80006f4:	4b44      	ldr	r3, [pc, #272]	; (8000808 <CheckButton+0x218>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006fc:	d30c      	bcc.n	8000718 <CheckButton+0x128>
				sprintf(USBTXArray, "%6.3f, Do that\r\n", CurrentTime());
 80006fe:	f001 fc7f 	bl	8002000 <CurrentTime>
 8000702:	ec54 3b10 	vmov	r3, r4, d0
 8000706:	461a      	mov	r2, r3
 8000708:	4623      	mov	r3, r4
 800070a:	4944      	ldr	r1, [pc, #272]	; (800081c <CheckButton+0x22c>)
 800070c:	4840      	ldr	r0, [pc, #256]	; (8000810 <CheckButton+0x220>)
 800070e:	f009 fdf1 	bl	800a2f4 <siprintf>
				SendToScreen();
 8000712:	f001 f827 	bl	8001764 <SendToScreen>
			{
 8000716:	e042      	b.n	800079e <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 8000718:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <CheckButton+0x218>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000720:	d310      	bcc.n	8000744 <CheckButton+0x154>
					&& (ButtonPressDurationmSec[1] == 0))
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <CheckButton+0x218>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10c      	bne.n	8000744 <CheckButton+0x154>
				sprintf(USBTXArray, "%6.3f, Do that Single Press\r\n",
 800072a:	f001 fc69 	bl	8002000 <CurrentTime>
 800072e:	ec54 3b10 	vmov	r3, r4, d0
 8000732:	461a      	mov	r2, r3
 8000734:	4623      	mov	r3, r4
 8000736:	493a      	ldr	r1, [pc, #232]	; (8000820 <CheckButton+0x230>)
 8000738:	4835      	ldr	r0, [pc, #212]	; (8000810 <CheckButton+0x220>)
 800073a:	f009 fddb 	bl	800a2f4 <siprintf>
				SendToScreen();
 800073e:	f001 f811 	bl	8001764 <SendToScreen>
			{
 8000742:	e02c      	b.n	800079e <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 500)
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <CheckButton+0x218>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800074c:	d311      	bcc.n	8000772 <CheckButton+0x182>
					&& (ButtonPressDurationmSec[1] >= 1000))
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <CheckButton+0x218>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000756:	d30c      	bcc.n	8000772 <CheckButton+0x182>
				sprintf(USBTXArray, "%6.3f, Or maybe this\r\n", CurrentTime());
 8000758:	f001 fc52 	bl	8002000 <CurrentTime>
 800075c:	ec54 3b10 	vmov	r3, r4, d0
 8000760:	461a      	mov	r2, r3
 8000762:	4623      	mov	r3, r4
 8000764:	492f      	ldr	r1, [pc, #188]	; (8000824 <CheckButton+0x234>)
 8000766:	482a      	ldr	r0, [pc, #168]	; (8000810 <CheckButton+0x220>)
 8000768:	f009 fdc4 	bl	800a2f4 <siprintf>
				SendToScreen();
 800076c:	f000 fffa 	bl	8001764 <SendToScreen>
			{
 8000770:	e015      	b.n	800079e <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 500)
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <CheckButton+0x218>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800077a:	d310      	bcc.n	800079e <CheckButton+0x1ae>
					&& (ButtonPressDurationmSec[1] >= 500))
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <CheckButton+0x218>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000784:	d30b      	bcc.n	800079e <CheckButton+0x1ae>
				sprintf(USBTXArray, "%6.3f, Or maybe that\r\n", CurrentTime());
 8000786:	f001 fc3b 	bl	8002000 <CurrentTime>
 800078a:	ec54 3b10 	vmov	r3, r4, d0
 800078e:	461a      	mov	r2, r3
 8000790:	4623      	mov	r3, r4
 8000792:	4925      	ldr	r1, [pc, #148]	; (8000828 <CheckButton+0x238>)
 8000794:	481e      	ldr	r0, [pc, #120]	; (8000810 <CheckButton+0x220>)
 8000796:	f009 fdad 	bl	800a2f4 <siprintf>
				SendToScreen();
 800079a:	f000 ffe3 	bl	8001764 <SendToScreen>
			ButtonCycle = 0;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <CheckButton+0x20c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
			memset(ButtonPressDurationmSec, 0, 20);
 80007a4:	2214      	movs	r2, #20
 80007a6:	2100      	movs	r1, #0
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <CheckButton+0x218>)
 80007aa:	f008 ff83 	bl	80096b4 <memset>
		SetRGB(250, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	20fa      	movs	r0, #250	; 0xfa
 80007b4:	f000 f84e 	bl	8000854 <SetRGB>
		ButtonIsHigh = true;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <CheckButton+0x23c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
		ButtonIsLow = false;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <CheckButton+0x208>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
		ButtonPressStart = HAL_GetTick();
 80007c4:	f002 f8ac 	bl	8002920 <HAL_GetTick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <CheckButton+0x210>)
 80007cc:	601a      	str	r2, [r3, #0]
		if (ButtonCycle == 0)
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <CheckButton+0x20c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d104      	bne.n	80007e0 <CheckButton+0x1f0>
			ButtonPressCycleStart = HAL_GetTick();
 80007d6:	f002 f8a3 	bl	8002920 <HAL_GetTick>
 80007da:	4602      	mov	r2, r0
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <CheckButton+0x224>)
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bdb0      	pop	{r4, r5, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	00000000 	.word	0x00000000
 80007ec:	408f4000 	.word	0x408f4000
 80007f0:	40020000 	.word	0x40020000
 80007f4:	20000ab8 	.word	0x20000ab8
 80007f8:	20000215 	.word	0x20000215
 80007fc:	20000234 	.word	0x20000234
 8000800:	20000218 	.word	0x20000218
 8000804:	51eb851f 	.word	0x51eb851f
 8000808:	20000220 	.word	0x20000220
 800080c:	0800cfc0 	.word	0x0800cfc0
 8000810:	2000067c 	.word	0x2000067c
 8000814:	2000021c 	.word	0x2000021c
 8000818:	0800cfe8 	.word	0x0800cfe8
 800081c:	0800cffc 	.word	0x0800cffc
 8000820:	0800d010 	.word	0x0800d010
 8000824:	0800d030 	.word	0x0800d030
 8000828:	0800d048 	.word	0x0800d048
 800082c:	20000214 	.word	0x20000214

08000830 <led_init>:
 */

#include "main.h"

void led_init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 8000834:	2104      	movs	r1, #4
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <led_init+0x20>)
 8000838:	f006 fce2 	bl	8007200 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 800083c:	2100      	movs	r1, #0
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <led_init+0x20>)
 8000840:	f006 fcde 	bl	8007200 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 8000844:	210c      	movs	r1, #12
 8000846:	4802      	ldr	r0, [pc, #8]	; (8000850 <led_init+0x20>)
 8000848:	f006 fcda 	bl	8007200 <HAL_TIM_PWM_Start>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000b38 	.word	0x20000b38

08000854 <SetRGB>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //Blue LED
}

// Input: 0 to 250
void SetRGB(int Red, int Green, int Blue)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
	//  SetRGB(250, 0, 0); // Red
	//  SetRGB(0, 250, 0); // Green
	//  SetRGB(0, 0, 250); // Blue
	//  SetRGB(250, 250, 0);// Yellow
	TIM4->CCR2 = Red * 8000 / 250;
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <SetRGB+0x68>)
 800086c:	fb82 1203 	smull	r1, r2, r2, r3
 8000870:	1112      	asrs	r2, r2, #4
 8000872:	17db      	asrs	r3, r3, #31
 8000874:	1ad2      	subs	r2, r2, r3
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <SetRGB+0x6c>)
 8000878:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = Green * 8000 / 250;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000880:	fb02 f303 	mul.w	r3, r2, r3
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <SetRGB+0x68>)
 8000886:	fb82 1203 	smull	r1, r2, r2, r3
 800088a:	1112      	asrs	r2, r2, #4
 800088c:	17db      	asrs	r3, r3, #31
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <SetRGB+0x6c>)
 8000892:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR4 = Blue * 8000 / 250;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800089a:	fb02 f303 	mul.w	r3, r2, r3
 800089e:	4a07      	ldr	r2, [pc, #28]	; (80008bc <SetRGB+0x68>)
 80008a0:	fb82 1203 	smull	r1, r2, r2, r3
 80008a4:	1112      	asrs	r2, r2, #4
 80008a6:	17db      	asrs	r3, r3, #31
 80008a8:	1ad2      	subs	r2, r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SetRGB+0x6c>)
 80008ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	10624dd3 	.word	0x10624dd3
 80008c0:	40000800 	.word	0x40000800

080008c4 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80008cc:	23ff      	movs	r3, #255	; 0xff
 80008ce:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80008d4:	2300      	movs	r3, #0
 80008d6:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80008d8:	2300      	movs	r3, #0
 80008da:	723b      	strb	r3, [r7, #8]
 80008dc:	2300      	movs	r3, #0
 80008de:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80008e0:	4a58      	ldr	r2, [pc, #352]	; (8000a44 <bno055_init+0x180>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80008e6:	4b57      	ldr	r3, [pc, #348]	; (8000a44 <bno055_init+0x180>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	68dc      	ldr	r4, [r3, #12]
 80008ec:	4b55      	ldr	r3, [pc, #340]	; (8000a44 <bno055_init+0x180>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	7a58      	ldrb	r0, [r3, #9]
 80008f2:	f107 020d 	add.w	r2, r7, #13
 80008f6:	2301      	movs	r3, #1
 80008f8:	2107      	movs	r1, #7
 80008fa:	47a0      	blx	r4
 80008fc:	4603      	mov	r3, r0
 80008fe:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000900:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <bno055_init+0x180>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	691c      	ldr	r4, [r3, #16]
 8000906:	4b4f      	ldr	r3, [pc, #316]	; (8000a44 <bno055_init+0x180>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	7a58      	ldrb	r0, [r3, #9]
 800090c:	f107 020e 	add.w	r2, r7, #14
 8000910:	2301      	movs	r3, #1
 8000912:	2100      	movs	r1, #0
 8000914:	47a0      	blx	r4
 8000916:	4603      	mov	r3, r0
 8000918:	b2da      	uxtb	r2, r3
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	4413      	add	r3, r2
 800091e:	b2db      	uxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000922:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <bno055_init+0x180>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	7bba      	ldrb	r2, [r7, #14]
 8000928:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <bno055_init+0x180>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	691c      	ldr	r4, [r3, #16]
 8000930:	4b44      	ldr	r3, [pc, #272]	; (8000a44 <bno055_init+0x180>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	7a58      	ldrb	r0, [r3, #9]
 8000936:	f107 020e 	add.w	r2, r7, #14
 800093a:	2301      	movs	r3, #1
 800093c:	2101      	movs	r1, #1
 800093e:	47a0      	blx	r4
 8000940:	4603      	mov	r3, r0
 8000942:	b2da      	uxtb	r2, r3
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	4413      	add	r3, r2
 8000948:	b2db      	uxtb	r3, r3
 800094a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <bno055_init+0x180>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	7bba      	ldrb	r2, [r7, #14]
 8000952:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000954:	4b3b      	ldr	r3, [pc, #236]	; (8000a44 <bno055_init+0x180>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	691c      	ldr	r4, [r3, #16]
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <bno055_init+0x180>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	7a58      	ldrb	r0, [r3, #9]
 8000960:	f107 020e 	add.w	r2, r7, #14
 8000964:	2301      	movs	r3, #1
 8000966:	2102      	movs	r1, #2
 8000968:	47a0      	blx	r4
 800096a:	4603      	mov	r3, r0
 800096c:	b2da      	uxtb	r2, r3
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4413      	add	r3, r2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000976:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <bno055_init+0x180>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	7bba      	ldrb	r2, [r7, #14]
 800097c:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <bno055_init+0x180>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	691c      	ldr	r4, [r3, #16]
 8000984:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <bno055_init+0x180>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	7a58      	ldrb	r0, [r3, #9]
 800098a:	f107 020e 	add.w	r2, r7, #14
 800098e:	2301      	movs	r3, #1
 8000990:	2103      	movs	r1, #3
 8000992:	47a0      	blx	r4
 8000994:	4603      	mov	r3, r0
 8000996:	b2da      	uxtb	r2, r3
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	4413      	add	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <bno055_init+0x180>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	7bba      	ldrb	r2, [r7, #14]
 80009a6:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009a8:	4b26      	ldr	r3, [pc, #152]	; (8000a44 <bno055_init+0x180>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	691c      	ldr	r4, [r3, #16]
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <bno055_init+0x180>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	7a58      	ldrb	r0, [r3, #9]
 80009b4:	f107 020e 	add.w	r2, r7, #14
 80009b8:	2301      	movs	r3, #1
 80009ba:	2106      	movs	r1, #6
 80009bc:	47a0      	blx	r4
 80009be:	4603      	mov	r3, r0
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	4413      	add	r3, r2
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <bno055_init+0x180>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	7bba      	ldrb	r2, [r7, #14]
 80009d0:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <bno055_init+0x180>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	691c      	ldr	r4, [r3, #16]
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <bno055_init+0x180>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	7a58      	ldrb	r0, [r3, #9]
 80009de:	f107 0208 	add.w	r2, r7, #8
 80009e2:	2302      	movs	r3, #2
 80009e4:	2104      	movs	r1, #4
 80009e6:	47a0      	blx	r4
 80009e8:	4603      	mov	r3, r0
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	4413      	add	r3, r2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80009f8:	7a7b      	ldrb	r3, [r7, #9]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	021b      	lsls	r3, r3, #8
 80009fe:	b299      	uxth	r1, r3
 8000a00:	7a3b      	ldrb	r3, [r7, #8]
 8000a02:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <bno055_init+0x180>)
 8000a06:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000a0c:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <bno055_init+0x180>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	691c      	ldr	r4, [r3, #16]
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <bno055_init+0x180>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	7a58      	ldrb	r0, [r3, #9]
 8000a1a:	f107 020e 	add.w	r2, r7, #14
 8000a1e:	2301      	movs	r3, #1
 8000a20:	2107      	movs	r1, #7
 8000a22:	47a0      	blx	r4
 8000a24:	4603      	mov	r3, r0
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <bno055_init+0x180>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	7bba      	ldrb	r2, [r7, #14]
 8000a36:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3714      	adds	r7, #20
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	20000238 	.word	0x20000238

08000a48 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a58:	23ff      	movs	r3, #255	; 0xff
 8000a5a:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <bno055_write_register+0x48>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000a64:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000a68:	e00d      	b.n	8000a86 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <bno055_write_register+0x48>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	68dc      	ldr	r4, [r3, #12]
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <bno055_write_register+0x48>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	7a58      	ldrb	r0, [r3, #9]
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	79f9      	ldrb	r1, [r7, #7]
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	47a0      	blx	r4
 8000a7e:	4603      	mov	r3, r0
 8000a80:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd90      	pop	{r4, r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000238 	.word	0x20000238

08000a94 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000a9e:	23ff      	movs	r3, #255	; 0xff
 8000aa0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <bno055_write_page_id+0x8c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d102      	bne.n	8000ab4 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000aae:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ab2:	e030      	b.n	8000b16 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <bno055_write_page_id+0x8c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	691c      	ldr	r4, [r3, #16]
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <bno055_write_page_id+0x8c>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	7a58      	ldrb	r0, [r3, #9]
 8000ac0:	f107 020e 	add.w	r2, r7, #14
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	2107      	movs	r1, #7
 8000ac8:	47a0      	blx	r4
 8000aca:	4603      	mov	r3, r0
 8000acc:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d11b      	bne.n	8000b0e <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <bno055_write_page_id+0x8c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68dc      	ldr	r4, [r3, #12]
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <bno055_write_page_id+0x8c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	7a58      	ldrb	r0, [r3, #9]
 8000ae6:	f107 020e 	add.w	r2, r7, #14
 8000aea:	2301      	movs	r3, #1
 8000aec:	2107      	movs	r1, #7
 8000aee:	47a0      	blx	r4
 8000af0:	4603      	mov	r3, r0
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	4413      	add	r3, r2
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d106      	bne.n	8000b12 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <bno055_write_page_id+0x8c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	711a      	strb	r2, [r3, #4]
 8000b0c:	e001      	b.n	8000b12 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000b0e:	23ff      	movs	r3, #255	; 0xff
 8000b10:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd90      	pop	{r4, r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000238 	.word	0x20000238

08000b24 <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b2c:	23ff      	movs	r3, #255	; 0xff
 8000b2e:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000b3a:	23ff      	movs	r3, #255	; 0xff
 8000b3c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <bno055_read_euler_hrp+0xd0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d102      	bne.n	8000b4c <bno055_read_euler_hrp+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000b46:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000b4a:	e04e      	b.n	8000bea <bno055_read_euler_hrp+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <bno055_read_euler_hrp+0xd0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d004      	beq.n	8000b60 <bno055_read_euler_hrp+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ff9c 	bl	8000a94 <bno055_write_page_id>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000b60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d004      	beq.n	8000b72 <bno055_read_euler_hrp+0x4e>
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <bno055_read_euler_hrp+0xd0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	791b      	ldrb	r3, [r3, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d137      	bne.n	8000be2 <bno055_read_euler_hrp+0xbe>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <bno055_read_euler_hrp+0xd0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	691c      	ldr	r4, [r3, #16]
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <bno055_read_euler_hrp+0xd0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	7a58      	ldrb	r0, [r3, #9]
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	2306      	movs	r3, #6
 8000b84:	211a      	movs	r1, #26
 8000b86:	47a0      	blx	r4
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 8000b8c:	7a3b      	ldrb	r3, [r7, #8]
 8000b8e:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 8000b90:	7a7b      	ldrb	r3, [r7, #9]
 8000b92:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000b94:	7a7b      	ldrb	r3, [r7, #9]
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 8000b9c:	7a3b      	ldrb	r3, [r7, #8]
 8000b9e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21a      	sxth	r2, r3
            euler->h =
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 8000ba8:	7abb      	ldrb	r3, [r7, #10]
 8000baa:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000bb0:	7afb      	ldrb	r3, [r7, #11]
 8000bb2:	b25b      	sxtb	r3, r3
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 8000bb8:	7abb      	ldrb	r3, [r7, #10]
 8000bba:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b21a      	sxth	r2, r3
            euler->r =
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 8000bc4:	7b3b      	ldrb	r3, [r7, #12]
 8000bc6:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000bcc:	7b7b      	ldrb	r3, [r7, #13]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	021b      	lsls	r3, r3, #8
 8000bd2:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 8000bd4:	7b3b      	ldrb	r3, [r7, #12]
 8000bd6:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21a      	sxth	r2, r3
            euler->p =
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	809a      	strh	r2, [r3, #4]
 8000be0:	e001      	b.n	8000be6 <bno055_read_euler_hrp+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000be2:	23ff      	movs	r3, #255	; 0xff
 8000be4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000238 	.word	0x20000238

08000bf8 <bno055_convert_double_euler_hpr_deg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_euler_hpr_deg(struct bno055_euler_double_t *euler_hpr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000c00:	23ff      	movs	r3, #255	; 0xff
 8000c02:	75fb      	strb	r3, [r7, #23]
    struct bno055_euler_t reg_euler = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000c04:	2300      	movs	r3, #0
 8000c06:	823b      	strh	r3, [r7, #16]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	827b      	strh	r3, [r7, #18]
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	82bb      	strh	r3, [r7, #20]
    u8 euler_unit_u8 = BNO055_INIT_VALUE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

    /* Read the current Euler unit and set the
     * unit as degree if the unit is in radians */
    com_rslt = bno055_get_euler_unit(&euler_unit_u8);
 8000c14:	f107 030f 	add.w	r3, r7, #15
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f855 	bl	8000cc8 <bno055_get_euler_unit>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	75fb      	strb	r3, [r7, #23]
    if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d008      	beq.n	8000c3a <bno055_convert_double_euler_hpr_deg+0x42>
    {
        com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 f891 	bl	8000d50 <bno055_set_euler_unit>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	7dfb      	ldrb	r3, [r7, #23]
 8000c34:	4413      	add	r3, r2
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 8000c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d139      	bne.n	8000cb6 <bno055_convert_double_euler_hpr_deg+0xbe>
    {
        /* Read Euler raw h data*/
        com_rslt += bno055_read_euler_hrp(&reg_euler);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff6c 	bl	8000b24 <bno055_read_euler_hrp>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	4413      	add	r3, r2
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8000c58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d127      	bne.n	8000cb0 <bno055_convert_double_euler_hpr_deg+0xb8>
        {
            /* Convert raw Euler hrp to degree*/
            euler_hpr->h = (double)(reg_euler.h / BNO055_EULER_DIV_DEG);
 8000c60:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c64:	ee07 3a90 	vmov	s15, r3
 8000c68:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c6c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000c70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	ed83 7b00 	vstr	d7, [r3]
            euler_hpr->p = (double)(reg_euler.p / BNO055_EULER_DIV_DEG);
 8000c7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c86:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000c8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	ed83 7b04 	vstr	d7, [r3, #16]
            euler_hpr->r = (double)(reg_euler.r / BNO055_EULER_DIV_DEG);
 8000c94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c98:	ee07 3a90 	vmov	s15, r3
 8000c9c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000ca0:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000ca4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	ed83 7b02 	vstr	d7, [r3, #8]
 8000cae:	e004      	b.n	8000cba <bno055_convert_double_euler_hpr_deg+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000cb0:	23ff      	movs	r3, #255	; 0xff
 8000cb2:	75fb      	strb	r3, [r7, #23]
 8000cb4:	e001      	b.n	8000cba <bno055_convert_double_euler_hpr_deg+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8000cb6:	23ff      	movs	r3, #255	; 0xff
 8000cb8:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 8000cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <bno055_get_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_euler_unit(u8 *euler_unit_u8)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000cd0:	23ff      	movs	r3, #255	; 0xff
 8000cd2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000cd8:	23ff      	movs	r3, #255	; 0xff
 8000cda:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <bno055_get_euler_unit+0x84>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <bno055_get_euler_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000ce4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ce8:	e02c      	b.n	8000d44 <bno055_get_euler_unit+0x7c>
    }
    else
    {
        /*condition check for page, Euler unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <bno055_get_euler_unit+0x84>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d004      	beq.n	8000cfe <bno055_get_euler_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fecd 	bl	8000a94 <bno055_write_page_id>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d004      	beq.n	8000d10 <bno055_get_euler_unit+0x48>
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <bno055_get_euler_unit+0x84>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	791b      	ldrb	r3, [r3, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d115      	bne.n	8000d3c <bno055_get_euler_unit+0x74>
        {
            /* Read the Euler unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <bno055_get_euler_unit+0x84>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	691c      	ldr	r4, [r3, #16]
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <bno055_get_euler_unit+0x84>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	7a58      	ldrb	r0, [r3, #9]
 8000d1c:	f107 020d 	add.w	r2, r7, #13
 8000d20:	2301      	movs	r3, #1
 8000d22:	213b      	movs	r1, #59	; 0x3b
 8000d24:	47a0      	blx	r4
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *euler_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_EULER_UNIT);
 8000d2a:	7b7b      	ldrb	r3, [r7, #13]
 8000d2c:	109b      	asrs	r3, r3, #2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e001      	b.n	8000d40 <bno055_get_euler_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d3c:	23ff      	movs	r3, #255	; 0xff
 8000d3e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	20000238 	.word	0x20000238

08000d50 <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d5a:	23ff      	movs	r3, #255	; 0xff
 8000d5c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000d62:	2300      	movs	r3, #0
 8000d64:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000d66:	23ff      	movs	r3, #255	; 0xff
 8000d68:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d6a:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <bno055_set_euler_unit+0xf4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000d72:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000d76:	e060      	b.n	8000e3a <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f863 	bl	8000e48 <bno055_get_operation_mode>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000d86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d144      	bne.n	8000e18 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000d8e:	7b3b      	ldrb	r3, [r7, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d008      	beq.n	8000da6 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f899 	bl	8000ecc <bno055_set_operation_mode>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	7bbb      	ldrb	r3, [r7, #14]
 8000da0:	4413      	add	r3, r2
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8000da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d131      	bne.n	8000e12 <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <bno055_set_euler_unit+0xf4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	691c      	ldr	r4, [r3, #16]
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <bno055_set_euler_unit+0xf4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	7a58      	ldrb	r0, [r3, #9]
 8000dba:	f107 020d 	add.w	r2, r7, #13
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	213b      	movs	r1, #59	; 0x3b
 8000dc2:	47a0      	blx	r4
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d125      	bne.n	8000e1c <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 8000dd0:	7b7b      	ldrb	r3, [r7, #13]
 8000dd2:	b25b      	sxtb	r3, r3
 8000dd4:	f023 0304 	bic.w	r3, r3, #4
 8000dd8:	b25a      	sxtb	r2, r3
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <bno055_set_euler_unit+0xf4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68dc      	ldr	r4, [r3, #12]
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <bno055_set_euler_unit+0xf4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	7a58      	ldrb	r0, [r3, #9]
 8000dfa:	f107 020d 	add.w	r2, r7, #13
 8000dfe:	2301      	movs	r3, #1
 8000e00:	213b      	movs	r1, #59	; 0x3b
 8000e02:	47a0      	blx	r4
 8000e04:	4603      	mov	r3, r0
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	e004      	b.n	8000e1c <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8000e12:	23ff      	movs	r3, #255	; 0xff
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e001      	b.n	8000e1c <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000e18:	23ff      	movs	r3, #255	; 0xff
 8000e1a:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d009      	beq.n	8000e36 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8000e22:	7b3b      	ldrb	r3, [r7, #12]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f851 	bl	8000ecc <bno055_set_operation_mode>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	4413      	add	r3, r2
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd90      	pop	{r4, r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000238 	.word	0x20000238

08000e48 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e50:	23ff      	movs	r3, #255	; 0xff
 8000e52:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8000e58:	23ff      	movs	r3, #255	; 0xff
 8000e5a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <bno055_get_operation_mode+0x80>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000e64:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000e68:	e02a      	b.n	8000ec0 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <bno055_get_operation_mode+0x80>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	791b      	ldrb	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff fe0d 	bl	8000a94 <bno055_write_page_id>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <bno055_get_operation_mode+0x48>
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <bno055_get_operation_mode+0x80>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d113      	bne.n	8000eb8 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <bno055_get_operation_mode+0x80>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	691c      	ldr	r4, [r3, #16]
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <bno055_get_operation_mode+0x80>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	7a58      	ldrb	r0, [r3, #9]
 8000e9c:	f107 020d 	add.w	r2, r7, #13
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	213d      	movs	r1, #61	; 0x3d
 8000ea4:	47a0      	blx	r4
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8000eaa:	7b7b      	ldrb	r3, [r7, #13]
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e001      	b.n	8000ebc <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000eb8:	23ff      	movs	r3, #255	; 0xff
 8000eba:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd90      	pop	{r4, r7, pc}
 8000ec8:	20000238 	.word	0x20000238

08000ecc <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000ed6:	23ff      	movs	r3, #255	; 0xff
 8000ed8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8000ee2:	23ff      	movs	r3, #255	; 0xff
 8000ee4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000ee6:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000eee:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000ef2:	e0ac      	b.n	800104e <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ffa5 	bl	8000e48 <bno055_get_operation_mode>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8000f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f040 809d 	bne.w	8001046 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8000f0c:	7b3b      	ldrb	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d137      	bne.n	8000f82 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f12:	4b51      	ldr	r3, [pc, #324]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	691c      	ldr	r4, [r3, #16]
 8000f18:	4b4f      	ldr	r3, [pc, #316]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	7a58      	ldrb	r0, [r3, #9]
 8000f1e:	f107 020d 	add.w	r2, r7, #13
 8000f22:	2301      	movs	r3, #1
 8000f24:	213d      	movs	r1, #61	; 0x3d
 8000f26:	47a0      	blx	r4
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f040 808a 	bne.w	800104a <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000f36:	7b7b      	ldrb	r3, [r7, #13]
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	f023 030f 	bic.w	r3, r3, #15
 8000f3e:	b25a      	sxtb	r2, r3
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	f003 030f 	and.w	r3, r3, #15
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000f52:	4b41      	ldr	r3, [pc, #260]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	68dc      	ldr	r4, [r3, #12]
 8000f58:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	7a58      	ldrb	r0, [r3, #9]
 8000f5e:	f107 020d 	add.w	r2, r7, #13
 8000f62:	2301      	movs	r3, #1
 8000f64:	213d      	movs	r1, #61	; 0x3d
 8000f66:	47a0      	blx	r4
 8000f68:	4603      	mov	r3, r0
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8000f74:	4b38      	ldr	r3, [pc, #224]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000f7e:	4798      	blx	r3
 8000f80:	e063      	b.n	800104a <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	691c      	ldr	r4, [r3, #16]
 8000f88:	4b33      	ldr	r3, [pc, #204]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	7a58      	ldrb	r0, [r3, #9]
 8000f8e:	f107 020d 	add.w	r2, r7, #13
 8000f92:	2301      	movs	r3, #1
 8000f94:	213d      	movs	r1, #61	; 0x3d
 8000f96:	47a0      	blx	r4
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8000f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d116      	bne.n	8000fd2 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	f023 030f 	bic.w	r3, r3, #15
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 8000fae:	f107 030d 	add.w	r3, r7, #13
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	203d      	movs	r0, #61	; 0x3d
 8000fb8:	f7ff fd46 	bl	8000a48 <bno055_write_register>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b2da      	uxtb	r2, r3
                    com_rslt +=
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	2014      	movs	r0, #20
 8000fd0:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d038      	beq.n	800104a <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	691c      	ldr	r4, [r3, #16]
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	7a58      	ldrb	r0, [r3, #9]
 8000fe4:	f107 020d 	add.w	r2, r7, #13
 8000fe8:	2301      	movs	r3, #1
 8000fea:	213d      	movs	r1, #61	; 0x3d
 8000fec:	47a0      	blx	r4
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d127      	bne.n	800104a <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8000ffa:	7b7b      	ldrb	r3, [r7, #13]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	f023 030f 	bic.w	r3, r3, #15
 8001002:	b25a      	sxtb	r2, r3
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	f003 030f 	and.w	r3, r3, #15
 800100c:	b25b      	sxtb	r3, r3
 800100e:	4313      	orrs	r3, r2
 8001010:	b25b      	sxtb	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <bno055_set_operation_mode+0x18c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68dc      	ldr	r4, [r3, #12]
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <bno055_set_operation_mode+0x18c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	7a58      	ldrb	r0, [r3, #9]
 8001022:	f107 020d 	add.w	r2, r7, #13
 8001026:	2301      	movs	r3, #1
 8001028:	213d      	movs	r1, #61	; 0x3d
 800102a:	47a0      	blx	r4
 800102c:	4603      	mov	r3, r0
 800102e:	b2da      	uxtb	r2, r3
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	4413      	add	r3, r2
 8001034:	b2db      	uxtb	r3, r3
 8001036:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <bno055_set_operation_mode+0x18c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001042:	4798      	blx	r3
 8001044:	e001      	b.n	800104a <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001046:	23ff      	movs	r3, #255	; 0xff
 8001048:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bd90      	pop	{r4, r7, pc}
 8001056:	bf00      	nop
 8001058:	20000238 	.word	0x20000238

0800105c <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 800105c:	b590      	push	{r4, r7, lr}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001066:	23ff      	movs	r3, #255	; 0xff
 8001068:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800106a:	2300      	movs	r3, #0
 800106c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800106e:	2300      	movs	r3, #0
 8001070:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <bno055_set_power_mode+0xf0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 800107e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001082:	e05f      	b.n	8001144 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fedd 	bl	8000e48 <bno055_get_operation_mode>
 800108e:	4603      	mov	r3, r0
 8001090:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d143      	bne.n	8001122 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff13 	bl	8000ecc <bno055_set_operation_mode>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	4413      	add	r3, r2
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80010b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d130      	bne.n	800111c <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <bno055_set_power_mode+0xf0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691c      	ldr	r4, [r3, #16]
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <bno055_set_power_mode+0xf0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	7a58      	ldrb	r0, [r3, #9]
 80010c6:	f107 020d 	add.w	r2, r7, #13
 80010ca:	2301      	movs	r3, #1
 80010cc:	213e      	movs	r1, #62	; 0x3e
 80010ce:	47a0      	blx	r4
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d124      	bne.n	8001126 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 80010dc:	7b7b      	ldrb	r3, [r7, #13]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	f023 0303 	bic.w	r3, r3, #3
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <bno055_set_power_mode+0xf0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	68dc      	ldr	r4, [r3, #12]
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <bno055_set_power_mode+0xf0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	7a58      	ldrb	r0, [r3, #9]
 8001104:	f107 020d 	add.w	r2, r7, #13
 8001108:	2301      	movs	r3, #1
 800110a:	213e      	movs	r1, #62	; 0x3e
 800110c:	47a0      	blx	r4
 800110e:	4603      	mov	r3, r0
 8001110:	b2da      	uxtb	r2, r3
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	4413      	add	r3, r2
 8001116:	b2db      	uxtb	r3, r3
 8001118:	73fb      	strb	r3, [r7, #15]
 800111a:	e004      	b.n	8001126 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 800111c:	23ff      	movs	r3, #255	; 0xff
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e001      	b.n	8001126 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001122:	23ff      	movs	r3, #255	; 0xff
 8001124:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001126:	7b3b      	ldrb	r3, [r7, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d009      	beq.n	8001140 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fecc 	bl	8000ecc <bno055_set_operation_mode>
 8001134:	4603      	mov	r3, r0
 8001136:	b2da      	uxtb	r2, r3
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	4413      	add	r3, r2
 800113c:	b2db      	uxtb	r3, r3
 800113e:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	20000238 	.word	0x20000238

08001150 <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <I2C_routine+0x28>)
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <I2C_routine+0x2c>)
 8001158:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <I2C_routine+0x28>)
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <I2C_routine+0x30>)
 800115e:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <I2C_routine+0x28>)
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <I2C_routine+0x34>)
 8001164:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <I2C_routine+0x28>)
 8001168:	2229      	movs	r2, #41	; 0x29
 800116a:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000abc 	.word	0x20000abc
 800117c:	08001189 	.word	0x08001189
 8001180:	08001201 	.word	0x08001201
 8001184:	08001291 	.word	0x08001291

08001188 <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af02      	add	r7, sp, #8
 800118e:	603a      	str	r2, [r7, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	460b      	mov	r3, r1
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	4613      	mov	r3, r2
 800119c:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]
 80011ae:	e00d      	b.n	80011cc <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	441a      	add	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	3301      	adds	r3, #1
 80011ba:	7812      	ldrb	r2, [r2, #0]
 80011bc:	f107 0118 	add.w	r1, r7, #24
 80011c0:	440b      	add	r3, r1
 80011c2:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
 80011c8:	3301      	adds	r3, #1
 80011ca:	75fb      	strb	r3, [r7, #23]
 80011cc:	7dfa      	ldrb	r2, [r7, #23]
 80011ce:	797b      	ldrb	r3, [r7, #5]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d3ed      	bcc.n	80011b0 <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	3301      	adds	r3, #1
 80011da:	b299      	uxth	r1, r3
 80011dc:	f107 0208 	add.w	r2, r7, #8
 80011e0:	230a      	movs	r3, #10
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	460b      	mov	r3, r1
 80011e6:	2152      	movs	r1, #82	; 0x52
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <BNO055_I2C_bus_write+0x74>)
 80011ea:	f002 ff9b 	bl	8004124 <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	b25b      	sxtb	r3, r3
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000b78 	.word	0x20000b78

08001200 <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af02      	add	r7, sp, #8
 8001206:	603a      	str	r2, [r7, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	460b      	mov	r3, r1
 8001210:	71bb      	strb	r3, [r7, #6]
 8001212:	4613      	mov	r3, r2
 8001214:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8001224:	2300      	movs	r3, #0
 8001226:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 800122c:	2300      	movs	r3, #0
 800122e:	75fb      	strb	r3, [r7, #23]
 8001230:	e00c      	b.n	800124c <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 8001232:	7dfa      	ldrb	r2, [r7, #23]
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	440b      	add	r3, r1
 800123a:	f107 0118 	add.w	r1, r7, #24
 800123e:	440a      	add	r2, r1
 8001240:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001244:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	3301      	adds	r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
 800124c:	7dfa      	ldrb	r2, [r7, #23]
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	429a      	cmp	r2, r3
 8001252:	d3ee      	bcc.n	8001232 <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 8001254:	797b      	ldrb	r3, [r7, #5]
 8001256:	b299      	uxth	r1, r3
 8001258:	f107 0208 	add.w	r2, r7, #8
 800125c:	230a      	movs	r3, #10
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	460b      	mov	r3, r1
 8001262:	2152      	movs	r1, #82	; 0x52
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <BNO055_I2C_bus_read+0x8c>)
 8001266:	f002 ff5d 	bl	8004124 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	b29a      	uxth	r2, r3
 800126e:	230a      	movs	r3, #10
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	4613      	mov	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	2152      	movs	r1, #82	; 0x52
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <BNO055_I2C_bus_read+0x8c>)
 800127a:	f003 f847 	bl	800430c <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	b25b      	sxtb	r3, r3
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000b78 	.word	0x20000b78

08001290 <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f001 fb4d 	bl	8002938 <HAL_Delay>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <BNOInit>:

void BNOInit()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	I2C_routine();
 80012ac:	f7ff ff50 	bl	8001150 <I2C_routine>
	comres = bno055_init(&bno055);
 80012b0:	4810      	ldr	r0, [pc, #64]	; (80012f4 <BNOInit+0x4c>)
 80012b2:	f7ff fb07 	bl	80008c4 <bno055_init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <BNOInit+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <BNOInit+0x54>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <BNOInit+0x54>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fec7 	bl	800105c <bno055_set_power_mode>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <BNOInit+0x50>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <BNOInit+0x50>)
 80012da:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 80012dc:	200c      	movs	r0, #12
 80012de:	f7ff fdf5 	bl	8000ecc <bno055_set_operation_mode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <BNOInit+0x50>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a02      	ldr	r2, [pc, #8]	; (80012f8 <BNOInit+0x50>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000abc 	.word	0x20000abc
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000a7c 	.word	0x20000a7c

08001300 <readBNOAnglesDeg>:

void readBNOAnglesDeg()
{
 8001300:	b598      	push	{r3, r4, r7, lr}
 8001302:	af00      	add	r7, sp, #0
//	comres += bno055_convert_double_euler_h_deg(&d_euler_data_h);
//	comres += bno055_convert_double_euler_r_deg(&d_euler_data_r);
//	comres += bno055_convert_double_euler_p_deg(&d_euler_data_p);
	comres += bno055_convert_double_euler_hpr_deg(&d_euler_hpr);
 8001304:	480e      	ldr	r0, [pc, #56]	; (8001340 <readBNOAnglesDeg+0x40>)
 8001306:	f7ff fc77 	bl	8000bf8 <bno055_convert_double_euler_hpr_deg>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <readBNOAnglesDeg+0x44>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <readBNOAnglesDeg+0x44>)
 8001316:	6013      	str	r3, [r2, #0]
	Roll = d_euler_hpr.p;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <readBNOAnglesDeg+0x40>)
 800131a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <readBNOAnglesDeg+0x48>)
 8001320:	e9c2 3400 	strd	r3, r4, [r2]
	Pitch = d_euler_hpr.r;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <readBNOAnglesDeg+0x40>)
 8001326:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <readBNOAnglesDeg+0x4c>)
 800132c:	e9c2 3400 	strd	r3, r4, [r2]
	Yaw = d_euler_hpr.h;
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <readBNOAnglesDeg+0x40>)
 8001332:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001336:	4a06      	ldr	r2, [pc, #24]	; (8001350 <readBNOAnglesDeg+0x50>)
 8001338:	e9c2 3400 	strd	r3, r4, [r2]
}
 800133c:	bf00      	nop
 800133e:	bd98      	pop	{r3, r4, r7, pc}
 8001340:	20000ef0 	.word	0x20000ef0
 8001344:	20000000 	.word	0x20000000
 8001348:	20000a80 	.word	0x20000a80
 800134c:	20000a88 	.word	0x20000a88
 8001350:	20000a90 	.word	0x20000a90

08001354 <MS56XXReset>:
int64_t OFF = 0;
int64_t SNES = 0;
int32_t P = 0;

void MS56XXReset(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2110      	movs	r1, #16
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MS56XXReset+0x40>)
 800135e:	f002 fe37 	bl	8003fd0 <HAL_GPIO_WritePin>
	SPITX[0] = 0x1E;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MS56XXReset+0x44>)
 8001364:	221e      	movs	r2, #30
 8001366:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	2201      	movs	r2, #1
 800136e:	490a      	ldr	r1, [pc, #40]	; (8001398 <MS56XXReset+0x44>)
 8001370:	480a      	ldr	r0, [pc, #40]	; (800139c <MS56XXReset+0x48>)
 8001372:	f005 f8f5 	bl	8006560 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001376:	bf00      	nop
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <MS56XXReset+0x48>)
 800137a:	f005 fd92 	bl	8006ea2 <HAL_SPI_GetState>
 800137e:	4603      	mov	r3, r0
 8001380:	2b02      	cmp	r3, #2
 8001382:	d0f9      	beq.n	8001378 <MS56XXReset+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	2110      	movs	r1, #16
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <MS56XXReset+0x40>)
 800138a:	f002 fe21 	bl	8003fd0 <HAL_GPIO_WritePin>
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020000 	.word	0x40020000
 8001398:	2000023c 	.word	0x2000023c
 800139c:	20000e04 	.word	0x20000e04

080013a0 <MS56XXReadProm>:

uint16_t MS56XXReadProm(uint8_t address)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = address;
 80013aa:	4a1b      	ldr	r2, [pc, #108]	; (8001418 <MS56XXReadProm+0x78>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2110      	movs	r1, #16
 80013b4:	4819      	ldr	r0, [pc, #100]	; (800141c <MS56XXReadProm+0x7c>)
 80013b6:	f002 fe0b 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	2201      	movs	r2, #1
 80013c0:	4915      	ldr	r1, [pc, #84]	; (8001418 <MS56XXReadProm+0x78>)
 80013c2:	4817      	ldr	r0, [pc, #92]	; (8001420 <MS56XXReadProm+0x80>)
 80013c4:	f005 f8cc 	bl	8006560 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80013c8:	bf00      	nop
 80013ca:	4815      	ldr	r0, [pc, #84]	; (8001420 <MS56XXReadProm+0x80>)
 80013cc:	f005 fd69 	bl	8006ea2 <HAL_SPI_GetState>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d0f9      	beq.n	80013ca <MS56XXReadProm+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[0], 1, HAL_MAX_DELAY);
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	2201      	movs	r2, #1
 80013dc:	4911      	ldr	r1, [pc, #68]	; (8001424 <MS56XXReadProm+0x84>)
 80013de:	4810      	ldr	r0, [pc, #64]	; (8001420 <MS56XXReadProm+0x80>)
 80013e0:	f005 fa24 	bl	800682c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[1], 1, HAL_MAX_DELAY);
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	2201      	movs	r2, #1
 80013ea:	490f      	ldr	r1, [pc, #60]	; (8001428 <MS56XXReadProm+0x88>)
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <MS56XXReadProm+0x80>)
 80013ee:	f005 fa1d 	bl	800682c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	2110      	movs	r1, #16
 80013f6:	4809      	ldr	r0, [pc, #36]	; (800141c <MS56XXReadProm+0x7c>)
 80013f8:	f002 fdea 	bl	8003fd0 <HAL_GPIO_WritePin>
	return (SPIRX2Byte[0]<<8) + SPIRX2Byte[1];
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MS56XXReadProm+0x84>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <MS56XXReadProm+0x84>)
 8001408:	785b      	ldrb	r3, [r3, #1]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b29b      	uxth	r3, r3
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	2000023c 	.word	0x2000023c
 800141c:	40020000 	.word	0x40020000
 8001420:	20000e04 	.word	0x20000e04
 8001424:	20000240 	.word	0x20000240
 8001428:	20000241 	.word	0x20000241

0800142c <MS56XXInit>:

void MS56XXInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	MS56XXReset();
 8001430:	f7ff ff90 	bl	8001354 <MS56XXReset>
	MS56XXReadProm(0xA0);
 8001434:	20a0      	movs	r0, #160	; 0xa0
 8001436:	f7ff ffb3 	bl	80013a0 <MS56XXReadProm>
	Coeff1 = MS56XXReadProm(0xA2);
 800143a:	20a2      	movs	r0, #162	; 0xa2
 800143c:	f7ff ffb0 	bl	80013a0 <MS56XXReadProm>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <MS56XXInit+0xa8>)
 8001446:	801a      	strh	r2, [r3, #0]
	Coeff2 = MS56XXReadProm(0xA4);
 8001448:	20a4      	movs	r0, #164	; 0xa4
 800144a:	f7ff ffa9 	bl	80013a0 <MS56XXReadProm>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MS56XXInit+0xac>)
 8001454:	801a      	strh	r2, [r3, #0]
	Coeff3 = MS56XXReadProm(0xA6);
 8001456:	20a6      	movs	r0, #166	; 0xa6
 8001458:	f7ff ffa2 	bl	80013a0 <MS56XXReadProm>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <MS56XXInit+0xb0>)
 8001462:	801a      	strh	r2, [r3, #0]
	Coeff4 = MS56XXReadProm(0xA8);
 8001464:	20a8      	movs	r0, #168	; 0xa8
 8001466:	f7ff ff9b 	bl	80013a0 <MS56XXReadProm>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MS56XXInit+0xb4>)
 8001470:	801a      	strh	r2, [r3, #0]
	Coeff5 = MS56XXReadProm(0xAA);
 8001472:	20aa      	movs	r0, #170	; 0xaa
 8001474:	f7ff ff94 	bl	80013a0 <MS56XXReadProm>
 8001478:	4603      	mov	r3, r0
 800147a:	461a      	mov	r2, r3
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MS56XXInit+0xb8>)
 800147e:	801a      	strh	r2, [r3, #0]
	Coeff6 = MS56XXReadProm(0xAC);
 8001480:	20ac      	movs	r0, #172	; 0xac
 8001482:	f7ff ff8d 	bl	80013a0 <MS56XXReadProm>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MS56XXInit+0xbc>)
 800148c:	801a      	strh	r2, [r3, #0]
	MSCRC = MS56XXReadProm(0xAE);
 800148e:	20ae      	movs	r0, #174	; 0xae
 8001490:	f7ff ff86 	bl	80013a0 <MS56XXReadProm>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <MS56XXInit+0xc0>)
 800149a:	801a      	strh	r2, [r3, #0]

	MS56XXSendCmd(0x58);
 800149c:	2058      	movs	r0, #88	; 0x58
 800149e:	f000 f82b 	bl	80014f8 <MS56XXSendCmd>
	HAL_Delay(9);
 80014a2:	2009      	movs	r0, #9
 80014a4:	f001 fa48 	bl	8002938 <HAL_Delay>
	RawTemp = MS56XXRead3Bytes(0);
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 f855 	bl	8001558 <MS56XXRead3Bytes>
 80014ae:	4602      	mov	r2, r0
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <MS56XXInit+0xc4>)
 80014b2:	601a      	str	r2, [r3, #0]

	MS56XXSendCmd(0x48);
 80014b4:	2048      	movs	r0, #72	; 0x48
 80014b6:	f000 f81f 	bl	80014f8 <MS56XXSendCmd>
	HAL_Delay(9);
 80014ba:	2009      	movs	r0, #9
 80014bc:	f001 fa3c 	bl	8002938 <HAL_Delay>
	RawPressure = MS56XXRead3Bytes(0);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 f849 	bl	8001558 <MS56XXRead3Bytes>
 80014c6:	4602      	mov	r2, r0
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MS56XXInit+0xc8>)
 80014ca:	601a      	str	r2, [r3, #0]
	GetAltitudeAndTemp();
 80014cc:	f000 f898 	bl	8001600 <GetAltitudeAndTemp>
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000248 	.word	0x20000248
 80014d8:	2000024a 	.word	0x2000024a
 80014dc:	2000024c 	.word	0x2000024c
 80014e0:	2000024e 	.word	0x2000024e
 80014e4:	20000250 	.word	0x20000250
 80014e8:	20000252 	.word	0x20000252
 80014ec:	20000254 	.word	0x20000254
 80014f0:	20000258 	.word	0x20000258
 80014f4:	2000025c 	.word	0x2000025c

080014f8 <MS56XXSendCmd>:

void MS56XXSendCmd(uint8_t Cmd)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2110      	movs	r1, #16
 8001506:	4810      	ldr	r0, [pc, #64]	; (8001548 <MS56XXSendCmd+0x50>)
 8001508:	f002 fd62 	bl	8003fd0 <HAL_GPIO_WritePin>
	SPITX[0] = Cmd;
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <MS56XXSendCmd+0x54>)
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
 8001516:	2201      	movs	r2, #1
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <MS56XXSendCmd+0x54>)
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <MS56XXSendCmd+0x58>)
 800151c:	f005 f820 	bl	8006560 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001520:	bf00      	nop
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <MS56XXSendCmd+0x58>)
 8001524:	f005 fcbd 	bl	8006ea2 <HAL_SPI_GetState>
 8001528:	4603      	mov	r3, r0
 800152a:	2b02      	cmp	r3, #2
 800152c:	d0f9      	beq.n	8001522 <MS56XXSendCmd+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2110      	movs	r1, #16
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MS56XXSendCmd+0x50>)
 8001534:	f002 fd4c 	bl	8003fd0 <HAL_GPIO_WritePin>
	isCmdSet = true;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MS56XXSendCmd+0x5c>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40020000 	.word	0x40020000
 800154c:	2000023c 	.word	0x2000023c
 8001550:	20000e04 	.word	0x20000e04
 8001554:	20000256 	.word	0x20000256

08001558 <MS56XXRead3Bytes>:

uint32_t MS56XXRead3Bytes(uint8_t address)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = 0x00;
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <MS56XXRead3Bytes+0x8c>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2110      	movs	r1, #16
 800156c:	481e      	ldr	r0, [pc, #120]	; (80015e8 <MS56XXRead3Bytes+0x90>)
 800156e:	f002 fd2f 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	2201      	movs	r2, #1
 8001578:	491a      	ldr	r1, [pc, #104]	; (80015e4 <MS56XXRead3Bytes+0x8c>)
 800157a:	481c      	ldr	r0, [pc, #112]	; (80015ec <MS56XXRead3Bytes+0x94>)
 800157c:	f004 fff0 	bl	8006560 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001580:	bf00      	nop
 8001582:	481a      	ldr	r0, [pc, #104]	; (80015ec <MS56XXRead3Bytes+0x94>)
 8001584:	f005 fc8d 	bl	8006ea2 <HAL_SPI_GetState>
 8001588:	4603      	mov	r3, r0
 800158a:	2b02      	cmp	r3, #2
 800158c:	d0f9      	beq.n	8001582 <MS56XXRead3Bytes+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[0], 1, HAL_MAX_DELAY);
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	2201      	movs	r2, #1
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <MS56XXRead3Bytes+0x98>)
 8001596:	4815      	ldr	r0, [pc, #84]	; (80015ec <MS56XXRead3Bytes+0x94>)
 8001598:	f005 f948 	bl	800682c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[1], 1, HAL_MAX_DELAY);
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	2201      	movs	r2, #1
 80015a2:	4914      	ldr	r1, [pc, #80]	; (80015f4 <MS56XXRead3Bytes+0x9c>)
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <MS56XXRead3Bytes+0x94>)
 80015a6:	f005 f941 	bl	800682c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[2], 1, HAL_MAX_DELAY);
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	2201      	movs	r2, #1
 80015b0:	4911      	ldr	r1, [pc, #68]	; (80015f8 <MS56XXRead3Bytes+0xa0>)
 80015b2:	480e      	ldr	r0, [pc, #56]	; (80015ec <MS56XXRead3Bytes+0x94>)
 80015b4:	f005 f93a 	bl	800682c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2110      	movs	r1, #16
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <MS56XXRead3Bytes+0x90>)
 80015be:	f002 fd07 	bl	8003fd0 <HAL_GPIO_WritePin>
	isCmdSet = false;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MS56XXRead3Bytes+0xa4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	return (SPIRX3Byte[0] << 16) + (SPIRX3Byte[1] << 8 ) + (SPIRX3Byte[0]);
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MS56XXRead3Bytes+0x98>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MS56XXRead3Bytes+0x98>)
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	021b      	lsls	r3, r3, #8
 80015d4:	4413      	add	r3, r2
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <MS56XXRead3Bytes+0x98>)
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	4413      	add	r3, r2
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000023c 	.word	0x2000023c
 80015e8:	40020000 	.word	0x40020000
 80015ec:	20000e04 	.word	0x20000e04
 80015f0:	20000244 	.word	0x20000244
 80015f4:	20000245 	.word	0x20000245
 80015f8:	20000246 	.word	0x20000246
 80015fc:	20000256 	.word	0x20000256

08001600 <GetAltitudeAndTemp>:

uint16_t GetAltitudeAndTemp(void)
{
 8001600:	b4f0      	push	{r4, r5, r6, r7}
 8001602:	af00      	add	r7, sp, #0
	dT = RawTemp - Coeff5 * 256;
 8001604:	4b47      	ldr	r3, [pc, #284]	; (8001724 <GetAltitudeAndTemp+0x124>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a47      	ldr	r2, [pc, #284]	; (8001728 <GetAltitudeAndTemp+0x128>)
 800160a:	8812      	ldrh	r2, [r2, #0]
 800160c:	0212      	lsls	r2, r2, #8
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4b46      	ldr	r3, [pc, #280]	; (800172c <GetAltitudeAndTemp+0x12c>)
 8001614:	601a      	str	r2, [r3, #0]
	TEMP = 2000 + dT * Coeff6 / 8388608;
 8001616:	4b46      	ldr	r3, [pc, #280]	; (8001730 <GetAltitudeAndTemp+0x130>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b43      	ldr	r3, [pc, #268]	; (800172c <GetAltitudeAndTemp+0x12c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	fb03 f302 	mul.w	r3, r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	da02      	bge.n	800162e <GetAltitudeAndTemp+0x2e>
 8001628:	4a42      	ldr	r2, [pc, #264]	; (8001734 <GetAltitudeAndTemp+0x134>)
 800162a:	441a      	add	r2, r3
 800162c:	4613      	mov	r3, r2
 800162e:	15db      	asrs	r3, r3, #23
 8001630:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001634:	4a40      	ldr	r2, [pc, #256]	; (8001738 <GetAltitudeAndTemp+0x138>)
 8001636:	6013      	str	r3, [r2, #0]
	OFF = Coeff2 * 131072 + Coeff4 * dT / 64;
 8001638:	4b40      	ldr	r3, [pc, #256]	; (800173c <GetAltitudeAndTemp+0x13c>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	045a      	lsls	r2, r3, #17
 800163e:	4b40      	ldr	r3, [pc, #256]	; (8001740 <GetAltitudeAndTemp+0x140>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	4619      	mov	r1, r3
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <GetAltitudeAndTemp+0x12c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	fb03 f301 	mul.w	r3, r3, r1
 800164c:	2b00      	cmp	r3, #0
 800164e:	da00      	bge.n	8001652 <GetAltitudeAndTemp+0x52>
 8001650:	333f      	adds	r3, #63	; 0x3f
 8001652:	119b      	asrs	r3, r3, #6
 8001654:	4413      	add	r3, r2
 8001656:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800165a:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <GetAltitudeAndTemp+0x144>)
 800165c:	e9c2 3400 	strd	r3, r4, [r2]
	SNES = Coeff1 * 32768 + (Coeff3 * dT) / 127;
 8001660:	4b39      	ldr	r3, [pc, #228]	; (8001748 <GetAltitudeAndTemp+0x148>)
 8001662:	881b      	ldrh	r3, [r3, #0]
 8001664:	03da      	lsls	r2, r3, #15
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <GetAltitudeAndTemp+0x14c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	4619      	mov	r1, r3
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <GetAltitudeAndTemp+0x12c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	fb03 f301 	mul.w	r3, r3, r1
 8001674:	4936      	ldr	r1, [pc, #216]	; (8001750 <GetAltitudeAndTemp+0x150>)
 8001676:	fb81 0103 	smull	r0, r1, r1, r3
 800167a:	4419      	add	r1, r3
 800167c:	1189      	asrs	r1, r1, #6
 800167e:	17db      	asrs	r3, r3, #31
 8001680:	1acb      	subs	r3, r1, r3
 8001682:	4413      	add	r3, r2
 8001684:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001688:	4a32      	ldr	r2, [pc, #200]	; (8001754 <GetAltitudeAndTemp+0x154>)
 800168a:	e9c2 3400 	strd	r3, r4, [r2]
	P = ((RawPressure * SNES) / 2097152 - OFF) / 32768;
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <GetAltitudeAndTemp+0x158>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <GetAltitudeAndTemp+0x154>)
 800169a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800169e:	fb03 f502 	mul.w	r5, r3, r2
 80016a2:	fb01 f004 	mul.w	r0, r1, r4
 80016a6:	4428      	add	r0, r5
 80016a8:	fba1 3403 	umull	r3, r4, r1, r3
 80016ac:	1902      	adds	r2, r0, r4
 80016ae:	4614      	mov	r4, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f174 0200 	sbcs.w	r2, r4, #0
 80016b6:	da05      	bge.n	80016c4 <GetAltitudeAndTemp+0xc4>
 80016b8:	4928      	ldr	r1, [pc, #160]	; (800175c <GetAltitudeAndTemp+0x15c>)
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	185b      	adds	r3, r3, r1
 80016c0:	eb44 0402 	adc.w	r4, r4, r2
 80016c4:	f04f 0100 	mov.w	r1, #0
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	0d59      	lsrs	r1, r3, #21
 80016ce:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 80016d2:	1562      	asrs	r2, r4, #21
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <GetAltitudeAndTemp+0x144>)
 80016d6:	e9d3 5600 	ldrd	r5, r6, [r3]
 80016da:	460b      	mov	r3, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	1b5b      	subs	r3, r3, r5
 80016e0:	eb64 0406 	sbc.w	r4, r4, r6
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f174 0200 	sbcs.w	r2, r4, #0
 80016ea:	da06      	bge.n	80016fa <GetAltitudeAndTemp+0xfa>
 80016ec:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	185b      	adds	r3, r3, r1
 80016f6:	eb44 0402 	adc.w	r4, r4, r2
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	0bd9      	lsrs	r1, r3, #15
 8001704:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8001708:	13e2      	asrs	r2, r4, #15
 800170a:	460b      	mov	r3, r1
 800170c:	4614      	mov	r4, r2
 800170e:	461a      	mov	r2, r3
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <GetAltitudeAndTemp+0x160>)
 8001712:	601a      	str	r2, [r3, #0]
	return P;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <GetAltitudeAndTemp+0x160>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	b29b      	uxth	r3, r3
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	bcf0      	pop	{r4, r5, r6, r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000258 	.word	0x20000258
 8001728:	20000250 	.word	0x20000250
 800172c:	20000260 	.word	0x20000260
 8001730:	20000252 	.word	0x20000252
 8001734:	007fffff 	.word	0x007fffff
 8001738:	20000264 	.word	0x20000264
 800173c:	2000024a 	.word	0x2000024a
 8001740:	2000024e 	.word	0x2000024e
 8001744:	20000268 	.word	0x20000268
 8001748:	20000248 	.word	0x20000248
 800174c:	2000024c 	.word	0x2000024c
 8001750:	81020409 	.word	0x81020409
 8001754:	20000270 	.word	0x20000270
 8001758:	2000025c 	.word	0x2000025c
 800175c:	001fffff 	.word	0x001fffff
 8001760:	20000278 	.word	0x20000278

08001764 <SendToScreen>:
 *      Author: raing
 */
#include "main.h"

void SendToScreen(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, USBTXArray, 150,4); // HAL_UART_Transmit(&huart2, USBTXArray, 1024,3); TIM2->CCR1
 8001768:	2304      	movs	r3, #4
 800176a:	2296      	movs	r2, #150	; 0x96
 800176c:	4905      	ldr	r1, [pc, #20]	; (8001784 <SendToScreen+0x20>)
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <SendToScreen+0x24>)
 8001770:	f006 fb20 	bl	8007db4 <HAL_UART_Transmit>
	memset(USBTXArray,0, 150);
 8001774:	2296      	movs	r2, #150	; 0x96
 8001776:	2100      	movs	r1, #0
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <SendToScreen+0x20>)
 800177a:	f007 ff9b 	bl	80096b4 <memset>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000067c 	.word	0x2000067c
 8001788:	20000e6c 	.word	0x20000e6c

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001790:	f001 f875 	bl	800287e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001794:	f000 f870 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001798:	f000 fb94 	bl	8001ec4 <MX_GPIO_Init>
  MX_DMA_Init();
 800179c:	f000 fb6c 	bl	8001e78 <MX_DMA_Init>
  MX_TIM4_Init();
 80017a0:	f000 fac8 	bl	8001d34 <MX_TIM4_Init>
  MX_TIM1_Init();
 80017a4:	f000 fa28 	bl	8001bf8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80017a8:	f000 fb36 	bl	8001e18 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80017ac:	f000 f954 	bl	8001a58 <MX_I2C1_Init>
  MX_FATFS_Init();
 80017b0:	f007 fe90 	bl	80094d4 <MX_FATFS_Init>
  MX_QUADSPI_Init();
 80017b4:	f000 f990 	bl	8001ad8 <MX_QUADSPI_Init>
  MX_SDMMC1_MMC_Init();
 80017b8:	f000 f9ba 	bl	8001b30 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 80017bc:	f000 f9de 	bl	8001b7c <MX_SPI1_Init>
  MX_ADC1_Init();
 80017c0:	f000 f8f8 	bl	80019b4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Init(&htim1);	// PWM Generation Servos
 80017c4:	4822      	ldr	r0, [pc, #136]	; (8001850 <main+0xc4>)
 80017c6:	f005 fcef 	bl	80071a8 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim4); 	// LED
 80017ca:	4822      	ldr	r0, [pc, #136]	; (8001854 <main+0xc8>)
 80017cc:	f005 fcec 	bl	80071a8 <HAL_TIM_PWM_Init>
	HAL_ADC_Start(&hadc1);		// Batter
 80017d0:	4821      	ldr	r0, [pc, #132]	; (8001858 <main+0xcc>)
 80017d2:	f001 f917 	bl	8002a04 <HAL_ADC_Start>
//	HAL_TIM_IC_Init(&htim2);		//
//	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);


	vBat = measureBattery();
 80017d6:	f000 fc2b 	bl	8002030 <measureBattery>
 80017da:	eeb0 7b40 	vmov.f64	d7, d0
 80017de:	4b1f      	ldr	r3, [pc, #124]	; (800185c <main+0xd0>)
 80017e0:	ed83 7b00 	vstr	d7, [r3]

	MS56XXInit();
 80017e4:	f7ff fe22 	bl	800142c <MS56XXInit>

//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); 	// QSPI CS Low
//	HAL_Delay(15);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); 	// QSPI WP High
 80017e8:	2201      	movs	r2, #1
 80017ea:	2104      	movs	r1, #4
 80017ec:	481c      	ldr	r0, [pc, #112]	; (8001860 <main+0xd4>)
 80017ee:	f002 fbef 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 80017f2:	200f      	movs	r0, #15
 80017f4:	f001 f8a0 	bl	8002938 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);		// QSPI RST High
 80017f8:	2200      	movs	r2, #0
 80017fa:	2102      	movs	r1, #2
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <main+0xd8>)
 80017fe:	f002 fbe7 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001802:	2001      	movs	r0, #1
 8001804:	f001 f898 	bl	8002938 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);		// QSPI RST High
 8001808:	2201      	movs	r2, #1
 800180a:	2102      	movs	r1, #2
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <main+0xd8>)
 800180e:	f002 fbdf 	bl	8003fd0 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001812:	200f      	movs	r0, #15
 8001814:	f001 f890 	bl	8002938 <HAL_Delay>
//	do {
//		HAL_Delay(1);
//		FS_ret = f_open(&USERFile, "test.txt", FA_READ);
//	} while (FS_ret != FR_OK);

	BNOInit();
 8001818:	f7ff fd46 	bl	80012a8 <BNOInit>

	led_init();
 800181c:	f7ff f808 	bl	8000830 <led_init>

	readBNOAnglesDeg();
 8001820:	f7ff fd6e 	bl	8001300 <readBNOAnglesDeg>
	//Read Data from terminal - Example
	HAL_UART_Receive_DMA(&huart2, USBRXArray, 1024);
 8001824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001828:	490f      	ldr	r1, [pc, #60]	; (8001868 <main+0xdc>)
 800182a:	4810      	ldr	r0, [pc, #64]	; (800186c <main+0xe0>)
 800182c:	f006 fbd0 	bl	8007fd0 <HAL_UART_Receive_DMA>
	//Write Data to terminal - Example
	ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);
 8001830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001834:	490e      	ldr	r1, [pc, #56]	; (8001870 <main+0xe4>)
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <main+0xe0>)
 8001838:	f006 fb4e 	bl	8007ed8 <HAL_UART_Transmit_DMA>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <main+0xe8>)
 8001842:	701a      	strb	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		readBNOAnglesDeg();
 8001844:	f7ff fd5c 	bl	8001300 <readBNOAnglesDeg>
//			SetRGB(250, 0, 0);
//		}
//		sprintf(USBTXArray, "%6.3f, Roll: %6.3f, Pitch: %6.3f, Yaw: %6.3f\r\n",
//				CurrentTime(), Roll, Pitch, Yaw);
//		SendToScreen();
		CheckButton();
 8001848:	f7fe fed2 	bl	80005f0 <CheckButton>
		readBNOAnglesDeg();
 800184c:	e7fa      	b.n	8001844 <main+0xb8>
 800184e:	bf00      	nop
 8001850:	20000dc0 	.word	0x20000dc0
 8001854:	20000b38 	.word	0x20000b38
 8001858:	20000c7c 	.word	0x20000c7c
 800185c:	20000a98 	.word	0x20000a98
 8001860:	40021000 	.word	0x40021000
 8001864:	40020000 	.word	0x40020000
 8001868:	2000027c 	.word	0x2000027c
 800186c:	20000e6c 	.word	0x20000e6c
 8001870:	2000067c 	.word	0x2000067c
 8001874:	20000f08 	.word	0x20000f08

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b0b8      	sub	sp, #224	; 0xe0
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001882:	2234      	movs	r2, #52	; 0x34
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f007 ff14 	bl	80096b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800189c:	f107 0308 	add.w	r3, r7, #8
 80018a0:	2290      	movs	r2, #144	; 0x90
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f007 ff05 	bl	80096b4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80018aa:	f003 fbd3 	bl	8005054 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <SystemClock_Config+0x130>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a3d      	ldr	r2, [pc, #244]	; (80019a8 <SystemClock_Config+0x130>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <SystemClock_Config+0x130>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <SystemClock_Config+0x134>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a38      	ldr	r2, [pc, #224]	; (80019ac <SystemClock_Config+0x134>)
 80018cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b36      	ldr	r3, [pc, #216]	; (80019ac <SystemClock_Config+0x134>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018de:	2301      	movs	r3, #1
 80018e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018fa:	2319      	movs	r3, #25
 80018fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001900:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001904:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800190e:	2302      	movs	r3, #2
 8001910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001914:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fcbd 	bl	8005298 <HAL_RCC_OscConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001924:	f000 fbaa 	bl	800207c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001928:	f003 fba4 	bl	8005074 <HAL_PWREx_EnableOverDrive>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001932:	f000 fba3 	bl	800207c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001948:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800194c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001958:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800195c:	2107      	movs	r1, #7
 800195e:	4618      	mov	r0, r3
 8001960:	f003 ff48 	bl	80057f4 <HAL_RCC_ClockConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800196a:	f000 fb87 	bl	800207c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART2
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <SystemClock_Config+0x138>)
 8001970:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001972:	2300      	movs	r3, #0
 8001974:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001976:	2300      	movs	r3, #0
 8001978:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 800197a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800197e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001986:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001988:	f107 0308 	add.w	r3, r7, #8
 800198c:	4618      	mov	r0, r3
 800198e:	f004 f92f 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001998:	f000 fb70 	bl	800207c <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800199c:	f004 f816 	bl	80059cc <HAL_RCC_EnableCSS>
}
 80019a0:	bf00      	nop
 80019a2:	37e0      	adds	r7, #224	; 0xe0
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000
 80019b0:	00804090 	.word	0x00804090

080019b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ba:	463b      	mov	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <MX_ADC1_Init+0x9c>)
 80019ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019dc:	2201      	movs	r2, #1
 80019de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <MX_ADC1_Init+0xa0>)
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_ADC1_Init+0x98>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_ADC1_Init+0x98>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_ADC1_Init+0x98>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_ADC1_Init+0x98>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a14:	480d      	ldr	r0, [pc, #52]	; (8001a4c <MX_ADC1_Init+0x98>)
 8001a16:	f000 ffb1 	bl	800297c <HAL_ADC_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a20:	f000 fb2c 	bl	800207c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001a24:	230d      	movs	r3, #13
 8001a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a30:	463b      	mov	r3, r7
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_ADC1_Init+0x98>)
 8001a36:	f001 fa11 	bl	8002e5c <HAL_ADC_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a40:	f000 fb1c 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000c7c 	.word	0x20000c7c
 8001a50:	40012000 	.word	0x40012000
 8001a54:	0f000001 	.word	0x0f000001

08001a58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <MX_I2C1_Init+0x78>)
 8001a60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001a62:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <MX_I2C1_Init+0x7c>)
 8001a66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 8001a68:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a6a:	2252      	movs	r2, #82	; 0x52
 8001a6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a92:	480e      	ldr	r0, [pc, #56]	; (8001acc <MX_I2C1_Init+0x74>)
 8001a94:	f002 fab6 	bl	8004004 <HAL_I2C_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a9e:	f000 faed 	bl	800207c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <MX_I2C1_Init+0x74>)
 8001aa6:	f002 ff21 	bl	80048ec <HAL_I2CEx_ConfigAnalogFilter>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ab0:	f000 fae4 	bl	800207c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <MX_I2C1_Init+0x74>)
 8001ab8:	f002 ff63 	bl	8004982 <HAL_I2CEx_ConfigDigitalFilter>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ac2:	f000 fadb 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000b78 	.word	0x20000b78
 8001ad0:	40005400 	.word	0x40005400
 8001ad4:	6000030d 	.word	0x6000030d

08001ad8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001ade:	4a13      	ldr	r2, [pc, #76]	; (8001b2c <MX_QUADSPI_Init+0x54>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001ae4:	22ff      	movs	r2, #255	; 0xff
 8001ae6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001aea:	2220      	movs	r2, #32
 8001aec:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001af0:	2210      	movs	r2, #16
 8001af2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001af6:	2217      	movs	r2, #23
 8001af8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_QUADSPI_Init+0x50>)
 8001b14:	f003 fafe 	bl	8005114 <HAL_QSPI_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 faad 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000f0c 	.word	0x20000f0c
 8001b2c:	a0001000 	.word	0xa0001000

08001b30 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_SDMMC1_MMC_Init+0x44>)
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <MX_SDMMC1_MMC_Init+0x48>)
 8001b38:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_SDMMC1_MMC_Init+0x44>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_SDMMC1_MMC_Init+0x44>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_SDMMC1_MMC_Init+0x44>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_SDMMC1_MMC_Init+0x44>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_SDMMC1_MMC_Init+0x44>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  hmmc1.Init.ClockDiv = 0;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_SDMMC1_MMC_Init+0x44>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_SDMMC1_MMC_Init+0x44>)
 8001b60:	f002 ff5b 	bl	8004a1a <HAL_MMC_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_SDMMC1_MMC_Init+0x3e>
  {
    Error_Handler();
 8001b6a:	f000 fa87 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000bc8 	.word	0x20000bc8
 8001b78:	40012c00 	.word	0x40012c00

08001b7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <MX_SPI1_Init+0x78>)
 8001b84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001b88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001b96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001bca:	2207      	movs	r2, #7
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001bd6:	2208      	movs	r2, #8
 8001bd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <MX_SPI1_Init+0x74>)
 8001bdc:	f004 fc2e 	bl	800643c <HAL_SPI_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001be6:	f000 fa49 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000e04 	.word	0x20000e04
 8001bf4:	40013000 	.word	0x40013000

08001bf8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b096      	sub	sp, #88	; 0x58
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]
 8001c1a:	615a      	str	r2, [r3, #20]
 8001c1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	222c      	movs	r2, #44	; 0x2c
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f007 fd45 	bl	80096b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c2a:	4b40      	ldr	r3, [pc, #256]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c2c:	4a40      	ldr	r2, [pc, #256]	; (8001d30 <MX_TIM1_Init+0x138>)
 8001c2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 8001c30:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c32:	f240 221b 	movw	r2, #539	; 0x21b
 8001c36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c38:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001c44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c46:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c4c:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c58:	4834      	ldr	r0, [pc, #208]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c5a:	f005 faa5 	bl	80071a8 <HAL_TIM_PWM_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001c64:	f000 fa0a 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001c6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c70:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	482b      	ldr	r0, [pc, #172]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001c7e:	f005 ff3f 	bl	8007b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001c88:	f000 f9f8 	bl	800207c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8c:	2360      	movs	r3, #96	; 0x60
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 400;
 8001c90:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c96:	2300      	movs	r3, #0
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001caa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cae:	2200      	movs	r2, #0
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	481e      	ldr	r0, [pc, #120]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001cb4:	f005 fae8 	bl	8007288 <HAL_TIM_PWM_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cbe:	f000 f9dd 	bl	800207c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4818      	ldr	r0, [pc, #96]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001ccc:	f005 fadc 	bl	8007288 <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001cd6:	f000 f9d1 	bl	800207c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4807      	ldr	r0, [pc, #28]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001d10:	f005 ff84 	bl	8007c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001d1a:	f000 f9af 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <MX_TIM1_Init+0x134>)
 8001d20:	f000 fbc8 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 8001d24:	bf00      	nop
 8001d26:	3758      	adds	r7, #88	; 0x58
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000dc0 	.word	0x20000dc0
 8001d30:	40010000 	.word	0x40010000

08001d34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	463b      	mov	r3, r7
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	615a      	str	r2, [r3, #20]
 8001d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001d5a:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <MX_TIM4_Init+0xe0>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 8001d5e:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001d60:	f240 221b 	movw	r2, #539	; 0x21b
 8001d64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001d6e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001d72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d80:	4823      	ldr	r0, [pc, #140]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001d82:	f005 fa11 	bl	80071a8 <HAL_TIM_PWM_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8001d8c:	f000 f976 	bl	800207c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	481c      	ldr	r0, [pc, #112]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001da0:	f005 feae 	bl	8007b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8001daa:	f000 f967 	bl	800207c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dae:	2360      	movs	r3, #96	; 0x60
 8001db0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4812      	ldr	r0, [pc, #72]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001dc6:	f005 fa5f 	bl	8007288 <HAL_TIM_PWM_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001dd0:	f000 f954 	bl	800207c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480d      	ldr	r0, [pc, #52]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001ddc:	f005 fa54 	bl	8007288 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001de6:	f000 f949 	bl	800207c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dea:	463b      	mov	r3, r7
 8001dec:	220c      	movs	r2, #12
 8001dee:	4619      	mov	r1, r3
 8001df0:	4807      	ldr	r0, [pc, #28]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001df2:	f005 fa49 	bl	8007288 <HAL_TIM_PWM_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8001dfc:	f000 f93e 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e00:	4803      	ldr	r0, [pc, #12]	; (8001e10 <MX_TIM4_Init+0xdc>)
 8001e02:	f000 fb57 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 8001e06:	bf00      	nop
 8001e08:	3728      	adds	r7, #40	; 0x28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000b38 	.word	0x20000b38
 8001e14:	40000800 	.word	0x40000800

08001e18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e1e:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <MX_USART2_UART_Init+0x5c>)
 8001e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e24:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e3e:	220c      	movs	r2, #12
 8001e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_USART2_UART_Init+0x58>)
 8001e5c:	f005 ff5c 	bl	8007d18 <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e66:	f000 f909 	bl	800207c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000e6c 	.word	0x20000e6c
 8001e74:	40004400 	.word	0x40004400

08001e78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e7e:	4b10      	ldr	r3, [pc, #64]	; (8001ec0 <MX_DMA_Init+0x48>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <MX_DMA_Init+0x48>)
 8001e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <MX_DMA_Init+0x48>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2010      	movs	r0, #16
 8001e9c:	f001 fb07 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ea0:	2010      	movs	r0, #16
 8001ea2:	f001 fb20 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	2011      	movs	r0, #17
 8001eac:	f001 faff 	bl	80034ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001eb0:	2011      	movs	r0, #17
 8001eb2:	f001 fb18 	bl	80034e6 <HAL_NVIC_EnableIRQ>

}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	; 0x30
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eda:	4b46      	ldr	r3, [pc, #280]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a45      	ldr	r2, [pc, #276]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001ee0:	f043 0310 	orr.w	r3, r3, #16
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b43      	ldr	r3, [pc, #268]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	4b40      	ldr	r3, [pc, #256]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a3f      	ldr	r2, [pc, #252]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b37      	ldr	r3, [pc, #220]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a33      	ldr	r2, [pc, #204]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b31      	ldr	r3, [pc, #196]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f52:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f58:	f043 0308 	orr.w	r3, r3, #8
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <MX_GPIO_Init+0x130>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_WP_GPIO_Port, Flash_WP_Pin, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	4822      	ldr	r0, [pc, #136]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f70:	f002 f82e 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Flash_Reset_Pin|MS5611_CS_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2112      	movs	r1, #18
 8001f78:	4820      	ldr	r0, [pc, #128]	; (8001ffc <MX_GPIO_Init+0x138>)
 8001f7a:	f002 f829 	bl	8003fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Flash_WP_Pin */
  GPIO_InitStruct.Pin = Flash_WP_Pin;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f82:	2301      	movs	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_WP_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4818      	ldr	r0, [pc, #96]	; (8001ff8 <MX_GPIO_Init+0x134>)
 8001f96:	f001 fe59 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	4813      	ldr	r0, [pc, #76]	; (8001ffc <MX_GPIO_Init+0x138>)
 8001fae:	f001 fe4d 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_Reset_Pin */
  GPIO_InitStruct.Pin = Flash_Reset_Pin;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_Reset_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <MX_GPIO_Init+0x138>)
 8001fca:	f001 fe3f 	bl	8003c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MS5611_CS_Pin */
  GPIO_InitStruct.Pin = MS5611_CS_Pin;
 8001fce:	2310      	movs	r3, #16
 8001fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MS5611_CS_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_GPIO_Init+0x138>)
 8001fe6:	f001 fe31 	bl	8003c4c <HAL_GPIO_Init>

}
 8001fea:	bf00      	nop
 8001fec:	3730      	adds	r7, #48	; 0x30
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40020000 	.word	0x40020000

08002000 <CurrentTime>:

/* USER CODE BEGIN 4 */
double CurrentTime(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	return HAL_GetTick() / 1000.0;
 8002004:	f000 fc8c 	bl	8002920 <HAL_GetTick>
 8002008:	ee07 0a90 	vmov	s15, r0
 800200c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002010:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8002028 <CurrentTime+0x28>
 8002014:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002018:	eeb0 7b45 	vmov.f64	d7, d5
}
 800201c:	eeb0 0b47 	vmov.f64	d0, d7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	00000000 	.word	0x00000000
 800202c:	408f4000 	.word	0x408f4000

08002030 <measureBattery>:

double measureBattery()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
	uint32_t D = HAL_ADC_GetValue(&hadc1);
 8002036:	4810      	ldr	r0, [pc, #64]	; (8002078 <measureBattery+0x48>)
 8002038:	f000 fee5 	bl	8002e06 <HAL_ADC_GetValue>
 800203c:	6078      	str	r0, [r7, #4]
	return 2 * 3.3 * D / 4096.0;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002048:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8002068 <measureBattery+0x38>
 800204c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002050:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8002070 <measureBattery+0x40>
 8002054:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002058:	eeb0 7b45 	vmov.f64	d7, d5
}
 800205c:	eeb0 0b47 	vmov.f64	d0, d7
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	66666666 	.word	0x66666666
 800206c:	401a6666 	.word	0x401a6666
 8002070:	00000000 	.word	0x00000000
 8002074:	40b00000 	.word	0x40b00000
 8002078:	20000c7c 	.word	0x20000c7c

0800207c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_MspInit+0x44>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_MspInit+0x44>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <HAL_MspInit+0x44>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_MspInit+0x44>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_MspInit+0x44>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_MspInit+0x44>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_ADC_MspInit+0x84>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12b      	bne.n	800214e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_ADC_MspInit+0x88>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_ADC_MspInit+0x88>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_ADC_MspInit+0x88>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210e:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_ADC_MspInit+0x88>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <HAL_ADC_MspInit+0x88>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_ADC_MspInit+0x88>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002126:	2308      	movs	r3, #8
 8002128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212a:	2303      	movs	r3, #3
 800212c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002132:	f107 0314 	add.w	r3, r7, #20
 8002136:	4619      	mov	r1, r3
 8002138:	4809      	ldr	r0, [pc, #36]	; (8002160 <HAL_ADC_MspInit+0x8c>)
 800213a:	f001 fd87 	bl	8003c4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	2012      	movs	r0, #18
 8002144:	f001 f9b3 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002148:	2012      	movs	r0, #18
 800214a:	f001 f9cc 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40012000 	.word	0x40012000
 800215c:	40023800 	.word	0x40023800
 8002160:	40020800 	.word	0x40020800

08002164 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a1b      	ldr	r2, [pc, #108]	; (80021f0 <HAL_I2C_MspInit+0x8c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d12f      	bne.n	80021e6 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <HAL_I2C_MspInit+0x90>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <HAL_I2C_MspInit+0x90>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <HAL_I2C_MspInit+0x90>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800219e:	23c0      	movs	r3, #192	; 0xc0
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a2:	2312      	movs	r3, #18
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ae:	2304      	movs	r3, #4
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	480f      	ldr	r0, [pc, #60]	; (80021f8 <HAL_I2C_MspInit+0x94>)
 80021ba:	f001 fd47 	bl	8003c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_I2C_MspInit+0x90>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_I2C_MspInit+0x90>)
 80021c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_I2C_MspInit+0x90>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	201f      	movs	r0, #31
 80021dc:	f001 f967 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80021e0:	201f      	movs	r0, #31
 80021e2:	f001 f980 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40005400 	.word	0x40005400
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020400 	.word	0x40020400

080021fc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08c      	sub	sp, #48	; 0x30
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a34      	ldr	r2, [pc, #208]	; (80022ec <HAL_QSPI_MspInit+0xf0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d161      	bne.n	80022e2 <HAL_QSPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800221e:	4b34      	ldr	r3, [pc, #208]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	4a33      	ldr	r2, [pc, #204]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6393      	str	r3, [r2, #56]	; 0x38
 800222a:	4b31      	ldr	r3, [pc, #196]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a2d      	ldr	r2, [pc, #180]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800224e:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 8002254:	f043 0310 	orr.w	r3, r3, #16
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_QSPI_MspInit+0xf4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PE7     ------> QUADSPI_BK2_IO0
    PE8     ------> QUADSPI_BK2_IO1
    PC11     ------> QUADSPI_BK2_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800227e:	2304      	movs	r3, #4
 8002280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800228e:	2309      	movs	r3, #9
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	4619      	mov	r1, r3
 8002298:	4816      	ldr	r0, [pc, #88]	; (80022f4 <HAL_QSPI_MspInit+0xf8>)
 800229a:	f001 fcd7 	bl	8003c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800229e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ac:	2303      	movs	r3, #3
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80022b0:	230a      	movs	r3, #10
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022b4:	f107 031c 	add.w	r3, r7, #28
 80022b8:	4619      	mov	r1, r3
 80022ba:	480f      	ldr	r0, [pc, #60]	; (80022f8 <HAL_QSPI_MspInit+0xfc>)
 80022bc:	f001 fcc6 	bl	8003c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022d2:	2309      	movs	r3, #9
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4807      	ldr	r0, [pc, #28]	; (80022fc <HAL_QSPI_MspInit+0x100>)
 80022de:	f001 fcb5 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80022e2:	bf00      	nop
 80022e4:	3730      	adds	r7, #48	; 0x30
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	a0001000 	.word	0xa0001000
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020400 	.word	0x40020400
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40020800 	.word	0x40020800

08002300 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a25      	ldr	r2, [pc, #148]	; (80023b4 <HAL_MMC_MspInit+0xb4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d144      	bne.n	80023ac <HAL_MMC_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002322:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	4a24      	ldr	r2, [pc, #144]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 8002328:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 8002340:	f043 0304 	orr.w	r3, r3, #4
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a18      	ldr	r2, [pc, #96]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 8002358:	f043 0308 	orr.w	r3, r3, #8
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <HAL_MMC_MspInit+0xb8>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800236a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	2303      	movs	r3, #3
 800237a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800237c:	230c      	movs	r3, #12
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	480d      	ldr	r0, [pc, #52]	; (80023bc <HAL_MMC_MspInit+0xbc>)
 8002388:	f001 fc60 	bl	8003c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800238c:	2304      	movs	r3, #4
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800239c:	230c      	movs	r3, #12
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <HAL_MMC_MspInit+0xc0>)
 80023a8:	f001 fc50 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80023ac:	bf00      	nop
 80023ae:	3728      	adds	r7, #40	; 0x28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00

080023c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a17      	ldr	r2, [pc, #92]	; (8002440 <HAL_SPI_MspInit+0x7c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d127      	bne.n	8002436 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_SPI_MspInit+0x80>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	4a16      	ldr	r2, [pc, #88]	; (8002444 <HAL_SPI_MspInit+0x80>)
 80023ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023f0:	6453      	str	r3, [r2, #68]	; 0x44
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_SPI_MspInit+0x80>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_SPI_MspInit+0x80>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a10      	ldr	r2, [pc, #64]	; (8002444 <HAL_SPI_MspInit+0x80>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_SPI_MspInit+0x80>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002416:	2338      	movs	r3, #56	; 0x38
 8002418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241a:	2302      	movs	r3, #2
 800241c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002426:	2305      	movs	r3, #5
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <HAL_SPI_MspInit+0x84>)
 8002432:	f001 fc0b 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40013000 	.word	0x40013000
 8002444:	40023800 	.word	0x40023800
 8002448:	40020400 	.word	0x40020400

0800244c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <HAL_TIM_PWM_MspInit+0x5c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d10c      	bne.n	8002478 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <HAL_TIM_PWM_MspInit+0x60>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <HAL_TIM_PWM_MspInit+0x60>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_TIM_PWM_MspInit+0x60>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002476:	e010      	b.n	800249a <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <HAL_TIM_PWM_MspInit+0x64>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10b      	bne.n	800249a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_TIM_PWM_MspInit+0x60>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a09      	ldr	r2, [pc, #36]	; (80024ac <HAL_TIM_PWM_MspInit+0x60>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <HAL_TIM_PWM_MspInit+0x60>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40000800 	.word	0x40000800

080024b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a23      	ldr	r2, [pc, #140]	; (8002560 <HAL_TIM_MspPostInit+0xac>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d11d      	bne.n	8002512 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d6:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_TIM_MspPostInit+0xb0>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_TIM_MspPostInit+0xb0>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_TIM_MspPostInit+0xb0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 80024ee:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80024f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002500:	2301      	movs	r3, #1
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	4817      	ldr	r0, [pc, #92]	; (8002568 <HAL_TIM_MspPostInit+0xb4>)
 800250c:	f001 fb9e 	bl	8003c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002510:	e021      	b.n	8002556 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a15      	ldr	r2, [pc, #84]	; (800256c <HAL_TIM_MspPostInit+0xb8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d11c      	bne.n	8002556 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_TIM_MspPostInit+0xb0>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_TIM_MspPostInit+0xb0>)
 8002522:	f043 0308 	orr.w	r3, r3, #8
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <HAL_TIM_MspPostInit+0xb0>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8002534:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002546:	2302      	movs	r3, #2
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800254a:	f107 0314 	add.w	r3, r7, #20
 800254e:	4619      	mov	r1, r3
 8002550:	4807      	ldr	r0, [pc, #28]	; (8002570 <HAL_TIM_MspPostInit+0xbc>)
 8002552:	f001 fb7b 	bl	8003c4c <HAL_GPIO_Init>
}
 8002556:	bf00      	nop
 8002558:	3728      	adds	r7, #40	; 0x28
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40010000 	.word	0x40010000
 8002564:	40023800 	.word	0x40023800
 8002568:	40020000 	.word	0x40020000
 800256c:	40000800 	.word	0x40000800
 8002570:	40020c00 	.word	0x40020c00

08002574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a4e      	ldr	r2, [pc, #312]	; (80026cc <HAL_UART_MspInit+0x158>)
 8002592:	4293      	cmp	r3, r2
 8002594:	f040 8095 	bne.w	80026c2 <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002598:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <HAL_UART_MspInit+0x15c>)
 800259a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259c:	4a4c      	ldr	r2, [pc, #304]	; (80026d0 <HAL_UART_MspInit+0x15c>)
 800259e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a2:	6413      	str	r3, [r2, #64]	; 0x40
 80025a4:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_UART_MspInit+0x15c>)
 80025a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_UART_MspInit+0x15c>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <HAL_UART_MspInit+0x15c>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6313      	str	r3, [r2, #48]	; 0x30
 80025bc:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <HAL_UART_MspInit+0x15c>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 80025c8:	230c      	movs	r3, #12
 80025ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d8:	2307      	movs	r3, #7
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	4619      	mov	r1, r3
 80025e2:	483c      	ldr	r0, [pc, #240]	; (80026d4 <HAL_UART_MspInit+0x160>)
 80025e4:	f001 fb32 	bl	8003c4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80025e8:	4b3b      	ldr	r3, [pc, #236]	; (80026d8 <HAL_UART_MspInit+0x164>)
 80025ea:	4a3c      	ldr	r2, [pc, #240]	; (80026dc <HAL_UART_MspInit+0x168>)
 80025ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <HAL_UART_MspInit+0x164>)
 80025f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_UART_MspInit+0x164>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fc:	4b36      	ldr	r3, [pc, #216]	; (80026d8 <HAL_UART_MspInit+0x164>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002602:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <HAL_UART_MspInit+0x164>)
 8002604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002608:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260a:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <HAL_UART_MspInit+0x164>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002610:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <HAL_UART_MspInit+0x164>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002616:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <HAL_UART_MspInit+0x164>)
 8002618:	2200      	movs	r2, #0
 800261a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800261c:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_UART_MspInit+0x164>)
 800261e:	2200      	movs	r2, #0
 8002620:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002622:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_UART_MspInit+0x164>)
 8002624:	2200      	movs	r2, #0
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002628:	482b      	ldr	r0, [pc, #172]	; (80026d8 <HAL_UART_MspInit+0x164>)
 800262a:	f000 ff77 	bl	800351c <HAL_DMA_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002634:	f7ff fd22 	bl	800207c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a27      	ldr	r2, [pc, #156]	; (80026d8 <HAL_UART_MspInit+0x164>)
 800263c:	66da      	str	r2, [r3, #108]	; 0x6c
 800263e:	4a26      	ldr	r2, [pc, #152]	; (80026d8 <HAL_UART_MspInit+0x164>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002644:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002646:	4a27      	ldr	r2, [pc, #156]	; (80026e4 <HAL_UART_MspInit+0x170>)
 8002648:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 800264c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002650:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002654:	2240      	movs	r2, #64	; 0x40
 8002656:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002664:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002666:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266c:	4b1c      	ldr	r3, [pc, #112]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002680:	2204      	movs	r2, #4
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002684:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002686:	2203      	movs	r2, #3
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 800268c:	2200      	movs	r2, #0
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002696:	4812      	ldr	r0, [pc, #72]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 8002698:	f000 ff40 	bl	800351c <HAL_DMA_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 80026a2:	f7ff fceb 	bl	800207c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 80026aa:	669a      	str	r2, [r3, #104]	; 0x68
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_UART_MspInit+0x16c>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2026      	movs	r0, #38	; 0x26
 80026b8:	f000 fef9 	bl	80034ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026bc:	2026      	movs	r0, #38	; 0x26
 80026be:	f000 ff12 	bl	80034e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3728      	adds	r7, #40	; 0x28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40004400 	.word	0x40004400
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	20000ad8 	.word	0x20000ad8
 80026dc:	40026088 	.word	0x40026088
 80026e0:	20000cc4 	.word	0x20000cc4
 80026e4:	400260a0 	.word	0x400260a0

080026e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80026ec:	f003 fa64 	bl	8005bb8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <HardFault_Handler+0x4>

080026fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026fe:	e7fe      	b.n	80026fe <MemManage_Handler+0x4>

08002700 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002704:	e7fe      	b.n	8002704 <BusFault_Handler+0x4>

08002706 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800270a:	e7fe      	b.n	800270a <UsageFault_Handler+0x4>

0800270c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800273a:	f000 f8dd 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <DMA1_Stream5_IRQHandler+0x10>)
 800274a:	f001 f817 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000ad8 	.word	0x20000ad8

08002758 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DMA1_Stream6_IRQHandler+0x10>)
 800275e:	f001 f80d 	bl	800377c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000cc4 	.word	0x20000cc4

0800276c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <ADC_IRQHandler+0x10>)
 8002772:	f000 fa07 	bl	8002b84 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000c7c 	.word	0x20000c7c

08002780 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <I2C1_EV_IRQHandler+0x10>)
 8002786:	f001 feb7 	bl	80044f8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000b78 	.word	0x20000b78

08002794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <USART2_IRQHandler+0x10>)
 800279a:	f005 fc9d 	bl	80080d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000e6c 	.word	0x20000e6c

080027a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <_sbrk+0x50>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d102      	bne.n	80027be <_sbrk+0x16>
		heap_end = &end;
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <_sbrk+0x50>)
 80027ba:	4a10      	ldr	r2, [pc, #64]	; (80027fc <_sbrk+0x54>)
 80027bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80027be:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <_sbrk+0x50>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <_sbrk+0x50>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	466a      	mov	r2, sp
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d907      	bls.n	80027e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80027d2:	f006 ff45 	bl	8009660 <__errno>
 80027d6:	4602      	mov	r2, r0
 80027d8:	230c      	movs	r3, #12
 80027da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80027dc:	f04f 33ff 	mov.w	r3, #4294967295
 80027e0:	e006      	b.n	80027f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <_sbrk+0x50>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <_sbrk+0x50>)
 80027ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000aa0 	.word	0x20000aa0
 80027fc:	20002fd0 	.word	0x20002fd0

08002800 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <SystemInit+0x28>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	4a07      	ldr	r2, [pc, #28]	; (8002828 <SystemInit+0x28>)
 800280c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <SystemInit+0x28>)
 8002816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800281a:	609a      	str	r2, [r3, #8]
#endif
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800282c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002864 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002832:	e003      	b.n	800283c <LoopCopyDataInit>

08002834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800283a:	3104      	adds	r1, #4

0800283c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800283c:	480b      	ldr	r0, [pc, #44]	; (800286c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002844:	d3f6      	bcc.n	8002834 <CopyDataInit>
  ldr  r2, =_sbss
 8002846:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002848:	e002      	b.n	8002850 <LoopFillZerobss>

0800284a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800284a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800284c:	f842 3b04 	str.w	r3, [r2], #4

08002850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002854:	d3f9      	bcc.n	800284a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002856:	f7ff ffd3 	bl	8002800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285a:	f006 ff07 	bl	800966c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800285e:	f7fe ff95 	bl	800178c <main>
  bx  lr    
 8002862:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002864:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002868:	0800d348 	.word	0x0800d348
  ldr  r0, =_sdata
 800286c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002870:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002874:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8002878:	20002fd0 	.word	0x20002fd0

0800287c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800287c:	e7fe      	b.n	800287c <CAN1_RX0_IRQHandler>

0800287e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002882:	2003      	movs	r0, #3
 8002884:	f000 fe08 	bl	8003498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002888:	2000      	movs	r0, #0
 800288a:	f000 f805 	bl	8002898 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800288e:	f7ff fbfd 	bl	800208c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fe23 	bl	8003502 <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295
 80028d4:	f000 fdeb 	bl	80034ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000004 	.word	0x20000004
 80028f0:	2000000c 	.word	0x2000000c
 80028f4:	20000008 	.word	0x20000008

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	2000000c 	.word	0x2000000c
 800291c:	20000f60 	.word	0x20000f60

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000f60 	.word	0x20000f60

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff ffee 	bl	8002920 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_Delay+0x40>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffde 	bl	8002920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	2000000c 	.word	0x2000000c

0800297c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e031      	b.n	80029f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fb9a 	bl	80020d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_ADC_Init+0x84>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	f043 0202 	orr.w	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fb90 	bl	80030f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	f043 0201 	orr.w	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
 80029e6:	e001      	b.n	80029ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	ffffeefd 	.word	0xffffeefd

08002a04 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_Start+0x1a>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e0a0      	b.n	8002b60 <HAL_ADC_Start+0x15c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d018      	beq.n	8002a66 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a44:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <HAL_ADC_Start+0x168>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a49      	ldr	r2, [pc, #292]	; (8002b70 <HAL_ADC_Start+0x16c>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0c9a      	lsrs	r2, r3, #18
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a58:	e002      	b.n	8002a60 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f9      	bne.n	8002a5a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d174      	bne.n	8002b5e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a78:	4b3e      	ldr	r3, [pc, #248]	; (8002b74 <HAL_ADC_Start+0x170>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d007      	beq.n	8002aa2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aae:	d106      	bne.n	8002abe <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f023 0206 	bic.w	r2, r3, #6
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
 8002abc:	e002      	b.n	8002ac4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ad4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_ADC_Start+0x174>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10f      	bne.n	8002b02 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d136      	bne.n	8002b5e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	e02d      	b.n	8002b5e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_ADC_Start+0x178>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d10e      	bne.n	8002b2a <HAL_ADC_Start+0x126>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b28:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b2a:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <HAL_ADC_Start+0x174>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d113      	bne.n	8002b5e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_ADC_Start+0x17c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10e      	bne.n	8002b5e <HAL_ADC_Start+0x15a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d107      	bne.n	8002b5e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b5c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	20000004 	.word	0x20000004
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	fffff8fe 	.word	0xfffff8fe
 8002b78:	40012300 	.word	0x40012300
 8002b7c:	40012000 	.word	0x40012000
 8002b80:	40012200 	.word	0x40012200

08002b84 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	bf0c      	ite	eq
 8002ba2:	2301      	moveq	r3, #1
 8002ba4:	2300      	movne	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d049      	beq.n	8002c5a <HAL_ADC_IRQHandler+0xd6>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d046      	beq.n	8002c5a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d12b      	bne.n	8002c4a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d127      	bne.n	8002c4a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d119      	bne.n	8002c4a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0220 	bic.w	r2, r2, #32
 8002c24:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d105      	bne.n	8002c4a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8e8 	bl	8002e20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0212 	mvn.w	r2, #18
 8002c58:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d057      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x1b8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d054      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d139      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d12b      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d124      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11d      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d119      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fad9 	bl	80032e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 020c 	mvn.w	r2, #12
 8002d3a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d017      	beq.n	8002d9e <HAL_ADC_IRQHandler+0x21a>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d014      	beq.n	8002d9e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10d      	bne.n	8002d9e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f850 	bl	8002e34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f06f 0201 	mvn.w	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x27a>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f043 0202 	orr.w	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0220 	mvn.w	r2, #32
 8002dec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f82a 	bl	8002e48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0220 	mvn.w	r2, #32
 8002dfc:	601a      	str	r2, [r3, #0]
  }
}
 8002dfe:	bf00      	nop
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e12a      	b.n	80030ce <HAL_ADC_ConfigChannel+0x272>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b09      	cmp	r3, #9
 8002e86:	d93a      	bls.n	8002efe <HAL_ADC_ConfigChannel+0xa2>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e90:	d035      	beq.n	8002efe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3b1e      	subs	r3, #30
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a87      	ldr	r2, [pc, #540]	; (80030dc <HAL_ADC_ConfigChannel+0x280>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68d9      	ldr	r1, [r3, #12]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	061a      	lsls	r2, r3, #24
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ed6:	e035      	b.n	8002f44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68d9      	ldr	r1, [r3, #12]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	4618      	mov	r0, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4403      	add	r3, r0
 8002ef0:	3b1e      	subs	r3, #30
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002efc:	e022      	b.n	8002f44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	2207      	movs	r2, #7
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	400a      	ands	r2, r1
 8002f20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6919      	ldr	r1, [r3, #16]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	4603      	mov	r3, r0
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	4403      	add	r3, r0
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d824      	bhi.n	8002f96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b05      	subs	r3, #5
 8002f5e:	221f      	movs	r2, #31
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43da      	mvns	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3b05      	subs	r3, #5
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	635a      	str	r2, [r3, #52]	; 0x34
 8002f94:	e04c      	b.n	8003030 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d824      	bhi.n	8002fe8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	3b23      	subs	r3, #35	; 0x23
 8002fb0:	221f      	movs	r2, #31
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3b23      	subs	r3, #35	; 0x23
 8002fda:	fa00 f203 	lsl.w	r2, r0, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
 8002fe6:	e023      	b.n	8003030 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b41      	subs	r3, #65	; 0x41
 8002ffa:	221f      	movs	r2, #31
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43da      	mvns	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	400a      	ands	r2, r1
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4618      	mov	r0, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	3b41      	subs	r3, #65	; 0x41
 8003024:	fa00 f203 	lsl.w	r2, r0, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <HAL_ADC_ConfigChannel+0x284>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d10a      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x1f4>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003042:	d105      	bne.n	8003050 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003044:	4b27      	ldr	r3, [pc, #156]	; (80030e4 <HAL_ADC_ConfigChannel+0x288>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a26      	ldr	r2, [pc, #152]	; (80030e4 <HAL_ADC_ConfigChannel+0x288>)
 800304a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800304e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_ADC_ConfigChannel+0x284>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d109      	bne.n	800306e <HAL_ADC_ConfigChannel+0x212>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b12      	cmp	r3, #18
 8003060:	d105      	bne.n	800306e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_ADC_ConfigChannel+0x288>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_ADC_ConfigChannel+0x288>)
 8003068:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800306c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1b      	ldr	r2, [pc, #108]	; (80030e0 <HAL_ADC_ConfigChannel+0x284>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d125      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x268>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_ADC_ConfigChannel+0x280>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <HAL_ADC_ConfigChannel+0x22e>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b11      	cmp	r3, #17
 8003088:	d11c      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800308a:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_ADC_ConfigChannel+0x288>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <HAL_ADC_ConfigChannel+0x288>)
 8003090:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003094:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a10      	ldr	r2, [pc, #64]	; (80030dc <HAL_ADC_ConfigChannel+0x280>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d111      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_ADC_ConfigChannel+0x28c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a11      	ldr	r2, [pc, #68]	; (80030ec <HAL_ADC_ConfigChannel+0x290>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0c9a      	lsrs	r2, r3, #18
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030b6:	e002      	b.n	80030be <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f9      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	10000012 	.word	0x10000012
 80030e0:	40012000 	.word	0x40012000
 80030e4:	40012300 	.word	0x40012300
 80030e8:	20000004 	.word	0x20000004
 80030ec:	431bde83 	.word	0x431bde83

080030f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80030f8:	4b78      	ldr	r3, [pc, #480]	; (80032dc <ADC_Init+0x1ec>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a77      	ldr	r2, [pc, #476]	; (80032dc <ADC_Init+0x1ec>)
 80030fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003102:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003104:	4b75      	ldr	r3, [pc, #468]	; (80032dc <ADC_Init+0x1ec>)
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4973      	ldr	r1, [pc, #460]	; (80032dc <ADC_Init+0x1ec>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6899      	ldr	r1, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <ADC_Init+0x1f0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d022      	beq.n	80031ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003192:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6899      	ldr	r1, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6899      	ldr	r1, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	e00f      	b.n	80031ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 0202 	bic.w	r2, r2, #2
 80031f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	005a      	lsls	r2, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01b      	beq.n	8003250 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003226:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003236:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	3b01      	subs	r3, #1
 8003244:	035a      	lsls	r2, r3, #13
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	e007      	b.n	8003260 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800325e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800326e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	3b01      	subs	r3, #1
 800327c:	051a      	lsls	r2, r3, #20
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6899      	ldr	r1, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a2:	025a      	lsls	r2, r3, #9
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6899      	ldr	r1, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	029a      	lsls	r2, r3, #10
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40012300 	.word	0x40012300
 80032e0:	0f000001 	.word	0x0f000001

080032e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <__NVIC_SetPriorityGrouping+0x40>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003314:	4013      	ands	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <__NVIC_SetPriorityGrouping+0x44>)
 8003322:	4313      	orrs	r3, r2
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <__NVIC_SetPriorityGrouping+0x40>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00
 800333c:	05fa0000 	.word	0x05fa0000

08003340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <__NVIC_GetPriorityGrouping+0x18>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	f003 0307 	and.w	r3, r3, #7
}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	e000ed00 	.word	0xe000ed00

0800335c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db0b      	blt.n	8003386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	4907      	ldr	r1, [pc, #28]	; (8003394 <__NVIC_EnableIRQ+0x38>)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2001      	movs	r0, #1
 800337e:	fa00 f202 	lsl.w	r2, r0, r2
 8003382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000e100 	.word	0xe000e100

08003398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	6039      	str	r1, [r7, #0]
 80033a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	db0a      	blt.n	80033c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	490c      	ldr	r1, [pc, #48]	; (80033e4 <__NVIC_SetPriority+0x4c>)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	0112      	lsls	r2, r2, #4
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	440b      	add	r3, r1
 80033bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c0:	e00a      	b.n	80033d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	4908      	ldr	r1, [pc, #32]	; (80033e8 <__NVIC_SetPriority+0x50>)
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	3b04      	subs	r3, #4
 80033d0:	0112      	lsls	r2, r2, #4
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	440b      	add	r3, r1
 80033d6:	761a      	strb	r2, [r3, #24]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f1c3 0307 	rsb	r3, r3, #7
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf28      	it	cs
 800340a:	2304      	movcs	r3, #4
 800340c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	3304      	adds	r3, #4
 8003412:	2b06      	cmp	r3, #6
 8003414:	d902      	bls.n	800341c <NVIC_EncodePriority+0x30>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3b03      	subs	r3, #3
 800341a:	e000      	b.n	800341e <NVIC_EncodePriority+0x32>
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	f04f 32ff 	mov.w	r2, #4294967295
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	401a      	ands	r2, r3
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003434:	f04f 31ff 	mov.w	r1, #4294967295
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43d9      	mvns	r1, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003444:	4313      	orrs	r3, r2
         );
}
 8003446:	4618      	mov	r0, r3
 8003448:	3724      	adds	r7, #36	; 0x24
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003464:	d301      	bcc.n	800346a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003466:	2301      	movs	r3, #1
 8003468:	e00f      	b.n	800348a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <SysTick_Config+0x40>)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3b01      	subs	r3, #1
 8003470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003472:	210f      	movs	r1, #15
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	f7ff ff8e 	bl	8003398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800347c:	4b05      	ldr	r3, [pc, #20]	; (8003494 <SysTick_Config+0x40>)
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <SysTick_Config+0x40>)
 8003484:	2207      	movs	r2, #7
 8003486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	e000e010 	.word	0xe000e010

08003498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff29 	bl	80032f8 <__NVIC_SetPriorityGrouping>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034c0:	f7ff ff3e 	bl	8003340 <__NVIC_GetPriorityGrouping>
 80034c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	6978      	ldr	r0, [r7, #20]
 80034cc:	f7ff ff8e 	bl	80033ec <NVIC_EncodePriority>
 80034d0:	4602      	mov	r2, r0
 80034d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff5d 	bl	8003398 <__NVIC_SetPriority>
}
 80034de:	bf00      	nop
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	4603      	mov	r3, r0
 80034ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff31 	bl	800335c <__NVIC_EnableIRQ>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ffa2 	bl	8003454 <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003528:	f7ff f9fa 	bl	8002920 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d101      	bne.n	8003538 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e099      	b.n	800366c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003558:	e00f      	b.n	800357a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800355a:	f7ff f9e1 	bl	8002920 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b05      	cmp	r3, #5
 8003566:	d908      	bls.n	800357a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2220      	movs	r2, #32
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2203      	movs	r2, #3
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e078      	b.n	800366c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e8      	bne.n	800355a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_DMA_Init+0x158>)
 8003594:	4013      	ands	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d107      	bne.n	80035e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	4313      	orrs	r3, r2
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f023 0307 	bic.w	r3, r3, #7
 80035fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	2b04      	cmp	r3, #4
 800360c:	d117      	bne.n	800363e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00e      	beq.n	800363e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fa99 	bl	8003b58 <DMA_CheckFifoParam>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2240      	movs	r2, #64	; 0x40
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800363a:	2301      	movs	r3, #1
 800363c:	e016      	b.n	800366c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fa50 	bl	8003aec <DMA_CalcBaseAndBitshift>
 800364c:	4603      	mov	r3, r0
 800364e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	223f      	movs	r2, #63	; 0x3f
 8003656:	409a      	lsls	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	e010803f 	.word	0xe010803f

08003678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_DMA_Start_IT+0x26>
 800369a:	2302      	movs	r3, #2
 800369c:	e048      	b.n	8003730 <HAL_DMA_Start_IT+0xb8>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d137      	bne.n	8003722 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2202      	movs	r2, #2
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f9e2 	bl	8003a90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	223f      	movs	r2, #63	; 0x3f
 80036d2:	409a      	lsls	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0216 	orr.w	r2, r2, #22
 80036e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036f6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d007      	beq.n	8003710 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0208 	orr.w	r2, r2, #8
 800370e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e005      	b.n	800372e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800372a:	2302      	movs	r3, #2
 800372c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800372e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e00c      	b.n	8003770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2205      	movs	r2, #5
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003788:	4b92      	ldr	r3, [pc, #584]	; (80039d4 <HAL_DMA_IRQHandler+0x258>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a92      	ldr	r2, [pc, #584]	; (80039d8 <HAL_DMA_IRQHandler+0x25c>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	2208      	movs	r2, #8
 80037a8:	409a      	lsls	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0204 	bic.w	r2, r2, #4
 80037ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	2208      	movs	r2, #8
 80037d6:	409a      	lsls	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2201      	movs	r2, #1
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2201      	movs	r2, #1
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0202 	orr.w	r2, r3, #2
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003822:	2204      	movs	r2, #4
 8003824:	409a      	lsls	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d012      	beq.n	8003854 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003840:	2204      	movs	r2, #4
 8003842:	409a      	lsls	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384c:	f043 0204 	orr.w	r2, r3, #4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003858:	2210      	movs	r2, #16
 800385a:	409a      	lsls	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d043      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d03c      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003876:	2210      	movs	r2, #16
 8003878:	409a      	lsls	r2, r3
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d018      	beq.n	80038be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d024      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
 80038aa:	e01f      	b.n	80038ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01b      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e016      	b.n	80038ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0208 	bic.w	r2, r2, #8
 80038da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2220      	movs	r2, #32
 80038f2:	409a      	lsls	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4013      	ands	r3, r2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 808e 	beq.w	8003a1a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 8086 	beq.w	8003a1a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2220      	movs	r2, #32
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b05      	cmp	r3, #5
 8003924:	d136      	bne.n	8003994 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0216 	bic.w	r2, r2, #22
 8003934:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003944:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <HAL_DMA_IRQHandler+0x1da>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0208 	bic.w	r2, r2, #8
 8003964:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396a:	223f      	movs	r2, #63	; 0x3f
 800396c:	409a      	lsls	r2, r3
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003986:	2b00      	cmp	r3, #0
 8003988:	d07d      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
        }
        return;
 8003992:	e078      	b.n	8003a86 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01c      	beq.n	80039dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d108      	bne.n	80039c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d030      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
 80039c0:	e02b      	b.n	8003a1a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d027      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
 80039d2:	e022      	b.n	8003a1a <HAL_DMA_IRQHandler+0x29e>
 80039d4:	20000004 	.word	0x20000004
 80039d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0210 	bic.w	r2, r2, #16
 80039f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d032      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d022      	beq.n	8003a74 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2205      	movs	r2, #5
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d307      	bcc.n	8003a62 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f2      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x2ca>
 8003a60:	e000      	b.n	8003a64 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a62:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
 8003a84:	e000      	b.n	8003a88 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a86:	bf00      	nop
    }
  }
}
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop

08003a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003aac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2b40      	cmp	r3, #64	; 0x40
 8003abc:	d108      	bne.n	8003ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ace:	e007      	b.n	8003ae0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	60da      	str	r2, [r3, #12]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	3b10      	subs	r3, #16
 8003afc:	4a13      	ldr	r2, [pc, #76]	; (8003b4c <DMA_CalcBaseAndBitshift+0x60>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b06:	4a12      	ldr	r2, [pc, #72]	; (8003b50 <DMA_CalcBaseAndBitshift+0x64>)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d908      	bls.n	8003b2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <DMA_CalcBaseAndBitshift+0x68>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	1d1a      	adds	r2, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	659a      	str	r2, [r3, #88]	; 0x58
 8003b2a:	e006      	b.n	8003b3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <DMA_CalcBaseAndBitshift+0x68>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	aaaaaaab 	.word	0xaaaaaaab
 8003b50:	0800d078 	.word	0x0800d078
 8003b54:	fffffc00 	.word	0xfffffc00

08003b58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d11f      	bne.n	8003bb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d855      	bhi.n	8003c24 <DMA_CheckFifoParam+0xcc>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <DMA_CheckFifoParam+0x28>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003ba3 	.word	0x08003ba3
 8003b88:	08003b91 	.word	0x08003b91
 8003b8c:	08003c25 	.word	0x08003c25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d045      	beq.n	8003c28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba0:	e042      	b.n	8003c28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003baa:	d13f      	bne.n	8003c2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb0:	e03c      	b.n	8003c2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bba:	d121      	bne.n	8003c00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d836      	bhi.n	8003c30 <DMA_CheckFifoParam+0xd8>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <DMA_CheckFifoParam+0x70>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003bdf 	.word	0x08003bdf
 8003bd0:	08003bd9 	.word	0x08003bd9
 8003bd4:	08003bf1 	.word	0x08003bf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	e02f      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d024      	beq.n	8003c34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bee:	e021      	b.n	8003c34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bf8:	d11e      	bne.n	8003c38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bfe:	e01b      	b.n	8003c38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d902      	bls.n	8003c0c <DMA_CheckFifoParam+0xb4>
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d003      	beq.n	8003c12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c0a:	e018      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c10:	e015      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00e      	beq.n	8003c3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
      break;
 8003c22:	e00b      	b.n	8003c3c <DMA_CheckFifoParam+0xe4>
      break;
 8003c24:	bf00      	nop
 8003c26:	e00a      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      break;
 8003c28:	bf00      	nop
 8003c2a:	e008      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      break;
 8003c2c:	bf00      	nop
 8003c2e:	e006      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      break;
 8003c30:	bf00      	nop
 8003c32:	e004      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      break;
 8003c34:	bf00      	nop
 8003c36:	e002      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      break;   
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <DMA_CheckFifoParam+0xe6>
      break;
 8003c3c:	bf00      	nop
    }
  } 
  
  return status; 
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e175      	b.n	8003f58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	f040 8164 	bne.w	8003f52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d00b      	beq.n	8003caa <HAL_GPIO_Init+0x5e>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d007      	beq.n	8003caa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c9e:	2b11      	cmp	r3, #17
 8003ca0:	d003      	beq.n	8003caa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b12      	cmp	r3, #18
 8003ca8:	d130      	bne.n	8003d0c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 0201 	and.w	r2, r3, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	2203      	movs	r2, #3
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x100>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b12      	cmp	r3, #18
 8003d4a:	d123      	bne.n	8003d94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	08da      	lsrs	r2, r3, #3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3208      	adds	r2, #8
 8003d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	220f      	movs	r2, #15
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	691a      	ldr	r2, [r3, #16]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	08da      	lsrs	r2, r3, #3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3208      	adds	r2, #8
 8003d8e:	69b9      	ldr	r1, [r7, #24]
 8003d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	2203      	movs	r2, #3
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0203 	and.w	r2, r3, #3
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80be 	beq.w	8003f52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_GPIO_Init+0x320>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	4a64      	ldr	r2, [pc, #400]	; (8003f6c <HAL_GPIO_Init+0x320>)
 8003ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003de0:	6453      	str	r3, [r2, #68]	; 0x44
 8003de2:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_GPIO_Init+0x320>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003dee:	4a60      	ldr	r2, [pc, #384]	; (8003f70 <HAL_GPIO_Init+0x324>)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	3302      	adds	r3, #2
 8003df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	f003 0303 	and.w	r3, r3, #3
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	220f      	movs	r2, #15
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a57      	ldr	r2, [pc, #348]	; (8003f74 <HAL_GPIO_Init+0x328>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d037      	beq.n	8003e8a <HAL_GPIO_Init+0x23e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a56      	ldr	r2, [pc, #344]	; (8003f78 <HAL_GPIO_Init+0x32c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d031      	beq.n	8003e86 <HAL_GPIO_Init+0x23a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a55      	ldr	r2, [pc, #340]	; (8003f7c <HAL_GPIO_Init+0x330>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d02b      	beq.n	8003e82 <HAL_GPIO_Init+0x236>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a54      	ldr	r2, [pc, #336]	; (8003f80 <HAL_GPIO_Init+0x334>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d025      	beq.n	8003e7e <HAL_GPIO_Init+0x232>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a53      	ldr	r2, [pc, #332]	; (8003f84 <HAL_GPIO_Init+0x338>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d01f      	beq.n	8003e7a <HAL_GPIO_Init+0x22e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_GPIO_Init+0x33c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d019      	beq.n	8003e76 <HAL_GPIO_Init+0x22a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a51      	ldr	r2, [pc, #324]	; (8003f8c <HAL_GPIO_Init+0x340>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_GPIO_Init+0x226>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a50      	ldr	r2, [pc, #320]	; (8003f90 <HAL_GPIO_Init+0x344>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00d      	beq.n	8003e6e <HAL_GPIO_Init+0x222>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4f      	ldr	r2, [pc, #316]	; (8003f94 <HAL_GPIO_Init+0x348>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <HAL_GPIO_Init+0x21e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <HAL_GPIO_Init+0x34c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d101      	bne.n	8003e66 <HAL_GPIO_Init+0x21a>
 8003e62:	2309      	movs	r3, #9
 8003e64:	e012      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e66:	230a      	movs	r3, #10
 8003e68:	e010      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	e00e      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e6e:	2307      	movs	r3, #7
 8003e70:	e00c      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e72:	2306      	movs	r3, #6
 8003e74:	e00a      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e76:	2305      	movs	r3, #5
 8003e78:	e008      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	e006      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e004      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e002      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <HAL_GPIO_Init+0x240>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	f002 0203 	and.w	r2, r2, #3
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	4093      	lsls	r3, r2
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e9c:	4934      	ldr	r1, [pc, #208]	; (8003f70 <HAL_GPIO_Init+0x324>)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	089b      	lsrs	r3, r3, #2
 8003ea2:	3302      	adds	r3, #2
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <HAL_GPIO_Init+0x350>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ece:	4a33      	ldr	r2, [pc, #204]	; (8003f9c <HAL_GPIO_Init+0x350>)
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ed4:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_GPIO_Init+0x350>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ef8:	4a28      	ldr	r2, [pc, #160]	; (8003f9c <HAL_GPIO_Init+0x350>)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003efe:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_GPIO_Init+0x350>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	43db      	mvns	r3, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f22:	4a1e      	ldr	r2, [pc, #120]	; (8003f9c <HAL_GPIO_Init+0x350>)
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f28:	4b1c      	ldr	r3, [pc, #112]	; (8003f9c <HAL_GPIO_Init+0x350>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f4c:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <HAL_GPIO_Init+0x350>)
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3301      	adds	r3, #1
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	f67f ae86 	bls.w	8003c6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f60:	bf00      	nop
 8003f62:	3724      	adds	r7, #36	; 0x24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40013800 	.word	0x40013800
 8003f74:	40020000 	.word	0x40020000
 8003f78:	40020400 	.word	0x40020400
 8003f7c:	40020800 	.word	0x40020800
 8003f80:	40020c00 	.word	0x40020c00
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40021400 	.word	0x40021400
 8003f8c:	40021800 	.word	0x40021800
 8003f90:	40021c00 	.word	0x40021c00
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40022400 	.word	0x40022400
 8003f9c:	40013c00 	.word	0x40013c00

08003fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	887b      	ldrh	r3, [r7, #2]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d002      	beq.n	8003fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
 8003fbc:	e001      	b.n	8003fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	807b      	strh	r3, [r7, #2]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe0:	787b      	ldrb	r3, [r7, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe6:	887a      	ldrh	r2, [r7, #2]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003fec:	e003      	b.n	8003ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	041a      	lsls	r2, r3, #16
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	619a      	str	r2, [r3, #24]
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07f      	b.n	8004116 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fe f89a 	bl	8002164 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	; 0x24
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0201 	bic.w	r2, r2, #1
 8004046:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004054:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004064:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800407a:	609a      	str	r2, [r3, #8]
 800407c:	e006      	b.n	800408c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800408a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b02      	cmp	r3, #2
 8004092:	d104      	bne.n	800409e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800409c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_I2C_Init+0x11c>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	ea42 0103 	orr.w	r1, r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	021a      	lsls	r2, r3, #8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69d9      	ldr	r1, [r3, #28]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	02008000 	.word	0x02008000

08004124 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	461a      	mov	r2, r3
 8004130:	460b      	mov	r3, r1
 8004132:	817b      	strh	r3, [r7, #10]
 8004134:	4613      	mov	r3, r2
 8004136:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b20      	cmp	r3, #32
 8004142:	f040 80da 	bne.w	80042fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_I2C_Master_Transmit+0x30>
 8004150:	2302      	movs	r3, #2
 8004152:	e0d3      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1d8>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800415c:	f7fe fbe0 	bl	8002920 <HAL_GetTick>
 8004160:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2319      	movs	r3, #25
 8004168:	2201      	movs	r2, #1
 800416a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fa00 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0be      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2221      	movs	r2, #33	; 0x21
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2210      	movs	r2, #16
 800418a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	893a      	ldrh	r2, [r7, #8]
 800419e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2bff      	cmp	r3, #255	; 0xff
 80041ae:	d90e      	bls.n	80041ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	22ff      	movs	r2, #255	; 0xff
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	8979      	ldrh	r1, [r7, #10]
 80041be:	4b51      	ldr	r3, [pc, #324]	; (8004304 <HAL_I2C_Master_Transmit+0x1e0>)
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fb62 	bl	8004890 <I2C_TransferConfig>
 80041cc:	e06c      	b.n	80042a8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	8979      	ldrh	r1, [r7, #10]
 80041e0:	4b48      	ldr	r3, [pc, #288]	; (8004304 <HAL_I2C_Master_Transmit+0x1e0>)
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 fb51 	bl	8004890 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80041ee:	e05b      	b.n	80042a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	6a39      	ldr	r1, [r7, #32]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f9fd 	bl	80045f4 <I2C_WaitOnTXISFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e07b      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d034      	beq.n	80042a8 <HAL_I2C_Master_Transmit+0x184>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d130      	bne.n	80042a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f98f 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e04d      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2bff      	cmp	r3, #255	; 0xff
 8004268:	d90e      	bls.n	8004288 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	22ff      	movs	r2, #255	; 0xff
 800426e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	b2da      	uxtb	r2, r3
 8004276:	8979      	ldrh	r1, [r7, #10]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fb05 	bl	8004890 <I2C_TransferConfig>
 8004286:	e00f      	b.n	80042a8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	2300      	movs	r3, #0
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 faf4 	bl	8004890 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d19e      	bne.n	80041f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6a39      	ldr	r1, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 f9dc 	bl	8004674 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e01a      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2220      	movs	r2, #32
 80042cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_I2C_Master_Transmit+0x1e4>)
 80042da:	400b      	ands	r3, r1
 80042dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e000      	b.n	80042fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
  }
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	80002000 	.word	0x80002000
 8004308:	fe00e800 	.word	0xfe00e800

0800430c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	461a      	mov	r2, r3
 8004318:	460b      	mov	r3, r1
 800431a:	817b      	strh	r3, [r7, #10]
 800431c:	4613      	mov	r3, r2
 800431e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b20      	cmp	r3, #32
 800432a:	f040 80db 	bne.w	80044e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_I2C_Master_Receive+0x30>
 8004338:	2302      	movs	r3, #2
 800433a:	e0d4      	b.n	80044e6 <HAL_I2C_Master_Receive+0x1da>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004344:	f7fe faec 	bl	8002920 <HAL_GetTick>
 8004348:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	2319      	movs	r3, #25
 8004350:	2201      	movs	r2, #1
 8004352:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 f90c 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0bf      	b.n	80044e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2222      	movs	r2, #34	; 0x22
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2210      	movs	r2, #16
 8004372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	893a      	ldrh	r2, [r7, #8]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	2bff      	cmp	r3, #255	; 0xff
 8004396:	d90e      	bls.n	80043b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	22ff      	movs	r2, #255	; 0xff
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	8979      	ldrh	r1, [r7, #10]
 80043a6:	4b52      	ldr	r3, [pc, #328]	; (80044f0 <HAL_I2C_Master_Receive+0x1e4>)
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fa6e 	bl	8004890 <I2C_TransferConfig>
 80043b4:	e06d      	b.n	8004492 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	8979      	ldrh	r1, [r7, #10]
 80043c8:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_I2C_Master_Receive+0x1e4>)
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fa5d 	bl	8004890 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80043d6:	e05c      	b.n	8004492 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	6a39      	ldr	r1, [r7, #32]
 80043dc:	68f8      	ldr	r0, [r7, #12]
 80043de:	f000 f985 	bl	80046ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e07c      	b.n	80044e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d034      	beq.n	8004492 <HAL_I2C_Master_Receive+0x186>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	d130      	bne.n	8004492 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	2200      	movs	r2, #0
 8004438:	2180      	movs	r1, #128	; 0x80
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f000 f89a 	bl	8004574 <I2C_WaitOnFlagUntilTimeout>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e04d      	b.n	80044e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	2bff      	cmp	r3, #255	; 0xff
 8004452:	d90e      	bls.n	8004472 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	22ff      	movs	r2, #255	; 0xff
 8004458:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	b2da      	uxtb	r2, r3
 8004460:	8979      	ldrh	r1, [r7, #10]
 8004462:	2300      	movs	r3, #0
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa10 	bl	8004890 <I2C_TransferConfig>
 8004470:	e00f      	b.n	8004492 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	b2da      	uxtb	r2, r3
 8004482:	8979      	ldrh	r1, [r7, #10]
 8004484:	2300      	movs	r3, #0
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f000 f9ff 	bl	8004890 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d19d      	bne.n	80043d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	6a39      	ldr	r1, [r7, #32]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f8e7 	bl	8004674 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e01a      	b.n	80044e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2220      	movs	r2, #32
 80044b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <HAL_I2C_Master_Receive+0x1e8>)
 80044c4:	400b      	ands	r3, r1
 80044c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	80002400 	.word	0x80002400
 80044f4:	fe00e800 	.word	0xfe00e800

080044f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	68f9      	ldr	r1, [r7, #12]
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
  }
}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b02      	cmp	r3, #2
 8004540:	d103      	bne.n	800454a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2200      	movs	r2, #0
 8004548:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d007      	beq.n	8004568 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	619a      	str	r2, [r3, #24]
  }
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004584:	e022      	b.n	80045cc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d01e      	beq.n	80045cc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458e:	f7fe f9c7 	bl	8002920 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d302      	bcc.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d113      	bne.n	80045cc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a8:	f043 0220 	orr.w	r2, r3, #32
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e00f      	b.n	80045ec <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4013      	ands	r3, r2
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	429a      	cmp	r2, r3
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d0cd      	beq.n	8004586 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004600:	e02c      	b.n	800465c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8dc 	bl	80047c4 <I2C_IsAcknowledgeFailed>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e02a      	b.n	800466c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461c:	d01e      	beq.n	800465c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461e:	f7fe f97f 	bl	8002920 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d113      	bne.n	800465c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e007      	b.n	800466c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d1cb      	bne.n	8004602 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004680:	e028      	b.n	80046d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68b9      	ldr	r1, [r7, #8]
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 f89c 	bl	80047c4 <I2C_IsAcknowledgeFailed>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e026      	b.n	80046e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004696:	f7fe f943 	bl	8002920 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d302      	bcc.n	80046ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d113      	bne.n	80046d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e007      	b.n	80046e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d1cf      	bne.n	8004682 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046f8:	e055      	b.n	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f860 	bl	80047c4 <I2C_IsAcknowledgeFailed>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e053      	b.n	80047b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d129      	bne.n	8004770 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b04      	cmp	r3, #4
 8004728:	d105      	bne.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e03f      	b.n	80047b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2220      	movs	r2, #32
 800473c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6859      	ldr	r1, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800474a:	400b      	ands	r3, r1
 800474c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e022      	b.n	80047b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004770:	f7fe f8d6 	bl	8002920 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	429a      	cmp	r2, r3
 800477e:	d302      	bcc.n	8004786 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10f      	bne.n	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2220      	movs	r2, #32
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e007      	b.n	80047b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d1a2      	bne.n	80046fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	fe00e800 	.word	0xfe00e800

080047c4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b10      	cmp	r3, #16
 80047dc:	d151      	bne.n	8004882 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047de:	e022      	b.n	8004826 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	d01e      	beq.n	8004826 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e8:	f7fe f89a 	bl	8002920 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d302      	bcc.n	80047fe <I2C_IsAcknowledgeFailed+0x3a>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d113      	bne.n	8004826 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e02e      	b.n	8004884 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b20      	cmp	r3, #32
 8004832:	d1d5      	bne.n	80047e0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2210      	movs	r2, #16
 800483a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2220      	movs	r2, #32
 8004842:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	f7ff fe71 	bl	800452c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6859      	ldr	r1, [r3, #4]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b0d      	ldr	r3, [pc, #52]	; (800488c <I2C_IsAcknowledgeFailed+0xc8>)
 8004856:	400b      	ands	r3, r1
 8004858:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fe00e800 	.word	0xfe00e800

08004890 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	817b      	strh	r3, [r7, #10]
 800489e:	4613      	mov	r3, r2
 80048a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	0d5b      	lsrs	r3, r3, #21
 80048ac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80048b0:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <I2C_TransferConfig+0x58>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	43db      	mvns	r3, r3
 80048b6:	ea02 0103 	and.w	r1, r2, r3
 80048ba:	897b      	ldrh	r3, [r7, #10]
 80048bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80048c0:	7a7b      	ldrb	r3, [r7, #9]
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	03ff63ff 	.word	0x03ff63ff

080048ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d138      	bne.n	8004974 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800490c:	2302      	movs	r3, #2
 800490e:	e032      	b.n	8004976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2224      	movs	r2, #36	; 0x24
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800493e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6819      	ldr	r1, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004982:	b480      	push	{r7}
 8004984:	b085      	sub	sp, #20
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b20      	cmp	r3, #32
 8004996:	d139      	bne.n	8004a0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e033      	b.n	8004a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2224      	movs	r2, #36	; 0x24
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e022      	b.n	8004a72 <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fd fc5e 	bl	8002300 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2203      	movs	r2, #3
 8004a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f814 	bl	8004a7a <HAL_MMC_InitCard>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e00a      	b.n	8004a72 <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8004a7a:	b5b0      	push	{r4, r5, r7, lr}
 8004a7c:	b08e      	sub	sp, #56	; 0x38
 8004a7e:	af04      	add	r7, sp, #16
 8004a80:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8004a96:	2376      	movs	r3, #118	; 0x76
 8004a98:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hmmc->Instance, Init);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681d      	ldr	r5, [r3, #0]
 8004a9e:	466c      	mov	r4, sp
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004aa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004aac:	f107 0308 	add.w	r3, r7, #8
 8004ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f004 f9b4 	bl	8008e20 <SDMMC_Init>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 8004abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e044      	b.n	8004b54 <HAL_MMC_InitCard+0xda>
  }

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ad8:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hmmc->Instance);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f004 f9ca 	bl	8008e78 <SDMMC_PowerState_ON>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 8004aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d101      	bne.n	8004af6 <HAL_MMC_InitCard+0x7c>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e02e      	b.n	8004b54 <HAL_MMC_InitCard+0xda>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b04:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa54 	bl	8004fb4 <MMC_PowerON>
 8004b0c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00b      	beq.n	8004b2c <HAL_MMC_InitCard+0xb2>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e013      	b.n	8004b54 <HAL_MMC_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f980 	bl	8004e32 <MMC_InitCard>
 8004b32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_MMC_InitCard+0xd8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <HAL_MMC_InitCard+0xda>
  }

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3728      	adds	r7, #40	; 0x28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bdb0      	pop	{r4, r5, r7, pc}

08004b5c <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6a:	0f9b      	lsrs	r3, r3, #30
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	0e9b      	lsrs	r3, r3, #26
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b88:	0e1b      	lsrs	r3, r3, #24
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bbc:	0d1b      	lsrs	r3, r3, #20
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc8:	0c1b      	lsrs	r3, r3, #16
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bda:	0bdb      	lsrs	r3, r3, #15
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bec:	0b9b      	lsrs	r3, r3, #14
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfe:	0b5b      	lsrs	r3, r3, #13
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c10:	0b1b      	lsrs	r3, r3, #12
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2200      	movs	r2, #0
 8004c22:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c28:	009a      	lsls	r2, r3, #2
 8004c2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c2e:	4013      	ands	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c34:	0f92      	lsrs	r2, r2, #30
 8004c36:	431a      	orrs	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c40:	0edb      	lsrs	r3, r3, #27
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c52:	0e1b      	lsrs	r3, r3, #24
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c64:	0d5b      	lsrs	r3, r3, #21
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c76:	0c9b      	lsrs	r3, r3, #18
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c88:	0bdb      	lsrs	r3, r3, #15
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	761a      	strb	r2, [r3, #24]

  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	7e1b      	ldrb	r3, [r3, #24]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	3302      	adds	r3, #2
 8004cac:	2201      	movs	r2, #1
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cb6:	fb02 f203 	mul.w	r2, r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	7a1b      	ldrb	r3, [r3, #8]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	2201      	movs	r2, #1
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54

  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004cd8:	0a52      	lsrs	r2, r2, #9
 8004cda:	fb02 f203 	mul.w	r2, r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ce8:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cee:	0b9b      	lsrs	r3, r3, #14
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d00:	09db      	lsrs	r3, r3, #7
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d22:	0fdb      	lsrs	r3, r3, #31
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d2e:	0f5b      	lsrs	r3, r3, #29
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d40:	0e9b      	lsrs	r3, r3, #26
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	0d9b      	lsrs	r3, r3, #22
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d64:	0d5b      	lsrs	r3, r3, #21
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d94:	0bdb      	lsrs	r3, r3, #15
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da8:	0b9b      	lsrs	r3, r3, #14
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dbc:	0b5b      	lsrs	r3, r3, #13
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dd0:	0b1b      	lsrs	r3, r3, #12
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de4:	0a9b      	lsrs	r3, r3, #10
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8004e32:	b5b0      	push	{r4, r5, r7, lr}
 8004e34:	b094      	sub	sp, #80	; 0x50
 8004e36:	af04      	add	r7, sp, #16
 8004e38:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f004 f827 	bl	8008e96 <SDMMC_GetPowerState>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d102      	bne.n	8004e54 <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8004e4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004e52:	e0aa      	b.n	8004faa <MMC_InitCard+0x178>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f004 f8b6 	bl	8008fca <SDMMC_CmdSendCID>
 8004e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8004e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MMC_InitCard+0x38>
  {
    return errorstate;
 8004e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e68:	e09f      	b.n	8004faa <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 f856 	bl	8008f22 <SDMMC_GetResponse>
 8004e76:	4602      	mov	r2, r0
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2104      	movs	r1, #4
 8004e82:	4618      	mov	r0, r3
 8004e84:	f004 f84d 	bl	8008f22 <SDMMC_GetResponse>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2108      	movs	r1, #8
 8004e94:	4618      	mov	r0, r3
 8004e96:	f004 f844 	bl	8008f22 <SDMMC_GetResponse>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	210c      	movs	r1, #12
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f004 f83b 	bl	8008f22 <SDMMC_GetResponse>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f107 020e 	add.w	r2, r7, #14
 8004eba:	4611      	mov	r1, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f004 f8c1 	bl	8009044 <SDMMC_CmdSetRelAdd>
 8004ec2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8004ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MMC_InitCard+0x9c>
  {
    return errorstate;
 8004eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ecc:	e06d      	b.n	8004faa <MMC_InitCard+0x178>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8004ece:	89fb      	ldrh	r3, [r7, #14]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	4610      	mov	r0, r2
 8004ee4:	f004 f88f 	bl	8009006 <SDMMC_CmdSendCSD>
 8004ee8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <MMC_InitCard+0xc2>
  {
    return errorstate;
 8004ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef2:	e05a      	b.n	8004faa <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f004 f811 	bl	8008f22 <SDMMC_GetResponse>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2104      	movs	r1, #4
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f004 f808 	bl	8008f22 <SDMMC_GetResponse>
 8004f12:	4602      	mov	r2, r0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2108      	movs	r1, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f003 ffff 	bl	8008f22 <SDMMC_GetResponse>
 8004f24:	4602      	mov	r2, r0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	210c      	movs	r1, #12
 8004f30:	4618      	mov	r0, r3
 8004f32:	f003 fff6 	bl	8008f22 <SDMMC_GetResponse>
 8004f36:	4602      	mov	r2, r0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2104      	movs	r1, #4
 8004f42:	4618      	mov	r0, r3
 8004f44:	f003 ffed 	bl	8008f22 <SDMMC_GetResponse>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	0d1a      	lsrs	r2, r3, #20
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8004f50:	f107 0310 	add.w	r3, r7, #16
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff fe00 	bl	8004b5c <HAL_MMC_GetCardCSD>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <MMC_InitCard+0x136>
  {
    return hmmc->ErrorCode;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	e020      	b.n	8004faa <MMC_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f70:	041b      	lsls	r3, r3, #16
 8004f72:	f04f 0400 	mov.w	r4, #0
 8004f76:	461a      	mov	r2, r3
 8004f78:	4623      	mov	r3, r4
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	f003 ffe4 	bl	8008f48 <SDMMC_CmdSelDesel>
 8004f80:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8004f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MMC_InitCard+0x15a>
  {
    return errorstate;
 8004f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8a:	e00e      	b.n	8004faa <MMC_InitCard+0x178>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hmmc->Instance, hmmc->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681d      	ldr	r5, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	466c      	mov	r4, sp
 8004f94:	f103 0210 	add.w	r2, r3, #16
 8004f98:	ca07      	ldmia	r2, {r0, r1, r2}
 8004f9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f003 ff3c 	bl	8008e20 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3740      	adds	r7, #64	; 0x40
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004fb4 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f003 ffde 	bl	8008f8e <SDMMC_CmdGoIdleState>
 8004fd2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d027      	beq.n	800502a <MMC_PowerON+0x76>
  {
    return errorstate;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	e034      	b.n	8005048 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	60ba      	str	r2, [r7, #8]
 8004fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d102      	bne.n	8004ff2 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8004fec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ff0:	e02a      	b.n	8005048 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4916      	ldr	r1, [pc, #88]	; (8005050 <MMC_PowerON+0x9c>)
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f004 f844 	bl	8009086 <SDMMC_CmdOpCondition>
 8004ffe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8005006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800500a:	e01d      	b.n	8005048 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f003 ff85 	bl	8008f22 <SDMMC_GetResponse>
 8005018:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	0fdb      	lsrs	r3, r3, #31
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <MMC_PowerON+0x72>
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <MMC_PowerON+0x74>
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0d6      	beq.n	8004fde <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	0e1b      	lsrs	r3, r3, #24
 8005034:	2bc0      	cmp	r3, #192	; 0xc0
 8005036:	d103      	bne.n	8005040 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	645a      	str	r2, [r3, #68]	; 0x44
 800503e:	e002      	b.n	8005046 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	c0ff8000 	.word	0xc0ff8000

08005054 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a04      	ldr	r2, [pc, #16]	; (8005070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800505e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005062:	6013      	str	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40007000 	.word	0x40007000

08005074 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800507e:	4b23      	ldr	r3, [pc, #140]	; (800510c <HAL_PWREx_EnableOverDrive+0x98>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a22      	ldr	r2, [pc, #136]	; (800510c <HAL_PWREx_EnableOverDrive+0x98>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <HAL_PWREx_EnableOverDrive+0x98>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005096:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1d      	ldr	r2, [pc, #116]	; (8005110 <HAL_PWREx_EnableOverDrive+0x9c>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a2:	f7fd fc3d 	bl	8002920 <HAL_GetTick>
 80050a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050a8:	e009      	b.n	80050be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050aa:	f7fd fc39 	bl	8002920 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050b8:	d901      	bls.n	80050be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e022      	b.n	8005104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050be:	4b14      	ldr	r3, [pc, #80]	; (8005110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ca:	d1ee      	bne.n	80050aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0f      	ldr	r2, [pc, #60]	; (8005110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050d8:	f7fd fc22 	bl	8002920 <HAL_GetTick>
 80050dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050de:	e009      	b.n	80050f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050e0:	f7fd fc1e 	bl	8002920 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ee:	d901      	bls.n	80050f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e007      	b.n	8005104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050f4:	4b06      	ldr	r3, [pc, #24]	; (8005110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005100:	d1ee      	bne.n	80050e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	40007000 	.word	0x40007000

08005114 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af02      	add	r7, sp, #8
 800511a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800511c:	f7fd fc00 	bl	8002920 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e067      	b.n	80051fc <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fd f85b 	bl	80021fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005146:	f241 3188 	movw	r1, #5000	; 0x1388
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f85e 	bl	800520c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	3b01      	subs	r3, #1
 8005160:	021a      	lsls	r2, r3, #8
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	2120      	movs	r1, #32
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f856 	bl	8005228 <QSPI_WaitFlagStateUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005180:	7afb      	ldrb	r3, [r7, #11]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d135      	bne.n	80051f2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <HAL_QSPI_Init+0xf0>)
 800518e:	4013      	ands	r3, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6852      	ldr	r2, [r2, #4]
 8005194:	0611      	lsls	r1, r2, #24
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68d2      	ldr	r2, [r2, #12]
 800519a:	4311      	orrs	r1, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	69d2      	ldr	r2, [r2, #28]
 80051a0:	4311      	orrs	r1, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6a12      	ldr	r2, [r2, #32]
 80051a6:	4311      	orrs	r1, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6812      	ldr	r2, [r2, #0]
 80051ac:	430b      	orrs	r3, r1
 80051ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <HAL_QSPI_Init+0xf4>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6912      	ldr	r2, [r2, #16]
 80051be:	0411      	lsls	r1, r2, #16
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6952      	ldr	r2, [r2, #20]
 80051c4:	4311      	orrs	r1, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6992      	ldr	r2, [r2, #24]
 80051ca:	4311      	orrs	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80051fa:	7afb      	ldrb	r3, [r7, #11]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	00ffff2f 	.word	0x00ffff2f
 8005208:	ffe0f8fe 	.word	0xffe0f8fe

0800520c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005238:	e01a      	b.n	8005270 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d016      	beq.n	8005270 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005242:	f7fd fb6d 	bl	8002920 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10b      	bne.n	8005270 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2204      	movs	r2, #4
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005264:	f043 0201 	orr.w	r2, r3, #1
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e00e      	b.n	800528e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	bf14      	ite	ne
 800527e:	2301      	movne	r3, #1
 8005280:	2300      	moveq	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	461a      	mov	r2, r3
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	429a      	cmp	r2, r3
 800528a:	d1d6      	bne.n	800523a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80052a0:	2300      	movs	r3, #0
 80052a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e29b      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8087 	beq.w	80053ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052bc:	4b96      	ldr	r3, [pc, #600]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d00c      	beq.n	80052e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c8:	4b93      	ldr	r3, [pc, #588]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d112      	bne.n	80052fa <HAL_RCC_OscConfig+0x62>
 80052d4:	4b90      	ldr	r3, [pc, #576]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052e0:	d10b      	bne.n	80052fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e2:	4b8d      	ldr	r3, [pc, #564]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d06c      	beq.n	80053c8 <HAL_RCC_OscConfig+0x130>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d168      	bne.n	80053c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e275      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005302:	d106      	bne.n	8005312 <HAL_RCC_OscConfig+0x7a>
 8005304:	4b84      	ldr	r3, [pc, #528]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a83      	ldr	r2, [pc, #524]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800530a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	e02e      	b.n	8005370 <HAL_RCC_OscConfig+0xd8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10c      	bne.n	8005334 <HAL_RCC_OscConfig+0x9c>
 800531a:	4b7f      	ldr	r3, [pc, #508]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a7e      	ldr	r2, [pc, #504]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	4b7c      	ldr	r3, [pc, #496]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a7b      	ldr	r2, [pc, #492]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800532c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e01d      	b.n	8005370 <HAL_RCC_OscConfig+0xd8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800533c:	d10c      	bne.n	8005358 <HAL_RCC_OscConfig+0xc0>
 800533e:	4b76      	ldr	r3, [pc, #472]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a75      	ldr	r2, [pc, #468]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	4b73      	ldr	r3, [pc, #460]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a72      	ldr	r2, [pc, #456]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e00b      	b.n	8005370 <HAL_RCC_OscConfig+0xd8>
 8005358:	4b6f      	ldr	r3, [pc, #444]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a6e      	ldr	r2, [pc, #440]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b6c      	ldr	r3, [pc, #432]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a6b      	ldr	r2, [pc, #428]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800536a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d013      	beq.n	80053a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fd fad2 	bl	8002920 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005380:	f7fd face 	bl	8002920 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e229      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	4b61      	ldr	r3, [pc, #388]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0xe8>
 800539e:	e014      	b.n	80053ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fd fabe 	bl	8002920 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fd faba 	bl	8002920 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e215      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ba:	4b57      	ldr	r3, [pc, #348]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x110>
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d069      	beq.n	80054aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053d6:	4b50      	ldr	r3, [pc, #320]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e2:	4b4d      	ldr	r3, [pc, #308]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d11c      	bne.n	8005428 <HAL_RCC_OscConfig+0x190>
 80053ee:	4b4a      	ldr	r3, [pc, #296]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d116      	bne.n	8005428 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fa:	4b47      	ldr	r3, [pc, #284]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_RCC_OscConfig+0x17a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d001      	beq.n	8005412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e1e9      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005412:	4b41      	ldr	r3, [pc, #260]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	493d      	ldr	r1, [pc, #244]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005426:	e040      	b.n	80054aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d023      	beq.n	8005478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005430:	4b39      	ldr	r3, [pc, #228]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a38      	ldr	r2, [pc, #224]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fd fa70 	bl	8002920 <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005444:	f7fd fa6c 	bl	8002920 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e1c7      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005456:	4b30      	ldr	r3, [pc, #192]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f0      	beq.n	8005444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005462:	4b2d      	ldr	r3, [pc, #180]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4929      	ldr	r1, [pc, #164]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 8005472:	4313      	orrs	r3, r2
 8005474:	600b      	str	r3, [r1, #0]
 8005476:	e018      	b.n	80054aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005478:	4b27      	ldr	r3, [pc, #156]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a26      	ldr	r2, [pc, #152]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fd fa4c 	bl	8002920 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800548c:	f7fd fa48 	bl	8002920 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e1a3      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549e:	4b1e      	ldr	r3, [pc, #120]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d038      	beq.n	8005528 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d019      	beq.n	80054f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054be:	4b16      	ldr	r3, [pc, #88]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80054c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054c2:	4a15      	ldr	r2, [pc, #84]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ca:	f7fd fa29 	bl	8002920 <HAL_GetTick>
 80054ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054d2:	f7fd fa25 	bl	8002920 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e180      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80054e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e8:	f003 0302 	and.w	r3, r3, #2
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d0f0      	beq.n	80054d2 <HAL_RCC_OscConfig+0x23a>
 80054f0:	e01a      	b.n	8005528 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80054f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f6:	4a08      	ldr	r2, [pc, #32]	; (8005518 <HAL_RCC_OscConfig+0x280>)
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fe:	f7fd fa0f 	bl	8002920 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005504:	e00a      	b.n	800551c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005506:	f7fd fa0b 	bl	8002920 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d903      	bls.n	800551c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e166      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
 8005518:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	4b92      	ldr	r3, [pc, #584]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 800551e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1ee      	bne.n	8005506 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80a4 	beq.w	800567e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005536:	4b8c      	ldr	r3, [pc, #560]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005542:	4b89      	ldr	r3, [pc, #548]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	4a88      	ldr	r2, [pc, #544]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554c:	6413      	str	r3, [r2, #64]	; 0x40
 800554e:	4b86      	ldr	r3, [pc, #536]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555a:	2301      	movs	r3, #1
 800555c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800555e:	4b83      	ldr	r3, [pc, #524]	; (800576c <HAL_RCC_OscConfig+0x4d4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d118      	bne.n	800559c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800556a:	4b80      	ldr	r3, [pc, #512]	; (800576c <HAL_RCC_OscConfig+0x4d4>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a7f      	ldr	r2, [pc, #508]	; (800576c <HAL_RCC_OscConfig+0x4d4>)
 8005570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005576:	f7fd f9d3 	bl	8002920 <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557e:	f7fd f9cf 	bl	8002920 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b64      	cmp	r3, #100	; 0x64
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e12a      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005590:	4b76      	ldr	r3, [pc, #472]	; (800576c <HAL_RCC_OscConfig+0x4d4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d106      	bne.n	80055b2 <HAL_RCC_OscConfig+0x31a>
 80055a4:	4b70      	ldr	r3, [pc, #448]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a8:	4a6f      	ldr	r2, [pc, #444]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	6713      	str	r3, [r2, #112]	; 0x70
 80055b0:	e02d      	b.n	800560e <HAL_RCC_OscConfig+0x376>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10c      	bne.n	80055d4 <HAL_RCC_OscConfig+0x33c>
 80055ba:	4b6b      	ldr	r3, [pc, #428]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	4a6a      	ldr	r2, [pc, #424]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055c0:	f023 0301 	bic.w	r3, r3, #1
 80055c4:	6713      	str	r3, [r2, #112]	; 0x70
 80055c6:	4b68      	ldr	r3, [pc, #416]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ca:	4a67      	ldr	r2, [pc, #412]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055cc:	f023 0304 	bic.w	r3, r3, #4
 80055d0:	6713      	str	r3, [r2, #112]	; 0x70
 80055d2:	e01c      	b.n	800560e <HAL_RCC_OscConfig+0x376>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b05      	cmp	r3, #5
 80055da:	d10c      	bne.n	80055f6 <HAL_RCC_OscConfig+0x35e>
 80055dc:	4b62      	ldr	r3, [pc, #392]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e0:	4a61      	ldr	r2, [pc, #388]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055e2:	f043 0304 	orr.w	r3, r3, #4
 80055e6:	6713      	str	r3, [r2, #112]	; 0x70
 80055e8:	4b5f      	ldr	r3, [pc, #380]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a5e      	ldr	r2, [pc, #376]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	e00b      	b.n	800560e <HAL_RCC_OscConfig+0x376>
 80055f6:	4b5c      	ldr	r3, [pc, #368]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	4a5b      	ldr	r2, [pc, #364]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6713      	str	r3, [r2, #112]	; 0x70
 8005602:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a58      	ldr	r2, [pc, #352]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005608:	f023 0304 	bic.w	r3, r3, #4
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d015      	beq.n	8005642 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005616:	f7fd f983 	bl	8002920 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800561c:	e00a      	b.n	8005634 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fd f97f 	bl	8002920 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e0d8      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005634:	4b4c      	ldr	r3, [pc, #304]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ee      	beq.n	800561e <HAL_RCC_OscConfig+0x386>
 8005640:	e014      	b.n	800566c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005642:	f7fd f96d 	bl	8002920 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005648:	e00a      	b.n	8005660 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564a:	f7fd f969 	bl	8002920 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f241 3288 	movw	r2, #5000	; 0x1388
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0c2      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005660:	4b41      	ldr	r3, [pc, #260]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1ee      	bne.n	800564a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005672:	4b3d      	ldr	r3, [pc, #244]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4a3c      	ldr	r2, [pc, #240]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800567c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 80ae 	beq.w	80057e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005688:	4b37      	ldr	r3, [pc, #220]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f003 030c 	and.w	r3, r3, #12
 8005690:	2b08      	cmp	r3, #8
 8005692:	d06d      	beq.n	8005770 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d14b      	bne.n	8005734 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800569c:	4b32      	ldr	r3, [pc, #200]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a31      	ldr	r2, [pc, #196]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80056a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd f93a 	bl	8002920 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b0:	f7fd f936 	bl	8002920 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e091      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c2:	4b29      	ldr	r3, [pc, #164]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f0      	bne.n	80056b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	019b      	lsls	r3, r3, #6
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	085b      	lsrs	r3, r3, #1
 80056e6:	3b01      	subs	r3, #1
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	491b      	ldr	r1, [pc, #108]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005700:	4b19      	ldr	r3, [pc, #100]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a18      	ldr	r2, [pc, #96]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800570a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fd f908 	bl	8002920 <HAL_GetTick>
 8005710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005712:	e008      	b.n	8005726 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005714:	f7fd f904 	bl	8002920 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	2b02      	cmp	r3, #2
 8005720:	d901      	bls.n	8005726 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e05f      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0f0      	beq.n	8005714 <HAL_RCC_OscConfig+0x47c>
 8005732:	e057      	b.n	80057e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a0b      	ldr	r2, [pc, #44]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 800573a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800573e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fd f8ee 	bl	8002920 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005748:	f7fd f8ea 	bl	8002920 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e045      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575a:	4b03      	ldr	r3, [pc, #12]	; (8005768 <HAL_RCC_OscConfig+0x4d0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x4b0>
 8005766:	e03d      	b.n	80057e4 <HAL_RCC_OscConfig+0x54c>
 8005768:	40023800 	.word	0x40023800
 800576c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005770:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <HAL_RCC_OscConfig+0x558>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d030      	beq.n	80057e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005788:	429a      	cmp	r2, r3
 800578a:	d129      	bne.n	80057e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005796:	429a      	cmp	r2, r3
 8005798:	d122      	bne.n	80057e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057a0:	4013      	ands	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d119      	bne.n	80057e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	3b01      	subs	r3, #1
 80057ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d10f      	bne.n	80057e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d107      	bne.n	80057e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057dc:	429a      	cmp	r2, r3
 80057de:	d001      	beq.n	80057e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e000      	b.n	80057e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800

080057f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0d0      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800580c:	4b6a      	ldr	r3, [pc, #424]	; (80059b8 <HAL_RCC_ClockConfig+0x1c4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d910      	bls.n	800583c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b67      	ldr	r3, [pc, #412]	; (80059b8 <HAL_RCC_ClockConfig+0x1c4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 020f 	bic.w	r2, r3, #15
 8005822:	4965      	ldr	r1, [pc, #404]	; (80059b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b63      	ldr	r3, [pc, #396]	; (80059b8 <HAL_RCC_ClockConfig+0x1c4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0b8      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d020      	beq.n	800588a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	d005      	beq.n	8005860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005854:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	4a58      	ldr	r2, [pc, #352]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 800585a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800585e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a52      	ldr	r2, [pc, #328]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 8005872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005878:	4b50      	ldr	r3, [pc, #320]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	494d      	ldr	r1, [pc, #308]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 8005886:	4313      	orrs	r3, r2
 8005888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d040      	beq.n	8005918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d107      	bne.n	80058ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589e:	4b47      	ldr	r3, [pc, #284]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d115      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e07f      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d107      	bne.n	80058c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d109      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e073      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c6:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e06b      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058d6:	4b39      	ldr	r3, [pc, #228]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f023 0203 	bic.w	r2, r3, #3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4936      	ldr	r1, [pc, #216]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e8:	f7fd f81a 	bl	8002920 <HAL_GetTick>
 80058ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058f0:	f7fd f816 	bl	8002920 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e053      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005906:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 020c 	and.w	r2, r3, #12
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	429a      	cmp	r2, r3
 8005916:	d1eb      	bne.n	80058f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005918:	4b27      	ldr	r3, [pc, #156]	; (80059b8 <HAL_RCC_ClockConfig+0x1c4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d210      	bcs.n	8005948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 020f 	bic.w	r2, r3, #15
 800592e:	4922      	ldr	r1, [pc, #136]	; (80059b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	4313      	orrs	r3, r2
 8005934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e032      	b.n	80059ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d008      	beq.n	8005966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005954:	4b19      	ldr	r3, [pc, #100]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4916      	ldr	r1, [pc, #88]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	490e      	ldr	r1, [pc, #56]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005986:	f000 f831 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 800598a:	4601      	mov	r1, r0
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_RCC_ClockConfig+0x1c8>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	091b      	lsrs	r3, r3, #4
 8005992:	f003 030f 	and.w	r3, r3, #15
 8005996:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x1cc>)
 8005998:	5cd3      	ldrb	r3, [r2, r3]
 800599a:	fa21 f303 	lsr.w	r3, r1, r3
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <HAL_RCC_ClockConfig+0x1d0>)
 80059a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059a2:	4b09      	ldr	r3, [pc, #36]	; (80059c8 <HAL_RCC_ClockConfig+0x1d4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc ff76 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	40023c00 	.word	0x40023c00
 80059bc:	40023800 	.word	0x40023800
 80059c0:	0800d060 	.word	0x0800d060
 80059c4:	20000004 	.word	0x20000004
 80059c8:	20000008 	.word	0x20000008

080059cc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <HAL_RCC_EnableCSS+0x1c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a04      	ldr	r2, [pc, #16]	; (80059e8 <HAL_RCC_EnableCSS+0x1c>)
 80059d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059da:	6013      	str	r3, [r2, #0]
}
 80059dc:	bf00      	nop
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	40023800 	.word	0x40023800

080059ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	2300      	movs	r3, #0
 80059fc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a02:	4b50      	ldr	r3, [pc, #320]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d007      	beq.n	8005a1e <HAL_RCC_GetSysClockFreq+0x32>
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d008      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x38>
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f040 808d 	bne.w	8005b32 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a18:	4b4b      	ldr	r3, [pc, #300]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005a1a:	60bb      	str	r3, [r7, #8]
      break;
 8005a1c:	e08c      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a1e:	4b4b      	ldr	r3, [pc, #300]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a20:	60bb      	str	r3, [r7, #8]
      break;
 8005a22:	e089      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a24:	4b47      	ldr	r3, [pc, #284]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a2e:	4b45      	ldr	r3, [pc, #276]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d023      	beq.n	8005a82 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a3a:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	099b      	lsrs	r3, r3, #6
 8005a40:	f04f 0400 	mov.w	r4, #0
 8005a44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	ea03 0501 	and.w	r5, r3, r1
 8005a50:	ea04 0602 	and.w	r6, r4, r2
 8005a54:	4a3d      	ldr	r2, [pc, #244]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a56:	fb02 f106 	mul.w	r1, r2, r6
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	fb02 f205 	mul.w	r2, r2, r5
 8005a60:	440a      	add	r2, r1
 8005a62:	493a      	ldr	r1, [pc, #232]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a64:	fba5 0101 	umull	r0, r1, r5, r1
 8005a68:	1853      	adds	r3, r2, r1
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f04f 0400 	mov.w	r4, #0
 8005a72:	461a      	mov	r2, r3
 8005a74:	4623      	mov	r3, r4
 8005a76:	f7fa fc3b 	bl	80002f0 <__aeabi_uldivmod>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e049      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a82:	4b30      	ldr	r3, [pc, #192]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	099b      	lsrs	r3, r3, #6
 8005a88:	f04f 0400 	mov.w	r4, #0
 8005a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	ea03 0501 	and.w	r5, r3, r1
 8005a98:	ea04 0602 	and.w	r6, r4, r2
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	4632      	mov	r2, r6
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	f04f 0400 	mov.w	r4, #0
 8005aa8:	0154      	lsls	r4, r2, #5
 8005aaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005aae:	014b      	lsls	r3, r1, #5
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4622      	mov	r2, r4
 8005ab4:	1b49      	subs	r1, r1, r5
 8005ab6:	eb62 0206 	sbc.w	r2, r2, r6
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	f04f 0400 	mov.w	r4, #0
 8005ac2:	0194      	lsls	r4, r2, #6
 8005ac4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ac8:	018b      	lsls	r3, r1, #6
 8005aca:	1a5b      	subs	r3, r3, r1
 8005acc:	eb64 0402 	sbc.w	r4, r4, r2
 8005ad0:	f04f 0100 	mov.w	r1, #0
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	00e2      	lsls	r2, r4, #3
 8005ada:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ade:	00d9      	lsls	r1, r3, #3
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	195b      	adds	r3, r3, r5
 8005ae6:	eb44 0406 	adc.w	r4, r4, r6
 8005aea:	f04f 0100 	mov.w	r1, #0
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	02a2      	lsls	r2, r4, #10
 8005af4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005af8:	0299      	lsls	r1, r3, #10
 8005afa:	460b      	mov	r3, r1
 8005afc:	4614      	mov	r4, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	4621      	mov	r1, r4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f04f 0400 	mov.w	r4, #0
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	f7fa fbf0 	bl	80002f0 <__aeabi_uldivmod>
 8005b10:	4603      	mov	r3, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005b16:	4b0b      	ldr	r3, [pc, #44]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	0c1b      	lsrs	r3, r3, #16
 8005b1c:	f003 0303 	and.w	r3, r3, #3
 8005b20:	3301      	adds	r3, #1
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2e:	60bb      	str	r3, [r7, #8]
      break;
 8005b30:	e002      	b.n	8005b38 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b32:	4b05      	ldr	r3, [pc, #20]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005b34:	60bb      	str	r3, [r7, #8]
      break;
 8005b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b38:	68bb      	ldr	r3, [r7, #8]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800
 8005b48:	00f42400 	.word	0x00f42400
 8005b4c:	017d7840 	.word	0x017d7840

08005b50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20000004 	.word	0x20000004

08005b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b6c:	f7ff fff0 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b70:	4601      	mov	r1, r0
 8005b72:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	0a9b      	lsrs	r3, r3, #10
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	4a03      	ldr	r2, [pc, #12]	; (8005b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	0800d070 	.word	0x0800d070

08005b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b94:	f7ff ffdc 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	0b5b      	lsrs	r3, r3, #13
 8005ba0:	f003 0307 	and.w	r3, r3, #7
 8005ba4:	4a03      	ldr	r2, [pc, #12]	; (8005bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ba6:	5cd3      	ldrb	r3, [r2, r3]
 8005ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	0800d070 	.word	0x0800d070

08005bb8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc4:	2b80      	cmp	r3, #128	; 0x80
 8005bc6:	d104      	bne.n	8005bd2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005bc8:	f000 f80a 	bl	8005be0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8005bcc:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <HAL_RCC_NMI_IRQHandler+0x24>)
 8005bce:	2280      	movs	r2, #128	; 0x80
 8005bd0:	701a      	strb	r2, [r3, #0]
  }
}
 8005bd2:	bf00      	nop
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40023800 	.word	0x40023800
 8005bdc:	4002380e 	.word	0x4002380e

08005be0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d012      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c18:	4b69      	ldr	r3, [pc, #420]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a68      	ldr	r2, [pc, #416]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c22:	6093      	str	r3, [r2, #8]
 8005c24:	4b66      	ldr	r3, [pc, #408]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2c:	4964      	ldr	r1, [pc, #400]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d017      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c4a:	4b5d      	ldr	r3, [pc, #372]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	4959      	ldr	r1, [pc, #356]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c68:	d101      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d101      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005c76:	2301      	movs	r3, #1
 8005c78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d017      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005c86:	4b4e      	ldr	r3, [pc, #312]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	494a      	ldr	r1, [pc, #296]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ca4:	d101      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 808b 	beq.w	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cd4:	4b3a      	ldr	r3, [pc, #232]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	4a39      	ldr	r2, [pc, #228]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cde:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce0:	4b37      	ldr	r3, [pc, #220]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	60bb      	str	r3, [r7, #8]
 8005cea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005cec:	4b35      	ldr	r3, [pc, #212]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a34      	ldr	r2, [pc, #208]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf8:	f7fc fe12 	bl	8002920 <HAL_GetTick>
 8005cfc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d00:	f7fc fe0e 	bl	8002920 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b64      	cmp	r3, #100	; 0x64
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e38d      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005d12:	4b2c      	ldr	r3, [pc, #176]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d1e:	4b28      	ldr	r3, [pc, #160]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d035      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d02e      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d3c:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d44:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d46:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	4a1d      	ldr	r2, [pc, #116]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d50:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	4a1a      	ldr	r2, [pc, #104]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005d5e:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d64:	4b16      	ldr	r3, [pc, #88]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d114      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fc fdd6 	bl	8002920 <HAL_GetTick>
 8005d74:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d76:	e00a      	b.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d78:	f7fc fdd2 	bl	8002920 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e34f      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0ee      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da6:	d111      	bne.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005db6:	400b      	ands	r3, r1
 8005db8:	4901      	ldr	r1, [pc, #4]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	608b      	str	r3, [r1, #8]
 8005dbe:	e00b      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	40007000 	.word	0x40007000
 8005dc8:	0ffffcff 	.word	0x0ffffcff
 8005dcc:	4bb3      	ldr	r3, [pc, #716]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	4ab2      	ldr	r2, [pc, #712]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dd2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005dd6:	6093      	str	r3, [r2, #8]
 8005dd8:	4bb0      	ldr	r3, [pc, #704]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005de4:	49ad      	ldr	r1, [pc, #692]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0310 	and.w	r3, r3, #16
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d010      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005df6:	4ba9      	ldr	r3, [pc, #676]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfc:	4aa7      	ldr	r2, [pc, #668]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005e06:	4ba5      	ldr	r3, [pc, #660]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e08:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	49a2      	ldr	r1, [pc, #648]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e24:	4b9d      	ldr	r3, [pc, #628]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e32:	499a      	ldr	r1, [pc, #616]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e46:	4b95      	ldr	r3, [pc, #596]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e54:	4991      	ldr	r1, [pc, #580]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e68:	4b8c      	ldr	r3, [pc, #560]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e76:	4989      	ldr	r1, [pc, #548]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e8a:	4b84      	ldr	r3, [pc, #528]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	4980      	ldr	r1, [pc, #512]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005eac:	4b7b      	ldr	r3, [pc, #492]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	f023 0203 	bic.w	r2, r3, #3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	4978      	ldr	r1, [pc, #480]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ece:	4b73      	ldr	r3, [pc, #460]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed4:	f023 020c 	bic.w	r2, r3, #12
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005edc:	496f      	ldr	r1, [pc, #444]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ef0:	4b6a      	ldr	r3, [pc, #424]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efe:	4967      	ldr	r1, [pc, #412]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f12:	4b62      	ldr	r3, [pc, #392]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f18:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f20:	495e      	ldr	r1, [pc, #376]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f34:	4b59      	ldr	r3, [pc, #356]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	4956      	ldr	r1, [pc, #344]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005f56:	4b51      	ldr	r3, [pc, #324]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f64:	494d      	ldr	r1, [pc, #308]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005f78:	4b48      	ldr	r3, [pc, #288]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	4945      	ldr	r1, [pc, #276]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005f9a:	4b40      	ldr	r3, [pc, #256]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	493c      	ldr	r1, [pc, #240]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fbc:	4b37      	ldr	r3, [pc, #220]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fca:	4934      	ldr	r1, [pc, #208]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d011      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005fde:	4b2f      	ldr	r3, [pc, #188]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fec:	492b      	ldr	r1, [pc, #172]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ffc:	d101      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ffe:	2301      	movs	r3, #1
 8006000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800600e:	2301      	movs	r3, #1
 8006010:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800601e:	4b1f      	ldr	r3, [pc, #124]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006024:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602c:	491b      	ldr	r1, [pc, #108]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006040:	4b16      	ldr	r3, [pc, #88]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006046:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006050:	4912      	ldr	r1, [pc, #72]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006052:	4313      	orrs	r3, r2
 8006054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006064:	4b0d      	ldr	r3, [pc, #52]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006074:	4909      	ldr	r1, [pc, #36]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00f      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006088:	4b04      	ldr	r3, [pc, #16]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800608a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800608e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	e002      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800609a:	bf00      	nop
 800609c:	40023800 	.word	0x40023800
 80060a0:	4985      	ldr	r1, [pc, #532]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80060b4:	4b80      	ldr	r3, [pc, #512]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c4:	497c      	ldr	r1, [pc, #496]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d005      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060da:	f040 80d6 	bne.w	800628a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060de:	4b76      	ldr	r3, [pc, #472]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a75      	ldr	r2, [pc, #468]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ea:	f7fc fc19 	bl	8002920 <HAL_GetTick>
 80060ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060f0:	e008      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060f2:	f7fc fc15 	bl	8002920 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b64      	cmp	r3, #100	; 0x64
 80060fe:	d901      	bls.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e194      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006104:	4b6c      	ldr	r3, [pc, #432]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1f0      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d021      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11d      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006124:	4b64      	ldr	r3, [pc, #400]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800612a:	0c1b      	lsrs	r3, r3, #16
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006132:	4b61      	ldr	r3, [pc, #388]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006138:	0e1b      	lsrs	r3, r3, #24
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	019a      	lsls	r2, r3, #6
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	431a      	orrs	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	061b      	lsls	r3, r3, #24
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	071b      	lsls	r3, r3, #28
 8006158:	4957      	ldr	r1, [pc, #348]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800615a:	4313      	orrs	r3, r2
 800615c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006174:	d00a      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800617e:	2b00      	cmp	r3, #0
 8006180:	d02e      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800618a:	d129      	bne.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800618c:	4b4a      	ldr	r3, [pc, #296]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800618e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006192:	0c1b      	lsrs	r3, r3, #16
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800619a:	4b47      	ldr	r3, [pc, #284]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800619c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a0:	0f1b      	lsrs	r3, r3, #28
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	019a      	lsls	r2, r3, #6
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	061b      	lsls	r3, r3, #24
 80061ba:	431a      	orrs	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	071b      	lsls	r3, r3, #28
 80061c0:	493d      	ldr	r1, [pc, #244]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061c8:	4b3b      	ldr	r3, [pc, #236]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ce:	f023 021f 	bic.w	r2, r3, #31
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	3b01      	subs	r3, #1
 80061d8:	4937      	ldr	r1, [pc, #220]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01d      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061ec:	4b32      	ldr	r3, [pc, #200]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f2:	0e1b      	lsrs	r3, r3, #24
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061fa:	4b2f      	ldr	r3, [pc, #188]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80061fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006200:	0f1b      	lsrs	r3, r3, #28
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	019a      	lsls	r2, r3, #6
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	431a      	orrs	r2, r3
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	061b      	lsls	r3, r3, #24
 800621a:	431a      	orrs	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	071b      	lsls	r3, r3, #28
 8006220:	4925      	ldr	r1, [pc, #148]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d011      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	019a      	lsls	r2, r3, #6
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	061b      	lsls	r3, r3, #24
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	071b      	lsls	r3, r3, #28
 8006250:	4919      	ldr	r1, [pc, #100]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006252:	4313      	orrs	r3, r2
 8006254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006258:	4b17      	ldr	r3, [pc, #92]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a16      	ldr	r2, [pc, #88]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800625e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006264:	f7fc fb5c 	bl	8002920 <HAL_GetTick>
 8006268:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800626a:	e008      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800626c:	f7fc fb58 	bl	8002920 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b64      	cmp	r3, #100	; 0x64
 8006278:	d901      	bls.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e0d7      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800627e:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0f0      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b01      	cmp	r3, #1
 800628e:	f040 80cd 	bne.w	800642c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006292:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a08      	ldr	r2, [pc, #32]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800629c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800629e:	f7fc fb3f 	bl	8002920 <HAL_GetTick>
 80062a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062a4:	e00a      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062a6:	f7fc fb3b 	bl	8002920 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b64      	cmp	r3, #100	; 0x64
 80062b2:	d903      	bls.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e0ba      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80062b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062bc:	4b5e      	ldr	r3, [pc, #376]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c8:	d0ed      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02e      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d12a      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80062f2:	4b51      	ldr	r3, [pc, #324]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f8:	0c1b      	lsrs	r3, r3, #16
 80062fa:	f003 0303 	and.w	r3, r3, #3
 80062fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006300:	4b4d      	ldr	r3, [pc, #308]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006306:	0f1b      	lsrs	r3, r3, #28
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	019a      	lsls	r2, r3, #6
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	041b      	lsls	r3, r3, #16
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	061b      	lsls	r3, r3, #24
 8006320:	431a      	orrs	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	071b      	lsls	r3, r3, #28
 8006326:	4944      	ldr	r1, [pc, #272]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800632e:	4b42      	ldr	r3, [pc, #264]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006334:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	3b01      	subs	r3, #1
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	493d      	ldr	r1, [pc, #244]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d022      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635c:	d11d      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800635e:	4b36      	ldr	r3, [pc, #216]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006364:	0e1b      	lsrs	r3, r3, #24
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800636c:	4b32      	ldr	r3, [pc, #200]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006372:	0f1b      	lsrs	r3, r3, #28
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	019a      	lsls	r2, r3, #6
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	431a      	orrs	r2, r3
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	061b      	lsls	r3, r3, #24
 800638c:	431a      	orrs	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	071b      	lsls	r3, r3, #28
 8006392:	4929      	ldr	r1, [pc, #164]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d028      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063a6:	4b24      	ldr	r3, [pc, #144]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	0e1b      	lsrs	r3, r3, #24
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063b4:	4b20      	ldr	r3, [pc, #128]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ba:	0c1b      	lsrs	r3, r3, #16
 80063bc:	f003 0303 	and.w	r3, r3, #3
 80063c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	019a      	lsls	r2, r3, #6
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	041b      	lsls	r3, r3, #16
 80063cc:	431a      	orrs	r2, r3
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	061b      	lsls	r3, r3, #24
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	071b      	lsls	r3, r3, #28
 80063da:	4917      	ldr	r1, [pc, #92]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4911      	ldr	r1, [pc, #68]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a0e      	ldr	r2, [pc, #56]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80063fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006404:	f7fc fa8c 	bl	8002920 <HAL_GetTick>
 8006408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800640c:	f7fc fa88 	bl	8002920 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b64      	cmp	r3, #100	; 0x64
 8006418:	d901      	bls.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e007      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800642a:	d1ef      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3720      	adds	r7, #32
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800

0800643c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e084      	b.n	8006558 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fb ffab 	bl	80023c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006484:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800648e:	d902      	bls.n	8006496 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e002      	b.n	800649c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800649a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064a4:	d007      	beq.n	80064b6 <HAL_SPI_Init+0x7a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064c6:	d903      	bls.n	80064d0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
 80064ce:	e002      	b.n	80064d6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	ea42 0103 	orr.w	r1, r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f003 0204 	and.w	r2, r3, #4
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	ea42 0103 	orr.w	r1, r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006546:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_SPI_Transmit+0x22>
 800657e:	2302      	movs	r3, #2
 8006580:	e150      	b.n	8006824 <HAL_SPI_Transmit+0x2c4>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800658a:	f7fc f9c9 	bl	8002920 <HAL_GetTick>
 800658e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065a0:	2302      	movs	r3, #2
 80065a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065a4:	e135      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_SPI_Transmit+0x52>
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065b6:	e12c      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2203      	movs	r2, #3
 80065bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	88fa      	ldrh	r2, [r7, #6]
 80065d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006602:	d107      	bne.n	8006614 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006612:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d007      	beq.n	8006632 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006630:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800663a:	d94b      	bls.n	80066d4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_SPI_Transmit+0xea>
 8006644:	8afb      	ldrh	r3, [r7, #22]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d13e      	bne.n	80066c8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	881a      	ldrh	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	1c9a      	adds	r2, r3, #2
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800666e:	e02b      	b.n	80066c8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d112      	bne.n	80066a4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066a2:	e011      	b.n	80066c8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066a4:	f7fc f93c 	bl	8002920 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d803      	bhi.n	80066bc <HAL_SPI_Transmit+0x15c>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ba:	d102      	bne.n	80066c2 <HAL_SPI_Transmit+0x162>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066c6:	e0a4      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ce      	bne.n	8006670 <HAL_SPI_Transmit+0x110>
 80066d2:	e07c      	b.n	80067ce <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_SPI_Transmit+0x182>
 80066dc:	8afb      	ldrh	r3, [r7, #22]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d170      	bne.n	80067c4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d912      	bls.n	8006712 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	881a      	ldrh	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	1c9a      	adds	r2, r3, #2
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b02      	subs	r3, #2
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006710:	e058      	b.n	80067c4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006738:	e044      	b.n	80067c4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d12b      	bne.n	80067a0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	d912      	bls.n	8006778 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	881a      	ldrh	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	1c9a      	adds	r2, r3, #2
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b02      	subs	r3, #2
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006776:	e025      	b.n	80067c4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800679e:	e011      	b.n	80067c4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a0:	f7fc f8be 	bl	8002920 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d803      	bhi.n	80067b8 <HAL_SPI_Transmit+0x258>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d102      	bne.n	80067be <HAL_SPI_Transmit+0x25e>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067c2:	e026      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1b5      	bne.n	800673a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fca2 	bl	800711c <SPI_EndRxTxTransaction>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e000      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006810:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006822:	7ffb      	ldrb	r3, [r7, #31]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af02      	add	r7, sp, #8
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006848:	d112      	bne.n	8006870 <HAL_SPI_Receive+0x44>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10e      	bne.n	8006870 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2204      	movs	r2, #4
 8006856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800685a:	88fa      	ldrh	r2, [r7, #6]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f908 	bl	8006a7c <HAL_SPI_TransmitReceive>
 800686c:	4603      	mov	r3, r0
 800686e:	e101      	b.n	8006a74 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_SPI_Receive+0x52>
 800687a:	2302      	movs	r3, #2
 800687c:	e0fa      	b.n	8006a74 <HAL_SPI_Receive+0x248>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006886:	f7fc f84b 	bl	8002920 <HAL_GetTick>
 800688a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b01      	cmp	r3, #1
 8006896:	d002      	beq.n	800689e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006898:	2302      	movs	r3, #2
 800689a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800689c:	e0e1      	b.n	8006a62 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d002      	beq.n	80068aa <HAL_SPI_Receive+0x7e>
 80068a4:	88fb      	ldrh	r3, [r7, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80068ae:	e0d8      	b.n	8006a62 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2204      	movs	r2, #4
 80068b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	88fa      	ldrh	r2, [r7, #6]
 80068c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068fa:	d908      	bls.n	800690e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800690a:	605a      	str	r2, [r3, #4]
 800690c:	e007      	b.n	800691e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800691c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006926:	d107      	bne.n	8006938 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006936:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b40      	cmp	r3, #64	; 0x40
 8006944:	d007      	beq.n	8006956 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006954:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800695e:	d867      	bhi.n	8006a30 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006960:	e030      	b.n	80069c4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b01      	cmp	r3, #1
 800696e:	d117      	bne.n	80069a0 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f103 020c 	add.w	r2, r3, #12
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800699e:	e011      	b.n	80069c4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069a0:	f7fb ffbe 	bl	8002920 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d803      	bhi.n	80069b8 <HAL_SPI_Receive+0x18c>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b6:	d102      	bne.n	80069be <HAL_SPI_Receive+0x192>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80069c2:	e04e      	b.n	8006a62 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1c8      	bne.n	8006962 <HAL_SPI_Receive+0x136>
 80069d0:	e034      	b.n	8006a3c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d115      	bne.n	8006a0c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68da      	ldr	r2, [r3, #12]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	b292      	uxth	r2, r2
 80069ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006a0a:	e011      	b.n	8006a30 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a0c:	f7fb ff88 	bl	8002920 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d803      	bhi.n	8006a24 <HAL_SPI_Receive+0x1f8>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d102      	bne.n	8006a2a <HAL_SPI_Receive+0x1fe>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a2e:	e018      	b.n	8006a62 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ca      	bne.n	80069d2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fb13 	bl	800706c <SPI_EndRxTransaction>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d002      	beq.n	8006a60 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	75fb      	strb	r3, [r7, #23]
 8006a5e:	e000      	b.n	8006a62 <HAL_SPI_Receive+0x236>
  }

error :
 8006a60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x26>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e1fb      	b.n	8006e9a <HAL_SPI_TransmitReceive+0x41e>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006aaa:	f7fb ff39 	bl	8002920 <HAL_GetTick>
 8006aae:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ab6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006abe:	887b      	ldrh	r3, [r7, #2]
 8006ac0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006ac2:	887b      	ldrh	r3, [r7, #2]
 8006ac4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ac6:	7efb      	ldrb	r3, [r7, #27]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d00e      	beq.n	8006aea <HAL_SPI_TransmitReceive+0x6e>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ad2:	d106      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x66>
 8006adc:	7efb      	ldrb	r3, [r7, #27]
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d003      	beq.n	8006aea <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ae8:	e1cd      	b.n	8006e86 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <HAL_SPI_TransmitReceive+0x80>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <HAL_SPI_TransmitReceive+0x80>
 8006af6:	887b      	ldrh	r3, [r7, #2]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d103      	bne.n	8006b04 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006b02:	e1c0      	b.n	8006e86 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d003      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2205      	movs	r2, #5
 8006b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	887a      	ldrh	r2, [r7, #2]
 8006b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	887a      	ldrh	r2, [r7, #2]
 8006b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	887a      	ldrh	r2, [r7, #2]
 8006b3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	887a      	ldrh	r2, [r7, #2]
 8006b44:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b5a:	d802      	bhi.n	8006b62 <HAL_SPI_TransmitReceive+0xe6>
 8006b5c:	8a3b      	ldrh	r3, [r7, #16]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d908      	bls.n	8006b74 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b70:	605a      	str	r2, [r3, #4]
 8006b72:	e007      	b.n	8006b84 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b82:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8e:	2b40      	cmp	r3, #64	; 0x40
 8006b90:	d007      	beq.n	8006ba2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006baa:	d97c      	bls.n	8006ca6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_SPI_TransmitReceive+0x13e>
 8006bb4:	8a7b      	ldrh	r3, [r7, #18]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d169      	bne.n	8006c8e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbe:	881a      	ldrh	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	1c9a      	adds	r2, r3, #2
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bde:	e056      	b.n	8006c8e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d11b      	bne.n	8006c26 <HAL_SPI_TransmitReceive+0x1aa>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d016      	beq.n	8006c26 <HAL_SPI_TransmitReceive+0x1aa>
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d113      	bne.n	8006c26 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	1c9a      	adds	r2, r3, #2
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d11c      	bne.n	8006c6e <HAL_SPI_TransmitReceive+0x1f2>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d016      	beq.n	8006c6e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	1c9a      	adds	r2, r3, #2
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c6e:	f7fb fe57 	bl	8002920 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d807      	bhi.n	8006c8e <HAL_SPI_TransmitReceive+0x212>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d003      	beq.n	8006c8e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c8c:	e0fb      	b.n	8006e86 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1a3      	bne.n	8006be0 <HAL_SPI_TransmitReceive+0x164>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d19d      	bne.n	8006be0 <HAL_SPI_TransmitReceive+0x164>
 8006ca4:	e0df      	b.n	8006e66 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x23a>
 8006cae:	8a7b      	ldrh	r3, [r7, #18]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	f040 80cb 	bne.w	8006e4c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d912      	bls.n	8006ce6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	881a      	ldrh	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	1c9a      	adds	r2, r3, #2
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b02      	subs	r3, #2
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ce4:	e0b2      	b.n	8006e4c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	330c      	adds	r3, #12
 8006cf0:	7812      	ldrb	r2, [r2, #0]
 8006cf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	1c5a      	adds	r2, r3, #1
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d0c:	e09e      	b.n	8006e4c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d134      	bne.n	8006d86 <HAL_SPI_TransmitReceive+0x30a>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d02f      	beq.n	8006d86 <HAL_SPI_TransmitReceive+0x30a>
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d12c      	bne.n	8006d86 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d912      	bls.n	8006d5c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3a:	881a      	ldrh	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	1c9a      	adds	r2, r3, #2
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b02      	subs	r3, #2
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d5a:	e012      	b.n	8006d82 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	330c      	adds	r3, #12
 8006d66:	7812      	ldrb	r2, [r2, #0]
 8006d68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d148      	bne.n	8006e26 <HAL_SPI_TransmitReceive+0x3aa>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d042      	beq.n	8006e26 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d923      	bls.n	8006df4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	b292      	uxth	r2, r2
 8006db8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	1c9a      	adds	r2, r3, #2
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b02      	subs	r3, #2
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d81f      	bhi.n	8006e22 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006df0:	605a      	str	r2, [r3, #4]
 8006df2:	e016      	b.n	8006e22 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f103 020c 	add.w	r2, r3, #12
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	7812      	ldrb	r2, [r2, #0]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e22:	2301      	movs	r3, #1
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e26:	f7fb fd7b 	bl	8002920 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d803      	bhi.n	8006e3e <HAL_SPI_TransmitReceive+0x3c2>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d102      	bne.n	8006e44 <HAL_SPI_TransmitReceive+0x3c8>
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006e4a:	e01c      	b.n	8006e86 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f47f af5b 	bne.w	8006d0e <HAL_SPI_TransmitReceive+0x292>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f47f af54 	bne.w	8006d0e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e66:	69fa      	ldr	r2, [r7, #28]
 8006e68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f000 f956 	bl	800711c <SPI_EndRxTxTransaction>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d006      	beq.n	8006e84 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	661a      	str	r2, [r3, #96]	; 0x60
 8006e82:	e000      	b.n	8006e86 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006e84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3728      	adds	r7, #40	; 0x28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b083      	sub	sp, #12
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006eb0:	b2db      	uxtb	r3, r3
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	603b      	str	r3, [r7, #0]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ece:	e04c      	b.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d048      	beq.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006ed8:	f7fb fd22 	bl	8002920 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d902      	bls.n	8006eee <SPI_WaitFlagStateUntilTimeout+0x30>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d13d      	bne.n	8006f6a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006efc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f06:	d111      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f10:	d004      	beq.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1a:	d107      	bne.n	8006f2c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f34:	d10f      	bne.n	8006f56 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e00f      	b.n	8006f8a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4013      	ands	r3, r2
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	bf0c      	ite	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	2300      	movne	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d1a3      	bne.n	8006ed0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006fa0:	e057      	b.n	8007052 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fa8:	d106      	bne.n	8006fb8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d103      	bne.n	8006fb8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbe:	d048      	beq.n	8007052 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006fc0:	f7fb fcae 	bl	8002920 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d902      	bls.n	8006fd6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d13d      	bne.n	8007052 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	685a      	ldr	r2, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fee:	d111      	bne.n	8007014 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff8:	d004      	beq.n	8007004 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007002:	d107      	bne.n	8007014 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800701c:	d10f      	bne.n	800703e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800703c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e008      	b.n	8007064 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	4013      	ands	r3, r2
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	429a      	cmp	r2, r3
 8007060:	d19f      	bne.n	8006fa2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b086      	sub	sp, #24
 8007070:	af02      	add	r7, sp, #8
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007080:	d111      	bne.n	80070a6 <SPI_EndRxTransaction+0x3a>
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708a:	d004      	beq.n	8007096 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007094:	d107      	bne.n	80070a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	2180      	movs	r1, #128	; 0x80
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f7ff ff04 	bl	8006ebe <SPI_WaitFlagStateUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d007      	beq.n	80070cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c0:	f043 0220 	orr.w	r2, r3, #32
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e023      	b.n	8007114 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070d4:	d11d      	bne.n	8007112 <SPI_EndRxTransaction+0xa6>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070de:	d004      	beq.n	80070ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e8:	d113      	bne.n	8007112 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f7ff ff4b 	bl	8006f92 <SPI_WaitFifoStateUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d007      	beq.n	8007112 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007106:	f043 0220 	orr.w	r2, r3, #32
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e000      	b.n	8007114 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2200      	movs	r2, #0
 8007130:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f7ff ff2c 	bl	8006f92 <SPI_WaitFifoStateUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007144:	f043 0220 	orr.w	r2, r3, #32
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e027      	b.n	80071a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	2200      	movs	r2, #0
 8007158:	2180      	movs	r1, #128	; 0x80
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f7ff feaf 	bl	8006ebe <SPI_WaitFlagStateUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716a:	f043 0220 	orr.w	r2, r3, #32
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e014      	b.n	80071a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2200      	movs	r2, #0
 800717e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7ff ff05 	bl	8006f92 <SPI_WaitFifoStateUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d007      	beq.n	800719e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007192:	f043 0220 	orr.w	r2, r3, #32
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e000      	b.n	80071a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e01d      	b.n	80071f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fb f93c 	bl	800244c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f000 f966 	bl	80074b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
	...

08007200 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2201      	movs	r2, #1
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fc4e 	bl	8007ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a17      	ldr	r2, [pc, #92]	; (800727c <HAL_TIM_PWM_Start+0x7c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <HAL_TIM_PWM_Start+0x2c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a16      	ldr	r2, [pc, #88]	; (8007280 <HAL_TIM_PWM_Start+0x80>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d101      	bne.n	8007230 <HAL_TIM_PWM_Start+0x30>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <HAL_TIM_PWM_Start+0x32>
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007244:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	4b0d      	ldr	r3, [pc, #52]	; (8007284 <HAL_TIM_PWM_Start+0x84>)
 800724e:	4013      	ands	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d00b      	beq.n	8007270 <HAL_TIM_PWM_Start+0x70>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800725e:	d007      	beq.n	8007270 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40010000 	.word	0x40010000
 8007280:	40010400 	.word	0x40010400
 8007284:	00010007 	.word	0x00010007

08007288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800729e:	2302      	movs	r3, #2
 80072a0:	e105      	b.n	80074ae <HAL_TIM_PWM_ConfigChannel+0x226>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b14      	cmp	r3, #20
 80072b6:	f200 80f0 	bhi.w	800749a <HAL_TIM_PWM_ConfigChannel+0x212>
 80072ba:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80072bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c0:	08007315 	.word	0x08007315
 80072c4:	0800749b 	.word	0x0800749b
 80072c8:	0800749b 	.word	0x0800749b
 80072cc:	0800749b 	.word	0x0800749b
 80072d0:	08007355 	.word	0x08007355
 80072d4:	0800749b 	.word	0x0800749b
 80072d8:	0800749b 	.word	0x0800749b
 80072dc:	0800749b 	.word	0x0800749b
 80072e0:	08007397 	.word	0x08007397
 80072e4:	0800749b 	.word	0x0800749b
 80072e8:	0800749b 	.word	0x0800749b
 80072ec:	0800749b 	.word	0x0800749b
 80072f0:	080073d7 	.word	0x080073d7
 80072f4:	0800749b 	.word	0x0800749b
 80072f8:	0800749b 	.word	0x0800749b
 80072fc:	0800749b 	.word	0x0800749b
 8007300:	08007419 	.word	0x08007419
 8007304:	0800749b 	.word	0x0800749b
 8007308:	0800749b 	.word	0x0800749b
 800730c:	0800749b 	.word	0x0800749b
 8007310:	08007459 	.word	0x08007459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f96c 	bl	80075f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699a      	ldr	r2, [r3, #24]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0208 	orr.w	r2, r2, #8
 800732e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0204 	bic.w	r2, r2, #4
 800733e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6999      	ldr	r1, [r3, #24]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	619a      	str	r2, [r3, #24]
      break;
 8007352:	e0a3      	b.n	800749c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68b9      	ldr	r1, [r7, #8]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 f9be 	bl	80076dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800736e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699a      	ldr	r2, [r3, #24]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6999      	ldr	r1, [r3, #24]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	021a      	lsls	r2, r3, #8
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	619a      	str	r2, [r3, #24]
      break;
 8007394:	e082      	b.n	800749c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	4618      	mov	r0, r3
 800739e:	f000 fa15 	bl	80077cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	69da      	ldr	r2, [r3, #28]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0208 	orr.w	r2, r2, #8
 80073b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	69da      	ldr	r2, [r3, #28]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0204 	bic.w	r2, r2, #4
 80073c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69d9      	ldr	r1, [r3, #28]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	61da      	str	r2, [r3, #28]
      break;
 80073d4:	e062      	b.n	800749c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 fa6b 	bl	80078b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69da      	ldr	r2, [r3, #28]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	69da      	ldr	r2, [r3, #28]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69d9      	ldr	r1, [r3, #28]
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	021a      	lsls	r2, r3, #8
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	61da      	str	r2, [r3, #28]
      break;
 8007416:	e041      	b.n	800749c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 faa2 	bl	8007968 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0208 	orr.w	r2, r2, #8
 8007432:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0204 	bic.w	r2, r2, #4
 8007442:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007456:	e021      	b.n	800749c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68b9      	ldr	r1, [r7, #8]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fad4 	bl	8007a0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	021a      	lsls	r2, r3, #8
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007498:	e000      	b.n	800749c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800749a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop

080074b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a40      	ldr	r2, [pc, #256]	; (80075cc <TIM_Base_SetConfig+0x114>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d013      	beq.n	80074f8 <TIM_Base_SetConfig+0x40>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d6:	d00f      	beq.n	80074f8 <TIM_Base_SetConfig+0x40>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a3d      	ldr	r2, [pc, #244]	; (80075d0 <TIM_Base_SetConfig+0x118>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d00b      	beq.n	80074f8 <TIM_Base_SetConfig+0x40>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a3c      	ldr	r2, [pc, #240]	; (80075d4 <TIM_Base_SetConfig+0x11c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d007      	beq.n	80074f8 <TIM_Base_SetConfig+0x40>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a3b      	ldr	r2, [pc, #236]	; (80075d8 <TIM_Base_SetConfig+0x120>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d003      	beq.n	80074f8 <TIM_Base_SetConfig+0x40>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a3a      	ldr	r2, [pc, #232]	; (80075dc <TIM_Base_SetConfig+0x124>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d108      	bne.n	800750a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a2f      	ldr	r2, [pc, #188]	; (80075cc <TIM_Base_SetConfig+0x114>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d02b      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007518:	d027      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2c      	ldr	r2, [pc, #176]	; (80075d0 <TIM_Base_SetConfig+0x118>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d023      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a2b      	ldr	r2, [pc, #172]	; (80075d4 <TIM_Base_SetConfig+0x11c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d01f      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a2a      	ldr	r2, [pc, #168]	; (80075d8 <TIM_Base_SetConfig+0x120>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01b      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a29      	ldr	r2, [pc, #164]	; (80075dc <TIM_Base_SetConfig+0x124>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d017      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a28      	ldr	r2, [pc, #160]	; (80075e0 <TIM_Base_SetConfig+0x128>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d013      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a27      	ldr	r2, [pc, #156]	; (80075e4 <TIM_Base_SetConfig+0x12c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d00f      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a26      	ldr	r2, [pc, #152]	; (80075e8 <TIM_Base_SetConfig+0x130>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d00b      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a25      	ldr	r2, [pc, #148]	; (80075ec <TIM_Base_SetConfig+0x134>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d007      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a24      	ldr	r2, [pc, #144]	; (80075f0 <TIM_Base_SetConfig+0x138>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a23      	ldr	r2, [pc, #140]	; (80075f4 <TIM_Base_SetConfig+0x13c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d108      	bne.n	800757c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4313      	orrs	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a0a      	ldr	r2, [pc, #40]	; (80075cc <TIM_Base_SetConfig+0x114>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d003      	beq.n	80075b0 <TIM_Base_SetConfig+0xf8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a0c      	ldr	r2, [pc, #48]	; (80075dc <TIM_Base_SetConfig+0x124>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d103      	bne.n	80075b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	615a      	str	r2, [r3, #20]
}
 80075be:	bf00      	nop
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	40010000 	.word	0x40010000
 80075d0:	40000400 	.word	0x40000400
 80075d4:	40000800 	.word	0x40000800
 80075d8:	40000c00 	.word	0x40000c00
 80075dc:	40010400 	.word	0x40010400
 80075e0:	40014000 	.word	0x40014000
 80075e4:	40014400 	.word	0x40014400
 80075e8:	40014800 	.word	0x40014800
 80075ec:	40001800 	.word	0x40001800
 80075f0:	40001c00 	.word	0x40001c00
 80075f4:	40002000 	.word	0x40002000

080075f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	f023 0201 	bic.w	r2, r3, #1
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4b2b      	ldr	r3, [pc, #172]	; (80076d0 <TIM_OC1_SetConfig+0xd8>)
 8007624:	4013      	ands	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 0303 	bic.w	r3, r3, #3
 800762e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	4313      	orrs	r3, r2
 8007638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f023 0302 	bic.w	r3, r3, #2
 8007640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a21      	ldr	r2, [pc, #132]	; (80076d4 <TIM_OC1_SetConfig+0xdc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d003      	beq.n	800765c <TIM_OC1_SetConfig+0x64>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a20      	ldr	r2, [pc, #128]	; (80076d8 <TIM_OC1_SetConfig+0xe0>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d10c      	bne.n	8007676 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0308 	bic.w	r3, r3, #8
 8007662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	4313      	orrs	r3, r2
 800766c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f023 0304 	bic.w	r3, r3, #4
 8007674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a16      	ldr	r2, [pc, #88]	; (80076d4 <TIM_OC1_SetConfig+0xdc>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d003      	beq.n	8007686 <TIM_OC1_SetConfig+0x8e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <TIM_OC1_SetConfig+0xe0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d111      	bne.n	80076aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800768c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	695b      	ldr	r3, [r3, #20]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	621a      	str	r2, [r3, #32]
}
 80076c4:	bf00      	nop
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	fffeff8f 	.word	0xfffeff8f
 80076d4:	40010000 	.word	0x40010000
 80076d8:	40010400 	.word	0x40010400

080076dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	f023 0210 	bic.w	r2, r3, #16
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4b2e      	ldr	r3, [pc, #184]	; (80077c0 <TIM_OC2_SetConfig+0xe4>)
 8007708:	4013      	ands	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f023 0320 	bic.w	r3, r3, #32
 8007726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a23      	ldr	r2, [pc, #140]	; (80077c4 <TIM_OC2_SetConfig+0xe8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_OC2_SetConfig+0x68>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a22      	ldr	r2, [pc, #136]	; (80077c8 <TIM_OC2_SetConfig+0xec>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d10d      	bne.n	8007760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800774a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800775e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <TIM_OC2_SetConfig+0xe8>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d003      	beq.n	8007770 <TIM_OC2_SetConfig+0x94>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <TIM_OC2_SetConfig+0xec>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d113      	bne.n	8007798 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007776:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800777e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4313      	orrs	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	4313      	orrs	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	feff8fff 	.word	0xfeff8fff
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40010400 	.word	0x40010400

080077cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4b2d      	ldr	r3, [pc, #180]	; (80078ac <TIM_OC3_SetConfig+0xe0>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 0303 	bic.w	r3, r3, #3
 8007802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a22      	ldr	r2, [pc, #136]	; (80078b0 <TIM_OC3_SetConfig+0xe4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_OC3_SetConfig+0x66>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a21      	ldr	r2, [pc, #132]	; (80078b4 <TIM_OC3_SetConfig+0xe8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d10d      	bne.n	800784e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800784c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a17      	ldr	r2, [pc, #92]	; (80078b0 <TIM_OC3_SetConfig+0xe4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <TIM_OC3_SetConfig+0x92>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a16      	ldr	r2, [pc, #88]	; (80078b4 <TIM_OC3_SetConfig+0xe8>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d113      	bne.n	8007886 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800786c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4313      	orrs	r3, r2
 8007884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	621a      	str	r2, [r3, #32]
}
 80078a0:	bf00      	nop
 80078a2:	371c      	adds	r7, #28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	fffeff8f 	.word	0xfffeff8f
 80078b0:	40010000 	.word	0x40010000
 80078b4:	40010400 	.word	0x40010400

080078b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4b1e      	ldr	r3, [pc, #120]	; (800795c <TIM_OC4_SetConfig+0xa4>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	031b      	lsls	r3, r3, #12
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a13      	ldr	r2, [pc, #76]	; (8007960 <TIM_OC4_SetConfig+0xa8>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_OC4_SetConfig+0x68>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a12      	ldr	r2, [pc, #72]	; (8007964 <TIM_OC4_SetConfig+0xac>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d109      	bne.n	8007934 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	019b      	lsls	r3, r3, #6
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	feff8fff 	.word	0xfeff8fff
 8007960:	40010000 	.word	0x40010000
 8007964:	40010400 	.word	0x40010400

08007968 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <TIM_OC5_SetConfig+0x98>)
 8007994:	4013      	ands	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	041b      	lsls	r3, r3, #16
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a12      	ldr	r2, [pc, #72]	; (8007a04 <TIM_OC5_SetConfig+0x9c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_OC5_SetConfig+0x5e>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4a11      	ldr	r2, [pc, #68]	; (8007a08 <TIM_OC5_SetConfig+0xa0>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d109      	bne.n	80079da <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	021b      	lsls	r3, r3, #8
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	621a      	str	r2, [r3, #32]
}
 80079f4:	bf00      	nop
 80079f6:	371c      	adds	r7, #28
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	fffeff8f 	.word	0xfffeff8f
 8007a04:	40010000 	.word	0x40010000
 8007a08:	40010400 	.word	0x40010400

08007a0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <TIM_OC6_SetConfig+0x9c>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	051b      	lsls	r3, r3, #20
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a13      	ldr	r2, [pc, #76]	; (8007aac <TIM_OC6_SetConfig+0xa0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC6_SetConfig+0x60>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <TIM_OC6_SetConfig+0xa4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d109      	bne.n	8007a80 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	feff8fff 	.word	0xfeff8fff
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40010400 	.word	0x40010400

08007ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8007acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6a1a      	ldr	r2, [r3, #32]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	43db      	mvns	r3, r3
 8007ad6:	401a      	ands	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a1a      	ldr	r2, [r3, #32]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aec:	431a      	orrs	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	621a      	str	r2, [r3, #32]
}
 8007af2:	bf00      	nop
 8007af4:	371c      	adds	r7, #28
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d101      	bne.n	8007b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b14:	2302      	movs	r3, #2
 8007b16:	e06d      	b.n	8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a30      	ldr	r2, [pc, #192]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a2f      	ldr	r2, [pc, #188]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d108      	bne.n	8007b5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a20      	ldr	r2, [pc, #128]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d022      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8a:	d01d      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1d      	ldr	r2, [pc, #116]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d018      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1c      	ldr	r2, [pc, #112]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d013      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a1a      	ldr	r2, [pc, #104]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d00e      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a15      	ldr	r2, [pc, #84]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d009      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a16      	ldr	r2, [pc, #88]	; (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d004      	beq.n	8007bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a15      	ldr	r2, [pc, #84]	; (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d10c      	bne.n	8007be2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	40010000 	.word	0x40010000
 8007c04:	40010400 	.word	0x40010400
 8007c08:	40000400 	.word	0x40000400
 8007c0c:	40000800 	.word	0x40000800
 8007c10:	40000c00 	.word	0x40000c00
 8007c14:	40014000 	.word	0x40014000
 8007c18:	40001800 	.word	0x40001800

08007c1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d101      	bne.n	8007c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c34:	2302      	movs	r3, #2
 8007c36:	e065      	b.n	8007d04 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	041b      	lsls	r3, r3, #16
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a16      	ldr	r2, [pc, #88]	; (8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d004      	beq.n	8007cc6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a14      	ldr	r2, [pc, #80]	; (8007d14 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d115      	bne.n	8007cf2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	051b      	lsls	r3, r3, #20
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	40010000 	.word	0x40010000
 8007d14:	40010400 	.word	0x40010400

08007d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e040      	b.n	8007dac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fa fc1a 	bl	8002574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2224      	movs	r2, #36	; 0x24
 8007d44:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0201 	bic.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fb40 	bl	80083dc <UART_SetConfig>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d101      	bne.n	8007d66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e022      	b.n	8007dac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fdde 	bl	8008930 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0201 	orr.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fe65 	bl	8008a74 <UART_CheckIdleState>
 8007daa:	4603      	mov	r3, r0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b08a      	sub	sp, #40	; 0x28
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d17f      	bne.n	8007ecc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <HAL_UART_Transmit+0x24>
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e078      	b.n	8007ece <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d101      	bne.n	8007dea <HAL_UART_Transmit+0x36>
 8007de6:	2302      	movs	r3, #2
 8007de8:	e071      	b.n	8007ece <HAL_UART_Transmit+0x11a>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2221      	movs	r2, #33	; 0x21
 8007dfc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007dfe:	f7fa fd8f 	bl	8002920 <HAL_GetTick>
 8007e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	88fa      	ldrh	r2, [r7, #6]
 8007e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e1c:	d108      	bne.n	8007e30 <HAL_UART_Transmit+0x7c>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d104      	bne.n	8007e30 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	e003      	b.n	8007e38 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007e40:	e02c      	b.n	8007e9c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	2180      	movs	r1, #128	; 0x80
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fe56 	bl	8008afe <UART_WaitOnFlagUntilTimeout>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e038      	b.n	8007ece <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10b      	bne.n	8007e7a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	3302      	adds	r3, #2
 8007e76:	61bb      	str	r3, [r7, #24]
 8007e78:	e007      	b.n	8007e8a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	781a      	ldrb	r2, [r3, #0]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	3b01      	subs	r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1cc      	bne.n	8007e42 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2140      	movs	r1, #64	; 0x40
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f000 fe23 	bl	8008afe <UART_WaitOnFlagUntilTimeout>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d001      	beq.n	8007ec2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e005      	b.n	8007ece <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e000      	b.n	8007ece <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007ecc:	2302      	movs	r3, #2
  }
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3720      	adds	r7, #32
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eea:	2b20      	cmp	r3, #32
 8007eec:	d164      	bne.n	8007fb8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_UART_Transmit_DMA+0x22>
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e05d      	b.n	8007fba <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d101      	bne.n	8007f0c <HAL_UART_Transmit_DMA+0x34>
 8007f08:	2302      	movs	r3, #2
 8007f0a:	e056      	b.n	8007fba <HAL_UART_Transmit_DMA+0xe2>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	88fa      	ldrh	r2, [r7, #6]
 8007f1e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	88fa      	ldrh	r2, [r7, #6]
 8007f26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2221      	movs	r2, #33	; 0x21
 8007f34:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d02a      	beq.n	8007f94 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f42:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <HAL_UART_Transmit_DMA+0xec>)
 8007f44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f4a:	4a1f      	ldr	r2, [pc, #124]	; (8007fc8 <HAL_UART_Transmit_DMA+0xf0>)
 8007f4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f52:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <HAL_UART_Transmit_DMA+0xf4>)
 8007f54:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f66:	4619      	mov	r1, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3328      	adds	r3, #40	; 0x28
 8007f6e:	461a      	mov	r2, r3
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	f7fb fb81 	bl	8003678 <HAL_DMA_Start_IT>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2210      	movs	r2, #16
 8007f80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e012      	b.n	8007fba <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2240      	movs	r2, #64	; 0x40
 8007f9a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fb2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	e000      	b.n	8007fba <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8007fb8:	2302      	movs	r3, #2
  }
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	08008c5f 	.word	0x08008c5f
 8007fc8:	08008caf 	.word	0x08008caf
 8007fcc:	08008d4b 	.word	0x08008d4b

08007fd0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fe2:	2b20      	cmp	r3, #32
 8007fe4:	d16c      	bne.n	80080c0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_UART_Receive_DMA+0x22>
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e065      	b.n	80080c2 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d101      	bne.n	8008004 <HAL_UART_Receive_DMA+0x34>
 8008000:	2302      	movs	r3, #2
 8008002:	e05e      	b.n	80080c2 <HAL_UART_Receive_DMA+0xf2>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	88fa      	ldrh	r2, [r7, #6]
 8008016:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2222      	movs	r2, #34	; 0x22
 8008024:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802a:	2b00      	cmp	r3, #0
 800802c:	d02a      	beq.n	8008084 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008032:	4a26      	ldr	r2, [pc, #152]	; (80080cc <HAL_UART_Receive_DMA+0xfc>)
 8008034:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803a:	4a25      	ldr	r2, [pc, #148]	; (80080d0 <HAL_UART_Receive_DMA+0x100>)
 800803c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008042:	4a24      	ldr	r2, [pc, #144]	; (80080d4 <HAL_UART_Receive_DMA+0x104>)
 8008044:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804a:	2200      	movs	r2, #0
 800804c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3324      	adds	r3, #36	; 0x24
 8008058:	4619      	mov	r1, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805e:	461a      	mov	r2, r3
 8008060:	88fb      	ldrh	r3, [r7, #6]
 8008062:	f7fb fb09 	bl	8003678 <HAL_DMA_Start_IT>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2210      	movs	r2, #16
 8008070:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2220      	movs	r2, #32
 800807e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e01e      	b.n	80080c2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800809a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080ba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	08008ccb 	.word	0x08008ccb
 80080d0:	08008d2f 	.word	0x08008d2f
 80080d4:	08008d4b 	.word	0x08008d4b

080080d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80080fe:	4013      	ands	r3, r2
 8008100:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d113      	bne.n	8008130 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f003 0320 	and.w	r3, r3, #32
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00e      	beq.n	8008130 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b00      	cmp	r3, #0
 800811a:	d009      	beq.n	8008130 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 8114 	beq.w	800834e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
      }
      return;
 800812e:	e10e      	b.n	800834e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 80d6 	beq.w	80082e4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	d105      	bne.n	800814e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 80cb 	beq.w	80082e4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00e      	beq.n	8008176 <HAL_UART_IRQHandler+0x9e>
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2201      	movs	r2, #1
 8008168:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800816e:	f043 0201 	orr.w	r2, r3, #1
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00e      	beq.n	800819e <HAL_UART_IRQHandler+0xc6>
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d009      	beq.n	800819e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	2202      	movs	r2, #2
 8008190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008196:	f043 0204 	orr.w	r2, r3, #4
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00e      	beq.n	80081c6 <HAL_UART_IRQHandler+0xee>
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f003 0301 	and.w	r3, r3, #1
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d009      	beq.n	80081c6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2204      	movs	r2, #4
 80081b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081be:	f043 0202 	orr.w	r2, r3, #2
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	f003 0308 	and.w	r3, r3, #8
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d013      	beq.n	80081f8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d104      	bne.n	80081e4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2208      	movs	r2, #8
 80081ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081f0:	f043 0208 	orr.w	r2, r3, #8
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00f      	beq.n	8008222 <HAL_UART_IRQHandler+0x14a>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00a      	beq.n	8008222 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800821a:	f043 0220 	orr.w	r2, r3, #32
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 8093 	beq.w	8008352 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800822c:	69fb      	ldr	r3, [r7, #28]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00c      	beq.n	8008250 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	f003 0320 	and.w	r3, r3, #32
 800823c:	2b00      	cmp	r3, #0
 800823e:	d007      	beq.n	8008250 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008254:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	d004      	beq.n	800826e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800826a:	2b00      	cmp	r3, #0
 800826c:	d031      	beq.n	80082d2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fcd5 	bl	8008c1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827e:	2b40      	cmp	r3, #64	; 0x40
 8008280:	d123      	bne.n	80082ca <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689a      	ldr	r2, [r3, #8]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008290:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d013      	beq.n	80082c2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829e:	4a30      	ldr	r2, [pc, #192]	; (8008360 <HAL_UART_IRQHandler+0x288>)
 80082a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fb fa46 	bl	8003738 <HAL_DMA_Abort_IT>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d016      	beq.n	80082e0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80082bc:	4610      	mov	r0, r2
 80082be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c0:	e00e      	b.n	80082e0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f876 	bl	80083b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c8:	e00a      	b.n	80082e0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f872 	bl	80083b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d0:	e006      	b.n	80082e0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f86e 	bl	80083b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80082de:	e038      	b.n	8008352 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e0:	bf00      	nop
    return;
 80082e2:	e036      	b.n	8008352 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00d      	beq.n	800830a <HAL_UART_IRQHandler+0x232>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f860 	bl	80083c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008308:	e026      	b.n	8008358 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00d      	beq.n	8008330 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008322:	2b00      	cmp	r3, #0
 8008324:	d017      	beq.n	8008356 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
    }
    return;
 800832e:	e012      	b.n	8008356 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00e      	beq.n	8008358 <HAL_UART_IRQHandler+0x280>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fd52 	bl	8008dee <UART_EndTransmit_IT>
    return;
 800834a:	bf00      	nop
 800834c:	e004      	b.n	8008358 <HAL_UART_IRQHandler+0x280>
      return;
 800834e:	bf00      	nop
 8008350:	e002      	b.n	8008358 <HAL_UART_IRQHandler+0x280>
    return;
 8008352:	bf00      	nop
 8008354:	e000      	b.n	8008358 <HAL_UART_IRQHandler+0x280>
    return;
 8008356:	bf00      	nop
  }

}
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	08008dc3 	.word	0x08008dc3

08008364 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b088      	sub	sp, #32
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	431a      	orrs	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4bb1      	ldr	r3, [pc, #708]	; (80086d0 <UART_SetConfig+0x2f4>)
 800840c:	4013      	ands	r3, r2
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6812      	ldr	r2, [r2, #0]
 8008412:	6939      	ldr	r1, [r7, #16]
 8008414:	430b      	orrs	r3, r1
 8008416:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68da      	ldr	r2, [r3, #12]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a1b      	ldr	r3, [r3, #32]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	430a      	orrs	r2, r1
 8008450:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a9f      	ldr	r2, [pc, #636]	; (80086d4 <UART_SetConfig+0x2f8>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d121      	bne.n	80084a0 <UART_SetConfig+0xc4>
 800845c:	4b9e      	ldr	r3, [pc, #632]	; (80086d8 <UART_SetConfig+0x2fc>)
 800845e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	2b03      	cmp	r3, #3
 8008468:	d816      	bhi.n	8008498 <UART_SetConfig+0xbc>
 800846a:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <UART_SetConfig+0x94>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	08008481 	.word	0x08008481
 8008474:	0800848d 	.word	0x0800848d
 8008478:	08008487 	.word	0x08008487
 800847c:	08008493 	.word	0x08008493
 8008480:	2301      	movs	r3, #1
 8008482:	77fb      	strb	r3, [r7, #31]
 8008484:	e151      	b.n	800872a <UART_SetConfig+0x34e>
 8008486:	2302      	movs	r3, #2
 8008488:	77fb      	strb	r3, [r7, #31]
 800848a:	e14e      	b.n	800872a <UART_SetConfig+0x34e>
 800848c:	2304      	movs	r3, #4
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e14b      	b.n	800872a <UART_SetConfig+0x34e>
 8008492:	2308      	movs	r3, #8
 8008494:	77fb      	strb	r3, [r7, #31]
 8008496:	e148      	b.n	800872a <UART_SetConfig+0x34e>
 8008498:	2310      	movs	r3, #16
 800849a:	77fb      	strb	r3, [r7, #31]
 800849c:	bf00      	nop
 800849e:	e144      	b.n	800872a <UART_SetConfig+0x34e>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a8d      	ldr	r2, [pc, #564]	; (80086dc <UART_SetConfig+0x300>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d134      	bne.n	8008514 <UART_SetConfig+0x138>
 80084aa:	4b8b      	ldr	r3, [pc, #556]	; (80086d8 <UART_SetConfig+0x2fc>)
 80084ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b0:	f003 030c 	and.w	r3, r3, #12
 80084b4:	2b0c      	cmp	r3, #12
 80084b6:	d829      	bhi.n	800850c <UART_SetConfig+0x130>
 80084b8:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <UART_SetConfig+0xe4>)
 80084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084be:	bf00      	nop
 80084c0:	080084f5 	.word	0x080084f5
 80084c4:	0800850d 	.word	0x0800850d
 80084c8:	0800850d 	.word	0x0800850d
 80084cc:	0800850d 	.word	0x0800850d
 80084d0:	08008501 	.word	0x08008501
 80084d4:	0800850d 	.word	0x0800850d
 80084d8:	0800850d 	.word	0x0800850d
 80084dc:	0800850d 	.word	0x0800850d
 80084e0:	080084fb 	.word	0x080084fb
 80084e4:	0800850d 	.word	0x0800850d
 80084e8:	0800850d 	.word	0x0800850d
 80084ec:	0800850d 	.word	0x0800850d
 80084f0:	08008507 	.word	0x08008507
 80084f4:	2300      	movs	r3, #0
 80084f6:	77fb      	strb	r3, [r7, #31]
 80084f8:	e117      	b.n	800872a <UART_SetConfig+0x34e>
 80084fa:	2302      	movs	r3, #2
 80084fc:	77fb      	strb	r3, [r7, #31]
 80084fe:	e114      	b.n	800872a <UART_SetConfig+0x34e>
 8008500:	2304      	movs	r3, #4
 8008502:	77fb      	strb	r3, [r7, #31]
 8008504:	e111      	b.n	800872a <UART_SetConfig+0x34e>
 8008506:	2308      	movs	r3, #8
 8008508:	77fb      	strb	r3, [r7, #31]
 800850a:	e10e      	b.n	800872a <UART_SetConfig+0x34e>
 800850c:	2310      	movs	r3, #16
 800850e:	77fb      	strb	r3, [r7, #31]
 8008510:	bf00      	nop
 8008512:	e10a      	b.n	800872a <UART_SetConfig+0x34e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a71      	ldr	r2, [pc, #452]	; (80086e0 <UART_SetConfig+0x304>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d120      	bne.n	8008560 <UART_SetConfig+0x184>
 800851e:	4b6e      	ldr	r3, [pc, #440]	; (80086d8 <UART_SetConfig+0x2fc>)
 8008520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008524:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008528:	2b10      	cmp	r3, #16
 800852a:	d00f      	beq.n	800854c <UART_SetConfig+0x170>
 800852c:	2b10      	cmp	r3, #16
 800852e:	d802      	bhi.n	8008536 <UART_SetConfig+0x15a>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <UART_SetConfig+0x164>
 8008534:	e010      	b.n	8008558 <UART_SetConfig+0x17c>
 8008536:	2b20      	cmp	r3, #32
 8008538:	d005      	beq.n	8008546 <UART_SetConfig+0x16a>
 800853a:	2b30      	cmp	r3, #48	; 0x30
 800853c:	d009      	beq.n	8008552 <UART_SetConfig+0x176>
 800853e:	e00b      	b.n	8008558 <UART_SetConfig+0x17c>
 8008540:	2300      	movs	r3, #0
 8008542:	77fb      	strb	r3, [r7, #31]
 8008544:	e0f1      	b.n	800872a <UART_SetConfig+0x34e>
 8008546:	2302      	movs	r3, #2
 8008548:	77fb      	strb	r3, [r7, #31]
 800854a:	e0ee      	b.n	800872a <UART_SetConfig+0x34e>
 800854c:	2304      	movs	r3, #4
 800854e:	77fb      	strb	r3, [r7, #31]
 8008550:	e0eb      	b.n	800872a <UART_SetConfig+0x34e>
 8008552:	2308      	movs	r3, #8
 8008554:	77fb      	strb	r3, [r7, #31]
 8008556:	e0e8      	b.n	800872a <UART_SetConfig+0x34e>
 8008558:	2310      	movs	r3, #16
 800855a:	77fb      	strb	r3, [r7, #31]
 800855c:	bf00      	nop
 800855e:	e0e4      	b.n	800872a <UART_SetConfig+0x34e>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a5f      	ldr	r2, [pc, #380]	; (80086e4 <UART_SetConfig+0x308>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d120      	bne.n	80085ac <UART_SetConfig+0x1d0>
 800856a:	4b5b      	ldr	r3, [pc, #364]	; (80086d8 <UART_SetConfig+0x2fc>)
 800856c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008570:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008574:	2b40      	cmp	r3, #64	; 0x40
 8008576:	d00f      	beq.n	8008598 <UART_SetConfig+0x1bc>
 8008578:	2b40      	cmp	r3, #64	; 0x40
 800857a:	d802      	bhi.n	8008582 <UART_SetConfig+0x1a6>
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <UART_SetConfig+0x1b0>
 8008580:	e010      	b.n	80085a4 <UART_SetConfig+0x1c8>
 8008582:	2b80      	cmp	r3, #128	; 0x80
 8008584:	d005      	beq.n	8008592 <UART_SetConfig+0x1b6>
 8008586:	2bc0      	cmp	r3, #192	; 0xc0
 8008588:	d009      	beq.n	800859e <UART_SetConfig+0x1c2>
 800858a:	e00b      	b.n	80085a4 <UART_SetConfig+0x1c8>
 800858c:	2300      	movs	r3, #0
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e0cb      	b.n	800872a <UART_SetConfig+0x34e>
 8008592:	2302      	movs	r3, #2
 8008594:	77fb      	strb	r3, [r7, #31]
 8008596:	e0c8      	b.n	800872a <UART_SetConfig+0x34e>
 8008598:	2304      	movs	r3, #4
 800859a:	77fb      	strb	r3, [r7, #31]
 800859c:	e0c5      	b.n	800872a <UART_SetConfig+0x34e>
 800859e:	2308      	movs	r3, #8
 80085a0:	77fb      	strb	r3, [r7, #31]
 80085a2:	e0c2      	b.n	800872a <UART_SetConfig+0x34e>
 80085a4:	2310      	movs	r3, #16
 80085a6:	77fb      	strb	r3, [r7, #31]
 80085a8:	bf00      	nop
 80085aa:	e0be      	b.n	800872a <UART_SetConfig+0x34e>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a4d      	ldr	r2, [pc, #308]	; (80086e8 <UART_SetConfig+0x30c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d124      	bne.n	8008600 <UART_SetConfig+0x224>
 80085b6:	4b48      	ldr	r3, [pc, #288]	; (80086d8 <UART_SetConfig+0x2fc>)
 80085b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c4:	d012      	beq.n	80085ec <UART_SetConfig+0x210>
 80085c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ca:	d802      	bhi.n	80085d2 <UART_SetConfig+0x1f6>
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <UART_SetConfig+0x204>
 80085d0:	e012      	b.n	80085f8 <UART_SetConfig+0x21c>
 80085d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d6:	d006      	beq.n	80085e6 <UART_SetConfig+0x20a>
 80085d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085dc:	d009      	beq.n	80085f2 <UART_SetConfig+0x216>
 80085de:	e00b      	b.n	80085f8 <UART_SetConfig+0x21c>
 80085e0:	2300      	movs	r3, #0
 80085e2:	77fb      	strb	r3, [r7, #31]
 80085e4:	e0a1      	b.n	800872a <UART_SetConfig+0x34e>
 80085e6:	2302      	movs	r3, #2
 80085e8:	77fb      	strb	r3, [r7, #31]
 80085ea:	e09e      	b.n	800872a <UART_SetConfig+0x34e>
 80085ec:	2304      	movs	r3, #4
 80085ee:	77fb      	strb	r3, [r7, #31]
 80085f0:	e09b      	b.n	800872a <UART_SetConfig+0x34e>
 80085f2:	2308      	movs	r3, #8
 80085f4:	77fb      	strb	r3, [r7, #31]
 80085f6:	e098      	b.n	800872a <UART_SetConfig+0x34e>
 80085f8:	2310      	movs	r3, #16
 80085fa:	77fb      	strb	r3, [r7, #31]
 80085fc:	bf00      	nop
 80085fe:	e094      	b.n	800872a <UART_SetConfig+0x34e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a39      	ldr	r2, [pc, #228]	; (80086ec <UART_SetConfig+0x310>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d124      	bne.n	8008654 <UART_SetConfig+0x278>
 800860a:	4b33      	ldr	r3, [pc, #204]	; (80086d8 <UART_SetConfig+0x2fc>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008610:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008618:	d012      	beq.n	8008640 <UART_SetConfig+0x264>
 800861a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861e:	d802      	bhi.n	8008626 <UART_SetConfig+0x24a>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <UART_SetConfig+0x258>
 8008624:	e012      	b.n	800864c <UART_SetConfig+0x270>
 8008626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800862a:	d006      	beq.n	800863a <UART_SetConfig+0x25e>
 800862c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008630:	d009      	beq.n	8008646 <UART_SetConfig+0x26a>
 8008632:	e00b      	b.n	800864c <UART_SetConfig+0x270>
 8008634:	2301      	movs	r3, #1
 8008636:	77fb      	strb	r3, [r7, #31]
 8008638:	e077      	b.n	800872a <UART_SetConfig+0x34e>
 800863a:	2302      	movs	r3, #2
 800863c:	77fb      	strb	r3, [r7, #31]
 800863e:	e074      	b.n	800872a <UART_SetConfig+0x34e>
 8008640:	2304      	movs	r3, #4
 8008642:	77fb      	strb	r3, [r7, #31]
 8008644:	e071      	b.n	800872a <UART_SetConfig+0x34e>
 8008646:	2308      	movs	r3, #8
 8008648:	77fb      	strb	r3, [r7, #31]
 800864a:	e06e      	b.n	800872a <UART_SetConfig+0x34e>
 800864c:	2310      	movs	r3, #16
 800864e:	77fb      	strb	r3, [r7, #31]
 8008650:	bf00      	nop
 8008652:	e06a      	b.n	800872a <UART_SetConfig+0x34e>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a25      	ldr	r2, [pc, #148]	; (80086f0 <UART_SetConfig+0x314>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d124      	bne.n	80086a8 <UART_SetConfig+0x2cc>
 800865e:	4b1e      	ldr	r3, [pc, #120]	; (80086d8 <UART_SetConfig+0x2fc>)
 8008660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008664:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866c:	d012      	beq.n	8008694 <UART_SetConfig+0x2b8>
 800866e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008672:	d802      	bhi.n	800867a <UART_SetConfig+0x29e>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d007      	beq.n	8008688 <UART_SetConfig+0x2ac>
 8008678:	e012      	b.n	80086a0 <UART_SetConfig+0x2c4>
 800867a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800867e:	d006      	beq.n	800868e <UART_SetConfig+0x2b2>
 8008680:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008684:	d009      	beq.n	800869a <UART_SetConfig+0x2be>
 8008686:	e00b      	b.n	80086a0 <UART_SetConfig+0x2c4>
 8008688:	2300      	movs	r3, #0
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e04d      	b.n	800872a <UART_SetConfig+0x34e>
 800868e:	2302      	movs	r3, #2
 8008690:	77fb      	strb	r3, [r7, #31]
 8008692:	e04a      	b.n	800872a <UART_SetConfig+0x34e>
 8008694:	2304      	movs	r3, #4
 8008696:	77fb      	strb	r3, [r7, #31]
 8008698:	e047      	b.n	800872a <UART_SetConfig+0x34e>
 800869a:	2308      	movs	r3, #8
 800869c:	77fb      	strb	r3, [r7, #31]
 800869e:	e044      	b.n	800872a <UART_SetConfig+0x34e>
 80086a0:	2310      	movs	r3, #16
 80086a2:	77fb      	strb	r3, [r7, #31]
 80086a4:	bf00      	nop
 80086a6:	e040      	b.n	800872a <UART_SetConfig+0x34e>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a11      	ldr	r2, [pc, #68]	; (80086f4 <UART_SetConfig+0x318>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d139      	bne.n	8008726 <UART_SetConfig+0x34a>
 80086b2:	4b09      	ldr	r3, [pc, #36]	; (80086d8 <UART_SetConfig+0x2fc>)
 80086b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80086bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086c0:	d027      	beq.n	8008712 <UART_SetConfig+0x336>
 80086c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086c6:	d817      	bhi.n	80086f8 <UART_SetConfig+0x31c>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01c      	beq.n	8008706 <UART_SetConfig+0x32a>
 80086cc:	e027      	b.n	800871e <UART_SetConfig+0x342>
 80086ce:	bf00      	nop
 80086d0:	efff69f3 	.word	0xefff69f3
 80086d4:	40011000 	.word	0x40011000
 80086d8:	40023800 	.word	0x40023800
 80086dc:	40004400 	.word	0x40004400
 80086e0:	40004800 	.word	0x40004800
 80086e4:	40004c00 	.word	0x40004c00
 80086e8:	40005000 	.word	0x40005000
 80086ec:	40011400 	.word	0x40011400
 80086f0:	40007800 	.word	0x40007800
 80086f4:	40007c00 	.word	0x40007c00
 80086f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086fc:	d006      	beq.n	800870c <UART_SetConfig+0x330>
 80086fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008702:	d009      	beq.n	8008718 <UART_SetConfig+0x33c>
 8008704:	e00b      	b.n	800871e <UART_SetConfig+0x342>
 8008706:	2300      	movs	r3, #0
 8008708:	77fb      	strb	r3, [r7, #31]
 800870a:	e00e      	b.n	800872a <UART_SetConfig+0x34e>
 800870c:	2302      	movs	r3, #2
 800870e:	77fb      	strb	r3, [r7, #31]
 8008710:	e00b      	b.n	800872a <UART_SetConfig+0x34e>
 8008712:	2304      	movs	r3, #4
 8008714:	77fb      	strb	r3, [r7, #31]
 8008716:	e008      	b.n	800872a <UART_SetConfig+0x34e>
 8008718:	2308      	movs	r3, #8
 800871a:	77fb      	strb	r3, [r7, #31]
 800871c:	e005      	b.n	800872a <UART_SetConfig+0x34e>
 800871e:	2310      	movs	r3, #16
 8008720:	77fb      	strb	r3, [r7, #31]
 8008722:	bf00      	nop
 8008724:	e001      	b.n	800872a <UART_SetConfig+0x34e>
 8008726:	2310      	movs	r3, #16
 8008728:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008732:	d17f      	bne.n	8008834 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008734:	7ffb      	ldrb	r3, [r7, #31]
 8008736:	2b08      	cmp	r3, #8
 8008738:	d85c      	bhi.n	80087f4 <UART_SetConfig+0x418>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <UART_SetConfig+0x364>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008765 	.word	0x08008765
 8008744:	08008785 	.word	0x08008785
 8008748:	080087a5 	.word	0x080087a5
 800874c:	080087f5 	.word	0x080087f5
 8008750:	080087bd 	.word	0x080087bd
 8008754:	080087f5 	.word	0x080087f5
 8008758:	080087f5 	.word	0x080087f5
 800875c:	080087f5 	.word	0x080087f5
 8008760:	080087dd 	.word	0x080087dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008764:	f7fd fa00 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 8008768:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	005a      	lsls	r2, r3, #1
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	085b      	lsrs	r3, r3, #1
 8008774:	441a      	add	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	fbb2 f3f3 	udiv	r3, r2, r3
 800877e:	b29b      	uxth	r3, r3
 8008780:	61bb      	str	r3, [r7, #24]
        break;
 8008782:	e03a      	b.n	80087fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008784:	f7fd fa04 	bl	8005b90 <HAL_RCC_GetPCLK2Freq>
 8008788:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	005a      	lsls	r2, r3, #1
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	441a      	add	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	fbb2 f3f3 	udiv	r3, r2, r3
 800879e:	b29b      	uxth	r3, r3
 80087a0:	61bb      	str	r3, [r7, #24]
        break;
 80087a2:	e02a      	b.n	80087fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	085a      	lsrs	r2, r3, #1
 80087aa:	4b5f      	ldr	r3, [pc, #380]	; (8008928 <UART_SetConfig+0x54c>)
 80087ac:	4413      	add	r3, r2
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6852      	ldr	r2, [r2, #4]
 80087b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	61bb      	str	r3, [r7, #24]
        break;
 80087ba:	e01e      	b.n	80087fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087bc:	f7fd f916 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80087c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	005a      	lsls	r2, r3, #1
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	085b      	lsrs	r3, r3, #1
 80087cc:	441a      	add	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	61bb      	str	r3, [r7, #24]
        break;
 80087da:	e00e      	b.n	80087fa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	085b      	lsrs	r3, r3, #1
 80087e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	61bb      	str	r3, [r7, #24]
        break;
 80087f2:	e002      	b.n	80087fa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	75fb      	strb	r3, [r7, #23]
        break;
 80087f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b0f      	cmp	r3, #15
 80087fe:	d916      	bls.n	800882e <UART_SetConfig+0x452>
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008806:	d212      	bcs.n	800882e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f023 030f 	bic.w	r3, r3, #15
 8008810:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	b29b      	uxth	r3, r3
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	b29a      	uxth	r2, r3
 800881e:	897b      	ldrh	r3, [r7, #10]
 8008820:	4313      	orrs	r3, r2
 8008822:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	897a      	ldrh	r2, [r7, #10]
 800882a:	60da      	str	r2, [r3, #12]
 800882c:	e070      	b.n	8008910 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	75fb      	strb	r3, [r7, #23]
 8008832:	e06d      	b.n	8008910 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008834:	7ffb      	ldrb	r3, [r7, #31]
 8008836:	2b08      	cmp	r3, #8
 8008838:	d859      	bhi.n	80088ee <UART_SetConfig+0x512>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x464>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008865 	.word	0x08008865
 8008844:	08008883 	.word	0x08008883
 8008848:	080088a1 	.word	0x080088a1
 800884c:	080088ef 	.word	0x080088ef
 8008850:	080088b9 	.word	0x080088b9
 8008854:	080088ef 	.word	0x080088ef
 8008858:	080088ef 	.word	0x080088ef
 800885c:	080088ef 	.word	0x080088ef
 8008860:	080088d7 	.word	0x080088d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008864:	f7fd f980 	bl	8005b68 <HAL_RCC_GetPCLK1Freq>
 8008868:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	085a      	lsrs	r2, r3, #1
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	441a      	add	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	fbb2 f3f3 	udiv	r3, r2, r3
 800887c:	b29b      	uxth	r3, r3
 800887e:	61bb      	str	r3, [r7, #24]
        break;
 8008880:	e038      	b.n	80088f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008882:	f7fd f985 	bl	8005b90 <HAL_RCC_GetPCLK2Freq>
 8008886:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	085a      	lsrs	r2, r3, #1
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	441a      	add	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	fbb2 f3f3 	udiv	r3, r2, r3
 800889a:	b29b      	uxth	r3, r3
 800889c:	61bb      	str	r3, [r7, #24]
        break;
 800889e:	e029      	b.n	80088f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	085a      	lsrs	r2, r3, #1
 80088a6:	4b21      	ldr	r3, [pc, #132]	; (800892c <UART_SetConfig+0x550>)
 80088a8:	4413      	add	r3, r2
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	6852      	ldr	r2, [r2, #4]
 80088ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	61bb      	str	r3, [r7, #24]
        break;
 80088b6:	e01d      	b.n	80088f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088b8:	f7fd f898 	bl	80059ec <HAL_RCC_GetSysClockFreq>
 80088bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	085a      	lsrs	r2, r3, #1
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	441a      	add	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	61bb      	str	r3, [r7, #24]
        break;
 80088d4:	e00e      	b.n	80088f4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	085b      	lsrs	r3, r3, #1
 80088dc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	61bb      	str	r3, [r7, #24]
        break;
 80088ec:	e002      	b.n	80088f4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	75fb      	strb	r3, [r7, #23]
        break;
 80088f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b0f      	cmp	r3, #15
 80088f8:	d908      	bls.n	800890c <UART_SetConfig+0x530>
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008900:	d204      	bcs.n	800890c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	60da      	str	r2, [r3, #12]
 800890a:	e001      	b.n	8008910 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3720      	adds	r7, #32
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	01e84800 	.word	0x01e84800
 800892c:	00f42400 	.word	0x00f42400

08008930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00a      	beq.n	800895a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	f003 0308 	and.w	r3, r3, #8
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	f003 0320 	and.w	r3, r3, #32
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d01a      	beq.n	8008a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a2e:	d10a      	bne.n	8008a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	605a      	str	r2, [r3, #4]
  }
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008a82:	f7f9 ff4d 	bl	8002920 <HAL_GetTick>
 8008a86:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0308 	and.w	r3, r3, #8
 8008a92:	2b08      	cmp	r3, #8
 8008a94:	d10e      	bne.n	8008ab4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a9a:	9300      	str	r3, [sp, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f82a 	bl	8008afe <UART_WaitOnFlagUntilTimeout>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e020      	b.n	8008af6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0304 	and.w	r3, r3, #4
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d10e      	bne.n	8008ae0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f814 	bl	8008afe <UART_WaitOnFlagUntilTimeout>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d001      	beq.n	8008ae0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e00a      	b.n	8008af6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b0e:	e05d      	b.n	8008bcc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b16:	d059      	beq.n	8008bcc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b18:	f7f9 ff02 	bl	8002920 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	69ba      	ldr	r2, [r7, #24]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d302      	bcc.n	8008b2e <UART_WaitOnFlagUntilTimeout+0x30>
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d11b      	bne.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0201 	bic.w	r2, r2, #1
 8008b4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2220      	movs	r2, #32
 8008b52:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e042      	b.n	8008bec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d02b      	beq.n	8008bcc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b82:	d123      	bne.n	8008bcc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b8c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e00f      	b.n	8008bec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69da      	ldr	r2, [r3, #28]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4013      	ands	r3, r2
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	bf0c      	ite	eq
 8008bdc:	2301      	moveq	r3, #1
 8008bde:	2300      	movne	r3, #0
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	461a      	mov	r2, r3
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d092      	beq.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008c0a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c34:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f022 0201 	bic.w	r2, r2, #1
 8008c44:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c74:	d014      	beq.n	8008ca0 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c8c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c9c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c9e:	e002      	b.n	8008ca6 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7ff fb5f 	bl	8008364 <HAL_UART_TxCpltCallback>
}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f7ff fb5b 	bl	8008378 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cc2:	bf00      	nop
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ce0:	d01e      	beq.n	8008d20 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cf8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0201 	bic.w	r2, r2, #1
 8008d08:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d18:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2220      	movs	r2, #32
 8008d1e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7ff fb33 	bl	800838c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7ff fb2f 	bl	80083a0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d42:	bf00      	nop
 8008d44:	3710      	adds	r7, #16
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b086      	sub	sp, #24
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6e:	2b80      	cmp	r3, #128	; 0x80
 8008d70:	d109      	bne.n	8008d86 <UART_DMAError+0x3c>
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b21      	cmp	r3, #33	; 0x21
 8008d76:	d106      	bne.n	8008d86 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008d80:	6978      	ldr	r0, [r7, #20]
 8008d82:	f7ff ff37 	bl	8008bf4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b40      	cmp	r3, #64	; 0x40
 8008d92:	d109      	bne.n	8008da8 <UART_DMAError+0x5e>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b22      	cmp	r3, #34	; 0x22
 8008d98:	d106      	bne.n	8008da8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008da2:	6978      	ldr	r0, [r7, #20]
 8008da4:	f7ff ff3b 	bl	8008c1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dac:	f043 0210 	orr.w	r2, r3, #16
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008db4:	6978      	ldr	r0, [r7, #20]
 8008db6:	f7ff fafd 	bl	80083b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dba:	bf00      	nop
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff fae7 	bl	80083b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e04:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7ff faa6 	bl	8008364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e18:	bf00      	nop
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008e20:	b084      	sub	sp, #16
 8008e22:	b480      	push	{r7}
 8008e24:	b085      	sub	sp, #20
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	f107 001c 	add.w	r0, r7, #28
 8008e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008e36:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008e38:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008e3a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008e3e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008e42:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008e46:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008e4a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <SDMMC_Init+0x54>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	431a      	orrs	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	b004      	add	sp, #16
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	ffff8100 	.word	0xffff8100

08008e78 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2203      	movs	r2, #3
 8008e84:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008e86:	2002      	movs	r0, #2
 8008e88:	f7f9 fd56 	bl	8002938 <HAL_Delay>
  
  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0303 	and.w	r3, r3, #3
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	370c      	adds	r7, #12
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
	...

08008eb4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ed2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ed8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008ede:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <SDMMC_SendCommand+0x50>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	fffff000 	.word	0xfffff000

08008f08 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	b2db      	uxtb	r3, r3
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b085      	sub	sp, #20
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	3314      	adds	r3, #20
 8008f30:	461a      	mov	r2, r3
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	4413      	add	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
}  
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b08a      	sub	sp, #40	; 0x28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008f58:	2307      	movs	r3, #7
 8008f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f5c:	2340      	movs	r3, #64	; 0x40
 8008f5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f68:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f6a:	f107 0310 	add.w	r3, r7, #16
 8008f6e:	4619      	mov	r1, r3
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f7ff ff9f 	bl	8008eb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f7a:	2107      	movs	r1, #7
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f8c9 	bl	8009114 <SDMMC_GetCmdResp1>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3728      	adds	r7, #40	; 0x28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b088      	sub	sp, #32
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008faa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fac:	f107 0308 	add.w	r3, r7, #8
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7ff ff7e 	bl	8008eb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f883 	bl	80090c4 <SDMMC_GetCmdError>
 8008fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3720      	adds	r7, #32
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b088      	sub	sp, #32
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008fda:	23c0      	movs	r3, #192	; 0xc0
 8008fdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fe8:	f107 0308 	add.w	r3, r7, #8
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff ff60 	bl	8008eb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f979 	bl	80092ec <SDMMC_GetCmdResp2>
 8008ffa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ffc:	69fb      	ldr	r3, [r7, #28]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3720      	adds	r7, #32
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b088      	sub	sp, #32
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009014:	2309      	movs	r3, #9
 8009016:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009018:	23c0      	movs	r3, #192	; 0xc0
 800901a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009024:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009026:	f107 0308 	add.w	r3, r7, #8
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff ff41 	bl	8008eb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f95a 	bl	80092ec <SDMMC_GetCmdResp2>
 8009038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800903a:	69fb      	ldr	r3, [r7, #28]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009052:	2303      	movs	r3, #3
 8009054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009056:	2340      	movs	r3, #64	; 0x40
 8009058:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800905a:	2300      	movs	r3, #0
 800905c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800905e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009062:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009064:	f107 0308 	add.w	r3, r7, #8
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff ff22 	bl	8008eb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	2103      	movs	r1, #3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f9b9 	bl	80093ec <SDMMC_GetCmdResp6>
 800907a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800907c:	69fb      	ldr	r3, [r7, #28]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3720      	adds	r7, #32
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b088      	sub	sp, #32
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8009094:	2301      	movs	r3, #1
 8009096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009098:	2340      	movs	r3, #64	; 0x40
 800909a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800909c:	2300      	movs	r3, #0
 800909e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090a6:	f107 0308 	add.w	r3, r7, #8
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7ff ff01 	bl	8008eb4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f960 	bl	8009378 <SDMMC_GetCmdResp3>
 80090b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ba:	69fb      	ldr	r3, [r7, #28]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3720      	adds	r7, #32
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80090c4:	b490      	push	{r4, r7}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80090cc:	4b0f      	ldr	r3, [pc, #60]	; (800910c <SDMMC_GetCmdError+0x48>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a0f      	ldr	r2, [pc, #60]	; (8009110 <SDMMC_GetCmdError+0x4c>)
 80090d2:	fba2 2303 	umull	r2, r3, r2, r3
 80090d6:	0a5b      	lsrs	r3, r3, #9
 80090d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80090e0:	4623      	mov	r3, r4
 80090e2:	1e5c      	subs	r4, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090ec:	e009      	b.n	8009102 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0f2      	beq.n	80090e0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	22c5      	movs	r2, #197	; 0xc5
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bc90      	pop	{r4, r7}
 800910a:	4770      	bx	lr
 800910c:	20000004 	.word	0x20000004
 8009110:	10624dd3 	.word	0x10624dd3

08009114 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009114:	b590      	push	{r4, r7, lr}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	460b      	mov	r3, r1
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009122:	4b6f      	ldr	r3, [pc, #444]	; (80092e0 <SDMMC_GetCmdResp1+0x1cc>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a6f      	ldr	r2, [pc, #444]	; (80092e4 <SDMMC_GetCmdResp1+0x1d0>)
 8009128:	fba2 2303 	umull	r2, r3, r2, r3
 800912c:	0a5b      	lsrs	r3, r3, #9
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009134:	4623      	mov	r3, r4
 8009136:	1e5c      	subs	r4, r3, #1
 8009138:	2b00      	cmp	r3, #0
 800913a:	d102      	bne.n	8009142 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800913c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009140:	e0c9      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009146:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0f0      	beq.n	8009134 <SDMMC_GetCmdResp1+0x20>
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1eb      	bne.n	8009134 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d004      	beq.n	8009172 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2204      	movs	r2, #4
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800916e:	2304      	movs	r3, #4
 8009170:	e0b1      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d004      	beq.n	8009188 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2201      	movs	r2, #1
 8009182:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009184:	2301      	movs	r3, #1
 8009186:	e0a6      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	22c5      	movs	r2, #197	; 0xc5
 800918c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f7ff feba 	bl	8008f08 <SDMMC_GetCommandResponse>
 8009194:	4603      	mov	r3, r0
 8009196:	461a      	mov	r2, r3
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	4293      	cmp	r3, r2
 800919c:	d001      	beq.n	80091a2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800919e:	2301      	movs	r3, #1
 80091a0:	e099      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80091a2:	2100      	movs	r1, #0
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f7ff febc 	bl	8008f22 <SDMMC_GetResponse>
 80091aa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	4b4e      	ldr	r3, [pc, #312]	; (80092e8 <SDMMC_GetCmdResp1+0x1d4>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e08d      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	da02      	bge.n	80091c6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80091c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091c4:	e087      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80091d0:	2340      	movs	r3, #64	; 0x40
 80091d2:	e080      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80091de:	2380      	movs	r3, #128	; 0x80
 80091e0:	e079      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80091ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091f0:	e071      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80091fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009200:	e069      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d002      	beq.n	8009212 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800920c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009210:	e061      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d002      	beq.n	8009222 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800921c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009220:	e059      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d002      	beq.n	8009232 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800922c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009230:	e051      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800923c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009240:	e049      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800924c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009250:	e041      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d002      	beq.n	8009262 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800925c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009260:	e039      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800926c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009270:	e031      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800927c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009280:	e029      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800928c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009290:	e021      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800929c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80092a0:	e019      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80092ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092b0:	e011      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d002      	beq.n	80092c2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80092bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80092c0:	e009      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	f003 0308 	and.w	r3, r3, #8
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d002      	beq.n	80092d2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80092cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80092d0:	e001      	b.n	80092d6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80092d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd90      	pop	{r4, r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000004 	.word	0x20000004
 80092e4:	10624dd3 	.word	0x10624dd3
 80092e8:	fdffe008 	.word	0xfdffe008

080092ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80092ec:	b490      	push	{r4, r7}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092f4:	4b1e      	ldr	r3, [pc, #120]	; (8009370 <SDMMC_GetCmdResp2+0x84>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a1e      	ldr	r2, [pc, #120]	; (8009374 <SDMMC_GetCmdResp2+0x88>)
 80092fa:	fba2 2303 	umull	r2, r3, r2, r3
 80092fe:	0a5b      	lsrs	r3, r3, #9
 8009300:	f241 3288 	movw	r2, #5000	; 0x1388
 8009304:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009308:	4623      	mov	r3, r4
 800930a:	1e5c      	subs	r4, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d102      	bne.n	8009316 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009314:	e026      	b.n	8009364 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0f0      	beq.n	8009308 <SDMMC_GetCmdResp2+0x1c>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1eb      	bne.n	8009308 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d004      	beq.n	8009346 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2204      	movs	r2, #4
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009342:	2304      	movs	r3, #4
 8009344:	e00e      	b.n	8009364 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d004      	beq.n	800935c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009358:	2301      	movs	r3, #1
 800935a:	e003      	b.n	8009364 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	22c5      	movs	r2, #197	; 0xc5
 8009360:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bc90      	pop	{r4, r7}
 800936c:	4770      	bx	lr
 800936e:	bf00      	nop
 8009370:	20000004 	.word	0x20000004
 8009374:	10624dd3 	.word	0x10624dd3

08009378 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009378:	b490      	push	{r4, r7}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009380:	4b18      	ldr	r3, [pc, #96]	; (80093e4 <SDMMC_GetCmdResp3+0x6c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a18      	ldr	r2, [pc, #96]	; (80093e8 <SDMMC_GetCmdResp3+0x70>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	0a5b      	lsrs	r3, r3, #9
 800938c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009390:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009394:	4623      	mov	r3, r4
 8009396:	1e5c      	subs	r4, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d102      	bne.n	80093a2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800939c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093a0:	e01b      	b.n	80093da <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d0f0      	beq.n	8009394 <SDMMC_GetCmdResp3+0x1c>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1eb      	bne.n	8009394 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d004      	beq.n	80093d2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2204      	movs	r2, #4
 80093cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093ce:	2304      	movs	r3, #4
 80093d0:	e003      	b.n	80093da <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	22c5      	movs	r2, #197	; 0xc5
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc90      	pop	{r4, r7}
 80093e2:	4770      	bx	lr
 80093e4:	20000004 	.word	0x20000004
 80093e8:	10624dd3 	.word	0x10624dd3

080093ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80093ec:	b590      	push	{r4, r7, lr}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	460b      	mov	r3, r1
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093fa:	4b34      	ldr	r3, [pc, #208]	; (80094cc <SDMMC_GetCmdResp6+0xe0>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a34      	ldr	r2, [pc, #208]	; (80094d0 <SDMMC_GetCmdResp6+0xe4>)
 8009400:	fba2 2303 	umull	r2, r3, r2, r3
 8009404:	0a5b      	lsrs	r3, r3, #9
 8009406:	f241 3288 	movw	r2, #5000	; 0x1388
 800940a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800940e:	4623      	mov	r3, r4
 8009410:	1e5c      	subs	r4, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d102      	bne.n	800941c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009416:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800941a:	e052      	b.n	80094c2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009420:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8009428:	2b00      	cmp	r3, #0
 800942a:	d0f0      	beq.n	800940e <SDMMC_GetCmdResp6+0x22>
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1eb      	bne.n	800940e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943a:	f003 0304 	and.w	r3, r3, #4
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2204      	movs	r2, #4
 8009446:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009448:	2304      	movs	r3, #4
 800944a:	e03a      	b.n	80094c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2201      	movs	r2, #1
 800945c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800945e:	2301      	movs	r3, #1
 8009460:	e02f      	b.n	80094c2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7ff fd50 	bl	8008f08 <SDMMC_GetCommandResponse>
 8009468:	4603      	mov	r3, r0
 800946a:	461a      	mov	r2, r3
 800946c:	7afb      	ldrb	r3, [r7, #11]
 800946e:	4293      	cmp	r3, r2
 8009470:	d001      	beq.n	8009476 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009472:	2301      	movs	r3, #1
 8009474:	e025      	b.n	80094c2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	22c5      	movs	r2, #197	; 0xc5
 800947a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800947c:	2100      	movs	r1, #0
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f7ff fd4f 	bl	8008f22 <SDMMC_GetResponse>
 8009484:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800948c:	2b00      	cmp	r3, #0
 800948e:	d106      	bne.n	800949e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	0c1b      	lsrs	r3, r3, #16
 8009494:	b29a      	uxth	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800949a:	2300      	movs	r3, #0
 800949c:	e011      	b.n	80094c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80094a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094ac:	e009      	b.n	80094c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d002      	beq.n	80094be <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80094b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094bc:	e001      	b.n	80094c2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80094be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd90      	pop	{r4, r7, pc}
 80094ca:	bf00      	nop
 80094cc:	20000004 	.word	0x20000004
 80094d0:	10624dd3 	.word	0x10624dd3

080094d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80094d8:	4904      	ldr	r1, [pc, #16]	; (80094ec <MX_FATFS_Init+0x18>)
 80094da:	4805      	ldr	r0, [pc, #20]	; (80094f0 <MX_FATFS_Init+0x1c>)
 80094dc:	f000 f8b0 	bl	8009640 <FATFS_LinkDriver>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461a      	mov	r2, r3
 80094e4:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <MX_FATFS_Init+0x20>)
 80094e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80094e8:	bf00      	nop
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20000f64 	.word	0x20000f64
 80094f0:	20000010 	.word	0x20000010
 80094f4:	20000f68 	.word	0x20000f68

080094f8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4603      	mov	r3, r0
 8009500:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8009502:	4b06      	ldr	r3, [pc, #24]	; (800951c <USER_initialize+0x24>)
 8009504:	2201      	movs	r2, #1
 8009506:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009508:	4b04      	ldr	r3, [pc, #16]	; (800951c <USER_initialize+0x24>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	2000000d 	.word	0x2000000d

08009520 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800952a:	4b06      	ldr	r3, [pc, #24]	; (8009544 <USER_status+0x24>)
 800952c:	2201      	movs	r2, #1
 800952e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <USER_status+0x24>)
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	2000000d 	.word	0x2000000d

08009548 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	60b9      	str	r1, [r7, #8]
 8009550:	607a      	str	r2, [r7, #4]
 8009552:	603b      	str	r3, [r7, #0]
 8009554:	4603      	mov	r3, r0
 8009556:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8009558:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
 8009570:	603b      	str	r3, [r7, #0]
 8009572:	4603      	mov	r3, r0
 8009574:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8009576:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	603a      	str	r2, [r7, #0]
 800958e:	71fb      	strb	r3, [r7, #7]
 8009590:	460b      	mov	r3, r1
 8009592:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	73fb      	strb	r3, [r7, #15]
    return res;
 8009598:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
	...

080095a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	4613      	mov	r3, r2
 80095b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80095b6:	2301      	movs	r3, #1
 80095b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80095be:	4b1f      	ldr	r3, [pc, #124]	; (800963c <FATFS_LinkDriverEx+0x94>)
 80095c0:	7a5b      	ldrb	r3, [r3, #9]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d131      	bne.n	800962c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80095c8:	4b1c      	ldr	r3, [pc, #112]	; (800963c <FATFS_LinkDriverEx+0x94>)
 80095ca:	7a5b      	ldrb	r3, [r3, #9]
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	461a      	mov	r2, r3
 80095d0:	4b1a      	ldr	r3, [pc, #104]	; (800963c <FATFS_LinkDriverEx+0x94>)
 80095d2:	2100      	movs	r1, #0
 80095d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80095d6:	4b19      	ldr	r3, [pc, #100]	; (800963c <FATFS_LinkDriverEx+0x94>)
 80095d8:	7a5b      	ldrb	r3, [r3, #9]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	4a17      	ldr	r2, [pc, #92]	; (800963c <FATFS_LinkDriverEx+0x94>)
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80095e6:	4b15      	ldr	r3, [pc, #84]	; (800963c <FATFS_LinkDriverEx+0x94>)
 80095e8:	7a5b      	ldrb	r3, [r3, #9]
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <FATFS_LinkDriverEx+0x94>)
 80095f0:	4413      	add	r3, r2
 80095f2:	79fa      	ldrb	r2, [r7, #7]
 80095f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80095f6:	4b11      	ldr	r3, [pc, #68]	; (800963c <FATFS_LinkDriverEx+0x94>)
 80095f8:	7a5b      	ldrb	r3, [r3, #9]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	1c5a      	adds	r2, r3, #1
 80095fe:	b2d1      	uxtb	r1, r2
 8009600:	4a0e      	ldr	r2, [pc, #56]	; (800963c <FATFS_LinkDriverEx+0x94>)
 8009602:	7251      	strb	r1, [r2, #9]
 8009604:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009606:	7dbb      	ldrb	r3, [r7, #22]
 8009608:	3330      	adds	r3, #48	; 0x30
 800960a:	b2da      	uxtb	r2, r3
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	3301      	adds	r3, #1
 8009614:	223a      	movs	r2, #58	; 0x3a
 8009616:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	3302      	adds	r3, #2
 800961c:	222f      	movs	r2, #47	; 0x2f
 800961e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	3303      	adds	r3, #3
 8009624:	2200      	movs	r2, #0
 8009626:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800962c:	7dfb      	ldrb	r3, [r7, #23]
}
 800962e:	4618      	mov	r0, r3
 8009630:	371c      	adds	r7, #28
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	20000aa4 	.word	0x20000aa4

08009640 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800964a:	2200      	movs	r2, #0
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff ffaa 	bl	80095a8 <FATFS_LinkDriverEx>
 8009654:	4603      	mov	r3, r0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <__errno>:
 8009660:	4b01      	ldr	r3, [pc, #4]	; (8009668 <__errno+0x8>)
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	20000024 	.word	0x20000024

0800966c <__libc_init_array>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4e0d      	ldr	r6, [pc, #52]	; (80096a4 <__libc_init_array+0x38>)
 8009670:	4c0d      	ldr	r4, [pc, #52]	; (80096a8 <__libc_init_array+0x3c>)
 8009672:	1ba4      	subs	r4, r4, r6
 8009674:	10a4      	asrs	r4, r4, #2
 8009676:	2500      	movs	r5, #0
 8009678:	42a5      	cmp	r5, r4
 800967a:	d109      	bne.n	8009690 <__libc_init_array+0x24>
 800967c:	4e0b      	ldr	r6, [pc, #44]	; (80096ac <__libc_init_array+0x40>)
 800967e:	4c0c      	ldr	r4, [pc, #48]	; (80096b0 <__libc_init_array+0x44>)
 8009680:	f003 fc90 	bl	800cfa4 <_init>
 8009684:	1ba4      	subs	r4, r4, r6
 8009686:	10a4      	asrs	r4, r4, #2
 8009688:	2500      	movs	r5, #0
 800968a:	42a5      	cmp	r5, r4
 800968c:	d105      	bne.n	800969a <__libc_init_array+0x2e>
 800968e:	bd70      	pop	{r4, r5, r6, pc}
 8009690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009694:	4798      	blx	r3
 8009696:	3501      	adds	r5, #1
 8009698:	e7ee      	b.n	8009678 <__libc_init_array+0xc>
 800969a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800969e:	4798      	blx	r3
 80096a0:	3501      	adds	r5, #1
 80096a2:	e7f2      	b.n	800968a <__libc_init_array+0x1e>
 80096a4:	0800d340 	.word	0x0800d340
 80096a8:	0800d340 	.word	0x0800d340
 80096ac:	0800d340 	.word	0x0800d340
 80096b0:	0800d344 	.word	0x0800d344

080096b4 <memset>:
 80096b4:	4402      	add	r2, r0
 80096b6:	4603      	mov	r3, r0
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d100      	bne.n	80096be <memset+0xa>
 80096bc:	4770      	bx	lr
 80096be:	f803 1b01 	strb.w	r1, [r3], #1
 80096c2:	e7f9      	b.n	80096b8 <memset+0x4>

080096c4 <__cvt>:
 80096c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c6:	ed2d 8b02 	vpush	{d8}
 80096ca:	eeb0 8b40 	vmov.f64	d8, d0
 80096ce:	b085      	sub	sp, #20
 80096d0:	4617      	mov	r7, r2
 80096d2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80096d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80096d6:	ee18 2a90 	vmov	r2, s17
 80096da:	f025 0520 	bic.w	r5, r5, #32
 80096de:	2a00      	cmp	r2, #0
 80096e0:	bfb6      	itet	lt
 80096e2:	222d      	movlt	r2, #45	; 0x2d
 80096e4:	2200      	movge	r2, #0
 80096e6:	eeb1 8b40 	vneglt.f64	d8, d0
 80096ea:	2d46      	cmp	r5, #70	; 0x46
 80096ec:	460c      	mov	r4, r1
 80096ee:	701a      	strb	r2, [r3, #0]
 80096f0:	d004      	beq.n	80096fc <__cvt+0x38>
 80096f2:	2d45      	cmp	r5, #69	; 0x45
 80096f4:	d100      	bne.n	80096f8 <__cvt+0x34>
 80096f6:	3401      	adds	r4, #1
 80096f8:	2102      	movs	r1, #2
 80096fa:	e000      	b.n	80096fe <__cvt+0x3a>
 80096fc:	2103      	movs	r1, #3
 80096fe:	ab03      	add	r3, sp, #12
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	ab02      	add	r3, sp, #8
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	4622      	mov	r2, r4
 8009708:	4633      	mov	r3, r6
 800970a:	eeb0 0b48 	vmov.f64	d0, d8
 800970e:	f001 fd1f 	bl	800b150 <_dtoa_r>
 8009712:	2d47      	cmp	r5, #71	; 0x47
 8009714:	d101      	bne.n	800971a <__cvt+0x56>
 8009716:	07fb      	lsls	r3, r7, #31
 8009718:	d51e      	bpl.n	8009758 <__cvt+0x94>
 800971a:	2d46      	cmp	r5, #70	; 0x46
 800971c:	eb00 0304 	add.w	r3, r0, r4
 8009720:	d10c      	bne.n	800973c <__cvt+0x78>
 8009722:	7802      	ldrb	r2, [r0, #0]
 8009724:	2a30      	cmp	r2, #48	; 0x30
 8009726:	d107      	bne.n	8009738 <__cvt+0x74>
 8009728:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800972c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009730:	bf1c      	itt	ne
 8009732:	f1c4 0401 	rsbne	r4, r4, #1
 8009736:	6034      	strne	r4, [r6, #0]
 8009738:	6832      	ldr	r2, [r6, #0]
 800973a:	4413      	add	r3, r2
 800973c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009744:	d007      	beq.n	8009756 <__cvt+0x92>
 8009746:	2130      	movs	r1, #48	; 0x30
 8009748:	9a03      	ldr	r2, [sp, #12]
 800974a:	429a      	cmp	r2, r3
 800974c:	d204      	bcs.n	8009758 <__cvt+0x94>
 800974e:	1c54      	adds	r4, r2, #1
 8009750:	9403      	str	r4, [sp, #12]
 8009752:	7011      	strb	r1, [r2, #0]
 8009754:	e7f8      	b.n	8009748 <__cvt+0x84>
 8009756:	9303      	str	r3, [sp, #12]
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800975c:	1a1b      	subs	r3, r3, r0
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	b005      	add	sp, #20
 8009762:	ecbd 8b02 	vpop	{d8}
 8009766:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009768 <__exponent>:
 8009768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800976a:	2900      	cmp	r1, #0
 800976c:	4604      	mov	r4, r0
 800976e:	bfba      	itte	lt
 8009770:	4249      	neglt	r1, r1
 8009772:	232d      	movlt	r3, #45	; 0x2d
 8009774:	232b      	movge	r3, #43	; 0x2b
 8009776:	2909      	cmp	r1, #9
 8009778:	f804 2b02 	strb.w	r2, [r4], #2
 800977c:	7043      	strb	r3, [r0, #1]
 800977e:	dd20      	ble.n	80097c2 <__exponent+0x5a>
 8009780:	f10d 0307 	add.w	r3, sp, #7
 8009784:	461f      	mov	r7, r3
 8009786:	260a      	movs	r6, #10
 8009788:	fb91 f5f6 	sdiv	r5, r1, r6
 800978c:	fb06 1115 	mls	r1, r6, r5, r1
 8009790:	3130      	adds	r1, #48	; 0x30
 8009792:	2d09      	cmp	r5, #9
 8009794:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009798:	f103 32ff 	add.w	r2, r3, #4294967295
 800979c:	4629      	mov	r1, r5
 800979e:	dc09      	bgt.n	80097b4 <__exponent+0x4c>
 80097a0:	3130      	adds	r1, #48	; 0x30
 80097a2:	3b02      	subs	r3, #2
 80097a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80097a8:	42bb      	cmp	r3, r7
 80097aa:	4622      	mov	r2, r4
 80097ac:	d304      	bcc.n	80097b8 <__exponent+0x50>
 80097ae:	1a10      	subs	r0, r2, r0
 80097b0:	b003      	add	sp, #12
 80097b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b4:	4613      	mov	r3, r2
 80097b6:	e7e7      	b.n	8009788 <__exponent+0x20>
 80097b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097bc:	f804 2b01 	strb.w	r2, [r4], #1
 80097c0:	e7f2      	b.n	80097a8 <__exponent+0x40>
 80097c2:	2330      	movs	r3, #48	; 0x30
 80097c4:	4419      	add	r1, r3
 80097c6:	7083      	strb	r3, [r0, #2]
 80097c8:	1d02      	adds	r2, r0, #4
 80097ca:	70c1      	strb	r1, [r0, #3]
 80097cc:	e7ef      	b.n	80097ae <__exponent+0x46>
	...

080097d0 <_printf_float>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	b08d      	sub	sp, #52	; 0x34
 80097d6:	460c      	mov	r4, r1
 80097d8:	4616      	mov	r6, r2
 80097da:	461f      	mov	r7, r3
 80097dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80097e0:	4605      	mov	r5, r0
 80097e2:	f002 fd2d 	bl	800c240 <_localeconv_r>
 80097e6:	f8d0 b000 	ldr.w	fp, [r0]
 80097ea:	4658      	mov	r0, fp
 80097ec:	f7f6 fd28 	bl	8000240 <strlen>
 80097f0:	2300      	movs	r3, #0
 80097f2:	930a      	str	r3, [sp, #40]	; 0x28
 80097f4:	f8d8 3000 	ldr.w	r3, [r8]
 80097f8:	9005      	str	r0, [sp, #20]
 80097fa:	3307      	adds	r3, #7
 80097fc:	f023 0307 	bic.w	r3, r3, #7
 8009800:	f103 0108 	add.w	r1, r3, #8
 8009804:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009808:	6822      	ldr	r2, [r4, #0]
 800980a:	f8c8 1000 	str.w	r1, [r8]
 800980e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009812:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009816:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8009aa0 <_printf_float+0x2d0>
 800981a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800981e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009822:	eeb4 6b47 	vcmp.f64	d6, d7
 8009826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982a:	dd24      	ble.n	8009876 <_printf_float+0xa6>
 800982c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009834:	d502      	bpl.n	800983c <_printf_float+0x6c>
 8009836:	232d      	movs	r3, #45	; 0x2d
 8009838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800983c:	499a      	ldr	r1, [pc, #616]	; (8009aa8 <_printf_float+0x2d8>)
 800983e:	4b9b      	ldr	r3, [pc, #620]	; (8009aac <_printf_float+0x2dc>)
 8009840:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009844:	bf8c      	ite	hi
 8009846:	4688      	movhi	r8, r1
 8009848:	4698      	movls	r8, r3
 800984a:	f022 0204 	bic.w	r2, r2, #4
 800984e:	2303      	movs	r3, #3
 8009850:	6123      	str	r3, [r4, #16]
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	f04f 0a00 	mov.w	sl, #0
 8009858:	9700      	str	r7, [sp, #0]
 800985a:	4633      	mov	r3, r6
 800985c:	aa0b      	add	r2, sp, #44	; 0x2c
 800985e:	4621      	mov	r1, r4
 8009860:	4628      	mov	r0, r5
 8009862:	f000 f9e1 	bl	8009c28 <_printf_common>
 8009866:	3001      	adds	r0, #1
 8009868:	f040 8089 	bne.w	800997e <_printf_float+0x1ae>
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	b00d      	add	sp, #52	; 0x34
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	eeb4 0b40 	vcmp.f64	d0, d0
 800987a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800987e:	d702      	bvc.n	8009886 <_printf_float+0xb6>
 8009880:	498b      	ldr	r1, [pc, #556]	; (8009ab0 <_printf_float+0x2e0>)
 8009882:	4b8c      	ldr	r3, [pc, #560]	; (8009ab4 <_printf_float+0x2e4>)
 8009884:	e7dc      	b.n	8009840 <_printf_float+0x70>
 8009886:	6861      	ldr	r1, [r4, #4]
 8009888:	1c4b      	adds	r3, r1, #1
 800988a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800988e:	ab0a      	add	r3, sp, #40	; 0x28
 8009890:	a809      	add	r0, sp, #36	; 0x24
 8009892:	d13b      	bne.n	800990c <_printf_float+0x13c>
 8009894:	2106      	movs	r1, #6
 8009896:	6061      	str	r1, [r4, #4]
 8009898:	f04f 0c00 	mov.w	ip, #0
 800989c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80098a0:	e9cd 0900 	strd	r0, r9, [sp]
 80098a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098a8:	6022      	str	r2, [r4, #0]
 80098aa:	6861      	ldr	r1, [r4, #4]
 80098ac:	4628      	mov	r0, r5
 80098ae:	f7ff ff09 	bl	80096c4 <__cvt>
 80098b2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80098b6:	2b47      	cmp	r3, #71	; 0x47
 80098b8:	4680      	mov	r8, r0
 80098ba:	d109      	bne.n	80098d0 <_printf_float+0x100>
 80098bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098be:	1cd8      	adds	r0, r3, #3
 80098c0:	db02      	blt.n	80098c8 <_printf_float+0xf8>
 80098c2:	6862      	ldr	r2, [r4, #4]
 80098c4:	4293      	cmp	r3, r2
 80098c6:	dd47      	ble.n	8009958 <_printf_float+0x188>
 80098c8:	f1a9 0902 	sub.w	r9, r9, #2
 80098cc:	fa5f f989 	uxtb.w	r9, r9
 80098d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80098d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098d6:	d824      	bhi.n	8009922 <_printf_float+0x152>
 80098d8:	3901      	subs	r1, #1
 80098da:	464a      	mov	r2, r9
 80098dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80098e0:	9109      	str	r1, [sp, #36]	; 0x24
 80098e2:	f7ff ff41 	bl	8009768 <__exponent>
 80098e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098e8:	1813      	adds	r3, r2, r0
 80098ea:	2a01      	cmp	r2, #1
 80098ec:	4682      	mov	sl, r0
 80098ee:	6123      	str	r3, [r4, #16]
 80098f0:	dc02      	bgt.n	80098f8 <_printf_float+0x128>
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	07d1      	lsls	r1, r2, #31
 80098f6:	d501      	bpl.n	80098fc <_printf_float+0x12c>
 80098f8:	3301      	adds	r3, #1
 80098fa:	6123      	str	r3, [r4, #16]
 80098fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0a9      	beq.n	8009858 <_printf_float+0x88>
 8009904:	232d      	movs	r3, #45	; 0x2d
 8009906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800990a:	e7a5      	b.n	8009858 <_printf_float+0x88>
 800990c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8009910:	f000 8178 	beq.w	8009c04 <_printf_float+0x434>
 8009914:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009918:	d1be      	bne.n	8009898 <_printf_float+0xc8>
 800991a:	2900      	cmp	r1, #0
 800991c:	d1bc      	bne.n	8009898 <_printf_float+0xc8>
 800991e:	2101      	movs	r1, #1
 8009920:	e7b9      	b.n	8009896 <_printf_float+0xc6>
 8009922:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009926:	d119      	bne.n	800995c <_printf_float+0x18c>
 8009928:	2900      	cmp	r1, #0
 800992a:	6863      	ldr	r3, [r4, #4]
 800992c:	dd0c      	ble.n	8009948 <_printf_float+0x178>
 800992e:	6121      	str	r1, [r4, #16]
 8009930:	b913      	cbnz	r3, 8009938 <_printf_float+0x168>
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	07d2      	lsls	r2, r2, #31
 8009936:	d502      	bpl.n	800993e <_printf_float+0x16e>
 8009938:	3301      	adds	r3, #1
 800993a:	440b      	add	r3, r1
 800993c:	6123      	str	r3, [r4, #16]
 800993e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009940:	65a3      	str	r3, [r4, #88]	; 0x58
 8009942:	f04f 0a00 	mov.w	sl, #0
 8009946:	e7d9      	b.n	80098fc <_printf_float+0x12c>
 8009948:	b913      	cbnz	r3, 8009950 <_printf_float+0x180>
 800994a:	6822      	ldr	r2, [r4, #0]
 800994c:	07d0      	lsls	r0, r2, #31
 800994e:	d501      	bpl.n	8009954 <_printf_float+0x184>
 8009950:	3302      	adds	r3, #2
 8009952:	e7f3      	b.n	800993c <_printf_float+0x16c>
 8009954:	2301      	movs	r3, #1
 8009956:	e7f1      	b.n	800993c <_printf_float+0x16c>
 8009958:	f04f 0967 	mov.w	r9, #103	; 0x67
 800995c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009960:	4293      	cmp	r3, r2
 8009962:	db05      	blt.n	8009970 <_printf_float+0x1a0>
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	6123      	str	r3, [r4, #16]
 8009968:	07d1      	lsls	r1, r2, #31
 800996a:	d5e8      	bpl.n	800993e <_printf_float+0x16e>
 800996c:	3301      	adds	r3, #1
 800996e:	e7e5      	b.n	800993c <_printf_float+0x16c>
 8009970:	2b00      	cmp	r3, #0
 8009972:	bfd4      	ite	le
 8009974:	f1c3 0302 	rsble	r3, r3, #2
 8009978:	2301      	movgt	r3, #1
 800997a:	4413      	add	r3, r2
 800997c:	e7de      	b.n	800993c <_printf_float+0x16c>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	055a      	lsls	r2, r3, #21
 8009982:	d407      	bmi.n	8009994 <_printf_float+0x1c4>
 8009984:	6923      	ldr	r3, [r4, #16]
 8009986:	4642      	mov	r2, r8
 8009988:	4631      	mov	r1, r6
 800998a:	4628      	mov	r0, r5
 800998c:	47b8      	blx	r7
 800998e:	3001      	adds	r0, #1
 8009990:	d12a      	bne.n	80099e8 <_printf_float+0x218>
 8009992:	e76b      	b.n	800986c <_printf_float+0x9c>
 8009994:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009998:	f240 80de 	bls.w	8009b58 <_printf_float+0x388>
 800999c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80099a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a8:	d133      	bne.n	8009a12 <_printf_float+0x242>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4a42      	ldr	r2, [pc, #264]	; (8009ab8 <_printf_float+0x2e8>)
 80099ae:	4631      	mov	r1, r6
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b8      	blx	r7
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f af59 	beq.w	800986c <_printf_float+0x9c>
 80099ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099be:	429a      	cmp	r2, r3
 80099c0:	db02      	blt.n	80099c8 <_printf_float+0x1f8>
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	07d8      	lsls	r0, r3, #31
 80099c6:	d50f      	bpl.n	80099e8 <_printf_float+0x218>
 80099c8:	9b05      	ldr	r3, [sp, #20]
 80099ca:	465a      	mov	r2, fp
 80099cc:	4631      	mov	r1, r6
 80099ce:	4628      	mov	r0, r5
 80099d0:	47b8      	blx	r7
 80099d2:	3001      	adds	r0, #1
 80099d4:	f43f af4a 	beq.w	800986c <_printf_float+0x9c>
 80099d8:	f04f 0800 	mov.w	r8, #0
 80099dc:	f104 091a 	add.w	r9, r4, #26
 80099e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e2:	3b01      	subs	r3, #1
 80099e4:	4543      	cmp	r3, r8
 80099e6:	dc09      	bgt.n	80099fc <_printf_float+0x22c>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	079b      	lsls	r3, r3, #30
 80099ec:	f100 8105 	bmi.w	8009bfa <_printf_float+0x42a>
 80099f0:	68e0      	ldr	r0, [r4, #12]
 80099f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099f4:	4298      	cmp	r0, r3
 80099f6:	bfb8      	it	lt
 80099f8:	4618      	movlt	r0, r3
 80099fa:	e739      	b.n	8009870 <_printf_float+0xa0>
 80099fc:	2301      	movs	r3, #1
 80099fe:	464a      	mov	r2, r9
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	f43f af30 	beq.w	800986c <_printf_float+0x9c>
 8009a0c:	f108 0801 	add.w	r8, r8, #1
 8009a10:	e7e6      	b.n	80099e0 <_printf_float+0x210>
 8009a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	dc2b      	bgt.n	8009a70 <_printf_float+0x2a0>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	4a27      	ldr	r2, [pc, #156]	; (8009ab8 <_printf_float+0x2e8>)
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4628      	mov	r0, r5
 8009a20:	47b8      	blx	r7
 8009a22:	3001      	adds	r0, #1
 8009a24:	f43f af22 	beq.w	800986c <_printf_float+0x9c>
 8009a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2a:	b923      	cbnz	r3, 8009a36 <_printf_float+0x266>
 8009a2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a2e:	b913      	cbnz	r3, 8009a36 <_printf_float+0x266>
 8009a30:	6823      	ldr	r3, [r4, #0]
 8009a32:	07d9      	lsls	r1, r3, #31
 8009a34:	d5d8      	bpl.n	80099e8 <_printf_float+0x218>
 8009a36:	9b05      	ldr	r3, [sp, #20]
 8009a38:	465a      	mov	r2, fp
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	f43f af13 	beq.w	800986c <_printf_float+0x9c>
 8009a46:	f04f 0900 	mov.w	r9, #0
 8009a4a:	f104 0a1a 	add.w	sl, r4, #26
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	425b      	negs	r3, r3
 8009a52:	454b      	cmp	r3, r9
 8009a54:	dc01      	bgt.n	8009a5a <_printf_float+0x28a>
 8009a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a58:	e795      	b.n	8009986 <_printf_float+0x1b6>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	4652      	mov	r2, sl
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4628      	mov	r0, r5
 8009a62:	47b8      	blx	r7
 8009a64:	3001      	adds	r0, #1
 8009a66:	f43f af01 	beq.w	800986c <_printf_float+0x9c>
 8009a6a:	f109 0901 	add.w	r9, r9, #1
 8009a6e:	e7ee      	b.n	8009a4e <_printf_float+0x27e>
 8009a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a74:	429a      	cmp	r2, r3
 8009a76:	bfa8      	it	ge
 8009a78:	461a      	movge	r2, r3
 8009a7a:	2a00      	cmp	r2, #0
 8009a7c:	4691      	mov	r9, r2
 8009a7e:	dd07      	ble.n	8009a90 <_printf_float+0x2c0>
 8009a80:	4613      	mov	r3, r2
 8009a82:	4631      	mov	r1, r6
 8009a84:	4642      	mov	r2, r8
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f aeee 	beq.w	800986c <_printf_float+0x9c>
 8009a90:	f104 031a 	add.w	r3, r4, #26
 8009a94:	f04f 0a00 	mov.w	sl, #0
 8009a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a9c:	9307      	str	r3, [sp, #28]
 8009a9e:	e017      	b.n	8009ad0 <_printf_float+0x300>
 8009aa0:	ffffffff 	.word	0xffffffff
 8009aa4:	7fefffff 	.word	0x7fefffff
 8009aa8:	0800d084 	.word	0x0800d084
 8009aac:	0800d080 	.word	0x0800d080
 8009ab0:	0800d08c 	.word	0x0800d08c
 8009ab4:	0800d088 	.word	0x0800d088
 8009ab8:	0800d090 	.word	0x0800d090
 8009abc:	2301      	movs	r3, #1
 8009abe:	9a07      	ldr	r2, [sp, #28]
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f aed0 	beq.w	800986c <_printf_float+0x9c>
 8009acc:	f10a 0a01 	add.w	sl, sl, #1
 8009ad0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ad2:	9306      	str	r3, [sp, #24]
 8009ad4:	eba3 0309 	sub.w	r3, r3, r9
 8009ad8:	4553      	cmp	r3, sl
 8009ada:	dcef      	bgt.n	8009abc <_printf_float+0x2ec>
 8009adc:	9b06      	ldr	r3, [sp, #24]
 8009ade:	4498      	add	r8, r3
 8009ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	db15      	blt.n	8009b14 <_printf_float+0x344>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	07da      	lsls	r2, r3, #31
 8009aec:	d412      	bmi.n	8009b14 <_printf_float+0x344>
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	9a06      	ldr	r2, [sp, #24]
 8009af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009af4:	1a9a      	subs	r2, r3, r2
 8009af6:	eba3 0a01 	sub.w	sl, r3, r1
 8009afa:	4592      	cmp	sl, r2
 8009afc:	bfa8      	it	ge
 8009afe:	4692      	movge	sl, r2
 8009b00:	f1ba 0f00 	cmp.w	sl, #0
 8009b04:	dc0e      	bgt.n	8009b24 <_printf_float+0x354>
 8009b06:	f04f 0800 	mov.w	r8, #0
 8009b0a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b0e:	f104 091a 	add.w	r9, r4, #26
 8009b12:	e019      	b.n	8009b48 <_printf_float+0x378>
 8009b14:	9b05      	ldr	r3, [sp, #20]
 8009b16:	465a      	mov	r2, fp
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d1e5      	bne.n	8009aee <_printf_float+0x31e>
 8009b22:	e6a3      	b.n	800986c <_printf_float+0x9c>
 8009b24:	4653      	mov	r3, sl
 8009b26:	4642      	mov	r2, r8
 8009b28:	4631      	mov	r1, r6
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	47b8      	blx	r7
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d1e9      	bne.n	8009b06 <_printf_float+0x336>
 8009b32:	e69b      	b.n	800986c <_printf_float+0x9c>
 8009b34:	2301      	movs	r3, #1
 8009b36:	464a      	mov	r2, r9
 8009b38:	4631      	mov	r1, r6
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	47b8      	blx	r7
 8009b3e:	3001      	adds	r0, #1
 8009b40:	f43f ae94 	beq.w	800986c <_printf_float+0x9c>
 8009b44:	f108 0801 	add.w	r8, r8, #1
 8009b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b4c:	1a9b      	subs	r3, r3, r2
 8009b4e:	eba3 030a 	sub.w	r3, r3, sl
 8009b52:	4543      	cmp	r3, r8
 8009b54:	dcee      	bgt.n	8009b34 <_printf_float+0x364>
 8009b56:	e747      	b.n	80099e8 <_printf_float+0x218>
 8009b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b5a:	2a01      	cmp	r2, #1
 8009b5c:	dc01      	bgt.n	8009b62 <_printf_float+0x392>
 8009b5e:	07db      	lsls	r3, r3, #31
 8009b60:	d539      	bpl.n	8009bd6 <_printf_float+0x406>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4642      	mov	r2, r8
 8009b66:	4631      	mov	r1, r6
 8009b68:	4628      	mov	r0, r5
 8009b6a:	47b8      	blx	r7
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	f43f ae7d 	beq.w	800986c <_printf_float+0x9c>
 8009b72:	9b05      	ldr	r3, [sp, #20]
 8009b74:	465a      	mov	r2, fp
 8009b76:	4631      	mov	r1, r6
 8009b78:	4628      	mov	r0, r5
 8009b7a:	47b8      	blx	r7
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	f108 0801 	add.w	r8, r8, #1
 8009b82:	f43f ae73 	beq.w	800986c <_printf_float+0x9c>
 8009b86:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b94:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b98:	d018      	beq.n	8009bcc <_printf_float+0x3fc>
 8009b9a:	4642      	mov	r2, r8
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	d10e      	bne.n	8009bc4 <_printf_float+0x3f4>
 8009ba6:	e661      	b.n	800986c <_printf_float+0x9c>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	464a      	mov	r2, r9
 8009bac:	4631      	mov	r1, r6
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b8      	blx	r7
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	f43f ae5a 	beq.w	800986c <_printf_float+0x9c>
 8009bb8:	f108 0801 	add.w	r8, r8, #1
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	4543      	cmp	r3, r8
 8009bc2:	dcf1      	bgt.n	8009ba8 <_printf_float+0x3d8>
 8009bc4:	4653      	mov	r3, sl
 8009bc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009bca:	e6dd      	b.n	8009988 <_printf_float+0x1b8>
 8009bcc:	f04f 0800 	mov.w	r8, #0
 8009bd0:	f104 091a 	add.w	r9, r4, #26
 8009bd4:	e7f2      	b.n	8009bbc <_printf_float+0x3ec>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e7df      	b.n	8009b9a <_printf_float+0x3ca>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	464a      	mov	r2, r9
 8009bde:	4631      	mov	r1, r6
 8009be0:	4628      	mov	r0, r5
 8009be2:	47b8      	blx	r7
 8009be4:	3001      	adds	r0, #1
 8009be6:	f43f ae41 	beq.w	800986c <_printf_float+0x9c>
 8009bea:	f108 0801 	add.w	r8, r8, #1
 8009bee:	68e3      	ldr	r3, [r4, #12]
 8009bf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	4543      	cmp	r3, r8
 8009bf6:	dcf0      	bgt.n	8009bda <_printf_float+0x40a>
 8009bf8:	e6fa      	b.n	80099f0 <_printf_float+0x220>
 8009bfa:	f04f 0800 	mov.w	r8, #0
 8009bfe:	f104 0919 	add.w	r9, r4, #25
 8009c02:	e7f4      	b.n	8009bee <_printf_float+0x41e>
 8009c04:	2900      	cmp	r1, #0
 8009c06:	f43f ae8a 	beq.w	800991e <_printf_float+0x14e>
 8009c0a:	f04f 0c00 	mov.w	ip, #0
 8009c0e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8009c12:	e9cd 0900 	strd	r0, r9, [sp]
 8009c16:	6022      	str	r2, [r4, #0]
 8009c18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f7ff fd51 	bl	80096c4 <__cvt>
 8009c22:	4680      	mov	r8, r0
 8009c24:	e64a      	b.n	80098bc <_printf_float+0xec>
 8009c26:	bf00      	nop

08009c28 <_printf_common>:
 8009c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c2c:	4691      	mov	r9, r2
 8009c2e:	461f      	mov	r7, r3
 8009c30:	688a      	ldr	r2, [r1, #8]
 8009c32:	690b      	ldr	r3, [r1, #16]
 8009c34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	bfb8      	it	lt
 8009c3c:	4613      	movlt	r3, r2
 8009c3e:	f8c9 3000 	str.w	r3, [r9]
 8009c42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c46:	4606      	mov	r6, r0
 8009c48:	460c      	mov	r4, r1
 8009c4a:	b112      	cbz	r2, 8009c52 <_printf_common+0x2a>
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	f8c9 3000 	str.w	r3, [r9]
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	0699      	lsls	r1, r3, #26
 8009c56:	bf42      	ittt	mi
 8009c58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c5c:	3302      	addmi	r3, #2
 8009c5e:	f8c9 3000 	strmi.w	r3, [r9]
 8009c62:	6825      	ldr	r5, [r4, #0]
 8009c64:	f015 0506 	ands.w	r5, r5, #6
 8009c68:	d107      	bne.n	8009c7a <_printf_common+0x52>
 8009c6a:	f104 0a19 	add.w	sl, r4, #25
 8009c6e:	68e3      	ldr	r3, [r4, #12]
 8009c70:	f8d9 2000 	ldr.w	r2, [r9]
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	42ab      	cmp	r3, r5
 8009c78:	dc28      	bgt.n	8009ccc <_printf_common+0xa4>
 8009c7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c7e:	6822      	ldr	r2, [r4, #0]
 8009c80:	3300      	adds	r3, #0
 8009c82:	bf18      	it	ne
 8009c84:	2301      	movne	r3, #1
 8009c86:	0692      	lsls	r2, r2, #26
 8009c88:	d42d      	bmi.n	8009ce6 <_printf_common+0xbe>
 8009c8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c8e:	4639      	mov	r1, r7
 8009c90:	4630      	mov	r0, r6
 8009c92:	47c0      	blx	r8
 8009c94:	3001      	adds	r0, #1
 8009c96:	d020      	beq.n	8009cda <_printf_common+0xb2>
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	68e5      	ldr	r5, [r4, #12]
 8009c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8009ca0:	f003 0306 	and.w	r3, r3, #6
 8009ca4:	2b04      	cmp	r3, #4
 8009ca6:	bf08      	it	eq
 8009ca8:	1aad      	subeq	r5, r5, r2
 8009caa:	68a3      	ldr	r3, [r4, #8]
 8009cac:	6922      	ldr	r2, [r4, #16]
 8009cae:	bf0c      	ite	eq
 8009cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cb4:	2500      	movne	r5, #0
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	bfc4      	itt	gt
 8009cba:	1a9b      	subgt	r3, r3, r2
 8009cbc:	18ed      	addgt	r5, r5, r3
 8009cbe:	f04f 0900 	mov.w	r9, #0
 8009cc2:	341a      	adds	r4, #26
 8009cc4:	454d      	cmp	r5, r9
 8009cc6:	d11a      	bne.n	8009cfe <_printf_common+0xd6>
 8009cc8:	2000      	movs	r0, #0
 8009cca:	e008      	b.n	8009cde <_printf_common+0xb6>
 8009ccc:	2301      	movs	r3, #1
 8009cce:	4652      	mov	r2, sl
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	47c0      	blx	r8
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	d103      	bne.n	8009ce2 <_printf_common+0xba>
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295
 8009cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce2:	3501      	adds	r5, #1
 8009ce4:	e7c3      	b.n	8009c6e <_printf_common+0x46>
 8009ce6:	18e1      	adds	r1, r4, r3
 8009ce8:	1c5a      	adds	r2, r3, #1
 8009cea:	2030      	movs	r0, #48	; 0x30
 8009cec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cf0:	4422      	add	r2, r4
 8009cf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cfa:	3302      	adds	r3, #2
 8009cfc:	e7c5      	b.n	8009c8a <_printf_common+0x62>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	4622      	mov	r2, r4
 8009d02:	4639      	mov	r1, r7
 8009d04:	4630      	mov	r0, r6
 8009d06:	47c0      	blx	r8
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d0e6      	beq.n	8009cda <_printf_common+0xb2>
 8009d0c:	f109 0901 	add.w	r9, r9, #1
 8009d10:	e7d8      	b.n	8009cc4 <_printf_common+0x9c>
	...

08009d14 <_printf_i>:
 8009d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	7e09      	ldrb	r1, [r1, #24]
 8009d20:	b085      	sub	sp, #20
 8009d22:	296e      	cmp	r1, #110	; 0x6e
 8009d24:	4617      	mov	r7, r2
 8009d26:	4606      	mov	r6, r0
 8009d28:	4698      	mov	r8, r3
 8009d2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d2c:	f000 80b3 	beq.w	8009e96 <_printf_i+0x182>
 8009d30:	d822      	bhi.n	8009d78 <_printf_i+0x64>
 8009d32:	2963      	cmp	r1, #99	; 0x63
 8009d34:	d036      	beq.n	8009da4 <_printf_i+0x90>
 8009d36:	d80a      	bhi.n	8009d4e <_printf_i+0x3a>
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	f000 80b9 	beq.w	8009eb0 <_printf_i+0x19c>
 8009d3e:	2958      	cmp	r1, #88	; 0x58
 8009d40:	f000 8083 	beq.w	8009e4a <_printf_i+0x136>
 8009d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d4c:	e032      	b.n	8009db4 <_printf_i+0xa0>
 8009d4e:	2964      	cmp	r1, #100	; 0x64
 8009d50:	d001      	beq.n	8009d56 <_printf_i+0x42>
 8009d52:	2969      	cmp	r1, #105	; 0x69
 8009d54:	d1f6      	bne.n	8009d44 <_printf_i+0x30>
 8009d56:	6820      	ldr	r0, [r4, #0]
 8009d58:	6813      	ldr	r3, [r2, #0]
 8009d5a:	0605      	lsls	r5, r0, #24
 8009d5c:	f103 0104 	add.w	r1, r3, #4
 8009d60:	d52a      	bpl.n	8009db8 <_printf_i+0xa4>
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6011      	str	r1, [r2, #0]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	da03      	bge.n	8009d72 <_printf_i+0x5e>
 8009d6a:	222d      	movs	r2, #45	; 0x2d
 8009d6c:	425b      	negs	r3, r3
 8009d6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d72:	486f      	ldr	r0, [pc, #444]	; (8009f30 <_printf_i+0x21c>)
 8009d74:	220a      	movs	r2, #10
 8009d76:	e039      	b.n	8009dec <_printf_i+0xd8>
 8009d78:	2973      	cmp	r1, #115	; 0x73
 8009d7a:	f000 809d 	beq.w	8009eb8 <_printf_i+0x1a4>
 8009d7e:	d808      	bhi.n	8009d92 <_printf_i+0x7e>
 8009d80:	296f      	cmp	r1, #111	; 0x6f
 8009d82:	d020      	beq.n	8009dc6 <_printf_i+0xb2>
 8009d84:	2970      	cmp	r1, #112	; 0x70
 8009d86:	d1dd      	bne.n	8009d44 <_printf_i+0x30>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	f043 0320 	orr.w	r3, r3, #32
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	e003      	b.n	8009d9a <_printf_i+0x86>
 8009d92:	2975      	cmp	r1, #117	; 0x75
 8009d94:	d017      	beq.n	8009dc6 <_printf_i+0xb2>
 8009d96:	2978      	cmp	r1, #120	; 0x78
 8009d98:	d1d4      	bne.n	8009d44 <_printf_i+0x30>
 8009d9a:	2378      	movs	r3, #120	; 0x78
 8009d9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009da0:	4864      	ldr	r0, [pc, #400]	; (8009f34 <_printf_i+0x220>)
 8009da2:	e055      	b.n	8009e50 <_printf_i+0x13c>
 8009da4:	6813      	ldr	r3, [r2, #0]
 8009da6:	1d19      	adds	r1, r3, #4
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	6011      	str	r1, [r2, #0]
 8009dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009db0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009db4:	2301      	movs	r3, #1
 8009db6:	e08c      	b.n	8009ed2 <_printf_i+0x1be>
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6011      	str	r1, [r2, #0]
 8009dbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dc0:	bf18      	it	ne
 8009dc2:	b21b      	sxthne	r3, r3
 8009dc4:	e7cf      	b.n	8009d66 <_printf_i+0x52>
 8009dc6:	6813      	ldr	r3, [r2, #0]
 8009dc8:	6825      	ldr	r5, [r4, #0]
 8009dca:	1d18      	adds	r0, r3, #4
 8009dcc:	6010      	str	r0, [r2, #0]
 8009dce:	0628      	lsls	r0, r5, #24
 8009dd0:	d501      	bpl.n	8009dd6 <_printf_i+0xc2>
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	e002      	b.n	8009ddc <_printf_i+0xc8>
 8009dd6:	0668      	lsls	r0, r5, #25
 8009dd8:	d5fb      	bpl.n	8009dd2 <_printf_i+0xbe>
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	4854      	ldr	r0, [pc, #336]	; (8009f30 <_printf_i+0x21c>)
 8009dde:	296f      	cmp	r1, #111	; 0x6f
 8009de0:	bf14      	ite	ne
 8009de2:	220a      	movne	r2, #10
 8009de4:	2208      	moveq	r2, #8
 8009de6:	2100      	movs	r1, #0
 8009de8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dec:	6865      	ldr	r5, [r4, #4]
 8009dee:	60a5      	str	r5, [r4, #8]
 8009df0:	2d00      	cmp	r5, #0
 8009df2:	f2c0 8095 	blt.w	8009f20 <_printf_i+0x20c>
 8009df6:	6821      	ldr	r1, [r4, #0]
 8009df8:	f021 0104 	bic.w	r1, r1, #4
 8009dfc:	6021      	str	r1, [r4, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d13d      	bne.n	8009e7e <_printf_i+0x16a>
 8009e02:	2d00      	cmp	r5, #0
 8009e04:	f040 808e 	bne.w	8009f24 <_printf_i+0x210>
 8009e08:	4665      	mov	r5, ip
 8009e0a:	2a08      	cmp	r2, #8
 8009e0c:	d10b      	bne.n	8009e26 <_printf_i+0x112>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	07db      	lsls	r3, r3, #31
 8009e12:	d508      	bpl.n	8009e26 <_printf_i+0x112>
 8009e14:	6923      	ldr	r3, [r4, #16]
 8009e16:	6862      	ldr	r2, [r4, #4]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	bfde      	ittt	le
 8009e1c:	2330      	movle	r3, #48	; 0x30
 8009e1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e26:	ebac 0305 	sub.w	r3, ip, r5
 8009e2a:	6123      	str	r3, [r4, #16]
 8009e2c:	f8cd 8000 	str.w	r8, [sp]
 8009e30:	463b      	mov	r3, r7
 8009e32:	aa03      	add	r2, sp, #12
 8009e34:	4621      	mov	r1, r4
 8009e36:	4630      	mov	r0, r6
 8009e38:	f7ff fef6 	bl	8009c28 <_printf_common>
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d14d      	bne.n	8009edc <_printf_i+0x1c8>
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295
 8009e44:	b005      	add	sp, #20
 8009e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e4a:	4839      	ldr	r0, [pc, #228]	; (8009f30 <_printf_i+0x21c>)
 8009e4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e50:	6813      	ldr	r3, [r2, #0]
 8009e52:	6821      	ldr	r1, [r4, #0]
 8009e54:	1d1d      	adds	r5, r3, #4
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6015      	str	r5, [r2, #0]
 8009e5a:	060a      	lsls	r2, r1, #24
 8009e5c:	d50b      	bpl.n	8009e76 <_printf_i+0x162>
 8009e5e:	07ca      	lsls	r2, r1, #31
 8009e60:	bf44      	itt	mi
 8009e62:	f041 0120 	orrmi.w	r1, r1, #32
 8009e66:	6021      	strmi	r1, [r4, #0]
 8009e68:	b91b      	cbnz	r3, 8009e72 <_printf_i+0x15e>
 8009e6a:	6822      	ldr	r2, [r4, #0]
 8009e6c:	f022 0220 	bic.w	r2, r2, #32
 8009e70:	6022      	str	r2, [r4, #0]
 8009e72:	2210      	movs	r2, #16
 8009e74:	e7b7      	b.n	8009de6 <_printf_i+0xd2>
 8009e76:	064d      	lsls	r5, r1, #25
 8009e78:	bf48      	it	mi
 8009e7a:	b29b      	uxthmi	r3, r3
 8009e7c:	e7ef      	b.n	8009e5e <_printf_i+0x14a>
 8009e7e:	4665      	mov	r5, ip
 8009e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e84:	fb02 3311 	mls	r3, r2, r1, r3
 8009e88:	5cc3      	ldrb	r3, [r0, r3]
 8009e8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e8e:	460b      	mov	r3, r1
 8009e90:	2900      	cmp	r1, #0
 8009e92:	d1f5      	bne.n	8009e80 <_printf_i+0x16c>
 8009e94:	e7b9      	b.n	8009e0a <_printf_i+0xf6>
 8009e96:	6813      	ldr	r3, [r2, #0]
 8009e98:	6825      	ldr	r5, [r4, #0]
 8009e9a:	6961      	ldr	r1, [r4, #20]
 8009e9c:	1d18      	adds	r0, r3, #4
 8009e9e:	6010      	str	r0, [r2, #0]
 8009ea0:	0628      	lsls	r0, r5, #24
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	d501      	bpl.n	8009eaa <_printf_i+0x196>
 8009ea6:	6019      	str	r1, [r3, #0]
 8009ea8:	e002      	b.n	8009eb0 <_printf_i+0x19c>
 8009eaa:	066a      	lsls	r2, r5, #25
 8009eac:	d5fb      	bpl.n	8009ea6 <_printf_i+0x192>
 8009eae:	8019      	strh	r1, [r3, #0]
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	6123      	str	r3, [r4, #16]
 8009eb4:	4665      	mov	r5, ip
 8009eb6:	e7b9      	b.n	8009e2c <_printf_i+0x118>
 8009eb8:	6813      	ldr	r3, [r2, #0]
 8009eba:	1d19      	adds	r1, r3, #4
 8009ebc:	6011      	str	r1, [r2, #0]
 8009ebe:	681d      	ldr	r5, [r3, #0]
 8009ec0:	6862      	ldr	r2, [r4, #4]
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	4628      	mov	r0, r5
 8009ec6:	f7f6 f9c3 	bl	8000250 <memchr>
 8009eca:	b108      	cbz	r0, 8009ed0 <_printf_i+0x1bc>
 8009ecc:	1b40      	subs	r0, r0, r5
 8009ece:	6060      	str	r0, [r4, #4]
 8009ed0:	6863      	ldr	r3, [r4, #4]
 8009ed2:	6123      	str	r3, [r4, #16]
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eda:	e7a7      	b.n	8009e2c <_printf_i+0x118>
 8009edc:	6923      	ldr	r3, [r4, #16]
 8009ede:	462a      	mov	r2, r5
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	47c0      	blx	r8
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d0aa      	beq.n	8009e40 <_printf_i+0x12c>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	079b      	lsls	r3, r3, #30
 8009eee:	d413      	bmi.n	8009f18 <_printf_i+0x204>
 8009ef0:	68e0      	ldr	r0, [r4, #12]
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	4298      	cmp	r0, r3
 8009ef6:	bfb8      	it	lt
 8009ef8:	4618      	movlt	r0, r3
 8009efa:	e7a3      	b.n	8009e44 <_printf_i+0x130>
 8009efc:	2301      	movs	r3, #1
 8009efe:	464a      	mov	r2, r9
 8009f00:	4639      	mov	r1, r7
 8009f02:	4630      	mov	r0, r6
 8009f04:	47c0      	blx	r8
 8009f06:	3001      	adds	r0, #1
 8009f08:	d09a      	beq.n	8009e40 <_printf_i+0x12c>
 8009f0a:	3501      	adds	r5, #1
 8009f0c:	68e3      	ldr	r3, [r4, #12]
 8009f0e:	9a03      	ldr	r2, [sp, #12]
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	42ab      	cmp	r3, r5
 8009f14:	dcf2      	bgt.n	8009efc <_printf_i+0x1e8>
 8009f16:	e7eb      	b.n	8009ef0 <_printf_i+0x1dc>
 8009f18:	2500      	movs	r5, #0
 8009f1a:	f104 0919 	add.w	r9, r4, #25
 8009f1e:	e7f5      	b.n	8009f0c <_printf_i+0x1f8>
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1ac      	bne.n	8009e7e <_printf_i+0x16a>
 8009f24:	7803      	ldrb	r3, [r0, #0]
 8009f26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f2e:	e76c      	b.n	8009e0a <_printf_i+0xf6>
 8009f30:	0800d092 	.word	0x0800d092
 8009f34:	0800d0a3 	.word	0x0800d0a3

08009f38 <_scanf_float>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	469a      	mov	sl, r3
 8009f3e:	688b      	ldr	r3, [r1, #8]
 8009f40:	4616      	mov	r6, r2
 8009f42:	1e5a      	subs	r2, r3, #1
 8009f44:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f48:	b087      	sub	sp, #28
 8009f4a:	bf83      	ittte	hi
 8009f4c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009f50:	189b      	addhi	r3, r3, r2
 8009f52:	9301      	strhi	r3, [sp, #4]
 8009f54:	2300      	movls	r3, #0
 8009f56:	bf86      	itte	hi
 8009f58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f5c:	608b      	strhi	r3, [r1, #8]
 8009f5e:	9301      	strls	r3, [sp, #4]
 8009f60:	680b      	ldr	r3, [r1, #0]
 8009f62:	4688      	mov	r8, r1
 8009f64:	f04f 0b00 	mov.w	fp, #0
 8009f68:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f6c:	f848 3b1c 	str.w	r3, [r8], #28
 8009f70:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009f74:	4607      	mov	r7, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	4645      	mov	r5, r8
 8009f7a:	465a      	mov	r2, fp
 8009f7c:	46d9      	mov	r9, fp
 8009f7e:	f8cd b008 	str.w	fp, [sp, #8]
 8009f82:	68a1      	ldr	r1, [r4, #8]
 8009f84:	b181      	cbz	r1, 8009fa8 <_scanf_float+0x70>
 8009f86:	6833      	ldr	r3, [r6, #0]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b49      	cmp	r3, #73	; 0x49
 8009f8c:	d071      	beq.n	800a072 <_scanf_float+0x13a>
 8009f8e:	d84d      	bhi.n	800a02c <_scanf_float+0xf4>
 8009f90:	2b39      	cmp	r3, #57	; 0x39
 8009f92:	d840      	bhi.n	800a016 <_scanf_float+0xde>
 8009f94:	2b31      	cmp	r3, #49	; 0x31
 8009f96:	f080 8088 	bcs.w	800a0aa <_scanf_float+0x172>
 8009f9a:	2b2d      	cmp	r3, #45	; 0x2d
 8009f9c:	f000 8090 	beq.w	800a0c0 <_scanf_float+0x188>
 8009fa0:	d815      	bhi.n	8009fce <_scanf_float+0x96>
 8009fa2:	2b2b      	cmp	r3, #43	; 0x2b
 8009fa4:	f000 808c 	beq.w	800a0c0 <_scanf_float+0x188>
 8009fa8:	f1b9 0f00 	cmp.w	r9, #0
 8009fac:	d003      	beq.n	8009fb6 <_scanf_float+0x7e>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	3a01      	subs	r2, #1
 8009fb8:	2a01      	cmp	r2, #1
 8009fba:	f200 80ea 	bhi.w	800a192 <_scanf_float+0x25a>
 8009fbe:	4545      	cmp	r5, r8
 8009fc0:	f200 80dc 	bhi.w	800a17c <_scanf_float+0x244>
 8009fc4:	2601      	movs	r6, #1
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	b007      	add	sp, #28
 8009fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fce:	2b2e      	cmp	r3, #46	; 0x2e
 8009fd0:	f000 809f 	beq.w	800a112 <_scanf_float+0x1da>
 8009fd4:	2b30      	cmp	r3, #48	; 0x30
 8009fd6:	d1e7      	bne.n	8009fa8 <_scanf_float+0x70>
 8009fd8:	6820      	ldr	r0, [r4, #0]
 8009fda:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009fde:	d064      	beq.n	800a0aa <_scanf_float+0x172>
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009fe6:	6020      	str	r0, [r4, #0]
 8009fe8:	f109 0901 	add.w	r9, r9, #1
 8009fec:	b11b      	cbz	r3, 8009ff6 <_scanf_float+0xbe>
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	3101      	adds	r1, #1
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	60a1      	str	r1, [r4, #8]
 8009ff6:	68a3      	ldr	r3, [r4, #8]
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	60a3      	str	r3, [r4, #8]
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	3301      	adds	r3, #1
 800a000:	6123      	str	r3, [r4, #16]
 800a002:	6873      	ldr	r3, [r6, #4]
 800a004:	3b01      	subs	r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	6073      	str	r3, [r6, #4]
 800a00a:	f340 80ac 	ble.w	800a166 <_scanf_float+0x22e>
 800a00e:	6833      	ldr	r3, [r6, #0]
 800a010:	3301      	adds	r3, #1
 800a012:	6033      	str	r3, [r6, #0]
 800a014:	e7b5      	b.n	8009f82 <_scanf_float+0x4a>
 800a016:	2b45      	cmp	r3, #69	; 0x45
 800a018:	f000 8085 	beq.w	800a126 <_scanf_float+0x1ee>
 800a01c:	2b46      	cmp	r3, #70	; 0x46
 800a01e:	d06a      	beq.n	800a0f6 <_scanf_float+0x1be>
 800a020:	2b41      	cmp	r3, #65	; 0x41
 800a022:	d1c1      	bne.n	8009fa8 <_scanf_float+0x70>
 800a024:	2a01      	cmp	r2, #1
 800a026:	d1bf      	bne.n	8009fa8 <_scanf_float+0x70>
 800a028:	2202      	movs	r2, #2
 800a02a:	e046      	b.n	800a0ba <_scanf_float+0x182>
 800a02c:	2b65      	cmp	r3, #101	; 0x65
 800a02e:	d07a      	beq.n	800a126 <_scanf_float+0x1ee>
 800a030:	d818      	bhi.n	800a064 <_scanf_float+0x12c>
 800a032:	2b54      	cmp	r3, #84	; 0x54
 800a034:	d066      	beq.n	800a104 <_scanf_float+0x1cc>
 800a036:	d811      	bhi.n	800a05c <_scanf_float+0x124>
 800a038:	2b4e      	cmp	r3, #78	; 0x4e
 800a03a:	d1b5      	bne.n	8009fa8 <_scanf_float+0x70>
 800a03c:	2a00      	cmp	r2, #0
 800a03e:	d146      	bne.n	800a0ce <_scanf_float+0x196>
 800a040:	f1b9 0f00 	cmp.w	r9, #0
 800a044:	d145      	bne.n	800a0d2 <_scanf_float+0x19a>
 800a046:	6821      	ldr	r1, [r4, #0]
 800a048:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a04c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a050:	d13f      	bne.n	800a0d2 <_scanf_float+0x19a>
 800a052:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a056:	6021      	str	r1, [r4, #0]
 800a058:	2201      	movs	r2, #1
 800a05a:	e02e      	b.n	800a0ba <_scanf_float+0x182>
 800a05c:	2b59      	cmp	r3, #89	; 0x59
 800a05e:	d01e      	beq.n	800a09e <_scanf_float+0x166>
 800a060:	2b61      	cmp	r3, #97	; 0x61
 800a062:	e7de      	b.n	800a022 <_scanf_float+0xea>
 800a064:	2b6e      	cmp	r3, #110	; 0x6e
 800a066:	d0e9      	beq.n	800a03c <_scanf_float+0x104>
 800a068:	d815      	bhi.n	800a096 <_scanf_float+0x15e>
 800a06a:	2b66      	cmp	r3, #102	; 0x66
 800a06c:	d043      	beq.n	800a0f6 <_scanf_float+0x1be>
 800a06e:	2b69      	cmp	r3, #105	; 0x69
 800a070:	d19a      	bne.n	8009fa8 <_scanf_float+0x70>
 800a072:	f1bb 0f00 	cmp.w	fp, #0
 800a076:	d138      	bne.n	800a0ea <_scanf_float+0x1b2>
 800a078:	f1b9 0f00 	cmp.w	r9, #0
 800a07c:	d197      	bne.n	8009fae <_scanf_float+0x76>
 800a07e:	6821      	ldr	r1, [r4, #0]
 800a080:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800a084:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800a088:	d195      	bne.n	8009fb6 <_scanf_float+0x7e>
 800a08a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a08e:	6021      	str	r1, [r4, #0]
 800a090:	f04f 0b01 	mov.w	fp, #1
 800a094:	e011      	b.n	800a0ba <_scanf_float+0x182>
 800a096:	2b74      	cmp	r3, #116	; 0x74
 800a098:	d034      	beq.n	800a104 <_scanf_float+0x1cc>
 800a09a:	2b79      	cmp	r3, #121	; 0x79
 800a09c:	d184      	bne.n	8009fa8 <_scanf_float+0x70>
 800a09e:	f1bb 0f07 	cmp.w	fp, #7
 800a0a2:	d181      	bne.n	8009fa8 <_scanf_float+0x70>
 800a0a4:	f04f 0b08 	mov.w	fp, #8
 800a0a8:	e007      	b.n	800a0ba <_scanf_float+0x182>
 800a0aa:	eb12 0f0b 	cmn.w	r2, fp
 800a0ae:	f47f af7b 	bne.w	8009fa8 <_scanf_float+0x70>
 800a0b2:	6821      	ldr	r1, [r4, #0]
 800a0b4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800a0b8:	6021      	str	r1, [r4, #0]
 800a0ba:	702b      	strb	r3, [r5, #0]
 800a0bc:	3501      	adds	r5, #1
 800a0be:	e79a      	b.n	8009ff6 <_scanf_float+0xbe>
 800a0c0:	6821      	ldr	r1, [r4, #0]
 800a0c2:	0608      	lsls	r0, r1, #24
 800a0c4:	f57f af70 	bpl.w	8009fa8 <_scanf_float+0x70>
 800a0c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a0cc:	e7f4      	b.n	800a0b8 <_scanf_float+0x180>
 800a0ce:	2a02      	cmp	r2, #2
 800a0d0:	d047      	beq.n	800a162 <_scanf_float+0x22a>
 800a0d2:	f1bb 0f01 	cmp.w	fp, #1
 800a0d6:	d003      	beq.n	800a0e0 <_scanf_float+0x1a8>
 800a0d8:	f1bb 0f04 	cmp.w	fp, #4
 800a0dc:	f47f af64 	bne.w	8009fa8 <_scanf_float+0x70>
 800a0e0:	f10b 0b01 	add.w	fp, fp, #1
 800a0e4:	fa5f fb8b 	uxtb.w	fp, fp
 800a0e8:	e7e7      	b.n	800a0ba <_scanf_float+0x182>
 800a0ea:	f1bb 0f03 	cmp.w	fp, #3
 800a0ee:	d0f7      	beq.n	800a0e0 <_scanf_float+0x1a8>
 800a0f0:	f1bb 0f05 	cmp.w	fp, #5
 800a0f4:	e7f2      	b.n	800a0dc <_scanf_float+0x1a4>
 800a0f6:	f1bb 0f02 	cmp.w	fp, #2
 800a0fa:	f47f af55 	bne.w	8009fa8 <_scanf_float+0x70>
 800a0fe:	f04f 0b03 	mov.w	fp, #3
 800a102:	e7da      	b.n	800a0ba <_scanf_float+0x182>
 800a104:	f1bb 0f06 	cmp.w	fp, #6
 800a108:	f47f af4e 	bne.w	8009fa8 <_scanf_float+0x70>
 800a10c:	f04f 0b07 	mov.w	fp, #7
 800a110:	e7d3      	b.n	800a0ba <_scanf_float+0x182>
 800a112:	6821      	ldr	r1, [r4, #0]
 800a114:	0588      	lsls	r0, r1, #22
 800a116:	f57f af47 	bpl.w	8009fa8 <_scanf_float+0x70>
 800a11a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800a11e:	6021      	str	r1, [r4, #0]
 800a120:	f8cd 9008 	str.w	r9, [sp, #8]
 800a124:	e7c9      	b.n	800a0ba <_scanf_float+0x182>
 800a126:	6821      	ldr	r1, [r4, #0]
 800a128:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800a12c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800a130:	d006      	beq.n	800a140 <_scanf_float+0x208>
 800a132:	0548      	lsls	r0, r1, #21
 800a134:	f57f af38 	bpl.w	8009fa8 <_scanf_float+0x70>
 800a138:	f1b9 0f00 	cmp.w	r9, #0
 800a13c:	f43f af3b 	beq.w	8009fb6 <_scanf_float+0x7e>
 800a140:	0588      	lsls	r0, r1, #22
 800a142:	bf58      	it	pl
 800a144:	9802      	ldrpl	r0, [sp, #8]
 800a146:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800a14a:	bf58      	it	pl
 800a14c:	eba9 0000 	subpl.w	r0, r9, r0
 800a150:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800a154:	bf58      	it	pl
 800a156:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800a15a:	6021      	str	r1, [r4, #0]
 800a15c:	f04f 0900 	mov.w	r9, #0
 800a160:	e7ab      	b.n	800a0ba <_scanf_float+0x182>
 800a162:	2203      	movs	r2, #3
 800a164:	e7a9      	b.n	800a0ba <_scanf_float+0x182>
 800a166:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a16a:	9205      	str	r2, [sp, #20]
 800a16c:	4631      	mov	r1, r6
 800a16e:	4638      	mov	r0, r7
 800a170:	4798      	blx	r3
 800a172:	9a05      	ldr	r2, [sp, #20]
 800a174:	2800      	cmp	r0, #0
 800a176:	f43f af04 	beq.w	8009f82 <_scanf_float+0x4a>
 800a17a:	e715      	b.n	8009fa8 <_scanf_float+0x70>
 800a17c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a180:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a184:	4632      	mov	r2, r6
 800a186:	4638      	mov	r0, r7
 800a188:	4798      	blx	r3
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	3b01      	subs	r3, #1
 800a18e:	6123      	str	r3, [r4, #16]
 800a190:	e715      	b.n	8009fbe <_scanf_float+0x86>
 800a192:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a196:	2b06      	cmp	r3, #6
 800a198:	d80a      	bhi.n	800a1b0 <_scanf_float+0x278>
 800a19a:	f1bb 0f02 	cmp.w	fp, #2
 800a19e:	d966      	bls.n	800a26e <_scanf_float+0x336>
 800a1a0:	f1ab 0b03 	sub.w	fp, fp, #3
 800a1a4:	fa5f fb8b 	uxtb.w	fp, fp
 800a1a8:	eba5 0b0b 	sub.w	fp, r5, fp
 800a1ac:	455d      	cmp	r5, fp
 800a1ae:	d149      	bne.n	800a244 <_scanf_float+0x30c>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	05da      	lsls	r2, r3, #23
 800a1b4:	d51f      	bpl.n	800a1f6 <_scanf_float+0x2be>
 800a1b6:	055b      	lsls	r3, r3, #21
 800a1b8:	d466      	bmi.n	800a288 <_scanf_float+0x350>
 800a1ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	2965      	cmp	r1, #101	; 0x65
 800a1c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a1c6:	f105 3bff 	add.w	fp, r5, #4294967295
 800a1ca:	6123      	str	r3, [r4, #16]
 800a1cc:	d00d      	beq.n	800a1ea <_scanf_float+0x2b2>
 800a1ce:	2945      	cmp	r1, #69	; 0x45
 800a1d0:	d00b      	beq.n	800a1ea <_scanf_float+0x2b2>
 800a1d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1d6:	4632      	mov	r2, r6
 800a1d8:	4638      	mov	r0, r7
 800a1da:	4798      	blx	r3
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	f1a5 0b02 	sub.w	fp, r5, #2
 800a1e8:	6123      	str	r3, [r4, #16]
 800a1ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1ee:	4632      	mov	r2, r6
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	4798      	blx	r3
 800a1f4:	465d      	mov	r5, fp
 800a1f6:	6826      	ldr	r6, [r4, #0]
 800a1f8:	f016 0610 	ands.w	r6, r6, #16
 800a1fc:	d170      	bne.n	800a2e0 <_scanf_float+0x3a8>
 800a1fe:	702e      	strb	r6, [r5, #0]
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a20a:	d140      	bne.n	800a28e <_scanf_float+0x356>
 800a20c:	9b02      	ldr	r3, [sp, #8]
 800a20e:	eba9 0303 	sub.w	r3, r9, r3
 800a212:	425a      	negs	r2, r3
 800a214:	2b00      	cmp	r3, #0
 800a216:	d147      	bne.n	800a2a8 <_scanf_float+0x370>
 800a218:	2200      	movs	r2, #0
 800a21a:	4638      	mov	r0, r7
 800a21c:	4641      	mov	r1, r8
 800a21e:	f000 fe6b 	bl	800aef8 <_strtod_r>
 800a222:	6820      	ldr	r0, [r4, #0]
 800a224:	f8da 3000 	ldr.w	r3, [sl]
 800a228:	f010 0f02 	tst.w	r0, #2
 800a22c:	f103 0204 	add.w	r2, r3, #4
 800a230:	f8ca 2000 	str.w	r2, [sl]
 800a234:	d043      	beq.n	800a2be <_scanf_float+0x386>
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	ed83 0b00 	vstr	d0, [r3]
 800a23c:	68e3      	ldr	r3, [r4, #12]
 800a23e:	3301      	adds	r3, #1
 800a240:	60e3      	str	r3, [r4, #12]
 800a242:	e6c0      	b.n	8009fc6 <_scanf_float+0x8e>
 800a244:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a248:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a24c:	4632      	mov	r2, r6
 800a24e:	4638      	mov	r0, r7
 800a250:	4798      	blx	r3
 800a252:	6923      	ldr	r3, [r4, #16]
 800a254:	3b01      	subs	r3, #1
 800a256:	6123      	str	r3, [r4, #16]
 800a258:	e7a8      	b.n	800a1ac <_scanf_float+0x274>
 800a25a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a25e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a262:	4632      	mov	r2, r6
 800a264:	4638      	mov	r0, r7
 800a266:	4798      	blx	r3
 800a268:	6923      	ldr	r3, [r4, #16]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	6123      	str	r3, [r4, #16]
 800a26e:	4545      	cmp	r5, r8
 800a270:	d8f3      	bhi.n	800a25a <_scanf_float+0x322>
 800a272:	e6a7      	b.n	8009fc4 <_scanf_float+0x8c>
 800a274:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a278:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a27c:	4632      	mov	r2, r6
 800a27e:	4638      	mov	r0, r7
 800a280:	4798      	blx	r3
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	3b01      	subs	r3, #1
 800a286:	6123      	str	r3, [r4, #16]
 800a288:	4545      	cmp	r5, r8
 800a28a:	d8f3      	bhi.n	800a274 <_scanf_float+0x33c>
 800a28c:	e69a      	b.n	8009fc4 <_scanf_float+0x8c>
 800a28e:	9b03      	ldr	r3, [sp, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d0c1      	beq.n	800a218 <_scanf_float+0x2e0>
 800a294:	9904      	ldr	r1, [sp, #16]
 800a296:	230a      	movs	r3, #10
 800a298:	4632      	mov	r2, r6
 800a29a:	3101      	adds	r1, #1
 800a29c:	4638      	mov	r0, r7
 800a29e:	f000 feb7 	bl	800b010 <_strtol_r>
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	9d04      	ldr	r5, [sp, #16]
 800a2a6:	1ac2      	subs	r2, r0, r3
 800a2a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a2ac:	429d      	cmp	r5, r3
 800a2ae:	bf28      	it	cs
 800a2b0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a2b4:	490b      	ldr	r1, [pc, #44]	; (800a2e4 <_scanf_float+0x3ac>)
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f000 f81c 	bl	800a2f4 <siprintf>
 800a2bc:	e7ac      	b.n	800a218 <_scanf_float+0x2e0>
 800a2be:	f010 0004 	ands.w	r0, r0, #4
 800a2c2:	d1b8      	bne.n	800a236 <_scanf_float+0x2fe>
 800a2c4:	eeb4 0b40 	vcmp.f64	d0, d0
 800a2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2cc:	681d      	ldr	r5, [r3, #0]
 800a2ce:	d704      	bvc.n	800a2da <_scanf_float+0x3a2>
 800a2d0:	f000 f80a 	bl	800a2e8 <nanf>
 800a2d4:	ed85 0a00 	vstr	s0, [r5]
 800a2d8:	e7b0      	b.n	800a23c <_scanf_float+0x304>
 800a2da:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a2de:	e7f9      	b.n	800a2d4 <_scanf_float+0x39c>
 800a2e0:	2600      	movs	r6, #0
 800a2e2:	e670      	b.n	8009fc6 <_scanf_float+0x8e>
 800a2e4:	0800d0b4 	.word	0x0800d0b4

0800a2e8 <nanf>:
 800a2e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a2f0 <nanf+0x8>
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	7fc00000 	.word	0x7fc00000

0800a2f4 <siprintf>:
 800a2f4:	b40e      	push	{r1, r2, r3}
 800a2f6:	b500      	push	{lr}
 800a2f8:	b09c      	sub	sp, #112	; 0x70
 800a2fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a2fc:	9002      	str	r0, [sp, #8]
 800a2fe:	9006      	str	r0, [sp, #24]
 800a300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a304:	4809      	ldr	r0, [pc, #36]	; (800a32c <siprintf+0x38>)
 800a306:	9107      	str	r1, [sp, #28]
 800a308:	9104      	str	r1, [sp, #16]
 800a30a:	4909      	ldr	r1, [pc, #36]	; (800a330 <siprintf+0x3c>)
 800a30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a310:	9105      	str	r1, [sp, #20]
 800a312:	6800      	ldr	r0, [r0, #0]
 800a314:	9301      	str	r3, [sp, #4]
 800a316:	a902      	add	r1, sp, #8
 800a318:	f002 fcd4 	bl	800ccc4 <_svfiprintf_r>
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]
 800a322:	b01c      	add	sp, #112	; 0x70
 800a324:	f85d eb04 	ldr.w	lr, [sp], #4
 800a328:	b003      	add	sp, #12
 800a32a:	4770      	bx	lr
 800a32c:	20000024 	.word	0x20000024
 800a330:	ffff0208 	.word	0xffff0208

0800a334 <sulp>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	4604      	mov	r4, r0
 800a338:	460d      	mov	r5, r1
 800a33a:	4616      	mov	r6, r2
 800a33c:	ec45 4b10 	vmov	d0, r4, r5
 800a340:	f002 fa7c 	bl	800c83c <__ulp>
 800a344:	b17e      	cbz	r6, 800a366 <sulp+0x32>
 800a346:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a34a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a34e:	2b00      	cmp	r3, #0
 800a350:	dd09      	ble.n	800a366 <sulp+0x32>
 800a352:	051b      	lsls	r3, r3, #20
 800a354:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a358:	2000      	movs	r0, #0
 800a35a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a35e:	ec41 0b17 	vmov	d7, r0, r1
 800a362:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a366:	bd70      	pop	{r4, r5, r6, pc}

0800a368 <_strtod_l>:
 800a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	ed2d 8b0c 	vpush	{d8-d13}
 800a370:	4698      	mov	r8, r3
 800a372:	b09d      	sub	sp, #116	; 0x74
 800a374:	2300      	movs	r3, #0
 800a376:	4604      	mov	r4, r0
 800a378:	4640      	mov	r0, r8
 800a37a:	460e      	mov	r6, r1
 800a37c:	9214      	str	r2, [sp, #80]	; 0x50
 800a37e:	9318      	str	r3, [sp, #96]	; 0x60
 800a380:	f001 ff5b 	bl	800c23a <__localeconv_l>
 800a384:	4681      	mov	r9, r0
 800a386:	6800      	ldr	r0, [r0, #0]
 800a388:	f7f5 ff5a 	bl	8000240 <strlen>
 800a38c:	f04f 0a00 	mov.w	sl, #0
 800a390:	4607      	mov	r7, r0
 800a392:	f04f 0b00 	mov.w	fp, #0
 800a396:	9617      	str	r6, [sp, #92]	; 0x5c
 800a398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a39a:	781a      	ldrb	r2, [r3, #0]
 800a39c:	2a0d      	cmp	r2, #13
 800a39e:	d834      	bhi.n	800a40a <_strtod_l+0xa2>
 800a3a0:	2a09      	cmp	r2, #9
 800a3a2:	d238      	bcs.n	800a416 <_strtod_l+0xae>
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	d040      	beq.n	800a42a <_strtod_l+0xc2>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	930d      	str	r3, [sp, #52]	; 0x34
 800a3ac:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800a3ae:	782b      	ldrb	r3, [r5, #0]
 800a3b0:	2b30      	cmp	r3, #48	; 0x30
 800a3b2:	f040 80b3 	bne.w	800a51c <_strtod_l+0x1b4>
 800a3b6:	786b      	ldrb	r3, [r5, #1]
 800a3b8:	2b58      	cmp	r3, #88	; 0x58
 800a3ba:	d001      	beq.n	800a3c0 <_strtod_l+0x58>
 800a3bc:	2b78      	cmp	r3, #120	; 0x78
 800a3be:	d169      	bne.n	800a494 <_strtod_l+0x12c>
 800a3c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	ab18      	add	r3, sp, #96	; 0x60
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	f8cd 8008 	str.w	r8, [sp, #8]
 800a3cc:	ab19      	add	r3, sp, #100	; 0x64
 800a3ce:	4a8f      	ldr	r2, [pc, #572]	; (800a60c <_strtod_l+0x2a4>)
 800a3d0:	a917      	add	r1, sp, #92	; 0x5c
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f001 fc57 	bl	800bc86 <__gethex>
 800a3d8:	f010 0607 	ands.w	r6, r0, #7
 800a3dc:	4607      	mov	r7, r0
 800a3de:	d005      	beq.n	800a3ec <_strtod_l+0x84>
 800a3e0:	2e06      	cmp	r6, #6
 800a3e2:	d12c      	bne.n	800a43e <_strtod_l+0xd6>
 800a3e4:	3501      	adds	r5, #1
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	9517      	str	r5, [sp, #92]	; 0x5c
 800a3ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a3ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f040 855e 	bne.w	800aeb0 <_strtod_l+0xb48>
 800a3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3f6:	b1eb      	cbz	r3, 800a434 <_strtod_l+0xcc>
 800a3f8:	ec4b ab17 	vmov	d7, sl, fp
 800a3fc:	eeb1 0b47 	vneg.f64	d0, d7
 800a400:	b01d      	add	sp, #116	; 0x74
 800a402:	ecbd 8b0c 	vpop	{d8-d13}
 800a406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40a:	2a2b      	cmp	r2, #43	; 0x2b
 800a40c:	d015      	beq.n	800a43a <_strtod_l+0xd2>
 800a40e:	2a2d      	cmp	r2, #45	; 0x2d
 800a410:	d004      	beq.n	800a41c <_strtod_l+0xb4>
 800a412:	2a20      	cmp	r2, #32
 800a414:	d1c8      	bne.n	800a3a8 <_strtod_l+0x40>
 800a416:	3301      	adds	r3, #1
 800a418:	9317      	str	r3, [sp, #92]	; 0x5c
 800a41a:	e7bd      	b.n	800a398 <_strtod_l+0x30>
 800a41c:	2201      	movs	r2, #1
 800a41e:	920d      	str	r2, [sp, #52]	; 0x34
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	9217      	str	r2, [sp, #92]	; 0x5c
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1c0      	bne.n	800a3ac <_strtod_l+0x44>
 800a42a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a42c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f040 853c 	bne.w	800aeac <_strtod_l+0xb44>
 800a434:	ec4b ab10 	vmov	d0, sl, fp
 800a438:	e7e2      	b.n	800a400 <_strtod_l+0x98>
 800a43a:	2200      	movs	r2, #0
 800a43c:	e7ef      	b.n	800a41e <_strtod_l+0xb6>
 800a43e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a440:	b13a      	cbz	r2, 800a452 <_strtod_l+0xea>
 800a442:	2135      	movs	r1, #53	; 0x35
 800a444:	a81a      	add	r0, sp, #104	; 0x68
 800a446:	f002 faf2 	bl	800ca2e <__copybits>
 800a44a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a44c:	4620      	mov	r0, r4
 800a44e:	f001 ff5e 	bl	800c30e <_Bfree>
 800a452:	3e01      	subs	r6, #1
 800a454:	2e04      	cmp	r6, #4
 800a456:	d806      	bhi.n	800a466 <_strtod_l+0xfe>
 800a458:	e8df f006 	tbb	[pc, r6]
 800a45c:	1714030a 	.word	0x1714030a
 800a460:	0a          	.byte	0x0a
 800a461:	00          	.byte	0x00
 800a462:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a466:	073b      	lsls	r3, r7, #28
 800a468:	d5c0      	bpl.n	800a3ec <_strtod_l+0x84>
 800a46a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a46e:	e7bd      	b.n	800a3ec <_strtod_l+0x84>
 800a470:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a474:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a476:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a47a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a47e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a482:	e7f0      	b.n	800a466 <_strtod_l+0xfe>
 800a484:	f8df b188 	ldr.w	fp, [pc, #392]	; 800a610 <_strtod_l+0x2a8>
 800a488:	e7ed      	b.n	800a466 <_strtod_l+0xfe>
 800a48a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a48e:	f04f 3aff 	mov.w	sl, #4294967295
 800a492:	e7e8      	b.n	800a466 <_strtod_l+0xfe>
 800a494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	9217      	str	r2, [sp, #92]	; 0x5c
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	2b30      	cmp	r3, #48	; 0x30
 800a49e:	d0f9      	beq.n	800a494 <_strtod_l+0x12c>
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d0a3      	beq.n	800a3ec <_strtod_l+0x84>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	9306      	str	r3, [sp, #24]
 800a4b0:	9308      	str	r3, [sp, #32]
 800a4b2:	461d      	mov	r5, r3
 800a4b4:	220a      	movs	r2, #10
 800a4b6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a4b8:	f890 8000 	ldrb.w	r8, [r0]
 800a4bc:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800a4c0:	b2d9      	uxtb	r1, r3
 800a4c2:	2909      	cmp	r1, #9
 800a4c4:	d92c      	bls.n	800a520 <_strtod_l+0x1b8>
 800a4c6:	463a      	mov	r2, r7
 800a4c8:	f8d9 1000 	ldr.w	r1, [r9]
 800a4cc:	f002 fd02 	bl	800ced4 <strncmp>
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d035      	beq.n	800a540 <_strtod_l+0x1d8>
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	462b      	mov	r3, r5
 800a4da:	4601      	mov	r1, r0
 800a4dc:	9004      	str	r0, [sp, #16]
 800a4de:	2a65      	cmp	r2, #101	; 0x65
 800a4e0:	d001      	beq.n	800a4e6 <_strtod_l+0x17e>
 800a4e2:	2a45      	cmp	r2, #69	; 0x45
 800a4e4:	d117      	bne.n	800a516 <_strtod_l+0x1ae>
 800a4e6:	b923      	cbnz	r3, 800a4f2 <_strtod_l+0x18a>
 800a4e8:	b910      	cbnz	r0, 800a4f0 <_strtod_l+0x188>
 800a4ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d09c      	beq.n	800a42a <_strtod_l+0xc2>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a4f4:	1c72      	adds	r2, r6, #1
 800a4f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a4f8:	7872      	ldrb	r2, [r6, #1]
 800a4fa:	2a2b      	cmp	r2, #43	; 0x2b
 800a4fc:	f000 8082 	beq.w	800a604 <_strtod_l+0x29c>
 800a500:	2a2d      	cmp	r2, #45	; 0x2d
 800a502:	d079      	beq.n	800a5f8 <_strtod_l+0x290>
 800a504:	f04f 0e00 	mov.w	lr, #0
 800a508:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a50c:	f1bc 0f09 	cmp.w	ip, #9
 800a510:	f240 8086 	bls.w	800a620 <_strtod_l+0x2b8>
 800a514:	9617      	str	r6, [sp, #92]	; 0x5c
 800a516:	f04f 0800 	mov.w	r8, #0
 800a51a:	e0a8      	b.n	800a66e <_strtod_l+0x306>
 800a51c:	2300      	movs	r3, #0
 800a51e:	e7c2      	b.n	800a4a6 <_strtod_l+0x13e>
 800a520:	2d08      	cmp	r5, #8
 800a522:	bfd5      	itete	le
 800a524:	9908      	ldrle	r1, [sp, #32]
 800a526:	9906      	ldrgt	r1, [sp, #24]
 800a528:	fb02 3301 	mlale	r3, r2, r1, r3
 800a52c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a530:	f100 0001 	add.w	r0, r0, #1
 800a534:	bfd4      	ite	le
 800a536:	9308      	strle	r3, [sp, #32]
 800a538:	9306      	strgt	r3, [sp, #24]
 800a53a:	3501      	adds	r5, #1
 800a53c:	9017      	str	r0, [sp, #92]	; 0x5c
 800a53e:	e7ba      	b.n	800a4b6 <_strtod_l+0x14e>
 800a540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a542:	19da      	adds	r2, r3, r7
 800a544:	9217      	str	r2, [sp, #92]	; 0x5c
 800a546:	5dda      	ldrb	r2, [r3, r7]
 800a548:	2d00      	cmp	r5, #0
 800a54a:	d038      	beq.n	800a5be <_strtod_l+0x256>
 800a54c:	4601      	mov	r1, r0
 800a54e:	462b      	mov	r3, r5
 800a550:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800a554:	2f09      	cmp	r7, #9
 800a556:	d913      	bls.n	800a580 <_strtod_l+0x218>
 800a558:	2701      	movs	r7, #1
 800a55a:	9704      	str	r7, [sp, #16]
 800a55c:	e7bf      	b.n	800a4de <_strtod_l+0x176>
 800a55e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	9217      	str	r2, [sp, #92]	; 0x5c
 800a564:	785a      	ldrb	r2, [r3, #1]
 800a566:	3001      	adds	r0, #1
 800a568:	2a30      	cmp	r2, #48	; 0x30
 800a56a:	d0f8      	beq.n	800a55e <_strtod_l+0x1f6>
 800a56c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a570:	2b08      	cmp	r3, #8
 800a572:	f200 84a2 	bhi.w	800aeba <_strtod_l+0xb52>
 800a576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a578:	930c      	str	r3, [sp, #48]	; 0x30
 800a57a:	4601      	mov	r1, r0
 800a57c:	2000      	movs	r0, #0
 800a57e:	4603      	mov	r3, r0
 800a580:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800a584:	f100 0701 	add.w	r7, r0, #1
 800a588:	d013      	beq.n	800a5b2 <_strtod_l+0x24a>
 800a58a:	4439      	add	r1, r7
 800a58c:	eb00 0e03 	add.w	lr, r0, r3
 800a590:	461f      	mov	r7, r3
 800a592:	f04f 0c0a 	mov.w	ip, #10
 800a596:	45be      	cmp	lr, r7
 800a598:	d113      	bne.n	800a5c2 <_strtod_l+0x25a>
 800a59a:	181f      	adds	r7, r3, r0
 800a59c:	2f08      	cmp	r7, #8
 800a59e:	f103 0301 	add.w	r3, r3, #1
 800a5a2:	4403      	add	r3, r0
 800a5a4:	dc1d      	bgt.n	800a5e2 <_strtod_l+0x27a>
 800a5a6:	9a08      	ldr	r2, [sp, #32]
 800a5a8:	200a      	movs	r0, #10
 800a5aa:	fb00 8202 	mla	r2, r0, r2, r8
 800a5ae:	9208      	str	r2, [sp, #32]
 800a5b0:	2700      	movs	r7, #0
 800a5b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a5b4:	1c50      	adds	r0, r2, #1
 800a5b6:	9017      	str	r0, [sp, #92]	; 0x5c
 800a5b8:	7852      	ldrb	r2, [r2, #1]
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	e7c8      	b.n	800a550 <_strtod_l+0x1e8>
 800a5be:	4628      	mov	r0, r5
 800a5c0:	e7d2      	b.n	800a568 <_strtod_l+0x200>
 800a5c2:	2f08      	cmp	r7, #8
 800a5c4:	f107 0701 	add.w	r7, r7, #1
 800a5c8:	dc04      	bgt.n	800a5d4 <_strtod_l+0x26c>
 800a5ca:	9a08      	ldr	r2, [sp, #32]
 800a5cc:	fb0c f202 	mul.w	r2, ip, r2
 800a5d0:	9208      	str	r2, [sp, #32]
 800a5d2:	e7e0      	b.n	800a596 <_strtod_l+0x22e>
 800a5d4:	2f10      	cmp	r7, #16
 800a5d6:	bfde      	ittt	le
 800a5d8:	9a06      	ldrle	r2, [sp, #24]
 800a5da:	fb0c f202 	mulle.w	r2, ip, r2
 800a5de:	9206      	strle	r2, [sp, #24]
 800a5e0:	e7d9      	b.n	800a596 <_strtod_l+0x22e>
 800a5e2:	2b10      	cmp	r3, #16
 800a5e4:	bfdf      	itttt	le
 800a5e6:	9a06      	ldrle	r2, [sp, #24]
 800a5e8:	200a      	movle	r0, #10
 800a5ea:	fb00 8202 	mlale	r2, r0, r2, r8
 800a5ee:	9206      	strle	r2, [sp, #24]
 800a5f0:	e7de      	b.n	800a5b0 <_strtod_l+0x248>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	9304      	str	r3, [sp, #16]
 800a5f6:	e777      	b.n	800a4e8 <_strtod_l+0x180>
 800a5f8:	f04f 0e01 	mov.w	lr, #1
 800a5fc:	1cb2      	adds	r2, r6, #2
 800a5fe:	9217      	str	r2, [sp, #92]	; 0x5c
 800a600:	78b2      	ldrb	r2, [r6, #2]
 800a602:	e781      	b.n	800a508 <_strtod_l+0x1a0>
 800a604:	f04f 0e00 	mov.w	lr, #0
 800a608:	e7f8      	b.n	800a5fc <_strtod_l+0x294>
 800a60a:	bf00      	nop
 800a60c:	0800d0bc 	.word	0x0800d0bc
 800a610:	7ff00000 	.word	0x7ff00000
 800a614:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a616:	f102 0c01 	add.w	ip, r2, #1
 800a61a:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800a61e:	7852      	ldrb	r2, [r2, #1]
 800a620:	2a30      	cmp	r2, #48	; 0x30
 800a622:	d0f7      	beq.n	800a614 <_strtod_l+0x2ac>
 800a624:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800a628:	f1bc 0f08 	cmp.w	ip, #8
 800a62c:	f63f af73 	bhi.w	800a516 <_strtod_l+0x1ae>
 800a630:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800a634:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a636:	920e      	str	r2, [sp, #56]	; 0x38
 800a638:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a63a:	f102 0c01 	add.w	ip, r2, #1
 800a63e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800a642:	7852      	ldrb	r2, [r2, #1]
 800a644:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800a648:	f1b9 0f09 	cmp.w	r9, #9
 800a64c:	d939      	bls.n	800a6c2 <_strtod_l+0x35a>
 800a64e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800a650:	ebac 0c07 	sub.w	ip, ip, r7
 800a654:	f1bc 0f08 	cmp.w	ip, #8
 800a658:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800a65c:	dc37      	bgt.n	800a6ce <_strtod_l+0x366>
 800a65e:	45e0      	cmp	r8, ip
 800a660:	bfa8      	it	ge
 800a662:	46e0      	movge	r8, ip
 800a664:	f1be 0f00 	cmp.w	lr, #0
 800a668:	d001      	beq.n	800a66e <_strtod_l+0x306>
 800a66a:	f1c8 0800 	rsb	r8, r8, #0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d151      	bne.n	800a716 <_strtod_l+0x3ae>
 800a672:	2800      	cmp	r0, #0
 800a674:	f47f aeba 	bne.w	800a3ec <_strtod_l+0x84>
 800a678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f47f aeb6 	bne.w	800a3ec <_strtod_l+0x84>
 800a680:	9b04      	ldr	r3, [sp, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	f47f aed1 	bne.w	800a42a <_strtod_l+0xc2>
 800a688:	2a4e      	cmp	r2, #78	; 0x4e
 800a68a:	d027      	beq.n	800a6dc <_strtod_l+0x374>
 800a68c:	dc21      	bgt.n	800a6d2 <_strtod_l+0x36a>
 800a68e:	2a49      	cmp	r2, #73	; 0x49
 800a690:	f47f aecb 	bne.w	800a42a <_strtod_l+0xc2>
 800a694:	499a      	ldr	r1, [pc, #616]	; (800a900 <_strtod_l+0x598>)
 800a696:	a817      	add	r0, sp, #92	; 0x5c
 800a698:	f001 fd28 	bl	800c0ec <__match>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f43f aec4 	beq.w	800a42a <_strtod_l+0xc2>
 800a6a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6a4:	4997      	ldr	r1, [pc, #604]	; (800a904 <_strtod_l+0x59c>)
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	a817      	add	r0, sp, #92	; 0x5c
 800a6aa:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6ac:	f001 fd1e 	bl	800c0ec <__match>
 800a6b0:	b910      	cbnz	r0, 800a6b8 <_strtod_l+0x350>
 800a6b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a6b8:	f8df b260 	ldr.w	fp, [pc, #608]	; 800a91c <_strtod_l+0x5b4>
 800a6bc:	f04f 0a00 	mov.w	sl, #0
 800a6c0:	e694      	b.n	800a3ec <_strtod_l+0x84>
 800a6c2:	270a      	movs	r7, #10
 800a6c4:	fb07 2808 	mla	r8, r7, r8, r2
 800a6c8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800a6cc:	e7b4      	b.n	800a638 <_strtod_l+0x2d0>
 800a6ce:	46e0      	mov	r8, ip
 800a6d0:	e7c8      	b.n	800a664 <_strtod_l+0x2fc>
 800a6d2:	2a69      	cmp	r2, #105	; 0x69
 800a6d4:	d0de      	beq.n	800a694 <_strtod_l+0x32c>
 800a6d6:	2a6e      	cmp	r2, #110	; 0x6e
 800a6d8:	f47f aea7 	bne.w	800a42a <_strtod_l+0xc2>
 800a6dc:	498a      	ldr	r1, [pc, #552]	; (800a908 <_strtod_l+0x5a0>)
 800a6de:	a817      	add	r0, sp, #92	; 0x5c
 800a6e0:	f001 fd04 	bl	800c0ec <__match>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	f43f aea0 	beq.w	800a42a <_strtod_l+0xc2>
 800a6ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b28      	cmp	r3, #40	; 0x28
 800a6f0:	d10e      	bne.n	800a710 <_strtod_l+0x3a8>
 800a6f2:	aa1a      	add	r2, sp, #104	; 0x68
 800a6f4:	4985      	ldr	r1, [pc, #532]	; (800a90c <_strtod_l+0x5a4>)
 800a6f6:	a817      	add	r0, sp, #92	; 0x5c
 800a6f8:	f001 fd0c 	bl	800c114 <__hexnan>
 800a6fc:	2805      	cmp	r0, #5
 800a6fe:	d107      	bne.n	800a710 <_strtod_l+0x3a8>
 800a700:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a702:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a706:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a70a:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a70e:	e66d      	b.n	800a3ec <_strtod_l+0x84>
 800a710:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800a920 <_strtod_l+0x5b8>
 800a714:	e7d2      	b.n	800a6bc <_strtod_l+0x354>
 800a716:	eddd 7a08 	vldr	s15, [sp, #32]
 800a71a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a71e:	eba8 0201 	sub.w	r2, r8, r1
 800a722:	2d00      	cmp	r5, #0
 800a724:	bf08      	it	eq
 800a726:	461d      	moveq	r5, r3
 800a728:	2b10      	cmp	r3, #16
 800a72a:	9204      	str	r2, [sp, #16]
 800a72c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a730:	461a      	mov	r2, r3
 800a732:	bfa8      	it	ge
 800a734:	2210      	movge	r2, #16
 800a736:	2b09      	cmp	r3, #9
 800a738:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a73c:	dc14      	bgt.n	800a768 <_strtod_l+0x400>
 800a73e:	9904      	ldr	r1, [sp, #16]
 800a740:	2900      	cmp	r1, #0
 800a742:	f43f ae53 	beq.w	800a3ec <_strtod_l+0x84>
 800a746:	9904      	ldr	r1, [sp, #16]
 800a748:	dd72      	ble.n	800a830 <_strtod_l+0x4c8>
 800a74a:	2916      	cmp	r1, #22
 800a74c:	dc5a      	bgt.n	800a804 <_strtod_l+0x49c>
 800a74e:	4970      	ldr	r1, [pc, #448]	; (800a910 <_strtod_l+0x5a8>)
 800a750:	9b04      	ldr	r3, [sp, #16]
 800a752:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a756:	ed91 7b00 	vldr	d7, [r1]
 800a75a:	ec4b ab16 	vmov	d6, sl, fp
 800a75e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a762:	ec5b ab17 	vmov	sl, fp, d7
 800a766:	e641      	b.n	800a3ec <_strtod_l+0x84>
 800a768:	4969      	ldr	r1, [pc, #420]	; (800a910 <_strtod_l+0x5a8>)
 800a76a:	eddd 7a06 	vldr	s15, [sp, #24]
 800a76e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a772:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800a776:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800a77a:	2b0f      	cmp	r3, #15
 800a77c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a780:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a784:	ec5b ab17 	vmov	sl, fp, d7
 800a788:	ddd9      	ble.n	800a73e <_strtod_l+0x3d6>
 800a78a:	9904      	ldr	r1, [sp, #16]
 800a78c:	1a9a      	subs	r2, r3, r2
 800a78e:	440a      	add	r2, r1
 800a790:	2a00      	cmp	r2, #0
 800a792:	f340 8096 	ble.w	800a8c2 <_strtod_l+0x55a>
 800a796:	f012 000f 	ands.w	r0, r2, #15
 800a79a:	d00a      	beq.n	800a7b2 <_strtod_l+0x44a>
 800a79c:	495c      	ldr	r1, [pc, #368]	; (800a910 <_strtod_l+0x5a8>)
 800a79e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a7a2:	ed91 7b00 	vldr	d7, [r1]
 800a7a6:	ec4b ab16 	vmov	d6, sl, fp
 800a7aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a7ae:	ec5b ab17 	vmov	sl, fp, d7
 800a7b2:	f032 020f 	bics.w	r2, r2, #15
 800a7b6:	d072      	beq.n	800a89e <_strtod_l+0x536>
 800a7b8:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800a7bc:	dd45      	ble.n	800a84a <_strtod_l+0x4e2>
 800a7be:	2500      	movs	r5, #0
 800a7c0:	46a8      	mov	r8, r5
 800a7c2:	9506      	str	r5, [sp, #24]
 800a7c4:	46a9      	mov	r9, r5
 800a7c6:	2322      	movs	r3, #34	; 0x22
 800a7c8:	f8df b150 	ldr.w	fp, [pc, #336]	; 800a91c <_strtod_l+0x5b4>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	f04f 0a00 	mov.w	sl, #0
 800a7d2:	9b06      	ldr	r3, [sp, #24]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f43f ae09 	beq.w	800a3ec <_strtod_l+0x84>
 800a7da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f001 fd96 	bl	800c30e <_Bfree>
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f001 fd92 	bl	800c30e <_Bfree>
 800a7ea:	4641      	mov	r1, r8
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f001 fd8e 	bl	800c30e <_Bfree>
 800a7f2:	9906      	ldr	r1, [sp, #24]
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f001 fd8a 	bl	800c30e <_Bfree>
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f001 fd86 	bl	800c30e <_Bfree>
 800a802:	e5f3      	b.n	800a3ec <_strtod_l+0x84>
 800a804:	9804      	ldr	r0, [sp, #16]
 800a806:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800a80a:	4281      	cmp	r1, r0
 800a80c:	dbbd      	blt.n	800a78a <_strtod_l+0x422>
 800a80e:	4a40      	ldr	r2, [pc, #256]	; (800a910 <_strtod_l+0x5a8>)
 800a810:	f1c3 030f 	rsb	r3, r3, #15
 800a814:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a818:	ed91 7b00 	vldr	d7, [r1]
 800a81c:	ec4b ab16 	vmov	d6, sl, fp
 800a820:	1ac3      	subs	r3, r0, r3
 800a822:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a82a:	ed92 6b00 	vldr	d6, [r2]
 800a82e:	e796      	b.n	800a75e <_strtod_l+0x3f6>
 800a830:	3116      	adds	r1, #22
 800a832:	dbaa      	blt.n	800a78a <_strtod_l+0x422>
 800a834:	4936      	ldr	r1, [pc, #216]	; (800a910 <_strtod_l+0x5a8>)
 800a836:	9b04      	ldr	r3, [sp, #16]
 800a838:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800a83c:	ed91 7b00 	vldr	d7, [r1]
 800a840:	ec4b ab16 	vmov	d6, sl, fp
 800a844:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a848:	e78b      	b.n	800a762 <_strtod_l+0x3fa>
 800a84a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a84e:	2000      	movs	r0, #0
 800a850:	4e30      	ldr	r6, [pc, #192]	; (800a914 <_strtod_l+0x5ac>)
 800a852:	1112      	asrs	r2, r2, #4
 800a854:	4601      	mov	r1, r0
 800a856:	2a01      	cmp	r2, #1
 800a858:	dc23      	bgt.n	800a8a2 <_strtod_l+0x53a>
 800a85a:	b108      	cbz	r0, 800a860 <_strtod_l+0x4f8>
 800a85c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a860:	4a2c      	ldr	r2, [pc, #176]	; (800a914 <_strtod_l+0x5ac>)
 800a862:	482d      	ldr	r0, [pc, #180]	; (800a918 <_strtod_l+0x5b0>)
 800a864:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800a868:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a86c:	ed91 7b00 	vldr	d7, [r1]
 800a870:	ec4b ab16 	vmov	d6, sl, fp
 800a874:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a878:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a87c:	9907      	ldr	r1, [sp, #28]
 800a87e:	4a27      	ldr	r2, [pc, #156]	; (800a91c <_strtod_l+0x5b4>)
 800a880:	400a      	ands	r2, r1
 800a882:	4282      	cmp	r2, r0
 800a884:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a888:	d899      	bhi.n	800a7be <_strtod_l+0x456>
 800a88a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800a88e:	4282      	cmp	r2, r0
 800a890:	bf86      	itte	hi
 800a892:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800a924 <_strtod_l+0x5bc>
 800a896:	f04f 3aff 	movhi.w	sl, #4294967295
 800a89a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800a89e:	2700      	movs	r7, #0
 800a8a0:	e070      	b.n	800a984 <_strtod_l+0x61c>
 800a8a2:	07d7      	lsls	r7, r2, #31
 800a8a4:	d50a      	bpl.n	800a8bc <_strtod_l+0x554>
 800a8a6:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800a8aa:	ed90 7b00 	vldr	d7, [r0]
 800a8ae:	ed9d 6b06 	vldr	d6, [sp, #24]
 800a8b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a8b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	3101      	adds	r1, #1
 800a8be:	1052      	asrs	r2, r2, #1
 800a8c0:	e7c9      	b.n	800a856 <_strtod_l+0x4ee>
 800a8c2:	d0ec      	beq.n	800a89e <_strtod_l+0x536>
 800a8c4:	4252      	negs	r2, r2
 800a8c6:	f012 000f 	ands.w	r0, r2, #15
 800a8ca:	d00a      	beq.n	800a8e2 <_strtod_l+0x57a>
 800a8cc:	4910      	ldr	r1, [pc, #64]	; (800a910 <_strtod_l+0x5a8>)
 800a8ce:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a8d2:	ed91 7b00 	vldr	d7, [r1]
 800a8d6:	ec4b ab16 	vmov	d6, sl, fp
 800a8da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a8de:	ec5b ab17 	vmov	sl, fp, d7
 800a8e2:	1112      	asrs	r2, r2, #4
 800a8e4:	d0db      	beq.n	800a89e <_strtod_l+0x536>
 800a8e6:	2a1f      	cmp	r2, #31
 800a8e8:	dd1e      	ble.n	800a928 <_strtod_l+0x5c0>
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	46a8      	mov	r8, r5
 800a8ee:	9506      	str	r5, [sp, #24]
 800a8f0:	46a9      	mov	r9, r5
 800a8f2:	2322      	movs	r3, #34	; 0x22
 800a8f4:	f04f 0a00 	mov.w	sl, #0
 800a8f8:	f04f 0b00 	mov.w	fp, #0
 800a8fc:	6023      	str	r3, [r4, #0]
 800a8fe:	e768      	b.n	800a7d2 <_strtod_l+0x46a>
 800a900:	0800d085 	.word	0x0800d085
 800a904:	0800d113 	.word	0x0800d113
 800a908:	0800d08d 	.word	0x0800d08d
 800a90c:	0800d0d0 	.word	0x0800d0d0
 800a910:	0800d150 	.word	0x0800d150
 800a914:	0800d128 	.word	0x0800d128
 800a918:	7ca00000 	.word	0x7ca00000
 800a91c:	7ff00000 	.word	0x7ff00000
 800a920:	fff80000 	.word	0xfff80000
 800a924:	7fefffff 	.word	0x7fefffff
 800a928:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800a92c:	f012 0710 	ands.w	r7, r2, #16
 800a930:	49ab      	ldr	r1, [pc, #684]	; (800abe0 <_strtod_l+0x878>)
 800a932:	bf18      	it	ne
 800a934:	276a      	movne	r7, #106	; 0x6a
 800a936:	2000      	movs	r0, #0
 800a938:	2a00      	cmp	r2, #0
 800a93a:	f300 8113 	bgt.w	800ab64 <_strtod_l+0x7fc>
 800a93e:	b108      	cbz	r0, 800a944 <_strtod_l+0x5dc>
 800a940:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800a944:	b1bf      	cbz	r7, 800a976 <_strtod_l+0x60e>
 800a946:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a94a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800a94e:	2a00      	cmp	r2, #0
 800a950:	4659      	mov	r1, fp
 800a952:	dd10      	ble.n	800a976 <_strtod_l+0x60e>
 800a954:	2a1f      	cmp	r2, #31
 800a956:	f340 8113 	ble.w	800ab80 <_strtod_l+0x818>
 800a95a:	2a34      	cmp	r2, #52	; 0x34
 800a95c:	bfde      	ittt	le
 800a95e:	3a20      	suble	r2, #32
 800a960:	f04f 30ff 	movle.w	r0, #4294967295
 800a964:	fa00 f202 	lslle.w	r2, r0, r2
 800a968:	f04f 0a00 	mov.w	sl, #0
 800a96c:	bfcc      	ite	gt
 800a96e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a972:	ea02 0b01 	andle.w	fp, r2, r1
 800a976:	ec4b ab17 	vmov	d7, sl, fp
 800a97a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a982:	d0b2      	beq.n	800a8ea <_strtod_l+0x582>
 800a984:	9a08      	ldr	r2, [sp, #32]
 800a986:	9200      	str	r2, [sp, #0]
 800a988:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a98a:	462a      	mov	r2, r5
 800a98c:	4620      	mov	r0, r4
 800a98e:	f001 fd10 	bl	800c3b2 <__s2b>
 800a992:	9006      	str	r0, [sp, #24]
 800a994:	2800      	cmp	r0, #0
 800a996:	f43f af12 	beq.w	800a7be <_strtod_l+0x456>
 800a99a:	9a04      	ldr	r2, [sp, #16]
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	f1c3 0300 	rsb	r3, r3, #0
 800a9a4:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800abc8 <_strtod_l+0x860>
 800a9a8:	bfa8      	it	ge
 800a9aa:	2300      	movge	r3, #0
 800a9ac:	ed9f ab88 	vldr	d10, [pc, #544]	; 800abd0 <_strtod_l+0x868>
 800a9b0:	ed9f bb89 	vldr	d11, [pc, #548]	; 800abd8 <_strtod_l+0x870>
 800a9b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a9b6:	2500      	movs	r5, #0
 800a9b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a9bc:	9310      	str	r3, [sp, #64]	; 0x40
 800a9be:	46a8      	mov	r8, r5
 800a9c0:	9b06      	ldr	r3, [sp, #24]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	6859      	ldr	r1, [r3, #4]
 800a9c6:	f001 fc6e 	bl	800c2a6 <_Balloc>
 800a9ca:	4681      	mov	r9, r0
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	f43f aefa 	beq.w	800a7c6 <_strtod_l+0x45e>
 800a9d2:	9b06      	ldr	r3, [sp, #24]
 800a9d4:	691a      	ldr	r2, [r3, #16]
 800a9d6:	3202      	adds	r2, #2
 800a9d8:	f103 010c 	add.w	r1, r3, #12
 800a9dc:	0092      	lsls	r2, r2, #2
 800a9de:	300c      	adds	r0, #12
 800a9e0:	f001 fc56 	bl	800c290 <memcpy>
 800a9e4:	aa1a      	add	r2, sp, #104	; 0x68
 800a9e6:	a919      	add	r1, sp, #100	; 0x64
 800a9e8:	ec4b ab10 	vmov	d0, sl, fp
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800a9f2:	f001 ff99 	bl	800c928 <__d2b>
 800a9f6:	9018      	str	r0, [sp, #96]	; 0x60
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	f43f aee4 	beq.w	800a7c6 <_strtod_l+0x45e>
 800a9fe:	2101      	movs	r1, #1
 800aa00:	4620      	mov	r0, r4
 800aa02:	f001 fd62 	bl	800c4ca <__i2b>
 800aa06:	4680      	mov	r8, r0
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f43f aedc 	beq.w	800a7c6 <_strtod_l+0x45e>
 800aa0e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800aa10:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	bfb1      	iteee	lt
 800aa16:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800aa18:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aa1a:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800aa1c:	18f3      	addge	r3, r6, r3
 800aa1e:	bfba      	itte	lt
 800aa20:	1b98      	sublt	r0, r3, r6
 800aa22:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aa24:	9308      	strge	r3, [sp, #32]
 800aa26:	eba6 0607 	sub.w	r6, r6, r7
 800aa2a:	bfb8      	it	lt
 800aa2c:	9308      	strlt	r3, [sp, #32]
 800aa2e:	4416      	add	r6, r2
 800aa30:	4b6c      	ldr	r3, [pc, #432]	; (800abe4 <_strtod_l+0x87c>)
 800aa32:	3e01      	subs	r6, #1
 800aa34:	429e      	cmp	r6, r3
 800aa36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa3a:	f280 80b4 	bge.w	800aba6 <_strtod_l+0x83e>
 800aa3e:	1b9b      	subs	r3, r3, r6
 800aa40:	2b1f      	cmp	r3, #31
 800aa42:	eba2 0203 	sub.w	r2, r2, r3
 800aa46:	f04f 0101 	mov.w	r1, #1
 800aa4a:	f300 80a0 	bgt.w	800ab8e <_strtod_l+0x826>
 800aa4e:	fa01 f303 	lsl.w	r3, r1, r3
 800aa52:	9311      	str	r3, [sp, #68]	; 0x44
 800aa54:	2300      	movs	r3, #0
 800aa56:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa58:	9b08      	ldr	r3, [sp, #32]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	4402      	add	r2, r0
 800aa5e:	18be      	adds	r6, r7, r2
 800aa60:	9a08      	ldr	r2, [sp, #32]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	bfa8      	it	ge
 800aa66:	461a      	movge	r2, r3
 800aa68:	42b2      	cmp	r2, r6
 800aa6a:	bfa8      	it	ge
 800aa6c:	4632      	movge	r2, r6
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	dd04      	ble.n	800aa7c <_strtod_l+0x714>
 800aa72:	9908      	ldr	r1, [sp, #32]
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	1ab6      	subs	r6, r6, r2
 800aa78:	1a8a      	subs	r2, r1, r2
 800aa7a:	9208      	str	r2, [sp, #32]
 800aa7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa7e:	b1c2      	cbz	r2, 800aab2 <_strtod_l+0x74a>
 800aa80:	4641      	mov	r1, r8
 800aa82:	4620      	mov	r0, r4
 800aa84:	9315      	str	r3, [sp, #84]	; 0x54
 800aa86:	f001 fdbf 	bl	800c608 <__pow5mult>
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f43f ae9a 	beq.w	800a7c6 <_strtod_l+0x45e>
 800aa92:	4601      	mov	r1, r0
 800aa94:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aa96:	4620      	mov	r0, r4
 800aa98:	f001 fd20 	bl	800c4dc <__multiply>
 800aa9c:	900c      	str	r0, [sp, #48]	; 0x30
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f43f ae91 	beq.w	800a7c6 <_strtod_l+0x45e>
 800aaa4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f001 fc31 	bl	800c30e <_Bfree>
 800aaac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aab0:	9218      	str	r2, [sp, #96]	; 0x60
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	dc7c      	bgt.n	800abb0 <_strtod_l+0x848>
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	dd08      	ble.n	800aace <_strtod_l+0x766>
 800aabc:	4649      	mov	r1, r9
 800aabe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aac0:	4620      	mov	r0, r4
 800aac2:	f001 fda1 	bl	800c608 <__pow5mult>
 800aac6:	4681      	mov	r9, r0
 800aac8:	2800      	cmp	r0, #0
 800aaca:	f43f ae7c 	beq.w	800a7c6 <_strtod_l+0x45e>
 800aace:	2e00      	cmp	r6, #0
 800aad0:	dd08      	ble.n	800aae4 <_strtod_l+0x77c>
 800aad2:	4649      	mov	r1, r9
 800aad4:	4632      	mov	r2, r6
 800aad6:	4620      	mov	r0, r4
 800aad8:	f001 fde4 	bl	800c6a4 <__lshift>
 800aadc:	4681      	mov	r9, r0
 800aade:	2800      	cmp	r0, #0
 800aae0:	f43f ae71 	beq.w	800a7c6 <_strtod_l+0x45e>
 800aae4:	9b08      	ldr	r3, [sp, #32]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	dd08      	ble.n	800aafc <_strtod_l+0x794>
 800aaea:	4641      	mov	r1, r8
 800aaec:	461a      	mov	r2, r3
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f001 fdd8 	bl	800c6a4 <__lshift>
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f43f ae65 	beq.w	800a7c6 <_strtod_l+0x45e>
 800aafc:	464a      	mov	r2, r9
 800aafe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab00:	4620      	mov	r0, r4
 800ab02:	f001 fe3d 	bl	800c780 <__mdiff>
 800ab06:	4605      	mov	r5, r0
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	f43f ae5c 	beq.w	800a7c6 <_strtod_l+0x45e>
 800ab0e:	68c3      	ldr	r3, [r0, #12]
 800ab10:	930c      	str	r3, [sp, #48]	; 0x30
 800ab12:	2300      	movs	r3, #0
 800ab14:	60c3      	str	r3, [r0, #12]
 800ab16:	4641      	mov	r1, r8
 800ab18:	f001 fe18 	bl	800c74c <__mcmp>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	da63      	bge.n	800abe8 <_strtod_l+0x880>
 800ab20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab22:	b9e3      	cbnz	r3, 800ab5e <_strtod_l+0x7f6>
 800ab24:	f1ba 0f00 	cmp.w	sl, #0
 800ab28:	d119      	bne.n	800ab5e <_strtod_l+0x7f6>
 800ab2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab2e:	b9b3      	cbnz	r3, 800ab5e <_strtod_l+0x7f6>
 800ab30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab34:	0d1b      	lsrs	r3, r3, #20
 800ab36:	051b      	lsls	r3, r3, #20
 800ab38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ab3c:	d90f      	bls.n	800ab5e <_strtod_l+0x7f6>
 800ab3e:	696b      	ldr	r3, [r5, #20]
 800ab40:	b913      	cbnz	r3, 800ab48 <_strtod_l+0x7e0>
 800ab42:	692b      	ldr	r3, [r5, #16]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	dd0a      	ble.n	800ab5e <_strtod_l+0x7f6>
 800ab48:	4629      	mov	r1, r5
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f001 fda9 	bl	800c6a4 <__lshift>
 800ab52:	4641      	mov	r1, r8
 800ab54:	4605      	mov	r5, r0
 800ab56:	f001 fdf9 	bl	800c74c <__mcmp>
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	dc75      	bgt.n	800ac4a <_strtod_l+0x8e2>
 800ab5e:	2f00      	cmp	r7, #0
 800ab60:	d17f      	bne.n	800ac62 <_strtod_l+0x8fa>
 800ab62:	e63a      	b.n	800a7da <_strtod_l+0x472>
 800ab64:	07d6      	lsls	r6, r2, #31
 800ab66:	d508      	bpl.n	800ab7a <_strtod_l+0x812>
 800ab68:	ed9d 6b06 	vldr	d6, [sp, #24]
 800ab6c:	ed91 7b00 	vldr	d7, [r1]
 800ab70:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ab74:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ab78:	2001      	movs	r0, #1
 800ab7a:	1052      	asrs	r2, r2, #1
 800ab7c:	3108      	adds	r1, #8
 800ab7e:	e6db      	b.n	800a938 <_strtod_l+0x5d0>
 800ab80:	f04f 31ff 	mov.w	r1, #4294967295
 800ab84:	fa01 f202 	lsl.w	r2, r1, r2
 800ab88:	ea02 0a0a 	and.w	sl, r2, sl
 800ab8c:	e6f3      	b.n	800a976 <_strtod_l+0x60e>
 800ab8e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ab92:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ab96:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ab9a:	36e2      	adds	r6, #226	; 0xe2
 800ab9c:	fa01 f306 	lsl.w	r3, r1, r6
 800aba0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aba2:	9111      	str	r1, [sp, #68]	; 0x44
 800aba4:	e758      	b.n	800aa58 <_strtod_l+0x6f0>
 800aba6:	2300      	movs	r3, #0
 800aba8:	930f      	str	r3, [sp, #60]	; 0x3c
 800abaa:	2301      	movs	r3, #1
 800abac:	9311      	str	r3, [sp, #68]	; 0x44
 800abae:	e753      	b.n	800aa58 <_strtod_l+0x6f0>
 800abb0:	461a      	mov	r2, r3
 800abb2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abb4:	4620      	mov	r0, r4
 800abb6:	f001 fd75 	bl	800c6a4 <__lshift>
 800abba:	9018      	str	r0, [sp, #96]	; 0x60
 800abbc:	2800      	cmp	r0, #0
 800abbe:	f47f af7a 	bne.w	800aab6 <_strtod_l+0x74e>
 800abc2:	e600      	b.n	800a7c6 <_strtod_l+0x45e>
 800abc4:	f3af 8000 	nop.w
 800abc8:	94a03595 	.word	0x94a03595
 800abcc:	3fdfffff 	.word	0x3fdfffff
 800abd0:	35afe535 	.word	0x35afe535
 800abd4:	3fe00000 	.word	0x3fe00000
 800abd8:	94a03595 	.word	0x94a03595
 800abdc:	3fcfffff 	.word	0x3fcfffff
 800abe0:	0800d0e8 	.word	0x0800d0e8
 800abe4:	fffffc02 	.word	0xfffffc02
 800abe8:	f8cd b020 	str.w	fp, [sp, #32]
 800abec:	f040 8085 	bne.w	800acfa <_strtod_l+0x992>
 800abf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abf6:	b322      	cbz	r2, 800ac42 <_strtod_l+0x8da>
 800abf8:	4ab7      	ldr	r2, [pc, #732]	; (800aed8 <_strtod_l+0xb70>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d154      	bne.n	800aca8 <_strtod_l+0x940>
 800abfe:	4651      	mov	r1, sl
 800ac00:	b1e7      	cbz	r7, 800ac3c <_strtod_l+0x8d4>
 800ac02:	4bb6      	ldr	r3, [pc, #728]	; (800aedc <_strtod_l+0xb74>)
 800ac04:	465a      	mov	r2, fp
 800ac06:	4013      	ands	r3, r2
 800ac08:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ac0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac10:	d803      	bhi.n	800ac1a <_strtod_l+0x8b2>
 800ac12:	0d1b      	lsrs	r3, r3, #20
 800ac14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac18:	409a      	lsls	r2, r3
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	d144      	bne.n	800aca8 <_strtod_l+0x940>
 800ac1e:	4bb0      	ldr	r3, [pc, #704]	; (800aee0 <_strtod_l+0xb78>)
 800ac20:	9a08      	ldr	r2, [sp, #32]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d102      	bne.n	800ac2c <_strtod_l+0x8c4>
 800ac26:	3101      	adds	r1, #1
 800ac28:	f43f adcd 	beq.w	800a7c6 <_strtod_l+0x45e>
 800ac2c:	4bab      	ldr	r3, [pc, #684]	; (800aedc <_strtod_l+0xb74>)
 800ac2e:	9a08      	ldr	r2, [sp, #32]
 800ac30:	401a      	ands	r2, r3
 800ac32:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800ac36:	f04f 0a00 	mov.w	sl, #0
 800ac3a:	e790      	b.n	800ab5e <_strtod_l+0x7f6>
 800ac3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac40:	e7eb      	b.n	800ac1a <_strtod_l+0x8b2>
 800ac42:	bb8b      	cbnz	r3, 800aca8 <_strtod_l+0x940>
 800ac44:	f1ba 0f00 	cmp.w	sl, #0
 800ac48:	d12e      	bne.n	800aca8 <_strtod_l+0x940>
 800ac4a:	465b      	mov	r3, fp
 800ac4c:	4aa3      	ldr	r2, [pc, #652]	; (800aedc <_strtod_l+0xb74>)
 800ac4e:	b30f      	cbz	r7, 800ac94 <_strtod_l+0x92c>
 800ac50:	ea02 010b 	and.w	r1, r2, fp
 800ac54:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac58:	dc1c      	bgt.n	800ac94 <_strtod_l+0x92c>
 800ac5a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac5e:	f77f ae48 	ble.w	800a8f2 <_strtod_l+0x58a>
 800ac62:	4aa0      	ldr	r2, [pc, #640]	; (800aee4 <_strtod_l+0xb7c>)
 800ac64:	2300      	movs	r3, #0
 800ac66:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800ac6a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800ac6e:	ec4b ab17 	vmov	d7, sl, fp
 800ac72:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac76:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ac7a:	9b05      	ldr	r3, [sp, #20]
 800ac7c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f47f adaa 	bne.w	800a7da <_strtod_l+0x472>
 800ac86:	9b04      	ldr	r3, [sp, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	f47f ada6 	bne.w	800a7da <_strtod_l+0x472>
 800ac8e:	2322      	movs	r3, #34	; 0x22
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	e5a2      	b.n	800a7da <_strtod_l+0x472>
 800ac94:	4013      	ands	r3, r2
 800ac96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aca2:	f04f 3aff 	mov.w	sl, #4294967295
 800aca6:	e75a      	b.n	800ab5e <_strtod_l+0x7f6>
 800aca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acaa:	b18b      	cbz	r3, 800acd0 <_strtod_l+0x968>
 800acac:	9a08      	ldr	r2, [sp, #32]
 800acae:	4213      	tst	r3, r2
 800acb0:	f43f af55 	beq.w	800ab5e <_strtod_l+0x7f6>
 800acb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acb6:	463a      	mov	r2, r7
 800acb8:	4650      	mov	r0, sl
 800acba:	4659      	mov	r1, fp
 800acbc:	b163      	cbz	r3, 800acd8 <_strtod_l+0x970>
 800acbe:	f7ff fb39 	bl	800a334 <sulp>
 800acc2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800acc6:	ee37 7b00 	vadd.f64	d7, d7, d0
 800acca:	ec5b ab17 	vmov	sl, fp, d7
 800acce:	e746      	b.n	800ab5e <_strtod_l+0x7f6>
 800acd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acd2:	ea13 0f0a 	tst.w	r3, sl
 800acd6:	e7eb      	b.n	800acb0 <_strtod_l+0x948>
 800acd8:	f7ff fb2c 	bl	800a334 <sulp>
 800acdc:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800ace0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800ace4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ace8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800acf4:	f43f adfd 	beq.w	800a8f2 <_strtod_l+0x58a>
 800acf8:	e731      	b.n	800ab5e <_strtod_l+0x7f6>
 800acfa:	4641      	mov	r1, r8
 800acfc:	4628      	mov	r0, r5
 800acfe:	f001 fe62 	bl	800c9c6 <__ratio>
 800ad02:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ad06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ad0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad0e:	d869      	bhi.n	800ade4 <_strtod_l+0xa7c>
 800ad10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d045      	beq.n	800ada2 <_strtod_l+0xa3a>
 800ad16:	4b74      	ldr	r3, [pc, #464]	; (800aee8 <_strtod_l+0xb80>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800ad1e:	9808      	ldr	r0, [sp, #32]
 800ad20:	496e      	ldr	r1, [pc, #440]	; (800aedc <_strtod_l+0xb74>)
 800ad22:	ea00 0601 	and.w	r6, r0, r1
 800ad26:	4871      	ldr	r0, [pc, #452]	; (800aeec <_strtod_l+0xb84>)
 800ad28:	4286      	cmp	r6, r0
 800ad2a:	f040 8089 	bne.w	800ae40 <_strtod_l+0xad8>
 800ad2e:	910f      	str	r1, [sp, #60]	; 0x3c
 800ad30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad34:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800ad38:	9908      	ldr	r1, [sp, #32]
 800ad3a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800ad3e:	ec4b ab10 	vmov	d0, sl, fp
 800ad42:	ec43 2b1c 	vmov	d12, r2, r3
 800ad46:	f001 fd79 	bl	800c83c <__ulp>
 800ad4a:	ec4b ab1d 	vmov	d13, sl, fp
 800ad4e:	eeac db00 	vfma.f64	d13, d12, d0
 800ad52:	ed8d db08 	vstr	d13, [sp, #32]
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ad5a:	4a65      	ldr	r2, [pc, #404]	; (800aef0 <_strtod_l+0xb88>)
 800ad5c:	4019      	ands	r1, r3
 800ad5e:	4291      	cmp	r1, r2
 800ad60:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800ad64:	d948      	bls.n	800adf8 <_strtod_l+0xa90>
 800ad66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad68:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d103      	bne.n	800ad78 <_strtod_l+0xa10>
 800ad70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad72:	3301      	adds	r3, #1
 800ad74:	f43f ad27 	beq.w	800a7c6 <_strtod_l+0x45e>
 800ad78:	f8df b164 	ldr.w	fp, [pc, #356]	; 800aee0 <_strtod_l+0xb78>
 800ad7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ad80:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad82:	4620      	mov	r0, r4
 800ad84:	f001 fac3 	bl	800c30e <_Bfree>
 800ad88:	4649      	mov	r1, r9
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f001 fabf 	bl	800c30e <_Bfree>
 800ad90:	4641      	mov	r1, r8
 800ad92:	4620      	mov	r0, r4
 800ad94:	f001 fabb 	bl	800c30e <_Bfree>
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f001 fab7 	bl	800c30e <_Bfree>
 800ada0:	e60e      	b.n	800a9c0 <_strtod_l+0x658>
 800ada2:	f1ba 0f00 	cmp.w	sl, #0
 800ada6:	d113      	bne.n	800add0 <_strtod_l+0xa68>
 800ada8:	9b08      	ldr	r3, [sp, #32]
 800adaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adae:	b9b3      	cbnz	r3, 800adde <_strtod_l+0xa76>
 800adb0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800adb4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800adb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adbc:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800adc0:	d401      	bmi.n	800adc6 <_strtod_l+0xa5e>
 800adc2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800adc6:	eeb1 7b48 	vneg.f64	d7, d8
 800adca:	ec53 2b17 	vmov	r2, r3, d7
 800adce:	e7a6      	b.n	800ad1e <_strtod_l+0x9b6>
 800add0:	f1ba 0f01 	cmp.w	sl, #1
 800add4:	d103      	bne.n	800adde <_strtod_l+0xa76>
 800add6:	9b08      	ldr	r3, [sp, #32]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f43f ad8a 	beq.w	800a8f2 <_strtod_l+0x58a>
 800adde:	2200      	movs	r2, #0
 800ade0:	4b44      	ldr	r3, [pc, #272]	; (800aef4 <_strtod_l+0xb8c>)
 800ade2:	e79a      	b.n	800ad1a <_strtod_l+0x9b2>
 800ade4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ade6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800adea:	ee20 8b08 	vmul.f64	d8, d0, d8
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0e9      	beq.n	800adc6 <_strtod_l+0xa5e>
 800adf2:	ec53 2b18 	vmov	r2, r3, d8
 800adf6:	e792      	b.n	800ad1e <_strtod_l+0x9b6>
 800adf8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800adfc:	2f00      	cmp	r7, #0
 800adfe:	d1bf      	bne.n	800ad80 <_strtod_l+0xa18>
 800ae00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae04:	0d1b      	lsrs	r3, r3, #20
 800ae06:	051b      	lsls	r3, r3, #20
 800ae08:	429e      	cmp	r6, r3
 800ae0a:	d1b9      	bne.n	800ad80 <_strtod_l+0xa18>
 800ae0c:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800ae10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae12:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800ae16:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ae1a:	b92b      	cbnz	r3, 800ae28 <_strtod_l+0xac0>
 800ae1c:	f1ba 0f00 	cmp.w	sl, #0
 800ae20:	d102      	bne.n	800ae28 <_strtod_l+0xac0>
 800ae22:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800ae26:	b3d2      	cbz	r2, 800ae9e <_strtod_l+0xb36>
 800ae28:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae30:	f53f acd3 	bmi.w	800a7da <_strtod_l+0x472>
 800ae34:	eeb4 8bca 	vcmpe.f64	d8, d10
 800ae38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3c:	dda0      	ble.n	800ad80 <_strtod_l+0xa18>
 800ae3e:	e4cc      	b.n	800a7da <_strtod_l+0x472>
 800ae40:	b1ef      	cbz	r7, 800ae7e <_strtod_l+0xb16>
 800ae42:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800ae46:	d81a      	bhi.n	800ae7e <_strtod_l+0xb16>
 800ae48:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800aed0 <_strtod_l+0xb68>
 800ae4c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae54:	d810      	bhi.n	800ae78 <_strtod_l+0xb10>
 800ae56:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800ae5a:	ee17 3a90 	vmov	r3, s15
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	bf08      	it	eq
 800ae62:	2301      	moveq	r3, #1
 800ae64:	ee07 3a90 	vmov	s15, r3
 800ae68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae6a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800ae6e:	b99b      	cbnz	r3, 800ae98 <_strtod_l+0xb30>
 800ae70:	eeb1 7b48 	vneg.f64	d7, d8
 800ae74:	ec53 2b17 	vmov	r2, r3, d7
 800ae78:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800ae7c:	1b8b      	subs	r3, r1, r6
 800ae7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ae82:	ec43 2b1c 	vmov	d12, r2, r3
 800ae86:	f001 fcd9 	bl	800c83c <__ulp>
 800ae8a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800ae8e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800ae92:	ec5b ab17 	vmov	sl, fp, d7
 800ae96:	e7b1      	b.n	800adfc <_strtod_l+0xa94>
 800ae98:	ec53 2b18 	vmov	r2, r3, d8
 800ae9c:	e7ec      	b.n	800ae78 <_strtod_l+0xb10>
 800ae9e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800aea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea6:	f57f af6b 	bpl.w	800ad80 <_strtod_l+0xa18>
 800aeaa:	e496      	b.n	800a7da <_strtod_l+0x472>
 800aeac:	2300      	movs	r3, #0
 800aeae:	930d      	str	r3, [sp, #52]	; 0x34
 800aeb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aeb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	f7ff ba9d 	b.w	800a3f4 <_strtod_l+0x8c>
 800aeba:	2a65      	cmp	r2, #101	; 0x65
 800aebc:	f04f 0100 	mov.w	r1, #0
 800aec0:	f43f ab97 	beq.w	800a5f2 <_strtod_l+0x28a>
 800aec4:	2701      	movs	r7, #1
 800aec6:	460b      	mov	r3, r1
 800aec8:	9704      	str	r7, [sp, #16]
 800aeca:	f7ff bb0a 	b.w	800a4e2 <_strtod_l+0x17a>
 800aece:	bf00      	nop
 800aed0:	ffc00000 	.word	0xffc00000
 800aed4:	41dfffff 	.word	0x41dfffff
 800aed8:	000fffff 	.word	0x000fffff
 800aedc:	7ff00000 	.word	0x7ff00000
 800aee0:	7fefffff 	.word	0x7fefffff
 800aee4:	39500000 	.word	0x39500000
 800aee8:	3ff00000 	.word	0x3ff00000
 800aeec:	7fe00000 	.word	0x7fe00000
 800aef0:	7c9fffff 	.word	0x7c9fffff
 800aef4:	bff00000 	.word	0xbff00000

0800aef8 <_strtod_r>:
 800aef8:	4b05      	ldr	r3, [pc, #20]	; (800af10 <_strtod_r+0x18>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	b410      	push	{r4}
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	4c04      	ldr	r4, [pc, #16]	; (800af14 <_strtod_r+0x1c>)
 800af02:	2b00      	cmp	r3, #0
 800af04:	bf08      	it	eq
 800af06:	4623      	moveq	r3, r4
 800af08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af0c:	f7ff ba2c 	b.w	800a368 <_strtod_l>
 800af10:	20000024 	.word	0x20000024
 800af14:	20000088 	.word	0x20000088

0800af18 <_strtol_l.isra.0>:
 800af18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af1c:	4680      	mov	r8, r0
 800af1e:	4689      	mov	r9, r1
 800af20:	4692      	mov	sl, r2
 800af22:	461e      	mov	r6, r3
 800af24:	460f      	mov	r7, r1
 800af26:	463d      	mov	r5, r7
 800af28:	9808      	ldr	r0, [sp, #32]
 800af2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af2e:	f001 f981 	bl	800c234 <__locale_ctype_ptr_l>
 800af32:	4420      	add	r0, r4
 800af34:	7843      	ldrb	r3, [r0, #1]
 800af36:	f013 0308 	ands.w	r3, r3, #8
 800af3a:	d132      	bne.n	800afa2 <_strtol_l.isra.0+0x8a>
 800af3c:	2c2d      	cmp	r4, #45	; 0x2d
 800af3e:	d132      	bne.n	800afa6 <_strtol_l.isra.0+0x8e>
 800af40:	787c      	ldrb	r4, [r7, #1]
 800af42:	1cbd      	adds	r5, r7, #2
 800af44:	2201      	movs	r2, #1
 800af46:	2e00      	cmp	r6, #0
 800af48:	d05d      	beq.n	800b006 <_strtol_l.isra.0+0xee>
 800af4a:	2e10      	cmp	r6, #16
 800af4c:	d109      	bne.n	800af62 <_strtol_l.isra.0+0x4a>
 800af4e:	2c30      	cmp	r4, #48	; 0x30
 800af50:	d107      	bne.n	800af62 <_strtol_l.isra.0+0x4a>
 800af52:	782b      	ldrb	r3, [r5, #0]
 800af54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800af58:	2b58      	cmp	r3, #88	; 0x58
 800af5a:	d14f      	bne.n	800affc <_strtol_l.isra.0+0xe4>
 800af5c:	786c      	ldrb	r4, [r5, #1]
 800af5e:	2610      	movs	r6, #16
 800af60:	3502      	adds	r5, #2
 800af62:	2a00      	cmp	r2, #0
 800af64:	bf14      	ite	ne
 800af66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800af6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800af6e:	2700      	movs	r7, #0
 800af70:	fbb1 fcf6 	udiv	ip, r1, r6
 800af74:	4638      	mov	r0, r7
 800af76:	fb06 1e1c 	mls	lr, r6, ip, r1
 800af7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800af7e:	2b09      	cmp	r3, #9
 800af80:	d817      	bhi.n	800afb2 <_strtol_l.isra.0+0x9a>
 800af82:	461c      	mov	r4, r3
 800af84:	42a6      	cmp	r6, r4
 800af86:	dd23      	ble.n	800afd0 <_strtol_l.isra.0+0xb8>
 800af88:	1c7b      	adds	r3, r7, #1
 800af8a:	d007      	beq.n	800af9c <_strtol_l.isra.0+0x84>
 800af8c:	4584      	cmp	ip, r0
 800af8e:	d31c      	bcc.n	800afca <_strtol_l.isra.0+0xb2>
 800af90:	d101      	bne.n	800af96 <_strtol_l.isra.0+0x7e>
 800af92:	45a6      	cmp	lr, r4
 800af94:	db19      	blt.n	800afca <_strtol_l.isra.0+0xb2>
 800af96:	fb00 4006 	mla	r0, r0, r6, r4
 800af9a:	2701      	movs	r7, #1
 800af9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afa0:	e7eb      	b.n	800af7a <_strtol_l.isra.0+0x62>
 800afa2:	462f      	mov	r7, r5
 800afa4:	e7bf      	b.n	800af26 <_strtol_l.isra.0+0xe>
 800afa6:	2c2b      	cmp	r4, #43	; 0x2b
 800afa8:	bf04      	itt	eq
 800afaa:	1cbd      	addeq	r5, r7, #2
 800afac:	787c      	ldrbeq	r4, [r7, #1]
 800afae:	461a      	mov	r2, r3
 800afb0:	e7c9      	b.n	800af46 <_strtol_l.isra.0+0x2e>
 800afb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800afb6:	2b19      	cmp	r3, #25
 800afb8:	d801      	bhi.n	800afbe <_strtol_l.isra.0+0xa6>
 800afba:	3c37      	subs	r4, #55	; 0x37
 800afbc:	e7e2      	b.n	800af84 <_strtol_l.isra.0+0x6c>
 800afbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800afc2:	2b19      	cmp	r3, #25
 800afc4:	d804      	bhi.n	800afd0 <_strtol_l.isra.0+0xb8>
 800afc6:	3c57      	subs	r4, #87	; 0x57
 800afc8:	e7dc      	b.n	800af84 <_strtol_l.isra.0+0x6c>
 800afca:	f04f 37ff 	mov.w	r7, #4294967295
 800afce:	e7e5      	b.n	800af9c <_strtol_l.isra.0+0x84>
 800afd0:	1c7b      	adds	r3, r7, #1
 800afd2:	d108      	bne.n	800afe6 <_strtol_l.isra.0+0xce>
 800afd4:	2322      	movs	r3, #34	; 0x22
 800afd6:	f8c8 3000 	str.w	r3, [r8]
 800afda:	4608      	mov	r0, r1
 800afdc:	f1ba 0f00 	cmp.w	sl, #0
 800afe0:	d107      	bne.n	800aff2 <_strtol_l.isra.0+0xda>
 800afe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afe6:	b102      	cbz	r2, 800afea <_strtol_l.isra.0+0xd2>
 800afe8:	4240      	negs	r0, r0
 800afea:	f1ba 0f00 	cmp.w	sl, #0
 800afee:	d0f8      	beq.n	800afe2 <_strtol_l.isra.0+0xca>
 800aff0:	b10f      	cbz	r7, 800aff6 <_strtol_l.isra.0+0xde>
 800aff2:	f105 39ff 	add.w	r9, r5, #4294967295
 800aff6:	f8ca 9000 	str.w	r9, [sl]
 800affa:	e7f2      	b.n	800afe2 <_strtol_l.isra.0+0xca>
 800affc:	2430      	movs	r4, #48	; 0x30
 800affe:	2e00      	cmp	r6, #0
 800b000:	d1af      	bne.n	800af62 <_strtol_l.isra.0+0x4a>
 800b002:	2608      	movs	r6, #8
 800b004:	e7ad      	b.n	800af62 <_strtol_l.isra.0+0x4a>
 800b006:	2c30      	cmp	r4, #48	; 0x30
 800b008:	d0a3      	beq.n	800af52 <_strtol_l.isra.0+0x3a>
 800b00a:	260a      	movs	r6, #10
 800b00c:	e7a9      	b.n	800af62 <_strtol_l.isra.0+0x4a>
	...

0800b010 <_strtol_r>:
 800b010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b012:	4c06      	ldr	r4, [pc, #24]	; (800b02c <_strtol_r+0x1c>)
 800b014:	4d06      	ldr	r5, [pc, #24]	; (800b030 <_strtol_r+0x20>)
 800b016:	6824      	ldr	r4, [r4, #0]
 800b018:	6a24      	ldr	r4, [r4, #32]
 800b01a:	2c00      	cmp	r4, #0
 800b01c:	bf08      	it	eq
 800b01e:	462c      	moveq	r4, r5
 800b020:	9400      	str	r4, [sp, #0]
 800b022:	f7ff ff79 	bl	800af18 <_strtol_l.isra.0>
 800b026:	b003      	add	sp, #12
 800b028:	bd30      	pop	{r4, r5, pc}
 800b02a:	bf00      	nop
 800b02c:	20000024 	.word	0x20000024
 800b030:	20000088 	.word	0x20000088

0800b034 <quorem>:
 800b034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	6903      	ldr	r3, [r0, #16]
 800b03a:	690c      	ldr	r4, [r1, #16]
 800b03c:	42a3      	cmp	r3, r4
 800b03e:	4680      	mov	r8, r0
 800b040:	f2c0 8082 	blt.w	800b148 <quorem+0x114>
 800b044:	3c01      	subs	r4, #1
 800b046:	f101 0714 	add.w	r7, r1, #20
 800b04a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b04e:	f100 0614 	add.w	r6, r0, #20
 800b052:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b056:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b05a:	eb06 030c 	add.w	r3, r6, ip
 800b05e:	3501      	adds	r5, #1
 800b060:	eb07 090c 	add.w	r9, r7, ip
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	fbb0 f5f5 	udiv	r5, r0, r5
 800b06a:	b395      	cbz	r5, 800b0d2 <quorem+0x9e>
 800b06c:	f04f 0a00 	mov.w	sl, #0
 800b070:	4638      	mov	r0, r7
 800b072:	46b6      	mov	lr, r6
 800b074:	46d3      	mov	fp, sl
 800b076:	f850 2b04 	ldr.w	r2, [r0], #4
 800b07a:	b293      	uxth	r3, r2
 800b07c:	fb05 a303 	mla	r3, r5, r3, sl
 800b080:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b084:	b29b      	uxth	r3, r3
 800b086:	ebab 0303 	sub.w	r3, fp, r3
 800b08a:	0c12      	lsrs	r2, r2, #16
 800b08c:	f8de b000 	ldr.w	fp, [lr]
 800b090:	fb05 a202 	mla	r2, r5, r2, sl
 800b094:	fa13 f38b 	uxtah	r3, r3, fp
 800b098:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b09c:	fa1f fb82 	uxth.w	fp, r2
 800b0a0:	f8de 2000 	ldr.w	r2, [lr]
 800b0a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b0a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0b2:	4581      	cmp	r9, r0
 800b0b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b0b8:	f84e 3b04 	str.w	r3, [lr], #4
 800b0bc:	d2db      	bcs.n	800b076 <quorem+0x42>
 800b0be:	f856 300c 	ldr.w	r3, [r6, ip]
 800b0c2:	b933      	cbnz	r3, 800b0d2 <quorem+0x9e>
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	3b04      	subs	r3, #4
 800b0c8:	429e      	cmp	r6, r3
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	d330      	bcc.n	800b130 <quorem+0xfc>
 800b0ce:	f8c8 4010 	str.w	r4, [r8, #16]
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	f001 fb3a 	bl	800c74c <__mcmp>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	db25      	blt.n	800b128 <quorem+0xf4>
 800b0dc:	3501      	adds	r5, #1
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f04f 0c00 	mov.w	ip, #0
 800b0e4:	f857 2b04 	ldr.w	r2, [r7], #4
 800b0e8:	f8d0 e000 	ldr.w	lr, [r0]
 800b0ec:	b293      	uxth	r3, r2
 800b0ee:	ebac 0303 	sub.w	r3, ip, r3
 800b0f2:	0c12      	lsrs	r2, r2, #16
 800b0f4:	fa13 f38e 	uxtah	r3, r3, lr
 800b0f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b100:	b29b      	uxth	r3, r3
 800b102:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b106:	45b9      	cmp	r9, r7
 800b108:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b10c:	f840 3b04 	str.w	r3, [r0], #4
 800b110:	d2e8      	bcs.n	800b0e4 <quorem+0xb0>
 800b112:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b116:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b11a:	b92a      	cbnz	r2, 800b128 <quorem+0xf4>
 800b11c:	3b04      	subs	r3, #4
 800b11e:	429e      	cmp	r6, r3
 800b120:	461a      	mov	r2, r3
 800b122:	d30b      	bcc.n	800b13c <quorem+0x108>
 800b124:	f8c8 4010 	str.w	r4, [r8, #16]
 800b128:	4628      	mov	r0, r5
 800b12a:	b003      	add	sp, #12
 800b12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b130:	6812      	ldr	r2, [r2, #0]
 800b132:	3b04      	subs	r3, #4
 800b134:	2a00      	cmp	r2, #0
 800b136:	d1ca      	bne.n	800b0ce <quorem+0x9a>
 800b138:	3c01      	subs	r4, #1
 800b13a:	e7c5      	b.n	800b0c8 <quorem+0x94>
 800b13c:	6812      	ldr	r2, [r2, #0]
 800b13e:	3b04      	subs	r3, #4
 800b140:	2a00      	cmp	r2, #0
 800b142:	d1ef      	bne.n	800b124 <quorem+0xf0>
 800b144:	3c01      	subs	r4, #1
 800b146:	e7ea      	b.n	800b11e <quorem+0xea>
 800b148:	2000      	movs	r0, #0
 800b14a:	e7ee      	b.n	800b12a <quorem+0xf6>
 800b14c:	0000      	movs	r0, r0
	...

0800b150 <_dtoa_r>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	ec57 6b10 	vmov	r6, r7, d0
 800b158:	b095      	sub	sp, #84	; 0x54
 800b15a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b15c:	9108      	str	r1, [sp, #32]
 800b15e:	4604      	mov	r4, r0
 800b160:	920a      	str	r2, [sp, #40]	; 0x28
 800b162:	9311      	str	r3, [sp, #68]	; 0x44
 800b164:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b168:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b16c:	b93d      	cbnz	r5, 800b17e <_dtoa_r+0x2e>
 800b16e:	2010      	movs	r0, #16
 800b170:	f001 f874 	bl	800c25c <malloc>
 800b174:	6260      	str	r0, [r4, #36]	; 0x24
 800b176:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b17a:	6005      	str	r5, [r0, #0]
 800b17c:	60c5      	str	r5, [r0, #12]
 800b17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b180:	6819      	ldr	r1, [r3, #0]
 800b182:	b151      	cbz	r1, 800b19a <_dtoa_r+0x4a>
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	604a      	str	r2, [r1, #4]
 800b188:	2301      	movs	r3, #1
 800b18a:	4093      	lsls	r3, r2
 800b18c:	608b      	str	r3, [r1, #8]
 800b18e:	4620      	mov	r0, r4
 800b190:	f001 f8bd 	bl	800c30e <_Bfree>
 800b194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b196:	2200      	movs	r2, #0
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	1e3b      	subs	r3, r7, #0
 800b19c:	bfb9      	ittee	lt
 800b19e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b1a2:	9303      	strlt	r3, [sp, #12]
 800b1a4:	2300      	movge	r3, #0
 800b1a6:	f8c8 3000 	strge.w	r3, [r8]
 800b1aa:	9d03      	ldr	r5, [sp, #12]
 800b1ac:	4bac      	ldr	r3, [pc, #688]	; (800b460 <_dtoa_r+0x310>)
 800b1ae:	bfbc      	itt	lt
 800b1b0:	2201      	movlt	r2, #1
 800b1b2:	f8c8 2000 	strlt.w	r2, [r8]
 800b1b6:	43ab      	bics	r3, r5
 800b1b8:	d11b      	bne.n	800b1f2 <_dtoa_r+0xa2>
 800b1ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b1bc:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1c0:	6013      	str	r3, [r2, #0]
 800b1c2:	9b02      	ldr	r3, [sp, #8]
 800b1c4:	b923      	cbnz	r3, 800b1d0 <_dtoa_r+0x80>
 800b1c6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b1ca:	2d00      	cmp	r5, #0
 800b1cc:	f000 84dd 	beq.w	800bb8a <_dtoa_r+0xa3a>
 800b1d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1d2:	b953      	cbnz	r3, 800b1ea <_dtoa_r+0x9a>
 800b1d4:	4ba3      	ldr	r3, [pc, #652]	; (800b464 <_dtoa_r+0x314>)
 800b1d6:	e020      	b.n	800b21a <_dtoa_r+0xca>
 800b1d8:	4ba3      	ldr	r3, [pc, #652]	; (800b468 <_dtoa_r+0x318>)
 800b1da:	9304      	str	r3, [sp, #16]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b1e0:	6013      	str	r3, [r2, #0]
 800b1e2:	9804      	ldr	r0, [sp, #16]
 800b1e4:	b015      	add	sp, #84	; 0x54
 800b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ea:	4b9e      	ldr	r3, [pc, #632]	; (800b464 <_dtoa_r+0x314>)
 800b1ec:	9304      	str	r3, [sp, #16]
 800b1ee:	3303      	adds	r3, #3
 800b1f0:	e7f5      	b.n	800b1de <_dtoa_r+0x8e>
 800b1f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b202:	d10c      	bne.n	800b21e <_dtoa_r+0xce>
 800b204:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b206:	2301      	movs	r3, #1
 800b208:	6013      	str	r3, [r2, #0]
 800b20a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 84b9 	beq.w	800bb84 <_dtoa_r+0xa34>
 800b212:	4b96      	ldr	r3, [pc, #600]	; (800b46c <_dtoa_r+0x31c>)
 800b214:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	3b01      	subs	r3, #1
 800b21a:	9304      	str	r3, [sp, #16]
 800b21c:	e7e1      	b.n	800b1e2 <_dtoa_r+0x92>
 800b21e:	a913      	add	r1, sp, #76	; 0x4c
 800b220:	aa12      	add	r2, sp, #72	; 0x48
 800b222:	ed9d 0b04 	vldr	d0, [sp, #16]
 800b226:	4620      	mov	r0, r4
 800b228:	f001 fb7e 	bl	800c928 <__d2b>
 800b22c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800b230:	9001      	str	r0, [sp, #4]
 800b232:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b234:	2e00      	cmp	r6, #0
 800b236:	d046      	beq.n	800b2c6 <_dtoa_r+0x176>
 800b238:	9805      	ldr	r0, [sp, #20]
 800b23a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800b23e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b242:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800b246:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b24a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800b24e:	2700      	movs	r7, #0
 800b250:	ee07 aa90 	vmov	s15, sl
 800b254:	ec43 2b16 	vmov	d6, r2, r3
 800b258:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b25c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800b448 <_dtoa_r+0x2f8>
 800b260:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b264:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b268:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800b450 <_dtoa_r+0x300>
 800b26c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800b270:	eeb0 7b46 	vmov.f64	d7, d6
 800b274:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800b458 <_dtoa_r+0x308>
 800b278:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b27c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b280:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b288:	ee16 ba90 	vmov	fp, s13
 800b28c:	d508      	bpl.n	800b2a0 <_dtoa_r+0x150>
 800b28e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b292:	eeb4 6b47 	vcmp.f64	d6, d7
 800b296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29a:	bf18      	it	ne
 800b29c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b2a0:	f1bb 0f16 	cmp.w	fp, #22
 800b2a4:	d834      	bhi.n	800b310 <_dtoa_r+0x1c0>
 800b2a6:	4b72      	ldr	r3, [pc, #456]	; (800b470 <_dtoa_r+0x320>)
 800b2a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2ac:	ed93 7b00 	vldr	d7, [r3]
 800b2b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b2b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2bc:	dd01      	ble.n	800b2c2 <_dtoa_r+0x172>
 800b2be:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	e025      	b.n	800b312 <_dtoa_r+0x1c2>
 800b2c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2c8:	eb01 0a03 	add.w	sl, r1, r3
 800b2cc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	dd17      	ble.n	800b304 <_dtoa_r+0x1b4>
 800b2d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b2d8:	9a02      	ldr	r2, [sp, #8]
 800b2da:	409d      	lsls	r5, r3
 800b2dc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800b2e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e4:	432b      	orrs	r3, r5
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b2ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b2f6:	9805      	ldr	r0, [sp, #20]
 800b2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2fc:	2701      	movs	r7, #1
 800b2fe:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800b302:	e7a5      	b.n	800b250 <_dtoa_r+0x100>
 800b304:	9a02      	ldr	r2, [sp, #8]
 800b306:	f1c3 0320 	rsb	r3, r3, #32
 800b30a:	fa02 f303 	lsl.w	r3, r2, r3
 800b30e:	e7ea      	b.n	800b2e6 <_dtoa_r+0x196>
 800b310:	2301      	movs	r3, #1
 800b312:	eba1 0a0a 	sub.w	sl, r1, sl
 800b316:	9310      	str	r3, [sp, #64]	; 0x40
 800b318:	f1ba 0301 	subs.w	r3, sl, #1
 800b31c:	9307      	str	r3, [sp, #28]
 800b31e:	bf43      	ittte	mi
 800b320:	2300      	movmi	r3, #0
 800b322:	f1ca 0a01 	rsbmi	sl, sl, #1
 800b326:	9307      	strmi	r3, [sp, #28]
 800b328:	f04f 0a00 	movpl.w	sl, #0
 800b32c:	f1bb 0f00 	cmp.w	fp, #0
 800b330:	db19      	blt.n	800b366 <_dtoa_r+0x216>
 800b332:	9b07      	ldr	r3, [sp, #28]
 800b334:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b338:	445b      	add	r3, fp
 800b33a:	9307      	str	r3, [sp, #28]
 800b33c:	f04f 0800 	mov.w	r8, #0
 800b340:	9b08      	ldr	r3, [sp, #32]
 800b342:	2b09      	cmp	r3, #9
 800b344:	d866      	bhi.n	800b414 <_dtoa_r+0x2c4>
 800b346:	2b05      	cmp	r3, #5
 800b348:	bfc4      	itt	gt
 800b34a:	3b04      	subgt	r3, #4
 800b34c:	9308      	strgt	r3, [sp, #32]
 800b34e:	9b08      	ldr	r3, [sp, #32]
 800b350:	f1a3 0302 	sub.w	r3, r3, #2
 800b354:	bfcc      	ite	gt
 800b356:	2500      	movgt	r5, #0
 800b358:	2501      	movle	r5, #1
 800b35a:	2b03      	cmp	r3, #3
 800b35c:	d866      	bhi.n	800b42c <_dtoa_r+0x2dc>
 800b35e:	e8df f003 	tbb	[pc, r3]
 800b362:	5755      	.short	0x5755
 800b364:	4909      	.short	0x4909
 800b366:	2300      	movs	r3, #0
 800b368:	ebaa 0a0b 	sub.w	sl, sl, fp
 800b36c:	f1cb 0800 	rsb	r8, fp, #0
 800b370:	930b      	str	r3, [sp, #44]	; 0x2c
 800b372:	e7e5      	b.n	800b340 <_dtoa_r+0x1f0>
 800b374:	2301      	movs	r3, #1
 800b376:	9309      	str	r3, [sp, #36]	; 0x24
 800b378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dd59      	ble.n	800b432 <_dtoa_r+0x2e2>
 800b37e:	9306      	str	r3, [sp, #24]
 800b380:	4699      	mov	r9, r3
 800b382:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b384:	2200      	movs	r2, #0
 800b386:	6072      	str	r2, [r6, #4]
 800b388:	2204      	movs	r2, #4
 800b38a:	f102 0014 	add.w	r0, r2, #20
 800b38e:	4298      	cmp	r0, r3
 800b390:	6871      	ldr	r1, [r6, #4]
 800b392:	d953      	bls.n	800b43c <_dtoa_r+0x2ec>
 800b394:	4620      	mov	r0, r4
 800b396:	f000 ff86 	bl	800c2a6 <_Balloc>
 800b39a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b39c:	6030      	str	r0, [r6, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	9304      	str	r3, [sp, #16]
 800b3a2:	f1b9 0f0e 	cmp.w	r9, #14
 800b3a6:	f200 80c2 	bhi.w	800b52e <_dtoa_r+0x3de>
 800b3aa:	2d00      	cmp	r5, #0
 800b3ac:	f000 80bf 	beq.w	800b52e <_dtoa_r+0x3de>
 800b3b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3b4:	f1bb 0f00 	cmp.w	fp, #0
 800b3b8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800b3bc:	f340 80e6 	ble.w	800b58c <_dtoa_r+0x43c>
 800b3c0:	4a2b      	ldr	r2, [pc, #172]	; (800b470 <_dtoa_r+0x320>)
 800b3c2:	f00b 030f 	and.w	r3, fp, #15
 800b3c6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3ca:	ed93 7b00 	vldr	d7, [r3]
 800b3ce:	ea4f 132b 	mov.w	r3, fp, asr #4
 800b3d2:	06da      	lsls	r2, r3, #27
 800b3d4:	f140 80d8 	bpl.w	800b588 <_dtoa_r+0x438>
 800b3d8:	4a26      	ldr	r2, [pc, #152]	; (800b474 <_dtoa_r+0x324>)
 800b3da:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800b3de:	ed92 6b08 	vldr	d6, [r2, #32]
 800b3e2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b3e6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b3ea:	f003 030f 	and.w	r3, r3, #15
 800b3ee:	2203      	movs	r2, #3
 800b3f0:	4920      	ldr	r1, [pc, #128]	; (800b474 <_dtoa_r+0x324>)
 800b3f2:	e04a      	b.n	800b48a <_dtoa_r+0x33a>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3fa:	445b      	add	r3, fp
 800b3fc:	f103 0901 	add.w	r9, r3, #1
 800b400:	9306      	str	r3, [sp, #24]
 800b402:	464b      	mov	r3, r9
 800b404:	2b01      	cmp	r3, #1
 800b406:	bfb8      	it	lt
 800b408:	2301      	movlt	r3, #1
 800b40a:	e7ba      	b.n	800b382 <_dtoa_r+0x232>
 800b40c:	2300      	movs	r3, #0
 800b40e:	e7b2      	b.n	800b376 <_dtoa_r+0x226>
 800b410:	2300      	movs	r3, #0
 800b412:	e7f0      	b.n	800b3f6 <_dtoa_r+0x2a6>
 800b414:	2501      	movs	r5, #1
 800b416:	2300      	movs	r3, #0
 800b418:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800b41c:	f04f 33ff 	mov.w	r3, #4294967295
 800b420:	9306      	str	r3, [sp, #24]
 800b422:	4699      	mov	r9, r3
 800b424:	2200      	movs	r2, #0
 800b426:	2312      	movs	r3, #18
 800b428:	920a      	str	r2, [sp, #40]	; 0x28
 800b42a:	e7aa      	b.n	800b382 <_dtoa_r+0x232>
 800b42c:	2301      	movs	r3, #1
 800b42e:	9309      	str	r3, [sp, #36]	; 0x24
 800b430:	e7f4      	b.n	800b41c <_dtoa_r+0x2cc>
 800b432:	2301      	movs	r3, #1
 800b434:	9306      	str	r3, [sp, #24]
 800b436:	4699      	mov	r9, r3
 800b438:	461a      	mov	r2, r3
 800b43a:	e7f5      	b.n	800b428 <_dtoa_r+0x2d8>
 800b43c:	3101      	adds	r1, #1
 800b43e:	6071      	str	r1, [r6, #4]
 800b440:	0052      	lsls	r2, r2, #1
 800b442:	e7a2      	b.n	800b38a <_dtoa_r+0x23a>
 800b444:	f3af 8000 	nop.w
 800b448:	636f4361 	.word	0x636f4361
 800b44c:	3fd287a7 	.word	0x3fd287a7
 800b450:	8b60c8b3 	.word	0x8b60c8b3
 800b454:	3fc68a28 	.word	0x3fc68a28
 800b458:	509f79fb 	.word	0x509f79fb
 800b45c:	3fd34413 	.word	0x3fd34413
 800b460:	7ff00000 	.word	0x7ff00000
 800b464:	0800d119 	.word	0x0800d119
 800b468:	0800d110 	.word	0x0800d110
 800b46c:	0800d091 	.word	0x0800d091
 800b470:	0800d150 	.word	0x0800d150
 800b474:	0800d128 	.word	0x0800d128
 800b478:	07de      	lsls	r6, r3, #31
 800b47a:	d504      	bpl.n	800b486 <_dtoa_r+0x336>
 800b47c:	ed91 6b00 	vldr	d6, [r1]
 800b480:	3201      	adds	r2, #1
 800b482:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b486:	105b      	asrs	r3, r3, #1
 800b488:	3108      	adds	r1, #8
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1f4      	bne.n	800b478 <_dtoa_r+0x328>
 800b48e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b492:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b496:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b49a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 80a7 	beq.w	800b5f0 <_dtoa_r+0x4a0>
 800b4a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b4a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b2:	f140 809d 	bpl.w	800b5f0 <_dtoa_r+0x4a0>
 800b4b6:	f1b9 0f00 	cmp.w	r9, #0
 800b4ba:	f000 8099 	beq.w	800b5f0 <_dtoa_r+0x4a0>
 800b4be:	9b06      	ldr	r3, [sp, #24]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dd30      	ble.n	800b526 <_dtoa_r+0x3d6>
 800b4c4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b4c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b4cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b4d0:	9d06      	ldr	r5, [sp, #24]
 800b4d2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b4d6:	3201      	adds	r2, #1
 800b4d8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b4dc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b4e0:	ee07 2a90 	vmov	s15, r2
 800b4e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b4e8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b4ec:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b4f0:	9a03      	ldr	r2, [sp, #12]
 800b4f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4f6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800b4fa:	2d00      	cmp	r5, #0
 800b4fc:	d17b      	bne.n	800b5f6 <_dtoa_r+0x4a6>
 800b4fe:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b502:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b506:	ec41 0b17 	vmov	d7, r0, r1
 800b50a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b512:	f300 8253 	bgt.w	800b9bc <_dtoa_r+0x86c>
 800b516:	eeb1 7b47 	vneg.f64	d7, d7
 800b51a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b522:	f100 8249 	bmi.w	800b9b8 <_dtoa_r+0x868>
 800b526:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b52a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b52e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b530:	2b00      	cmp	r3, #0
 800b532:	f2c0 8119 	blt.w	800b768 <_dtoa_r+0x618>
 800b536:	f1bb 0f0e 	cmp.w	fp, #14
 800b53a:	f300 8115 	bgt.w	800b768 <_dtoa_r+0x618>
 800b53e:	4bc3      	ldr	r3, [pc, #780]	; (800b84c <_dtoa_r+0x6fc>)
 800b540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b544:	ed93 6b00 	vldr	d6, [r3]
 800b548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f280 80ba 	bge.w	800b6c4 <_dtoa_r+0x574>
 800b550:	f1b9 0f00 	cmp.w	r9, #0
 800b554:	f300 80b6 	bgt.w	800b6c4 <_dtoa_r+0x574>
 800b558:	f040 822d 	bne.w	800b9b6 <_dtoa_r+0x866>
 800b55c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b560:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b564:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b568:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b570:	464d      	mov	r5, r9
 800b572:	464f      	mov	r7, r9
 800b574:	f280 8204 	bge.w	800b980 <_dtoa_r+0x830>
 800b578:	9b04      	ldr	r3, [sp, #16]
 800b57a:	9a04      	ldr	r2, [sp, #16]
 800b57c:	1c5e      	adds	r6, r3, #1
 800b57e:	2331      	movs	r3, #49	; 0x31
 800b580:	7013      	strb	r3, [r2, #0]
 800b582:	f10b 0b01 	add.w	fp, fp, #1
 800b586:	e1ff      	b.n	800b988 <_dtoa_r+0x838>
 800b588:	2202      	movs	r2, #2
 800b58a:	e731      	b.n	800b3f0 <_dtoa_r+0x2a0>
 800b58c:	d02e      	beq.n	800b5ec <_dtoa_r+0x49c>
 800b58e:	f1cb 0300 	rsb	r3, fp, #0
 800b592:	4aae      	ldr	r2, [pc, #696]	; (800b84c <_dtoa_r+0x6fc>)
 800b594:	f003 010f 	and.w	r1, r3, #15
 800b598:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b59c:	ed92 7b00 	vldr	d7, [r2]
 800b5a0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800b5a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b5a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b5ac:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800b5b0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b5b4:	49a6      	ldr	r1, [pc, #664]	; (800b850 <_dtoa_r+0x700>)
 800b5b6:	111b      	asrs	r3, r3, #4
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	b93b      	cbnz	r3, 800b5ce <_dtoa_r+0x47e>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	f43f af6b 	beq.w	800b49a <_dtoa_r+0x34a>
 800b5c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5cc:	e765      	b.n	800b49a <_dtoa_r+0x34a>
 800b5ce:	07dd      	lsls	r5, r3, #31
 800b5d0:	d509      	bpl.n	800b5e6 <_dtoa_r+0x496>
 800b5d2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800b5d6:	ed91 7b00 	vldr	d7, [r1]
 800b5da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b5de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b5e2:	3201      	adds	r2, #1
 800b5e4:	2001      	movs	r0, #1
 800b5e6:	105b      	asrs	r3, r3, #1
 800b5e8:	3108      	adds	r1, #8
 800b5ea:	e7e7      	b.n	800b5bc <_dtoa_r+0x46c>
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	e754      	b.n	800b49a <_dtoa_r+0x34a>
 800b5f0:	465b      	mov	r3, fp
 800b5f2:	464d      	mov	r5, r9
 800b5f4:	e770      	b.n	800b4d8 <_dtoa_r+0x388>
 800b5f6:	4a95      	ldr	r2, [pc, #596]	; (800b84c <_dtoa_r+0x6fc>)
 800b5f8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800b5fc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b602:	ec41 0b17 	vmov	d7, r0, r1
 800b606:	b35a      	cbz	r2, 800b660 <_dtoa_r+0x510>
 800b608:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b60c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b610:	9e04      	ldr	r6, [sp, #16]
 800b612:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b616:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b61a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b61e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b622:	ee14 2a90 	vmov	r2, s9
 800b626:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b62a:	3230      	adds	r2, #48	; 0x30
 800b62c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b630:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b638:	f806 2b01 	strb.w	r2, [r6], #1
 800b63c:	d43b      	bmi.n	800b6b6 <_dtoa_r+0x566>
 800b63e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b642:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64a:	d472      	bmi.n	800b732 <_dtoa_r+0x5e2>
 800b64c:	9a04      	ldr	r2, [sp, #16]
 800b64e:	1ab2      	subs	r2, r6, r2
 800b650:	4295      	cmp	r5, r2
 800b652:	f77f af68 	ble.w	800b526 <_dtoa_r+0x3d6>
 800b656:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b65a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b65e:	e7de      	b.n	800b61e <_dtoa_r+0x4ce>
 800b660:	9a04      	ldr	r2, [sp, #16]
 800b662:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b666:	1956      	adds	r6, r2, r5
 800b668:	4611      	mov	r1, r2
 800b66a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b66e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b672:	ee14 2a90 	vmov	r2, s9
 800b676:	3230      	adds	r2, #48	; 0x30
 800b678:	f801 2b01 	strb.w	r2, [r1], #1
 800b67c:	42b1      	cmp	r1, r6
 800b67e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b682:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b686:	d11a      	bne.n	800b6be <_dtoa_r+0x56e>
 800b688:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b68c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b690:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b698:	dc4b      	bgt.n	800b732 <_dtoa_r+0x5e2>
 800b69a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b69e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a6:	f57f af3e 	bpl.w	800b526 <_dtoa_r+0x3d6>
 800b6aa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b6ae:	2a30      	cmp	r2, #48	; 0x30
 800b6b0:	f106 31ff 	add.w	r1, r6, #4294967295
 800b6b4:	d001      	beq.n	800b6ba <_dtoa_r+0x56a>
 800b6b6:	469b      	mov	fp, r3
 800b6b8:	e02a      	b.n	800b710 <_dtoa_r+0x5c0>
 800b6ba:	460e      	mov	r6, r1
 800b6bc:	e7f5      	b.n	800b6aa <_dtoa_r+0x55a>
 800b6be:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b6c2:	e7d4      	b.n	800b66e <_dtoa_r+0x51e>
 800b6c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6c8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b6cc:	9e04      	ldr	r6, [sp, #16]
 800b6ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b6d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b6d6:	ee15 3a10 	vmov	r3, s10
 800b6da:	3330      	adds	r3, #48	; 0x30
 800b6dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b6e0:	9b04      	ldr	r3, [sp, #16]
 800b6e2:	1af3      	subs	r3, r6, r3
 800b6e4:	4599      	cmp	r9, r3
 800b6e6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b6ea:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b6ee:	d133      	bne.n	800b758 <_dtoa_r+0x608>
 800b6f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b6f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fc:	dc18      	bgt.n	800b730 <_dtoa_r+0x5e0>
 800b6fe:	eeb4 7b46 	vcmp.f64	d7, d6
 800b702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b706:	d103      	bne.n	800b710 <_dtoa_r+0x5c0>
 800b708:	ee15 3a10 	vmov	r3, s10
 800b70c:	07db      	lsls	r3, r3, #31
 800b70e:	d40f      	bmi.n	800b730 <_dtoa_r+0x5e0>
 800b710:	9901      	ldr	r1, [sp, #4]
 800b712:	4620      	mov	r0, r4
 800b714:	f000 fdfb 	bl	800c30e <_Bfree>
 800b718:	2300      	movs	r3, #0
 800b71a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b71c:	7033      	strb	r3, [r6, #0]
 800b71e:	f10b 0301 	add.w	r3, fp, #1
 800b722:	6013      	str	r3, [r2, #0]
 800b724:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b726:	2b00      	cmp	r3, #0
 800b728:	f43f ad5b 	beq.w	800b1e2 <_dtoa_r+0x92>
 800b72c:	601e      	str	r6, [r3, #0]
 800b72e:	e558      	b.n	800b1e2 <_dtoa_r+0x92>
 800b730:	465b      	mov	r3, fp
 800b732:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b736:	2939      	cmp	r1, #57	; 0x39
 800b738:	f106 32ff 	add.w	r2, r6, #4294967295
 800b73c:	d106      	bne.n	800b74c <_dtoa_r+0x5fc>
 800b73e:	9904      	ldr	r1, [sp, #16]
 800b740:	4291      	cmp	r1, r2
 800b742:	d107      	bne.n	800b754 <_dtoa_r+0x604>
 800b744:	2230      	movs	r2, #48	; 0x30
 800b746:	700a      	strb	r2, [r1, #0]
 800b748:	3301      	adds	r3, #1
 800b74a:	460a      	mov	r2, r1
 800b74c:	7811      	ldrb	r1, [r2, #0]
 800b74e:	3101      	adds	r1, #1
 800b750:	7011      	strb	r1, [r2, #0]
 800b752:	e7b0      	b.n	800b6b6 <_dtoa_r+0x566>
 800b754:	4616      	mov	r6, r2
 800b756:	e7ec      	b.n	800b732 <_dtoa_r+0x5e2>
 800b758:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b75c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b764:	d1b3      	bne.n	800b6ce <_dtoa_r+0x57e>
 800b766:	e7d3      	b.n	800b710 <_dtoa_r+0x5c0>
 800b768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	f000 808d 	beq.w	800b88a <_dtoa_r+0x73a>
 800b770:	9a08      	ldr	r2, [sp, #32]
 800b772:	2a01      	cmp	r2, #1
 800b774:	dc72      	bgt.n	800b85c <_dtoa_r+0x70c>
 800b776:	2f00      	cmp	r7, #0
 800b778:	d06c      	beq.n	800b854 <_dtoa_r+0x704>
 800b77a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b77e:	4645      	mov	r5, r8
 800b780:	4656      	mov	r6, sl
 800b782:	9a07      	ldr	r2, [sp, #28]
 800b784:	2101      	movs	r1, #1
 800b786:	441a      	add	r2, r3
 800b788:	4620      	mov	r0, r4
 800b78a:	449a      	add	sl, r3
 800b78c:	9207      	str	r2, [sp, #28]
 800b78e:	f000 fe9c 	bl	800c4ca <__i2b>
 800b792:	4607      	mov	r7, r0
 800b794:	2e00      	cmp	r6, #0
 800b796:	dd0b      	ble.n	800b7b0 <_dtoa_r+0x660>
 800b798:	9b07      	ldr	r3, [sp, #28]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dd08      	ble.n	800b7b0 <_dtoa_r+0x660>
 800b79e:	42b3      	cmp	r3, r6
 800b7a0:	9a07      	ldr	r2, [sp, #28]
 800b7a2:	bfa8      	it	ge
 800b7a4:	4633      	movge	r3, r6
 800b7a6:	ebaa 0a03 	sub.w	sl, sl, r3
 800b7aa:	1af6      	subs	r6, r6, r3
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	9307      	str	r3, [sp, #28]
 800b7b0:	f1b8 0f00 	cmp.w	r8, #0
 800b7b4:	d01d      	beq.n	800b7f2 <_dtoa_r+0x6a2>
 800b7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d06a      	beq.n	800b892 <_dtoa_r+0x742>
 800b7bc:	b18d      	cbz	r5, 800b7e2 <_dtoa_r+0x692>
 800b7be:	4639      	mov	r1, r7
 800b7c0:	462a      	mov	r2, r5
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 ff20 	bl	800c608 <__pow5mult>
 800b7c8:	9a01      	ldr	r2, [sp, #4]
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	4607      	mov	r7, r0
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 fe84 	bl	800c4dc <__multiply>
 800b7d4:	9901      	ldr	r1, [sp, #4]
 800b7d6:	900c      	str	r0, [sp, #48]	; 0x30
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 fd98 	bl	800c30e <_Bfree>
 800b7de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	ebb8 0205 	subs.w	r2, r8, r5
 800b7e6:	d004      	beq.n	800b7f2 <_dtoa_r+0x6a2>
 800b7e8:	9901      	ldr	r1, [sp, #4]
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 ff0c 	bl	800c608 <__pow5mult>
 800b7f0:	9001      	str	r0, [sp, #4]
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f000 fe68 	bl	800c4ca <__i2b>
 800b7fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7fc:	4605      	mov	r5, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f000 81ca 	beq.w	800bb98 <_dtoa_r+0xa48>
 800b804:	461a      	mov	r2, r3
 800b806:	4601      	mov	r1, r0
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 fefd 	bl	800c608 <__pow5mult>
 800b80e:	9b08      	ldr	r3, [sp, #32]
 800b810:	2b01      	cmp	r3, #1
 800b812:	4605      	mov	r5, r0
 800b814:	dc44      	bgt.n	800b8a0 <_dtoa_r+0x750>
 800b816:	9b02      	ldr	r3, [sp, #8]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d13c      	bne.n	800b896 <_dtoa_r+0x746>
 800b81c:	9b03      	ldr	r3, [sp, #12]
 800b81e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b822:	2b00      	cmp	r3, #0
 800b824:	d137      	bne.n	800b896 <_dtoa_r+0x746>
 800b826:	9b03      	ldr	r3, [sp, #12]
 800b828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b82c:	0d1b      	lsrs	r3, r3, #20
 800b82e:	051b      	lsls	r3, r3, #20
 800b830:	2b00      	cmp	r3, #0
 800b832:	d033      	beq.n	800b89c <_dtoa_r+0x74c>
 800b834:	9b07      	ldr	r3, [sp, #28]
 800b836:	3301      	adds	r3, #1
 800b838:	f10a 0a01 	add.w	sl, sl, #1
 800b83c:	9307      	str	r3, [sp, #28]
 800b83e:	f04f 0801 	mov.w	r8, #1
 800b842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b844:	bb73      	cbnz	r3, 800b8a4 <_dtoa_r+0x754>
 800b846:	2001      	movs	r0, #1
 800b848:	e034      	b.n	800b8b4 <_dtoa_r+0x764>
 800b84a:	bf00      	nop
 800b84c:	0800d150 	.word	0x0800d150
 800b850:	0800d128 	.word	0x0800d128
 800b854:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b856:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b85a:	e790      	b.n	800b77e <_dtoa_r+0x62e>
 800b85c:	f109 35ff 	add.w	r5, r9, #4294967295
 800b860:	45a8      	cmp	r8, r5
 800b862:	bfbf      	itttt	lt
 800b864:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b866:	eba5 0808 	sublt.w	r8, r5, r8
 800b86a:	4443      	addlt	r3, r8
 800b86c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b86e:	bfb6      	itet	lt
 800b870:	46a8      	movlt	r8, r5
 800b872:	eba8 0505 	subge.w	r5, r8, r5
 800b876:	2500      	movlt	r5, #0
 800b878:	f1b9 0f00 	cmp.w	r9, #0
 800b87c:	bfb9      	ittee	lt
 800b87e:	ebaa 0609 	sublt.w	r6, sl, r9
 800b882:	2300      	movlt	r3, #0
 800b884:	4656      	movge	r6, sl
 800b886:	464b      	movge	r3, r9
 800b888:	e77b      	b.n	800b782 <_dtoa_r+0x632>
 800b88a:	4645      	mov	r5, r8
 800b88c:	4656      	mov	r6, sl
 800b88e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b890:	e780      	b.n	800b794 <_dtoa_r+0x644>
 800b892:	4642      	mov	r2, r8
 800b894:	e7a8      	b.n	800b7e8 <_dtoa_r+0x698>
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	e7d2      	b.n	800b842 <_dtoa_r+0x6f2>
 800b89c:	4698      	mov	r8, r3
 800b89e:	e7d0      	b.n	800b842 <_dtoa_r+0x6f2>
 800b8a0:	f04f 0800 	mov.w	r8, #0
 800b8a4:	692b      	ldr	r3, [r5, #16]
 800b8a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b8aa:	6918      	ldr	r0, [r3, #16]
 800b8ac:	f000 fdbf 	bl	800c42e <__hi0bits>
 800b8b0:	f1c0 0020 	rsb	r0, r0, #32
 800b8b4:	9b07      	ldr	r3, [sp, #28]
 800b8b6:	4418      	add	r0, r3
 800b8b8:	f010 001f 	ands.w	r0, r0, #31
 800b8bc:	d047      	beq.n	800b94e <_dtoa_r+0x7fe>
 800b8be:	f1c0 0320 	rsb	r3, r0, #32
 800b8c2:	2b04      	cmp	r3, #4
 800b8c4:	dd3b      	ble.n	800b93e <_dtoa_r+0x7ee>
 800b8c6:	9b07      	ldr	r3, [sp, #28]
 800b8c8:	f1c0 001c 	rsb	r0, r0, #28
 800b8cc:	4482      	add	sl, r0
 800b8ce:	4406      	add	r6, r0
 800b8d0:	4403      	add	r3, r0
 800b8d2:	9307      	str	r3, [sp, #28]
 800b8d4:	f1ba 0f00 	cmp.w	sl, #0
 800b8d8:	dd05      	ble.n	800b8e6 <_dtoa_r+0x796>
 800b8da:	4652      	mov	r2, sl
 800b8dc:	9901      	ldr	r1, [sp, #4]
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 fee0 	bl	800c6a4 <__lshift>
 800b8e4:	9001      	str	r0, [sp, #4]
 800b8e6:	9b07      	ldr	r3, [sp, #28]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	dd05      	ble.n	800b8f8 <_dtoa_r+0x7a8>
 800b8ec:	4629      	mov	r1, r5
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 fed7 	bl	800c6a4 <__lshift>
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8fa:	b353      	cbz	r3, 800b952 <_dtoa_r+0x802>
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	9801      	ldr	r0, [sp, #4]
 800b900:	f000 ff24 	bl	800c74c <__mcmp>
 800b904:	2800      	cmp	r0, #0
 800b906:	da24      	bge.n	800b952 <_dtoa_r+0x802>
 800b908:	2300      	movs	r3, #0
 800b90a:	220a      	movs	r2, #10
 800b90c:	9901      	ldr	r1, [sp, #4]
 800b90e:	4620      	mov	r0, r4
 800b910:	f000 fd14 	bl	800c33c <__multadd>
 800b914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b916:	9001      	str	r0, [sp, #4]
 800b918:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f000 8142 	beq.w	800bba6 <_dtoa_r+0xa56>
 800b922:	2300      	movs	r3, #0
 800b924:	4639      	mov	r1, r7
 800b926:	220a      	movs	r2, #10
 800b928:	4620      	mov	r0, r4
 800b92a:	f000 fd07 	bl	800c33c <__multadd>
 800b92e:	9b06      	ldr	r3, [sp, #24]
 800b930:	2b00      	cmp	r3, #0
 800b932:	4607      	mov	r7, r0
 800b934:	dc4b      	bgt.n	800b9ce <_dtoa_r+0x87e>
 800b936:	9b08      	ldr	r3, [sp, #32]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	dd48      	ble.n	800b9ce <_dtoa_r+0x87e>
 800b93c:	e011      	b.n	800b962 <_dtoa_r+0x812>
 800b93e:	d0c9      	beq.n	800b8d4 <_dtoa_r+0x784>
 800b940:	9a07      	ldr	r2, [sp, #28]
 800b942:	331c      	adds	r3, #28
 800b944:	441a      	add	r2, r3
 800b946:	449a      	add	sl, r3
 800b948:	441e      	add	r6, r3
 800b94a:	4613      	mov	r3, r2
 800b94c:	e7c1      	b.n	800b8d2 <_dtoa_r+0x782>
 800b94e:	4603      	mov	r3, r0
 800b950:	e7f6      	b.n	800b940 <_dtoa_r+0x7f0>
 800b952:	f1b9 0f00 	cmp.w	r9, #0
 800b956:	dc34      	bgt.n	800b9c2 <_dtoa_r+0x872>
 800b958:	9b08      	ldr	r3, [sp, #32]
 800b95a:	2b02      	cmp	r3, #2
 800b95c:	dd31      	ble.n	800b9c2 <_dtoa_r+0x872>
 800b95e:	f8cd 9018 	str.w	r9, [sp, #24]
 800b962:	9b06      	ldr	r3, [sp, #24]
 800b964:	b963      	cbnz	r3, 800b980 <_dtoa_r+0x830>
 800b966:	4629      	mov	r1, r5
 800b968:	2205      	movs	r2, #5
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 fce6 	bl	800c33c <__multadd>
 800b970:	4601      	mov	r1, r0
 800b972:	4605      	mov	r5, r0
 800b974:	9801      	ldr	r0, [sp, #4]
 800b976:	f000 fee9 	bl	800c74c <__mcmp>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f73f adfc 	bgt.w	800b578 <_dtoa_r+0x428>
 800b980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b982:	9e04      	ldr	r6, [sp, #16]
 800b984:	ea6f 0b03 	mvn.w	fp, r3
 800b988:	f04f 0900 	mov.w	r9, #0
 800b98c:	4629      	mov	r1, r5
 800b98e:	4620      	mov	r0, r4
 800b990:	f000 fcbd 	bl	800c30e <_Bfree>
 800b994:	2f00      	cmp	r7, #0
 800b996:	f43f aebb 	beq.w	800b710 <_dtoa_r+0x5c0>
 800b99a:	f1b9 0f00 	cmp.w	r9, #0
 800b99e:	d005      	beq.n	800b9ac <_dtoa_r+0x85c>
 800b9a0:	45b9      	cmp	r9, r7
 800b9a2:	d003      	beq.n	800b9ac <_dtoa_r+0x85c>
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f000 fcb1 	bl	800c30e <_Bfree>
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fcad 	bl	800c30e <_Bfree>
 800b9b4:	e6ac      	b.n	800b710 <_dtoa_r+0x5c0>
 800b9b6:	2500      	movs	r5, #0
 800b9b8:	462f      	mov	r7, r5
 800b9ba:	e7e1      	b.n	800b980 <_dtoa_r+0x830>
 800b9bc:	469b      	mov	fp, r3
 800b9be:	462f      	mov	r7, r5
 800b9c0:	e5da      	b.n	800b578 <_dtoa_r+0x428>
 800b9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c4:	f8cd 9018 	str.w	r9, [sp, #24]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f000 80f3 	beq.w	800bbb4 <_dtoa_r+0xa64>
 800b9ce:	2e00      	cmp	r6, #0
 800b9d0:	dd05      	ble.n	800b9de <_dtoa_r+0x88e>
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	f000 fe64 	bl	800c6a4 <__lshift>
 800b9dc:	4607      	mov	r7, r0
 800b9de:	f1b8 0f00 	cmp.w	r8, #0
 800b9e2:	d04c      	beq.n	800ba7e <_dtoa_r+0x92e>
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 fc5d 	bl	800c2a6 <_Balloc>
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	3202      	adds	r2, #2
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	0092      	lsls	r2, r2, #2
 800b9f4:	f107 010c 	add.w	r1, r7, #12
 800b9f8:	300c      	adds	r0, #12
 800b9fa:	f000 fc49 	bl	800c290 <memcpy>
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4631      	mov	r1, r6
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fe4e 	bl	800c6a4 <__lshift>
 800ba08:	9b02      	ldr	r3, [sp, #8]
 800ba0a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	46b9      	mov	r9, r7
 800ba14:	9307      	str	r3, [sp, #28]
 800ba16:	4607      	mov	r7, r0
 800ba18:	4629      	mov	r1, r5
 800ba1a:	9801      	ldr	r0, [sp, #4]
 800ba1c:	f7ff fb0a 	bl	800b034 <quorem>
 800ba20:	4649      	mov	r1, r9
 800ba22:	4606      	mov	r6, r0
 800ba24:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ba28:	9801      	ldr	r0, [sp, #4]
 800ba2a:	f000 fe8f 	bl	800c74c <__mcmp>
 800ba2e:	463a      	mov	r2, r7
 800ba30:	9002      	str	r0, [sp, #8]
 800ba32:	4629      	mov	r1, r5
 800ba34:	4620      	mov	r0, r4
 800ba36:	f000 fea3 	bl	800c780 <__mdiff>
 800ba3a:	68c3      	ldr	r3, [r0, #12]
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	bb03      	cbnz	r3, 800ba82 <_dtoa_r+0x932>
 800ba40:	4601      	mov	r1, r0
 800ba42:	9009      	str	r0, [sp, #36]	; 0x24
 800ba44:	9801      	ldr	r0, [sp, #4]
 800ba46:	f000 fe81 	bl	800c74c <__mcmp>
 800ba4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	4611      	mov	r1, r2
 800ba50:	4620      	mov	r0, r4
 800ba52:	9309      	str	r3, [sp, #36]	; 0x24
 800ba54:	f000 fc5b 	bl	800c30e <_Bfree>
 800ba58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba5a:	b9a3      	cbnz	r3, 800ba86 <_dtoa_r+0x936>
 800ba5c:	9a08      	ldr	r2, [sp, #32]
 800ba5e:	b992      	cbnz	r2, 800ba86 <_dtoa_r+0x936>
 800ba60:	9a07      	ldr	r2, [sp, #28]
 800ba62:	b982      	cbnz	r2, 800ba86 <_dtoa_r+0x936>
 800ba64:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba68:	d029      	beq.n	800babe <_dtoa_r+0x96e>
 800ba6a:	9b02      	ldr	r3, [sp, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dd01      	ble.n	800ba74 <_dtoa_r+0x924>
 800ba70:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800ba74:	f10a 0601 	add.w	r6, sl, #1
 800ba78:	f88a 8000 	strb.w	r8, [sl]
 800ba7c:	e786      	b.n	800b98c <_dtoa_r+0x83c>
 800ba7e:	4638      	mov	r0, r7
 800ba80:	e7c2      	b.n	800ba08 <_dtoa_r+0x8b8>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e7e3      	b.n	800ba4e <_dtoa_r+0x8fe>
 800ba86:	9a02      	ldr	r2, [sp, #8]
 800ba88:	2a00      	cmp	r2, #0
 800ba8a:	db04      	blt.n	800ba96 <_dtoa_r+0x946>
 800ba8c:	d124      	bne.n	800bad8 <_dtoa_r+0x988>
 800ba8e:	9a08      	ldr	r2, [sp, #32]
 800ba90:	bb12      	cbnz	r2, 800bad8 <_dtoa_r+0x988>
 800ba92:	9a07      	ldr	r2, [sp, #28]
 800ba94:	bb02      	cbnz	r2, 800bad8 <_dtoa_r+0x988>
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	ddec      	ble.n	800ba74 <_dtoa_r+0x924>
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	9901      	ldr	r1, [sp, #4]
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 fe00 	bl	800c6a4 <__lshift>
 800baa4:	4629      	mov	r1, r5
 800baa6:	9001      	str	r0, [sp, #4]
 800baa8:	f000 fe50 	bl	800c74c <__mcmp>
 800baac:	2800      	cmp	r0, #0
 800baae:	dc03      	bgt.n	800bab8 <_dtoa_r+0x968>
 800bab0:	d1e0      	bne.n	800ba74 <_dtoa_r+0x924>
 800bab2:	f018 0f01 	tst.w	r8, #1
 800bab6:	d0dd      	beq.n	800ba74 <_dtoa_r+0x924>
 800bab8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800babc:	d1d8      	bne.n	800ba70 <_dtoa_r+0x920>
 800babe:	2339      	movs	r3, #57	; 0x39
 800bac0:	f10a 0601 	add.w	r6, sl, #1
 800bac4:	f88a 3000 	strb.w	r3, [sl]
 800bac8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bacc:	2b39      	cmp	r3, #57	; 0x39
 800bace:	f106 32ff 	add.w	r2, r6, #4294967295
 800bad2:	d04c      	beq.n	800bb6e <_dtoa_r+0xa1e>
 800bad4:	3301      	adds	r3, #1
 800bad6:	e051      	b.n	800bb7c <_dtoa_r+0xa2c>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f10a 0601 	add.w	r6, sl, #1
 800bade:	dd05      	ble.n	800baec <_dtoa_r+0x99c>
 800bae0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800bae4:	d0eb      	beq.n	800babe <_dtoa_r+0x96e>
 800bae6:	f108 0801 	add.w	r8, r8, #1
 800baea:	e7c5      	b.n	800ba78 <_dtoa_r+0x928>
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	9a06      	ldr	r2, [sp, #24]
 800baf0:	f806 8c01 	strb.w	r8, [r6, #-1]
 800baf4:	1af3      	subs	r3, r6, r3
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d021      	beq.n	800bb3e <_dtoa_r+0x9ee>
 800bafa:	2300      	movs	r3, #0
 800bafc:	220a      	movs	r2, #10
 800bafe:	9901      	ldr	r1, [sp, #4]
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 fc1b 	bl	800c33c <__multadd>
 800bb06:	45b9      	cmp	r9, r7
 800bb08:	9001      	str	r0, [sp, #4]
 800bb0a:	f04f 0300 	mov.w	r3, #0
 800bb0e:	f04f 020a 	mov.w	r2, #10
 800bb12:	4649      	mov	r1, r9
 800bb14:	4620      	mov	r0, r4
 800bb16:	d105      	bne.n	800bb24 <_dtoa_r+0x9d4>
 800bb18:	f000 fc10 	bl	800c33c <__multadd>
 800bb1c:	4681      	mov	r9, r0
 800bb1e:	4607      	mov	r7, r0
 800bb20:	46b2      	mov	sl, r6
 800bb22:	e779      	b.n	800ba18 <_dtoa_r+0x8c8>
 800bb24:	f000 fc0a 	bl	800c33c <__multadd>
 800bb28:	4639      	mov	r1, r7
 800bb2a:	4681      	mov	r9, r0
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	220a      	movs	r2, #10
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 fc03 	bl	800c33c <__multadd>
 800bb36:	4607      	mov	r7, r0
 800bb38:	e7f2      	b.n	800bb20 <_dtoa_r+0x9d0>
 800bb3a:	f04f 0900 	mov.w	r9, #0
 800bb3e:	2201      	movs	r2, #1
 800bb40:	9901      	ldr	r1, [sp, #4]
 800bb42:	4620      	mov	r0, r4
 800bb44:	f000 fdae 	bl	800c6a4 <__lshift>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	9001      	str	r0, [sp, #4]
 800bb4c:	f000 fdfe 	bl	800c74c <__mcmp>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	dcb9      	bgt.n	800bac8 <_dtoa_r+0x978>
 800bb54:	d102      	bne.n	800bb5c <_dtoa_r+0xa0c>
 800bb56:	f018 0f01 	tst.w	r8, #1
 800bb5a:	d1b5      	bne.n	800bac8 <_dtoa_r+0x978>
 800bb5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bb60:	2b30      	cmp	r3, #48	; 0x30
 800bb62:	f106 32ff 	add.w	r2, r6, #4294967295
 800bb66:	f47f af11 	bne.w	800b98c <_dtoa_r+0x83c>
 800bb6a:	4616      	mov	r6, r2
 800bb6c:	e7f6      	b.n	800bb5c <_dtoa_r+0xa0c>
 800bb6e:	9b04      	ldr	r3, [sp, #16]
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d105      	bne.n	800bb80 <_dtoa_r+0xa30>
 800bb74:	9a04      	ldr	r2, [sp, #16]
 800bb76:	f10b 0b01 	add.w	fp, fp, #1
 800bb7a:	2331      	movs	r3, #49	; 0x31
 800bb7c:	7013      	strb	r3, [r2, #0]
 800bb7e:	e705      	b.n	800b98c <_dtoa_r+0x83c>
 800bb80:	4616      	mov	r6, r2
 800bb82:	e7a1      	b.n	800bac8 <_dtoa_r+0x978>
 800bb84:	4b16      	ldr	r3, [pc, #88]	; (800bbe0 <_dtoa_r+0xa90>)
 800bb86:	f7ff bb48 	b.w	800b21a <_dtoa_r+0xca>
 800bb8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f47f ab23 	bne.w	800b1d8 <_dtoa_r+0x88>
 800bb92:	4b14      	ldr	r3, [pc, #80]	; (800bbe4 <_dtoa_r+0xa94>)
 800bb94:	f7ff bb41 	b.w	800b21a <_dtoa_r+0xca>
 800bb98:	9b08      	ldr	r3, [sp, #32]
 800bb9a:	2b01      	cmp	r3, #1
 800bb9c:	f77f ae3b 	ble.w	800b816 <_dtoa_r+0x6c6>
 800bba0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800bba4:	e64f      	b.n	800b846 <_dtoa_r+0x6f6>
 800bba6:	9b06      	ldr	r3, [sp, #24]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	dc03      	bgt.n	800bbb4 <_dtoa_r+0xa64>
 800bbac:	9b08      	ldr	r3, [sp, #32]
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	f73f aed7 	bgt.w	800b962 <_dtoa_r+0x812>
 800bbb4:	9e04      	ldr	r6, [sp, #16]
 800bbb6:	9801      	ldr	r0, [sp, #4]
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7ff fa3b 	bl	800b034 <quorem>
 800bbbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bbc2:	f806 8b01 	strb.w	r8, [r6], #1
 800bbc6:	9b04      	ldr	r3, [sp, #16]
 800bbc8:	9a06      	ldr	r2, [sp, #24]
 800bbca:	1af3      	subs	r3, r6, r3
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	ddb4      	ble.n	800bb3a <_dtoa_r+0x9ea>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	220a      	movs	r2, #10
 800bbd4:	9901      	ldr	r1, [sp, #4]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 fbb0 	bl	800c33c <__multadd>
 800bbdc:	9001      	str	r0, [sp, #4]
 800bbde:	e7ea      	b.n	800bbb6 <_dtoa_r+0xa66>
 800bbe0:	0800d090 	.word	0x0800d090
 800bbe4:	0800d110 	.word	0x0800d110

0800bbe8 <rshift>:
 800bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbea:	6906      	ldr	r6, [r0, #16]
 800bbec:	114b      	asrs	r3, r1, #5
 800bbee:	429e      	cmp	r6, r3
 800bbf0:	f100 0414 	add.w	r4, r0, #20
 800bbf4:	dd30      	ble.n	800bc58 <rshift+0x70>
 800bbf6:	f011 011f 	ands.w	r1, r1, #31
 800bbfa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bbfe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bc02:	d108      	bne.n	800bc16 <rshift+0x2e>
 800bc04:	4621      	mov	r1, r4
 800bc06:	42b2      	cmp	r2, r6
 800bc08:	460b      	mov	r3, r1
 800bc0a:	d211      	bcs.n	800bc30 <rshift+0x48>
 800bc0c:	f852 3b04 	ldr.w	r3, [r2], #4
 800bc10:	f841 3b04 	str.w	r3, [r1], #4
 800bc14:	e7f7      	b.n	800bc06 <rshift+0x1e>
 800bc16:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800bc1a:	f1c1 0c20 	rsb	ip, r1, #32
 800bc1e:	40cd      	lsrs	r5, r1
 800bc20:	3204      	adds	r2, #4
 800bc22:	4623      	mov	r3, r4
 800bc24:	42b2      	cmp	r2, r6
 800bc26:	4617      	mov	r7, r2
 800bc28:	d30c      	bcc.n	800bc44 <rshift+0x5c>
 800bc2a:	601d      	str	r5, [r3, #0]
 800bc2c:	b105      	cbz	r5, 800bc30 <rshift+0x48>
 800bc2e:	3304      	adds	r3, #4
 800bc30:	1b1a      	subs	r2, r3, r4
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc38:	bf08      	it	eq
 800bc3a:	2300      	moveq	r3, #0
 800bc3c:	6102      	str	r2, [r0, #16]
 800bc3e:	bf08      	it	eq
 800bc40:	6143      	streq	r3, [r0, #20]
 800bc42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc44:	683f      	ldr	r7, [r7, #0]
 800bc46:	fa07 f70c 	lsl.w	r7, r7, ip
 800bc4a:	433d      	orrs	r5, r7
 800bc4c:	f843 5b04 	str.w	r5, [r3], #4
 800bc50:	f852 5b04 	ldr.w	r5, [r2], #4
 800bc54:	40cd      	lsrs	r5, r1
 800bc56:	e7e5      	b.n	800bc24 <rshift+0x3c>
 800bc58:	4623      	mov	r3, r4
 800bc5a:	e7e9      	b.n	800bc30 <rshift+0x48>

0800bc5c <__hexdig_fun>:
 800bc5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc60:	2b09      	cmp	r3, #9
 800bc62:	d802      	bhi.n	800bc6a <__hexdig_fun+0xe>
 800bc64:	3820      	subs	r0, #32
 800bc66:	b2c0      	uxtb	r0, r0
 800bc68:	4770      	bx	lr
 800bc6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc6e:	2b05      	cmp	r3, #5
 800bc70:	d801      	bhi.n	800bc76 <__hexdig_fun+0x1a>
 800bc72:	3847      	subs	r0, #71	; 0x47
 800bc74:	e7f7      	b.n	800bc66 <__hexdig_fun+0xa>
 800bc76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bc7a:	2b05      	cmp	r3, #5
 800bc7c:	d801      	bhi.n	800bc82 <__hexdig_fun+0x26>
 800bc7e:	3827      	subs	r0, #39	; 0x27
 800bc80:	e7f1      	b.n	800bc66 <__hexdig_fun+0xa>
 800bc82:	2000      	movs	r0, #0
 800bc84:	4770      	bx	lr

0800bc86 <__gethex>:
 800bc86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8a:	b08b      	sub	sp, #44	; 0x2c
 800bc8c:	468a      	mov	sl, r1
 800bc8e:	9002      	str	r0, [sp, #8]
 800bc90:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bc92:	9306      	str	r3, [sp, #24]
 800bc94:	4690      	mov	r8, r2
 800bc96:	f000 fad0 	bl	800c23a <__localeconv_l>
 800bc9a:	6803      	ldr	r3, [r0, #0]
 800bc9c:	9303      	str	r3, [sp, #12]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7f4 face 	bl	8000240 <strlen>
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	9001      	str	r0, [sp, #4]
 800bca8:	4403      	add	r3, r0
 800bcaa:	f04f 0b00 	mov.w	fp, #0
 800bcae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bcb2:	9307      	str	r3, [sp, #28]
 800bcb4:	f8da 3000 	ldr.w	r3, [sl]
 800bcb8:	3302      	adds	r3, #2
 800bcba:	461f      	mov	r7, r3
 800bcbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bcc0:	2830      	cmp	r0, #48	; 0x30
 800bcc2:	d06c      	beq.n	800bd9e <__gethex+0x118>
 800bcc4:	f7ff ffca 	bl	800bc5c <__hexdig_fun>
 800bcc8:	4604      	mov	r4, r0
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d16a      	bne.n	800bda4 <__gethex+0x11e>
 800bcce:	9a01      	ldr	r2, [sp, #4]
 800bcd0:	9903      	ldr	r1, [sp, #12]
 800bcd2:	4638      	mov	r0, r7
 800bcd4:	f001 f8fe 	bl	800ced4 <strncmp>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d166      	bne.n	800bdaa <__gethex+0x124>
 800bcdc:	9b01      	ldr	r3, [sp, #4]
 800bcde:	5cf8      	ldrb	r0, [r7, r3]
 800bce0:	18fe      	adds	r6, r7, r3
 800bce2:	f7ff ffbb 	bl	800bc5c <__hexdig_fun>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d062      	beq.n	800bdb0 <__gethex+0x12a>
 800bcea:	4633      	mov	r3, r6
 800bcec:	7818      	ldrb	r0, [r3, #0]
 800bcee:	2830      	cmp	r0, #48	; 0x30
 800bcf0:	461f      	mov	r7, r3
 800bcf2:	f103 0301 	add.w	r3, r3, #1
 800bcf6:	d0f9      	beq.n	800bcec <__gethex+0x66>
 800bcf8:	f7ff ffb0 	bl	800bc5c <__hexdig_fun>
 800bcfc:	fab0 f580 	clz	r5, r0
 800bd00:	096d      	lsrs	r5, r5, #5
 800bd02:	4634      	mov	r4, r6
 800bd04:	f04f 0b01 	mov.w	fp, #1
 800bd08:	463a      	mov	r2, r7
 800bd0a:	4616      	mov	r6, r2
 800bd0c:	3201      	adds	r2, #1
 800bd0e:	7830      	ldrb	r0, [r6, #0]
 800bd10:	f7ff ffa4 	bl	800bc5c <__hexdig_fun>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d1f8      	bne.n	800bd0a <__gethex+0x84>
 800bd18:	9a01      	ldr	r2, [sp, #4]
 800bd1a:	9903      	ldr	r1, [sp, #12]
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f001 f8d9 	bl	800ced4 <strncmp>
 800bd22:	b950      	cbnz	r0, 800bd3a <__gethex+0xb4>
 800bd24:	b954      	cbnz	r4, 800bd3c <__gethex+0xb6>
 800bd26:	9b01      	ldr	r3, [sp, #4]
 800bd28:	18f4      	adds	r4, r6, r3
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	4616      	mov	r6, r2
 800bd2e:	3201      	adds	r2, #1
 800bd30:	7830      	ldrb	r0, [r6, #0]
 800bd32:	f7ff ff93 	bl	800bc5c <__hexdig_fun>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d1f8      	bne.n	800bd2c <__gethex+0xa6>
 800bd3a:	b10c      	cbz	r4, 800bd40 <__gethex+0xba>
 800bd3c:	1ba4      	subs	r4, r4, r6
 800bd3e:	00a4      	lsls	r4, r4, #2
 800bd40:	7833      	ldrb	r3, [r6, #0]
 800bd42:	2b50      	cmp	r3, #80	; 0x50
 800bd44:	d001      	beq.n	800bd4a <__gethex+0xc4>
 800bd46:	2b70      	cmp	r3, #112	; 0x70
 800bd48:	d140      	bne.n	800bdcc <__gethex+0x146>
 800bd4a:	7873      	ldrb	r3, [r6, #1]
 800bd4c:	2b2b      	cmp	r3, #43	; 0x2b
 800bd4e:	d031      	beq.n	800bdb4 <__gethex+0x12e>
 800bd50:	2b2d      	cmp	r3, #45	; 0x2d
 800bd52:	d033      	beq.n	800bdbc <__gethex+0x136>
 800bd54:	1c71      	adds	r1, r6, #1
 800bd56:	f04f 0900 	mov.w	r9, #0
 800bd5a:	7808      	ldrb	r0, [r1, #0]
 800bd5c:	f7ff ff7e 	bl	800bc5c <__hexdig_fun>
 800bd60:	1e43      	subs	r3, r0, #1
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	2b18      	cmp	r3, #24
 800bd66:	d831      	bhi.n	800bdcc <__gethex+0x146>
 800bd68:	f1a0 0210 	sub.w	r2, r0, #16
 800bd6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd70:	f7ff ff74 	bl	800bc5c <__hexdig_fun>
 800bd74:	1e43      	subs	r3, r0, #1
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	2b18      	cmp	r3, #24
 800bd7a:	d922      	bls.n	800bdc2 <__gethex+0x13c>
 800bd7c:	f1b9 0f00 	cmp.w	r9, #0
 800bd80:	d000      	beq.n	800bd84 <__gethex+0xfe>
 800bd82:	4252      	negs	r2, r2
 800bd84:	4414      	add	r4, r2
 800bd86:	f8ca 1000 	str.w	r1, [sl]
 800bd8a:	b30d      	cbz	r5, 800bdd0 <__gethex+0x14a>
 800bd8c:	f1bb 0f00 	cmp.w	fp, #0
 800bd90:	bf0c      	ite	eq
 800bd92:	2706      	moveq	r7, #6
 800bd94:	2700      	movne	r7, #0
 800bd96:	4638      	mov	r0, r7
 800bd98:	b00b      	add	sp, #44	; 0x2c
 800bd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9e:	f10b 0b01 	add.w	fp, fp, #1
 800bda2:	e78a      	b.n	800bcba <__gethex+0x34>
 800bda4:	2500      	movs	r5, #0
 800bda6:	462c      	mov	r4, r5
 800bda8:	e7ae      	b.n	800bd08 <__gethex+0x82>
 800bdaa:	463e      	mov	r6, r7
 800bdac:	2501      	movs	r5, #1
 800bdae:	e7c7      	b.n	800bd40 <__gethex+0xba>
 800bdb0:	4604      	mov	r4, r0
 800bdb2:	e7fb      	b.n	800bdac <__gethex+0x126>
 800bdb4:	f04f 0900 	mov.w	r9, #0
 800bdb8:	1cb1      	adds	r1, r6, #2
 800bdba:	e7ce      	b.n	800bd5a <__gethex+0xd4>
 800bdbc:	f04f 0901 	mov.w	r9, #1
 800bdc0:	e7fa      	b.n	800bdb8 <__gethex+0x132>
 800bdc2:	230a      	movs	r3, #10
 800bdc4:	fb03 0202 	mla	r2, r3, r2, r0
 800bdc8:	3a10      	subs	r2, #16
 800bdca:	e7cf      	b.n	800bd6c <__gethex+0xe6>
 800bdcc:	4631      	mov	r1, r6
 800bdce:	e7da      	b.n	800bd86 <__gethex+0x100>
 800bdd0:	1bf3      	subs	r3, r6, r7
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	2b07      	cmp	r3, #7
 800bdd8:	dc49      	bgt.n	800be6e <__gethex+0x1e8>
 800bdda:	9802      	ldr	r0, [sp, #8]
 800bddc:	f000 fa63 	bl	800c2a6 <_Balloc>
 800bde0:	9b01      	ldr	r3, [sp, #4]
 800bde2:	f100 0914 	add.w	r9, r0, #20
 800bde6:	f04f 0b00 	mov.w	fp, #0
 800bdea:	f1c3 0301 	rsb	r3, r3, #1
 800bdee:	4605      	mov	r5, r0
 800bdf0:	f8cd 9010 	str.w	r9, [sp, #16]
 800bdf4:	46da      	mov	sl, fp
 800bdf6:	9308      	str	r3, [sp, #32]
 800bdf8:	42b7      	cmp	r7, r6
 800bdfa:	d33b      	bcc.n	800be74 <__gethex+0x1ee>
 800bdfc:	9804      	ldr	r0, [sp, #16]
 800bdfe:	f840 ab04 	str.w	sl, [r0], #4
 800be02:	eba0 0009 	sub.w	r0, r0, r9
 800be06:	1080      	asrs	r0, r0, #2
 800be08:	6128      	str	r0, [r5, #16]
 800be0a:	0147      	lsls	r7, r0, #5
 800be0c:	4650      	mov	r0, sl
 800be0e:	f000 fb0e 	bl	800c42e <__hi0bits>
 800be12:	f8d8 6000 	ldr.w	r6, [r8]
 800be16:	1a3f      	subs	r7, r7, r0
 800be18:	42b7      	cmp	r7, r6
 800be1a:	dd64      	ble.n	800bee6 <__gethex+0x260>
 800be1c:	1bbf      	subs	r7, r7, r6
 800be1e:	4639      	mov	r1, r7
 800be20:	4628      	mov	r0, r5
 800be22:	f000 fe1e 	bl	800ca62 <__any_on>
 800be26:	4682      	mov	sl, r0
 800be28:	b178      	cbz	r0, 800be4a <__gethex+0x1c4>
 800be2a:	1e7b      	subs	r3, r7, #1
 800be2c:	1159      	asrs	r1, r3, #5
 800be2e:	f003 021f 	and.w	r2, r3, #31
 800be32:	f04f 0a01 	mov.w	sl, #1
 800be36:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800be3a:	fa0a f202 	lsl.w	r2, sl, r2
 800be3e:	420a      	tst	r2, r1
 800be40:	d003      	beq.n	800be4a <__gethex+0x1c4>
 800be42:	4553      	cmp	r3, sl
 800be44:	dc46      	bgt.n	800bed4 <__gethex+0x24e>
 800be46:	f04f 0a02 	mov.w	sl, #2
 800be4a:	4639      	mov	r1, r7
 800be4c:	4628      	mov	r0, r5
 800be4e:	f7ff fecb 	bl	800bbe8 <rshift>
 800be52:	443c      	add	r4, r7
 800be54:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be58:	42a3      	cmp	r3, r4
 800be5a:	da52      	bge.n	800bf02 <__gethex+0x27c>
 800be5c:	4629      	mov	r1, r5
 800be5e:	9802      	ldr	r0, [sp, #8]
 800be60:	f000 fa55 	bl	800c30e <_Bfree>
 800be64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be66:	2300      	movs	r3, #0
 800be68:	6013      	str	r3, [r2, #0]
 800be6a:	27a3      	movs	r7, #163	; 0xa3
 800be6c:	e793      	b.n	800bd96 <__gethex+0x110>
 800be6e:	3101      	adds	r1, #1
 800be70:	105b      	asrs	r3, r3, #1
 800be72:	e7b0      	b.n	800bdd6 <__gethex+0x150>
 800be74:	1e73      	subs	r3, r6, #1
 800be76:	9305      	str	r3, [sp, #20]
 800be78:	9a07      	ldr	r2, [sp, #28]
 800be7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be7e:	4293      	cmp	r3, r2
 800be80:	d018      	beq.n	800beb4 <__gethex+0x22e>
 800be82:	f1bb 0f20 	cmp.w	fp, #32
 800be86:	d107      	bne.n	800be98 <__gethex+0x212>
 800be88:	9b04      	ldr	r3, [sp, #16]
 800be8a:	f8c3 a000 	str.w	sl, [r3]
 800be8e:	3304      	adds	r3, #4
 800be90:	f04f 0a00 	mov.w	sl, #0
 800be94:	9304      	str	r3, [sp, #16]
 800be96:	46d3      	mov	fp, sl
 800be98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800be9c:	f7ff fede 	bl	800bc5c <__hexdig_fun>
 800bea0:	f000 000f 	and.w	r0, r0, #15
 800bea4:	fa00 f00b 	lsl.w	r0, r0, fp
 800bea8:	ea4a 0a00 	orr.w	sl, sl, r0
 800beac:	f10b 0b04 	add.w	fp, fp, #4
 800beb0:	9b05      	ldr	r3, [sp, #20]
 800beb2:	e00d      	b.n	800bed0 <__gethex+0x24a>
 800beb4:	9b05      	ldr	r3, [sp, #20]
 800beb6:	9a08      	ldr	r2, [sp, #32]
 800beb8:	4413      	add	r3, r2
 800beba:	42bb      	cmp	r3, r7
 800bebc:	d3e1      	bcc.n	800be82 <__gethex+0x1fc>
 800bebe:	4618      	mov	r0, r3
 800bec0:	9a01      	ldr	r2, [sp, #4]
 800bec2:	9903      	ldr	r1, [sp, #12]
 800bec4:	9309      	str	r3, [sp, #36]	; 0x24
 800bec6:	f001 f805 	bl	800ced4 <strncmp>
 800beca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800becc:	2800      	cmp	r0, #0
 800bece:	d1d8      	bne.n	800be82 <__gethex+0x1fc>
 800bed0:	461e      	mov	r6, r3
 800bed2:	e791      	b.n	800bdf8 <__gethex+0x172>
 800bed4:	1eb9      	subs	r1, r7, #2
 800bed6:	4628      	mov	r0, r5
 800bed8:	f000 fdc3 	bl	800ca62 <__any_on>
 800bedc:	2800      	cmp	r0, #0
 800bede:	d0b2      	beq.n	800be46 <__gethex+0x1c0>
 800bee0:	f04f 0a03 	mov.w	sl, #3
 800bee4:	e7b1      	b.n	800be4a <__gethex+0x1c4>
 800bee6:	da09      	bge.n	800befc <__gethex+0x276>
 800bee8:	1bf7      	subs	r7, r6, r7
 800beea:	4629      	mov	r1, r5
 800beec:	463a      	mov	r2, r7
 800beee:	9802      	ldr	r0, [sp, #8]
 800bef0:	f000 fbd8 	bl	800c6a4 <__lshift>
 800bef4:	1be4      	subs	r4, r4, r7
 800bef6:	4605      	mov	r5, r0
 800bef8:	f100 0914 	add.w	r9, r0, #20
 800befc:	f04f 0a00 	mov.w	sl, #0
 800bf00:	e7a8      	b.n	800be54 <__gethex+0x1ce>
 800bf02:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bf06:	42a0      	cmp	r0, r4
 800bf08:	dd6a      	ble.n	800bfe0 <__gethex+0x35a>
 800bf0a:	1b04      	subs	r4, r0, r4
 800bf0c:	42a6      	cmp	r6, r4
 800bf0e:	dc2e      	bgt.n	800bf6e <__gethex+0x2e8>
 800bf10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d022      	beq.n	800bf5e <__gethex+0x2d8>
 800bf18:	2b03      	cmp	r3, #3
 800bf1a:	d024      	beq.n	800bf66 <__gethex+0x2e0>
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d115      	bne.n	800bf4c <__gethex+0x2c6>
 800bf20:	42a6      	cmp	r6, r4
 800bf22:	d113      	bne.n	800bf4c <__gethex+0x2c6>
 800bf24:	2e01      	cmp	r6, #1
 800bf26:	dc0b      	bgt.n	800bf40 <__gethex+0x2ba>
 800bf28:	9a06      	ldr	r2, [sp, #24]
 800bf2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf2e:	6013      	str	r3, [r2, #0]
 800bf30:	2301      	movs	r3, #1
 800bf32:	612b      	str	r3, [r5, #16]
 800bf34:	f8c9 3000 	str.w	r3, [r9]
 800bf38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf3a:	2762      	movs	r7, #98	; 0x62
 800bf3c:	601d      	str	r5, [r3, #0]
 800bf3e:	e72a      	b.n	800bd96 <__gethex+0x110>
 800bf40:	1e71      	subs	r1, r6, #1
 800bf42:	4628      	mov	r0, r5
 800bf44:	f000 fd8d 	bl	800ca62 <__any_on>
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d1ed      	bne.n	800bf28 <__gethex+0x2a2>
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	9802      	ldr	r0, [sp, #8]
 800bf50:	f000 f9dd 	bl	800c30e <_Bfree>
 800bf54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bf56:	2300      	movs	r3, #0
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	2750      	movs	r7, #80	; 0x50
 800bf5c:	e71b      	b.n	800bd96 <__gethex+0x110>
 800bf5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d0e1      	beq.n	800bf28 <__gethex+0x2a2>
 800bf64:	e7f2      	b.n	800bf4c <__gethex+0x2c6>
 800bf66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1dd      	bne.n	800bf28 <__gethex+0x2a2>
 800bf6c:	e7ee      	b.n	800bf4c <__gethex+0x2c6>
 800bf6e:	1e67      	subs	r7, r4, #1
 800bf70:	f1ba 0f00 	cmp.w	sl, #0
 800bf74:	d131      	bne.n	800bfda <__gethex+0x354>
 800bf76:	b127      	cbz	r7, 800bf82 <__gethex+0x2fc>
 800bf78:	4639      	mov	r1, r7
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f000 fd71 	bl	800ca62 <__any_on>
 800bf80:	4682      	mov	sl, r0
 800bf82:	117a      	asrs	r2, r7, #5
 800bf84:	2301      	movs	r3, #1
 800bf86:	f007 071f 	and.w	r7, r7, #31
 800bf8a:	fa03 f707 	lsl.w	r7, r3, r7
 800bf8e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800bf92:	4621      	mov	r1, r4
 800bf94:	421f      	tst	r7, r3
 800bf96:	4628      	mov	r0, r5
 800bf98:	bf18      	it	ne
 800bf9a:	f04a 0a02 	orrne.w	sl, sl, #2
 800bf9e:	1b36      	subs	r6, r6, r4
 800bfa0:	f7ff fe22 	bl	800bbe8 <rshift>
 800bfa4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bfa8:	2702      	movs	r7, #2
 800bfaa:	f1ba 0f00 	cmp.w	sl, #0
 800bfae:	d048      	beq.n	800c042 <__gethex+0x3bc>
 800bfb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d015      	beq.n	800bfe4 <__gethex+0x35e>
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d017      	beq.n	800bfec <__gethex+0x366>
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d109      	bne.n	800bfd4 <__gethex+0x34e>
 800bfc0:	f01a 0f02 	tst.w	sl, #2
 800bfc4:	d006      	beq.n	800bfd4 <__gethex+0x34e>
 800bfc6:	f8d9 3000 	ldr.w	r3, [r9]
 800bfca:	ea4a 0a03 	orr.w	sl, sl, r3
 800bfce:	f01a 0f01 	tst.w	sl, #1
 800bfd2:	d10e      	bne.n	800bff2 <__gethex+0x36c>
 800bfd4:	f047 0710 	orr.w	r7, r7, #16
 800bfd8:	e033      	b.n	800c042 <__gethex+0x3bc>
 800bfda:	f04f 0a01 	mov.w	sl, #1
 800bfde:	e7d0      	b.n	800bf82 <__gethex+0x2fc>
 800bfe0:	2701      	movs	r7, #1
 800bfe2:	e7e2      	b.n	800bfaa <__gethex+0x324>
 800bfe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfe6:	f1c3 0301 	rsb	r3, r3, #1
 800bfea:	9315      	str	r3, [sp, #84]	; 0x54
 800bfec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d0f0      	beq.n	800bfd4 <__gethex+0x34e>
 800bff2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800bff6:	f105 0314 	add.w	r3, r5, #20
 800bffa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800bffe:	eb03 010a 	add.w	r1, r3, sl
 800c002:	f04f 0c00 	mov.w	ip, #0
 800c006:	4618      	mov	r0, r3
 800c008:	f853 2b04 	ldr.w	r2, [r3], #4
 800c00c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c010:	d01c      	beq.n	800c04c <__gethex+0x3c6>
 800c012:	3201      	adds	r2, #1
 800c014:	6002      	str	r2, [r0, #0]
 800c016:	2f02      	cmp	r7, #2
 800c018:	f105 0314 	add.w	r3, r5, #20
 800c01c:	d138      	bne.n	800c090 <__gethex+0x40a>
 800c01e:	f8d8 2000 	ldr.w	r2, [r8]
 800c022:	3a01      	subs	r2, #1
 800c024:	42b2      	cmp	r2, r6
 800c026:	d10a      	bne.n	800c03e <__gethex+0x3b8>
 800c028:	1171      	asrs	r1, r6, #5
 800c02a:	2201      	movs	r2, #1
 800c02c:	f006 061f 	and.w	r6, r6, #31
 800c030:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c034:	fa02 f606 	lsl.w	r6, r2, r6
 800c038:	421e      	tst	r6, r3
 800c03a:	bf18      	it	ne
 800c03c:	4617      	movne	r7, r2
 800c03e:	f047 0720 	orr.w	r7, r7, #32
 800c042:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c044:	601d      	str	r5, [r3, #0]
 800c046:	9b06      	ldr	r3, [sp, #24]
 800c048:	601c      	str	r4, [r3, #0]
 800c04a:	e6a4      	b.n	800bd96 <__gethex+0x110>
 800c04c:	4299      	cmp	r1, r3
 800c04e:	f843 cc04 	str.w	ip, [r3, #-4]
 800c052:	d8d8      	bhi.n	800c006 <__gethex+0x380>
 800c054:	68ab      	ldr	r3, [r5, #8]
 800c056:	4599      	cmp	r9, r3
 800c058:	db12      	blt.n	800c080 <__gethex+0x3fa>
 800c05a:	6869      	ldr	r1, [r5, #4]
 800c05c:	9802      	ldr	r0, [sp, #8]
 800c05e:	3101      	adds	r1, #1
 800c060:	f000 f921 	bl	800c2a6 <_Balloc>
 800c064:	692a      	ldr	r2, [r5, #16]
 800c066:	3202      	adds	r2, #2
 800c068:	f105 010c 	add.w	r1, r5, #12
 800c06c:	4683      	mov	fp, r0
 800c06e:	0092      	lsls	r2, r2, #2
 800c070:	300c      	adds	r0, #12
 800c072:	f000 f90d 	bl	800c290 <memcpy>
 800c076:	4629      	mov	r1, r5
 800c078:	9802      	ldr	r0, [sp, #8]
 800c07a:	f000 f948 	bl	800c30e <_Bfree>
 800c07e:	465d      	mov	r5, fp
 800c080:	692b      	ldr	r3, [r5, #16]
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c088:	612a      	str	r2, [r5, #16]
 800c08a:	2201      	movs	r2, #1
 800c08c:	615a      	str	r2, [r3, #20]
 800c08e:	e7c2      	b.n	800c016 <__gethex+0x390>
 800c090:	692a      	ldr	r2, [r5, #16]
 800c092:	454a      	cmp	r2, r9
 800c094:	dd0b      	ble.n	800c0ae <__gethex+0x428>
 800c096:	2101      	movs	r1, #1
 800c098:	4628      	mov	r0, r5
 800c09a:	f7ff fda5 	bl	800bbe8 <rshift>
 800c09e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0a2:	3401      	adds	r4, #1
 800c0a4:	42a3      	cmp	r3, r4
 800c0a6:	f6ff aed9 	blt.w	800be5c <__gethex+0x1d6>
 800c0aa:	2701      	movs	r7, #1
 800c0ac:	e7c7      	b.n	800c03e <__gethex+0x3b8>
 800c0ae:	f016 061f 	ands.w	r6, r6, #31
 800c0b2:	d0fa      	beq.n	800c0aa <__gethex+0x424>
 800c0b4:	449a      	add	sl, r3
 800c0b6:	f1c6 0620 	rsb	r6, r6, #32
 800c0ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c0be:	f000 f9b6 	bl	800c42e <__hi0bits>
 800c0c2:	42b0      	cmp	r0, r6
 800c0c4:	dbe7      	blt.n	800c096 <__gethex+0x410>
 800c0c6:	e7f0      	b.n	800c0aa <__gethex+0x424>

0800c0c8 <L_shift>:
 800c0c8:	f1c2 0208 	rsb	r2, r2, #8
 800c0cc:	0092      	lsls	r2, r2, #2
 800c0ce:	b570      	push	{r4, r5, r6, lr}
 800c0d0:	f1c2 0620 	rsb	r6, r2, #32
 800c0d4:	6843      	ldr	r3, [r0, #4]
 800c0d6:	6804      	ldr	r4, [r0, #0]
 800c0d8:	fa03 f506 	lsl.w	r5, r3, r6
 800c0dc:	432c      	orrs	r4, r5
 800c0de:	40d3      	lsrs	r3, r2
 800c0e0:	6004      	str	r4, [r0, #0]
 800c0e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c0e6:	4288      	cmp	r0, r1
 800c0e8:	d3f4      	bcc.n	800c0d4 <L_shift+0xc>
 800c0ea:	bd70      	pop	{r4, r5, r6, pc}

0800c0ec <__match>:
 800c0ec:	b530      	push	{r4, r5, lr}
 800c0ee:	6803      	ldr	r3, [r0, #0]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0f6:	b914      	cbnz	r4, 800c0fe <__match+0x12>
 800c0f8:	6003      	str	r3, [r0, #0]
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	bd30      	pop	{r4, r5, pc}
 800c0fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c102:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c106:	2d19      	cmp	r5, #25
 800c108:	bf98      	it	ls
 800c10a:	3220      	addls	r2, #32
 800c10c:	42a2      	cmp	r2, r4
 800c10e:	d0f0      	beq.n	800c0f2 <__match+0x6>
 800c110:	2000      	movs	r0, #0
 800c112:	e7f3      	b.n	800c0fc <__match+0x10>

0800c114 <__hexnan>:
 800c114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c118:	680b      	ldr	r3, [r1, #0]
 800c11a:	6801      	ldr	r1, [r0, #0]
 800c11c:	115f      	asrs	r7, r3, #5
 800c11e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c122:	f013 031f 	ands.w	r3, r3, #31
 800c126:	b087      	sub	sp, #28
 800c128:	bf18      	it	ne
 800c12a:	3704      	addne	r7, #4
 800c12c:	2500      	movs	r5, #0
 800c12e:	1f3e      	subs	r6, r7, #4
 800c130:	4682      	mov	sl, r0
 800c132:	4690      	mov	r8, r2
 800c134:	9301      	str	r3, [sp, #4]
 800c136:	f847 5c04 	str.w	r5, [r7, #-4]
 800c13a:	46b1      	mov	r9, r6
 800c13c:	4634      	mov	r4, r6
 800c13e:	9502      	str	r5, [sp, #8]
 800c140:	46ab      	mov	fp, r5
 800c142:	784a      	ldrb	r2, [r1, #1]
 800c144:	1c4b      	adds	r3, r1, #1
 800c146:	9303      	str	r3, [sp, #12]
 800c148:	b342      	cbz	r2, 800c19c <__hexnan+0x88>
 800c14a:	4610      	mov	r0, r2
 800c14c:	9105      	str	r1, [sp, #20]
 800c14e:	9204      	str	r2, [sp, #16]
 800c150:	f7ff fd84 	bl	800bc5c <__hexdig_fun>
 800c154:	2800      	cmp	r0, #0
 800c156:	d143      	bne.n	800c1e0 <__hexnan+0xcc>
 800c158:	9a04      	ldr	r2, [sp, #16]
 800c15a:	9905      	ldr	r1, [sp, #20]
 800c15c:	2a20      	cmp	r2, #32
 800c15e:	d818      	bhi.n	800c192 <__hexnan+0x7e>
 800c160:	9b02      	ldr	r3, [sp, #8]
 800c162:	459b      	cmp	fp, r3
 800c164:	dd13      	ble.n	800c18e <__hexnan+0x7a>
 800c166:	454c      	cmp	r4, r9
 800c168:	d206      	bcs.n	800c178 <__hexnan+0x64>
 800c16a:	2d07      	cmp	r5, #7
 800c16c:	dc04      	bgt.n	800c178 <__hexnan+0x64>
 800c16e:	462a      	mov	r2, r5
 800c170:	4649      	mov	r1, r9
 800c172:	4620      	mov	r0, r4
 800c174:	f7ff ffa8 	bl	800c0c8 <L_shift>
 800c178:	4544      	cmp	r4, r8
 800c17a:	d944      	bls.n	800c206 <__hexnan+0xf2>
 800c17c:	2300      	movs	r3, #0
 800c17e:	f1a4 0904 	sub.w	r9, r4, #4
 800c182:	f844 3c04 	str.w	r3, [r4, #-4]
 800c186:	f8cd b008 	str.w	fp, [sp, #8]
 800c18a:	464c      	mov	r4, r9
 800c18c:	461d      	mov	r5, r3
 800c18e:	9903      	ldr	r1, [sp, #12]
 800c190:	e7d7      	b.n	800c142 <__hexnan+0x2e>
 800c192:	2a29      	cmp	r2, #41	; 0x29
 800c194:	d14a      	bne.n	800c22c <__hexnan+0x118>
 800c196:	3102      	adds	r1, #2
 800c198:	f8ca 1000 	str.w	r1, [sl]
 800c19c:	f1bb 0f00 	cmp.w	fp, #0
 800c1a0:	d044      	beq.n	800c22c <__hexnan+0x118>
 800c1a2:	454c      	cmp	r4, r9
 800c1a4:	d206      	bcs.n	800c1b4 <__hexnan+0xa0>
 800c1a6:	2d07      	cmp	r5, #7
 800c1a8:	dc04      	bgt.n	800c1b4 <__hexnan+0xa0>
 800c1aa:	462a      	mov	r2, r5
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f7ff ff8a 	bl	800c0c8 <L_shift>
 800c1b4:	4544      	cmp	r4, r8
 800c1b6:	d928      	bls.n	800c20a <__hexnan+0xf6>
 800c1b8:	4643      	mov	r3, r8
 800c1ba:	f854 2b04 	ldr.w	r2, [r4], #4
 800c1be:	f843 2b04 	str.w	r2, [r3], #4
 800c1c2:	42a6      	cmp	r6, r4
 800c1c4:	d2f9      	bcs.n	800c1ba <__hexnan+0xa6>
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f843 2b04 	str.w	r2, [r3], #4
 800c1cc:	429e      	cmp	r6, r3
 800c1ce:	d2fb      	bcs.n	800c1c8 <__hexnan+0xb4>
 800c1d0:	6833      	ldr	r3, [r6, #0]
 800c1d2:	b91b      	cbnz	r3, 800c1dc <__hexnan+0xc8>
 800c1d4:	4546      	cmp	r6, r8
 800c1d6:	d127      	bne.n	800c228 <__hexnan+0x114>
 800c1d8:	2301      	movs	r3, #1
 800c1da:	6033      	str	r3, [r6, #0]
 800c1dc:	2005      	movs	r0, #5
 800c1de:	e026      	b.n	800c22e <__hexnan+0x11a>
 800c1e0:	3501      	adds	r5, #1
 800c1e2:	2d08      	cmp	r5, #8
 800c1e4:	f10b 0b01 	add.w	fp, fp, #1
 800c1e8:	dd06      	ble.n	800c1f8 <__hexnan+0xe4>
 800c1ea:	4544      	cmp	r4, r8
 800c1ec:	d9cf      	bls.n	800c18e <__hexnan+0x7a>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1f4:	2501      	movs	r5, #1
 800c1f6:	3c04      	subs	r4, #4
 800c1f8:	6822      	ldr	r2, [r4, #0]
 800c1fa:	f000 000f 	and.w	r0, r0, #15
 800c1fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c202:	6020      	str	r0, [r4, #0]
 800c204:	e7c3      	b.n	800c18e <__hexnan+0x7a>
 800c206:	2508      	movs	r5, #8
 800c208:	e7c1      	b.n	800c18e <__hexnan+0x7a>
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d0df      	beq.n	800c1d0 <__hexnan+0xbc>
 800c210:	f04f 32ff 	mov.w	r2, #4294967295
 800c214:	f1c3 0320 	rsb	r3, r3, #32
 800c218:	fa22 f303 	lsr.w	r3, r2, r3
 800c21c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c220:	401a      	ands	r2, r3
 800c222:	f847 2c04 	str.w	r2, [r7, #-4]
 800c226:	e7d3      	b.n	800c1d0 <__hexnan+0xbc>
 800c228:	3e04      	subs	r6, #4
 800c22a:	e7d1      	b.n	800c1d0 <__hexnan+0xbc>
 800c22c:	2004      	movs	r0, #4
 800c22e:	b007      	add	sp, #28
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c234 <__locale_ctype_ptr_l>:
 800c234:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c238:	4770      	bx	lr

0800c23a <__localeconv_l>:
 800c23a:	30f0      	adds	r0, #240	; 0xf0
 800c23c:	4770      	bx	lr
	...

0800c240 <_localeconv_r>:
 800c240:	4b04      	ldr	r3, [pc, #16]	; (800c254 <_localeconv_r+0x14>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6a18      	ldr	r0, [r3, #32]
 800c246:	4b04      	ldr	r3, [pc, #16]	; (800c258 <_localeconv_r+0x18>)
 800c248:	2800      	cmp	r0, #0
 800c24a:	bf08      	it	eq
 800c24c:	4618      	moveq	r0, r3
 800c24e:	30f0      	adds	r0, #240	; 0xf0
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	20000024 	.word	0x20000024
 800c258:	20000088 	.word	0x20000088

0800c25c <malloc>:
 800c25c:	4b02      	ldr	r3, [pc, #8]	; (800c268 <malloc+0xc>)
 800c25e:	4601      	mov	r1, r0
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	f000 bc7b 	b.w	800cb5c <_malloc_r>
 800c266:	bf00      	nop
 800c268:	20000024 	.word	0x20000024

0800c26c <__ascii_mbtowc>:
 800c26c:	b082      	sub	sp, #8
 800c26e:	b901      	cbnz	r1, 800c272 <__ascii_mbtowc+0x6>
 800c270:	a901      	add	r1, sp, #4
 800c272:	b142      	cbz	r2, 800c286 <__ascii_mbtowc+0x1a>
 800c274:	b14b      	cbz	r3, 800c28a <__ascii_mbtowc+0x1e>
 800c276:	7813      	ldrb	r3, [r2, #0]
 800c278:	600b      	str	r3, [r1, #0]
 800c27a:	7812      	ldrb	r2, [r2, #0]
 800c27c:	1c10      	adds	r0, r2, #0
 800c27e:	bf18      	it	ne
 800c280:	2001      	movne	r0, #1
 800c282:	b002      	add	sp, #8
 800c284:	4770      	bx	lr
 800c286:	4610      	mov	r0, r2
 800c288:	e7fb      	b.n	800c282 <__ascii_mbtowc+0x16>
 800c28a:	f06f 0001 	mvn.w	r0, #1
 800c28e:	e7f8      	b.n	800c282 <__ascii_mbtowc+0x16>

0800c290 <memcpy>:
 800c290:	b510      	push	{r4, lr}
 800c292:	1e43      	subs	r3, r0, #1
 800c294:	440a      	add	r2, r1
 800c296:	4291      	cmp	r1, r2
 800c298:	d100      	bne.n	800c29c <memcpy+0xc>
 800c29a:	bd10      	pop	{r4, pc}
 800c29c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2a4:	e7f7      	b.n	800c296 <memcpy+0x6>

0800c2a6 <_Balloc>:
 800c2a6:	b570      	push	{r4, r5, r6, lr}
 800c2a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	460e      	mov	r6, r1
 800c2ae:	b93d      	cbnz	r5, 800c2c0 <_Balloc+0x1a>
 800c2b0:	2010      	movs	r0, #16
 800c2b2:	f7ff ffd3 	bl	800c25c <malloc>
 800c2b6:	6260      	str	r0, [r4, #36]	; 0x24
 800c2b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2bc:	6005      	str	r5, [r0, #0]
 800c2be:	60c5      	str	r5, [r0, #12]
 800c2c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c2c2:	68eb      	ldr	r3, [r5, #12]
 800c2c4:	b183      	cbz	r3, 800c2e8 <_Balloc+0x42>
 800c2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c2ce:	b9b8      	cbnz	r0, 800c300 <_Balloc+0x5a>
 800c2d0:	2101      	movs	r1, #1
 800c2d2:	fa01 f506 	lsl.w	r5, r1, r6
 800c2d6:	1d6a      	adds	r2, r5, #5
 800c2d8:	0092      	lsls	r2, r2, #2
 800c2da:	4620      	mov	r0, r4
 800c2dc:	f000 fbe2 	bl	800caa4 <_calloc_r>
 800c2e0:	b160      	cbz	r0, 800c2fc <_Balloc+0x56>
 800c2e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c2e6:	e00e      	b.n	800c306 <_Balloc+0x60>
 800c2e8:	2221      	movs	r2, #33	; 0x21
 800c2ea:	2104      	movs	r1, #4
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	f000 fbd9 	bl	800caa4 <_calloc_r>
 800c2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2f4:	60e8      	str	r0, [r5, #12]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1e4      	bne.n	800c2c6 <_Balloc+0x20>
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	bd70      	pop	{r4, r5, r6, pc}
 800c300:	6802      	ldr	r2, [r0, #0]
 800c302:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c306:	2300      	movs	r3, #0
 800c308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c30c:	e7f7      	b.n	800c2fe <_Balloc+0x58>

0800c30e <_Bfree>:
 800c30e:	b570      	push	{r4, r5, r6, lr}
 800c310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c312:	4606      	mov	r6, r0
 800c314:	460d      	mov	r5, r1
 800c316:	b93c      	cbnz	r4, 800c328 <_Bfree+0x1a>
 800c318:	2010      	movs	r0, #16
 800c31a:	f7ff ff9f 	bl	800c25c <malloc>
 800c31e:	6270      	str	r0, [r6, #36]	; 0x24
 800c320:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c324:	6004      	str	r4, [r0, #0]
 800c326:	60c4      	str	r4, [r0, #12]
 800c328:	b13d      	cbz	r5, 800c33a <_Bfree+0x2c>
 800c32a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c32c:	686a      	ldr	r2, [r5, #4]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c334:	6029      	str	r1, [r5, #0]
 800c336:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c33a:	bd70      	pop	{r4, r5, r6, pc}

0800c33c <__multadd>:
 800c33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c340:	690d      	ldr	r5, [r1, #16]
 800c342:	461f      	mov	r7, r3
 800c344:	4606      	mov	r6, r0
 800c346:	460c      	mov	r4, r1
 800c348:	f101 0c14 	add.w	ip, r1, #20
 800c34c:	2300      	movs	r3, #0
 800c34e:	f8dc 0000 	ldr.w	r0, [ip]
 800c352:	b281      	uxth	r1, r0
 800c354:	fb02 7101 	mla	r1, r2, r1, r7
 800c358:	0c0f      	lsrs	r7, r1, #16
 800c35a:	0c00      	lsrs	r0, r0, #16
 800c35c:	fb02 7000 	mla	r0, r2, r0, r7
 800c360:	b289      	uxth	r1, r1
 800c362:	3301      	adds	r3, #1
 800c364:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c368:	429d      	cmp	r5, r3
 800c36a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c36e:	f84c 1b04 	str.w	r1, [ip], #4
 800c372:	dcec      	bgt.n	800c34e <__multadd+0x12>
 800c374:	b1d7      	cbz	r7, 800c3ac <__multadd+0x70>
 800c376:	68a3      	ldr	r3, [r4, #8]
 800c378:	42ab      	cmp	r3, r5
 800c37a:	dc12      	bgt.n	800c3a2 <__multadd+0x66>
 800c37c:	6861      	ldr	r1, [r4, #4]
 800c37e:	4630      	mov	r0, r6
 800c380:	3101      	adds	r1, #1
 800c382:	f7ff ff90 	bl	800c2a6 <_Balloc>
 800c386:	6922      	ldr	r2, [r4, #16]
 800c388:	3202      	adds	r2, #2
 800c38a:	f104 010c 	add.w	r1, r4, #12
 800c38e:	4680      	mov	r8, r0
 800c390:	0092      	lsls	r2, r2, #2
 800c392:	300c      	adds	r0, #12
 800c394:	f7ff ff7c 	bl	800c290 <memcpy>
 800c398:	4621      	mov	r1, r4
 800c39a:	4630      	mov	r0, r6
 800c39c:	f7ff ffb7 	bl	800c30e <_Bfree>
 800c3a0:	4644      	mov	r4, r8
 800c3a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3a6:	3501      	adds	r5, #1
 800c3a8:	615f      	str	r7, [r3, #20]
 800c3aa:	6125      	str	r5, [r4, #16]
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c3b2 <__s2b>:
 800c3b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	4615      	mov	r5, r2
 800c3ba:	461f      	mov	r7, r3
 800c3bc:	2209      	movs	r2, #9
 800c3be:	3308      	adds	r3, #8
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	db20      	blt.n	800c410 <__s2b+0x5e>
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f7ff ff69 	bl	800c2a6 <_Balloc>
 800c3d4:	9b08      	ldr	r3, [sp, #32]
 800c3d6:	6143      	str	r3, [r0, #20]
 800c3d8:	2d09      	cmp	r5, #9
 800c3da:	f04f 0301 	mov.w	r3, #1
 800c3de:	6103      	str	r3, [r0, #16]
 800c3e0:	dd19      	ble.n	800c416 <__s2b+0x64>
 800c3e2:	f104 0809 	add.w	r8, r4, #9
 800c3e6:	46c1      	mov	r9, r8
 800c3e8:	442c      	add	r4, r5
 800c3ea:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	3b30      	subs	r3, #48	; 0x30
 800c3f2:	220a      	movs	r2, #10
 800c3f4:	4630      	mov	r0, r6
 800c3f6:	f7ff ffa1 	bl	800c33c <__multadd>
 800c3fa:	45a1      	cmp	r9, r4
 800c3fc:	d1f5      	bne.n	800c3ea <__s2b+0x38>
 800c3fe:	eb08 0405 	add.w	r4, r8, r5
 800c402:	3c08      	subs	r4, #8
 800c404:	1b2d      	subs	r5, r5, r4
 800c406:	1963      	adds	r3, r4, r5
 800c408:	42bb      	cmp	r3, r7
 800c40a:	db07      	blt.n	800c41c <__s2b+0x6a>
 800c40c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c410:	0052      	lsls	r2, r2, #1
 800c412:	3101      	adds	r1, #1
 800c414:	e7d9      	b.n	800c3ca <__s2b+0x18>
 800c416:	340a      	adds	r4, #10
 800c418:	2509      	movs	r5, #9
 800c41a:	e7f3      	b.n	800c404 <__s2b+0x52>
 800c41c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c420:	4601      	mov	r1, r0
 800c422:	3b30      	subs	r3, #48	; 0x30
 800c424:	220a      	movs	r2, #10
 800c426:	4630      	mov	r0, r6
 800c428:	f7ff ff88 	bl	800c33c <__multadd>
 800c42c:	e7eb      	b.n	800c406 <__s2b+0x54>

0800c42e <__hi0bits>:
 800c42e:	0c02      	lsrs	r2, r0, #16
 800c430:	0412      	lsls	r2, r2, #16
 800c432:	4603      	mov	r3, r0
 800c434:	b9b2      	cbnz	r2, 800c464 <__hi0bits+0x36>
 800c436:	0403      	lsls	r3, r0, #16
 800c438:	2010      	movs	r0, #16
 800c43a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c43e:	bf04      	itt	eq
 800c440:	021b      	lsleq	r3, r3, #8
 800c442:	3008      	addeq	r0, #8
 800c444:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c448:	bf04      	itt	eq
 800c44a:	011b      	lsleq	r3, r3, #4
 800c44c:	3004      	addeq	r0, #4
 800c44e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c452:	bf04      	itt	eq
 800c454:	009b      	lsleq	r3, r3, #2
 800c456:	3002      	addeq	r0, #2
 800c458:	2b00      	cmp	r3, #0
 800c45a:	db06      	blt.n	800c46a <__hi0bits+0x3c>
 800c45c:	005b      	lsls	r3, r3, #1
 800c45e:	d503      	bpl.n	800c468 <__hi0bits+0x3a>
 800c460:	3001      	adds	r0, #1
 800c462:	4770      	bx	lr
 800c464:	2000      	movs	r0, #0
 800c466:	e7e8      	b.n	800c43a <__hi0bits+0xc>
 800c468:	2020      	movs	r0, #32
 800c46a:	4770      	bx	lr

0800c46c <__lo0bits>:
 800c46c:	6803      	ldr	r3, [r0, #0]
 800c46e:	f013 0207 	ands.w	r2, r3, #7
 800c472:	4601      	mov	r1, r0
 800c474:	d00b      	beq.n	800c48e <__lo0bits+0x22>
 800c476:	07da      	lsls	r2, r3, #31
 800c478:	d423      	bmi.n	800c4c2 <__lo0bits+0x56>
 800c47a:	0798      	lsls	r0, r3, #30
 800c47c:	bf49      	itett	mi
 800c47e:	085b      	lsrmi	r3, r3, #1
 800c480:	089b      	lsrpl	r3, r3, #2
 800c482:	2001      	movmi	r0, #1
 800c484:	600b      	strmi	r3, [r1, #0]
 800c486:	bf5c      	itt	pl
 800c488:	600b      	strpl	r3, [r1, #0]
 800c48a:	2002      	movpl	r0, #2
 800c48c:	4770      	bx	lr
 800c48e:	b298      	uxth	r0, r3
 800c490:	b9a8      	cbnz	r0, 800c4be <__lo0bits+0x52>
 800c492:	0c1b      	lsrs	r3, r3, #16
 800c494:	2010      	movs	r0, #16
 800c496:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c49a:	bf04      	itt	eq
 800c49c:	0a1b      	lsreq	r3, r3, #8
 800c49e:	3008      	addeq	r0, #8
 800c4a0:	071a      	lsls	r2, r3, #28
 800c4a2:	bf04      	itt	eq
 800c4a4:	091b      	lsreq	r3, r3, #4
 800c4a6:	3004      	addeq	r0, #4
 800c4a8:	079a      	lsls	r2, r3, #30
 800c4aa:	bf04      	itt	eq
 800c4ac:	089b      	lsreq	r3, r3, #2
 800c4ae:	3002      	addeq	r0, #2
 800c4b0:	07da      	lsls	r2, r3, #31
 800c4b2:	d402      	bmi.n	800c4ba <__lo0bits+0x4e>
 800c4b4:	085b      	lsrs	r3, r3, #1
 800c4b6:	d006      	beq.n	800c4c6 <__lo0bits+0x5a>
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	600b      	str	r3, [r1, #0]
 800c4bc:	4770      	bx	lr
 800c4be:	4610      	mov	r0, r2
 800c4c0:	e7e9      	b.n	800c496 <__lo0bits+0x2a>
 800c4c2:	2000      	movs	r0, #0
 800c4c4:	4770      	bx	lr
 800c4c6:	2020      	movs	r0, #32
 800c4c8:	4770      	bx	lr

0800c4ca <__i2b>:
 800c4ca:	b510      	push	{r4, lr}
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	2101      	movs	r1, #1
 800c4d0:	f7ff fee9 	bl	800c2a6 <_Balloc>
 800c4d4:	2201      	movs	r2, #1
 800c4d6:	6144      	str	r4, [r0, #20]
 800c4d8:	6102      	str	r2, [r0, #16]
 800c4da:	bd10      	pop	{r4, pc}

0800c4dc <__multiply>:
 800c4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e0:	4614      	mov	r4, r2
 800c4e2:	690a      	ldr	r2, [r1, #16]
 800c4e4:	6923      	ldr	r3, [r4, #16]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	bfb8      	it	lt
 800c4ea:	460b      	movlt	r3, r1
 800c4ec:	4688      	mov	r8, r1
 800c4ee:	bfbc      	itt	lt
 800c4f0:	46a0      	movlt	r8, r4
 800c4f2:	461c      	movlt	r4, r3
 800c4f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c4fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c504:	eb07 0609 	add.w	r6, r7, r9
 800c508:	42b3      	cmp	r3, r6
 800c50a:	bfb8      	it	lt
 800c50c:	3101      	addlt	r1, #1
 800c50e:	f7ff feca 	bl	800c2a6 <_Balloc>
 800c512:	f100 0514 	add.w	r5, r0, #20
 800c516:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c51a:	462b      	mov	r3, r5
 800c51c:	2200      	movs	r2, #0
 800c51e:	4573      	cmp	r3, lr
 800c520:	d316      	bcc.n	800c550 <__multiply+0x74>
 800c522:	f104 0214 	add.w	r2, r4, #20
 800c526:	f108 0114 	add.w	r1, r8, #20
 800c52a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c52e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	9b00      	ldr	r3, [sp, #0]
 800c536:	9201      	str	r2, [sp, #4]
 800c538:	4293      	cmp	r3, r2
 800c53a:	d80c      	bhi.n	800c556 <__multiply+0x7a>
 800c53c:	2e00      	cmp	r6, #0
 800c53e:	dd03      	ble.n	800c548 <__multiply+0x6c>
 800c540:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c544:	2b00      	cmp	r3, #0
 800c546:	d05d      	beq.n	800c604 <__multiply+0x128>
 800c548:	6106      	str	r6, [r0, #16]
 800c54a:	b003      	add	sp, #12
 800c54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c550:	f843 2b04 	str.w	r2, [r3], #4
 800c554:	e7e3      	b.n	800c51e <__multiply+0x42>
 800c556:	f8b2 b000 	ldrh.w	fp, [r2]
 800c55a:	f1bb 0f00 	cmp.w	fp, #0
 800c55e:	d023      	beq.n	800c5a8 <__multiply+0xcc>
 800c560:	4689      	mov	r9, r1
 800c562:	46ac      	mov	ip, r5
 800c564:	f04f 0800 	mov.w	r8, #0
 800c568:	f859 4b04 	ldr.w	r4, [r9], #4
 800c56c:	f8dc a000 	ldr.w	sl, [ip]
 800c570:	b2a3      	uxth	r3, r4
 800c572:	fa1f fa8a 	uxth.w	sl, sl
 800c576:	fb0b a303 	mla	r3, fp, r3, sl
 800c57a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c57e:	f8dc 4000 	ldr.w	r4, [ip]
 800c582:	4443      	add	r3, r8
 800c584:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c588:	fb0b 840a 	mla	r4, fp, sl, r8
 800c58c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c590:	46e2      	mov	sl, ip
 800c592:	b29b      	uxth	r3, r3
 800c594:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c598:	454f      	cmp	r7, r9
 800c59a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c59e:	f84a 3b04 	str.w	r3, [sl], #4
 800c5a2:	d82b      	bhi.n	800c5fc <__multiply+0x120>
 800c5a4:	f8cc 8004 	str.w	r8, [ip, #4]
 800c5a8:	9b01      	ldr	r3, [sp, #4]
 800c5aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c5ae:	3204      	adds	r2, #4
 800c5b0:	f1ba 0f00 	cmp.w	sl, #0
 800c5b4:	d020      	beq.n	800c5f8 <__multiply+0x11c>
 800c5b6:	682b      	ldr	r3, [r5, #0]
 800c5b8:	4689      	mov	r9, r1
 800c5ba:	46a8      	mov	r8, r5
 800c5bc:	f04f 0b00 	mov.w	fp, #0
 800c5c0:	f8b9 c000 	ldrh.w	ip, [r9]
 800c5c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c5c8:	fb0a 440c 	mla	r4, sl, ip, r4
 800c5cc:	445c      	add	r4, fp
 800c5ce:	46c4      	mov	ip, r8
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c5d6:	f84c 3b04 	str.w	r3, [ip], #4
 800c5da:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c5e2:	0c1b      	lsrs	r3, r3, #16
 800c5e4:	fb0a b303 	mla	r3, sl, r3, fp
 800c5e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c5ec:	454f      	cmp	r7, r9
 800c5ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c5f2:	d805      	bhi.n	800c600 <__multiply+0x124>
 800c5f4:	f8c8 3004 	str.w	r3, [r8, #4]
 800c5f8:	3504      	adds	r5, #4
 800c5fa:	e79b      	b.n	800c534 <__multiply+0x58>
 800c5fc:	46d4      	mov	ip, sl
 800c5fe:	e7b3      	b.n	800c568 <__multiply+0x8c>
 800c600:	46e0      	mov	r8, ip
 800c602:	e7dd      	b.n	800c5c0 <__multiply+0xe4>
 800c604:	3e01      	subs	r6, #1
 800c606:	e799      	b.n	800c53c <__multiply+0x60>

0800c608 <__pow5mult>:
 800c608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c60c:	4615      	mov	r5, r2
 800c60e:	f012 0203 	ands.w	r2, r2, #3
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	d007      	beq.n	800c628 <__pow5mult+0x20>
 800c618:	3a01      	subs	r2, #1
 800c61a:	4c21      	ldr	r4, [pc, #132]	; (800c6a0 <__pow5mult+0x98>)
 800c61c:	2300      	movs	r3, #0
 800c61e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c622:	f7ff fe8b 	bl	800c33c <__multadd>
 800c626:	4607      	mov	r7, r0
 800c628:	10ad      	asrs	r5, r5, #2
 800c62a:	d035      	beq.n	800c698 <__pow5mult+0x90>
 800c62c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c62e:	b93c      	cbnz	r4, 800c640 <__pow5mult+0x38>
 800c630:	2010      	movs	r0, #16
 800c632:	f7ff fe13 	bl	800c25c <malloc>
 800c636:	6270      	str	r0, [r6, #36]	; 0x24
 800c638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c63c:	6004      	str	r4, [r0, #0]
 800c63e:	60c4      	str	r4, [r0, #12]
 800c640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c648:	b94c      	cbnz	r4, 800c65e <__pow5mult+0x56>
 800c64a:	f240 2171 	movw	r1, #625	; 0x271
 800c64e:	4630      	mov	r0, r6
 800c650:	f7ff ff3b 	bl	800c4ca <__i2b>
 800c654:	2300      	movs	r3, #0
 800c656:	f8c8 0008 	str.w	r0, [r8, #8]
 800c65a:	4604      	mov	r4, r0
 800c65c:	6003      	str	r3, [r0, #0]
 800c65e:	f04f 0800 	mov.w	r8, #0
 800c662:	07eb      	lsls	r3, r5, #31
 800c664:	d50a      	bpl.n	800c67c <__pow5mult+0x74>
 800c666:	4639      	mov	r1, r7
 800c668:	4622      	mov	r2, r4
 800c66a:	4630      	mov	r0, r6
 800c66c:	f7ff ff36 	bl	800c4dc <__multiply>
 800c670:	4639      	mov	r1, r7
 800c672:	4681      	mov	r9, r0
 800c674:	4630      	mov	r0, r6
 800c676:	f7ff fe4a 	bl	800c30e <_Bfree>
 800c67a:	464f      	mov	r7, r9
 800c67c:	106d      	asrs	r5, r5, #1
 800c67e:	d00b      	beq.n	800c698 <__pow5mult+0x90>
 800c680:	6820      	ldr	r0, [r4, #0]
 800c682:	b938      	cbnz	r0, 800c694 <__pow5mult+0x8c>
 800c684:	4622      	mov	r2, r4
 800c686:	4621      	mov	r1, r4
 800c688:	4630      	mov	r0, r6
 800c68a:	f7ff ff27 	bl	800c4dc <__multiply>
 800c68e:	6020      	str	r0, [r4, #0]
 800c690:	f8c0 8000 	str.w	r8, [r0]
 800c694:	4604      	mov	r4, r0
 800c696:	e7e4      	b.n	800c662 <__pow5mult+0x5a>
 800c698:	4638      	mov	r0, r7
 800c69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c69e:	bf00      	nop
 800c6a0:	0800d218 	.word	0x0800d218

0800c6a4 <__lshift>:
 800c6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a8:	460c      	mov	r4, r1
 800c6aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6ae:	6923      	ldr	r3, [r4, #16]
 800c6b0:	6849      	ldr	r1, [r1, #4]
 800c6b2:	eb0a 0903 	add.w	r9, sl, r3
 800c6b6:	68a3      	ldr	r3, [r4, #8]
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	4616      	mov	r6, r2
 800c6bc:	f109 0501 	add.w	r5, r9, #1
 800c6c0:	42ab      	cmp	r3, r5
 800c6c2:	db32      	blt.n	800c72a <__lshift+0x86>
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	f7ff fdee 	bl	800c2a6 <_Balloc>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	4680      	mov	r8, r0
 800c6ce:	f100 0114 	add.w	r1, r0, #20
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	4553      	cmp	r3, sl
 800c6d6:	db2b      	blt.n	800c730 <__lshift+0x8c>
 800c6d8:	6920      	ldr	r0, [r4, #16]
 800c6da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6de:	f104 0314 	add.w	r3, r4, #20
 800c6e2:	f016 021f 	ands.w	r2, r6, #31
 800c6e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6ee:	d025      	beq.n	800c73c <__lshift+0x98>
 800c6f0:	f1c2 0e20 	rsb	lr, r2, #32
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	681e      	ldr	r6, [r3, #0]
 800c6f8:	468a      	mov	sl, r1
 800c6fa:	4096      	lsls	r6, r2
 800c6fc:	4330      	orrs	r0, r6
 800c6fe:	f84a 0b04 	str.w	r0, [sl], #4
 800c702:	f853 0b04 	ldr.w	r0, [r3], #4
 800c706:	459c      	cmp	ip, r3
 800c708:	fa20 f00e 	lsr.w	r0, r0, lr
 800c70c:	d814      	bhi.n	800c738 <__lshift+0x94>
 800c70e:	6048      	str	r0, [r1, #4]
 800c710:	b108      	cbz	r0, 800c716 <__lshift+0x72>
 800c712:	f109 0502 	add.w	r5, r9, #2
 800c716:	3d01      	subs	r5, #1
 800c718:	4638      	mov	r0, r7
 800c71a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c71e:	4621      	mov	r1, r4
 800c720:	f7ff fdf5 	bl	800c30e <_Bfree>
 800c724:	4640      	mov	r0, r8
 800c726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c72a:	3101      	adds	r1, #1
 800c72c:	005b      	lsls	r3, r3, #1
 800c72e:	e7c7      	b.n	800c6c0 <__lshift+0x1c>
 800c730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c734:	3301      	adds	r3, #1
 800c736:	e7cd      	b.n	800c6d4 <__lshift+0x30>
 800c738:	4651      	mov	r1, sl
 800c73a:	e7dc      	b.n	800c6f6 <__lshift+0x52>
 800c73c:	3904      	subs	r1, #4
 800c73e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c742:	f841 2f04 	str.w	r2, [r1, #4]!
 800c746:	459c      	cmp	ip, r3
 800c748:	d8f9      	bhi.n	800c73e <__lshift+0x9a>
 800c74a:	e7e4      	b.n	800c716 <__lshift+0x72>

0800c74c <__mcmp>:
 800c74c:	6903      	ldr	r3, [r0, #16]
 800c74e:	690a      	ldr	r2, [r1, #16]
 800c750:	1a9b      	subs	r3, r3, r2
 800c752:	b530      	push	{r4, r5, lr}
 800c754:	d10c      	bne.n	800c770 <__mcmp+0x24>
 800c756:	0092      	lsls	r2, r2, #2
 800c758:	3014      	adds	r0, #20
 800c75a:	3114      	adds	r1, #20
 800c75c:	1884      	adds	r4, r0, r2
 800c75e:	4411      	add	r1, r2
 800c760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c768:	4295      	cmp	r5, r2
 800c76a:	d003      	beq.n	800c774 <__mcmp+0x28>
 800c76c:	d305      	bcc.n	800c77a <__mcmp+0x2e>
 800c76e:	2301      	movs	r3, #1
 800c770:	4618      	mov	r0, r3
 800c772:	bd30      	pop	{r4, r5, pc}
 800c774:	42a0      	cmp	r0, r4
 800c776:	d3f3      	bcc.n	800c760 <__mcmp+0x14>
 800c778:	e7fa      	b.n	800c770 <__mcmp+0x24>
 800c77a:	f04f 33ff 	mov.w	r3, #4294967295
 800c77e:	e7f7      	b.n	800c770 <__mcmp+0x24>

0800c780 <__mdiff>:
 800c780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c784:	460d      	mov	r5, r1
 800c786:	4607      	mov	r7, r0
 800c788:	4611      	mov	r1, r2
 800c78a:	4628      	mov	r0, r5
 800c78c:	4614      	mov	r4, r2
 800c78e:	f7ff ffdd 	bl	800c74c <__mcmp>
 800c792:	1e06      	subs	r6, r0, #0
 800c794:	d108      	bne.n	800c7a8 <__mdiff+0x28>
 800c796:	4631      	mov	r1, r6
 800c798:	4638      	mov	r0, r7
 800c79a:	f7ff fd84 	bl	800c2a6 <_Balloc>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a8:	bfa4      	itt	ge
 800c7aa:	4623      	movge	r3, r4
 800c7ac:	462c      	movge	r4, r5
 800c7ae:	4638      	mov	r0, r7
 800c7b0:	6861      	ldr	r1, [r4, #4]
 800c7b2:	bfa6      	itte	ge
 800c7b4:	461d      	movge	r5, r3
 800c7b6:	2600      	movge	r6, #0
 800c7b8:	2601      	movlt	r6, #1
 800c7ba:	f7ff fd74 	bl	800c2a6 <_Balloc>
 800c7be:	692b      	ldr	r3, [r5, #16]
 800c7c0:	60c6      	str	r6, [r0, #12]
 800c7c2:	6926      	ldr	r6, [r4, #16]
 800c7c4:	f105 0914 	add.w	r9, r5, #20
 800c7c8:	f104 0214 	add.w	r2, r4, #20
 800c7cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c7d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c7d4:	f100 0514 	add.w	r5, r0, #20
 800c7d8:	f04f 0e00 	mov.w	lr, #0
 800c7dc:	f852 ab04 	ldr.w	sl, [r2], #4
 800c7e0:	f859 4b04 	ldr.w	r4, [r9], #4
 800c7e4:	fa1e f18a 	uxtah	r1, lr, sl
 800c7e8:	b2a3      	uxth	r3, r4
 800c7ea:	1ac9      	subs	r1, r1, r3
 800c7ec:	0c23      	lsrs	r3, r4, #16
 800c7ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c7f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c7f6:	b289      	uxth	r1, r1
 800c7f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c7fc:	45c8      	cmp	r8, r9
 800c7fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c802:	4694      	mov	ip, r2
 800c804:	f845 3b04 	str.w	r3, [r5], #4
 800c808:	d8e8      	bhi.n	800c7dc <__mdiff+0x5c>
 800c80a:	45bc      	cmp	ip, r7
 800c80c:	d304      	bcc.n	800c818 <__mdiff+0x98>
 800c80e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c812:	b183      	cbz	r3, 800c836 <__mdiff+0xb6>
 800c814:	6106      	str	r6, [r0, #16]
 800c816:	e7c5      	b.n	800c7a4 <__mdiff+0x24>
 800c818:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c81c:	fa1e f381 	uxtah	r3, lr, r1
 800c820:	141a      	asrs	r2, r3, #16
 800c822:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c826:	b29b      	uxth	r3, r3
 800c828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c82c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c830:	f845 3b04 	str.w	r3, [r5], #4
 800c834:	e7e9      	b.n	800c80a <__mdiff+0x8a>
 800c836:	3e01      	subs	r6, #1
 800c838:	e7e9      	b.n	800c80e <__mdiff+0x8e>
	...

0800c83c <__ulp>:
 800c83c:	4b12      	ldr	r3, [pc, #72]	; (800c888 <__ulp+0x4c>)
 800c83e:	ee10 2a90 	vmov	r2, s1
 800c842:	401a      	ands	r2, r3
 800c844:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	dd04      	ble.n	800c856 <__ulp+0x1a>
 800c84c:	2000      	movs	r0, #0
 800c84e:	4619      	mov	r1, r3
 800c850:	ec41 0b10 	vmov	d0, r0, r1
 800c854:	4770      	bx	lr
 800c856:	425b      	negs	r3, r3
 800c858:	151b      	asrs	r3, r3, #20
 800c85a:	2b13      	cmp	r3, #19
 800c85c:	f04f 0000 	mov.w	r0, #0
 800c860:	f04f 0100 	mov.w	r1, #0
 800c864:	dc04      	bgt.n	800c870 <__ulp+0x34>
 800c866:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c86a:	fa42 f103 	asr.w	r1, r2, r3
 800c86e:	e7ef      	b.n	800c850 <__ulp+0x14>
 800c870:	3b14      	subs	r3, #20
 800c872:	2b1e      	cmp	r3, #30
 800c874:	f04f 0201 	mov.w	r2, #1
 800c878:	bfda      	itte	le
 800c87a:	f1c3 031f 	rsble	r3, r3, #31
 800c87e:	fa02 f303 	lslle.w	r3, r2, r3
 800c882:	4613      	movgt	r3, r2
 800c884:	4618      	mov	r0, r3
 800c886:	e7e3      	b.n	800c850 <__ulp+0x14>
 800c888:	7ff00000 	.word	0x7ff00000

0800c88c <__b2d>:
 800c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88e:	6905      	ldr	r5, [r0, #16]
 800c890:	f100 0714 	add.w	r7, r0, #20
 800c894:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c898:	1f2e      	subs	r6, r5, #4
 800c89a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f7ff fdc5 	bl	800c42e <__hi0bits>
 800c8a4:	f1c0 0320 	rsb	r3, r0, #32
 800c8a8:	280a      	cmp	r0, #10
 800c8aa:	600b      	str	r3, [r1, #0]
 800c8ac:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c924 <__b2d+0x98>
 800c8b0:	dc14      	bgt.n	800c8dc <__b2d+0x50>
 800c8b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c8b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c8ba:	42b7      	cmp	r7, r6
 800c8bc:	ea41 030c 	orr.w	r3, r1, ip
 800c8c0:	bf34      	ite	cc
 800c8c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c8c6:	2100      	movcs	r1, #0
 800c8c8:	3015      	adds	r0, #21
 800c8ca:	fa04 f000 	lsl.w	r0, r4, r0
 800c8ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800c8d2:	ea40 0201 	orr.w	r2, r0, r1
 800c8d6:	ec43 2b10 	vmov	d0, r2, r3
 800c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8dc:	42b7      	cmp	r7, r6
 800c8de:	bf3a      	itte	cc
 800c8e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c8e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c8e8:	2100      	movcs	r1, #0
 800c8ea:	380b      	subs	r0, #11
 800c8ec:	d015      	beq.n	800c91a <__b2d+0x8e>
 800c8ee:	4084      	lsls	r4, r0
 800c8f0:	f1c0 0520 	rsb	r5, r0, #32
 800c8f4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c8f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c8fc:	42be      	cmp	r6, r7
 800c8fe:	fa21 fc05 	lsr.w	ip, r1, r5
 800c902:	ea44 030c 	orr.w	r3, r4, ip
 800c906:	bf8c      	ite	hi
 800c908:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c90c:	2400      	movls	r4, #0
 800c90e:	fa01 f000 	lsl.w	r0, r1, r0
 800c912:	40ec      	lsrs	r4, r5
 800c914:	ea40 0204 	orr.w	r2, r0, r4
 800c918:	e7dd      	b.n	800c8d6 <__b2d+0x4a>
 800c91a:	ea44 030c 	orr.w	r3, r4, ip
 800c91e:	460a      	mov	r2, r1
 800c920:	e7d9      	b.n	800c8d6 <__b2d+0x4a>
 800c922:	bf00      	nop
 800c924:	3ff00000 	.word	0x3ff00000

0800c928 <__d2b>:
 800c928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c92c:	460e      	mov	r6, r1
 800c92e:	2101      	movs	r1, #1
 800c930:	ec59 8b10 	vmov	r8, r9, d0
 800c934:	4615      	mov	r5, r2
 800c936:	f7ff fcb6 	bl	800c2a6 <_Balloc>
 800c93a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c93e:	4607      	mov	r7, r0
 800c940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c944:	bb34      	cbnz	r4, 800c994 <__d2b+0x6c>
 800c946:	9301      	str	r3, [sp, #4]
 800c948:	f1b8 0300 	subs.w	r3, r8, #0
 800c94c:	d027      	beq.n	800c99e <__d2b+0x76>
 800c94e:	a802      	add	r0, sp, #8
 800c950:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c954:	f7ff fd8a 	bl	800c46c <__lo0bits>
 800c958:	9900      	ldr	r1, [sp, #0]
 800c95a:	b1f0      	cbz	r0, 800c99a <__d2b+0x72>
 800c95c:	9a01      	ldr	r2, [sp, #4]
 800c95e:	f1c0 0320 	rsb	r3, r0, #32
 800c962:	fa02 f303 	lsl.w	r3, r2, r3
 800c966:	430b      	orrs	r3, r1
 800c968:	40c2      	lsrs	r2, r0
 800c96a:	617b      	str	r3, [r7, #20]
 800c96c:	9201      	str	r2, [sp, #4]
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	61bb      	str	r3, [r7, #24]
 800c972:	2b00      	cmp	r3, #0
 800c974:	bf14      	ite	ne
 800c976:	2102      	movne	r1, #2
 800c978:	2101      	moveq	r1, #1
 800c97a:	6139      	str	r1, [r7, #16]
 800c97c:	b1c4      	cbz	r4, 800c9b0 <__d2b+0x88>
 800c97e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c982:	4404      	add	r4, r0
 800c984:	6034      	str	r4, [r6, #0]
 800c986:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c98a:	6028      	str	r0, [r5, #0]
 800c98c:	4638      	mov	r0, r7
 800c98e:	b003      	add	sp, #12
 800c990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c998:	e7d5      	b.n	800c946 <__d2b+0x1e>
 800c99a:	6179      	str	r1, [r7, #20]
 800c99c:	e7e7      	b.n	800c96e <__d2b+0x46>
 800c99e:	a801      	add	r0, sp, #4
 800c9a0:	f7ff fd64 	bl	800c46c <__lo0bits>
 800c9a4:	9b01      	ldr	r3, [sp, #4]
 800c9a6:	617b      	str	r3, [r7, #20]
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	6139      	str	r1, [r7, #16]
 800c9ac:	3020      	adds	r0, #32
 800c9ae:	e7e5      	b.n	800c97c <__d2b+0x54>
 800c9b0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c9b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9b8:	6030      	str	r0, [r6, #0]
 800c9ba:	6918      	ldr	r0, [r3, #16]
 800c9bc:	f7ff fd37 	bl	800c42e <__hi0bits>
 800c9c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c9c4:	e7e1      	b.n	800c98a <__d2b+0x62>

0800c9c6 <__ratio>:
 800c9c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ca:	4688      	mov	r8, r1
 800c9cc:	4669      	mov	r1, sp
 800c9ce:	4681      	mov	r9, r0
 800c9d0:	f7ff ff5c 	bl	800c88c <__b2d>
 800c9d4:	a901      	add	r1, sp, #4
 800c9d6:	4640      	mov	r0, r8
 800c9d8:	ec57 6b10 	vmov	r6, r7, d0
 800c9dc:	ee10 4a10 	vmov	r4, s0
 800c9e0:	f7ff ff54 	bl	800c88c <__b2d>
 800c9e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9ec:	eba3 0c02 	sub.w	ip, r3, r2
 800c9f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c9f4:	1a9b      	subs	r3, r3, r2
 800c9f6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c9fa:	ec51 0b10 	vmov	r0, r1, d0
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	ee10 aa10 	vmov	sl, s0
 800ca04:	bfce      	itee	gt
 800ca06:	463a      	movgt	r2, r7
 800ca08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca0c:	460a      	movle	r2, r1
 800ca0e:	463d      	mov	r5, r7
 800ca10:	468b      	mov	fp, r1
 800ca12:	bfcc      	ite	gt
 800ca14:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ca18:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ca1c:	ec45 4b17 	vmov	d7, r4, r5
 800ca20:	ec4b ab16 	vmov	d6, sl, fp
 800ca24:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800ca28:	b003      	add	sp, #12
 800ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca2e <__copybits>:
 800ca2e:	3901      	subs	r1, #1
 800ca30:	b510      	push	{r4, lr}
 800ca32:	1149      	asrs	r1, r1, #5
 800ca34:	6914      	ldr	r4, [r2, #16]
 800ca36:	3101      	adds	r1, #1
 800ca38:	f102 0314 	add.w	r3, r2, #20
 800ca3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca44:	42a3      	cmp	r3, r4
 800ca46:	4602      	mov	r2, r0
 800ca48:	d303      	bcc.n	800ca52 <__copybits+0x24>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	428a      	cmp	r2, r1
 800ca4e:	d305      	bcc.n	800ca5c <__copybits+0x2e>
 800ca50:	bd10      	pop	{r4, pc}
 800ca52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca56:	f840 2b04 	str.w	r2, [r0], #4
 800ca5a:	e7f3      	b.n	800ca44 <__copybits+0x16>
 800ca5c:	f842 3b04 	str.w	r3, [r2], #4
 800ca60:	e7f4      	b.n	800ca4c <__copybits+0x1e>

0800ca62 <__any_on>:
 800ca62:	f100 0214 	add.w	r2, r0, #20
 800ca66:	6900      	ldr	r0, [r0, #16]
 800ca68:	114b      	asrs	r3, r1, #5
 800ca6a:	4298      	cmp	r0, r3
 800ca6c:	b510      	push	{r4, lr}
 800ca6e:	db11      	blt.n	800ca94 <__any_on+0x32>
 800ca70:	dd0a      	ble.n	800ca88 <__any_on+0x26>
 800ca72:	f011 011f 	ands.w	r1, r1, #31
 800ca76:	d007      	beq.n	800ca88 <__any_on+0x26>
 800ca78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca7c:	fa24 f001 	lsr.w	r0, r4, r1
 800ca80:	fa00 f101 	lsl.w	r1, r0, r1
 800ca84:	428c      	cmp	r4, r1
 800ca86:	d10b      	bne.n	800caa0 <__any_on+0x3e>
 800ca88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca8c:	4293      	cmp	r3, r2
 800ca8e:	d803      	bhi.n	800ca98 <__any_on+0x36>
 800ca90:	2000      	movs	r0, #0
 800ca92:	bd10      	pop	{r4, pc}
 800ca94:	4603      	mov	r3, r0
 800ca96:	e7f7      	b.n	800ca88 <__any_on+0x26>
 800ca98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca9c:	2900      	cmp	r1, #0
 800ca9e:	d0f5      	beq.n	800ca8c <__any_on+0x2a>
 800caa0:	2001      	movs	r0, #1
 800caa2:	e7f6      	b.n	800ca92 <__any_on+0x30>

0800caa4 <_calloc_r>:
 800caa4:	b538      	push	{r3, r4, r5, lr}
 800caa6:	fb02 f401 	mul.w	r4, r2, r1
 800caaa:	4621      	mov	r1, r4
 800caac:	f000 f856 	bl	800cb5c <_malloc_r>
 800cab0:	4605      	mov	r5, r0
 800cab2:	b118      	cbz	r0, 800cabc <_calloc_r+0x18>
 800cab4:	4622      	mov	r2, r4
 800cab6:	2100      	movs	r1, #0
 800cab8:	f7fc fdfc 	bl	80096b4 <memset>
 800cabc:	4628      	mov	r0, r5
 800cabe:	bd38      	pop	{r3, r4, r5, pc}

0800cac0 <_free_r>:
 800cac0:	b538      	push	{r3, r4, r5, lr}
 800cac2:	4605      	mov	r5, r0
 800cac4:	2900      	cmp	r1, #0
 800cac6:	d045      	beq.n	800cb54 <_free_r+0x94>
 800cac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cacc:	1f0c      	subs	r4, r1, #4
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bfb8      	it	lt
 800cad2:	18e4      	addlt	r4, r4, r3
 800cad4:	f000 fa36 	bl	800cf44 <__malloc_lock>
 800cad8:	4a1f      	ldr	r2, [pc, #124]	; (800cb58 <_free_r+0x98>)
 800cada:	6813      	ldr	r3, [r2, #0]
 800cadc:	4610      	mov	r0, r2
 800cade:	b933      	cbnz	r3, 800caee <_free_r+0x2e>
 800cae0:	6063      	str	r3, [r4, #4]
 800cae2:	6014      	str	r4, [r2, #0]
 800cae4:	4628      	mov	r0, r5
 800cae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caea:	f000 ba2c 	b.w	800cf46 <__malloc_unlock>
 800caee:	42a3      	cmp	r3, r4
 800caf0:	d90c      	bls.n	800cb0c <_free_r+0x4c>
 800caf2:	6821      	ldr	r1, [r4, #0]
 800caf4:	1862      	adds	r2, r4, r1
 800caf6:	4293      	cmp	r3, r2
 800caf8:	bf04      	itt	eq
 800cafa:	681a      	ldreq	r2, [r3, #0]
 800cafc:	685b      	ldreq	r3, [r3, #4]
 800cafe:	6063      	str	r3, [r4, #4]
 800cb00:	bf04      	itt	eq
 800cb02:	1852      	addeq	r2, r2, r1
 800cb04:	6022      	streq	r2, [r4, #0]
 800cb06:	6004      	str	r4, [r0, #0]
 800cb08:	e7ec      	b.n	800cae4 <_free_r+0x24>
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	685a      	ldr	r2, [r3, #4]
 800cb0e:	b10a      	cbz	r2, 800cb14 <_free_r+0x54>
 800cb10:	42a2      	cmp	r2, r4
 800cb12:	d9fa      	bls.n	800cb0a <_free_r+0x4a>
 800cb14:	6819      	ldr	r1, [r3, #0]
 800cb16:	1858      	adds	r0, r3, r1
 800cb18:	42a0      	cmp	r0, r4
 800cb1a:	d10b      	bne.n	800cb34 <_free_r+0x74>
 800cb1c:	6820      	ldr	r0, [r4, #0]
 800cb1e:	4401      	add	r1, r0
 800cb20:	1858      	adds	r0, r3, r1
 800cb22:	4282      	cmp	r2, r0
 800cb24:	6019      	str	r1, [r3, #0]
 800cb26:	d1dd      	bne.n	800cae4 <_free_r+0x24>
 800cb28:	6810      	ldr	r0, [r2, #0]
 800cb2a:	6852      	ldr	r2, [r2, #4]
 800cb2c:	605a      	str	r2, [r3, #4]
 800cb2e:	4401      	add	r1, r0
 800cb30:	6019      	str	r1, [r3, #0]
 800cb32:	e7d7      	b.n	800cae4 <_free_r+0x24>
 800cb34:	d902      	bls.n	800cb3c <_free_r+0x7c>
 800cb36:	230c      	movs	r3, #12
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	e7d3      	b.n	800cae4 <_free_r+0x24>
 800cb3c:	6820      	ldr	r0, [r4, #0]
 800cb3e:	1821      	adds	r1, r4, r0
 800cb40:	428a      	cmp	r2, r1
 800cb42:	bf04      	itt	eq
 800cb44:	6811      	ldreq	r1, [r2, #0]
 800cb46:	6852      	ldreq	r2, [r2, #4]
 800cb48:	6062      	str	r2, [r4, #4]
 800cb4a:	bf04      	itt	eq
 800cb4c:	1809      	addeq	r1, r1, r0
 800cb4e:	6021      	streq	r1, [r4, #0]
 800cb50:	605c      	str	r4, [r3, #4]
 800cb52:	e7c7      	b.n	800cae4 <_free_r+0x24>
 800cb54:	bd38      	pop	{r3, r4, r5, pc}
 800cb56:	bf00      	nop
 800cb58:	20000ab0 	.word	0x20000ab0

0800cb5c <_malloc_r>:
 800cb5c:	b570      	push	{r4, r5, r6, lr}
 800cb5e:	1ccd      	adds	r5, r1, #3
 800cb60:	f025 0503 	bic.w	r5, r5, #3
 800cb64:	3508      	adds	r5, #8
 800cb66:	2d0c      	cmp	r5, #12
 800cb68:	bf38      	it	cc
 800cb6a:	250c      	movcc	r5, #12
 800cb6c:	2d00      	cmp	r5, #0
 800cb6e:	4606      	mov	r6, r0
 800cb70:	db01      	blt.n	800cb76 <_malloc_r+0x1a>
 800cb72:	42a9      	cmp	r1, r5
 800cb74:	d903      	bls.n	800cb7e <_malloc_r+0x22>
 800cb76:	230c      	movs	r3, #12
 800cb78:	6033      	str	r3, [r6, #0]
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	bd70      	pop	{r4, r5, r6, pc}
 800cb7e:	f000 f9e1 	bl	800cf44 <__malloc_lock>
 800cb82:	4a21      	ldr	r2, [pc, #132]	; (800cc08 <_malloc_r+0xac>)
 800cb84:	6814      	ldr	r4, [r2, #0]
 800cb86:	4621      	mov	r1, r4
 800cb88:	b991      	cbnz	r1, 800cbb0 <_malloc_r+0x54>
 800cb8a:	4c20      	ldr	r4, [pc, #128]	; (800cc0c <_malloc_r+0xb0>)
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	b91b      	cbnz	r3, 800cb98 <_malloc_r+0x3c>
 800cb90:	4630      	mov	r0, r6
 800cb92:	f000 f98f 	bl	800ceb4 <_sbrk_r>
 800cb96:	6020      	str	r0, [r4, #0]
 800cb98:	4629      	mov	r1, r5
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f000 f98a 	bl	800ceb4 <_sbrk_r>
 800cba0:	1c43      	adds	r3, r0, #1
 800cba2:	d124      	bne.n	800cbee <_malloc_r+0x92>
 800cba4:	230c      	movs	r3, #12
 800cba6:	6033      	str	r3, [r6, #0]
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f000 f9cc 	bl	800cf46 <__malloc_unlock>
 800cbae:	e7e4      	b.n	800cb7a <_malloc_r+0x1e>
 800cbb0:	680b      	ldr	r3, [r1, #0]
 800cbb2:	1b5b      	subs	r3, r3, r5
 800cbb4:	d418      	bmi.n	800cbe8 <_malloc_r+0x8c>
 800cbb6:	2b0b      	cmp	r3, #11
 800cbb8:	d90f      	bls.n	800cbda <_malloc_r+0x7e>
 800cbba:	600b      	str	r3, [r1, #0]
 800cbbc:	50cd      	str	r5, [r1, r3]
 800cbbe:	18cc      	adds	r4, r1, r3
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	f000 f9c0 	bl	800cf46 <__malloc_unlock>
 800cbc6:	f104 000b 	add.w	r0, r4, #11
 800cbca:	1d23      	adds	r3, r4, #4
 800cbcc:	f020 0007 	bic.w	r0, r0, #7
 800cbd0:	1ac3      	subs	r3, r0, r3
 800cbd2:	d0d3      	beq.n	800cb7c <_malloc_r+0x20>
 800cbd4:	425a      	negs	r2, r3
 800cbd6:	50e2      	str	r2, [r4, r3]
 800cbd8:	e7d0      	b.n	800cb7c <_malloc_r+0x20>
 800cbda:	428c      	cmp	r4, r1
 800cbdc:	684b      	ldr	r3, [r1, #4]
 800cbde:	bf16      	itet	ne
 800cbe0:	6063      	strne	r3, [r4, #4]
 800cbe2:	6013      	streq	r3, [r2, #0]
 800cbe4:	460c      	movne	r4, r1
 800cbe6:	e7eb      	b.n	800cbc0 <_malloc_r+0x64>
 800cbe8:	460c      	mov	r4, r1
 800cbea:	6849      	ldr	r1, [r1, #4]
 800cbec:	e7cc      	b.n	800cb88 <_malloc_r+0x2c>
 800cbee:	1cc4      	adds	r4, r0, #3
 800cbf0:	f024 0403 	bic.w	r4, r4, #3
 800cbf4:	42a0      	cmp	r0, r4
 800cbf6:	d005      	beq.n	800cc04 <_malloc_r+0xa8>
 800cbf8:	1a21      	subs	r1, r4, r0
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f000 f95a 	bl	800ceb4 <_sbrk_r>
 800cc00:	3001      	adds	r0, #1
 800cc02:	d0cf      	beq.n	800cba4 <_malloc_r+0x48>
 800cc04:	6025      	str	r5, [r4, #0]
 800cc06:	e7db      	b.n	800cbc0 <_malloc_r+0x64>
 800cc08:	20000ab0 	.word	0x20000ab0
 800cc0c:	20000ab4 	.word	0x20000ab4

0800cc10 <__ssputs_r>:
 800cc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc14:	688e      	ldr	r6, [r1, #8]
 800cc16:	429e      	cmp	r6, r3
 800cc18:	4682      	mov	sl, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	4690      	mov	r8, r2
 800cc1e:	4699      	mov	r9, r3
 800cc20:	d837      	bhi.n	800cc92 <__ssputs_r+0x82>
 800cc22:	898a      	ldrh	r2, [r1, #12]
 800cc24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc28:	d031      	beq.n	800cc8e <__ssputs_r+0x7e>
 800cc2a:	6825      	ldr	r5, [r4, #0]
 800cc2c:	6909      	ldr	r1, [r1, #16]
 800cc2e:	1a6f      	subs	r7, r5, r1
 800cc30:	6965      	ldr	r5, [r4, #20]
 800cc32:	2302      	movs	r3, #2
 800cc34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc38:	fb95 f5f3 	sdiv	r5, r5, r3
 800cc3c:	f109 0301 	add.w	r3, r9, #1
 800cc40:	443b      	add	r3, r7
 800cc42:	429d      	cmp	r5, r3
 800cc44:	bf38      	it	cc
 800cc46:	461d      	movcc	r5, r3
 800cc48:	0553      	lsls	r3, r2, #21
 800cc4a:	d530      	bpl.n	800ccae <__ssputs_r+0x9e>
 800cc4c:	4629      	mov	r1, r5
 800cc4e:	f7ff ff85 	bl	800cb5c <_malloc_r>
 800cc52:	4606      	mov	r6, r0
 800cc54:	b950      	cbnz	r0, 800cc6c <__ssputs_r+0x5c>
 800cc56:	230c      	movs	r3, #12
 800cc58:	f8ca 3000 	str.w	r3, [sl]
 800cc5c:	89a3      	ldrh	r3, [r4, #12]
 800cc5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc62:	81a3      	strh	r3, [r4, #12]
 800cc64:	f04f 30ff 	mov.w	r0, #4294967295
 800cc68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc6c:	463a      	mov	r2, r7
 800cc6e:	6921      	ldr	r1, [r4, #16]
 800cc70:	f7ff fb0e 	bl	800c290 <memcpy>
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	6126      	str	r6, [r4, #16]
 800cc82:	6165      	str	r5, [r4, #20]
 800cc84:	443e      	add	r6, r7
 800cc86:	1bed      	subs	r5, r5, r7
 800cc88:	6026      	str	r6, [r4, #0]
 800cc8a:	60a5      	str	r5, [r4, #8]
 800cc8c:	464e      	mov	r6, r9
 800cc8e:	454e      	cmp	r6, r9
 800cc90:	d900      	bls.n	800cc94 <__ssputs_r+0x84>
 800cc92:	464e      	mov	r6, r9
 800cc94:	4632      	mov	r2, r6
 800cc96:	4641      	mov	r1, r8
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	f000 f93a 	bl	800cf12 <memmove>
 800cc9e:	68a3      	ldr	r3, [r4, #8]
 800cca0:	1b9b      	subs	r3, r3, r6
 800cca2:	60a3      	str	r3, [r4, #8]
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	441e      	add	r6, r3
 800cca8:	6026      	str	r6, [r4, #0]
 800ccaa:	2000      	movs	r0, #0
 800ccac:	e7dc      	b.n	800cc68 <__ssputs_r+0x58>
 800ccae:	462a      	mov	r2, r5
 800ccb0:	f000 f94a 	bl	800cf48 <_realloc_r>
 800ccb4:	4606      	mov	r6, r0
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	d1e2      	bne.n	800cc80 <__ssputs_r+0x70>
 800ccba:	6921      	ldr	r1, [r4, #16]
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	f7ff feff 	bl	800cac0 <_free_r>
 800ccc2:	e7c8      	b.n	800cc56 <__ssputs_r+0x46>

0800ccc4 <_svfiprintf_r>:
 800ccc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc8:	461d      	mov	r5, r3
 800ccca:	898b      	ldrh	r3, [r1, #12]
 800cccc:	061f      	lsls	r7, r3, #24
 800ccce:	b09d      	sub	sp, #116	; 0x74
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	4616      	mov	r6, r2
 800ccd6:	d50f      	bpl.n	800ccf8 <_svfiprintf_r+0x34>
 800ccd8:	690b      	ldr	r3, [r1, #16]
 800ccda:	b96b      	cbnz	r3, 800ccf8 <_svfiprintf_r+0x34>
 800ccdc:	2140      	movs	r1, #64	; 0x40
 800ccde:	f7ff ff3d 	bl	800cb5c <_malloc_r>
 800cce2:	6020      	str	r0, [r4, #0]
 800cce4:	6120      	str	r0, [r4, #16]
 800cce6:	b928      	cbnz	r0, 800ccf4 <_svfiprintf_r+0x30>
 800cce8:	230c      	movs	r3, #12
 800ccea:	f8c8 3000 	str.w	r3, [r8]
 800ccee:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf2:	e0c8      	b.n	800ce86 <_svfiprintf_r+0x1c2>
 800ccf4:	2340      	movs	r3, #64	; 0x40
 800ccf6:	6163      	str	r3, [r4, #20]
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	9309      	str	r3, [sp, #36]	; 0x24
 800ccfc:	2320      	movs	r3, #32
 800ccfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd02:	2330      	movs	r3, #48	; 0x30
 800cd04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd08:	9503      	str	r5, [sp, #12]
 800cd0a:	f04f 0b01 	mov.w	fp, #1
 800cd0e:	4637      	mov	r7, r6
 800cd10:	463d      	mov	r5, r7
 800cd12:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd16:	b10b      	cbz	r3, 800cd1c <_svfiprintf_r+0x58>
 800cd18:	2b25      	cmp	r3, #37	; 0x25
 800cd1a:	d13e      	bne.n	800cd9a <_svfiprintf_r+0xd6>
 800cd1c:	ebb7 0a06 	subs.w	sl, r7, r6
 800cd20:	d00b      	beq.n	800cd3a <_svfiprintf_r+0x76>
 800cd22:	4653      	mov	r3, sl
 800cd24:	4632      	mov	r2, r6
 800cd26:	4621      	mov	r1, r4
 800cd28:	4640      	mov	r0, r8
 800cd2a:	f7ff ff71 	bl	800cc10 <__ssputs_r>
 800cd2e:	3001      	adds	r0, #1
 800cd30:	f000 80a4 	beq.w	800ce7c <_svfiprintf_r+0x1b8>
 800cd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd36:	4453      	add	r3, sl
 800cd38:	9309      	str	r3, [sp, #36]	; 0x24
 800cd3a:	783b      	ldrb	r3, [r7, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 809d 	beq.w	800ce7c <_svfiprintf_r+0x1b8>
 800cd42:	2300      	movs	r3, #0
 800cd44:	f04f 32ff 	mov.w	r2, #4294967295
 800cd48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd4c:	9304      	str	r3, [sp, #16]
 800cd4e:	9307      	str	r3, [sp, #28]
 800cd50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd54:	931a      	str	r3, [sp, #104]	; 0x68
 800cd56:	462f      	mov	r7, r5
 800cd58:	2205      	movs	r2, #5
 800cd5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cd5e:	4850      	ldr	r0, [pc, #320]	; (800cea0 <_svfiprintf_r+0x1dc>)
 800cd60:	f7f3 fa76 	bl	8000250 <memchr>
 800cd64:	9b04      	ldr	r3, [sp, #16]
 800cd66:	b9d0      	cbnz	r0, 800cd9e <_svfiprintf_r+0xda>
 800cd68:	06d9      	lsls	r1, r3, #27
 800cd6a:	bf44      	itt	mi
 800cd6c:	2220      	movmi	r2, #32
 800cd6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd72:	071a      	lsls	r2, r3, #28
 800cd74:	bf44      	itt	mi
 800cd76:	222b      	movmi	r2, #43	; 0x2b
 800cd78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cd7c:	782a      	ldrb	r2, [r5, #0]
 800cd7e:	2a2a      	cmp	r2, #42	; 0x2a
 800cd80:	d015      	beq.n	800cdae <_svfiprintf_r+0xea>
 800cd82:	9a07      	ldr	r2, [sp, #28]
 800cd84:	462f      	mov	r7, r5
 800cd86:	2000      	movs	r0, #0
 800cd88:	250a      	movs	r5, #10
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd90:	3b30      	subs	r3, #48	; 0x30
 800cd92:	2b09      	cmp	r3, #9
 800cd94:	d94d      	bls.n	800ce32 <_svfiprintf_r+0x16e>
 800cd96:	b1b8      	cbz	r0, 800cdc8 <_svfiprintf_r+0x104>
 800cd98:	e00f      	b.n	800cdba <_svfiprintf_r+0xf6>
 800cd9a:	462f      	mov	r7, r5
 800cd9c:	e7b8      	b.n	800cd10 <_svfiprintf_r+0x4c>
 800cd9e:	4a40      	ldr	r2, [pc, #256]	; (800cea0 <_svfiprintf_r+0x1dc>)
 800cda0:	1a80      	subs	r0, r0, r2
 800cda2:	fa0b f000 	lsl.w	r0, fp, r0
 800cda6:	4318      	orrs	r0, r3
 800cda8:	9004      	str	r0, [sp, #16]
 800cdaa:	463d      	mov	r5, r7
 800cdac:	e7d3      	b.n	800cd56 <_svfiprintf_r+0x92>
 800cdae:	9a03      	ldr	r2, [sp, #12]
 800cdb0:	1d11      	adds	r1, r2, #4
 800cdb2:	6812      	ldr	r2, [r2, #0]
 800cdb4:	9103      	str	r1, [sp, #12]
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	db01      	blt.n	800cdbe <_svfiprintf_r+0xfa>
 800cdba:	9207      	str	r2, [sp, #28]
 800cdbc:	e004      	b.n	800cdc8 <_svfiprintf_r+0x104>
 800cdbe:	4252      	negs	r2, r2
 800cdc0:	f043 0302 	orr.w	r3, r3, #2
 800cdc4:	9207      	str	r2, [sp, #28]
 800cdc6:	9304      	str	r3, [sp, #16]
 800cdc8:	783b      	ldrb	r3, [r7, #0]
 800cdca:	2b2e      	cmp	r3, #46	; 0x2e
 800cdcc:	d10c      	bne.n	800cde8 <_svfiprintf_r+0x124>
 800cdce:	787b      	ldrb	r3, [r7, #1]
 800cdd0:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd2:	d133      	bne.n	800ce3c <_svfiprintf_r+0x178>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	1d1a      	adds	r2, r3, #4
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	9203      	str	r2, [sp, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	bfb8      	it	lt
 800cde0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cde4:	3702      	adds	r7, #2
 800cde6:	9305      	str	r3, [sp, #20]
 800cde8:	4d2e      	ldr	r5, [pc, #184]	; (800cea4 <_svfiprintf_r+0x1e0>)
 800cdea:	7839      	ldrb	r1, [r7, #0]
 800cdec:	2203      	movs	r2, #3
 800cdee:	4628      	mov	r0, r5
 800cdf0:	f7f3 fa2e 	bl	8000250 <memchr>
 800cdf4:	b138      	cbz	r0, 800ce06 <_svfiprintf_r+0x142>
 800cdf6:	2340      	movs	r3, #64	; 0x40
 800cdf8:	1b40      	subs	r0, r0, r5
 800cdfa:	fa03 f000 	lsl.w	r0, r3, r0
 800cdfe:	9b04      	ldr	r3, [sp, #16]
 800ce00:	4303      	orrs	r3, r0
 800ce02:	3701      	adds	r7, #1
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	7839      	ldrb	r1, [r7, #0]
 800ce08:	4827      	ldr	r0, [pc, #156]	; (800cea8 <_svfiprintf_r+0x1e4>)
 800ce0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce0e:	2206      	movs	r2, #6
 800ce10:	1c7e      	adds	r6, r7, #1
 800ce12:	f7f3 fa1d 	bl	8000250 <memchr>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d038      	beq.n	800ce8c <_svfiprintf_r+0x1c8>
 800ce1a:	4b24      	ldr	r3, [pc, #144]	; (800ceac <_svfiprintf_r+0x1e8>)
 800ce1c:	bb13      	cbnz	r3, 800ce64 <_svfiprintf_r+0x1a0>
 800ce1e:	9b03      	ldr	r3, [sp, #12]
 800ce20:	3307      	adds	r3, #7
 800ce22:	f023 0307 	bic.w	r3, r3, #7
 800ce26:	3308      	adds	r3, #8
 800ce28:	9303      	str	r3, [sp, #12]
 800ce2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce2c:	444b      	add	r3, r9
 800ce2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce30:	e76d      	b.n	800cd0e <_svfiprintf_r+0x4a>
 800ce32:	fb05 3202 	mla	r2, r5, r2, r3
 800ce36:	2001      	movs	r0, #1
 800ce38:	460f      	mov	r7, r1
 800ce3a:	e7a6      	b.n	800cd8a <_svfiprintf_r+0xc6>
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	3701      	adds	r7, #1
 800ce40:	9305      	str	r3, [sp, #20]
 800ce42:	4619      	mov	r1, r3
 800ce44:	250a      	movs	r5, #10
 800ce46:	4638      	mov	r0, r7
 800ce48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce4c:	3a30      	subs	r2, #48	; 0x30
 800ce4e:	2a09      	cmp	r2, #9
 800ce50:	d903      	bls.n	800ce5a <_svfiprintf_r+0x196>
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d0c8      	beq.n	800cde8 <_svfiprintf_r+0x124>
 800ce56:	9105      	str	r1, [sp, #20]
 800ce58:	e7c6      	b.n	800cde8 <_svfiprintf_r+0x124>
 800ce5a:	fb05 2101 	mla	r1, r5, r1, r2
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4607      	mov	r7, r0
 800ce62:	e7f0      	b.n	800ce46 <_svfiprintf_r+0x182>
 800ce64:	ab03      	add	r3, sp, #12
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	4622      	mov	r2, r4
 800ce6a:	4b11      	ldr	r3, [pc, #68]	; (800ceb0 <_svfiprintf_r+0x1ec>)
 800ce6c:	a904      	add	r1, sp, #16
 800ce6e:	4640      	mov	r0, r8
 800ce70:	f7fc fcae 	bl	80097d0 <_printf_float>
 800ce74:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce78:	4681      	mov	r9, r0
 800ce7a:	d1d6      	bne.n	800ce2a <_svfiprintf_r+0x166>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	065b      	lsls	r3, r3, #25
 800ce80:	f53f af35 	bmi.w	800ccee <_svfiprintf_r+0x2a>
 800ce84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce86:	b01d      	add	sp, #116	; 0x74
 800ce88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce8c:	ab03      	add	r3, sp, #12
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4622      	mov	r2, r4
 800ce92:	4b07      	ldr	r3, [pc, #28]	; (800ceb0 <_svfiprintf_r+0x1ec>)
 800ce94:	a904      	add	r1, sp, #16
 800ce96:	4640      	mov	r0, r8
 800ce98:	f7fc ff3c 	bl	8009d14 <_printf_i>
 800ce9c:	e7ea      	b.n	800ce74 <_svfiprintf_r+0x1b0>
 800ce9e:	bf00      	nop
 800cea0:	0800d224 	.word	0x0800d224
 800cea4:	0800d22a 	.word	0x0800d22a
 800cea8:	0800d22e 	.word	0x0800d22e
 800ceac:	080097d1 	.word	0x080097d1
 800ceb0:	0800cc11 	.word	0x0800cc11

0800ceb4 <_sbrk_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4c06      	ldr	r4, [pc, #24]	; (800ced0 <_sbrk_r+0x1c>)
 800ceb8:	2300      	movs	r3, #0
 800ceba:	4605      	mov	r5, r0
 800cebc:	4608      	mov	r0, r1
 800cebe:	6023      	str	r3, [r4, #0]
 800cec0:	f7f5 fc72 	bl	80027a8 <_sbrk>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d102      	bne.n	800cece <_sbrk_r+0x1a>
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	b103      	cbz	r3, 800cece <_sbrk_r+0x1a>
 800cecc:	602b      	str	r3, [r5, #0]
 800cece:	bd38      	pop	{r3, r4, r5, pc}
 800ced0:	20002fcc 	.word	0x20002fcc

0800ced4 <strncmp>:
 800ced4:	b510      	push	{r4, lr}
 800ced6:	b16a      	cbz	r2, 800cef4 <strncmp+0x20>
 800ced8:	3901      	subs	r1, #1
 800ceda:	1884      	adds	r4, r0, r2
 800cedc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cee0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d103      	bne.n	800cef0 <strncmp+0x1c>
 800cee8:	42a0      	cmp	r0, r4
 800ceea:	d001      	beq.n	800cef0 <strncmp+0x1c>
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1f5      	bne.n	800cedc <strncmp+0x8>
 800cef0:	1a98      	subs	r0, r3, r2
 800cef2:	bd10      	pop	{r4, pc}
 800cef4:	4610      	mov	r0, r2
 800cef6:	e7fc      	b.n	800cef2 <strncmp+0x1e>

0800cef8 <__ascii_wctomb>:
 800cef8:	b149      	cbz	r1, 800cf0e <__ascii_wctomb+0x16>
 800cefa:	2aff      	cmp	r2, #255	; 0xff
 800cefc:	bf85      	ittet	hi
 800cefe:	238a      	movhi	r3, #138	; 0x8a
 800cf00:	6003      	strhi	r3, [r0, #0]
 800cf02:	700a      	strbls	r2, [r1, #0]
 800cf04:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf08:	bf98      	it	ls
 800cf0a:	2001      	movls	r0, #1
 800cf0c:	4770      	bx	lr
 800cf0e:	4608      	mov	r0, r1
 800cf10:	4770      	bx	lr

0800cf12 <memmove>:
 800cf12:	4288      	cmp	r0, r1
 800cf14:	b510      	push	{r4, lr}
 800cf16:	eb01 0302 	add.w	r3, r1, r2
 800cf1a:	d807      	bhi.n	800cf2c <memmove+0x1a>
 800cf1c:	1e42      	subs	r2, r0, #1
 800cf1e:	4299      	cmp	r1, r3
 800cf20:	d00a      	beq.n	800cf38 <memmove+0x26>
 800cf22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf26:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cf2a:	e7f8      	b.n	800cf1e <memmove+0xc>
 800cf2c:	4283      	cmp	r3, r0
 800cf2e:	d9f5      	bls.n	800cf1c <memmove+0xa>
 800cf30:	1881      	adds	r1, r0, r2
 800cf32:	1ad2      	subs	r2, r2, r3
 800cf34:	42d3      	cmn	r3, r2
 800cf36:	d100      	bne.n	800cf3a <memmove+0x28>
 800cf38:	bd10      	pop	{r4, pc}
 800cf3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cf42:	e7f7      	b.n	800cf34 <memmove+0x22>

0800cf44 <__malloc_lock>:
 800cf44:	4770      	bx	lr

0800cf46 <__malloc_unlock>:
 800cf46:	4770      	bx	lr

0800cf48 <_realloc_r>:
 800cf48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4a:	4607      	mov	r7, r0
 800cf4c:	4614      	mov	r4, r2
 800cf4e:	460e      	mov	r6, r1
 800cf50:	b921      	cbnz	r1, 800cf5c <_realloc_r+0x14>
 800cf52:	4611      	mov	r1, r2
 800cf54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cf58:	f7ff be00 	b.w	800cb5c <_malloc_r>
 800cf5c:	b922      	cbnz	r2, 800cf68 <_realloc_r+0x20>
 800cf5e:	f7ff fdaf 	bl	800cac0 <_free_r>
 800cf62:	4625      	mov	r5, r4
 800cf64:	4628      	mov	r0, r5
 800cf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf68:	f000 f814 	bl	800cf94 <_malloc_usable_size_r>
 800cf6c:	42a0      	cmp	r0, r4
 800cf6e:	d20f      	bcs.n	800cf90 <_realloc_r+0x48>
 800cf70:	4621      	mov	r1, r4
 800cf72:	4638      	mov	r0, r7
 800cf74:	f7ff fdf2 	bl	800cb5c <_malloc_r>
 800cf78:	4605      	mov	r5, r0
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	d0f2      	beq.n	800cf64 <_realloc_r+0x1c>
 800cf7e:	4631      	mov	r1, r6
 800cf80:	4622      	mov	r2, r4
 800cf82:	f7ff f985 	bl	800c290 <memcpy>
 800cf86:	4631      	mov	r1, r6
 800cf88:	4638      	mov	r0, r7
 800cf8a:	f7ff fd99 	bl	800cac0 <_free_r>
 800cf8e:	e7e9      	b.n	800cf64 <_realloc_r+0x1c>
 800cf90:	4635      	mov	r5, r6
 800cf92:	e7e7      	b.n	800cf64 <_realloc_r+0x1c>

0800cf94 <_malloc_usable_size_r>:
 800cf94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf98:	1f18      	subs	r0, r3, #4
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	bfbc      	itt	lt
 800cf9e:	580b      	ldrlt	r3, [r1, r0]
 800cfa0:	18c0      	addlt	r0, r0, r3
 800cfa2:	4770      	bx	lr

0800cfa4 <_init>:
 800cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfa6:	bf00      	nop
 800cfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfaa:	bc08      	pop	{r3}
 800cfac:	469e      	mov	lr, r3
 800cfae:	4770      	bx	lr

0800cfb0 <_fini>:
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	bf00      	nop
 800cfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfb6:	bc08      	pop	{r3}
 800cfb8:	469e      	mov	lr, r3
 800cfba:	4770      	bx	lr
