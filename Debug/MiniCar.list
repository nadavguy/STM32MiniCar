
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f75c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800f960  0800f960  0001f960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdc8  0800fdc8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdc8  0800fdc8  0001fdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdd0  0800fdd0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdd0  0800fdd0  0001fdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdd4  0800fdd4  0001fdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800fdd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d8c  200001f8  0800ffcc  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002f84  0800ffcc  00022f84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033f40  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000480c  00000000  00000000  00054162  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002348  00000000  00000000  00058970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002120  00000000  00000000  0005acb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006f5d  00000000  00000000  0005cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b9f3  00000000  00000000  00063d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001182a0  00000000  00000000  0007f728  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001979c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a464  00000000  00000000  00197a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f944 	.word	0x0800f944

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800f944 	.word	0x0800f944

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <CheckButton>:
uint32_t ButtonPressCycleStart = 0;
uint32_t ButtonPressDurationmSec[5] = {0};
uint8_t ButtonCycle = 0;

void CheckButton(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af02      	add	r7, sp, #8
	PA0PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80005f6:	2101      	movs	r1, #1
 80005f8:	487d      	ldr	r0, [pc, #500]	; (80007f0 <CheckButton+0x200>)
 80005fa:	f003 fee5 	bl	80043c8 <HAL_GPIO_ReadPin>
 80005fe:	4603      	mov	r3, r0
 8000600:	461a      	mov	r2, r3
 8000602:	4b7c      	ldr	r3, [pc, #496]	; (80007f4 <CheckButton+0x204>)
 8000604:	701a      	strb	r2, [r3, #0]
	if (PA0PinState == GPIO_PIN_RESET)
 8000606:	4b7b      	ldr	r3, [pc, #492]	; (80007f4 <CheckButton+0x204>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d108      	bne.n	8000620 <CheckButton+0x30>
	{
		SetRGB(0, 250, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	21fa      	movs	r1, #250	; 0xfa
 8000612:	2000      	movs	r0, #0
 8000614:	f000 fb1e 	bl	8000c54 <SetRGB>
		ButtonIsLow = true;
 8000618:	4b77      	ldr	r3, [pc, #476]	; (80007f8 <CheckButton+0x208>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		if (ButtonCycle == 0)
		{
			ButtonPressCycleStart = HAL_GetTick();
		}
	}
}
 800061e:	e0df      	b.n	80007e0 <CheckButton+0x1f0>
		if (ButtonIsLow)
 8000620:	4b75      	ldr	r3, [pc, #468]	; (80007f8 <CheckButton+0x208>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d044      	beq.n	80006b2 <CheckButton+0xc2>
			if (ButtonCycle < 5)
 8000628:	4b74      	ldr	r3, [pc, #464]	; (80007fc <CheckButton+0x20c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b04      	cmp	r3, #4
 800062e:	d818      	bhi.n	8000662 <CheckButton+0x72>
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 8000630:	f002 fb8a 	bl	8002d48 <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
						- ButtonPressStart) / 100) * 100;
 8000636:	4b72      	ldr	r3, [pc, #456]	; (8000800 <CheckButton+0x210>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	4a71      	ldr	r2, [pc, #452]	; (8000804 <CheckButton+0x214>)
 800063e:	fba2 2303 	umull	r2, r3, r2, r3
 8000642:	095b      	lsrs	r3, r3, #5
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 8000644:	4a6d      	ldr	r2, [pc, #436]	; (80007fc <CheckButton+0x20c>)
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	4611      	mov	r1, r2
						- ButtonPressStart) / 100) * 100;
 800064a:	2264      	movs	r2, #100	; 0x64
 800064c:	fb02 f303 	mul.w	r3, r2, r3
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 8000650:	4a6d      	ldr	r2, [pc, #436]	; (8000808 <CheckButton+0x218>)
 8000652:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				ButtonCycle++;
 8000656:	4b69      	ldr	r3, [pc, #420]	; (80007fc <CheckButton+0x20c>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b67      	ldr	r3, [pc, #412]	; (80007fc <CheckButton+0x20c>)
 8000660:	701a      	strb	r2, [r3, #0]
			if (ButtonCycle >= 5)
 8000662:	4b66      	ldr	r3, [pc, #408]	; (80007fc <CheckButton+0x20c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b04      	cmp	r3, #4
 8000668:	d907      	bls.n	800067a <CheckButton+0x8a>
				ButtonCycle = 0;
 800066a:	4b64      	ldr	r3, [pc, #400]	; (80007fc <CheckButton+0x20c>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
				memset(ButtonPressDurationmSec, 0, 20);
 8000670:	2214      	movs	r2, #20
 8000672:	2100      	movs	r1, #0
 8000674:	4864      	ldr	r0, [pc, #400]	; (8000808 <CheckButton+0x218>)
 8000676:	f00b fced 	bl	800c054 <memset>
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 800067a:	f001 ff25 	bl	80024c8 <CurrentTime>
 800067e:	ec55 4b10 	vmov	r4, r5, d0
					CurrentTime(), (HAL_GetTick() - ButtonPressStart) / 1000.0);
 8000682:	f002 fb61 	bl	8002d48 <HAL_GetTick>
 8000686:	4602      	mov	r2, r0
 8000688:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <CheckButton+0x210>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	1ad3      	subs	r3, r2, r3
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000696:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80007e8 <CheckButton+0x1f8>
 800069a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800069e:	ed8d 7b00 	vstr	d7, [sp]
 80006a2:	4622      	mov	r2, r4
 80006a4:	462b      	mov	r3, r5
 80006a6:	4959      	ldr	r1, [pc, #356]	; (800080c <CheckButton+0x21c>)
 80006a8:	4859      	ldr	r0, [pc, #356]	; (8000810 <CheckButton+0x220>)
 80006aa:	f00c faf3 	bl	800cc94 <siprintf>
			SendToScreen();
 80006ae:	f001 fa59 	bl	8001b64 <SendToScreen>
		if (HAL_GetTick() - ButtonPressCycleStart > 3000)
 80006b2:	f002 fb49 	bl	8002d48 <HAL_GetTick>
 80006b6:	4602      	mov	r2, r0
 80006b8:	4b56      	ldr	r3, [pc, #344]	; (8000814 <CheckButton+0x224>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d973      	bls.n	80007ae <CheckButton+0x1be>
			if (ButtonPressDurationmSec[0] >= 2000)
 80006c6:	4b50      	ldr	r3, [pc, #320]	; (8000808 <CheckButton+0x218>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006ce:	d30c      	bcc.n	80006ea <CheckButton+0xfa>
				sprintf(USBTXArray, "%6.3f, Do this\r\n", CurrentTime());
 80006d0:	f001 fefa 	bl	80024c8 <CurrentTime>
 80006d4:	ec54 3b10 	vmov	r3, r4, d0
 80006d8:	461a      	mov	r2, r3
 80006da:	4623      	mov	r3, r4
 80006dc:	494e      	ldr	r1, [pc, #312]	; (8000818 <CheckButton+0x228>)
 80006de:	484c      	ldr	r0, [pc, #304]	; (8000810 <CheckButton+0x220>)
 80006e0:	f00c fad8 	bl	800cc94 <siprintf>
				SendToScreen();
 80006e4:	f001 fa3e 	bl	8001b64 <SendToScreen>
 80006e8:	e059      	b.n	800079e <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 80006ea:	4b47      	ldr	r3, [pc, #284]	; (8000808 <CheckButton+0x218>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006f2:	d311      	bcc.n	8000718 <CheckButton+0x128>
					&& (ButtonPressDurationmSec[1] >= 1000))
 80006f4:	4b44      	ldr	r3, [pc, #272]	; (8000808 <CheckButton+0x218>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006fc:	d30c      	bcc.n	8000718 <CheckButton+0x128>
				sprintf(USBTXArray, "%6.3f, Do that\r\n", CurrentTime());
 80006fe:	f001 fee3 	bl	80024c8 <CurrentTime>
 8000702:	ec54 3b10 	vmov	r3, r4, d0
 8000706:	461a      	mov	r2, r3
 8000708:	4623      	mov	r3, r4
 800070a:	4944      	ldr	r1, [pc, #272]	; (800081c <CheckButton+0x22c>)
 800070c:	4840      	ldr	r0, [pc, #256]	; (8000810 <CheckButton+0x220>)
 800070e:	f00c fac1 	bl	800cc94 <siprintf>
				SendToScreen();
 8000712:	f001 fa27 	bl	8001b64 <SendToScreen>
			{
 8000716:	e042      	b.n	800079e <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 8000718:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <CheckButton+0x218>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000720:	d310      	bcc.n	8000744 <CheckButton+0x154>
					&& (ButtonPressDurationmSec[1] == 0))
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <CheckButton+0x218>)
 8000724:	685b      	ldr	r3, [r3, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d10c      	bne.n	8000744 <CheckButton+0x154>
				sprintf(USBTXArray, "%6.3f, Do that Single Press\r\n",
 800072a:	f001 fecd 	bl	80024c8 <CurrentTime>
 800072e:	ec54 3b10 	vmov	r3, r4, d0
 8000732:	461a      	mov	r2, r3
 8000734:	4623      	mov	r3, r4
 8000736:	493a      	ldr	r1, [pc, #232]	; (8000820 <CheckButton+0x230>)
 8000738:	4835      	ldr	r0, [pc, #212]	; (8000810 <CheckButton+0x220>)
 800073a:	f00c faab 	bl	800cc94 <siprintf>
				SendToScreen();
 800073e:	f001 fa11 	bl	8001b64 <SendToScreen>
			{
 8000742:	e02c      	b.n	800079e <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 500)
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <CheckButton+0x218>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800074c:	d311      	bcc.n	8000772 <CheckButton+0x182>
					&& (ButtonPressDurationmSec[1] >= 1000))
 800074e:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <CheckButton+0x218>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000756:	d30c      	bcc.n	8000772 <CheckButton+0x182>
				sprintf(USBTXArray, "%6.3f, Or maybe this\r\n", CurrentTime());
 8000758:	f001 feb6 	bl	80024c8 <CurrentTime>
 800075c:	ec54 3b10 	vmov	r3, r4, d0
 8000760:	461a      	mov	r2, r3
 8000762:	4623      	mov	r3, r4
 8000764:	492f      	ldr	r1, [pc, #188]	; (8000824 <CheckButton+0x234>)
 8000766:	482a      	ldr	r0, [pc, #168]	; (8000810 <CheckButton+0x220>)
 8000768:	f00c fa94 	bl	800cc94 <siprintf>
				SendToScreen();
 800076c:	f001 f9fa 	bl	8001b64 <SendToScreen>
			{
 8000770:	e015      	b.n	800079e <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 500)
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <CheckButton+0x218>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800077a:	d310      	bcc.n	800079e <CheckButton+0x1ae>
					&& (ButtonPressDurationmSec[1] >= 500))
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <CheckButton+0x218>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000784:	d30b      	bcc.n	800079e <CheckButton+0x1ae>
				sprintf(USBTXArray, "%6.3f, Or maybe that\r\n", CurrentTime());
 8000786:	f001 fe9f 	bl	80024c8 <CurrentTime>
 800078a:	ec54 3b10 	vmov	r3, r4, d0
 800078e:	461a      	mov	r2, r3
 8000790:	4623      	mov	r3, r4
 8000792:	4925      	ldr	r1, [pc, #148]	; (8000828 <CheckButton+0x238>)
 8000794:	481e      	ldr	r0, [pc, #120]	; (8000810 <CheckButton+0x220>)
 8000796:	f00c fa7d 	bl	800cc94 <siprintf>
				SendToScreen();
 800079a:	f001 f9e3 	bl	8001b64 <SendToScreen>
			ButtonCycle = 0;
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <CheckButton+0x20c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
			memset(ButtonPressDurationmSec, 0, 20);
 80007a4:	2214      	movs	r2, #20
 80007a6:	2100      	movs	r1, #0
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <CheckButton+0x218>)
 80007aa:	f00b fc53 	bl	800c054 <memset>
		SetRGB(250, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	20fa      	movs	r0, #250	; 0xfa
 80007b4:	f000 fa4e 	bl	8000c54 <SetRGB>
		ButtonIsHigh = true;
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <CheckButton+0x23c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	701a      	strb	r2, [r3, #0]
		ButtonIsLow = false;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <CheckButton+0x208>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
		ButtonPressStart = HAL_GetTick();
 80007c4:	f002 fac0 	bl	8002d48 <HAL_GetTick>
 80007c8:	4602      	mov	r2, r0
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <CheckButton+0x210>)
 80007cc:	601a      	str	r2, [r3, #0]
		if (ButtonCycle == 0)
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <CheckButton+0x20c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d104      	bne.n	80007e0 <CheckButton+0x1f0>
			ButtonPressCycleStart = HAL_GetTick();
 80007d6:	f002 fab7 	bl	8002d48 <HAL_GetTick>
 80007da:	4602      	mov	r2, r0
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <CheckButton+0x224>)
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bdb0      	pop	{r4, r5, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	00000000 	.word	0x00000000
 80007ec:	408f4000 	.word	0x408f4000
 80007f0:	40020000 	.word	0x40020000
 80007f4:	20000ae8 	.word	0x20000ae8
 80007f8:	20000215 	.word	0x20000215
 80007fc:	20000234 	.word	0x20000234
 8000800:	20000218 	.word	0x20000218
 8000804:	51eb851f 	.word	0x51eb851f
 8000808:	20000220 	.word	0x20000220
 800080c:	0800f960 	.word	0x0800f960
 8000810:	2000067c 	.word	0x2000067c
 8000814:	2000021c 	.word	0x2000021c
 8000818:	0800f988 	.word	0x0800f988
 800081c:	0800f99c 	.word	0x0800f99c
 8000820:	0800f9b0 	.word	0x0800f9b0
 8000824:	0800f9d0 	.word	0x0800f9d0
 8000828:	0800f9e8 	.word	0x0800f9e8
 800082c:	20000214 	.word	0x20000214

08000830 <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 8000834:	4805      	ldr	r0, [pc, #20]	; (800084c <QSPI_Init+0x1c>)
 8000836:	f000 f93f 	bl	8000ab8 <QSPI_DummyCyclesCfg>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	e000      	b.n	8000846 <QSPI_Init+0x16>
  }
  return HAL_OK;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000ec4 	.word	0x20000ec4

08000850 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b094      	sub	sp, #80	; 0x50
 8000854:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 800085c:	2306      	movs	r3, #6
 800085e:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000860:	2300      	movs	r3, #0
 8000862:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000864:	2300      	movs	r3, #0
 8000866:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000874:	2300      	movs	r3, #0
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000878:	2300      	movs	r3, #0
 800087a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	f241 3288 	movw	r2, #5000	; 0x1388
 8000884:	4619      	mov	r1, r3
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <QSPI_WriteEnable+0x90>)
 8000888:	f004 fd72 	bl	8005370 <HAL_QSPI_Command>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e01f      	b.n	80008d6 <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 8000896:	2302      	movs	r3, #2
 8000898:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 800089a:	2302      	movs	r3, #2
 800089c:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ae:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 80008b0:	2305      	movs	r3, #5
 80008b2:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 80008b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008ba:	463a      	mov	r2, r7
 80008bc:	f107 0118 	add.w	r1, r7, #24
 80008c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c4:	4806      	ldr	r0, [pc, #24]	; (80008e0 <QSPI_WriteEnable+0x90>)
 80008c6:	f004 fee0 	bl	800568a <HAL_QSPI_AutoPolling>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e000      	b.n	80008d6 <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3750      	adds	r7, #80	; 0x50
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000ec4 	.word	0x20000ec4

080008e4 <QSPI_READMD>:

uint8_t QSPI_READMD(uint8_t *Mid, uint8_t *Did)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b098      	sub	sp, #96	; 0x60
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x90; // ok
 80008f4:	2390      	movs	r3, #144	; 0x90
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000900:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 5;
 800090a:	2305      	movs	r3, #5
 800090c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000912:	2300      	movs	r3, #0
 8000914:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000916:	2300      	movs	r3, #0
 8000918:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800091a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800091e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000922:	4619      	mov	r1, r3
 8000924:	480f      	ldr	r0, [pc, #60]	; (8000964 <QSPI_READMD+0x80>)
 8000926:	f004 fd23 	bl	8005370 <HAL_QSPI_Command>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <QSPI_READMD+0x50>
  {
    return HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	e013      	b.n	800095c <QSPI_READMD+0x78>
  }


  uint8_t reg2[6] = {0};
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	809a      	strh	r2, [r3, #4]
  HAL_QSPI_Receive(&hqspi, &(reg2), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	f241 3288 	movw	r2, #5000	; 0x1388
 8000946:	4619      	mov	r1, r3
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <QSPI_READMD+0x80>)
 800094a:	f004 fe01 	bl	8005550 <HAL_QSPI_Receive>
  *Mid = reg2[3];
 800094e:	7afa      	ldrb	r2, [r7, #11]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	701a      	strb	r2, [r3, #0]
  *Did = reg2[4];
 8000954:	7b3a      	ldrb	r2, [r7, #12]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	701a      	strb	r2, [r3, #0]
//  HAL_QSPI_Receive(&hqspi, &(reg2[2]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[3]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[4]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[5]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);

  return HAL_OK;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	3760      	adds	r7, #96	; 0x60
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000ec4 	.word	0x20000ec4

08000968 <QSPI_Read_Status_registers>:
  return HAL_OK;
}

// Read Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Read_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b098      	sub	sp, #96	; 0x60
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
  uint8_t reg1[6];
  uint8_t reg2[6];
  uint8_t reg3[6];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x05;
 800097c:	2305      	movs	r3, #5
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000980:	2300      	movs	r3, #0
 8000982:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800098c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800099a:	2300      	movs	r3, #0
 800099c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800099e:	2300      	movs	r3, #0
 80009a0:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80009aa:	4619      	mov	r1, r3
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f004 fcdf 	bl	8005370 <HAL_QSPI_Command>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <QSPI_Read_Status_registers+0x54>
  {
    return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e079      	b.n	8000ab0 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009bc:	f107 0320 	add.w	r3, r7, #32
 80009c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80009c4:	4619      	mov	r1, r3
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f004 fdc2 	bl	8005550 <HAL_QSPI_Receive>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <QSPI_Read_Status_registers+0x6e>
  {
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	e06c      	b.n	8000ab0 <QSPI_Read_Status_registers+0x148>
  }
  *R1 = reg1[0];
 80009d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009da:	b29a      	uxth	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 80009e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x35;
 80009e6:	2335      	movs	r3, #53	; 0x35
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 80009f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a04:	2300      	movs	r3, #0
 8000a06:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a14:	4619      	mov	r1, r3
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f004 fcaa 	bl	8005370 <HAL_QSPI_Command>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <QSPI_Read_Status_registers+0xbe>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e044      	b.n	8000ab0 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a2e:	4619      	mov	r1, r3
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f004 fd8d 	bl	8005550 <HAL_QSPI_Receive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <QSPI_Read_Status_registers+0xd8>
  {
    return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e037      	b.n	8000ab0 <QSPI_Read_Status_registers+0x148>
  }
  *R2 = reg2[0];
 8000a40:	7e3b      	ldrb	r3, [r7, #24]
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x15;
 8000a4e:	2315      	movs	r3, #21
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000a5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a70:	2300      	movs	r3, #0
 8000a72:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f004 fc76 	bl	8005370 <HAL_QSPI_Command>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <QSPI_Read_Status_registers+0x126>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e010      	b.n	8000ab0 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a96:	4619      	mov	r1, r3
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f004 fd59 	bl	8005550 <HAL_QSPI_Receive>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <QSPI_Read_Status_registers+0x140>
  {
    return HAL_ERROR;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e003      	b.n	8000ab0 <QSPI_Read_Status_registers+0x148>
  }
  *R3 = reg3[0];
 8000aa8:	7c3b      	ldrb	r3, [r7, #16]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	801a      	strh	r2, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3760      	adds	r7, #96	; 0x60
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000ad2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af4:	4619      	mov	r1, r3
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f004 fc3a 	bl	8005370 <HAL_QSPI_Command>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e08f      	b.n	8000c26 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b0e:	4619      	mov	r1, r3
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f004 fd1d 	bl	8005550 <HAL_QSPI_Receive>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e082      	b.n	8000c26 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 8000b26:	2315      	movs	r3, #21
 8000b28:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b44:	2300      	movs	r3, #0
 8000b46:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b54:	4619      	mov	r1, r3
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f004 fc0a 	bl	8005370 <HAL_QSPI_Command>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e05f      	b.n	8000c26 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b70:	4619      	mov	r1, r3
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f004 fcec 	bl	8005550 <HAL_QSPI_Receive>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e051      	b.n	8000c26 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 8000b82:	f7ff fe65 	bl	8000850 <QSPI_WriteEnable>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e04a      	b.n	8000c26 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8000b96:	2301      	movs	r3, #1
 8000b98:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000ba2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 8000bac:	2302      	movs	r3, #2
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000bc4:	b25a      	sxtb	r2, r3
 8000bc6:	23c0      	movs	r3, #192	; 0xc0
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bcc:	fa93 f3a3 	rbit	r3, r3
 8000bd0:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bd4:	fab3 f383 	clz	r3, r3
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2308      	movs	r3, #8
 8000bde:	408b      	lsls	r3, r1
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f004 fbbb 	bl	8005370 <HAL_QSPI_Command>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e010      	b.n	8000c26 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f004 fc0c 	bl	800542c <HAL_QSPI_Transmit>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e003      	b.n	8000c26 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 8000c1e:	2028      	movs	r0, #40	; 0x28
 8000c20:	f002 f89e 	bl	8002d60 <HAL_Delay>

  return HAL_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3750      	adds	r7, #80	; 0x50
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <led_init>:
 */

#include "main.h"

void led_init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 8000c34:	2104      	movs	r1, #4
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <led_init+0x20>)
 8000c38:	f006 ffa0 	bl	8007b7c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4804      	ldr	r0, [pc, #16]	; (8000c50 <led_init+0x20>)
 8000c40:	f006 ff9c 	bl	8007b7c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 8000c44:	210c      	movs	r1, #12
 8000c46:	4802      	ldr	r0, [pc, #8]	; (8000c50 <led_init+0x20>)
 8000c48:	f006 ff98 	bl	8007b7c <HAL_TIM_PWM_Start>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000c10 	.word	0x20000c10

08000c54 <SetRGB>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //Blue LED
}

// Input: 0 to 250
void SetRGB(int Red, int Green, int Blue)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	//  SetRGB(250, 0, 0); // Red
	//  SetRGB(0, 250, 0); // Green
	//  SetRGB(0, 0, 250); // Blue
	//  SetRGB(250, 250, 0);// Yellow
	TIM4->CCR2 = Red * 8000 / 250;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <SetRGB+0x68>)
 8000c6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c70:	1112      	asrs	r2, r2, #4
 8000c72:	17db      	asrs	r3, r3, #31
 8000c74:	1ad2      	subs	r2, r2, r3
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <SetRGB+0x6c>)
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = Green * 8000 / 250;
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c80:	fb02 f303 	mul.w	r3, r2, r3
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <SetRGB+0x68>)
 8000c86:	fb82 1203 	smull	r1, r2, r2, r3
 8000c8a:	1112      	asrs	r2, r2, #4
 8000c8c:	17db      	asrs	r3, r3, #31
 8000c8e:	1ad2      	subs	r2, r2, r3
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <SetRGB+0x6c>)
 8000c92:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR4 = Blue * 8000 / 250;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <SetRGB+0x68>)
 8000ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca4:	1112      	asrs	r2, r2, #4
 8000ca6:	17db      	asrs	r3, r3, #31
 8000ca8:	1ad2      	subs	r2, r2, r3
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SetRGB+0x6c>)
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	10624dd3 	.word	0x10624dd3
 8000cc0:	40000800 	.word	0x40000800

08000cc4 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000ccc:	23ff      	movs	r3, #255	; 0xff
 8000cce:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000cd8:	2300      	movs	r3, #0
 8000cda:	723b      	strb	r3, [r7, #8]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000ce0:	4a58      	ldr	r2, [pc, #352]	; (8000e44 <bno055_init+0x180>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000ce6:	4b57      	ldr	r3, [pc, #348]	; (8000e44 <bno055_init+0x180>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68dc      	ldr	r4, [r3, #12]
 8000cec:	4b55      	ldr	r3, [pc, #340]	; (8000e44 <bno055_init+0x180>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	7a58      	ldrb	r0, [r3, #9]
 8000cf2:	f107 020d 	add.w	r2, r7, #13
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	2107      	movs	r1, #7
 8000cfa:	47a0      	blx	r4
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d00:	4b50      	ldr	r3, [pc, #320]	; (8000e44 <bno055_init+0x180>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	691c      	ldr	r4, [r3, #16]
 8000d06:	4b4f      	ldr	r3, [pc, #316]	; (8000e44 <bno055_init+0x180>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	7a58      	ldrb	r0, [r3, #9]
 8000d0c:	f107 020e 	add.w	r2, r7, #14
 8000d10:	2301      	movs	r3, #1
 8000d12:	2100      	movs	r1, #0
 8000d14:	47a0      	blx	r4
 8000d16:	4603      	mov	r3, r0
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000d22:	4b48      	ldr	r3, [pc, #288]	; (8000e44 <bno055_init+0x180>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	7bba      	ldrb	r2, [r7, #14]
 8000d28:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d2a:	4b46      	ldr	r3, [pc, #280]	; (8000e44 <bno055_init+0x180>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	691c      	ldr	r4, [r3, #16]
 8000d30:	4b44      	ldr	r3, [pc, #272]	; (8000e44 <bno055_init+0x180>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	7a58      	ldrb	r0, [r3, #9]
 8000d36:	f107 020e 	add.w	r2, r7, #14
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	47a0      	blx	r4
 8000d40:	4603      	mov	r3, r0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	4413      	add	r3, r2
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000d4c:	4b3d      	ldr	r3, [pc, #244]	; (8000e44 <bno055_init+0x180>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	7bba      	ldrb	r2, [r7, #14]
 8000d52:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d54:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <bno055_init+0x180>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	691c      	ldr	r4, [r3, #16]
 8000d5a:	4b3a      	ldr	r3, [pc, #232]	; (8000e44 <bno055_init+0x180>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	7a58      	ldrb	r0, [r3, #9]
 8000d60:	f107 020e 	add.w	r2, r7, #14
 8000d64:	2301      	movs	r3, #1
 8000d66:	2102      	movs	r1, #2
 8000d68:	47a0      	blx	r4
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	4413      	add	r3, r2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000d76:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <bno055_init+0x180>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	7bba      	ldrb	r2, [r7, #14]
 8000d7c:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d7e:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <bno055_init+0x180>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	691c      	ldr	r4, [r3, #16]
 8000d84:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <bno055_init+0x180>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	7a58      	ldrb	r0, [r3, #9]
 8000d8a:	f107 020e 	add.w	r2, r7, #14
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2103      	movs	r1, #3
 8000d92:	47a0      	blx	r4
 8000d94:	4603      	mov	r3, r0
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <bno055_init+0x180>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	7bba      	ldrb	r2, [r7, #14]
 8000da6:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <bno055_init+0x180>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	691c      	ldr	r4, [r3, #16]
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <bno055_init+0x180>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	7a58      	ldrb	r0, [r3, #9]
 8000db4:	f107 020e 	add.w	r2, r7, #14
 8000db8:	2301      	movs	r3, #1
 8000dba:	2106      	movs	r1, #6
 8000dbc:	47a0      	blx	r4
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <bno055_init+0x180>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	7bba      	ldrb	r2, [r7, #14]
 8000dd0:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <bno055_init+0x180>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	691c      	ldr	r4, [r3, #16]
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <bno055_init+0x180>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	7a58      	ldrb	r0, [r3, #9]
 8000dde:	f107 0208 	add.w	r2, r7, #8
 8000de2:	2302      	movs	r3, #2
 8000de4:	2104      	movs	r1, #4
 8000de6:	47a0      	blx	r4
 8000de8:	4603      	mov	r3, r0
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000df4:	7a3b      	ldrb	r3, [r7, #8]
 8000df6:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000df8:	7a7b      	ldrb	r3, [r7, #9]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	7a3b      	ldrb	r3, [r7, #8]
 8000e02:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <bno055_init+0x180>)
 8000e06:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000e0c:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <bno055_init+0x180>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	691c      	ldr	r4, [r3, #16]
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <bno055_init+0x180>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	7a58      	ldrb	r0, [r3, #9]
 8000e1a:	f107 020e 	add.w	r2, r7, #14
 8000e1e:	2301      	movs	r3, #1
 8000e20:	2107      	movs	r1, #7
 8000e22:	47a0      	blx	r4
 8000e24:	4603      	mov	r3, r0
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <bno055_init+0x180>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	7bba      	ldrb	r2, [r7, #14]
 8000e36:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd90      	pop	{r4, r7, pc}
 8000e44:	20000238 	.word	0x20000238

08000e48 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e58:	23ff      	movs	r3, #255	; 0xff
 8000e5a:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <bno055_write_register+0x48>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000e64:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000e68:	e00d      	b.n	8000e86 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <bno055_write_register+0x48>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	68dc      	ldr	r4, [r3, #12]
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <bno055_write_register+0x48>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	7a58      	ldrb	r0, [r3, #9]
 8000e76:	79bb      	ldrb	r3, [r7, #6]
 8000e78:	79f9      	ldrb	r1, [r7, #7]
 8000e7a:	683a      	ldr	r2, [r7, #0]
 8000e7c:	47a0      	blx	r4
 8000e7e:	4603      	mov	r3, r0
 8000e80:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000238 	.word	0x20000238

08000e94 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e9e:	23ff      	movs	r3, #255	; 0xff
 8000ea0:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <bno055_write_page_id+0x8c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000eae:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000eb2:	e030      	b.n	8000f16 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <bno055_write_page_id+0x8c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	691c      	ldr	r4, [r3, #16]
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <bno055_write_page_id+0x8c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	7a58      	ldrb	r0, [r3, #9]
 8000ec0:	f107 020e 	add.w	r2, r7, #14
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	2107      	movs	r1, #7
 8000ec8:	47a0      	blx	r4
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d11b      	bne.n	8000f0e <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <bno055_write_page_id+0x8c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68dc      	ldr	r4, [r3, #12]
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <bno055_write_page_id+0x8c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	7a58      	ldrb	r0, [r3, #9]
 8000ee6:	f107 020e 	add.w	r2, r7, #14
 8000eea:	2301      	movs	r3, #1
 8000eec:	2107      	movs	r1, #7
 8000eee:	47a0      	blx	r4
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d106      	bne.n	8000f12 <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <bno055_write_page_id+0x8c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	79fa      	ldrb	r2, [r7, #7]
 8000f0a:	711a      	strb	r2, [r3, #4]
 8000f0c:	e001      	b.n	8000f12 <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000f0e:	23ff      	movs	r3, #255	; 0xff
 8000f10:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000238 	.word	0x20000238

08000f24 <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f2c:	23ff      	movs	r3, #255	; 0xff
 8000f2e:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
 8000f3c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <bno055_read_euler_hrp+0xd0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <bno055_read_euler_hrp+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000f46:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000f4a:	e04e      	b.n	8000fea <bno055_read_euler_hrp+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000f4c:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <bno055_read_euler_hrp+0xd0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d004      	beq.n	8000f60 <bno055_read_euler_hrp+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff ff9c 	bl	8000e94 <bno055_write_page_id>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <bno055_read_euler_hrp+0x4e>
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <bno055_read_euler_hrp+0xd0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	791b      	ldrb	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d137      	bne.n	8000fe2 <bno055_read_euler_hrp+0xbe>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <bno055_read_euler_hrp+0xd0>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	691c      	ldr	r4, [r3, #16]
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <bno055_read_euler_hrp+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	7a58      	ldrb	r0, [r3, #9]
 8000f7e:	f107 0208 	add.w	r2, r7, #8
 8000f82:	2306      	movs	r3, #6
 8000f84:	211a      	movs	r1, #26
 8000f86:	47a0      	blx	r4
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 8000f8c:	7a3b      	ldrb	r3, [r7, #8]
 8000f8e:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 8000f90:	7a7b      	ldrb	r3, [r7, #9]
 8000f92:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f94:	7a7b      	ldrb	r3, [r7, #9]
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 8000f9c:	7a3b      	ldrb	r3, [r7, #8]
 8000f9e:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b21a      	sxth	r2, r3
            euler->h =
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 8000fa8:	7abb      	ldrb	r3, [r7, #10]
 8000faa:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 8000fac:	7afb      	ldrb	r3, [r7, #11]
 8000fae:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000fb0:	7afb      	ldrb	r3, [r7, #11]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 8000fb8:	7abb      	ldrb	r3, [r7, #10]
 8000fba:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b21a      	sxth	r2, r3
            euler->r =
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 8000fc4:	7b3b      	ldrb	r3, [r7, #12]
 8000fc6:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 8000fc8:	7b7b      	ldrb	r3, [r7, #13]
 8000fca:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000fcc:	7b7b      	ldrb	r3, [r7, #13]
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 8000fd4:	7b3b      	ldrb	r3, [r7, #12]
 8000fd6:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	b21a      	sxth	r2, r3
            euler->p =
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	809a      	strh	r2, [r3, #4]
 8000fe0:	e001      	b.n	8000fe6 <bno055_read_euler_hrp+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000fe2:	23ff      	movs	r3, #255	; 0xff
 8000fe4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd90      	pop	{r4, r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000238 	.word	0x20000238

08000ff8 <bno055_convert_double_euler_hpr_deg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_euler_hpr_deg(struct bno055_euler_double_t *euler_hpr)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001000:	23ff      	movs	r3, #255	; 0xff
 8001002:	75fb      	strb	r3, [r7, #23]
    struct bno055_euler_t reg_euler = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001004:	2300      	movs	r3, #0
 8001006:	823b      	strh	r3, [r7, #16]
 8001008:	2300      	movs	r3, #0
 800100a:	827b      	strh	r3, [r7, #18]
 800100c:	2300      	movs	r3, #0
 800100e:	82bb      	strh	r3, [r7, #20]
    u8 euler_unit_u8 = BNO055_INIT_VALUE;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]

    /* Read the current Euler unit and set the
     * unit as degree if the unit is in radians */
    com_rslt = bno055_get_euler_unit(&euler_unit_u8);
 8001014:	f107 030f 	add.w	r3, r7, #15
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f855 	bl	80010c8 <bno055_get_euler_unit>
 800101e:	4603      	mov	r3, r0
 8001020:	75fb      	strb	r3, [r7, #23]
    if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <bno055_convert_double_euler_hpr_deg+0x42>
    {
        com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 8001028:	2000      	movs	r0, #0
 800102a:	f000 f891 	bl	8001150 <bno055_set_euler_unit>
 800102e:	4603      	mov	r3, r0
 8001030:	b2da      	uxtb	r2, r3
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	4413      	add	r3, r2
 8001036:	b2db      	uxtb	r3, r3
 8001038:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 800103a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d139      	bne.n	80010b6 <bno055_convert_double_euler_hpr_deg+0xbe>
    {
        /* Read Euler raw h data*/
        com_rslt += bno055_read_euler_hrp(&reg_euler);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff6c 	bl	8000f24 <bno055_read_euler_hrp>
 800104c:	4603      	mov	r3, r0
 800104e:	b2da      	uxtb	r2, r3
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	4413      	add	r3, r2
 8001054:	b2db      	uxtb	r3, r3
 8001056:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8001058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d127      	bne.n	80010b0 <bno055_convert_double_euler_hpr_deg+0xb8>
        {
            /* Convert raw Euler hrp to degree*/
            euler_hpr->h = (double)(reg_euler.h / BNO055_EULER_DIV_DEG);
 8001060:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800106c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001070:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	ed83 7b00 	vstr	d7, [r3]
            euler_hpr->p = (double)(reg_euler.p / BNO055_EULER_DIV_DEG);
 800107a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800107e:	ee07 3a90 	vmov	s15, r3
 8001082:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001086:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 800108a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	ed83 7b04 	vstr	d7, [r3, #16]
            euler_hpr->r = (double)(reg_euler.r / BNO055_EULER_DIV_DEG);
 8001094:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001098:	ee07 3a90 	vmov	s15, r3
 800109c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010a0:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 80010a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	ed83 7b02 	vstr	d7, [r3, #8]
 80010ae:	e004      	b.n	80010ba <bno055_convert_double_euler_hpr_deg+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80010b0:	23ff      	movs	r3, #255	; 0xff
 80010b2:	75fb      	strb	r3, [r7, #23]
 80010b4:	e001      	b.n	80010ba <bno055_convert_double_euler_hpr_deg+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 80010b6:	23ff      	movs	r3, #255	; 0xff
 80010b8:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 80010ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <bno055_get_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_euler_unit(u8 *euler_unit_u8)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80010d0:	23ff      	movs	r3, #255	; 0xff
 80010d2:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80010d8:	23ff      	movs	r3, #255	; 0xff
 80010da:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <bno055_get_euler_unit+0x84>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <bno055_get_euler_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 80010e4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80010e8:	e02c      	b.n	8001144 <bno055_get_euler_unit+0x7c>
    }
    else
    {
        /*condition check for page, Euler unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <bno055_get_euler_unit+0x84>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	791b      	ldrb	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <bno055_get_euler_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff fecd 	bl	8000e94 <bno055_write_page_id>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80010fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <bno055_get_euler_unit+0x48>
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <bno055_get_euler_unit+0x84>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	791b      	ldrb	r3, [r3, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d115      	bne.n	800113c <bno055_get_euler_unit+0x74>
        {
            /* Read the Euler unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <bno055_get_euler_unit+0x84>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691c      	ldr	r4, [r3, #16]
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <bno055_get_euler_unit+0x84>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	7a58      	ldrb	r0, [r3, #9]
 800111c:	f107 020d 	add.w	r2, r7, #13
 8001120:	2301      	movs	r3, #1
 8001122:	213b      	movs	r1, #59	; 0x3b
 8001124:	47a0      	blx	r4
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *euler_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_EULER_UNIT);
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	109b      	asrs	r3, r3, #2
 800112e:	b2db      	uxtb	r3, r3
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e001      	b.n	8001140 <bno055_get_euler_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800113c:	23ff      	movs	r3, #255	; 0xff
 800113e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bd90      	pop	{r4, r7, pc}
 800114c:	20000238 	.word	0x20000238

08001150 <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800115a:	23ff      	movs	r3, #255	; 0xff
 800115c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800115e:	2300      	movs	r3, #0
 8001160:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001162:	2300      	movs	r3, #0
 8001164:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001166:	23ff      	movs	r3, #255	; 0xff
 8001168:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <bno055_set_euler_unit+0xf4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001172:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001176:	e060      	b.n	800123a <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f863 	bl	8001248 <bno055_get_operation_mode>
 8001182:	4603      	mov	r3, r0
 8001184:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d144      	bne.n	8001218 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800118e:	7b3b      	ldrb	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001194:	2000      	movs	r0, #0
 8001196:	f000 f899 	bl	80012cc <bno055_set_operation_mode>
 800119a:	4603      	mov	r3, r0
 800119c:	b2da      	uxtb	r2, r3
 800119e:	7bbb      	ldrb	r3, [r7, #14]
 80011a0:	4413      	add	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80011a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d131      	bne.n	8001212 <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <bno055_set_euler_unit+0xf4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	691c      	ldr	r4, [r3, #16]
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <bno055_set_euler_unit+0xf4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	7a58      	ldrb	r0, [r3, #9]
 80011ba:	f107 020d 	add.w	r2, r7, #13
 80011be:	2301      	movs	r3, #1
 80011c0:	213b      	movs	r1, #59	; 0x3b
 80011c2:	47a0      	blx	r4
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80011c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d125      	bne.n	800121c <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 80011d0:	7b7b      	ldrb	r3, [r7, #13]
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	b25a      	sxtb	r2, r3
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <bno055_set_euler_unit+0xf4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68dc      	ldr	r4, [r3, #12]
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <bno055_set_euler_unit+0xf4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	7a58      	ldrb	r0, [r3, #9]
 80011fa:	f107 020d 	add.w	r2, r7, #13
 80011fe:	2301      	movs	r3, #1
 8001200:	213b      	movs	r1, #59	; 0x3b
 8001202:	47a0      	blx	r4
 8001204:	4603      	mov	r3, r0
 8001206:	b2da      	uxtb	r2, r3
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	4413      	add	r3, r2
 800120c:	b2db      	uxtb	r3, r3
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e004      	b.n	800121c <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001212:	23ff      	movs	r3, #255	; 0xff
 8001214:	73fb      	strb	r3, [r7, #15]
 8001216:	e001      	b.n	800121c <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800121c:	7b3b      	ldrb	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001222:	7b3b      	ldrb	r3, [r7, #12]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 f851 	bl	80012cc <bno055_set_operation_mode>
 800122a:	4603      	mov	r3, r0
 800122c:	b2da      	uxtb	r2, r3
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4413      	add	r3, r2
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	20000238 	.word	0x20000238

08001248 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001250:	23ff      	movs	r3, #255	; 0xff
 8001252:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001254:	2300      	movs	r3, #0
 8001256:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001258:	23ff      	movs	r3, #255	; 0xff
 800125a:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <bno055_get_operation_mode+0x80>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001264:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001268:	e02a      	b.n	80012c0 <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <bno055_get_operation_mode+0x80>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	791b      	ldrb	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001274:	2000      	movs	r0, #0
 8001276:	f7ff fe0d 	bl	8000e94 <bno055_write_page_id>
 800127a:	4603      	mov	r3, r0
 800127c:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800127e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <bno055_get_operation_mode+0x48>
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <bno055_get_operation_mode+0x80>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	791b      	ldrb	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d113      	bne.n	80012b8 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <bno055_get_operation_mode+0x80>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691c      	ldr	r4, [r3, #16]
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <bno055_get_operation_mode+0x80>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7a58      	ldrb	r0, [r3, #9]
 800129c:	f107 020d 	add.w	r2, r7, #13
 80012a0:	2301      	movs	r3, #1
 80012a2:	213d      	movs	r1, #61	; 0x3d
 80012a4:	47a0      	blx	r4
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 80012aa:	7b7b      	ldrb	r3, [r7, #13]
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e001      	b.n	80012bc <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80012b8:	23ff      	movs	r3, #255	; 0xff
 80012ba:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd90      	pop	{r4, r7, pc}
 80012c8:	20000238 	.word	0x20000238

080012cc <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80012d6:	23ff      	movs	r3, #255	; 0xff
 80012d8:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80012da:	2300      	movs	r3, #0
 80012dc:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80012de:	2300      	movs	r3, #0
 80012e0:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80012e2:	23ff      	movs	r3, #255	; 0xff
 80012e4:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <bno055_set_operation_mode+0x18c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80012ee:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80012f2:	e0ac      	b.n	800144e <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffa5 	bl	8001248 <bno055_get_operation_mode>
 80012fe:	4603      	mov	r3, r0
 8001300:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 809d 	bne.w	8001446 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 800130c:	7b3b      	ldrb	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d137      	bne.n	8001382 <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001312:	4b51      	ldr	r3, [pc, #324]	; (8001458 <bno055_set_operation_mode+0x18c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	691c      	ldr	r4, [r3, #16]
 8001318:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <bno055_set_operation_mode+0x18c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	7a58      	ldrb	r0, [r3, #9]
 800131e:	f107 020d 	add.w	r2, r7, #13
 8001322:	2301      	movs	r3, #1
 8001324:	213d      	movs	r1, #61	; 0x3d
 8001326:	47a0      	blx	r4
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 800132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f040 808a 	bne.w	800144a <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	b25b      	sxtb	r3, r3
 800133a:	f023 030f 	bic.w	r3, r3, #15
 800133e:	b25a      	sxtb	r2, r3
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	b25b      	sxtb	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b25b      	sxtb	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <bno055_set_operation_mode+0x18c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	68dc      	ldr	r4, [r3, #12]
 8001358:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <bno055_set_operation_mode+0x18c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	7a58      	ldrb	r0, [r3, #9]
 800135e:	f107 020d 	add.w	r2, r7, #13
 8001362:	2301      	movs	r3, #1
 8001364:	213d      	movs	r1, #61	; 0x3d
 8001366:	47a0      	blx	r4
 8001368:	4603      	mov	r3, r0
 800136a:	b2da      	uxtb	r2, r3
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	4413      	add	r3, r2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001374:	4b38      	ldr	r3, [pc, #224]	; (8001458 <bno055_set_operation_mode+0x18c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800137e:	4798      	blx	r3
 8001380:	e063      	b.n	800144a <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <bno055_set_operation_mode+0x18c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	691c      	ldr	r4, [r3, #16]
 8001388:	4b33      	ldr	r3, [pc, #204]	; (8001458 <bno055_set_operation_mode+0x18c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	7a58      	ldrb	r0, [r3, #9]
 800138e:	f107 020d 	add.w	r2, r7, #13
 8001392:	2301      	movs	r3, #1
 8001394:	213d      	movs	r1, #61	; 0x3d
 8001396:	47a0      	blx	r4
 8001398:	4603      	mov	r3, r0
 800139a:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 800139c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d116      	bne.n	80013d2 <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 80013a4:	7b7b      	ldrb	r3, [r7, #13]
 80013a6:	f023 030f 	bic.w	r3, r3, #15
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 80013ae:	f107 030d 	add.w	r3, r7, #13
 80013b2:	2201      	movs	r2, #1
 80013b4:	4619      	mov	r1, r3
 80013b6:	203d      	movs	r0, #61	; 0x3d
 80013b8:	f7ff fd46 	bl	8000e48 <bno055_write_register>
 80013bc:	4603      	mov	r3, r0
 80013be:	b2da      	uxtb	r2, r3
                    com_rslt +=
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	4413      	add	r3, r2
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <bno055_set_operation_mode+0x18c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2014      	movs	r0, #20
 80013d0:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d038      	beq.n	800144a <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <bno055_set_operation_mode+0x18c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	691c      	ldr	r4, [r3, #16]
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <bno055_set_operation_mode+0x18c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	7a58      	ldrb	r0, [r3, #9]
 80013e4:	f107 020d 	add.w	r2, r7, #13
 80013e8:	2301      	movs	r3, #1
 80013ea:	213d      	movs	r1, #61	; 0x3d
 80013ec:	47a0      	blx	r4
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 80013f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d127      	bne.n	800144a <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80013fa:	7b7b      	ldrb	r3, [r7, #13]
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	f023 030f 	bic.w	r3, r3, #15
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	b25b      	sxtb	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <bno055_set_operation_mode+0x18c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68dc      	ldr	r4, [r3, #12]
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <bno055_set_operation_mode+0x18c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	7a58      	ldrb	r0, [r3, #9]
 8001422:	f107 020d 	add.w	r2, r7, #13
 8001426:	2301      	movs	r3, #1
 8001428:	213d      	movs	r1, #61	; 0x3d
 800142a:	47a0      	blx	r4
 800142c:	4603      	mov	r3, r0
 800142e:	b2da      	uxtb	r2, r3
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	4413      	add	r3, r2
 8001434:	b2db      	uxtb	r3, r3
 8001436:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <bno055_set_operation_mode+0x18c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001442:	4798      	blx	r3
 8001444:	e001      	b.n	800144a <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001446:	23ff      	movs	r3, #255	; 0xff
 8001448:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	bf00      	nop
 8001458:	20000238 	.word	0x20000238

0800145c <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 800145c:	b590      	push	{r4, r7, lr}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800146a:	2300      	movs	r3, #0
 800146c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800146e:	2300      	movs	r3, #0
 8001470:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001472:	23ff      	movs	r3, #255	; 0xff
 8001474:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001476:	4b35      	ldr	r3, [pc, #212]	; (800154c <bno055_set_power_mode+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 800147e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001482:	e05f      	b.n	8001544 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fedd 	bl	8001248 <bno055_get_operation_mode>
 800148e:	4603      	mov	r3, r0
 8001490:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d143      	bne.n	8001522 <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800149a:	7b3b      	ldrb	r3, [r7, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ff13 	bl	80012cc <bno055_set_operation_mode>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	7bbb      	ldrb	r3, [r7, #14]
 80014ac:	4413      	add	r3, r2
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80014b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d130      	bne.n	800151c <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <bno055_set_power_mode+0xf0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	691c      	ldr	r4, [r3, #16]
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <bno055_set_power_mode+0xf0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	7a58      	ldrb	r0, [r3, #9]
 80014c6:	f107 020d 	add.w	r2, r7, #13
 80014ca:	2301      	movs	r3, #1
 80014cc:	213e      	movs	r1, #62	; 0x3e
 80014ce:	47a0      	blx	r4
 80014d0:	4603      	mov	r3, r0
 80014d2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80014d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d124      	bne.n	8001526 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 80014dc:	7b7b      	ldrb	r3, [r7, #13]
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	f023 0303 	bic.w	r3, r3, #3
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	4313      	orrs	r3, r2
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <bno055_set_power_mode+0xf0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68dc      	ldr	r4, [r3, #12]
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <bno055_set_power_mode+0xf0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	7a58      	ldrb	r0, [r3, #9]
 8001504:	f107 020d 	add.w	r2, r7, #13
 8001508:	2301      	movs	r3, #1
 800150a:	213e      	movs	r1, #62	; 0x3e
 800150c:	47a0      	blx	r4
 800150e:	4603      	mov	r3, r0
 8001510:	b2da      	uxtb	r2, r3
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	4413      	add	r3, r2
 8001516:	b2db      	uxtb	r3, r3
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	e004      	b.n	8001526 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 800151c:	23ff      	movs	r3, #255	; 0xff
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e001      	b.n	8001526 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001526:	7b3b      	ldrb	r3, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800152c:	7b3b      	ldrb	r3, [r7, #12]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fecc 	bl	80012cc <bno055_set_operation_mode>
 8001534:	4603      	mov	r3, r0
 8001536:	b2da      	uxtb	r2, r3
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	4413      	add	r3, r2
 800153c:	b2db      	uxtb	r3, r3
 800153e:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	20000238 	.word	0x20000238

08001550 <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <I2C_routine+0x28>)
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <I2C_routine+0x2c>)
 8001558:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <I2C_routine+0x28>)
 800155c:	4a08      	ldr	r2, [pc, #32]	; (8001580 <I2C_routine+0x30>)
 800155e:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <I2C_routine+0x28>)
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <I2C_routine+0x34>)
 8001564:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <I2C_routine+0x28>)
 8001568:	2229      	movs	r2, #41	; 0x29
 800156a:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	20000b94 	.word	0x20000b94
 800157c:	08001589 	.word	0x08001589
 8001580:	08001601 	.word	0x08001601
 8001584:	08001691 	.word	0x08001691

08001588 <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af02      	add	r7, sp, #8
 800158e:	603a      	str	r2, [r7, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	460b      	mov	r3, r1
 8001598:	71bb      	strb	r3, [r7, #6]
 800159a:	4613      	mov	r3, r2
 800159c:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]
 80015ae:	e00d      	b.n	80015cc <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	441a      	add	r2, r3
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	3301      	adds	r3, #1
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	f107 0118 	add.w	r1, r7, #24
 80015c0:	440b      	add	r3, r1
 80015c2:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	3301      	adds	r3, #1
 80015ca:	75fb      	strb	r3, [r7, #23]
 80015cc:	7dfa      	ldrb	r2, [r7, #23]
 80015ce:	797b      	ldrb	r3, [r7, #5]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d3ed      	bcc.n	80015b0 <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 80015d4:	797b      	ldrb	r3, [r7, #5]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	b299      	uxth	r1, r3
 80015dc:	f107 0208 	add.w	r2, r7, #8
 80015e0:	230a      	movs	r3, #10
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	460b      	mov	r3, r1
 80015e6:	2152      	movs	r1, #82	; 0x52
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <BNO055_I2C_bus_write+0x74>)
 80015ea:	f002 ffaf 	bl	800454c <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	b25b      	sxtb	r3, r3
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000c50 	.word	0x20000c50

08001600 <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af02      	add	r7, sp, #8
 8001606:	603a      	str	r2, [r7, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	460b      	mov	r3, r1
 8001610:	71bb      	strb	r3, [r7, #6]
 8001612:	4613      	mov	r3, r2
 8001614:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8001624:	2300      	movs	r3, #0
 8001626:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001628:	79bb      	ldrb	r3, [r7, #6]
 800162a:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]
 8001630:	e00c      	b.n	800164c <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 8001632:	7dfa      	ldrb	r2, [r7, #23]
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	6839      	ldr	r1, [r7, #0]
 8001638:	440b      	add	r3, r1
 800163a:	f107 0118 	add.w	r1, r7, #24
 800163e:	440a      	add	r2, r1
 8001640:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001644:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	3301      	adds	r3, #1
 800164a:	75fb      	strb	r3, [r7, #23]
 800164c:	7dfa      	ldrb	r2, [r7, #23]
 800164e:	797b      	ldrb	r3, [r7, #5]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3ee      	bcc.n	8001632 <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 8001654:	797b      	ldrb	r3, [r7, #5]
 8001656:	b299      	uxth	r1, r3
 8001658:	f107 0208 	add.w	r2, r7, #8
 800165c:	230a      	movs	r3, #10
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	460b      	mov	r3, r1
 8001662:	2152      	movs	r1, #82	; 0x52
 8001664:	4809      	ldr	r0, [pc, #36]	; (800168c <BNO055_I2C_bus_read+0x8c>)
 8001666:	f002 ff71 	bl	800454c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	b29a      	uxth	r2, r3
 800166e:	230a      	movs	r3, #10
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4613      	mov	r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	2152      	movs	r1, #82	; 0x52
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <BNO055_I2C_bus_read+0x8c>)
 800167a:	f003 f85b 	bl	8004734 <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	b25b      	sxtb	r3, r3
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000c50 	.word	0x20000c50

08001690 <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f001 fb61 	bl	8002d60 <HAL_Delay>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <BNOInit>:

void BNOInit()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	I2C_routine();
 80016ac:	f7ff ff50 	bl	8001550 <I2C_routine>
	comres = bno055_init(&bno055);
 80016b0:	4810      	ldr	r0, [pc, #64]	; (80016f4 <BNOInit+0x4c>)
 80016b2:	f7ff fb07 	bl	8000cc4 <bno055_init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <BNOInit+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <BNOInit+0x54>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 80016c4:	4b0d      	ldr	r3, [pc, #52]	; (80016fc <BNOInit+0x54>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fec7 	bl	800145c <bno055_set_power_mode>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <BNOInit+0x50>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a07      	ldr	r2, [pc, #28]	; (80016f8 <BNOInit+0x50>)
 80016da:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 80016dc:	200c      	movs	r0, #12
 80016de:	f7ff fdf5 	bl	80012cc <bno055_set_operation_mode>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <BNOInit+0x50>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a02      	ldr	r2, [pc, #8]	; (80016f8 <BNOInit+0x50>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000b94 	.word	0x20000b94
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000a7c 	.word	0x20000a7c

08001700 <readBNOAnglesDeg>:

void readBNOAnglesDeg()
{
 8001700:	b598      	push	{r3, r4, r7, lr}
 8001702:	af00      	add	r7, sp, #0
//	comres += bno055_convert_double_euler_h_deg(&d_euler_data_h);
//	comres += bno055_convert_double_euler_r_deg(&d_euler_data_r);
//	comres += bno055_convert_double_euler_p_deg(&d_euler_data_p);
	comres += bno055_convert_double_euler_hpr_deg(&d_euler_hpr);
 8001704:	480e      	ldr	r0, [pc, #56]	; (8001740 <readBNOAnglesDeg+0x40>)
 8001706:	f7ff fc77 	bl	8000ff8 <bno055_convert_double_euler_hpr_deg>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <readBNOAnglesDeg+0x44>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <readBNOAnglesDeg+0x44>)
 8001716:	6013      	str	r3, [r2, #0]
	Roll = d_euler_hpr.p;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <readBNOAnglesDeg+0x40>)
 800171a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <readBNOAnglesDeg+0x48>)
 8001720:	e9c2 3400 	strd	r3, r4, [r2]
	Pitch = d_euler_hpr.r;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <readBNOAnglesDeg+0x40>)
 8001726:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800172a:	4a08      	ldr	r2, [pc, #32]	; (800174c <readBNOAnglesDeg+0x4c>)
 800172c:	e9c2 3400 	strd	r3, r4, [r2]
	Yaw = d_euler_hpr.h;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <readBNOAnglesDeg+0x40>)
 8001732:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001736:	4a06      	ldr	r2, [pc, #24]	; (8001750 <readBNOAnglesDeg+0x50>)
 8001738:	e9c2 3400 	strd	r3, r4, [r2]
}
 800173c:	bf00      	nop
 800173e:	bd98      	pop	{r3, r4, r7, pc}
 8001740:	20000ea8 	.word	0x20000ea8
 8001744:	20000000 	.word	0x20000000
 8001748:	20000a80 	.word	0x20000a80
 800174c:	20000a88 	.word	0x20000a88
 8001750:	20000a90 	.word	0x20000a90

08001754 <MS56XXReset>:
int64_t OFF = 0;
int64_t SNES = 0;
int32_t P = 0;

void MS56XXReset(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2110      	movs	r1, #16
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <MS56XXReset+0x40>)
 800175e:	f002 fe4b 	bl	80043f8 <HAL_GPIO_WritePin>
	SPITX[0] = 0x1E;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MS56XXReset+0x44>)
 8001764:	221e      	movs	r2, #30
 8001766:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	2201      	movs	r2, #1
 800176e:	490a      	ldr	r1, [pc, #40]	; (8001798 <MS56XXReset+0x44>)
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <MS56XXReset+0x48>)
 8001772:	f005 fbb3 	bl	8006edc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001776:	bf00      	nop
 8001778:	4808      	ldr	r0, [pc, #32]	; (800179c <MS56XXReset+0x48>)
 800177a:	f006 f850 	bl	800781e <HAL_SPI_GetState>
 800177e:	4603      	mov	r3, r0
 8001780:	2b02      	cmp	r3, #2
 8001782:	d0f9      	beq.n	8001778 <MS56XXReset+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	2110      	movs	r1, #16
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <MS56XXReset+0x40>)
 800178a:	f002 fe35 	bl	80043f8 <HAL_GPIO_WritePin>
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40020000 	.word	0x40020000
 8001798:	2000023c 	.word	0x2000023c
 800179c:	20000dc0 	.word	0x20000dc0

080017a0 <MS56XXReadProm>:

uint16_t MS56XXReadProm(uint8_t address)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = address;
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MS56XXReadProm+0x78>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2110      	movs	r1, #16
 80017b4:	4819      	ldr	r0, [pc, #100]	; (800181c <MS56XXReadProm+0x7c>)
 80017b6:	f002 fe1f 	bl	80043f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	2201      	movs	r2, #1
 80017c0:	4915      	ldr	r1, [pc, #84]	; (8001818 <MS56XXReadProm+0x78>)
 80017c2:	4817      	ldr	r0, [pc, #92]	; (8001820 <MS56XXReadProm+0x80>)
 80017c4:	f005 fb8a 	bl	8006edc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80017c8:	bf00      	nop
 80017ca:	4815      	ldr	r0, [pc, #84]	; (8001820 <MS56XXReadProm+0x80>)
 80017cc:	f006 f827 	bl	800781e <HAL_SPI_GetState>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d0f9      	beq.n	80017ca <MS56XXReadProm+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[0], 1, HAL_MAX_DELAY);
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	2201      	movs	r2, #1
 80017dc:	4911      	ldr	r1, [pc, #68]	; (8001824 <MS56XXReadProm+0x84>)
 80017de:	4810      	ldr	r0, [pc, #64]	; (8001820 <MS56XXReadProm+0x80>)
 80017e0:	f005 fce2 	bl	80071a8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[1], 1, HAL_MAX_DELAY);
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	2201      	movs	r2, #1
 80017ea:	490f      	ldr	r1, [pc, #60]	; (8001828 <MS56XXReadProm+0x88>)
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <MS56XXReadProm+0x80>)
 80017ee:	f005 fcdb 	bl	80071a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2110      	movs	r1, #16
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <MS56XXReadProm+0x7c>)
 80017f8:	f002 fdfe 	bl	80043f8 <HAL_GPIO_WritePin>
	return (SPIRX2Byte[0]<<8) + SPIRX2Byte[1];
 80017fc:	4b09      	ldr	r3, [pc, #36]	; (8001824 <MS56XXReadProm+0x84>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	b29a      	uxth	r2, r3
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <MS56XXReadProm+0x84>)
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4413      	add	r3, r2
 800180e:	b29b      	uxth	r3, r3
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	2000023c 	.word	0x2000023c
 800181c:	40020000 	.word	0x40020000
 8001820:	20000dc0 	.word	0x20000dc0
 8001824:	20000240 	.word	0x20000240
 8001828:	20000241 	.word	0x20000241

0800182c <MS56XXInit>:

void MS56XXInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	MS56XXReset();
 8001830:	f7ff ff90 	bl	8001754 <MS56XXReset>
	MS56XXReadProm(0xA0);
 8001834:	20a0      	movs	r0, #160	; 0xa0
 8001836:	f7ff ffb3 	bl	80017a0 <MS56XXReadProm>
	Coeff1 = MS56XXReadProm(0xA2);
 800183a:	20a2      	movs	r0, #162	; 0xa2
 800183c:	f7ff ffb0 	bl	80017a0 <MS56XXReadProm>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <MS56XXInit+0xa8>)
 8001846:	801a      	strh	r2, [r3, #0]
	Coeff2 = MS56XXReadProm(0xA4);
 8001848:	20a4      	movs	r0, #164	; 0xa4
 800184a:	f7ff ffa9 	bl	80017a0 <MS56XXReadProm>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <MS56XXInit+0xac>)
 8001854:	801a      	strh	r2, [r3, #0]
	Coeff3 = MS56XXReadProm(0xA6);
 8001856:	20a6      	movs	r0, #166	; 0xa6
 8001858:	f7ff ffa2 	bl	80017a0 <MS56XXReadProm>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <MS56XXInit+0xb0>)
 8001862:	801a      	strh	r2, [r3, #0]
	Coeff4 = MS56XXReadProm(0xA8);
 8001864:	20a8      	movs	r0, #168	; 0xa8
 8001866:	f7ff ff9b 	bl	80017a0 <MS56XXReadProm>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MS56XXInit+0xb4>)
 8001870:	801a      	strh	r2, [r3, #0]
	Coeff5 = MS56XXReadProm(0xAA);
 8001872:	20aa      	movs	r0, #170	; 0xaa
 8001874:	f7ff ff94 	bl	80017a0 <MS56XXReadProm>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <MS56XXInit+0xb8>)
 800187e:	801a      	strh	r2, [r3, #0]
	Coeff6 = MS56XXReadProm(0xAC);
 8001880:	20ac      	movs	r0, #172	; 0xac
 8001882:	f7ff ff8d 	bl	80017a0 <MS56XXReadProm>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MS56XXInit+0xbc>)
 800188c:	801a      	strh	r2, [r3, #0]
	MSCRC = MS56XXReadProm(0xAE);
 800188e:	20ae      	movs	r0, #174	; 0xae
 8001890:	f7ff ff86 	bl	80017a0 <MS56XXReadProm>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MS56XXInit+0xc0>)
 800189a:	801a      	strh	r2, [r3, #0]

	MS56XXSendCmd(0x58);
 800189c:	2058      	movs	r0, #88	; 0x58
 800189e:	f000 f82b 	bl	80018f8 <MS56XXSendCmd>
	HAL_Delay(9);
 80018a2:	2009      	movs	r0, #9
 80018a4:	f001 fa5c 	bl	8002d60 <HAL_Delay>
	RawTemp = MS56XXRead3Bytes(0);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f000 f855 	bl	8001958 <MS56XXRead3Bytes>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MS56XXInit+0xc4>)
 80018b2:	601a      	str	r2, [r3, #0]

	MS56XXSendCmd(0x48);
 80018b4:	2048      	movs	r0, #72	; 0x48
 80018b6:	f000 f81f 	bl	80018f8 <MS56XXSendCmd>
	HAL_Delay(9);
 80018ba:	2009      	movs	r0, #9
 80018bc:	f001 fa50 	bl	8002d60 <HAL_Delay>
	RawPressure = MS56XXRead3Bytes(0);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 f849 	bl	8001958 <MS56XXRead3Bytes>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MS56XXInit+0xc8>)
 80018ca:	601a      	str	r2, [r3, #0]
	GetAltitudeAndTemp();
 80018cc:	f000 f898 	bl	8001a00 <GetAltitudeAndTemp>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000248 	.word	0x20000248
 80018d8:	2000024a 	.word	0x2000024a
 80018dc:	2000024c 	.word	0x2000024c
 80018e0:	2000024e 	.word	0x2000024e
 80018e4:	20000250 	.word	0x20000250
 80018e8:	20000252 	.word	0x20000252
 80018ec:	20000254 	.word	0x20000254
 80018f0:	20000258 	.word	0x20000258
 80018f4:	2000025c 	.word	0x2000025c

080018f8 <MS56XXSendCmd>:

void MS56XXSendCmd(uint8_t Cmd)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2110      	movs	r1, #16
 8001906:	4810      	ldr	r0, [pc, #64]	; (8001948 <MS56XXSendCmd+0x50>)
 8001908:	f002 fd76 	bl	80043f8 <HAL_GPIO_WritePin>
	SPITX[0] = Cmd;
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <MS56XXSendCmd+0x54>)
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	2201      	movs	r2, #1
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <MS56XXSendCmd+0x54>)
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MS56XXSendCmd+0x58>)
 800191c:	f005 fade 	bl	8006edc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001920:	bf00      	nop
 8001922:	480b      	ldr	r0, [pc, #44]	; (8001950 <MS56XXSendCmd+0x58>)
 8001924:	f005 ff7b 	bl	800781e <HAL_SPI_GetState>
 8001928:	4603      	mov	r3, r0
 800192a:	2b02      	cmp	r3, #2
 800192c:	d0f9      	beq.n	8001922 <MS56XXSendCmd+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2110      	movs	r1, #16
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MS56XXSendCmd+0x50>)
 8001934:	f002 fd60 	bl	80043f8 <HAL_GPIO_WritePin>
	isCmdSet = true;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MS56XXSendCmd+0x5c>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40020000 	.word	0x40020000
 800194c:	2000023c 	.word	0x2000023c
 8001950:	20000dc0 	.word	0x20000dc0
 8001954:	20000256 	.word	0x20000256

08001958 <MS56XXRead3Bytes>:

uint32_t MS56XXRead3Bytes(uint8_t address)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = 0x00;
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <MS56XXRead3Bytes+0x8c>)
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2110      	movs	r1, #16
 800196c:	481e      	ldr	r0, [pc, #120]	; (80019e8 <MS56XXRead3Bytes+0x90>)
 800196e:	f002 fd43 	bl	80043f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	2201      	movs	r2, #1
 8001978:	491a      	ldr	r1, [pc, #104]	; (80019e4 <MS56XXRead3Bytes+0x8c>)
 800197a:	481c      	ldr	r0, [pc, #112]	; (80019ec <MS56XXRead3Bytes+0x94>)
 800197c:	f005 faae 	bl	8006edc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001980:	bf00      	nop
 8001982:	481a      	ldr	r0, [pc, #104]	; (80019ec <MS56XXRead3Bytes+0x94>)
 8001984:	f005 ff4b 	bl	800781e <HAL_SPI_GetState>
 8001988:	4603      	mov	r3, r0
 800198a:	2b02      	cmp	r3, #2
 800198c:	d0f9      	beq.n	8001982 <MS56XXRead3Bytes+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[0], 1, HAL_MAX_DELAY);
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	2201      	movs	r2, #1
 8001994:	4916      	ldr	r1, [pc, #88]	; (80019f0 <MS56XXRead3Bytes+0x98>)
 8001996:	4815      	ldr	r0, [pc, #84]	; (80019ec <MS56XXRead3Bytes+0x94>)
 8001998:	f005 fc06 	bl	80071a8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[1], 1, HAL_MAX_DELAY);
 800199c:	f04f 33ff 	mov.w	r3, #4294967295
 80019a0:	2201      	movs	r2, #1
 80019a2:	4914      	ldr	r1, [pc, #80]	; (80019f4 <MS56XXRead3Bytes+0x9c>)
 80019a4:	4811      	ldr	r0, [pc, #68]	; (80019ec <MS56XXRead3Bytes+0x94>)
 80019a6:	f005 fbff 	bl	80071a8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[2], 1, HAL_MAX_DELAY);
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	2201      	movs	r2, #1
 80019b0:	4911      	ldr	r1, [pc, #68]	; (80019f8 <MS56XXRead3Bytes+0xa0>)
 80019b2:	480e      	ldr	r0, [pc, #56]	; (80019ec <MS56XXRead3Bytes+0x94>)
 80019b4:	f005 fbf8 	bl	80071a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	2110      	movs	r1, #16
 80019bc:	480a      	ldr	r0, [pc, #40]	; (80019e8 <MS56XXRead3Bytes+0x90>)
 80019be:	f002 fd1b 	bl	80043f8 <HAL_GPIO_WritePin>
	isCmdSet = false;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MS56XXRead3Bytes+0xa4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
	return (SPIRX3Byte[0] << 16) + (SPIRX3Byte[1] << 8 ) + (SPIRX3Byte[0]);
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MS56XXRead3Bytes+0x98>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MS56XXRead3Bytes+0x98>)
 80019d0:	785b      	ldrb	r3, [r3, #1]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	4413      	add	r3, r2
 80019d6:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <MS56XXRead3Bytes+0x98>)
 80019d8:	7812      	ldrb	r2, [r2, #0]
 80019da:	4413      	add	r3, r2
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000023c 	.word	0x2000023c
 80019e8:	40020000 	.word	0x40020000
 80019ec:	20000dc0 	.word	0x20000dc0
 80019f0:	20000244 	.word	0x20000244
 80019f4:	20000245 	.word	0x20000245
 80019f8:	20000246 	.word	0x20000246
 80019fc:	20000256 	.word	0x20000256

08001a00 <GetAltitudeAndTemp>:

uint16_t GetAltitudeAndTemp(void)
{
 8001a00:	b4f0      	push	{r4, r5, r6, r7}
 8001a02:	af00      	add	r7, sp, #0
	dT = RawTemp - Coeff5 * 256;
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <GetAltitudeAndTemp+0x124>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <GetAltitudeAndTemp+0x128>)
 8001a0a:	8812      	ldrh	r2, [r2, #0]
 8001a0c:	0212      	lsls	r2, r2, #8
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <GetAltitudeAndTemp+0x12c>)
 8001a14:	601a      	str	r2, [r3, #0]
	TEMP = 2000 + dT * Coeff6 / 8388608;
 8001a16:	4b46      	ldr	r3, [pc, #280]	; (8001b30 <GetAltitudeAndTemp+0x130>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <GetAltitudeAndTemp+0x12c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	fb03 f302 	mul.w	r3, r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da02      	bge.n	8001a2e <GetAltitudeAndTemp+0x2e>
 8001a28:	4a42      	ldr	r2, [pc, #264]	; (8001b34 <GetAltitudeAndTemp+0x134>)
 8001a2a:	441a      	add	r2, r3
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	15db      	asrs	r3, r3, #23
 8001a30:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a34:	4a40      	ldr	r2, [pc, #256]	; (8001b38 <GetAltitudeAndTemp+0x138>)
 8001a36:	6013      	str	r3, [r2, #0]
	OFF = Coeff2 * 131072 + Coeff4 * dT / 64;
 8001a38:	4b40      	ldr	r3, [pc, #256]	; (8001b3c <GetAltitudeAndTemp+0x13c>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	045a      	lsls	r2, r3, #17
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <GetAltitudeAndTemp+0x140>)
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	4619      	mov	r1, r3
 8001a44:	4b39      	ldr	r3, [pc, #228]	; (8001b2c <GetAltitudeAndTemp+0x12c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fb03 f301 	mul.w	r3, r3, r1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	da00      	bge.n	8001a52 <GetAltitudeAndTemp+0x52>
 8001a50:	333f      	adds	r3, #63	; 0x3f
 8001a52:	119b      	asrs	r3, r3, #6
 8001a54:	4413      	add	r3, r2
 8001a56:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a5a:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <GetAltitudeAndTemp+0x144>)
 8001a5c:	e9c2 3400 	strd	r3, r4, [r2]
	SNES = Coeff1 * 32768 + (Coeff3 * dT) / 127;
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <GetAltitudeAndTemp+0x148>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	03da      	lsls	r2, r3, #15
 8001a66:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <GetAltitudeAndTemp+0x14c>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	; (8001b2c <GetAltitudeAndTemp+0x12c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fb03 f301 	mul.w	r3, r3, r1
 8001a74:	4936      	ldr	r1, [pc, #216]	; (8001b50 <GetAltitudeAndTemp+0x150>)
 8001a76:	fb81 0103 	smull	r0, r1, r1, r3
 8001a7a:	4419      	add	r1, r3
 8001a7c:	1189      	asrs	r1, r1, #6
 8001a7e:	17db      	asrs	r3, r3, #31
 8001a80:	1acb      	subs	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001a88:	4a32      	ldr	r2, [pc, #200]	; (8001b54 <GetAltitudeAndTemp+0x154>)
 8001a8a:	e9c2 3400 	strd	r3, r4, [r2]
	P = ((RawPressure * SNES) / 2097152 - OFF) / 32768;
 8001a8e:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <GetAltitudeAndTemp+0x158>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <GetAltitudeAndTemp+0x154>)
 8001a9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a9e:	fb03 f502 	mul.w	r5, r3, r2
 8001aa2:	fb01 f004 	mul.w	r0, r1, r4
 8001aa6:	4428      	add	r0, r5
 8001aa8:	fba1 3403 	umull	r3, r4, r1, r3
 8001aac:	1902      	adds	r2, r0, r4
 8001aae:	4614      	mov	r4, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f174 0200 	sbcs.w	r2, r4, #0
 8001ab6:	da05      	bge.n	8001ac4 <GetAltitudeAndTemp+0xc4>
 8001ab8:	4928      	ldr	r1, [pc, #160]	; (8001b5c <GetAltitudeAndTemp+0x15c>)
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	185b      	adds	r3, r3, r1
 8001ac0:	eb44 0402 	adc.w	r4, r4, r2
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	0d59      	lsrs	r1, r3, #21
 8001ace:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 8001ad2:	1562      	asrs	r2, r4, #21
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <GetAltitudeAndTemp+0x144>)
 8001ad6:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001ada:	460b      	mov	r3, r1
 8001adc:	4614      	mov	r4, r2
 8001ade:	1b5b      	subs	r3, r3, r5
 8001ae0:	eb64 0406 	sbc.w	r4, r4, r6
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f174 0200 	sbcs.w	r2, r4, #0
 8001aea:	da06      	bge.n	8001afa <GetAltitudeAndTemp+0xfa>
 8001aec:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	185b      	adds	r3, r3, r1
 8001af6:	eb44 0402 	adc.w	r4, r4, r2
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	0bd9      	lsrs	r1, r3, #15
 8001b04:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8001b08:	13e2      	asrs	r2, r4, #15
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4614      	mov	r4, r2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b13      	ldr	r3, [pc, #76]	; (8001b60 <GetAltitudeAndTemp+0x160>)
 8001b12:	601a      	str	r2, [r3, #0]
	return P;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <GetAltitudeAndTemp+0x160>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	b29b      	uxth	r3, r3
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000258 	.word	0x20000258
 8001b28:	20000250 	.word	0x20000250
 8001b2c:	20000260 	.word	0x20000260
 8001b30:	20000252 	.word	0x20000252
 8001b34:	007fffff 	.word	0x007fffff
 8001b38:	20000264 	.word	0x20000264
 8001b3c:	2000024a 	.word	0x2000024a
 8001b40:	2000024e 	.word	0x2000024e
 8001b44:	20000268 	.word	0x20000268
 8001b48:	20000248 	.word	0x20000248
 8001b4c:	2000024c 	.word	0x2000024c
 8001b50:	81020409 	.word	0x81020409
 8001b54:	20000270 	.word	0x20000270
 8001b58:	2000025c 	.word	0x2000025c
 8001b5c:	001fffff 	.word	0x001fffff
 8001b60:	20000278 	.word	0x20000278

08001b64 <SendToScreen>:
 */
#include "main.h"
#include "string.h"

void SendToScreen(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, USBTXArray, 150,4); // HAL_UART_Transmit(&huart2, USBTXArray, 1024,3); TIM2->CCR1
 8001b68:	2304      	movs	r3, #4
 8001b6a:	2296      	movs	r2, #150	; 0x96
 8001b6c:	4905      	ldr	r1, [pc, #20]	; (8001b84 <SendToScreen+0x20>)
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <SendToScreen+0x24>)
 8001b70:	f006 fdde 	bl	8008730 <HAL_UART_Transmit>
	memset(USBTXArray,0, 150);
 8001b74:	2296      	movs	r2, #150	; 0x96
 8001b76:	2100      	movs	r1, #0
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <SendToScreen+0x20>)
 8001b7a:	f00a fa6b 	bl	800c054 <memset>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000067c 	.word	0x2000067c
 8001b88:	20000e24 	.word	0x20000e24

08001b8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b96:	f001 f886 	bl	8002ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b9a:	f000 f8f9 	bl	8001d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b9e:	f000 fbf3 	bl	8002388 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ba2:	f000 fbcb 	bl	800233c <MX_DMA_Init>
  MX_TIM4_Init();
 8001ba6:	f000 fb27 	bl	80021f8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001baa:	f000 fa87 	bl	80020bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001bae:	f000 fb95 	bl	80022dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001bb2:	f000 f9d9 	bl	8001f68 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001bb6:	f007 fdf1 	bl	800979c <MX_FATFS_Init>
  MX_QUADSPI_Init();
 8001bba:	f000 fa15 	bl	8001fe8 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8001bbe:	f000 fa3f 	bl	8002040 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001bc2:	f000 f97f 	bl	8001ec4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Init(&htim1);	// PWM Generation Servos
 8001bc6:	485c      	ldr	r0, [pc, #368]	; (8001d38 <main+0x1ac>)
 8001bc8:	f005 ffac 	bl	8007b24 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim4); 	// LED
 8001bcc:	485b      	ldr	r0, [pc, #364]	; (8001d3c <main+0x1b0>)
 8001bce:	f005 ffa9 	bl	8007b24 <HAL_TIM_PWM_Init>
	HAL_ADC_Start(&hadc1);		// Battery
 8001bd2:	485b      	ldr	r0, [pc, #364]	; (8001d40 <main+0x1b4>)
 8001bd4:	f001 f92a 	bl	8002e2c <HAL_ADC_Start>
//	HAL_TIM_IC_Init(&htim2);		//
//	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);


	vBat = measureBattery();
 8001bd8:	f000 fc8e 	bl	80024f8 <measureBattery>
 8001bdc:	eeb0 7b40 	vmov.f64	d7, d0
 8001be0:	4b58      	ldr	r3, [pc, #352]	; (8001d44 <main+0x1b8>)
 8001be2:	ed83 7b00 	vstr	d7, [r3]

	MS56XXInit();
 8001be6:	f7ff fe21 	bl	800182c <MS56XXInit>

//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); 	// QSPI CS Low
//	HAL_Delay(15);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); 	// QSPI WP High
 8001bea:	2201      	movs	r2, #1
 8001bec:	2104      	movs	r1, #4
 8001bee:	4856      	ldr	r0, [pc, #344]	; (8001d48 <main+0x1bc>)
 8001bf0:	f002 fc02 	bl	80043f8 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001bf4:	200f      	movs	r0, #15
 8001bf6:	f001 f8b3 	bl	8002d60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);		// QSPI RST High
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	4853      	ldr	r0, [pc, #332]	; (8001d4c <main+0x1c0>)
 8001c00:	f002 fbfa 	bl	80043f8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f001 f8ab 	bl	8002d60 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);		// QSPI RST High
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	484f      	ldr	r0, [pc, #316]	; (8001d4c <main+0x1c0>)
 8001c10:	f002 fbf2 	bl	80043f8 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001c14:	200f      	movs	r0, #15
 8001c16:	f001 f8a3 	bl	8002d60 <HAL_Delay>

	  QSPI_Init();
 8001c1a:	f7fe fe09 	bl	8000830 <QSPI_Init>

	  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <main+0x1c4>)
 8001c20:	4a4c      	ldr	r2, [pc, #304]	; (8001d54 <main+0x1c8>)
 8001c22:	494d      	ldr	r1, [pc, #308]	; (8001d58 <main+0x1cc>)
 8001c24:	484d      	ldr	r0, [pc, #308]	; (8001d5c <main+0x1d0>)
 8001c26:	f7fe fe9f 	bl	8000968 <QSPI_Read_Status_registers>

	  QSPI_READMD(&MID,&DID);
 8001c2a:	494d      	ldr	r1, [pc, #308]	; (8001d60 <main+0x1d4>)
 8001c2c:	484d      	ldr	r0, [pc, #308]	; (8001d64 <main+0x1d8>)
 8001c2e:	f7fe fe59 	bl	80008e4 <QSPI_READMD>

	  QSPI_WriteEnable();
 8001c32:	f7fe fe0d 	bl	8000850 <QSPI_WriteEnable>

	  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8001c36:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <main+0x1c4>)
 8001c38:	4a46      	ldr	r2, [pc, #280]	; (8001d54 <main+0x1c8>)
 8001c3a:	4947      	ldr	r1, [pc, #284]	; (8001d58 <main+0x1cc>)
 8001c3c:	4847      	ldr	r0, [pc, #284]	; (8001d5c <main+0x1d0>)
 8001c3e:	f7fe fe93 	bl	8000968 <QSPI_Read_Status_registers>

	do
	{
		HAL_Delay(1);
 8001c42:	2001      	movs	r0, #1
 8001c44:	f001 f88c 	bl	8002d60 <HAL_Delay>
		FS_ret = f_mount(&USERFatFS, "\\", 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	4947      	ldr	r1, [pc, #284]	; (8001d68 <main+0x1dc>)
 8001c4c:	4847      	ldr	r0, [pc, #284]	; (8001d6c <main+0x1e0>)
 8001c4e:	f009 fa95 	bl	800b17c <f_mount>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <main+0x1e4>)
 8001c58:	701a      	strb	r2, [r3, #0]
	} while (FS_ret != FR_OK);
 8001c5a:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <main+0x1e4>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ef      	bne.n	8001c42 <main+0xb6>

	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;
	uint8_t buffer[_MAX_SS];
	FS_ret = f_getfree("\\", &free_clusters, &getFreeFs);
 8001c62:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001c66:	f241 0304 	movw	r3, #4100	; 0x1004
 8001c6a:	443b      	add	r3, r7
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	483e      	ldr	r0, [pc, #248]	; (8001d68 <main+0x1dc>)
 8001c70:	f009 fc88 	bl	800b584 <f_getfree>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <main+0x1e4>)
 8001c7a:	701a      	strb	r2, [r3, #0]
	if (FS_ret != FR_OK)
 8001c7c:	4b3c      	ldr	r3, [pc, #240]	; (8001d70 <main+0x1e4>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d010      	beq.n	8001ca6 <main+0x11a>
	{
		FS_ret = f_mkfs("\\", FM_FAT, 0, buffer, sizeof(buffer));
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <main+0x1e8>)
 8001c86:	f241 0210 	movw	r2, #4112	; 0x1010
 8001c8a:	443a      	add	r2, r7
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c92:	9200      	str	r2, [sp, #0]
 8001c94:	2200      	movs	r2, #0
 8001c96:	2101      	movs	r1, #1
 8001c98:	4833      	ldr	r0, [pc, #204]	; (8001d68 <main+0x1dc>)
 8001c9a:	f009 fd29 	bl	800b6f0 <f_mkfs>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <main+0x1e4>)
 8001ca4:	701a      	strb	r2, [r3, #0]
//		while (1);
	}

	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8001ca6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	3b02      	subs	r3, #2
 8001cb0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	8952      	ldrh	r2, [r2, #10]
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	f241 020c 	movw	r2, #4108	; 0x100c
 8001cc0:	443a      	add	r2, r7
 8001cc2:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 8001cc4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	895b      	ldrh	r3, [r3, #10]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cd2:	443b      	add	r3, r7
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	fb03 f302 	mul.w	r3, r3, r2
 8001cda:	f241 0208 	movw	r2, #4104	; 0x1008
 8001cde:	443a      	add	r2, r7
 8001ce0:	6013      	str	r3, [r2, #0]

	do
	{
		HAL_Delay(1);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f001 f83c 	bl	8002d60 <HAL_Delay>
		FS_ret = f_open(&USERFile, "test.txt", FA_READ);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4923      	ldr	r1, [pc, #140]	; (8001d78 <main+0x1ec>)
 8001cec:	4823      	ldr	r0, [pc, #140]	; (8001d7c <main+0x1f0>)
 8001cee:	f009 fa8b 	bl	800b208 <f_open>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	; (8001d70 <main+0x1e4>)
 8001cf8:	701a      	strb	r2, [r3, #0]
	} while (FS_ret != FR_OK);
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <main+0x1e4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ef      	bne.n	8001ce2 <main+0x156>

	BNOInit();
 8001d02:	f7ff fcd1 	bl	80016a8 <BNOInit>

	led_init();
 8001d06:	f7fe ff93 	bl	8000c30 <led_init>

	readBNOAnglesDeg();
 8001d0a:	f7ff fcf9 	bl	8001700 <readBNOAnglesDeg>
	//Read Data from terminal - Example
	HAL_UART_Receive_DMA(&huart2, USBRXArray, 1024);
 8001d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d12:	491b      	ldr	r1, [pc, #108]	; (8001d80 <main+0x1f4>)
 8001d14:	481b      	ldr	r0, [pc, #108]	; (8001d84 <main+0x1f8>)
 8001d16:	f006 fe19 	bl	800894c <HAL_UART_Receive_DMA>
	//Write Data to terminal - Example
	ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);
 8001d1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1e:	491a      	ldr	r1, [pc, #104]	; (8001d88 <main+0x1fc>)
 8001d20:	4818      	ldr	r0, [pc, #96]	; (8001d84 <main+0x1f8>)
 8001d22:	f006 fd97 	bl	8008854 <HAL_UART_Transmit_DMA>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <main+0x200>)
 8001d2c:	701a      	strb	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		readBNOAnglesDeg();
 8001d2e:	f7ff fce7 	bl	8001700 <readBNOAnglesDeg>
//			SetRGB(250, 0, 0);
//		}
//		sprintf(USBTXArray, "%6.3f, Roll: %6.3f, Pitch: %6.3f, Yaw: %6.3f\r\n",
//				CurrentTime(), Roll, Pitch, Yaw);
//		SendToScreen();
		CheckButton();
 8001d32:	f7fe fc5d 	bl	80005f0 <CheckButton>
		readBNOAnglesDeg();
 8001d36:	e7fa      	b.n	8001d2e <main+0x1a2>
 8001d38:	20000d80 	.word	0x20000d80
 8001d3c:	20000c10 	.word	0x20000c10
 8001d40:	20000cc0 	.word	0x20000cc0
 8001d44:	20000a98 	.word	0x20000a98
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	20000aa4 	.word	0x20000aa4
 8001d54:	20000aa2 	.word	0x20000aa2
 8001d58:	20000aa0 	.word	0x20000aa0
 8001d5c:	20000ec4 	.word	0x20000ec4
 8001d60:	20000aa7 	.word	0x20000aa7
 8001d64:	20000aa6 	.word	0x20000aa6
 8001d68:	0800fa00 	.word	0x0800fa00
 8001d6c:	20001f4c 	.word	0x20001f4c
 8001d70:	20000b88 	.word	0x20000b88
 8001d74:	ffffeff0 	.word	0xffffeff0
 8001d78:	0800fa04 	.word	0x0800fa04
 8001d7c:	20000f1c 	.word	0x20000f1c
 8001d80:	2000027c 	.word	0x2000027c
 8001d84:	20000e24 	.word	0x20000e24
 8001d88:	2000067c 	.word	0x2000067c
 8001d8c:	20000ec0 	.word	0x20000ec0

08001d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0b8      	sub	sp, #224	; 0xe0
 8001d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d9a:	2234      	movs	r2, #52	; 0x34
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00a f958 	bl	800c054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	2290      	movs	r2, #144	; 0x90
 8001dba:	2100      	movs	r1, #0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f00a f949 	bl	800c054 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001dc2:	f003 f83f 	bl	8004e44 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <SystemClock_Config+0x12c>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a3c      	ldr	r2, [pc, #240]	; (8001ebc <SystemClock_Config+0x12c>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	; (8001ebc <SystemClock_Config+0x12c>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <SystemClock_Config+0x130>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a37      	ldr	r2, [pc, #220]	; (8001ec0 <SystemClock_Config+0x130>)
 8001de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <SystemClock_Config+0x130>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e12:	2319      	movs	r3, #25
 8001e14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001e18:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e26:	2302      	movs	r3, #2
 8001e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 feef 	bl	8005c14 <HAL_RCC_OscConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001e3c:	f000 fb82 	bl	8002544 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e40:	f003 f810 	bl	8004e64 <HAL_PWREx_EnableOverDrive>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001e4a:	f000 fb7b 	bl	8002544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e4e:	230f      	movs	r3, #15
 8001e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e54:	2302      	movs	r3, #2
 8001e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e70:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e74:	2107      	movs	r1, #7
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 f97a 	bl	8006170 <HAL_RCC_ClockConfig>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001e82:	f000 fb5f 	bl	8002544 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART2
 8001e86:	f244 0390 	movw	r3, #16528	; 0x4090
 8001e8a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e98:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fb64 	bl	800656c <HAL_RCCEx_PeriphCLKConfig>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8001eaa:	f000 fb4b 	bl	8002544 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8001eae:	f004 fa4b 	bl	8006348 <HAL_RCC_EnableCSS>
}
 8001eb2:	bf00      	nop
 8001eb4:	37e0      	adds	r7, #224	; 0xe0
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ed8:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <MX_ADC1_Init+0x9c>)
 8001eda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ede:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ee2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <MX_ADC1_Init+0xa0>)
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f26:	f000 ff3d 	bl	8002da4 <HAL_ADC_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f30:	f000 fb08 	bl	8002544 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001f34:	230d      	movs	r3, #13
 8001f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_ADC1_Init+0x98>)
 8001f46:	f001 f99d 	bl	8003284 <HAL_ADC_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f50:	f000 faf8 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000cc0 	.word	0x20000cc0
 8001f60:	40012000 	.word	0x40012000
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <MX_I2C1_Init+0x78>)
 8001f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f74:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <MX_I2C1_Init+0x7c>)
 8001f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f7a:	2252      	movs	r2, #82	; 0x52
 8001f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa2:	480e      	ldr	r0, [pc, #56]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001fa4:	f002 fa42 	bl	800442c <HAL_I2C_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fae:	f000 fac9 	bl	8002544 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4809      	ldr	r0, [pc, #36]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001fb6:	f002 fead 	bl	8004d14 <HAL_I2CEx_ConfigAnalogFilter>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fc0:	f000 fac0 	bl	8002544 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_I2C1_Init+0x74>)
 8001fc8:	f002 feef 	bl	8004daa <HAL_I2CEx_ConfigDigitalFilter>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fd2:	f000 fab7 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000c50 	.word	0x20000c50
 8001fe0:	40005400 	.word	0x40005400
 8001fe4:	6000030d 	.word	0x6000030d

08001fe8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <MX_QUADSPI_Init+0x54>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002000:	2210      	movs	r2, #16
 8002002:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002006:	2217      	movs	r2, #23
 8002008:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <MX_QUADSPI_Init+0x50>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002018:	2280      	movs	r2, #128	; 0x80
 800201a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <MX_QUADSPI_Init+0x50>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_QUADSPI_Init+0x50>)
 8002024:	f002 ff6e 	bl	8004f04 <HAL_QSPI_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 800202e:	f000 fa89 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000ec4 	.word	0x20000ec4
 800203c:	a0001000 	.word	0xa0001000

08002040 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <MX_SPI1_Init+0x74>)
 8002046:	4a1c      	ldr	r2, [pc, #112]	; (80020b8 <MX_SPI1_Init+0x78>)
 8002048:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800204a:	4b1a      	ldr	r3, [pc, #104]	; (80020b4 <MX_SPI1_Init+0x74>)
 800204c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002050:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <MX_SPI1_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <MX_SPI1_Init+0x74>)
 800205a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800205e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <MX_SPI1_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002066:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <MX_SPI1_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_SPI1_Init+0x74>)
 800206e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002072:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_SPI1_Init+0x74>)
 8002076:	2220      	movs	r2, #32
 8002078:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_SPI1_Init+0x74>)
 800207c:	2200      	movs	r2, #0
 800207e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_SPI1_Init+0x74>)
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <MX_SPI1_Init+0x74>)
 8002088:	2200      	movs	r2, #0
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_SPI1_Init+0x74>)
 800208e:	2207      	movs	r2, #7
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <MX_SPI1_Init+0x74>)
 8002094:	2200      	movs	r2, #0
 8002096:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_SPI1_Init+0x74>)
 800209a:	2208      	movs	r2, #8
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <MX_SPI1_Init+0x74>)
 80020a0:	f004 fe8a 	bl	8006db8 <HAL_SPI_Init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020aa:	f000 fa4b 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000dc0 	.word	0x20000dc0
 80020b8:	40013000 	.word	0x40013000

080020bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b096      	sub	sp, #88	; 0x58
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]
 80020de:	615a      	str	r2, [r3, #20]
 80020e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	222c      	movs	r2, #44	; 0x2c
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 ffb3 	bl	800c054 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020ee:	4b40      	ldr	r3, [pc, #256]	; (80021f0 <MX_TIM1_Init+0x134>)
 80020f0:	4a40      	ldr	r2, [pc, #256]	; (80021f4 <MX_TIM1_Init+0x138>)
 80020f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 80020f4:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <MX_TIM1_Init+0x134>)
 80020f6:	f240 221b 	movw	r2, #539	; 0x21b
 80020fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <MX_TIM1_Init+0x134>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <MX_TIM1_Init+0x134>)
 8002104:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002108:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210a:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <MX_TIM1_Init+0x134>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002110:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <MX_TIM1_Init+0x134>)
 8002112:	2200      	movs	r2, #0
 8002114:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002116:	4b36      	ldr	r3, [pc, #216]	; (80021f0 <MX_TIM1_Init+0x134>)
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800211c:	4834      	ldr	r0, [pc, #208]	; (80021f0 <MX_TIM1_Init+0x134>)
 800211e:	f005 fd01 	bl	8007b24 <HAL_TIM_PWM_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8002128:	f000 fa0c 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800212c:	2320      	movs	r3, #32
 800212e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8002130:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002134:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800213a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800213e:	4619      	mov	r1, r3
 8002140:	482b      	ldr	r0, [pc, #172]	; (80021f0 <MX_TIM1_Init+0x134>)
 8002142:	f006 f99b 	bl	800847c <HAL_TIMEx_MasterConfigSynchronization>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800214c:	f000 f9fa 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002150:	2360      	movs	r3, #96	; 0x60
 8002152:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 400;
 8002154:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215a:	2300      	movs	r3, #0
 800215c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800215e:	2300      	movs	r3, #0
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800216a:	2300      	movs	r3, #0
 800216c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800216e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002172:	2200      	movs	r2, #0
 8002174:	4619      	mov	r1, r3
 8002176:	481e      	ldr	r0, [pc, #120]	; (80021f0 <MX_TIM1_Init+0x134>)
 8002178:	f005 fd44 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002182:	f000 f9df 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800218a:	2208      	movs	r2, #8
 800218c:	4619      	mov	r1, r3
 800218e:	4818      	ldr	r0, [pc, #96]	; (80021f0 <MX_TIM1_Init+0x134>)
 8002190:	f005 fd38 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800219a:	f000 f9d3 	bl	8002544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4807      	ldr	r0, [pc, #28]	; (80021f0 <MX_TIM1_Init+0x134>)
 80021d4:	f006 f9e0 	bl	8008598 <HAL_TIMEx_ConfigBreakDeadTime>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80021de:	f000 f9b1 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021e2:	4803      	ldr	r0, [pc, #12]	; (80021f0 <MX_TIM1_Init+0x134>)
 80021e4:	f000 fb70 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 80021e8:	bf00      	nop
 80021ea:	3758      	adds	r7, #88	; 0x58
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000d80 	.word	0x20000d80
 80021f4:	40010000 	.word	0x40010000

080021f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08a      	sub	sp, #40	; 0x28
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	605a      	str	r2, [r3, #4]
 8002208:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800220a:	463b      	mov	r3, r7
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	615a      	str	r2, [r3, #20]
 800221a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <MX_TIM4_Init+0xdc>)
 800221e:	4a2e      	ldr	r2, [pc, #184]	; (80022d8 <MX_TIM4_Init+0xe0>)
 8002220:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <MX_TIM4_Init+0xdc>)
 8002224:	f240 221b 	movw	r2, #539	; 0x21b
 8002228:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222a:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <MX_TIM4_Init+0xdc>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <MX_TIM4_Init+0xdc>)
 8002232:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002236:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <MX_TIM4_Init+0xdc>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800223e:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <MX_TIM4_Init+0xdc>)
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002244:	4823      	ldr	r0, [pc, #140]	; (80022d4 <MX_TIM4_Init+0xdc>)
 8002246:	f005 fc6d 	bl	8007b24 <HAL_TIM_PWM_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002250:	f000 f978 	bl	8002544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800225c:	f107 031c 	add.w	r3, r7, #28
 8002260:	4619      	mov	r1, r3
 8002262:	481c      	ldr	r0, [pc, #112]	; (80022d4 <MX_TIM4_Init+0xdc>)
 8002264:	f006 f90a 	bl	800847c <HAL_TIMEx_MasterConfigSynchronization>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800226e:	f000 f969 	bl	8002544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002272:	2360      	movs	r3, #96	; 0x60
 8002274:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	463b      	mov	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	4619      	mov	r1, r3
 8002288:	4812      	ldr	r0, [pc, #72]	; (80022d4 <MX_TIM4_Init+0xdc>)
 800228a:	f005 fcbb 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002294:	f000 f956 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002298:	463b      	mov	r3, r7
 800229a:	2204      	movs	r2, #4
 800229c:	4619      	mov	r1, r3
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <MX_TIM4_Init+0xdc>)
 80022a0:	f005 fcb0 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80022aa:	f000 f94b 	bl	8002544 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022ae:	463b      	mov	r3, r7
 80022b0:	220c      	movs	r2, #12
 80022b2:	4619      	mov	r1, r3
 80022b4:	4807      	ldr	r0, [pc, #28]	; (80022d4 <MX_TIM4_Init+0xdc>)
 80022b6:	f005 fca5 	bl	8007c04 <HAL_TIM_PWM_ConfigChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 80022c0:	f000 f940 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <MX_TIM4_Init+0xdc>)
 80022c6:	f000 faff 	bl	80028c8 <HAL_TIM_MspPostInit>

}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	; 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000c10 	.word	0x20000c10
 80022d8:	40000800 	.word	0x40000800

080022dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <MX_USART2_UART_Init+0x5c>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022e8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80022ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b11      	ldr	r3, [pc, #68]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <MX_USART2_UART_Init+0x58>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <MX_USART2_UART_Init+0x58>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <MX_USART2_UART_Init+0x58>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <MX_USART2_UART_Init+0x58>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_USART2_UART_Init+0x58>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <MX_USART2_UART_Init+0x58>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_USART2_UART_Init+0x58>)
 8002320:	f006 f9b8 	bl	8008694 <HAL_UART_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800232a:	f000 f90b 	bl	8002544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000e24 	.word	0x20000e24
 8002338:	40004400 	.word	0x40004400

0800233c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <MX_DMA_Init+0x48>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <MX_DMA_Init+0x48>)
 8002348:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <MX_DMA_Init+0x48>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	2010      	movs	r0, #16
 8002360:	f001 fab9 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002364:	2010      	movs	r0, #16
 8002366:	f001 fad2 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	2011      	movs	r0, #17
 8002370:	f001 fab1 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002374:	2011      	movs	r0, #17
 8002376:	f001 faca 	bl	800390e <HAL_NVIC_EnableIRQ>

}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08c      	sub	sp, #48	; 0x30
 800238c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800239e:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a45      	ldr	r2, [pc, #276]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023a4:	f043 0310 	orr.w	r3, r3, #16
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b43      	ldr	r3, [pc, #268]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0310 	and.w	r3, r3, #16
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	4b40      	ldr	r3, [pc, #256]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b3d      	ldr	r3, [pc, #244]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ce:	4b3a      	ldr	r3, [pc, #232]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a39      	ldr	r2, [pc, #228]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b37      	ldr	r3, [pc, #220]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a33      	ldr	r2, [pc, #204]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <MX_GPIO_Init+0x130>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a2d      	ldr	r2, [pc, #180]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <MX_GPIO_Init+0x130>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002416:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <MX_GPIO_Init+0x130>)
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <MX_GPIO_Init+0x130>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_WP_GPIO_Port, Flash_WP_Pin, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	2104      	movs	r1, #4
 8002432:	4822      	ldr	r0, [pc, #136]	; (80024bc <MX_GPIO_Init+0x134>)
 8002434:	f001 ffe0 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Flash_Reset_Pin|MS5611_CS_Pin, GPIO_PIN_RESET);
 8002438:	2200      	movs	r2, #0
 800243a:	2112      	movs	r1, #18
 800243c:	4820      	ldr	r0, [pc, #128]	; (80024c0 <MX_GPIO_Init+0x138>)
 800243e:	f001 ffdb 	bl	80043f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Flash_WP_Pin */
  GPIO_InitStruct.Pin = Flash_WP_Pin;
 8002442:	2304      	movs	r3, #4
 8002444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800244a:	2301      	movs	r3, #1
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_WP_GPIO_Port, &GPIO_InitStruct);
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	4619      	mov	r1, r3
 8002458:	4818      	ldr	r0, [pc, #96]	; (80024bc <MX_GPIO_Init+0x134>)
 800245a:	f001 fe0b 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800245e:	2301      	movs	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002466:	2301      	movs	r3, #1
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 031c 	add.w	r3, r7, #28
 800246e:	4619      	mov	r1, r3
 8002470:	4813      	ldr	r0, [pc, #76]	; (80024c0 <MX_GPIO_Init+0x138>)
 8002472:	f001 fdff 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_Reset_Pin */
  GPIO_InitStruct.Pin = Flash_Reset_Pin;
 8002476:	2302      	movs	r3, #2
 8002478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247e:	2301      	movs	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_Reset_GPIO_Port, &GPIO_InitStruct);
 8002486:	f107 031c 	add.w	r3, r7, #28
 800248a:	4619      	mov	r1, r3
 800248c:	480c      	ldr	r0, [pc, #48]	; (80024c0 <MX_GPIO_Init+0x138>)
 800248e:	f001 fdf1 	bl	8004074 <HAL_GPIO_Init>

  /*Configure GPIO pin : MS5611_CS_Pin */
  GPIO_InitStruct.Pin = MS5611_CS_Pin;
 8002492:	2310      	movs	r3, #16
 8002494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MS5611_CS_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_GPIO_Init+0x138>)
 80024aa:	f001 fde3 	bl	8004074 <HAL_GPIO_Init>

}
 80024ae:	bf00      	nop
 80024b0:	3730      	adds	r7, #48	; 0x30
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40020000 	.word	0x40020000
 80024c4:	00000000 	.word	0x00000000

080024c8 <CurrentTime>:

/* USER CODE BEGIN 4 */
double CurrentTime(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
	return HAL_GetTick() / 1000.0;
 80024cc:	f000 fc3c 	bl	8002d48 <HAL_GetTick>
 80024d0:	ee07 0a90 	vmov	s15, r0
 80024d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80024d8:	ed9f 6b05 	vldr	d6, [pc, #20]	; 80024f0 <CurrentTime+0x28>
 80024dc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80024e0:	eeb0 7b45 	vmov.f64	d7, d5
}
 80024e4:	eeb0 0b47 	vmov.f64	d0, d7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	f3af 8000 	nop.w
 80024f0:	00000000 	.word	0x00000000
 80024f4:	408f4000 	.word	0x408f4000

080024f8 <measureBattery>:

double measureBattery()
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
	uint32_t D = HAL_ADC_GetValue(&hadc1);
 80024fe:	4810      	ldr	r0, [pc, #64]	; (8002540 <measureBattery+0x48>)
 8002500:	f000 fe95 	bl	800322e <HAL_ADC_GetValue>
 8002504:	6078      	str	r0, [r7, #4]
	return 2 * 3.3 * D / 4096.0;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002510:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8002530 <measureBattery+0x38>
 8002514:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002518:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8002538 <measureBattery+0x40>
 800251c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002520:	eeb0 7b45 	vmov.f64	d7, d5
}
 8002524:	eeb0 0b47 	vmov.f64	d0, d7
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	66666666 	.word	0x66666666
 8002534:	401a6666 	.word	0x401a6666
 8002538:	00000000 	.word	0x00000000
 800253c:	40b00000 	.word	0x40b00000
 8002540:	20000cc0 	.word	0x20000cc0

08002544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_MspInit+0x44>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <HAL_MspInit+0x44>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_MspInit+0x44>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_MspInit+0x44>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_MspInit+0x44>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_MspInit+0x44>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800

0800259c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_ADC_MspInit+0x84>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d12b      	bne.n	8002616 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_ADC_MspInit+0x88>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_ADC_MspInit+0x88>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_ADC_MspInit+0x88>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_ADC_MspInit+0x88>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_ADC_MspInit+0x88>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_ADC_MspInit+0x88>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025ee:	2308      	movs	r3, #8
 80025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f2:	2303      	movs	r3, #3
 80025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	4809      	ldr	r0, [pc, #36]	; (8002628 <HAL_ADC_MspInit+0x8c>)
 8002602:	f001 fd37 	bl	8004074 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2012      	movs	r0, #18
 800260c:	f001 f963 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002610:	2012      	movs	r0, #18
 8002612:	f001 f97c 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	; 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40012000 	.word	0x40012000
 8002624:	40023800 	.word	0x40023800
 8002628:	40020800 	.word	0x40020800

0800262c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_I2C_MspInit+0x8c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12f      	bne.n	80026ae <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_I2C_MspInit+0x90>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <HAL_I2C_MspInit+0x90>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_I2C_MspInit+0x90>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002666:	23c0      	movs	r3, #192	; 0xc0
 8002668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800266a:	2312      	movs	r3, #18
 800266c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800266e:	2301      	movs	r3, #1
 8002670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002676:	2304      	movs	r3, #4
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	480f      	ldr	r0, [pc, #60]	; (80026c0 <HAL_I2C_MspInit+0x94>)
 8002682:	f001 fcf7 	bl	8004074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <HAL_I2C_MspInit+0x90>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <HAL_I2C_MspInit+0x90>)
 800268c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_I2C_MspInit+0x90>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269a:	60fb      	str	r3, [r7, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	201f      	movs	r0, #31
 80026a4:	f001 f917 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026a8:	201f      	movs	r0, #31
 80026aa:	f001 f930 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026ae:	bf00      	nop
 80026b0:	3728      	adds	r7, #40	; 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40005400 	.word	0x40005400
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020400 	.word	0x40020400

080026c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <HAL_QSPI_MspInit+0x100>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d169      	bne.n	80027ba <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	4a37      	ldr	r2, [pc, #220]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6393      	str	r3, [r2, #56]	; 0x38
 80026f2:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a31      	ldr	r2, [pc, #196]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a2b      	ldr	r2, [pc, #172]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b29      	ldr	r3, [pc, #164]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <HAL_QSPI_MspInit+0x104>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PE7     ------> QUADSPI_BK2_IO0
    PE8     ------> QUADSPI_BK2_IO1
    PC11     ------> QUADSPI_BK2_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002746:	2304      	movs	r3, #4
 8002748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274a:	2302      	movs	r3, #2
 800274c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002752:	2303      	movs	r3, #3
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002756:	2309      	movs	r3, #9
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	4619      	mov	r1, r3
 8002760:	481a      	ldr	r0, [pc, #104]	; (80027cc <HAL_QSPI_MspInit+0x108>)
 8002762:	f001 fc87 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002766:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800276a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002778:	230a      	movs	r3, #10
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	4813      	ldr	r0, [pc, #76]	; (80027d0 <HAL_QSPI_MspInit+0x10c>)
 8002784:	f001 fc76 	bl	8004074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800279a:	2309      	movs	r3, #9
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800279e:	f107 031c 	add.w	r3, r7, #28
 80027a2:	4619      	mov	r1, r3
 80027a4:	480b      	ldr	r0, [pc, #44]	; (80027d4 <HAL_QSPI_MspInit+0x110>)
 80027a6:	f001 fc65 	bl	8004074 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2100      	movs	r1, #0
 80027ae:	205c      	movs	r0, #92	; 0x5c
 80027b0:	f001 f891 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80027b4:	205c      	movs	r0, #92	; 0x5c
 80027b6:	f001 f8aa 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80027ba:	bf00      	nop
 80027bc:	3730      	adds	r7, #48	; 0x30
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	a0001000 	.word	0xa0001000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40020800 	.word	0x40020800

080027d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a17      	ldr	r2, [pc, #92]	; (8002854 <HAL_SPI_MspInit+0x7c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d127      	bne.n	800284a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_SPI_MspInit+0x80>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a16      	ldr	r2, [pc, #88]	; (8002858 <HAL_SPI_MspInit+0x80>)
 8002800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <HAL_SPI_MspInit+0x80>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_SPI_MspInit+0x80>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_SPI_MspInit+0x80>)
 8002818:	f043 0302 	orr.w	r3, r3, #2
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_SPI_MspInit+0x80>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800282a:	2338      	movs	r3, #56	; 0x38
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800283a:	2305      	movs	r3, #5
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <HAL_SPI_MspInit+0x84>)
 8002846:	f001 fc15 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800284a:	bf00      	nop
 800284c:	3728      	adds	r7, #40	; 0x28
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40013000 	.word	0x40013000
 8002858:	40023800 	.word	0x40023800
 800285c:	40020400 	.word	0x40020400

08002860 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_TIM_PWM_MspInit+0x5c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10c      	bne.n	800288c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002872:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_TIM_PWM_MspInit+0x60>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <HAL_TIM_PWM_MspInit+0x60>)
 8002878:	f043 0301 	orr.w	r3, r3, #1
 800287c:	6453      	str	r3, [r2, #68]	; 0x44
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_TIM_PWM_MspInit+0x60>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800288a:	e010      	b.n	80028ae <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <HAL_TIM_PWM_MspInit+0x64>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10b      	bne.n	80028ae <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_TIM_PWM_MspInit+0x60>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_TIM_PWM_MspInit+0x60>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_TIM_PWM_MspInit+0x60>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40010000 	.word	0x40010000
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40000800 	.word	0x40000800

080028c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a23      	ldr	r2, [pc, #140]	; (8002974 <HAL_TIM_MspPostInit+0xac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d11d      	bne.n	8002926 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_TIM_MspPostInit+0xb0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_TIM_MspPostInit+0xb0>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6313      	str	r3, [r2, #48]	; 0x30
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_TIM_MspPostInit+0xb0>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 8002902:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	4817      	ldr	r0, [pc, #92]	; (800297c <HAL_TIM_MspPostInit+0xb4>)
 8002920:	f001 fba8 	bl	8004074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002924:	e021      	b.n	800296a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM4)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a15      	ldr	r2, [pc, #84]	; (8002980 <HAL_TIM_MspPostInit+0xb8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d11c      	bne.n	800296a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002930:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_TIM_MspPostInit+0xb0>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002934:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HAL_TIM_MspPostInit+0xb0>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6313      	str	r3, [r2, #48]	; 0x30
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_TIM_MspPostInit+0xb0>)
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8002948:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800294c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800295a:	2302      	movs	r3, #2
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	4619      	mov	r1, r3
 8002964:	4807      	ldr	r0, [pc, #28]	; (8002984 <HAL_TIM_MspPostInit+0xbc>)
 8002966:	f001 fb85 	bl	8004074 <HAL_GPIO_Init>
}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000
 8002978:	40023800 	.word	0x40023800
 800297c:	40020000 	.word	0x40020000
 8002980:	40000800 	.word	0x40000800
 8002984:	40020c00 	.word	0x40020c00

08002988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <HAL_UART_MspInit+0x158>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	f040 8095 	bne.w	8002ad6 <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ac:	4b4d      	ldr	r3, [pc, #308]	; (8002ae4 <HAL_UART_MspInit+0x15c>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	4a4c      	ldr	r2, [pc, #304]	; (8002ae4 <HAL_UART_MspInit+0x15c>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	6413      	str	r3, [r2, #64]	; 0x40
 80029b8:	4b4a      	ldr	r3, [pc, #296]	; (8002ae4 <HAL_UART_MspInit+0x15c>)
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_UART_MspInit+0x15c>)
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	4a46      	ldr	r2, [pc, #280]	; (8002ae4 <HAL_UART_MspInit+0x15c>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6313      	str	r3, [r2, #48]	; 0x30
 80029d0:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <HAL_UART_MspInit+0x15c>)
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 80029dc:	230c      	movs	r3, #12
 80029de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e8:	2303      	movs	r3, #3
 80029ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ec:	2307      	movs	r3, #7
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4619      	mov	r1, r3
 80029f6:	483c      	ldr	r0, [pc, #240]	; (8002ae8 <HAL_UART_MspInit+0x160>)
 80029f8:	f001 fb3c 	bl	8004074 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80029fc:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_UART_MspInit+0x164>)
 80029fe:	4a3c      	ldr	r2, [pc, #240]	; (8002af0 <HAL_UART_MspInit+0x168>)
 8002a00:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002a02:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a08:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a0a:	4b38      	ldr	r3, [pc, #224]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a10:	4b36      	ldr	r3, [pc, #216]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a16:	4b35      	ldr	r3, [pc, #212]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002a2a:	4b30      	ldr	r3, [pc, #192]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a30:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002a3c:	482b      	ldr	r0, [pc, #172]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a3e:	f000 ff81 	bl	8003944 <HAL_DMA_Init>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002a48:	f7ff fd7c 	bl	8002544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a27      	ldr	r2, [pc, #156]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a50:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_UART_MspInit+0x164>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002a58:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a5a:	4a27      	ldr	r2, [pc, #156]	; (8002af8 <HAL_UART_MspInit+0x170>)
 8002a5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002a5e:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a64:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a66:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a68:	2240      	movs	r2, #64	; 0x40
 8002a6a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a72:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a78:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002a86:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a8c:	4b19      	ldr	r3, [pc, #100]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a92:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a94:	2204      	movs	r2, #4
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a98:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002aaa:	4812      	ldr	r0, [pc, #72]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002aac:	f000 ff4a 	bl	8003944 <HAL_DMA_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8002ab6:	f7ff fd45 	bl	8002544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002abe:	669a      	str	r2, [r3, #104]	; 0x68
 8002ac0:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_UART_MspInit+0x16c>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2026      	movs	r0, #38	; 0x26
 8002acc:	f000 ff03 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ad0:	2026      	movs	r0, #38	; 0x26
 8002ad2:	f000 ff1c 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40004400 	.word	0x40004400
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000
 8002aec:	20000bb0 	.word	0x20000bb0
 8002af0:	40026088 	.word	0x40026088
 8002af4:	20000d08 	.word	0x20000d08
 8002af8:	400260a0 	.word	0x400260a0

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002b00:	f003 fd18 	bl	8006534 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <HardFault_Handler+0x4>

08002b0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <MemManage_Handler+0x4>

08002b14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <BusFault_Handler+0x4>

08002b1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <UsageFault_Handler+0x4>

08002b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b4e:	f000 f8e7 	bl	8002d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <DMA1_Stream5_IRQHandler+0x10>)
 8002b5e:	f001 f821 	bl	8003ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000bb0 	.word	0x20000bb0

08002b6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <DMA1_Stream6_IRQHandler+0x10>)
 8002b72:	f001 f817 	bl	8003ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000d08 	.word	0x20000d08

08002b80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b84:	4802      	ldr	r0, [pc, #8]	; (8002b90 <ADC_IRQHandler+0x10>)
 8002b86:	f000 fa11 	bl	8002fac <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000cc0 	.word	0x20000cc0

08002b94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b98:	4802      	ldr	r0, [pc, #8]	; (8002ba4 <I2C1_EV_IRQHandler+0x10>)
 8002b9a:	f001 fec1 	bl	8004920 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000c50 	.word	0x20000c50

08002ba8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bac:	4802      	ldr	r0, [pc, #8]	; (8002bb8 <USART2_IRQHandler+0x10>)
 8002bae:	f005 ff51 	bl	8008a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000e24 	.word	0x20000e24

08002bbc <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8002bc0:	4802      	ldr	r0, [pc, #8]	; (8002bcc <QUADSPI_IRQHandler+0x10>)
 8002bc2:	f002 fa1b 	bl	8004ffc <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000ec4 	.word	0x20000ec4

08002bd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002bd8:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <_sbrk+0x50>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <_sbrk+0x16>
		heap_end = &end;
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <_sbrk+0x50>)
 8002be2:	4a10      	ldr	r2, [pc, #64]	; (8002c24 <_sbrk+0x54>)
 8002be4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <_sbrk+0x50>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <_sbrk+0x50>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	466a      	mov	r2, sp
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d907      	bls.n	8002c0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bfa:	f009 fa01 	bl	800c000 <__errno>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	230c      	movs	r3, #12
 8002c02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e006      	b.n	8002c18 <_sbrk+0x48>
	}

	heap_end += incr;
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <_sbrk+0x50>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4413      	add	r3, r2
 8002c12:	4a03      	ldr	r2, [pc, #12]	; (8002c20 <_sbrk+0x50>)
 8002c14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002c16:	68fb      	ldr	r3, [r7, #12]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000aa8 	.word	0x20000aa8
 8002c24:	20002f88 	.word	0x20002f88

08002c28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <SystemInit+0x28>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <SystemInit+0x28>)
 8002c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <SystemInit+0x28>)
 8002c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c42:	609a      	str	r2, [r3, #8]
#endif
}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c5a:	e003      	b.n	8002c64 <LoopCopyDataInit>

08002c5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c62:	3104      	adds	r1, #4

08002c64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c64:	480b      	ldr	r0, [pc, #44]	; (8002c94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c6c:	d3f6      	bcc.n	8002c5c <CopyDataInit>
  ldr  r2, =_sbss
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c70:	e002      	b.n	8002c78 <LoopFillZerobss>

08002c72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c74:	f842 3b04 	str.w	r3, [r2], #4

08002c78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c7c:	d3f9      	bcc.n	8002c72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c7e:	f7ff ffd3 	bl	8002c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c82:	f009 f9c3 	bl	800c00c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c86:	f7fe ff81 	bl	8001b8c <main>
  bx  lr    
 8002c8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c8c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002c90:	0800fdd8 	.word	0x0800fdd8
  ldr  r0, =_sdata
 8002c94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c98:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8002c9c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8002ca0:	20002f84 	.word	0x20002f84

08002ca4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca4:	e7fe      	b.n	8002ca4 <CAN1_RX0_IRQHandler>

08002ca6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002caa:	2003      	movs	r0, #3
 8002cac:	f000 fe08 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f000 f805 	bl	8002cc0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002cb6:	f7ff fc4d 	bl	8002554 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_InitTick+0x54>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_InitTick+0x58>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fe23 	bl	800392a <HAL_SYSTICK_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e00e      	b.n	8002d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b0f      	cmp	r3, #15
 8002cf2:	d80a      	bhi.n	8002d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cfc:	f000 fdeb 	bl	80038d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d00:	4a06      	ldr	r2, [pc, #24]	; (8002d1c <HAL_InitTick+0x5c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	e000      	b.n	8002d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	20000004 	.word	0x20000004
 8002d18:	2000000c 	.word	0x2000000c
 8002d1c:	20000008 	.word	0x20000008

08002d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x20>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_IncTick+0x24>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_IncTick+0x24>)
 8002d32:	6013      	str	r3, [r2, #0]
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	2000000c 	.word	0x2000000c
 8002d44:	20000f10 	.word	0x20000f10

08002d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_GetTick+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000f10 	.word	0x20000f10

08002d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d68:	f7ff ffee 	bl	8002d48 <HAL_GetTick>
 8002d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d005      	beq.n	8002d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_Delay+0x40>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d86:	bf00      	nop
 8002d88:	f7ff ffde 	bl	8002d48 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d8f7      	bhi.n	8002d88 <HAL_Delay+0x28>
  {
  }
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	2000000c 	.word	0x2000000c

08002da4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e031      	b.n	8002e1e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fbea 	bl	800259c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_ADC_Init+0x84>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fb90 	bl	8003518 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e0e:	e001      	b.n	8002e14 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	ffffeefd 	.word	0xffffeefd

08002e2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_Start+0x1a>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0a0      	b.n	8002f88 <HAL_ADC_Start+0x15c>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d018      	beq.n	8002e8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002e6c:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <HAL_ADC_Start+0x168>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a49      	ldr	r2, [pc, #292]	; (8002f98 <HAL_ADC_Start+0x16c>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	0c9a      	lsrs	r2, r3, #18
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e80:	e002      	b.n	8002e88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f9      	bne.n	8002e82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d174      	bne.n	8002f86 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ea0:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <HAL_ADC_Start+0x170>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f023 0206 	bic.w	r2, r3, #6
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	645a      	str	r2, [r3, #68]	; 0x44
 8002ee4:	e002      	b.n	8002eec <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002efc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_ADC_Start+0x174>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10f      	bne.n	8002f2a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d136      	bne.n	8002f86 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	e02d      	b.n	8002f86 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_ADC_Start+0x178>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d10e      	bne.n	8002f52 <HAL_ADC_Start+0x126>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d107      	bne.n	8002f52 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f50:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_ADC_Start+0x174>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d113      	bne.n	8002f86 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <HAL_ADC_Start+0x17c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d10e      	bne.n	8002f86 <HAL_ADC_Start+0x15a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d107      	bne.n	8002f86 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f84:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	20000004 	.word	0x20000004
 8002f98:	431bde83 	.word	0x431bde83
 8002f9c:	fffff8fe 	.word	0xfffff8fe
 8002fa0:	40012300 	.word	0x40012300
 8002fa4:	40012000 	.word	0x40012000
 8002fa8:	40012200 	.word	0x40012200

08002fac <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d049      	beq.n	8003082 <HAL_ADC_IRQHandler+0xd6>
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d046      	beq.n	8003082 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d12b      	bne.n	8003072 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800301e:	2b00      	cmp	r3, #0
 8003020:	d127      	bne.n	8003072 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800302c:	2b00      	cmp	r3, #0
 800302e:	d006      	beq.n	800303e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800303a:	2b00      	cmp	r3, #0
 800303c:	d119      	bne.n	8003072 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0220 	bic.w	r2, r2, #32
 800304c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f043 0201 	orr.w	r2, r3, #1
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f8e8 	bl	8003248 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0212 	mvn.w	r2, #18
 8003080:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b04      	cmp	r3, #4
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b80      	cmp	r3, #128	; 0x80
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d057      	beq.n	8003164 <HAL_ADC_IRQHandler+0x1b8>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d054      	beq.n	8003164 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d105      	bne.n	80030d2 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d139      	bne.n	8003154 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d12b      	bne.n	8003154 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003106:	2b00      	cmp	r3, #0
 8003108:	d124      	bne.n	8003154 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800311c:	2b00      	cmp	r3, #0
 800311e:	d119      	bne.n	8003154 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800312e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fad9 	bl	800370c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 020c 	mvn.w	r2, #12
 8003162:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d017      	beq.n	80031c6 <HAL_ADC_IRQHandler+0x21a>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d014      	beq.n	80031c6 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d10d      	bne.n	80031c6 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f850 	bl	800325c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0201 	mvn.w	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d015      	beq.n	8003226 <HAL_ADC_IRQHandler+0x27a>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f043 0202 	orr.w	r2, r3, #2
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0220 	mvn.w	r2, #32
 8003214:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f82a 	bl	8003270 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0220 	mvn.w	r2, #32
 8003224:	601a      	str	r2, [r3, #0]
  }
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1c>
 800329c:	2302      	movs	r3, #2
 800329e:	e12a      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x272>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	d93a      	bls.n	8003326 <HAL_ADC_ConfigChannel+0xa2>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032b8:	d035      	beq.n	8003326 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68d9      	ldr	r1, [r3, #12]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	3b1e      	subs	r3, #30
 80032d0:	2207      	movs	r2, #7
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	400a      	ands	r2, r1
 80032de:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a87      	ldr	r2, [pc, #540]	; (8003504 <HAL_ADC_ConfigChannel+0x280>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10a      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68d9      	ldr	r1, [r3, #12]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	061a      	lsls	r2, r3, #24
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032fe:	e035      	b.n	800336c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68d9      	ldr	r1, [r3, #12]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	4618      	mov	r0, r3
 8003312:	4603      	mov	r3, r0
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4403      	add	r3, r0
 8003318:	3b1e      	subs	r3, #30
 800331a:	409a      	lsls	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003324:	e022      	b.n	800336c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6919      	ldr	r1, [r3, #16]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	2207      	movs	r2, #7
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43da      	mvns	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	400a      	ands	r2, r1
 8003348:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6919      	ldr	r1, [r3, #16]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	b29b      	uxth	r3, r3
 800335a:	4618      	mov	r0, r3
 800335c:	4603      	mov	r3, r0
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4403      	add	r3, r0
 8003362:	409a      	lsls	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d824      	bhi.n	80033be <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	3b05      	subs	r3, #5
 8003386:	221f      	movs	r2, #31
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43da      	mvns	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	400a      	ands	r2, r1
 8003394:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	4618      	mov	r0, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	3b05      	subs	r3, #5
 80033b0:	fa00 f203 	lsl.w	r2, r0, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
 80033bc:	e04c      	b.n	8003458 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d824      	bhi.n	8003410 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	3b23      	subs	r3, #35	; 0x23
 80033d8:	221f      	movs	r2, #31
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	400a      	ands	r2, r1
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	4618      	mov	r0, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	3b23      	subs	r3, #35	; 0x23
 8003402:	fa00 f203 	lsl.w	r2, r0, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
 800340e:	e023      	b.n	8003458 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685a      	ldr	r2, [r3, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	3b41      	subs	r3, #65	; 0x41
 8003422:	221f      	movs	r2, #31
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43da      	mvns	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	400a      	ands	r2, r1
 8003430:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4618      	mov	r0, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	3b41      	subs	r3, #65	; 0x41
 800344c:	fa00 f203 	lsl.w	r2, r0, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <HAL_ADC_ConfigChannel+0x284>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10a      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x1f4>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346a:	d105      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800346c:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_ADC_ConfigChannel+0x288>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	4a26      	ldr	r2, [pc, #152]	; (800350c <HAL_ADC_ConfigChannel+0x288>)
 8003472:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003476:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <HAL_ADC_ConfigChannel+0x284>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d109      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x212>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b12      	cmp	r3, #18
 8003488:	d105      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_ADC_ConfigChannel+0x288>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <HAL_ADC_ConfigChannel+0x288>)
 8003490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003494:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <HAL_ADC_ConfigChannel+0x284>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d125      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x268>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a17      	ldr	r2, [pc, #92]	; (8003504 <HAL_ADC_ConfigChannel+0x280>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d003      	beq.n	80034b2 <HAL_ADC_ConfigChannel+0x22e>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b11      	cmp	r3, #17
 80034b0:	d11c      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_ADC_ConfigChannel+0x288>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_ADC_ConfigChannel+0x288>)
 80034b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a10      	ldr	r2, [pc, #64]	; (8003504 <HAL_ADC_ConfigChannel+0x280>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <HAL_ADC_ConfigChannel+0x28c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a11      	ldr	r2, [pc, #68]	; (8003514 <HAL_ADC_ConfigChannel+0x290>)
 80034ce:	fba2 2303 	umull	r2, r3, r2, r3
 80034d2:	0c9a      	lsrs	r2, r3, #18
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80034de:	e002      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f9      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	10000012 	.word	0x10000012
 8003508:	40012000 	.word	0x40012000
 800350c:	40012300 	.word	0x40012300
 8003510:	20000004 	.word	0x20000004
 8003514:	431bde83 	.word	0x431bde83

08003518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003520:	4b78      	ldr	r3, [pc, #480]	; (8003704 <ADC_Init+0x1ec>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a77      	ldr	r2, [pc, #476]	; (8003704 <ADC_Init+0x1ec>)
 8003526:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800352a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800352c:	4b75      	ldr	r3, [pc, #468]	; (8003704 <ADC_Init+0x1ec>)
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4973      	ldr	r1, [pc, #460]	; (8003704 <ADC_Init+0x1ec>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	021a      	lsls	r2, r3, #8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800356c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6859      	ldr	r1, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800358e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6899      	ldr	r1, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	4a58      	ldr	r2, [pc, #352]	; (8003708 <ADC_Init+0x1f0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d022      	beq.n	80035f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6899      	ldr	r1, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	e00f      	b.n	8003612 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003610:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0202 	bic.w	r2, r2, #2
 8003620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	005a      	lsls	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01b      	beq.n	8003678 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800364e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800365e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	3b01      	subs	r3, #1
 800366c:	035a      	lsls	r2, r3, #13
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	e007      	b.n	8003688 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003686:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	051a      	lsls	r2, r3, #20
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80036bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036ca:	025a      	lsls	r2, r3, #9
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6899      	ldr	r1, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	029a      	lsls	r2, r3, #10
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	609a      	str	r2, [r3, #8]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40012300 	.word	0x40012300
 8003708:	0f000001 	.word	0x0f000001

0800370c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <__NVIC_SetPriorityGrouping+0x40>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800373c:	4013      	ands	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <__NVIC_SetPriorityGrouping+0x44>)
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374e:	4a04      	ldr	r2, [pc, #16]	; (8003760 <__NVIC_SetPriorityGrouping+0x40>)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	60d3      	str	r3, [r2, #12]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	e000ed00 	.word	0xe000ed00
 8003764:	05fa0000 	.word	0x05fa0000

08003768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <__NVIC_GetPriorityGrouping+0x18>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	0a1b      	lsrs	r3, r3, #8
 8003772:	f003 0307 	and.w	r3, r3, #7
}
 8003776:	4618      	mov	r0, r3
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	2b00      	cmp	r3, #0
 8003794:	db0b      	blt.n	80037ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	4907      	ldr	r1, [pc, #28]	; (80037bc <__NVIC_EnableIRQ+0x38>)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2001      	movs	r0, #1
 80037a6:	fa00 f202 	lsl.w	r2, r0, r2
 80037aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	e000e100 	.word	0xe000e100

080037c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db0a      	blt.n	80037ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	b2da      	uxtb	r2, r3
 80037d8:	490c      	ldr	r1, [pc, #48]	; (800380c <__NVIC_SetPriority+0x4c>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	0112      	lsls	r2, r2, #4
 80037e0:	b2d2      	uxtb	r2, r2
 80037e2:	440b      	add	r3, r1
 80037e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e8:	e00a      	b.n	8003800 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4908      	ldr	r1, [pc, #32]	; (8003810 <__NVIC_SetPriority+0x50>)
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3b04      	subs	r3, #4
 80037f8:	0112      	lsls	r2, r2, #4
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	440b      	add	r3, r1
 80037fe:	761a      	strb	r2, [r3, #24]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000e100 	.word	0xe000e100
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003814:	b480      	push	{r7}
 8003816:	b089      	sub	sp, #36	; 0x24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f1c3 0307 	rsb	r3, r3, #7
 800382e:	2b04      	cmp	r3, #4
 8003830:	bf28      	it	cs
 8003832:	2304      	movcs	r3, #4
 8003834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3304      	adds	r3, #4
 800383a:	2b06      	cmp	r3, #6
 800383c:	d902      	bls.n	8003844 <NVIC_EncodePriority+0x30>
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3b03      	subs	r3, #3
 8003842:	e000      	b.n	8003846 <NVIC_EncodePriority+0x32>
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	401a      	ands	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800385c:	f04f 31ff 	mov.w	r1, #4294967295
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	43d9      	mvns	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	4313      	orrs	r3, r2
         );
}
 800386e:	4618      	mov	r0, r3
 8003870:	3724      	adds	r7, #36	; 0x24
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388c:	d301      	bcc.n	8003892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800388e:	2301      	movs	r3, #1
 8003890:	e00f      	b.n	80038b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <SysTick_Config+0x40>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3b01      	subs	r3, #1
 8003898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800389a:	210f      	movs	r1, #15
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f7ff ff8e 	bl	80037c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <SysTick_Config+0x40>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038aa:	4b04      	ldr	r3, [pc, #16]	; (80038bc <SysTick_Config+0x40>)
 80038ac:	2207      	movs	r2, #7
 80038ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010

080038c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff29 	bl	8003720 <__NVIC_SetPriorityGrouping>
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e8:	f7ff ff3e 	bl	8003768 <__NVIC_GetPriorityGrouping>
 80038ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	6978      	ldr	r0, [r7, #20]
 80038f4:	f7ff ff8e 	bl	8003814 <NVIC_EncodePriority>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff5d 	bl	80037c0 <__NVIC_SetPriority>
}
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff31 	bl	8003784 <__NVIC_EnableIRQ>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffa2 	bl	800387c <SysTick_Config>
 8003938:	4603      	mov	r3, r0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003950:	f7ff f9fa 	bl	8002d48 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e099      	b.n	8003a94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2202      	movs	r2, #2
 800396c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003980:	e00f      	b.n	80039a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003982:	f7ff f9e1 	bl	8002d48 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b05      	cmp	r3, #5
 800398e:	d908      	bls.n	80039a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2203      	movs	r2, #3
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e078      	b.n	8003a94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e8      	bne.n	8003982 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	4b38      	ldr	r3, [pc, #224]	; (8003a9c <HAL_DMA_Init+0x158>)
 80039bc:	4013      	ands	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d107      	bne.n	8003a0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	4313      	orrs	r3, r2
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f023 0307 	bic.w	r3, r3, #7
 8003a22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d117      	bne.n	8003a66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00e      	beq.n	8003a66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fa99 	bl	8003f80 <DMA_CheckFifoParam>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2240      	movs	r2, #64	; 0x40
 8003a58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a62:	2301      	movs	r3, #1
 8003a64:	e016      	b.n	8003a94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa50 	bl	8003f14 <DMA_CalcBaseAndBitshift>
 8003a74:	4603      	mov	r3, r0
 8003a76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	223f      	movs	r2, #63	; 0x3f
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	e010803f 	.word	0xe010803f

08003aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_DMA_Start_IT+0x26>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e048      	b.n	8003b58 <HAL_DMA_Start_IT+0xb8>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d137      	bne.n	8003b4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2202      	movs	r2, #2
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f9e2 	bl	8003eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	223f      	movs	r2, #63	; 0x3f
 8003afa:	409a      	lsls	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0216 	orr.w	r2, r2, #22
 8003b0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b1e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	e005      	b.n	8003b56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
 8003b54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d004      	beq.n	8003b7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2280      	movs	r2, #128	; 0x80
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e00c      	b.n	8003b98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2205      	movs	r2, #5
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003bb0:	4b92      	ldr	r3, [pc, #584]	; (8003dfc <HAL_DMA_IRQHandler+0x258>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a92      	ldr	r2, [pc, #584]	; (8003e00 <HAL_DMA_IRQHandler+0x25c>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	0a9b      	lsrs	r3, r3, #10
 8003bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bce:	2208      	movs	r2, #8
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01a      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0204 	bic.w	r2, r2, #4
 8003bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	f043 0201 	orr.w	r2, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c14:	2201      	movs	r2, #1
 8003c16:	409a      	lsls	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d012      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c32:	2201      	movs	r2, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f043 0202 	orr.w	r2, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	2204      	movs	r2, #4
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	2204      	movs	r2, #4
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f043 0204 	orr.w	r2, r3, #4
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	2210      	movs	r2, #16
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d043      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d03c      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d018      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d024      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
 8003cd2:	e01f      	b.n	8003d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01b      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
 8003ce4:	e016      	b.n	8003d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0208 	bic.w	r2, r2, #8
 8003d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	2220      	movs	r2, #32
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 808e 	beq.w	8003e42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8086 	beq.w	8003e42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d136      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0216 	bic.w	r2, r2, #22
 8003d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_DMA_IRQHandler+0x1da>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0208 	bic.w	r2, r2, #8
 8003d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	223f      	movs	r2, #63	; 0x3f
 8003d94:	409a      	lsls	r2, r3
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d07d      	beq.n	8003eae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	4798      	blx	r3
        }
        return;
 8003dba:	e078      	b.n	8003eae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01c      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d108      	bne.n	8003dea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d030      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
 8003de8:	e02b      	b.n	8003e42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d027      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
 8003dfa:	e022      	b.n	8003e42 <HAL_DMA_IRQHandler+0x29e>
 8003dfc:	20000004 	.word	0x20000004
 8003e00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10f      	bne.n	8003e32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0210 	bic.w	r2, r2, #16
 8003e20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d032      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d022      	beq.n	8003e9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2205      	movs	r2, #5
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0201 	bic.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d307      	bcc.n	8003e8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f2      	bne.n	8003e6e <HAL_DMA_IRQHandler+0x2ca>
 8003e88:	e000      	b.n	8003e8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
 8003eac:	e000      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003eae:	bf00      	nop
    }
  }
}
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop

08003eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b40      	cmp	r3, #64	; 0x40
 8003ee4:	d108      	bne.n	8003ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ef6:	e007      	b.n	8003f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	60da      	str	r2, [r3, #12]
}
 8003f08:	bf00      	nop
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3b10      	subs	r3, #16
 8003f24:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <DMA_CalcBaseAndBitshift+0x60>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <DMA_CalcBaseAndBitshift+0x64>)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d908      	bls.n	8003f54 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <DMA_CalcBaseAndBitshift+0x68>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	659a      	str	r2, [r3, #88]	; 0x58
 8003f52:	e006      	b.n	8003f62 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b08      	ldr	r3, [pc, #32]	; (8003f7c <DMA_CalcBaseAndBitshift+0x68>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	aaaaaaab 	.word	0xaaaaaaab
 8003f78:	0800fa6c 	.word	0x0800fa6c
 8003f7c:	fffffc00 	.word	0xfffffc00

08003f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d11f      	bne.n	8003fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d855      	bhi.n	800404c <DMA_CheckFifoParam+0xcc>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <DMA_CheckFifoParam+0x28>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fcb 	.word	0x08003fcb
 8003fb0:	08003fb9 	.word	0x08003fb9
 8003fb4:	0800404d 	.word	0x0800404d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d045      	beq.n	8004050 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e042      	b.n	8004050 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fd2:	d13f      	bne.n	8004054 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd8:	e03c      	b.n	8004054 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d121      	bne.n	8004028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d836      	bhi.n	8004058 <DMA_CheckFifoParam+0xd8>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <DMA_CheckFifoParam+0x70>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004001 	.word	0x08004001
 8003ff4:	08004007 	.word	0x08004007
 8003ff8:	08004001 	.word	0x08004001
 8003ffc:	08004019 	.word	0x08004019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      break;
 8004004:	e02f      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d024      	beq.n	800405c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004016:	e021      	b.n	800405c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004020:	d11e      	bne.n	8004060 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004026:	e01b      	b.n	8004060 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d902      	bls.n	8004034 <DMA_CheckFifoParam+0xb4>
 800402e:	2b03      	cmp	r3, #3
 8004030:	d003      	beq.n	800403a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004032:	e018      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      break;
 8004038:	e015      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
      break;
 800404a:	e00b      	b.n	8004064 <DMA_CheckFifoParam+0xe4>
      break;
 800404c:	bf00      	nop
 800404e:	e00a      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      break;
 8004050:	bf00      	nop
 8004052:	e008      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      break;
 8004054:	bf00      	nop
 8004056:	e006      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      break;
 8004058:	bf00      	nop
 800405a:	e004      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      break;
 800405c:	bf00      	nop
 800405e:	e002      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      break;   
 8004060:	bf00      	nop
 8004062:	e000      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      break;
 8004064:	bf00      	nop
    }
  } 
  
  return status; 
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004074:	b480      	push	{r7}
 8004076:	b089      	sub	sp, #36	; 0x24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e175      	b.n	8004380 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004094:	2201      	movs	r2, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4013      	ands	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	f040 8164 	bne.w	800437a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d00b      	beq.n	80040d2 <HAL_GPIO_Init+0x5e>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d007      	beq.n	80040d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040c6:	2b11      	cmp	r3, #17
 80040c8:	d003      	beq.n	80040d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	2b12      	cmp	r3, #18
 80040d0:	d130      	bne.n	8004134 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	2203      	movs	r2, #3
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68da      	ldr	r2, [r3, #12]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004108:	2201      	movs	r2, #1
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 0201 	and.w	r2, r3, #1
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69ba      	ldr	r2, [r7, #24]
 8004132:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	2203      	movs	r2, #3
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x100>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b12      	cmp	r3, #18
 8004172:	d123      	bne.n	80041bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	08da      	lsrs	r2, r3, #3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3208      	adds	r2, #8
 800417c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	220f      	movs	r2, #15
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	08da      	lsrs	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3208      	adds	r2, #8
 80041b6:	69b9      	ldr	r1, [r7, #24]
 80041b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	2203      	movs	r2, #3
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f003 0203 	and.w	r2, r3, #3
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80be 	beq.w	800437a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041fe:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_GPIO_Init+0x320>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004202:	4a64      	ldr	r2, [pc, #400]	; (8004394 <HAL_GPIO_Init+0x320>)
 8004204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004208:	6453      	str	r3, [r2, #68]	; 0x44
 800420a:	4b62      	ldr	r3, [pc, #392]	; (8004394 <HAL_GPIO_Init+0x320>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004216:	4a60      	ldr	r2, [pc, #384]	; (8004398 <HAL_GPIO_Init+0x324>)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	3302      	adds	r3, #2
 800421e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	220f      	movs	r2, #15
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a57      	ldr	r2, [pc, #348]	; (800439c <HAL_GPIO_Init+0x328>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d037      	beq.n	80042b2 <HAL_GPIO_Init+0x23e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a56      	ldr	r2, [pc, #344]	; (80043a0 <HAL_GPIO_Init+0x32c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <HAL_GPIO_Init+0x23a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a55      	ldr	r2, [pc, #340]	; (80043a4 <HAL_GPIO_Init+0x330>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02b      	beq.n	80042aa <HAL_GPIO_Init+0x236>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a54      	ldr	r2, [pc, #336]	; (80043a8 <HAL_GPIO_Init+0x334>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d025      	beq.n	80042a6 <HAL_GPIO_Init+0x232>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a53      	ldr	r2, [pc, #332]	; (80043ac <HAL_GPIO_Init+0x338>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01f      	beq.n	80042a2 <HAL_GPIO_Init+0x22e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a52      	ldr	r2, [pc, #328]	; (80043b0 <HAL_GPIO_Init+0x33c>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d019      	beq.n	800429e <HAL_GPIO_Init+0x22a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a51      	ldr	r2, [pc, #324]	; (80043b4 <HAL_GPIO_Init+0x340>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_GPIO_Init+0x226>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a50      	ldr	r2, [pc, #320]	; (80043b8 <HAL_GPIO_Init+0x344>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00d      	beq.n	8004296 <HAL_GPIO_Init+0x222>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a4f      	ldr	r2, [pc, #316]	; (80043bc <HAL_GPIO_Init+0x348>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <HAL_GPIO_Init+0x21e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a4e      	ldr	r2, [pc, #312]	; (80043c0 <HAL_GPIO_Init+0x34c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_GPIO_Init+0x21a>
 800428a:	2309      	movs	r3, #9
 800428c:	e012      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 800428e:	230a      	movs	r3, #10
 8004290:	e010      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 8004292:	2308      	movs	r3, #8
 8004294:	e00e      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 8004296:	2307      	movs	r3, #7
 8004298:	e00c      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 800429a:	2306      	movs	r3, #6
 800429c:	e00a      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 800429e:	2305      	movs	r3, #5
 80042a0:	e008      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e006      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042a6:	2303      	movs	r3, #3
 80042a8:	e004      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e002      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_GPIO_Init+0x240>
 80042b2:	2300      	movs	r3, #0
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f002 0203 	and.w	r2, r2, #3
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	4093      	lsls	r3, r2
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80042c4:	4934      	ldr	r1, [pc, #208]	; (8004398 <HAL_GPIO_Init+0x324>)
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	3302      	adds	r3, #2
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042d2:	4b3c      	ldr	r3, [pc, #240]	; (80043c4 <HAL_GPIO_Init+0x350>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	43db      	mvns	r3, r3
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	4013      	ands	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042f6:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <HAL_GPIO_Init+0x350>)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042fc:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <HAL_GPIO_Init+0x350>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	43db      	mvns	r3, r3
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4013      	ands	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004320:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800434a:	4a1e      	ldr	r2, [pc, #120]	; (80043c4 <HAL_GPIO_Init+0x350>)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004350:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004374:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <HAL_GPIO_Init+0x350>)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3301      	adds	r3, #1
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	2b0f      	cmp	r3, #15
 8004384:	f67f ae86 	bls.w	8004094 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004388:	bf00      	nop
 800438a:	3724      	adds	r7, #36	; 0x24
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	40023800 	.word	0x40023800
 8004398:	40013800 	.word	0x40013800
 800439c:	40020000 	.word	0x40020000
 80043a0:	40020400 	.word	0x40020400
 80043a4:	40020800 	.word	0x40020800
 80043a8:	40020c00 	.word	0x40020c00
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40021400 	.word	0x40021400
 80043b4:	40021800 	.word	0x40021800
 80043b8:	40021c00 	.word	0x40021c00
 80043bc:	40022000 	.word	0x40022000
 80043c0:	40022400 	.word	0x40022400
 80043c4:	40013c00 	.word	0x40013c00

080043c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	887b      	ldrh	r3, [r7, #2]
 80043da:	4013      	ands	r3, r2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	e001      	b.n	80043ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
 8004404:	4613      	mov	r3, r2
 8004406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004408:	787b      	ldrb	r3, [r7, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004414:	e003      	b.n	800441e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	041a      	lsls	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	619a      	str	r2, [r3, #24]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e07f      	b.n	800453e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fe f8ea 	bl	800262c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	; 0x24
 800445c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0201 	bic.w	r2, r2, #1
 800446e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800447c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800448c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d107      	bne.n	80044a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	e006      	b.n	80044b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d104      	bne.n	80044c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_I2C_Init+0x11c>)
 80044d2:	430b      	orrs	r3, r1
 80044d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	ea42 0103 	orr.w	r1, r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69d9      	ldr	r1, [r3, #28]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1a      	ldr	r2, [r3, #32]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	02008000 	.word	0x02008000

0800454c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	461a      	mov	r2, r3
 8004558:	460b      	mov	r3, r1
 800455a:	817b      	strh	r3, [r7, #10]
 800455c:	4613      	mov	r3, r2
 800455e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b20      	cmp	r3, #32
 800456a:	f040 80da 	bne.w	8004722 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_I2C_Master_Transmit+0x30>
 8004578:	2302      	movs	r3, #2
 800457a:	e0d3      	b.n	8004724 <HAL_I2C_Master_Transmit+0x1d8>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004584:	f7fe fbe0 	bl	8002d48 <HAL_GetTick>
 8004588:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	2319      	movs	r3, #25
 8004590:	2201      	movs	r2, #1
 8004592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fa00 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0be      	b.n	8004724 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2221      	movs	r2, #33	; 0x21
 80045aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2210      	movs	r2, #16
 80045b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	893a      	ldrh	r2, [r7, #8]
 80045c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2bff      	cmp	r3, #255	; 0xff
 80045d6:	d90e      	bls.n	80045f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	22ff      	movs	r2, #255	; 0xff
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	8979      	ldrh	r1, [r7, #10]
 80045e6:	4b51      	ldr	r3, [pc, #324]	; (800472c <HAL_I2C_Master_Transmit+0x1e0>)
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fb62 	bl	8004cb8 <I2C_TransferConfig>
 80045f4:	e06c      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004604:	b2da      	uxtb	r2, r3
 8004606:	8979      	ldrh	r1, [r7, #10]
 8004608:	4b48      	ldr	r3, [pc, #288]	; (800472c <HAL_I2C_Master_Transmit+0x1e0>)
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fb51 	bl	8004cb8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004616:	e05b      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	6a39      	ldr	r1, [r7, #32]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 f9fd 	bl	8004a1c <I2C_WaitOnTXISFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e07b      	b.n	8004724 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d034      	beq.n	80046d0 <HAL_I2C_Master_Transmit+0x184>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466a:	2b00      	cmp	r3, #0
 800466c:	d130      	bne.n	80046d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	2200      	movs	r2, #0
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f98f 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e04d      	b.n	8004724 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	2bff      	cmp	r3, #255	; 0xff
 8004690:	d90e      	bls.n	80046b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	22ff      	movs	r2, #255	; 0xff
 8004696:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	b2da      	uxtb	r2, r3
 800469e:	8979      	ldrh	r1, [r7, #10]
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fb05 	bl	8004cb8 <I2C_TransferConfig>
 80046ae:	e00f      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	8979      	ldrh	r1, [r7, #10]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 faf4 	bl	8004cb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d19e      	bne.n	8004618 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	6a39      	ldr	r1, [r7, #32]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f9dc 	bl	8004a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e01a      	b.n	8004724 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2220      	movs	r2, #32
 80046f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <HAL_I2C_Master_Transmit+0x1e4>)
 8004702:	400b      	ands	r3, r1
 8004704:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	e000      	b.n	8004724 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004722:	2302      	movs	r3, #2
  }
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	80002000 	.word	0x80002000
 8004730:	fe00e800 	.word	0xfe00e800

08004734 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b088      	sub	sp, #32
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	461a      	mov	r2, r3
 8004740:	460b      	mov	r3, r1
 8004742:	817b      	strh	r3, [r7, #10]
 8004744:	4613      	mov	r3, r2
 8004746:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b20      	cmp	r3, #32
 8004752:	f040 80db 	bne.w	800490c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_I2C_Master_Receive+0x30>
 8004760:	2302      	movs	r3, #2
 8004762:	e0d4      	b.n	800490e <HAL_I2C_Master_Receive+0x1da>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800476c:	f7fe faec 	bl	8002d48 <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2319      	movs	r3, #25
 8004778:	2201      	movs	r2, #1
 800477a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f90c 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e0bf      	b.n	800490e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2222      	movs	r2, #34	; 0x22
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2210      	movs	r2, #16
 800479a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	893a      	ldrh	r2, [r7, #8]
 80047ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2bff      	cmp	r3, #255	; 0xff
 80047be:	d90e      	bls.n	80047de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	22ff      	movs	r2, #255	; 0xff
 80047c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	8979      	ldrh	r1, [r7, #10]
 80047ce:	4b52      	ldr	r3, [pc, #328]	; (8004918 <HAL_I2C_Master_Receive+0x1e4>)
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fa6e 	bl	8004cb8 <I2C_TransferConfig>
 80047dc:	e06d      	b.n	80048ba <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	8979      	ldrh	r1, [r7, #10]
 80047f0:	4b49      	ldr	r3, [pc, #292]	; (8004918 <HAL_I2C_Master_Receive+0x1e4>)
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fa5d 	bl	8004cb8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80047fe:	e05c      	b.n	80048ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	6a39      	ldr	r1, [r7, #32]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f985 	bl	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e07c      	b.n	800490e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d034      	beq.n	80048ba <HAL_I2C_Master_Receive+0x186>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d130      	bne.n	80048ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	2200      	movs	r2, #0
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f89a 	bl	800499c <I2C_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e04d      	b.n	800490e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004876:	b29b      	uxth	r3, r3
 8004878:	2bff      	cmp	r3, #255	; 0xff
 800487a:	d90e      	bls.n	800489a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	22ff      	movs	r2, #255	; 0xff
 8004880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004886:	b2da      	uxtb	r2, r3
 8004888:	8979      	ldrh	r1, [r7, #10]
 800488a:	2300      	movs	r3, #0
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fa10 	bl	8004cb8 <I2C_TransferConfig>
 8004898:	e00f      	b.n	80048ba <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	8979      	ldrh	r1, [r7, #10]
 80048ac:	2300      	movs	r3, #0
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f9ff 	bl	8004cb8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d19d      	bne.n	8004800 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	6a39      	ldr	r1, [r7, #32]
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f8e7 	bl	8004a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e01a      	b.n	800490e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2220      	movs	r2, #32
 80048de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6859      	ldr	r1, [r3, #4]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	4b0c      	ldr	r3, [pc, #48]	; (800491c <HAL_I2C_Master_Receive+0x1e8>)
 80048ec:	400b      	ands	r3, r1
 80048ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	80002400 	.word	0x80002400
 800491c:	fe00e800 	.word	0xfe00e800

08004920 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	2b00      	cmp	r3, #0
 800493e:	d005      	beq.n	800494c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	4798      	blx	r3
  }
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	d103      	bne.n	8004972 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b01      	cmp	r3, #1
 800497e:	d007      	beq.n	8004990 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	619a      	str	r2, [r3, #24]
  }
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049ac:	e022      	b.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d01e      	beq.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b6:	f7fe f9c7 	bl	8002d48 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d113      	bne.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e00f      	b.n	8004a14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699a      	ldr	r2, [r3, #24]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4013      	ands	r3, r2
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d0cd      	beq.n	80049ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a28:	e02c      	b.n	8004a84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 f8dc 	bl	8004bec <I2C_IsAcknowledgeFailed>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e02a      	b.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d01e      	beq.n	8004a84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a46:	f7fe f97f 	bl	8002d48 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d302      	bcc.n	8004a5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d113      	bne.n	8004a84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e007      	b.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d1cb      	bne.n	8004a2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa8:	e028      	b.n	8004afc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f89c 	bl	8004bec <I2C_IsAcknowledgeFailed>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e026      	b.n	8004b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fe f943 	bl	8002d48 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d113      	bne.n	8004afc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e007      	b.n	8004b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d1cf      	bne.n	8004aaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b20:	e055      	b.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 f860 	bl	8004bec <I2C_IsAcknowledgeFailed>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e053      	b.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d129      	bne.n	8004b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d105      	bne.n	8004b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e03f      	b.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2220      	movs	r2, #32
 8004b64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e022      	b.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b98:	f7fe f8d6 	bl	8002d48 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10f      	bne.n	8004bce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f043 0220 	orr.w	r2, r3, #32
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e007      	b.n	8004bde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d1a2      	bne.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	fe00e800 	.word	0xfe00e800

08004bec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d151      	bne.n	8004caa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c06:	e022      	b.n	8004c4e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d01e      	beq.n	8004c4e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c10:	f7fe f89a 	bl	8002d48 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d302      	bcc.n	8004c26 <I2C_IsAcknowledgeFailed+0x3a>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d113      	bne.n	8004c4e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	f043 0220 	orr.w	r2, r3, #32
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e02e      	b.n	8004cac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d1d5      	bne.n	8004c08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2210      	movs	r2, #16
 8004c62:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f7ff fe71 	bl	8004954 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6859      	ldr	r1, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <I2C_IsAcknowledgeFailed+0xc8>)
 8004c7e:	400b      	ands	r3, r1
 8004c80:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c86:	f043 0204 	orr.w	r2, r3, #4
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	fe00e800 	.word	0xfe00e800

08004cb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	0d5b      	lsrs	r3, r3, #21
 8004cd4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <I2C_TransferConfig+0x58>)
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	ea02 0103 	and.w	r1, r2, r3
 8004ce2:	897b      	ldrh	r3, [r7, #10]
 8004ce4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ce8:	7a7b      	ldrb	r3, [r7, #9]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	03ff63ff 	.word	0x03ff63ff

08004d14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d138      	bne.n	8004d9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e032      	b.n	8004d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2224      	movs	r2, #36	; 0x24
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	e000      	b.n	8004d9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d9c:	2302      	movs	r3, #2
  }
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b085      	sub	sp, #20
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d139      	bne.n	8004e34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e033      	b.n	8004e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2224      	movs	r2, #36	; 0x24
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dfc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
	...

08004e44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40007000 	.word	0x40007000

08004e64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <HAL_PWREx_EnableOverDrive+0x98>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	4a22      	ldr	r2, [pc, #136]	; (8004efc <HAL_PWREx_EnableOverDrive+0x98>)
 8004e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e78:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <HAL_PWREx_EnableOverDrive+0x98>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e86:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1d      	ldr	r2, [pc, #116]	; (8004f00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e92:	f7fd ff59 	bl	8002d48 <HAL_GetTick>
 8004e96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e98:	e009      	b.n	8004eae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e9a:	f7fd ff55 	bl	8002d48 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea8:	d901      	bls.n	8004eae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e022      	b.n	8004ef4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004eae:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eba:	d1ee      	bne.n	8004e9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ebc:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0f      	ldr	r2, [pc, #60]	; (8004f00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec8:	f7fd ff3e 	bl	8002d48 <HAL_GetTick>
 8004ecc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ece:	e009      	b.n	8004ee4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ed0:	f7fd ff3a 	bl	8002d48 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ede:	d901      	bls.n	8004ee4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e007      	b.n	8004ef4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ee4:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef0:	d1ee      	bne.n	8004ed0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40007000 	.word	0x40007000

08004f04 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004f0c:	f7fd ff1c 	bl	8002d48 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e067      	b.n	8004fec <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10b      	bne.n	8004f40 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7fd fbc7 	bl	80026c4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f36:	f241 3188 	movw	r1, #5000	; 0x1388
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fc6c 	bl	8005818 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	021a      	lsls	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	2120      	movs	r1, #32
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fc97 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f70:	7afb      	ldrb	r3, [r7, #11]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d135      	bne.n	8004fe2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <HAL_QSPI_Init+0xf0>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	0611      	lsls	r1, r2, #24
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	68d2      	ldr	r2, [r2, #12]
 8004f8a:	4311      	orrs	r1, r2
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	69d2      	ldr	r2, [r2, #28]
 8004f90:	4311      	orrs	r1, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6a12      	ldr	r2, [r2, #32]
 8004f96:	4311      	orrs	r1, r2
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	6812      	ldr	r2, [r2, #0]
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <HAL_QSPI_Init+0xf4>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6912      	ldr	r2, [r2, #16]
 8004fae:	0411      	lsls	r1, r2, #16
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	6952      	ldr	r2, [r2, #20]
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6992      	ldr	r2, [r2, #24]
 8004fba:	4311      	orrs	r1, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004fea:	7afb      	ldrb	r3, [r7, #11]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	00ffff2f 	.word	0x00ffff2f
 8004ff8:	ffe0f8fe 	.word	0xffe0f8fe

08004ffc <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d064      	beq.n	80050e8 <HAL_QSPI_IRQHandler+0xec>
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d05f      	beq.n	80050e8 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3320      	adds	r3, #32
 800502e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b12      	cmp	r3, #18
 800503a:	d125      	bne.n	8005088 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800503c:	e01c      	b.n	8005078 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00f      	beq.n	8005066 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	781a      	ldrb	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	1e5a      	subs	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
 8005064:	e008      	b.n	8005078 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005074:	601a      	str	r2, [r3, #0]
          break;
 8005076:	e033      	b.n	80050e0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1db      	bne.n	800503e <HAL_QSPI_IRQHandler+0x42>
 8005086:	e02b      	b.n	80050e0 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b22      	cmp	r3, #34	; 0x22
 8005092:	d125      	bne.n	80050e0 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005094:	e01d      	b.n	80050d2 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	2b00      	cmp	r3, #0
 800509c:	d010      	beq.n	80050c0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	7812      	ldrb	r2, [r2, #0]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	1e5a      	subs	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	639a      	str	r2, [r3, #56]	; 0x38
 80050be:	e008      	b.n	80050d2 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050ce:	601a      	str	r2, [r3, #0]
          break;
 80050d0:	e006      	b.n	80050e0 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1da      	bne.n	8005096 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fb7b 	bl	80057dc <HAL_QSPI_FifoThresholdCallback>
 80050e6:	e13c      	b.n	8005362 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80b0 	beq.w	8005254 <HAL_QSPI_IRQHandler+0x258>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80aa 	beq.w	8005254 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2202      	movs	r2, #2
 8005106:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005116:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b12      	cmp	r3, #18
 8005122:	d120      	bne.n	8005166 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0204 	bic.w	r2, r2, #4
 8005140:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fb32 	bl	80057c8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005164:	e0fa      	b.n	800535c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b22      	cmp	r3, #34	; 0x22
 8005170:	d143      	bne.n	80051fa <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d012      	beq.n	80051a6 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0204 	bic.w	r2, r2, #4
 800518e:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e021      	b.n	80051ea <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3320      	adds	r3, #32
 80051ac:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80051ae:	e013      	b.n	80051d8 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d017      	beq.n	80051e8 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	7812      	ldrb	r2, [r2, #0]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	1e5a      	subs	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e4      	bne.n	80051b0 <HAL_QSPI_IRQHandler+0x1b4>
 80051e6:	e000      	b.n	80051ea <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80051e8:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fade 	bl	80057b4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80051f8:	e0b0      	b.n	800535c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d107      	bne.n	8005216 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fac6 	bl	80057a0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005214:	e0a2      	b.n	800535c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b08      	cmp	r3, #8
 8005220:	f040 809c 	bne.w	800535c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005232:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 faa1 	bl	800578c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800524a:	e087      	b.n	800535c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa93 	bl	8005778 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005252:	e083      	b.n	800535c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f003 0308 	and.w	r3, r3, #8
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01f      	beq.n	800529e <HAL_QSPI_IRQHandler+0x2a2>
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01a      	beq.n	800529e <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2208      	movs	r2, #8
 800526e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800528c:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 faaa 	bl	80057f0 <HAL_QSPI_StatusMatchCallback>
 800529c:	e061      	b.n	8005362 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d047      	beq.n	8005338 <HAL_QSPI_IRQHandler+0x33c>
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d042      	beq.n	8005338 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80052c8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	f043 0202 	orr.w	r2, r3, #2
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d021      	beq.n	8005328 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0204 	bic.w	r2, r2, #4
 80052f2:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_QSPI_IRQHandler+0x370>)
 80052fa:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	4618      	mov	r0, r3
 8005302:	f7fe fc2d 	bl	8003b60 <HAL_DMA_Abort_IT>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d029      	beq.n	8005360 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	f043 0204 	orr.w	r2, r3, #4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fa29 	bl	8005778 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005326:	e01b      	b.n	8005360 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fa21 	bl	8005778 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005336:	e013      	b.n	8005360 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f003 0310 	and.w	r3, r3, #16
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00f      	beq.n	8005362 <HAL_QSPI_IRQHandler+0x366>
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2210      	movs	r2, #16
 8005352:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa55 	bl	8005804 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800535a:	e002      	b.n	8005362 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800535c:	bf00      	nop
 800535e:	e000      	b.n	8005362 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005360:	bf00      	nop
}
 8005362:	bf00      	nop
 8005364:	3718      	adds	r7, #24
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	08005835 	.word	0x08005835

08005370 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af02      	add	r7, sp, #8
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800537c:	f7fd fce4 	bl	8002d48 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_QSPI_Command+0x22>
 800538e:	2302      	movs	r3, #2
 8005390:	e048      	b.n	8005424 <HAL_QSPI_Command+0xb4>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d137      	bne.n	8005416 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2200      	movs	r2, #0
 80053bc:	2120      	movs	r1, #32
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa6b 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d125      	bne.n	800541a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80053ce:	2200      	movs	r2, #0
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fa98 	bl	8005908 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d115      	bne.n	800540c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	2201      	movs	r2, #1
 80053e8:	2102      	movs	r1, #2
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fa55 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 80053f0:	4603      	mov	r3, r0
 80053f2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2202      	movs	r2, #2
 8005400:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800540a:	e006      	b.n	800541a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005414:	e001      	b.n	800541a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005416:	2302      	movs	r3, #2
 8005418:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005422:	7dfb      	ldrb	r3, [r7, #23]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800543c:	f7fd fc84 	bl	8002d48 <HAL_GetTick>
 8005440:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3320      	adds	r3, #32
 8005448:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_QSPI_Transmit+0x2e>
 8005456:	2302      	movs	r3, #2
 8005458:	e076      	b.n	8005548 <HAL_QSPI_Transmit+0x11c>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b01      	cmp	r3, #1
 800546c:	d165      	bne.n	800553a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d056      	beq.n	8005528 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2212      	movs	r2, #18
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80054ae:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80054b0:	e01b      	b.n	80054ea <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2201      	movs	r2, #1
 80054ba:	2104      	movs	r1, #4
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f9ec 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80054c6:	7ffb      	ldrb	r3, [r7, #31]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d113      	bne.n	80054f4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	781a      	ldrb	r2, [r3, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	1e5a      	subs	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1df      	bne.n	80054b2 <HAL_QSPI_Transmit+0x86>
 80054f2:	e000      	b.n	80054f6 <HAL_QSPI_Transmit+0xca>
          break;
 80054f4:	bf00      	nop
      }

      if (status == HAL_OK)
 80054f6:	7ffb      	ldrb	r3, [r7, #31]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d110      	bne.n	800551e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2201      	movs	r2, #1
 8005504:	2102      	movs	r1, #2
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 f9c7 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8005510:	7ffb      	ldrb	r3, [r7, #31]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d103      	bne.n	800551e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2202      	movs	r2, #2
 800551c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005526:	e00a      	b.n	800553e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552c:	f043 0208 	orr.w	r2, r3, #8
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e001      	b.n	800553e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005546:	7ffb      	ldrb	r3, [r7, #31]
}
 8005548:	4618      	mov	r0, r3
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8005560:	f7fd fbf2 	bl	8002d48 <HAL_GetTick>
 8005564:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3320      	adds	r3, #32
 8005574:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_QSPI_Receive+0x36>
 8005582:	2302      	movs	r3, #2
 8005584:	e07d      	b.n	8005682 <HAL_QSPI_Receive+0x132>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	d16c      	bne.n	8005674 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d05d      	beq.n	8005662 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2222      	movs	r2, #34	; 0x22
 80055aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80055de:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80055e8:	e01c      	b.n	8005624 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2201      	movs	r2, #1
 80055f2:	2106      	movs	r1, #6
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f950 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80055fe:	7ffb      	ldrb	r3, [r7, #31]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d114      	bne.n	800562e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	7812      	ldrb	r2, [r2, #0]
 800560c:	b2d2      	uxtb	r2, r2
 800560e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	1e5a      	subs	r2, r3, #1
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1de      	bne.n	80055ea <HAL_QSPI_Receive+0x9a>
 800562c:	e000      	b.n	8005630 <HAL_QSPI_Receive+0xe0>
          break;
 800562e:	bf00      	nop
      }

      if (status == HAL_OK)
 8005630:	7ffb      	ldrb	r3, [r7, #31]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d110      	bne.n	8005658 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	2201      	movs	r2, #1
 800563e:	2102      	movs	r1, #2
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f92a 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 8005646:	4603      	mov	r3, r0
 8005648:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800564a:	7ffb      	ldrb	r3, [r7, #31]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2202      	movs	r2, #2
 8005656:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005660:	e00a      	b.n	8005678 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	f043 0208 	orr.w	r2, r3, #8
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	77fb      	strb	r3, [r7, #31]
 8005672:	e001      	b.n	8005678 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8005674:	2302      	movs	r3, #2
 8005676:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8005680:	7ffb      	ldrb	r3, [r7, #31]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b088      	sub	sp, #32
 800568e:	af02      	add	r7, sp, #8
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	607a      	str	r2, [r7, #4]
 8005696:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005698:	f7fd fb56 	bl	8002d48 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_QSPI_AutoPolling+0x24>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e060      	b.n	8005770 <HAL_QSPI_AutoPolling+0xe6>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d14f      	bne.n	8005762 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2242      	movs	r2, #66	; 0x42
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2200      	movs	r2, #0
 80056d8:	2120      	movs	r1, #32
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f8dd 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d13d      	bne.n	8005766 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6852      	ldr	r2, [r2, #4]
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	431a      	orrs	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005720:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800572a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 f8e9 	bl	8005908 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2201      	movs	r2, #1
 800573e:	2108      	movs	r1, #8
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f8aa 	bl	800589a <QSPI_WaitFlagStateUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2208      	movs	r2, #8
 8005756:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005760:	e001      	b.n	8005766 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8005762:	2302      	movs	r3, #2
 8005764:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b08      	cmp	r3, #8
 8005858:	d114      	bne.n	8005884 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2202      	movs	r2, #2
 8005860:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005870:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0202 	orr.w	r2, r2, #2
 8005880:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8005882:	e006      	b.n	8005892 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7ff ff73 	bl	8005778 <HAL_QSPI_ErrorCallback>
}
 8005892:	bf00      	nop
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80058aa:	e01a      	b.n	80058e2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b2:	d016      	beq.n	80058e2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058b4:	f7fd fa48 	bl	8002d48 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d302      	bcc.n	80058ca <QSPI_WaitFlagStateUntilTimeout+0x30>
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10b      	bne.n	80058e2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2204      	movs	r2, #4
 80058ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e00e      	b.n	8005900 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d1d6      	bne.n	80058ac <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <QSPI_Config+0x28>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005922:	d005      	beq.n	8005930 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3a01      	subs	r2, #1
 800592e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80b9 	beq.w	8005aac <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d05f      	beq.n	8005a02 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	6892      	ldr	r2, [r2, #8]
 800594a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d031      	beq.n	80059b8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595c:	431a      	orrs	r2, r3
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005962:	431a      	orrs	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	431a      	orrs	r2, r3
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	049b      	lsls	r3, r3, #18
 8005970:	431a      	orrs	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	431a      	orrs	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	431a      	orrs	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	431a      	orrs	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	431a      	orrs	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	431a      	orrs	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	ea42 0103 	orr.w	r1, r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	430a      	orrs	r2, r1
 80059a0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80059a8:	f000 812e 	beq.w	8005c08 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	6852      	ldr	r2, [r2, #4]
 80059b4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80059b6:	e127      	b.n	8005c08 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	431a      	orrs	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c6:	431a      	orrs	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	049b      	lsls	r3, r3, #18
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	431a      	orrs	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	ea42 0103 	orr.w	r1, r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	615a      	str	r2, [r3, #20]
}
 8005a00:	e102      	b.n	8005c08 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d02e      	beq.n	8005a68 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	431a      	orrs	r2, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	049b      	lsls	r3, r3, #18
 8005a26:	431a      	orrs	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	ea42 0103 	orr.w	r1, r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005a58:	f000 80d6 	beq.w	8005c08 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	6852      	ldr	r2, [r2, #4]
 8005a64:	619a      	str	r2, [r3, #24]
}
 8005a66:	e0cf      	b.n	8005c08 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	431a      	orrs	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	049b      	lsls	r3, r3, #18
 8005a84:	431a      	orrs	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	ea42 0103 	orr.w	r1, r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	615a      	str	r2, [r3, #20]
}
 8005aaa:	e0ad      	b.n	8005c08 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d058      	beq.n	8005b66 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	6892      	ldr	r2, [r2, #8]
 8005abc:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d02d      	beq.n	8005b22 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	431a      	orrs	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	049b      	lsls	r3, r3, #18
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	431a      	orrs	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	ea42 0103 	orr.w	r1, r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005b14:	d078      	beq.n	8005c08 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	6852      	ldr	r2, [r2, #4]
 8005b1e:	619a      	str	r2, [r3, #24]
}
 8005b20:	e072      	b.n	8005c08 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	431a      	orrs	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	049b      	lsls	r3, r3, #18
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	ea42 0103 	orr.w	r1, r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	615a      	str	r2, [r3, #20]
}
 8005b64:	e050      	b.n	8005c08 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d02a      	beq.n	8005bc4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	431a      	orrs	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b82:	431a      	orrs	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	049b      	lsls	r3, r3, #18
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	431a      	orrs	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	ea42 0103 	orr.w	r1, r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005bb6:	d027      	beq.n	8005c08 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68ba      	ldr	r2, [r7, #8]
 8005bbe:	6852      	ldr	r2, [r2, #4]
 8005bc0:	619a      	str	r2, [r3, #24]
}
 8005bc2:	e021      	b.n	8005c08 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01d      	beq.n	8005c08 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	049b      	lsls	r3, r3, #18
 8005be8:	431a      	orrs	r2, r3
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	ea42 0103 	orr.w	r1, r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	615a      	str	r2, [r3, #20]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e29b      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8087 	beq.w	8005d46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c38:	4b96      	ldr	r3, [pc, #600]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d00c      	beq.n	8005c5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c44:	4b93      	ldr	r3, [pc, #588]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b08      	cmp	r3, #8
 8005c4e:	d112      	bne.n	8005c76 <HAL_RCC_OscConfig+0x62>
 8005c50:	4b90      	ldr	r3, [pc, #576]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5c:	d10b      	bne.n	8005c76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c5e:	4b8d      	ldr	r3, [pc, #564]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d06c      	beq.n	8005d44 <HAL_RCC_OscConfig+0x130>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d168      	bne.n	8005d44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e275      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCC_OscConfig+0x7a>
 8005c80:	4b84      	ldr	r3, [pc, #528]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a83      	ldr	r2, [pc, #524]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	e02e      	b.n	8005cec <HAL_RCC_OscConfig+0xd8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10c      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x9c>
 8005c96:	4b7f      	ldr	r3, [pc, #508]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a7e      	ldr	r2, [pc, #504]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	4b7c      	ldr	r3, [pc, #496]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a7b      	ldr	r2, [pc, #492]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e01d      	b.n	8005cec <HAL_RCC_OscConfig+0xd8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb8:	d10c      	bne.n	8005cd4 <HAL_RCC_OscConfig+0xc0>
 8005cba:	4b76      	ldr	r3, [pc, #472]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a75      	ldr	r2, [pc, #468]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	4b73      	ldr	r3, [pc, #460]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a72      	ldr	r2, [pc, #456]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	e00b      	b.n	8005cec <HAL_RCC_OscConfig+0xd8>
 8005cd4:	4b6f      	ldr	r3, [pc, #444]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a6e      	ldr	r2, [pc, #440]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4b6c      	ldr	r3, [pc, #432]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a6b      	ldr	r2, [pc, #428]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d013      	beq.n	8005d1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fd f828 	bl	8002d48 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cfc:	f7fd f824 	bl	8002d48 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b64      	cmp	r3, #100	; 0x64
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e229      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b61      	ldr	r3, [pc, #388]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0f0      	beq.n	8005cfc <HAL_RCC_OscConfig+0xe8>
 8005d1a:	e014      	b.n	8005d46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fd f814 	bl	8002d48 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d24:	f7fd f810 	bl	8002d48 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b64      	cmp	r3, #100	; 0x64
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e215      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d36:	4b57      	ldr	r3, [pc, #348]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x110>
 8005d42:	e000      	b.n	8005d46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d069      	beq.n	8005e26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d52:	4b50      	ldr	r3, [pc, #320]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 030c 	and.w	r3, r3, #12
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00b      	beq.n	8005d76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d5e:	4b4d      	ldr	r3, [pc, #308]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 030c 	and.w	r3, r3, #12
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d11c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x190>
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d116      	bne.n	8005da4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d76:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <HAL_RCC_OscConfig+0x17a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d001      	beq.n	8005d8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e1e9      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d8e:	4b41      	ldr	r3, [pc, #260]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	493d      	ldr	r1, [pc, #244]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da2:	e040      	b.n	8005e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d023      	beq.n	8005df4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dac:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a38      	ldr	r2, [pc, #224]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db8:	f7fc ffc6 	bl	8002d48 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc0:	f7fc ffc2 	bl	8002d48 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e1c7      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd2:	4b30      	ldr	r3, [pc, #192]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f0      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dde:	4b2d      	ldr	r3, [pc, #180]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	4929      	ldr	r1, [pc, #164]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	600b      	str	r3, [r1, #0]
 8005df2:	e018      	b.n	8005e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a26      	ldr	r2, [pc, #152]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005dfa:	f023 0301 	bic.w	r3, r3, #1
 8005dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fc ffa2 	bl	8002d48 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e08:	f7fc ff9e 	bl	8002d48 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e1a3      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d038      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d019      	beq.n	8005e6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e3a:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3e:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e46:	f7fc ff7f 	bl	8002d48 <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e4e:	f7fc ff7b 	bl	8002d48 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e180      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e60:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCC_OscConfig+0x23a>
 8005e6c:	e01a      	b.n	8005ea4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e6e:	4b09      	ldr	r3, [pc, #36]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e72:	4a08      	ldr	r2, [pc, #32]	; (8005e94 <HAL_RCC_OscConfig+0x280>)
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7a:	f7fc ff65 	bl	8002d48 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e80:	e00a      	b.n	8005e98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e82:	f7fc ff61 	bl	8002d48 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d903      	bls.n	8005e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e166      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
 8005e94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e98:	4b92      	ldr	r3, [pc, #584]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1ee      	bne.n	8005e82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80a4 	beq.w	8005ffa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eb2:	4b8c      	ldr	r3, [pc, #560]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10d      	bne.n	8005eda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ebe:	4b89      	ldr	r3, [pc, #548]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	4a88      	ldr	r2, [pc, #544]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eca:	4b86      	ldr	r3, [pc, #536]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eda:	4b83      	ldr	r3, [pc, #524]	; (80060e8 <HAL_RCC_OscConfig+0x4d4>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d118      	bne.n	8005f18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ee6:	4b80      	ldr	r3, [pc, #512]	; (80060e8 <HAL_RCC_OscConfig+0x4d4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a7f      	ldr	r2, [pc, #508]	; (80060e8 <HAL_RCC_OscConfig+0x4d4>)
 8005eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ef2:	f7fc ff29 	bl	8002d48 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005efa:	f7fc ff25 	bl	8002d48 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b64      	cmp	r3, #100	; 0x64
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e12a      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f0c:	4b76      	ldr	r3, [pc, #472]	; (80060e8 <HAL_RCC_OscConfig+0x4d4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0f0      	beq.n	8005efa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCC_OscConfig+0x31a>
 8005f20:	4b70      	ldr	r3, [pc, #448]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f24:	4a6f      	ldr	r2, [pc, #444]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2c:	e02d      	b.n	8005f8a <HAL_RCC_OscConfig+0x376>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10c      	bne.n	8005f50 <HAL_RCC_OscConfig+0x33c>
 8005f36:	4b6b      	ldr	r3, [pc, #428]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f3a:	4a6a      	ldr	r2, [pc, #424]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	6713      	str	r3, [r2, #112]	; 0x70
 8005f42:	4b68      	ldr	r3, [pc, #416]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	4a67      	ldr	r2, [pc, #412]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f48:	f023 0304 	bic.w	r3, r3, #4
 8005f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4e:	e01c      	b.n	8005f8a <HAL_RCC_OscConfig+0x376>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b05      	cmp	r3, #5
 8005f56:	d10c      	bne.n	8005f72 <HAL_RCC_OscConfig+0x35e>
 8005f58:	4b62      	ldr	r3, [pc, #392]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	4a61      	ldr	r2, [pc, #388]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f5e:	f043 0304 	orr.w	r3, r3, #4
 8005f62:	6713      	str	r3, [r2, #112]	; 0x70
 8005f64:	4b5f      	ldr	r3, [pc, #380]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	4a5e      	ldr	r2, [pc, #376]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f70:	e00b      	b.n	8005f8a <HAL_RCC_OscConfig+0x376>
 8005f72:	4b5c      	ldr	r3, [pc, #368]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	4a5b      	ldr	r2, [pc, #364]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f78:	f023 0301 	bic.w	r3, r3, #1
 8005f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7e:	4b59      	ldr	r3, [pc, #356]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005f84:	f023 0304 	bic.w	r3, r3, #4
 8005f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d015      	beq.n	8005fbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f92:	f7fc fed9 	bl	8002d48 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f98:	e00a      	b.n	8005fb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9a:	f7fc fed5 	bl	8002d48 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0d8      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb0:	4b4c      	ldr	r3, [pc, #304]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0ee      	beq.n	8005f9a <HAL_RCC_OscConfig+0x386>
 8005fbc:	e014      	b.n	8005fe8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbe:	f7fc fec3 	bl	8002d48 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc4:	e00a      	b.n	8005fdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc6:	f7fc febf 	bl	8002d48 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e0c2      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fdc:	4b41      	ldr	r3, [pc, #260]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1ee      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d105      	bne.n	8005ffa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fee:	4b3d      	ldr	r3, [pc, #244]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	4a3c      	ldr	r2, [pc, #240]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8005ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 80ae 	beq.w	8006160 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006004:	4b37      	ldr	r3, [pc, #220]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 030c 	and.w	r3, r3, #12
 800600c:	2b08      	cmp	r3, #8
 800600e:	d06d      	beq.n	80060ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d14b      	bne.n	80060b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006018:	4b32      	ldr	r3, [pc, #200]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a31      	ldr	r2, [pc, #196]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 800601e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fc fe90 	bl	8002d48 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800602c:	f7fc fe8c 	bl	8002d48 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e091      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800603e:	4b29      	ldr	r3, [pc, #164]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1f0      	bne.n	800602c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	69da      	ldr	r2, [r3, #28]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	019b      	lsls	r3, r3, #6
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	3b01      	subs	r3, #1
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	061b      	lsls	r3, r3, #24
 800606e:	431a      	orrs	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	071b      	lsls	r3, r3, #28
 8006076:	491b      	ldr	r1, [pc, #108]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8006078:	4313      	orrs	r3, r2
 800607a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800607c:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 8006082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006088:	f7fc fe5e 	bl	8002d48 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006090:	f7fc fe5a 	bl	8002d48 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e05f      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060a2:	4b10      	ldr	r3, [pc, #64]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0x47c>
 80060ae:	e057      	b.n	8006160 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b0:	4b0c      	ldr	r3, [pc, #48]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a0b      	ldr	r2, [pc, #44]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 80060b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fc fe44 	bl	8002d48 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c4:	f7fc fe40 	bl	8002d48 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e045      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <HAL_RCC_OscConfig+0x4d0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1f0      	bne.n	80060c4 <HAL_RCC_OscConfig+0x4b0>
 80060e2:	e03d      	b.n	8006160 <HAL_RCC_OscConfig+0x54c>
 80060e4:	40023800 	.word	0x40023800
 80060e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80060ec:	4b1f      	ldr	r3, [pc, #124]	; (800616c <HAL_RCC_OscConfig+0x558>)
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d030      	beq.n	800615c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006104:	429a      	cmp	r2, r3
 8006106:	d129      	bne.n	800615c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d122      	bne.n	800615c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800611c:	4013      	ands	r3, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006122:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006124:	4293      	cmp	r3, r2
 8006126:	d119      	bne.n	800615c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	085b      	lsrs	r3, r3, #1
 8006134:	3b01      	subs	r3, #1
 8006136:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006138:	429a      	cmp	r2, r3
 800613a:	d10f      	bne.n	800615c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006148:	429a      	cmp	r2, r3
 800614a:	d107      	bne.n	800615c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006158:	429a      	cmp	r2, r3
 800615a:	d001      	beq.n	8006160 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40023800 	.word	0x40023800

08006170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d101      	bne.n	8006188 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e0d0      	b.n	800632a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006188:	4b6a      	ldr	r3, [pc, #424]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d910      	bls.n	80061b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006196:	4b67      	ldr	r3, [pc, #412]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f023 020f 	bic.w	r2, r3, #15
 800619e:	4965      	ldr	r1, [pc, #404]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061a6:	4b63      	ldr	r3, [pc, #396]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 030f 	and.w	r3, r3, #15
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d001      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0b8      	b.n	800632a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d020      	beq.n	8006206 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061d0:	4b59      	ldr	r3, [pc, #356]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4a58      	ldr	r2, [pc, #352]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80061d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061e8:	4b53      	ldr	r3, [pc, #332]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4a52      	ldr	r2, [pc, #328]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80061ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f4:	4b50      	ldr	r3, [pc, #320]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	494d      	ldr	r1, [pc, #308]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 8006202:	4313      	orrs	r3, r2
 8006204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d040      	beq.n	8006294 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d107      	bne.n	800622a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800621a:	4b47      	ldr	r3, [pc, #284]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d115      	bne.n	8006252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e07f      	b.n	800632a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d107      	bne.n	8006242 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006232:	4b41      	ldr	r3, [pc, #260]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d109      	bne.n	8006252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e073      	b.n	800632a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006242:	4b3d      	ldr	r3, [pc, #244]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e06b      	b.n	800632a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006252:	4b39      	ldr	r3, [pc, #228]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f023 0203 	bic.w	r2, r3, #3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4936      	ldr	r1, [pc, #216]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 8006260:	4313      	orrs	r3, r2
 8006262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006264:	f7fc fd70 	bl	8002d48 <HAL_GetTick>
 8006268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626a:	e00a      	b.n	8006282 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800626c:	f7fc fd6c 	bl	8002d48 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	f241 3288 	movw	r2, #5000	; 0x1388
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e053      	b.n	800632a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006282:	4b2d      	ldr	r3, [pc, #180]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 020c 	and.w	r2, r3, #12
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	429a      	cmp	r2, r3
 8006292:	d1eb      	bne.n	800626c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006294:	4b27      	ldr	r3, [pc, #156]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d210      	bcs.n	80062c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b24      	ldr	r3, [pc, #144]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f023 020f 	bic.w	r2, r3, #15
 80062aa:	4922      	ldr	r1, [pc, #136]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b2:	4b20      	ldr	r3, [pc, #128]	; (8006334 <HAL_RCC_ClockConfig+0x1c4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e032      	b.n	800632a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d0:	4b19      	ldr	r3, [pc, #100]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4916      	ldr	r1, [pc, #88]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	490e      	ldr	r1, [pc, #56]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006302:	f000 f831 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8006306:	4601      	mov	r1, r0
 8006308:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <HAL_RCC_ClockConfig+0x1c8>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <HAL_RCC_ClockConfig+0x1cc>)
 8006314:	5cd3      	ldrb	r3, [r2, r3]
 8006316:	fa21 f303 	lsr.w	r3, r1, r3
 800631a:	4a09      	ldr	r2, [pc, #36]	; (8006340 <HAL_RCC_ClockConfig+0x1d0>)
 800631c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <HAL_RCC_ClockConfig+0x1d4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f7fc fccc 	bl	8002cc0 <HAL_InitTick>

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	40023c00 	.word	0x40023c00
 8006338:	40023800 	.word	0x40023800
 800633c:	0800fa54 	.word	0x0800fa54
 8006340:	20000004 	.word	0x20000004
 8006344:	20000008 	.word	0x20000008

08006348 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_RCC_EnableCSS+0x1c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a04      	ldr	r2, [pc, #16]	; (8006364 <HAL_RCC_EnableCSS+0x1c>)
 8006352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006356:	6013      	str	r3, [r2, #0]
}
 8006358:	bf00      	nop
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40023800 	.word	0x40023800

08006368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	2300      	movs	r3, #0
 8006378:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800637e:	4b50      	ldr	r3, [pc, #320]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	2b04      	cmp	r3, #4
 8006388:	d007      	beq.n	800639a <HAL_RCC_GetSysClockFreq+0x32>
 800638a:	2b08      	cmp	r3, #8
 800638c:	d008      	beq.n	80063a0 <HAL_RCC_GetSysClockFreq+0x38>
 800638e:	2b00      	cmp	r3, #0
 8006390:	f040 808d 	bne.w	80064ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006394:	4b4b      	ldr	r3, [pc, #300]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006396:	60bb      	str	r3, [r7, #8]
      break;
 8006398:	e08c      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800639a:	4b4b      	ldr	r3, [pc, #300]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800639c:	60bb      	str	r3, [r7, #8]
      break;
 800639e:	e089      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063a0:	4b47      	ldr	r3, [pc, #284]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80063aa:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d023      	beq.n	80063fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b6:	4b42      	ldr	r3, [pc, #264]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	f04f 0400 	mov.w	r4, #0
 80063c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	ea03 0501 	and.w	r5, r3, r1
 80063cc:	ea04 0602 	and.w	r6, r4, r2
 80063d0:	4a3d      	ldr	r2, [pc, #244]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80063d2:	fb02 f106 	mul.w	r1, r2, r6
 80063d6:	2200      	movs	r2, #0
 80063d8:	fb02 f205 	mul.w	r2, r2, r5
 80063dc:	440a      	add	r2, r1
 80063de:	493a      	ldr	r1, [pc, #232]	; (80064c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80063e0:	fba5 0101 	umull	r0, r1, r5, r1
 80063e4:	1853      	adds	r3, r2, r1
 80063e6:	4619      	mov	r1, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f04f 0400 	mov.w	r4, #0
 80063ee:	461a      	mov	r2, r3
 80063f0:	4623      	mov	r3, r4
 80063f2:	f7f9 ff7d 	bl	80002f0 <__aeabi_uldivmod>
 80063f6:	4603      	mov	r3, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	60fb      	str	r3, [r7, #12]
 80063fc:	e049      	b.n	8006492 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	099b      	lsrs	r3, r3, #6
 8006404:	f04f 0400 	mov.w	r4, #0
 8006408:	f240 11ff 	movw	r1, #511	; 0x1ff
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	ea03 0501 	and.w	r5, r3, r1
 8006414:	ea04 0602 	and.w	r6, r4, r2
 8006418:	4629      	mov	r1, r5
 800641a:	4632      	mov	r2, r6
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	f04f 0400 	mov.w	r4, #0
 8006424:	0154      	lsls	r4, r2, #5
 8006426:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800642a:	014b      	lsls	r3, r1, #5
 800642c:	4619      	mov	r1, r3
 800642e:	4622      	mov	r2, r4
 8006430:	1b49      	subs	r1, r1, r5
 8006432:	eb62 0206 	sbc.w	r2, r2, r6
 8006436:	f04f 0300 	mov.w	r3, #0
 800643a:	f04f 0400 	mov.w	r4, #0
 800643e:	0194      	lsls	r4, r2, #6
 8006440:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006444:	018b      	lsls	r3, r1, #6
 8006446:	1a5b      	subs	r3, r3, r1
 8006448:	eb64 0402 	sbc.w	r4, r4, r2
 800644c:	f04f 0100 	mov.w	r1, #0
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	00e2      	lsls	r2, r4, #3
 8006456:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800645a:	00d9      	lsls	r1, r3, #3
 800645c:	460b      	mov	r3, r1
 800645e:	4614      	mov	r4, r2
 8006460:	195b      	adds	r3, r3, r5
 8006462:	eb44 0406 	adc.w	r4, r4, r6
 8006466:	f04f 0100 	mov.w	r1, #0
 800646a:	f04f 0200 	mov.w	r2, #0
 800646e:	02a2      	lsls	r2, r4, #10
 8006470:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006474:	0299      	lsls	r1, r3, #10
 8006476:	460b      	mov	r3, r1
 8006478:	4614      	mov	r4, r2
 800647a:	4618      	mov	r0, r3
 800647c:	4621      	mov	r1, r4
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f04f 0400 	mov.w	r4, #0
 8006484:	461a      	mov	r2, r3
 8006486:	4623      	mov	r3, r4
 8006488:	f7f9 ff32 	bl	80002f0 <__aeabi_uldivmod>
 800648c:	4603      	mov	r3, r0
 800648e:	460c      	mov	r4, r1
 8006490:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	3301      	adds	r3, #1
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064aa:	60bb      	str	r3, [r7, #8]
      break;
 80064ac:	e002      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064ae:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80064b0:	60bb      	str	r3, [r7, #8]
      break;
 80064b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064b4:	68bb      	ldr	r3, [r7, #8]
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064be:	bf00      	nop
 80064c0:	40023800 	.word	0x40023800
 80064c4:	00f42400 	.word	0x00f42400
 80064c8:	017d7840 	.word	0x017d7840

080064cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064d0:	4b03      	ldr	r3, [pc, #12]	; (80064e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80064d2:	681b      	ldr	r3, [r3, #0]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	20000004 	.word	0x20000004

080064e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064e8:	f7ff fff0 	bl	80064cc <HAL_RCC_GetHCLKFreq>
 80064ec:	4601      	mov	r1, r0
 80064ee:	4b05      	ldr	r3, [pc, #20]	; (8006504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	0a9b      	lsrs	r3, r3, #10
 80064f4:	f003 0307 	and.w	r3, r3, #7
 80064f8:	4a03      	ldr	r2, [pc, #12]	; (8006508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064fa:	5cd3      	ldrb	r3, [r2, r3]
 80064fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006500:	4618      	mov	r0, r3
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40023800 	.word	0x40023800
 8006508:	0800fa64 	.word	0x0800fa64

0800650c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006510:	f7ff ffdc 	bl	80064cc <HAL_RCC_GetHCLKFreq>
 8006514:	4601      	mov	r1, r0
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	0b5b      	lsrs	r3, r3, #13
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	4a03      	ldr	r2, [pc, #12]	; (8006530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006522:	5cd3      	ldrb	r3, [r2, r3]
 8006524:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006528:	4618      	mov	r0, r3
 800652a:	bd80      	pop	{r7, pc}
 800652c:	40023800 	.word	0x40023800
 8006530:	0800fa64 	.word	0x0800fa64

08006534 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006538:	4b06      	ldr	r3, [pc, #24]	; (8006554 <HAL_RCC_NMI_IRQHandler+0x20>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006540:	2b80      	cmp	r3, #128	; 0x80
 8006542:	d104      	bne.n	800654e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006544:	f000 f80a 	bl	800655c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <HAL_RCC_NMI_IRQHandler+0x24>)
 800654a:	2280      	movs	r2, #128	; 0x80
 800654c:	701a      	strb	r2, [r3, #0]
  }
}
 800654e:	bf00      	nop
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800
 8006558:	4002380e 	.word	0x4002380e

0800655c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0301 	and.w	r3, r3, #1
 8006590:	2b00      	cmp	r3, #0
 8006592:	d012      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006594:	4b69      	ldr	r3, [pc, #420]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	4a68      	ldr	r2, [pc, #416]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800659a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800659e:	6093      	str	r3, [r2, #8]
 80065a0:	4b66      	ldr	r3, [pc, #408]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a8:	4964      	ldr	r1, [pc, #400]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80065b6:	2301      	movs	r3, #1
 80065b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d017      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065c6:	4b5d      	ldr	r3, [pc, #372]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d4:	4959      	ldr	r1, [pc, #356]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e4:	d101      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80065e6:	2301      	movs	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80065f2:	2301      	movs	r3, #1
 80065f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d017      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006602:	4b4e      	ldr	r3, [pc, #312]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006608:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	494a      	ldr	r1, [pc, #296]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006620:	d101      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006622:	2301      	movs	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	2b00      	cmp	r3, #0
 800662c:	d101      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800662e:	2301      	movs	r3, #1
 8006630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800663e:	2301      	movs	r3, #1
 8006640:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 808b 	beq.w	8006766 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006650:	4b3a      	ldr	r3, [pc, #232]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	4a39      	ldr	r2, [pc, #228]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665a:	6413      	str	r3, [r2, #64]	; 0x40
 800665c:	4b37      	ldr	r3, [pc, #220]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006668:	4b35      	ldr	r3, [pc, #212]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a34      	ldr	r2, [pc, #208]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800666e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006674:	f7fc fb68 	bl	8002d48 <HAL_GetTick>
 8006678:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800667a:	e008      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800667c:	f7fc fb64 	bl	8002d48 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	; 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e38d      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800668e:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0f0      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800669a:	4b28      	ldr	r3, [pc, #160]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d035      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d02e      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066b8:	4b20      	ldr	r3, [pc, #128]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066c2:	4b1e      	ldr	r3, [pc, #120]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c6:	4a1d      	ldr	r2, [pc, #116]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066ce:	4b1b      	ldr	r3, [pc, #108]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	4a1a      	ldr	r2, [pc, #104]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80066da:	4a18      	ldr	r2, [pc, #96]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066e0:	4b16      	ldr	r3, [pc, #88]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d114      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ec:	f7fc fb2c 	bl	8002d48 <HAL_GetTick>
 80066f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066f2:	e00a      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066f4:	f7fc fb28 	bl	8002d48 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006702:	4293      	cmp	r3, r2
 8006704:	d901      	bls.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e34f      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800670c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ee      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006722:	d111      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006730:	4b04      	ldr	r3, [pc, #16]	; (8006744 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006732:	400b      	ands	r3, r1
 8006734:	4901      	ldr	r1, [pc, #4]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006736:	4313      	orrs	r3, r2
 8006738:	608b      	str	r3, [r1, #8]
 800673a:	e00b      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800673c:	40023800 	.word	0x40023800
 8006740:	40007000 	.word	0x40007000
 8006744:	0ffffcff 	.word	0x0ffffcff
 8006748:	4bb3      	ldr	r3, [pc, #716]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	4ab2      	ldr	r2, [pc, #712]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800674e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006752:	6093      	str	r3, [r2, #8]
 8006754:	4bb0      	ldr	r3, [pc, #704]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006756:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006760:	49ad      	ldr	r1, [pc, #692]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006762:	4313      	orrs	r3, r2
 8006764:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	2b00      	cmp	r3, #0
 8006770:	d010      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006772:	4ba9      	ldr	r3, [pc, #676]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006778:	4aa7      	ldr	r2, [pc, #668]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800677a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800677e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006782:	4ba5      	ldr	r3, [pc, #660]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006784:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678c:	49a2      	ldr	r1, [pc, #648]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800678e:	4313      	orrs	r3, r2
 8006790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067a0:	4b9d      	ldr	r3, [pc, #628]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ae:	499a      	ldr	r1, [pc, #616]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067c2:	4b95      	ldr	r3, [pc, #596]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067d0:	4991      	ldr	r1, [pc, #580]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067e4:	4b8c      	ldr	r3, [pc, #560]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f2:	4989      	ldr	r1, [pc, #548]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006806:	4b84      	ldr	r3, [pc, #528]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4980      	ldr	r1, [pc, #512]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006828:	4b7b      	ldr	r3, [pc, #492]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682e:	f023 0203 	bic.w	r2, r3, #3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	4978      	ldr	r1, [pc, #480]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006838:	4313      	orrs	r3, r2
 800683a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800684a:	4b73      	ldr	r3, [pc, #460]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006850:	f023 020c 	bic.w	r2, r3, #12
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006858:	496f      	ldr	r1, [pc, #444]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800685a:	4313      	orrs	r3, r2
 800685c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800686c:	4b6a      	ldr	r3, [pc, #424]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006872:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687a:	4967      	ldr	r1, [pc, #412]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800688e:	4b62      	ldr	r3, [pc, #392]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006894:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689c:	495e      	ldr	r1, [pc, #376]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068b0:	4b59      	ldr	r3, [pc, #356]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	4956      	ldr	r1, [pc, #344]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80068d2:	4b51      	ldr	r3, [pc, #324]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	494d      	ldr	r1, [pc, #308]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80068f4:	4b48      	ldr	r3, [pc, #288]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80068f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006902:	4945      	ldr	r1, [pc, #276]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006916:	4b40      	ldr	r3, [pc, #256]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006924:	493c      	ldr	r1, [pc, #240]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006926:	4313      	orrs	r3, r2
 8006928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006938:	4b37      	ldr	r3, [pc, #220]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006946:	4934      	ldr	r1, [pc, #208]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d011      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800695a:	4b2f      	ldr	r3, [pc, #188]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800695c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006960:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006968:	492b      	ldr	r1, [pc, #172]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800696a:	4313      	orrs	r3, r2
 800696c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006978:	d101      	bne.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800697a:	2301      	movs	r3, #1
 800697c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800698a:	2301      	movs	r3, #1
 800698c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800699a:	4b1f      	ldr	r3, [pc, #124]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a8:	491b      	ldr	r1, [pc, #108]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069bc:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069cc:	4912      	ldr	r1, [pc, #72]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80069e0:	4b0d      	ldr	r3, [pc, #52]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f0:	4909      	ldr	r1, [pc, #36]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00f      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a04:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a14:	e002      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006a16:	bf00      	nop
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	4985      	ldr	r1, [pc, #532]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a30:	4b80      	ldr	r3, [pc, #512]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a40:	497c      	ldr	r1, [pc, #496]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d005      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a56:	f040 80d6 	bne.w	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a5a:	4b76      	ldr	r3, [pc, #472]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a75      	ldr	r2, [pc, #468]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006a60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a66:	f7fc f96f 	bl	8002d48 <HAL_GetTick>
 8006a6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a6e:	f7fc f96b 	bl	8002d48 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b64      	cmp	r3, #100	; 0x64
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e194      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a80:	4b6c      	ldr	r3, [pc, #432]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f0      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d021      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11d      	bne.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006aa0:	4b64      	ldr	r3, [pc, #400]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aa6:	0c1b      	lsrs	r3, r3, #16
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006aae:	4b61      	ldr	r3, [pc, #388]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ab4:	0e1b      	lsrs	r3, r3, #24
 8006ab6:	f003 030f 	and.w	r3, r3, #15
 8006aba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	019a      	lsls	r2, r3, #6
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	041b      	lsls	r3, r3, #16
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	061b      	lsls	r3, r3, #24
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	071b      	lsls	r3, r3, #28
 8006ad4:	4957      	ldr	r1, [pc, #348]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d004      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006af0:	d00a      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d02e      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b06:	d129      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b08:	4b4a      	ldr	r3, [pc, #296]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b0e:	0c1b      	lsrs	r3, r3, #16
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b16:	4b47      	ldr	r3, [pc, #284]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b1c:	0f1b      	lsrs	r3, r3, #28
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	019a      	lsls	r2, r3, #6
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	041b      	lsls	r3, r3, #16
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	431a      	orrs	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	071b      	lsls	r3, r3, #28
 8006b3c:	493d      	ldr	r1, [pc, #244]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b44:	4b3b      	ldr	r3, [pc, #236]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4a:	f023 021f 	bic.w	r2, r3, #31
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	3b01      	subs	r3, #1
 8006b54:	4937      	ldr	r1, [pc, #220]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01d      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b68:	4b32      	ldr	r3, [pc, #200]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b6e:	0e1b      	lsrs	r3, r3, #24
 8006b70:	f003 030f 	and.w	r3, r3, #15
 8006b74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b76:	4b2f      	ldr	r3, [pc, #188]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b7c:	0f1b      	lsrs	r3, r3, #28
 8006b7e:	f003 0307 	and.w	r3, r3, #7
 8006b82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	019a      	lsls	r2, r3, #6
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	431a      	orrs	r2, r3
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	061b      	lsls	r3, r3, #24
 8006b96:	431a      	orrs	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	071b      	lsls	r3, r3, #28
 8006b9c:	4925      	ldr	r1, [pc, #148]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d011      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	019a      	lsls	r2, r3, #6
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	041b      	lsls	r3, r3, #16
 8006bbc:	431a      	orrs	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	061b      	lsls	r3, r3, #24
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	071b      	lsls	r3, r3, #28
 8006bcc:	4919      	ldr	r1, [pc, #100]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bd4:	4b17      	ldr	r3, [pc, #92]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006be0:	f7fc f8b2 	bl	8002d48 <HAL_GetTick>
 8006be4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006be6:	e008      	b.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006be8:	f7fc f8ae 	bl	8002d48 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e0d7      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bfa:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0f0      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	f040 80cd 	bne.w	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a08      	ldr	r2, [pc, #32]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c1a:	f7fc f895 	bl	8002d48 <HAL_GetTick>
 8006c1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c20:	e00a      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c22:	f7fc f891 	bl	8002d48 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2b64      	cmp	r3, #100	; 0x64
 8006c2e:	d903      	bls.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e0ba      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8006c34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c38:	4b5e      	ldr	r3, [pc, #376]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c44:	d0ed      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d02e      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d12a      	bne.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c6e:	4b51      	ldr	r3, [pc, #324]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c74:	0c1b      	lsrs	r3, r3, #16
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c7c:	4b4d      	ldr	r3, [pc, #308]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c82:	0f1b      	lsrs	r3, r3, #28
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	019a      	lsls	r2, r3, #6
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	041b      	lsls	r3, r3, #16
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	061b      	lsls	r3, r3, #24
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	071b      	lsls	r3, r3, #28
 8006ca2:	4944      	ldr	r1, [pc, #272]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006caa:	4b42      	ldr	r3, [pc, #264]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	493d      	ldr	r1, [pc, #244]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d022      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cd8:	d11d      	bne.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cda:	4b36      	ldr	r3, [pc, #216]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce0:	0e1b      	lsrs	r3, r3, #24
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ce8:	4b32      	ldr	r3, [pc, #200]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cee:	0f1b      	lsrs	r3, r3, #28
 8006cf0:	f003 0307 	and.w	r3, r3, #7
 8006cf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	019a      	lsls	r2, r3, #6
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	431a      	orrs	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	061b      	lsls	r3, r3, #24
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	071b      	lsls	r3, r3, #28
 8006d0e:	4929      	ldr	r1, [pc, #164]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d028      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d28:	0e1b      	lsrs	r3, r3, #24
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d30:	4b20      	ldr	r3, [pc, #128]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	0c1b      	lsrs	r3, r3, #16
 8006d38:	f003 0303 	and.w	r3, r3, #3
 8006d3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	019a      	lsls	r2, r3, #6
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	041b      	lsls	r3, r3, #16
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	061b      	lsls	r3, r3, #24
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	071b      	lsls	r3, r3, #28
 8006d56:	4917      	ldr	r1, [pc, #92]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d5e:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	4911      	ldr	r1, [pc, #68]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d74:	4b0f      	ldr	r3, [pc, #60]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a0e      	ldr	r2, [pc, #56]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d80:	f7fb ffe2 	bl	8002d48 <HAL_GetTick>
 8006d84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d86:	e008      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d88:	f7fb ffde 	bl	8002d48 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	2b64      	cmp	r3, #100	; 0x64
 8006d94:	d901      	bls.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d96:	2303      	movs	r3, #3
 8006d98:	e007      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d9a:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006da6:	d1ef      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40023800 	.word	0x40023800

08006db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e084      	b.n	8006ed4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d106      	bne.n	8006dea <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7fb fcf7 	bl	80027d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2202      	movs	r2, #2
 8006dee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e00:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e0a:	d902      	bls.n	8006e12 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e002      	b.n	8006e18 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e16:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006e20:	d007      	beq.n	8006e32 <HAL_SPI_Init+0x7a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e2a:	d002      	beq.n	8006e32 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e42:	d903      	bls.n	8006e4c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	631a      	str	r2, [r3, #48]	; 0x30
 8006e4a:	e002      	b.n	8006e52 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	ea42 0103 	orr.w	r1, r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	0c1b      	lsrs	r3, r3, #16
 8006e92:	f003 0204 	and.w	r2, r3, #4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	ea42 0103 	orr.w	r1, r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	69da      	ldr	r2, [r3, #28]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ec2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d101      	bne.n	8006efe <HAL_SPI_Transmit+0x22>
 8006efa:	2302      	movs	r3, #2
 8006efc:	e150      	b.n	80071a0 <HAL_SPI_Transmit+0x2c4>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f06:	f7fb ff1f 	bl	8002d48 <HAL_GetTick>
 8006f0a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d002      	beq.n	8006f22 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f20:	e135      	b.n	800718e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <HAL_SPI_Transmit+0x52>
 8006f28:	88fb      	ldrh	r3, [r7, #6]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f32:	e12c      	b.n	800718e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2203      	movs	r2, #3
 8006f38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	88fa      	ldrh	r2, [r7, #6]
 8006f52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7e:	d107      	bne.n	8006f90 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f9a:	2b40      	cmp	r3, #64	; 0x40
 8006f9c:	d007      	beq.n	8006fae <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006fb6:	d94b      	bls.n	8007050 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Transmit+0xea>
 8006fc0:	8afb      	ldrh	r3, [r7, #22]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d13e      	bne.n	8007044 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	881a      	ldrh	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	1c9a      	adds	r2, r3, #2
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fea:	e02b      	b.n	8007044 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d112      	bne.n	8007020 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	881a      	ldrh	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007014:	b29b      	uxth	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800701e:	e011      	b.n	8007044 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007020:	f7fb fe92 	bl	8002d48 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d803      	bhi.n	8007038 <HAL_SPI_Transmit+0x15c>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d102      	bne.n	800703e <HAL_SPI_Transmit+0x162>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d102      	bne.n	8007044 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007042:	e0a4      	b.n	800718e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1ce      	bne.n	8006fec <HAL_SPI_Transmit+0x110>
 800704e:	e07c      	b.n	800714a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <HAL_SPI_Transmit+0x182>
 8007058:	8afb      	ldrh	r3, [r7, #22]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d170      	bne.n	8007140 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007062:	b29b      	uxth	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	d912      	bls.n	800708e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	881a      	ldrh	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	1c9a      	adds	r2, r3, #2
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007082:	b29b      	uxth	r3, r3
 8007084:	3b02      	subs	r3, #2
 8007086:	b29a      	uxth	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800708c:	e058      	b.n	8007140 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	7812      	ldrb	r2, [r2, #0]
 800709a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80070b4:	e044      	b.n	8007140 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d12b      	bne.n	800711c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d912      	bls.n	80070f4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	881a      	ldrh	r2, [r3, #0]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070de:	1c9a      	adds	r2, r3, #2
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b02      	subs	r3, #2
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070f2:	e025      	b.n	8007140 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	330c      	adds	r3, #12
 80070fe:	7812      	ldrb	r2, [r2, #0]
 8007100:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	87da      	strh	r2, [r3, #62]	; 0x3e
 800711a:	e011      	b.n	8007140 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800711c:	f7fb fe14 	bl	8002d48 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	429a      	cmp	r2, r3
 800712a:	d803      	bhi.n	8007134 <HAL_SPI_Transmit+0x258>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d102      	bne.n	800713a <HAL_SPI_Transmit+0x25e>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d102      	bne.n	8007140 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800713e:	e026      	b.n	800718e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007144:	b29b      	uxth	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1b5      	bne.n	80070b6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 fca2 	bl	8007a98 <SPI_EndRxTxTransaction>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2220      	movs	r2, #32
 800715e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10a      	bne.n	800717e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007168:	2300      	movs	r3, #0
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007182:	2b00      	cmp	r3, #0
 8007184:	d002      	beq.n	800718c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	77fb      	strb	r3, [r7, #31]
 800718a:	e000      	b.n	800718e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800718c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800719e:	7ffb      	ldrb	r3, [r7, #31]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	4613      	mov	r3, r2
 80071b6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c4:	d112      	bne.n	80071ec <HAL_SPI_Receive+0x44>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10e      	bne.n	80071ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2204      	movs	r2, #4
 80071d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071d6:	88fa      	ldrh	r2, [r7, #6]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	4613      	mov	r3, r2
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f000 f908 	bl	80073f8 <HAL_SPI_TransmitReceive>
 80071e8:	4603      	mov	r3, r0
 80071ea:	e101      	b.n	80073f0 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_SPI_Receive+0x52>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e0fa      	b.n	80073f0 <HAL_SPI_Receive+0x248>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007202:	f7fb fda1 	bl	8002d48 <HAL_GetTick>
 8007206:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b01      	cmp	r3, #1
 8007212:	d002      	beq.n	800721a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007214:	2302      	movs	r3, #2
 8007216:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007218:	e0e1      	b.n	80073de <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_SPI_Receive+0x7e>
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
    goto error;
 800722a:	e0d8      	b.n	80073de <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2204      	movs	r2, #4
 8007230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	88fa      	ldrh	r2, [r7, #6]
 800724c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007276:	d908      	bls.n	800728a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007286:	605a      	str	r2, [r3, #4]
 8007288:	e007      	b.n	800729a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007298:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a2:	d107      	bne.n	80072b4 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072b2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b40      	cmp	r3, #64	; 0x40
 80072c0:	d007      	beq.n	80072d2 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072d0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072da:	d867      	bhi.n	80073ac <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072dc:	e030      	b.n	8007340 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d117      	bne.n	800731c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f103 020c 	add.w	r2, r3, #12
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	7812      	ldrb	r2, [r2, #0]
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800730e:	b29b      	uxth	r3, r3
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800731a:	e011      	b.n	8007340 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800731c:	f7fb fd14 	bl	8002d48 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d803      	bhi.n	8007334 <HAL_SPI_Receive+0x18c>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d102      	bne.n	800733a <HAL_SPI_Receive+0x192>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800733e:	e04e      	b.n	80073de <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1c8      	bne.n	80072de <HAL_SPI_Receive+0x136>
 800734c:	e034      	b.n	80073b8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b01      	cmp	r3, #1
 800735a:	d115      	bne.n	8007388 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	b292      	uxth	r2, r2
 8007368:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	1c9a      	adds	r2, r3, #2
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007386:	e011      	b.n	80073ac <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007388:	f7fb fcde 	bl	8002d48 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	429a      	cmp	r2, r3
 8007396:	d803      	bhi.n	80073a0 <HAL_SPI_Receive+0x1f8>
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739e:	d102      	bne.n	80073a6 <HAL_SPI_Receive+0x1fe>
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d102      	bne.n	80073ac <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073aa:	e018      	b.n	80073de <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1ca      	bne.n	800734e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fb13 	bl	80079e8 <SPI_EndRxTransaction>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	75fb      	strb	r3, [r7, #23]
 80073da:	e000      	b.n	80073de <HAL_SPI_Receive+0x236>
  }

error :
 80073dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	; 0x28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007406:	2301      	movs	r3, #1
 8007408:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_SPI_TransmitReceive+0x26>
 800741a:	2302      	movs	r3, #2
 800741c:	e1fb      	b.n	8007816 <HAL_SPI_TransmitReceive+0x41e>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007426:	f7fb fc8f 	bl	8002d48 <HAL_GetTick>
 800742a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007432:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800743a:	887b      	ldrh	r3, [r7, #2]
 800743c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800743e:	887b      	ldrh	r3, [r7, #2]
 8007440:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007442:	7efb      	ldrb	r3, [r7, #27]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d00e      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x6e>
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800744e:	d106      	bne.n	800745e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <HAL_SPI_TransmitReceive+0x66>
 8007458:	7efb      	ldrb	r3, [r7, #27]
 800745a:	2b04      	cmp	r3, #4
 800745c:	d003      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800745e:	2302      	movs	r3, #2
 8007460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007464:	e1cd      	b.n	8007802 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <HAL_SPI_TransmitReceive+0x80>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <HAL_SPI_TransmitReceive+0x80>
 8007472:	887b      	ldrh	r3, [r7, #2]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800747e:	e1c0      	b.n	8007802 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b04      	cmp	r3, #4
 800748a:	d003      	beq.n	8007494 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2205      	movs	r2, #5
 8007490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	887a      	ldrh	r2, [r7, #2]
 80074a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	887a      	ldrh	r2, [r7, #2]
 80074ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	887a      	ldrh	r2, [r7, #2]
 80074ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	887a      	ldrh	r2, [r7, #2]
 80074c0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074d6:	d802      	bhi.n	80074de <HAL_SPI_TransmitReceive+0xe6>
 80074d8:	8a3b      	ldrh	r3, [r7, #16]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d908      	bls.n	80074f0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074ec:	605a      	str	r2, [r3, #4]
 80074ee:	e007      	b.n	8007500 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d007      	beq.n	800751e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800751c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007526:	d97c      	bls.n	8007622 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_SPI_TransmitReceive+0x13e>
 8007530:	8a7b      	ldrh	r3, [r7, #18]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d169      	bne.n	800760a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753a:	881a      	ldrh	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007546:	1c9a      	adds	r2, r3, #2
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800755a:	e056      	b.n	800760a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b02      	cmp	r3, #2
 8007568:	d11b      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x1aa>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d016      	beq.n	80075a2 <HAL_SPI_TransmitReceive+0x1aa>
 8007574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007576:	2b01      	cmp	r3, #1
 8007578:	d113      	bne.n	80075a2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	881a      	ldrh	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	1c9a      	adds	r2, r3, #2
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b01      	subs	r3, #1
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d11c      	bne.n	80075ea <HAL_SPI_TransmitReceive+0x1f2>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d016      	beq.n	80075ea <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	68da      	ldr	r2, [r3, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	b292      	uxth	r2, r2
 80075c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	1c9a      	adds	r2, r3, #2
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075e6:	2301      	movs	r3, #1
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075ea:	f7fb fbad 	bl	8002d48 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d807      	bhi.n	800760a <HAL_SPI_TransmitReceive+0x212>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007600:	d003      	beq.n	800760a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007608:	e0fb      	b.n	8007802 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1a3      	bne.n	800755c <HAL_SPI_TransmitReceive+0x164>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d19d      	bne.n	800755c <HAL_SPI_TransmitReceive+0x164>
 8007620:	e0df      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_SPI_TransmitReceive+0x23a>
 800762a:	8a7b      	ldrh	r3, [r7, #18]
 800762c:	2b01      	cmp	r3, #1
 800762e:	f040 80cb 	bne.w	80077c8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	d912      	bls.n	8007662 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	881a      	ldrh	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	1c9a      	adds	r2, r3, #2
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007656:	b29b      	uxth	r3, r3
 8007658:	3b02      	subs	r3, #2
 800765a:	b29a      	uxth	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007660:	e0b2      	b.n	80077c8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	330c      	adds	r3, #12
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007688:	e09e      	b.n	80077c8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b02      	cmp	r3, #2
 8007696:	d134      	bne.n	8007702 <HAL_SPI_TransmitReceive+0x30a>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800769c:	b29b      	uxth	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d02f      	beq.n	8007702 <HAL_SPI_TransmitReceive+0x30a>
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d12c      	bne.n	8007702 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d912      	bls.n	80076d8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b6:	881a      	ldrh	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c2:	1c9a      	adds	r2, r3, #2
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	3b02      	subs	r3, #2
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076d6:	e012      	b.n	80076fe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	7812      	ldrb	r2, [r2, #0]
 80076e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	3b01      	subs	r3, #1
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b01      	cmp	r3, #1
 800770e:	d148      	bne.n	80077a2 <HAL_SPI_TransmitReceive+0x3aa>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d042      	beq.n	80077a2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b01      	cmp	r3, #1
 8007726:	d923      	bls.n	8007770 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	b292      	uxth	r2, r2
 8007734:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	1c9a      	adds	r2, r3, #2
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b02      	subs	r3, #2
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b01      	cmp	r3, #1
 800775c:	d81f      	bhi.n	800779e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800776c:	605a      	str	r2, [r3, #4]
 800776e:	e016      	b.n	800779e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f103 020c 	add.w	r2, r3, #12
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	7812      	ldrb	r2, [r2, #0]
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800779e:	2301      	movs	r3, #1
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077a2:	f7fb fad1 	bl	8002d48 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d803      	bhi.n	80077ba <HAL_SPI_TransmitReceive+0x3c2>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d102      	bne.n	80077c0 <HAL_SPI_TransmitReceive+0x3c8>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80077c6:	e01c      	b.n	8007802 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f47f af5b 	bne.w	800768a <HAL_SPI_TransmitReceive+0x292>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f47f af54 	bne.w	800768a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 f956 	bl	8007a98 <SPI_EndRxTxTransaction>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d006      	beq.n	8007800 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2220      	movs	r2, #32
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60
 80077fe:	e000      	b.n	8007802 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007800:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007816:	4618      	mov	r0, r3
 8007818:	3728      	adds	r7, #40	; 0x28
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800782c:	b2db      	uxtb	r3, r3
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	60f8      	str	r0, [r7, #12]
 8007842:	60b9      	str	r1, [r7, #8]
 8007844:	603b      	str	r3, [r7, #0]
 8007846:	4613      	mov	r3, r2
 8007848:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800784a:	e04c      	b.n	80078e6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d048      	beq.n	80078e6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007854:	f7fb fa78 	bl	8002d48 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d902      	bls.n	800786a <SPI_WaitFlagStateUntilTimeout+0x30>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d13d      	bne.n	80078e6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007882:	d111      	bne.n	80078a8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800788c:	d004      	beq.n	8007898 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007896:	d107      	bne.n	80078a8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b0:	d10f      	bne.n	80078d2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e00f      	b.n	8007906 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4013      	ands	r3, r2
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	bf0c      	ite	eq
 80078f6:	2301      	moveq	r3, #1
 80078f8:	2300      	movne	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	461a      	mov	r2, r3
 80078fe:	79fb      	ldrb	r3, [r7, #7]
 8007900:	429a      	cmp	r2, r3
 8007902:	d1a3      	bne.n	800784c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	607a      	str	r2, [r7, #4]
 800791a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800791c:	e057      	b.n	80079ce <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007924:	d106      	bne.n	8007934 <SPI_WaitFifoStateUntilTimeout+0x26>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d103      	bne.n	8007934 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	330c      	adds	r3, #12
 8007932:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793a:	d048      	beq.n	80079ce <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800793c:	f7fb fa04 	bl	8002d48 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	683a      	ldr	r2, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d902      	bls.n	8007952 <SPI_WaitFifoStateUntilTimeout+0x44>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d13d      	bne.n	80079ce <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007960:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800796a:	d111      	bne.n	8007990 <SPI_WaitFifoStateUntilTimeout+0x82>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007974:	d004      	beq.n	8007980 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797e:	d107      	bne.n	8007990 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800798e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007998:	d10f      	bne.n	80079ba <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e008      	b.n	80079e0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	4013      	ands	r3, r2
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d19f      	bne.n	800791e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079fc:	d111      	bne.n	8007a22 <SPI_EndRxTransaction+0x3a>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a06:	d004      	beq.n	8007a12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a10:	d107      	bne.n	8007a22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a20:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff ff04 	bl	800783a <SPI_WaitFlagStateUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d007      	beq.n	8007a48 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a3c:	f043 0220 	orr.w	r2, r3, #32
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e023      	b.n	8007a90 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a50:	d11d      	bne.n	8007a8e <SPI_EndRxTransaction+0xa6>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a5a:	d004      	beq.n	8007a66 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a64:	d113      	bne.n	8007a8e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff ff4b 	bl	800790e <SPI_WaitFifoStateUntilTimeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d007      	beq.n	8007a8e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a82:	f043 0220 	orr.w	r2, r3, #32
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e000      	b.n	8007a90 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af02      	add	r7, sp, #8
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f7ff ff2c 	bl	800790e <SPI_WaitFifoStateUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac0:	f043 0220 	orr.w	r2, r3, #32
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e027      	b.n	8007b1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f7ff feaf 	bl	800783a <SPI_WaitFlagStateUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d007      	beq.n	8007af2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae6:	f043 0220 	orr.w	r2, r3, #32
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e014      	b.n	8007b1c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff ff05 	bl	800790e <SPI_WaitFifoStateUntilTimeout>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d007      	beq.n	8007b1a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0e:	f043 0220 	orr.w	r2, r3, #32
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e000      	b.n	8007b1c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e01d      	b.n	8007b72 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7fa fe88 	bl	8002860 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f000 f966 	bl	8007e34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	6839      	ldr	r1, [r7, #0]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fc4e 	bl	8008430 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <HAL_TIM_PWM_Start+0x7c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d004      	beq.n	8007ba8 <HAL_TIM_PWM_Start+0x2c>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <HAL_TIM_PWM_Start+0x80>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d101      	bne.n	8007bac <HAL_TIM_PWM_Start+0x30>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <HAL_TIM_PWM_Start+0x32>
 8007bac:	2300      	movs	r3, #0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	; (8007c00 <HAL_TIM_PWM_Start+0x84>)
 8007bca:	4013      	ands	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b06      	cmp	r3, #6
 8007bd2:	d00b      	beq.n	8007bec <HAL_TIM_PWM_Start+0x70>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bda:	d007      	beq.n	8007bec <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0201 	orr.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40010000 	.word	0x40010000
 8007bfc:	40010400 	.word	0x40010400
 8007c00:	00010007 	.word	0x00010007

08007c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e105      	b.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0x226>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b14      	cmp	r3, #20
 8007c32:	f200 80f0 	bhi.w	8007e16 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007c36:	a201      	add	r2, pc, #4	; (adr r2, 8007c3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c91 	.word	0x08007c91
 8007c40:	08007e17 	.word	0x08007e17
 8007c44:	08007e17 	.word	0x08007e17
 8007c48:	08007e17 	.word	0x08007e17
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007e17 	.word	0x08007e17
 8007c54:	08007e17 	.word	0x08007e17
 8007c58:	08007e17 	.word	0x08007e17
 8007c5c:	08007d13 	.word	0x08007d13
 8007c60:	08007e17 	.word	0x08007e17
 8007c64:	08007e17 	.word	0x08007e17
 8007c68:	08007e17 	.word	0x08007e17
 8007c6c:	08007d53 	.word	0x08007d53
 8007c70:	08007e17 	.word	0x08007e17
 8007c74:	08007e17 	.word	0x08007e17
 8007c78:	08007e17 	.word	0x08007e17
 8007c7c:	08007d95 	.word	0x08007d95
 8007c80:	08007e17 	.word	0x08007e17
 8007c84:	08007e17 	.word	0x08007e17
 8007c88:	08007e17 	.word	0x08007e17
 8007c8c:	08007dd5 	.word	0x08007dd5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 f96c 	bl	8007f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	699a      	ldr	r2, [r3, #24]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0208 	orr.w	r2, r2, #8
 8007caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	699a      	ldr	r2, [r3, #24]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0204 	bic.w	r2, r2, #4
 8007cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6999      	ldr	r1, [r3, #24]
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	619a      	str	r2, [r3, #24]
      break;
 8007cce:	e0a3      	b.n	8007e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f9be 	bl	8008058 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	699a      	ldr	r2, [r3, #24]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6999      	ldr	r1, [r3, #24]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	021a      	lsls	r2, r3, #8
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	619a      	str	r2, [r3, #24]
      break;
 8007d10:	e082      	b.n	8007e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fa15 	bl	8008148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69da      	ldr	r2, [r3, #28]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f042 0208 	orr.w	r2, r2, #8
 8007d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f022 0204 	bic.w	r2, r2, #4
 8007d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	69d9      	ldr	r1, [r3, #28]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	61da      	str	r2, [r3, #28]
      break;
 8007d50:	e062      	b.n	8007e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f000 fa6b 	bl	8008234 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	69da      	ldr	r2, [r3, #28]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	69da      	ldr	r2, [r3, #28]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69d9      	ldr	r1, [r3, #28]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	021a      	lsls	r2, r3, #8
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	61da      	str	r2, [r3, #28]
      break;
 8007d92:	e041      	b.n	8007e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 faa2 	bl	80082e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0208 	orr.w	r2, r2, #8
 8007dae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0204 	bic.w	r2, r2, #4
 8007dbe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007dd2:	e021      	b.n	8007e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 fad4 	bl	8008388 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	021a      	lsls	r2, r3, #8
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007e14:	e000      	b.n	8007e18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007e16:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop

08007e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d013      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e52:	d00f      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a3d      	ldr	r2, [pc, #244]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00b      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a3c      	ldr	r2, [pc, #240]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d007      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a3b      	ldr	r2, [pc, #236]	; (8007f54 <TIM_Base_SetConfig+0x120>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a3a      	ldr	r2, [pc, #232]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d108      	bne.n	8007e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2f      	ldr	r2, [pc, #188]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d02b      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e94:	d027      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d023      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a2b      	ldr	r2, [pc, #172]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d01f      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <TIM_Base_SetConfig+0x120>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d01b      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a29      	ldr	r2, [pc, #164]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d017      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a28      	ldr	r2, [pc, #160]	; (8007f5c <TIM_Base_SetConfig+0x128>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d013      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <TIM_Base_SetConfig+0x12c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00f      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <TIM_Base_SetConfig+0x130>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00b      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a25      	ldr	r2, [pc, #148]	; (8007f68 <TIM_Base_SetConfig+0x134>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d007      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a24      	ldr	r2, [pc, #144]	; (8007f6c <TIM_Base_SetConfig+0x138>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d003      	beq.n	8007ee6 <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a23      	ldr	r2, [pc, #140]	; (8007f70 <TIM_Base_SetConfig+0x13c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d108      	bne.n	8007ef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a0a      	ldr	r2, [pc, #40]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a0c      	ldr	r2, [pc, #48]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d103      	bne.n	8007f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	615a      	str	r2, [r3, #20]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800
 8007f68:	40001800 	.word	0x40001800
 8007f6c:	40001c00 	.word	0x40001c00
 8007f70:	40002000 	.word	0x40002000

08007f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	f023 0201 	bic.w	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4b2b      	ldr	r3, [pc, #172]	; (800804c <TIM_OC1_SetConfig+0xd8>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0303 	bic.w	r3, r3, #3
 8007faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f023 0302 	bic.w	r3, r3, #2
 8007fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a21      	ldr	r2, [pc, #132]	; (8008050 <TIM_OC1_SetConfig+0xdc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d003      	beq.n	8007fd8 <TIM_OC1_SetConfig+0x64>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a20      	ldr	r2, [pc, #128]	; (8008054 <TIM_OC1_SetConfig+0xe0>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d10c      	bne.n	8007ff2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	f023 0308 	bic.w	r3, r3, #8
 8007fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f023 0304 	bic.w	r3, r3, #4
 8007ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a16      	ldr	r2, [pc, #88]	; (8008050 <TIM_OC1_SetConfig+0xdc>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d003      	beq.n	8008002 <TIM_OC1_SetConfig+0x8e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <TIM_OC1_SetConfig+0xe0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d111      	bne.n	8008026 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	4313      	orrs	r3, r2
 800801a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	4313      	orrs	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	bf00      	nop
 8008042:	371c      	adds	r7, #28
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	fffeff8f 	.word	0xfffeff8f
 8008050:	40010000 	.word	0x40010000
 8008054:	40010400 	.word	0x40010400

08008058 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	f023 0210 	bic.w	r2, r3, #16
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4b2e      	ldr	r3, [pc, #184]	; (800813c <TIM_OC2_SetConfig+0xe4>)
 8008084:	4013      	ands	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	021b      	lsls	r3, r3, #8
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f023 0320 	bic.w	r3, r3, #32
 80080a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a23      	ldr	r2, [pc, #140]	; (8008140 <TIM_OC2_SetConfig+0xe8>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d003      	beq.n	80080c0 <TIM_OC2_SetConfig+0x68>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a22      	ldr	r2, [pc, #136]	; (8008144 <TIM_OC2_SetConfig+0xec>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d10d      	bne.n	80080dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	011b      	lsls	r3, r3, #4
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a18      	ldr	r2, [pc, #96]	; (8008140 <TIM_OC2_SetConfig+0xe8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_OC2_SetConfig+0x94>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a17      	ldr	r2, [pc, #92]	; (8008144 <TIM_OC2_SetConfig+0xec>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d113      	bne.n	8008114 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	621a      	str	r2, [r3, #32]
}
 800812e:	bf00      	nop
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	feff8fff 	.word	0xfeff8fff
 8008140:	40010000 	.word	0x40010000
 8008144:	40010400 	.word	0x40010400

08008148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4b2d      	ldr	r3, [pc, #180]	; (8008228 <TIM_OC3_SetConfig+0xe0>)
 8008174:	4013      	ands	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0303 	bic.w	r3, r3, #3
 800817e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	021b      	lsls	r3, r3, #8
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a22      	ldr	r2, [pc, #136]	; (800822c <TIM_OC3_SetConfig+0xe4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d003      	beq.n	80081ae <TIM_OC3_SetConfig+0x66>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a21      	ldr	r2, [pc, #132]	; (8008230 <TIM_OC3_SetConfig+0xe8>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d10d      	bne.n	80081ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	021b      	lsls	r3, r3, #8
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	4313      	orrs	r3, r2
 80081c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a17      	ldr	r2, [pc, #92]	; (800822c <TIM_OC3_SetConfig+0xe4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d003      	beq.n	80081da <TIM_OC3_SetConfig+0x92>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a16      	ldr	r2, [pc, #88]	; (8008230 <TIM_OC3_SetConfig+0xe8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d113      	bne.n	8008202 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	4313      	orrs	r3, r2
 8008200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	621a      	str	r2, [r3, #32]
}
 800821c:	bf00      	nop
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	fffeff8f 	.word	0xfffeff8f
 800822c:	40010000 	.word	0x40010000
 8008230:	40010400 	.word	0x40010400

08008234 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4b1e      	ldr	r3, [pc, #120]	; (80082d8 <TIM_OC4_SetConfig+0xa4>)
 8008260:	4013      	ands	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800826a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	021b      	lsls	r3, r3, #8
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4313      	orrs	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800827e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	031b      	lsls	r3, r3, #12
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4313      	orrs	r3, r2
 800828a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a13      	ldr	r2, [pc, #76]	; (80082dc <TIM_OC4_SetConfig+0xa8>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d003      	beq.n	800829c <TIM_OC4_SetConfig+0x68>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a12      	ldr	r2, [pc, #72]	; (80082e0 <TIM_OC4_SetConfig+0xac>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d109      	bne.n	80082b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	019b      	lsls	r3, r3, #6
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	621a      	str	r2, [r3, #32]
}
 80082ca:	bf00      	nop
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	feff8fff 	.word	0xfeff8fff
 80082dc:	40010000 	.word	0x40010000
 80082e0:	40010400 	.word	0x40010400

080082e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4b1b      	ldr	r3, [pc, #108]	; (800837c <TIM_OC5_SetConfig+0x98>)
 8008310:	4013      	ands	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	041b      	lsls	r3, r3, #16
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	4313      	orrs	r3, r2
 8008330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a12      	ldr	r2, [pc, #72]	; (8008380 <TIM_OC5_SetConfig+0x9c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d003      	beq.n	8008342 <TIM_OC5_SetConfig+0x5e>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a11      	ldr	r2, [pc, #68]	; (8008384 <TIM_OC5_SetConfig+0xa0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d109      	bne.n	8008356 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008348:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	021b      	lsls	r3, r3, #8
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	4313      	orrs	r3, r2
 8008354:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	621a      	str	r2, [r3, #32]
}
 8008370:	bf00      	nop
 8008372:	371c      	adds	r7, #28
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	fffeff8f 	.word	0xfffeff8f
 8008380:	40010000 	.word	0x40010000
 8008384:	40010400 	.word	0x40010400

08008388 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <TIM_OC6_SetConfig+0x9c>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	051b      	lsls	r3, r3, #20
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a13      	ldr	r2, [pc, #76]	; (8008428 <TIM_OC6_SetConfig+0xa0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d003      	beq.n	80083e8 <TIM_OC6_SetConfig+0x60>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a12      	ldr	r2, [pc, #72]	; (800842c <TIM_OC6_SetConfig+0xa4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d109      	bne.n	80083fc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	029b      	lsls	r3, r3, #10
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	621a      	str	r2, [r3, #32]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	feff8fff 	.word	0xfeff8fff
 8008428:	40010000 	.word	0x40010000
 800842c:	40010400 	.word	0x40010400

08008430 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	f003 031f 	and.w	r3, r3, #31
 8008442:	2201      	movs	r2, #1
 8008444:	fa02 f303 	lsl.w	r3, r2, r3
 8008448:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6a1a      	ldr	r2, [r3, #32]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	43db      	mvns	r3, r3
 8008452:	401a      	ands	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6a1a      	ldr	r2, [r3, #32]
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	f003 031f 	and.w	r3, r3, #31
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	fa01 f303 	lsl.w	r3, r1, r3
 8008468:	431a      	orrs	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	621a      	str	r2, [r3, #32]
}
 800846e:	bf00      	nop
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008490:	2302      	movs	r3, #2
 8008492:	e06d      	b.n	8008570 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a30      	ldr	r2, [pc, #192]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d004      	beq.n	80084c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a2f      	ldr	r2, [pc, #188]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d108      	bne.n	80084da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a20      	ldr	r2, [pc, #128]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d022      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008506:	d01d      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d018      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a1c      	ldr	r2, [pc, #112]	; (8008588 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d013      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a1a      	ldr	r2, [pc, #104]	; (800858c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00e      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a15      	ldr	r2, [pc, #84]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d009      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a16      	ldr	r2, [pc, #88]	; (8008590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a15      	ldr	r2, [pc, #84]	; (8008594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d10c      	bne.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800854a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	4313      	orrs	r3, r2
 8008554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	40010000 	.word	0x40010000
 8008580:	40010400 	.word	0x40010400
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40014000 	.word	0x40014000
 8008594:	40001800 	.word	0x40001800

08008598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e065      	b.n	8008680 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	041b      	lsls	r3, r3, #16
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a16      	ldr	r2, [pc, #88]	; (800868c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d004      	beq.n	8008642 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a14      	ldr	r2, [pc, #80]	; (8008690 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d115      	bne.n	800866e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	051b      	lsls	r3, r3, #20
 800864e:	4313      	orrs	r3, r2
 8008650:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	69db      	ldr	r3, [r3, #28]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	40010000 	.word	0x40010000
 8008690:	40010400 	.word	0x40010400

08008694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e040      	b.n	8008728 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d106      	bne.n	80086bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7fa f966 	bl	8002988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2224      	movs	r2, #36	; 0x24
 80086c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0201 	bic.w	r2, r2, #1
 80086d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fb40 	bl	8008d58 <UART_SetConfig>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d101      	bne.n	80086e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e022      	b.n	8008728 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fdde 	bl	80092ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689a      	ldr	r2, [r3, #8]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800870e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0201 	orr.w	r2, r2, #1
 800871e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fe65 	bl	80093f0 <UART_CheckIdleState>
 8008726:	4603      	mov	r3, r0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08a      	sub	sp, #40	; 0x28
 8008734:	af02      	add	r7, sp, #8
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	603b      	str	r3, [r7, #0]
 800873c:	4613      	mov	r3, r2
 800873e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008744:	2b20      	cmp	r3, #32
 8008746:	d17f      	bne.n	8008848 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <HAL_UART_Transmit+0x24>
 800874e:	88fb      	ldrh	r3, [r7, #6]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e078      	b.n	800884a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800875e:	2b01      	cmp	r3, #1
 8008760:	d101      	bne.n	8008766 <HAL_UART_Transmit+0x36>
 8008762:	2302      	movs	r3, #2
 8008764:	e071      	b.n	800884a <HAL_UART_Transmit+0x11a>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2221      	movs	r2, #33	; 0x21
 8008778:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800877a:	f7fa fae5 	bl	8002d48 <HAL_GetTick>
 800877e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	88fa      	ldrh	r2, [r7, #6]
 8008784:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	88fa      	ldrh	r2, [r7, #6]
 800878c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008798:	d108      	bne.n	80087ac <HAL_UART_Transmit+0x7c>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e003      	b.n	80087b4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087b0:	2300      	movs	r3, #0
 80087b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80087bc:	e02c      	b.n	8008818 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2200      	movs	r2, #0
 80087c6:	2180      	movs	r1, #128	; 0x80
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f000 fe56 	bl	800947a <UART_WaitOnFlagUntilTimeout>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e038      	b.n	800884a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10b      	bne.n	80087f6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	3302      	adds	r3, #2
 80087f2:	61bb      	str	r3, [r7, #24]
 80087f4:	e007      	b.n	8008806 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	3301      	adds	r3, #1
 8008804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800880c:	b29b      	uxth	r3, r3
 800880e:	3b01      	subs	r3, #1
 8008810:	b29a      	uxth	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1cc      	bne.n	80087be <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	2200      	movs	r2, #0
 800882c:	2140      	movs	r1, #64	; 0x40
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fe23 	bl	800947a <UART_WaitOnFlagUntilTimeout>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e005      	b.n	800884a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2220      	movs	r2, #32
 8008842:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	e000      	b.n	800884a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008848:	2302      	movs	r3, #2
  }
}
 800884a:	4618      	mov	r0, r3
 800884c:	3720      	adds	r7, #32
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	4613      	mov	r3, r2
 8008860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008866:	2b20      	cmp	r3, #32
 8008868:	d164      	bne.n	8008934 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_UART_Transmit_DMA+0x22>
 8008870:	88fb      	ldrh	r3, [r7, #6]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e05d      	b.n	8008936 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008880:	2b01      	cmp	r3, #1
 8008882:	d101      	bne.n	8008888 <HAL_UART_Transmit_DMA+0x34>
 8008884:	2302      	movs	r3, #2
 8008886:	e056      	b.n	8008936 <HAL_UART_Transmit_DMA+0xe2>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	88fa      	ldrh	r2, [r7, #6]
 800889a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	88fa      	ldrh	r2, [r7, #6]
 80088a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2221      	movs	r2, #33	; 0x21
 80088b0:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d02a      	beq.n	8008910 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088be:	4a20      	ldr	r2, [pc, #128]	; (8008940 <HAL_UART_Transmit_DMA+0xec>)
 80088c0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088c6:	4a1f      	ldr	r2, [pc, #124]	; (8008944 <HAL_UART_Transmit_DMA+0xf0>)
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088ce:	4a1e      	ldr	r2, [pc, #120]	; (8008948 <HAL_UART_Transmit_DMA+0xf4>)
 80088d0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088d6:	2200      	movs	r2, #0
 80088d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e2:	4619      	mov	r1, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3328      	adds	r3, #40	; 0x28
 80088ea:	461a      	mov	r2, r3
 80088ec:	88fb      	ldrh	r3, [r7, #6]
 80088ee:	f7fb f8d7 	bl	8003aa0 <HAL_DMA_Start_IT>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00b      	beq.n	8008910 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2210      	movs	r2, #16
 80088fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e012      	b.n	8008936 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2240      	movs	r2, #64	; 0x40
 8008916:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800892e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	e000      	b.n	8008936 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008934:	2302      	movs	r3, #2
  }
}
 8008936:	4618      	mov	r0, r3
 8008938:	3710      	adds	r7, #16
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	080095db 	.word	0x080095db
 8008944:	0800962b 	.word	0x0800962b
 8008948:	080096c7 	.word	0x080096c7

0800894c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800895e:	2b20      	cmp	r3, #32
 8008960:	d16c      	bne.n	8008a3c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <HAL_UART_Receive_DMA+0x22>
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e065      	b.n	8008a3e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008978:	2b01      	cmp	r3, #1
 800897a:	d101      	bne.n	8008980 <HAL_UART_Receive_DMA+0x34>
 800897c:	2302      	movs	r3, #2
 800897e:	e05e      	b.n	8008a3e <HAL_UART_Receive_DMA+0xf2>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	88fa      	ldrh	r2, [r7, #6]
 8008992:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2222      	movs	r2, #34	; 0x22
 80089a0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d02a      	beq.n	8008a00 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ae:	4a26      	ldr	r2, [pc, #152]	; (8008a48 <HAL_UART_Receive_DMA+0xfc>)
 80089b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b6:	4a25      	ldr	r2, [pc, #148]	; (8008a4c <HAL_UART_Receive_DMA+0x100>)
 80089b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089be:	4a24      	ldr	r2, [pc, #144]	; (8008a50 <HAL_UART_Receive_DMA+0x104>)
 80089c0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089c6:	2200      	movs	r2, #0
 80089c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3324      	adds	r3, #36	; 0x24
 80089d4:	4619      	mov	r1, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089da:	461a      	mov	r2, r3
 80089dc:	88fb      	ldrh	r3, [r7, #6]
 80089de:	f7fb f85f 	bl	8003aa0 <HAL_DMA_Start_IT>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2210      	movs	r2, #16
 80089ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e01e      	b.n	8008a3e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a16:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689a      	ldr	r2, [r3, #8]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0201 	orr.w	r2, r2, #1
 8008a26:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	689a      	ldr	r2, [r3, #8]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a36:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e000      	b.n	8008a3e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8008a3c:	2302      	movs	r3, #2
  }
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	08009647 	.word	0x08009647
 8008a4c:	080096ab 	.word	0x080096ab
 8008a50:	080096c7 	.word	0x080096c7

08008a54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d113      	bne.n	8008aac <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00e      	beq.n	8008aac <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	f003 0320 	and.w	r3, r3, #32
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d009      	beq.n	8008aac <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 8114 	beq.w	8008cca <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	4798      	blx	r3
      }
      return;
 8008aaa:	e10e      	b.n	8008cca <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 80d6 	beq.w	8008c60 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d105      	bne.n	8008aca <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 80cb 	beq.w	8008c60 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00e      	beq.n	8008af2 <HAL_UART_IRQHandler+0x9e>
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d009      	beq.n	8008af2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aea:	f043 0201 	orr.w	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00e      	beq.n	8008b1a <HAL_UART_IRQHandler+0xc6>
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b12:	f043 0204 	orr.w	r2, r3, #4
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00e      	beq.n	8008b42 <HAL_UART_IRQHandler+0xee>
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2204      	movs	r2, #4
 8008b34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b3a:	f043 0202 	orr.w	r2, r3, #2
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d013      	beq.n	8008b74 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	f003 0320 	and.w	r3, r3, #32
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d009      	beq.n	8008b74 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2208      	movs	r2, #8
 8008b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b6c:	f043 0208 	orr.w	r2, r3, #8
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00f      	beq.n	8008b9e <HAL_UART_IRQHandler+0x14a>
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b96:	f043 0220 	orr.w	r2, r3, #32
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 8093 	beq.w	8008cce <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00c      	beq.n	8008bcc <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	f003 0320 	and.w	r3, r3, #32
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d007      	beq.n	8008bcc <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bd0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b40      	cmp	r3, #64	; 0x40
 8008bde:	d004      	beq.n	8008bea <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d031      	beq.n	8008c4e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 fcd5 	bl	800959a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfa:	2b40      	cmp	r3, #64	; 0x40
 8008bfc:	d123      	bne.n	8008c46 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689a      	ldr	r2, [r3, #8]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d013      	beq.n	8008c3e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1a:	4a30      	ldr	r2, [pc, #192]	; (8008cdc <HAL_UART_IRQHandler+0x288>)
 8008c1c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fa ff9c 	bl	8003b60 <HAL_DMA_Abort_IT>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d016      	beq.n	8008c5c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c38:	4610      	mov	r0, r2
 8008c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3c:	e00e      	b.n	8008c5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f876 	bl	8008d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c44:	e00a      	b.n	8008c5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f872 	bl	8008d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c4c:	e006      	b.n	8008c5c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f86e 	bl	8008d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008c5a:	e038      	b.n	8008cce <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c5c:	bf00      	nop
    return;
 8008c5e:	e036      	b.n	8008cce <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00d      	beq.n	8008c86 <HAL_UART_IRQHandler+0x232>
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d008      	beq.n	8008c86 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 f860 	bl	8008d44 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c84:	e026      	b.n	8008cd4 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d00d      	beq.n	8008cac <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d008      	beq.n	8008cac <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d017      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
    }
    return;
 8008caa:	e012      	b.n	8008cd2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00e      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x280>
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d009      	beq.n	8008cd4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fd52 	bl	800976a <UART_EndTransmit_IT>
    return;
 8008cc6:	bf00      	nop
 8008cc8:	e004      	b.n	8008cd4 <HAL_UART_IRQHandler+0x280>
      return;
 8008cca:	bf00      	nop
 8008ccc:	e002      	b.n	8008cd4 <HAL_UART_IRQHandler+0x280>
    return;
 8008cce:	bf00      	nop
 8008cd0:	e000      	b.n	8008cd4 <HAL_UART_IRQHandler+0x280>
    return;
 8008cd2:	bf00      	nop
  }

}
 8008cd4:	3720      	adds	r7, #32
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	0800973f 	.word	0x0800973f

08008ce0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008cfc:	bf00      	nop
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d4c:	bf00      	nop
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b088      	sub	sp, #32
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	431a      	orrs	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4bb1      	ldr	r3, [pc, #708]	; (800904c <UART_SetConfig+0x2f4>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	6812      	ldr	r2, [r2, #0]
 8008d8e:	6939      	ldr	r1, [r7, #16]
 8008d90:	430b      	orrs	r3, r1
 8008d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a9f      	ldr	r2, [pc, #636]	; (8009050 <UART_SetConfig+0x2f8>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d121      	bne.n	8008e1c <UART_SetConfig+0xc4>
 8008dd8:	4b9e      	ldr	r3, [pc, #632]	; (8009054 <UART_SetConfig+0x2fc>)
 8008dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d816      	bhi.n	8008e14 <UART_SetConfig+0xbc>
 8008de6:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <UART_SetConfig+0x94>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008dfd 	.word	0x08008dfd
 8008df0:	08008e09 	.word	0x08008e09
 8008df4:	08008e03 	.word	0x08008e03
 8008df8:	08008e0f 	.word	0x08008e0f
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	77fb      	strb	r3, [r7, #31]
 8008e00:	e151      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e02:	2302      	movs	r3, #2
 8008e04:	77fb      	strb	r3, [r7, #31]
 8008e06:	e14e      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e08:	2304      	movs	r3, #4
 8008e0a:	77fb      	strb	r3, [r7, #31]
 8008e0c:	e14b      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e0e:	2308      	movs	r3, #8
 8008e10:	77fb      	strb	r3, [r7, #31]
 8008e12:	e148      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e14:	2310      	movs	r3, #16
 8008e16:	77fb      	strb	r3, [r7, #31]
 8008e18:	bf00      	nop
 8008e1a:	e144      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a8d      	ldr	r2, [pc, #564]	; (8009058 <UART_SetConfig+0x300>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d134      	bne.n	8008e90 <UART_SetConfig+0x138>
 8008e26:	4b8b      	ldr	r3, [pc, #556]	; (8009054 <UART_SetConfig+0x2fc>)
 8008e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2c:	f003 030c 	and.w	r3, r3, #12
 8008e30:	2b0c      	cmp	r3, #12
 8008e32:	d829      	bhi.n	8008e88 <UART_SetConfig+0x130>
 8008e34:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <UART_SetConfig+0xe4>)
 8008e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3a:	bf00      	nop
 8008e3c:	08008e71 	.word	0x08008e71
 8008e40:	08008e89 	.word	0x08008e89
 8008e44:	08008e89 	.word	0x08008e89
 8008e48:	08008e89 	.word	0x08008e89
 8008e4c:	08008e7d 	.word	0x08008e7d
 8008e50:	08008e89 	.word	0x08008e89
 8008e54:	08008e89 	.word	0x08008e89
 8008e58:	08008e89 	.word	0x08008e89
 8008e5c:	08008e77 	.word	0x08008e77
 8008e60:	08008e89 	.word	0x08008e89
 8008e64:	08008e89 	.word	0x08008e89
 8008e68:	08008e89 	.word	0x08008e89
 8008e6c:	08008e83 	.word	0x08008e83
 8008e70:	2300      	movs	r3, #0
 8008e72:	77fb      	strb	r3, [r7, #31]
 8008e74:	e117      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e76:	2302      	movs	r3, #2
 8008e78:	77fb      	strb	r3, [r7, #31]
 8008e7a:	e114      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	77fb      	strb	r3, [r7, #31]
 8008e80:	e111      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e82:	2308      	movs	r3, #8
 8008e84:	77fb      	strb	r3, [r7, #31]
 8008e86:	e10e      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	77fb      	strb	r3, [r7, #31]
 8008e8c:	bf00      	nop
 8008e8e:	e10a      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a71      	ldr	r2, [pc, #452]	; (800905c <UART_SetConfig+0x304>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d120      	bne.n	8008edc <UART_SetConfig+0x184>
 8008e9a:	4b6e      	ldr	r3, [pc, #440]	; (8009054 <UART_SetConfig+0x2fc>)
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ea4:	2b10      	cmp	r3, #16
 8008ea6:	d00f      	beq.n	8008ec8 <UART_SetConfig+0x170>
 8008ea8:	2b10      	cmp	r3, #16
 8008eaa:	d802      	bhi.n	8008eb2 <UART_SetConfig+0x15a>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <UART_SetConfig+0x164>
 8008eb0:	e010      	b.n	8008ed4 <UART_SetConfig+0x17c>
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d005      	beq.n	8008ec2 <UART_SetConfig+0x16a>
 8008eb6:	2b30      	cmp	r3, #48	; 0x30
 8008eb8:	d009      	beq.n	8008ece <UART_SetConfig+0x176>
 8008eba:	e00b      	b.n	8008ed4 <UART_SetConfig+0x17c>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	77fb      	strb	r3, [r7, #31]
 8008ec0:	e0f1      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	77fb      	strb	r3, [r7, #31]
 8008ec6:	e0ee      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	77fb      	strb	r3, [r7, #31]
 8008ecc:	e0eb      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008ece:	2308      	movs	r3, #8
 8008ed0:	77fb      	strb	r3, [r7, #31]
 8008ed2:	e0e8      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008ed4:	2310      	movs	r3, #16
 8008ed6:	77fb      	strb	r3, [r7, #31]
 8008ed8:	bf00      	nop
 8008eda:	e0e4      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a5f      	ldr	r2, [pc, #380]	; (8009060 <UART_SetConfig+0x308>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d120      	bne.n	8008f28 <UART_SetConfig+0x1d0>
 8008ee6:	4b5b      	ldr	r3, [pc, #364]	; (8009054 <UART_SetConfig+0x2fc>)
 8008ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008ef0:	2b40      	cmp	r3, #64	; 0x40
 8008ef2:	d00f      	beq.n	8008f14 <UART_SetConfig+0x1bc>
 8008ef4:	2b40      	cmp	r3, #64	; 0x40
 8008ef6:	d802      	bhi.n	8008efe <UART_SetConfig+0x1a6>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d005      	beq.n	8008f08 <UART_SetConfig+0x1b0>
 8008efc:	e010      	b.n	8008f20 <UART_SetConfig+0x1c8>
 8008efe:	2b80      	cmp	r3, #128	; 0x80
 8008f00:	d005      	beq.n	8008f0e <UART_SetConfig+0x1b6>
 8008f02:	2bc0      	cmp	r3, #192	; 0xc0
 8008f04:	d009      	beq.n	8008f1a <UART_SetConfig+0x1c2>
 8008f06:	e00b      	b.n	8008f20 <UART_SetConfig+0x1c8>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	77fb      	strb	r3, [r7, #31]
 8008f0c:	e0cb      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	77fb      	strb	r3, [r7, #31]
 8008f12:	e0c8      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f14:	2304      	movs	r3, #4
 8008f16:	77fb      	strb	r3, [r7, #31]
 8008f18:	e0c5      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	77fb      	strb	r3, [r7, #31]
 8008f1e:	e0c2      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f20:	2310      	movs	r3, #16
 8008f22:	77fb      	strb	r3, [r7, #31]
 8008f24:	bf00      	nop
 8008f26:	e0be      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a4d      	ldr	r2, [pc, #308]	; (8009064 <UART_SetConfig+0x30c>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d124      	bne.n	8008f7c <UART_SetConfig+0x224>
 8008f32:	4b48      	ldr	r3, [pc, #288]	; (8009054 <UART_SetConfig+0x2fc>)
 8008f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f40:	d012      	beq.n	8008f68 <UART_SetConfig+0x210>
 8008f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f46:	d802      	bhi.n	8008f4e <UART_SetConfig+0x1f6>
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <UART_SetConfig+0x204>
 8008f4c:	e012      	b.n	8008f74 <UART_SetConfig+0x21c>
 8008f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f52:	d006      	beq.n	8008f62 <UART_SetConfig+0x20a>
 8008f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f58:	d009      	beq.n	8008f6e <UART_SetConfig+0x216>
 8008f5a:	e00b      	b.n	8008f74 <UART_SetConfig+0x21c>
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	77fb      	strb	r3, [r7, #31]
 8008f60:	e0a1      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f62:	2302      	movs	r3, #2
 8008f64:	77fb      	strb	r3, [r7, #31]
 8008f66:	e09e      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f68:	2304      	movs	r3, #4
 8008f6a:	77fb      	strb	r3, [r7, #31]
 8008f6c:	e09b      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f6e:	2308      	movs	r3, #8
 8008f70:	77fb      	strb	r3, [r7, #31]
 8008f72:	e098      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f74:	2310      	movs	r3, #16
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	bf00      	nop
 8008f7a:	e094      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a39      	ldr	r2, [pc, #228]	; (8009068 <UART_SetConfig+0x310>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d124      	bne.n	8008fd0 <UART_SetConfig+0x278>
 8008f86:	4b33      	ldr	r3, [pc, #204]	; (8009054 <UART_SetConfig+0x2fc>)
 8008f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f94:	d012      	beq.n	8008fbc <UART_SetConfig+0x264>
 8008f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f9a:	d802      	bhi.n	8008fa2 <UART_SetConfig+0x24a>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <UART_SetConfig+0x258>
 8008fa0:	e012      	b.n	8008fc8 <UART_SetConfig+0x270>
 8008fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fa6:	d006      	beq.n	8008fb6 <UART_SetConfig+0x25e>
 8008fa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fac:	d009      	beq.n	8008fc2 <UART_SetConfig+0x26a>
 8008fae:	e00b      	b.n	8008fc8 <UART_SetConfig+0x270>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	e077      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008fb6:	2302      	movs	r3, #2
 8008fb8:	77fb      	strb	r3, [r7, #31]
 8008fba:	e074      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008fbc:	2304      	movs	r3, #4
 8008fbe:	77fb      	strb	r3, [r7, #31]
 8008fc0:	e071      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008fc2:	2308      	movs	r3, #8
 8008fc4:	77fb      	strb	r3, [r7, #31]
 8008fc6:	e06e      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008fc8:	2310      	movs	r3, #16
 8008fca:	77fb      	strb	r3, [r7, #31]
 8008fcc:	bf00      	nop
 8008fce:	e06a      	b.n	80090a6 <UART_SetConfig+0x34e>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a25      	ldr	r2, [pc, #148]	; (800906c <UART_SetConfig+0x314>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d124      	bne.n	8009024 <UART_SetConfig+0x2cc>
 8008fda:	4b1e      	ldr	r3, [pc, #120]	; (8009054 <UART_SetConfig+0x2fc>)
 8008fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe8:	d012      	beq.n	8009010 <UART_SetConfig+0x2b8>
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fee:	d802      	bhi.n	8008ff6 <UART_SetConfig+0x29e>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d007      	beq.n	8009004 <UART_SetConfig+0x2ac>
 8008ff4:	e012      	b.n	800901c <UART_SetConfig+0x2c4>
 8008ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ffa:	d006      	beq.n	800900a <UART_SetConfig+0x2b2>
 8008ffc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009000:	d009      	beq.n	8009016 <UART_SetConfig+0x2be>
 8009002:	e00b      	b.n	800901c <UART_SetConfig+0x2c4>
 8009004:	2300      	movs	r3, #0
 8009006:	77fb      	strb	r3, [r7, #31]
 8009008:	e04d      	b.n	80090a6 <UART_SetConfig+0x34e>
 800900a:	2302      	movs	r3, #2
 800900c:	77fb      	strb	r3, [r7, #31]
 800900e:	e04a      	b.n	80090a6 <UART_SetConfig+0x34e>
 8009010:	2304      	movs	r3, #4
 8009012:	77fb      	strb	r3, [r7, #31]
 8009014:	e047      	b.n	80090a6 <UART_SetConfig+0x34e>
 8009016:	2308      	movs	r3, #8
 8009018:	77fb      	strb	r3, [r7, #31]
 800901a:	e044      	b.n	80090a6 <UART_SetConfig+0x34e>
 800901c:	2310      	movs	r3, #16
 800901e:	77fb      	strb	r3, [r7, #31]
 8009020:	bf00      	nop
 8009022:	e040      	b.n	80090a6 <UART_SetConfig+0x34e>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a11      	ldr	r2, [pc, #68]	; (8009070 <UART_SetConfig+0x318>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d139      	bne.n	80090a2 <UART_SetConfig+0x34a>
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <UART_SetConfig+0x2fc>)
 8009030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800903c:	d027      	beq.n	800908e <UART_SetConfig+0x336>
 800903e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009042:	d817      	bhi.n	8009074 <UART_SetConfig+0x31c>
 8009044:	2b00      	cmp	r3, #0
 8009046:	d01c      	beq.n	8009082 <UART_SetConfig+0x32a>
 8009048:	e027      	b.n	800909a <UART_SetConfig+0x342>
 800904a:	bf00      	nop
 800904c:	efff69f3 	.word	0xefff69f3
 8009050:	40011000 	.word	0x40011000
 8009054:	40023800 	.word	0x40023800
 8009058:	40004400 	.word	0x40004400
 800905c:	40004800 	.word	0x40004800
 8009060:	40004c00 	.word	0x40004c00
 8009064:	40005000 	.word	0x40005000
 8009068:	40011400 	.word	0x40011400
 800906c:	40007800 	.word	0x40007800
 8009070:	40007c00 	.word	0x40007c00
 8009074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009078:	d006      	beq.n	8009088 <UART_SetConfig+0x330>
 800907a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800907e:	d009      	beq.n	8009094 <UART_SetConfig+0x33c>
 8009080:	e00b      	b.n	800909a <UART_SetConfig+0x342>
 8009082:	2300      	movs	r3, #0
 8009084:	77fb      	strb	r3, [r7, #31]
 8009086:	e00e      	b.n	80090a6 <UART_SetConfig+0x34e>
 8009088:	2302      	movs	r3, #2
 800908a:	77fb      	strb	r3, [r7, #31]
 800908c:	e00b      	b.n	80090a6 <UART_SetConfig+0x34e>
 800908e:	2304      	movs	r3, #4
 8009090:	77fb      	strb	r3, [r7, #31]
 8009092:	e008      	b.n	80090a6 <UART_SetConfig+0x34e>
 8009094:	2308      	movs	r3, #8
 8009096:	77fb      	strb	r3, [r7, #31]
 8009098:	e005      	b.n	80090a6 <UART_SetConfig+0x34e>
 800909a:	2310      	movs	r3, #16
 800909c:	77fb      	strb	r3, [r7, #31]
 800909e:	bf00      	nop
 80090a0:	e001      	b.n	80090a6 <UART_SetConfig+0x34e>
 80090a2:	2310      	movs	r3, #16
 80090a4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090ae:	d17f      	bne.n	80091b0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80090b0:	7ffb      	ldrb	r3, [r7, #31]
 80090b2:	2b08      	cmp	r3, #8
 80090b4:	d85c      	bhi.n	8009170 <UART_SetConfig+0x418>
 80090b6:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <UART_SetConfig+0x364>)
 80090b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090bc:	080090e1 	.word	0x080090e1
 80090c0:	08009101 	.word	0x08009101
 80090c4:	08009121 	.word	0x08009121
 80090c8:	08009171 	.word	0x08009171
 80090cc:	08009139 	.word	0x08009139
 80090d0:	08009171 	.word	0x08009171
 80090d4:	08009171 	.word	0x08009171
 80090d8:	08009171 	.word	0x08009171
 80090dc:	08009159 	.word	0x08009159
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090e0:	f7fd fa00 	bl	80064e4 <HAL_RCC_GetPCLK1Freq>
 80090e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	005a      	lsls	r2, r3, #1
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	441a      	add	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	61bb      	str	r3, [r7, #24]
        break;
 80090fe:	e03a      	b.n	8009176 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009100:	f7fd fa04 	bl	800650c <HAL_RCC_GetPCLK2Freq>
 8009104:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	005a      	lsls	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	085b      	lsrs	r3, r3, #1
 8009110:	441a      	add	r2, r3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	fbb2 f3f3 	udiv	r3, r2, r3
 800911a:	b29b      	uxth	r3, r3
 800911c:	61bb      	str	r3, [r7, #24]
        break;
 800911e:	e02a      	b.n	8009176 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	085a      	lsrs	r2, r3, #1
 8009126:	4b5f      	ldr	r3, [pc, #380]	; (80092a4 <UART_SetConfig+0x54c>)
 8009128:	4413      	add	r3, r2
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6852      	ldr	r2, [r2, #4]
 800912e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009132:	b29b      	uxth	r3, r3
 8009134:	61bb      	str	r3, [r7, #24]
        break;
 8009136:	e01e      	b.n	8009176 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009138:	f7fd f916 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 800913c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	005a      	lsls	r2, r3, #1
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	085b      	lsrs	r3, r3, #1
 8009148:	441a      	add	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009152:	b29b      	uxth	r3, r3
 8009154:	61bb      	str	r3, [r7, #24]
        break;
 8009156:	e00e      	b.n	8009176 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	085b      	lsrs	r3, r3, #1
 800915e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	fbb2 f3f3 	udiv	r3, r2, r3
 800916a:	b29b      	uxth	r3, r3
 800916c:	61bb      	str	r3, [r7, #24]
        break;
 800916e:	e002      	b.n	8009176 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	75fb      	strb	r3, [r7, #23]
        break;
 8009174:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	2b0f      	cmp	r3, #15
 800917a:	d916      	bls.n	80091aa <UART_SetConfig+0x452>
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009182:	d212      	bcs.n	80091aa <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f023 030f 	bic.w	r3, r3, #15
 800918c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	b29a      	uxth	r2, r3
 800919a:	897b      	ldrh	r3, [r7, #10]
 800919c:	4313      	orrs	r3, r2
 800919e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	897a      	ldrh	r2, [r7, #10]
 80091a6:	60da      	str	r2, [r3, #12]
 80091a8:	e070      	b.n	800928c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	75fb      	strb	r3, [r7, #23]
 80091ae:	e06d      	b.n	800928c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80091b0:	7ffb      	ldrb	r3, [r7, #31]
 80091b2:	2b08      	cmp	r3, #8
 80091b4:	d859      	bhi.n	800926a <UART_SetConfig+0x512>
 80091b6:	a201      	add	r2, pc, #4	; (adr r2, 80091bc <UART_SetConfig+0x464>)
 80091b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091bc:	080091e1 	.word	0x080091e1
 80091c0:	080091ff 	.word	0x080091ff
 80091c4:	0800921d 	.word	0x0800921d
 80091c8:	0800926b 	.word	0x0800926b
 80091cc:	08009235 	.word	0x08009235
 80091d0:	0800926b 	.word	0x0800926b
 80091d4:	0800926b 	.word	0x0800926b
 80091d8:	0800926b 	.word	0x0800926b
 80091dc:	08009253 	.word	0x08009253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091e0:	f7fd f980 	bl	80064e4 <HAL_RCC_GetPCLK1Freq>
 80091e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	085a      	lsrs	r2, r3, #1
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	441a      	add	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	61bb      	str	r3, [r7, #24]
        break;
 80091fc:	e038      	b.n	8009270 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091fe:	f7fd f985 	bl	800650c <HAL_RCC_GetPCLK2Freq>
 8009202:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	085a      	lsrs	r2, r3, #1
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	441a      	add	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	fbb2 f3f3 	udiv	r3, r2, r3
 8009216:	b29b      	uxth	r3, r3
 8009218:	61bb      	str	r3, [r7, #24]
        break;
 800921a:	e029      	b.n	8009270 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	085a      	lsrs	r2, r3, #1
 8009222:	4b21      	ldr	r3, [pc, #132]	; (80092a8 <UART_SetConfig+0x550>)
 8009224:	4413      	add	r3, r2
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6852      	ldr	r2, [r2, #4]
 800922a:	fbb3 f3f2 	udiv	r3, r3, r2
 800922e:	b29b      	uxth	r3, r3
 8009230:	61bb      	str	r3, [r7, #24]
        break;
 8009232:	e01d      	b.n	8009270 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009234:	f7fd f898 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8009238:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	085a      	lsrs	r2, r3, #1
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	441a      	add	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	fbb2 f3f3 	udiv	r3, r2, r3
 800924c:	b29b      	uxth	r3, r3
 800924e:	61bb      	str	r3, [r7, #24]
        break;
 8009250:	e00e      	b.n	8009270 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	fbb2 f3f3 	udiv	r3, r2, r3
 8009264:	b29b      	uxth	r3, r3
 8009266:	61bb      	str	r3, [r7, #24]
        break;
 8009268:	e002      	b.n	8009270 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	75fb      	strb	r3, [r7, #23]
        break;
 800926e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	2b0f      	cmp	r3, #15
 8009274:	d908      	bls.n	8009288 <UART_SetConfig+0x530>
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800927c:	d204      	bcs.n	8009288 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	60da      	str	r2, [r3, #12]
 8009286:	e001      	b.n	800928c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009298:	7dfb      	ldrb	r3, [r7, #23]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	01e84800 	.word	0x01e84800
 80092a8:	00f42400 	.word	0x00f42400

080092ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fc:	f003 0304 	and.w	r3, r3, #4
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00a      	beq.n	800931a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	430a      	orrs	r2, r1
 8009318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	f003 0308 	and.w	r3, r3, #8
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00a      	beq.n	800933c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00a      	beq.n	800935e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	430a      	orrs	r2, r1
 800935c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	f003 0320 	and.w	r3, r3, #32
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009388:	2b00      	cmp	r3, #0
 800938a:	d01a      	beq.n	80093c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093aa:	d10a      	bne.n	80093c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	605a      	str	r2, [r3, #4]
  }
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af02      	add	r7, sp, #8
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80093fe:	f7f9 fca3 	bl	8002d48 <HAL_GetTick>
 8009402:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 0308 	and.w	r3, r3, #8
 800940e:	2b08      	cmp	r3, #8
 8009410:	d10e      	bne.n	8009430 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009412:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f82a 	bl	800947a <UART_WaitOnFlagUntilTimeout>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e020      	b.n	8009472 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	2b04      	cmp	r3, #4
 800943c:	d10e      	bne.n	800945c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800943e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f814 	bl	800947a <UART_WaitOnFlagUntilTimeout>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e00a      	b.n	8009472 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2220      	movs	r2, #32
 8009460:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2220      	movs	r2, #32
 8009466:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948a:	e05d      	b.n	8009548 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009492:	d059      	beq.n	8009548 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009494:	f7f9 fc58 	bl	8002d48 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d302      	bcc.n	80094aa <UART_WaitOnFlagUntilTimeout+0x30>
 80094a4:	69bb      	ldr	r3, [r7, #24]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d11b      	bne.n	80094e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 0201 	bic.w	r2, r2, #1
 80094c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2220      	movs	r2, #32
 80094ce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2220      	movs	r2, #32
 80094d4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e042      	b.n	8009568 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d02b      	beq.n	8009548 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094fe:	d123      	bne.n	8009548 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009508:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009518:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 0201 	bic.w	r2, r2, #1
 8009528:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2220      	movs	r2, #32
 800952e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2220      	movs	r2, #32
 8009534:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2220      	movs	r2, #32
 800953a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e00f      	b.n	8009568 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	69da      	ldr	r2, [r3, #28]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	4013      	ands	r3, r2
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	429a      	cmp	r2, r3
 8009556:	bf0c      	ite	eq
 8009558:	2301      	moveq	r3, #1
 800955a:	2300      	movne	r3, #0
 800955c:	b2db      	uxtb	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	429a      	cmp	r2, r3
 8009564:	d092      	beq.n	800948c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009586:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2220      	movs	r2, #32
 800958c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800959a:	b480      	push	{r7}
 800959c:	b083      	sub	sp, #12
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095b0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0201 	bic.w	r2, r2, #1
 80095c0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2220      	movs	r2, #32
 80095c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80095ce:	bf00      	nop
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr

080095da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f0:	d014      	beq.n	800961c <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689a      	ldr	r2, [r3, #8]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009608:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009618:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800961a:	e002      	b.n	8009622 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f7ff fb5f 	bl	8008ce0 <HAL_UART_TxCpltCallback>
}
 8009622:	bf00      	nop
 8009624:	3710      	adds	r7, #16
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009636:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f7ff fb5b 	bl	8008cf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963e:	bf00      	nop
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009652:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800965c:	d01e      	beq.n	800969c <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009674:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689a      	ldr	r2, [r3, #8]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0201 	bic.w	r2, r2, #1
 8009684:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009694:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2220      	movs	r2, #32
 800969a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff fb33 	bl	8008d08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff fb2f 	bl	8008d1c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b086      	sub	sp, #24
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ea:	2b80      	cmp	r3, #128	; 0x80
 80096ec:	d109      	bne.n	8009702 <UART_DMAError+0x3c>
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b21      	cmp	r3, #33	; 0x21
 80096f2:	d106      	bne.n	8009702 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80096fc:	6978      	ldr	r0, [r7, #20]
 80096fe:	f7ff ff37 	bl	8009570 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970c:	2b40      	cmp	r3, #64	; 0x40
 800970e:	d109      	bne.n	8009724 <UART_DMAError+0x5e>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2b22      	cmp	r3, #34	; 0x22
 8009714:	d106      	bne.n	8009724 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2200      	movs	r2, #0
 800971a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800971e:	6978      	ldr	r0, [r7, #20]
 8009720:	f7ff ff3b 	bl	800959a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009728:	f043 0210 	orr.w	r2, r3, #16
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009730:	6978      	ldr	r0, [r7, #20]
 8009732:	f7ff fafd 	bl	8008d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009736:	bf00      	nop
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800975c:	68f8      	ldr	r0, [r7, #12]
 800975e:	f7ff fae7 	bl	8008d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009762:	bf00      	nop
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009780:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2220      	movs	r2, #32
 8009786:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff faa6 	bl	8008ce0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009794:	bf00      	nop
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80097a0:	4904      	ldr	r1, [pc, #16]	; (80097b4 <MX_FATFS_Init+0x18>)
 80097a2:	4805      	ldr	r0, [pc, #20]	; (80097b8 <MX_FATFS_Init+0x1c>)
 80097a4:	f002 fc1c 	bl	800bfe0 <FATFS_LinkDriver>
 80097a8:	4603      	mov	r3, r0
 80097aa:	461a      	mov	r2, r3
 80097ac:	4b03      	ldr	r3, [pc, #12]	; (80097bc <MX_FATFS_Init+0x20>)
 80097ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80097b0:	bf00      	nop
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	20000f14 	.word	0x20000f14
 80097b8:	20000010 	.word	0x20000010
 80097bc:	20000f18 	.word	0x20000f18

080097c0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80097c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80097da:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <USER_initialize+0x24>)
 80097dc:	2201      	movs	r2, #1
 80097de:	701a      	strb	r2, [r3, #0]
    return Stat;
 80097e0:	4b04      	ldr	r3, [pc, #16]	; (80097f4 <USER_initialize+0x24>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	2000000d 	.word	0x2000000d

080097f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <USER_status+0x24>)
 8009804:	2201      	movs	r2, #1
 8009806:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009808:	4b04      	ldr	r3, [pc, #16]	; (800981c <USER_status+0x24>)
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800980e:	4618      	mov	r0, r3
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	2000000d 	.word	0x2000000d

08009820 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8009830:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8009832:	4618      	mov	r0, r3
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800983e:	b480      	push	{r7}
 8009840:	b085      	sub	sp, #20
 8009842:	af00      	add	r7, sp, #0
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]
 8009848:	603b      	str	r3, [r7, #0]
 800984a:	4603      	mov	r3, r0
 800984c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800984e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	4603      	mov	r3, r0
 8009864:	603a      	str	r2, [r7, #0]
 8009866:	71fb      	strb	r3, [r7, #7]
 8009868:	460b      	mov	r3, r1
 800986a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	73fb      	strb	r3, [r7, #15]
    return res;
 8009870:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
	...

08009880 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	4a08      	ldr	r2, [pc, #32]	; (80098b0 <disk_status+0x30>)
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	4413      	add	r3, r2
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	79fa      	ldrb	r2, [r7, #7]
 8009898:	4905      	ldr	r1, [pc, #20]	; (80098b0 <disk_status+0x30>)
 800989a:	440a      	add	r2, r1
 800989c:	7a12      	ldrb	r2, [r2, #8]
 800989e:	4610      	mov	r0, r2
 80098a0:	4798      	blx	r3
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20000ad4 	.word	0x20000ad4

080098b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80098c2:	79fb      	ldrb	r3, [r7, #7]
 80098c4:	4a0d      	ldr	r2, [pc, #52]	; (80098fc <disk_initialize+0x48>)
 80098c6:	5cd3      	ldrb	r3, [r2, r3]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d111      	bne.n	80098f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	4a0b      	ldr	r2, [pc, #44]	; (80098fc <disk_initialize+0x48>)
 80098d0:	2101      	movs	r1, #1
 80098d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80098d4:	79fb      	ldrb	r3, [r7, #7]
 80098d6:	4a09      	ldr	r2, [pc, #36]	; (80098fc <disk_initialize+0x48>)
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	79fa      	ldrb	r2, [r7, #7]
 80098e2:	4906      	ldr	r1, [pc, #24]	; (80098fc <disk_initialize+0x48>)
 80098e4:	440a      	add	r2, r1
 80098e6:	7a12      	ldrb	r2, [r2, #8]
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	20000ad4 	.word	0x20000ad4

08009900 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009900:	b590      	push	{r4, r7, lr}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
 800990a:	603b      	str	r3, [r7, #0]
 800990c:	4603      	mov	r3, r0
 800990e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	4a0a      	ldr	r2, [pc, #40]	; (800993c <disk_read+0x3c>)
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	689c      	ldr	r4, [r3, #8]
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	4a07      	ldr	r2, [pc, #28]	; (800993c <disk_read+0x3c>)
 8009920:	4413      	add	r3, r2
 8009922:	7a18      	ldrb	r0, [r3, #8]
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	68b9      	ldr	r1, [r7, #8]
 800992a:	47a0      	blx	r4
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009930:	7dfb      	ldrb	r3, [r7, #23]
}
 8009932:	4618      	mov	r0, r3
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	bd90      	pop	{r4, r7, pc}
 800993a:	bf00      	nop
 800993c:	20000ad4 	.word	0x20000ad4

08009940 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009940:	b590      	push	{r4, r7, lr}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60b9      	str	r1, [r7, #8]
 8009948:	607a      	str	r2, [r7, #4]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4a0a      	ldr	r2, [pc, #40]	; (800997c <disk_write+0x3c>)
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	68dc      	ldr	r4, [r3, #12]
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	4a07      	ldr	r2, [pc, #28]	; (800997c <disk_write+0x3c>)
 8009960:	4413      	add	r3, r2
 8009962:	7a18      	ldrb	r0, [r3, #8]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	47a0      	blx	r4
 800996c:	4603      	mov	r3, r0
 800996e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
}
 8009972:	4618      	mov	r0, r3
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	bd90      	pop	{r4, r7, pc}
 800997a:	bf00      	nop
 800997c:	20000ad4 	.word	0x20000ad4

08009980 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	603a      	str	r2, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
 800998c:	460b      	mov	r3, r1
 800998e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	4a09      	ldr	r2, [pc, #36]	; (80099b8 <disk_ioctl+0x38>)
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	79fa      	ldrb	r2, [r7, #7]
 800999e:	4906      	ldr	r1, [pc, #24]	; (80099b8 <disk_ioctl+0x38>)
 80099a0:	440a      	add	r2, r1
 80099a2:	7a10      	ldrb	r0, [r2, #8]
 80099a4:	79b9      	ldrb	r1, [r7, #6]
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	4798      	blx	r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	20000ad4 	.word	0x20000ad4

080099bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3301      	adds	r3, #1
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80099cc:	89fb      	ldrh	r3, [r7, #14]
 80099ce:	021b      	lsls	r3, r3, #8
 80099d0:	b21a      	sxth	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	b21b      	sxth	r3, r3
 80099d8:	4313      	orrs	r3, r2
 80099da:	b21b      	sxth	r3, r3
 80099dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80099de:	89fb      	ldrh	r3, [r7, #14]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3303      	adds	r3, #3
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	021b      	lsls	r3, r3, #8
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	3202      	adds	r2, #2
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	3201      	adds	r2, #1
 8009a12:	7812      	ldrb	r2, [r2, #0]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a24:	68fb      	ldr	r3, [r7, #12]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	887a      	ldrh	r2, [r7, #2]
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	887b      	ldrh	r3, [r7, #2]
 8009a4c:	0a1b      	lsrs	r3, r3, #8
 8009a4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	1c5a      	adds	r2, r3, #1
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	887a      	ldrh	r2, [r7, #2]
 8009a58:	b2d2      	uxtb	r2, r2
 8009a5a:	701a      	strb	r2, [r3, #0]
}
 8009a5c:	bf00      	nop
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	1c5a      	adds	r2, r3, #1
 8009a76:	607a      	str	r2, [r7, #4]
 8009a78:	683a      	ldr	r2, [r7, #0]
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	701a      	strb	r2, [r3, #0]
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	0a1b      	lsrs	r3, r3, #8
 8009a82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	607a      	str	r2, [r7, #4]
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	b2d2      	uxtb	r2, r2
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	0a1b      	lsrs	r3, r3, #8
 8009a94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	683a      	ldr	r2, [r7, #0]
 8009a9e:	b2d2      	uxtb	r2, r2
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	0a1b      	lsrs	r3, r3, #8
 8009aa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	607a      	str	r2, [r7, #4]
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	b2d2      	uxtb	r2, r2
 8009ab2:	701a      	strb	r2, [r3, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00d      	beq.n	8009af6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009ada:	693a      	ldr	r2, [r7, #16]
 8009adc:	1c53      	adds	r3, r2, #1
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	1c59      	adds	r1, r3, #1
 8009ae4:	6179      	str	r1, [r7, #20]
 8009ae6:	7812      	ldrb	r2, [r2, #0]
 8009ae8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f1      	bne.n	8009ada <mem_cpy+0x1a>
	}
}
 8009af6:	bf00      	nop
 8009af8:	371c      	adds	r7, #28
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b02:	b480      	push	{r7}
 8009b04:	b087      	sub	sp, #28
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	60f8      	str	r0, [r7, #12]
 8009b0a:	60b9      	str	r1, [r7, #8]
 8009b0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	1c5a      	adds	r2, r3, #1
 8009b16:	617a      	str	r2, [r7, #20]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	3b01      	subs	r3, #1
 8009b22:	607b      	str	r3, [r7, #4]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1f3      	bne.n	8009b12 <mem_set+0x10>
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009b36:	b480      	push	{r7}
 8009b38:	b089      	sub	sp, #36	; 0x24
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	60f8      	str	r0, [r7, #12]
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	61fb      	str	r3, [r7, #28]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	61fa      	str	r2, [r7, #28]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	4619      	mov	r1, r3
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	61ba      	str	r2, [r7, #24]
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	1acb      	subs	r3, r1, r3
 8009b62:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	607b      	str	r3, [r7, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <mem_cmp+0x40>
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0eb      	beq.n	8009b4e <mem_cmp+0x18>

	return r;
 8009b76:	697b      	ldr	r3, [r7, #20]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3724      	adds	r7, #36	; 0x24
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009b8e:	e002      	b.n	8009b96 <chk_chr+0x12>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3301      	adds	r3, #1
 8009b94:	607b      	str	r3, [r7, #4]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <chk_chr+0x26>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d1f2      	bne.n	8009b90 <chk_chr+0xc>
	return *str;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	781b      	ldrb	r3, [r3, #0]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	370c      	adds	r7, #12
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
	...

08009bbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	e029      	b.n	8009c24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009bd0:	4a27      	ldr	r2, [pc, #156]	; (8009c70 <chk_lock+0xb4>)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	4413      	add	r3, r2
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d01d      	beq.n	8009c1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009bde:	4a24      	ldr	r2, [pc, #144]	; (8009c70 <chk_lock+0xb4>)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	4413      	add	r3, r2
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d116      	bne.n	8009c1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009bf0:	4a1f      	ldr	r2, [pc, #124]	; (8009c70 <chk_lock+0xb4>)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	4413      	add	r3, r2
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d10c      	bne.n	8009c1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c04:	4a1a      	ldr	r2, [pc, #104]	; (8009c70 <chk_lock+0xb4>)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	4413      	add	r3, r2
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d102      	bne.n	8009c1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c18:	e007      	b.n	8009c2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3301      	adds	r3, #1
 8009c22:	60fb      	str	r3, [r7, #12]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d9d2      	bls.n	8009bd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d109      	bne.n	8009c44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <chk_lock+0x80>
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d101      	bne.n	8009c40 <chk_lock+0x84>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e010      	b.n	8009c62 <chk_lock+0xa6>
 8009c40:	2312      	movs	r3, #18
 8009c42:	e00e      	b.n	8009c62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d108      	bne.n	8009c5c <chk_lock+0xa0>
 8009c4a:	4a09      	ldr	r2, [pc, #36]	; (8009c70 <chk_lock+0xb4>)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	4413      	add	r3, r2
 8009c52:	330c      	adds	r3, #12
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5a:	d101      	bne.n	8009c60 <chk_lock+0xa4>
 8009c5c:	2310      	movs	r3, #16
 8009c5e:	e000      	b.n	8009c62 <chk_lock+0xa6>
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	20000ab4 	.word	0x20000ab4

08009c74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
 8009c7e:	e002      	b.n	8009c86 <enq_lock+0x12>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3301      	adds	r3, #1
 8009c84:	607b      	str	r3, [r7, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d806      	bhi.n	8009c9a <enq_lock+0x26>
 8009c8c:	4a09      	ldr	r2, [pc, #36]	; (8009cb4 <enq_lock+0x40>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	011b      	lsls	r3, r3, #4
 8009c92:	4413      	add	r3, r2
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f2      	bne.n	8009c80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	bf14      	ite	ne
 8009ca0:	2301      	movne	r3, #1
 8009ca2:	2300      	moveq	r3, #0
 8009ca4:	b2db      	uxtb	r3, r3
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	20000ab4 	.word	0x20000ab4

08009cb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
 8009cc6:	e01f      	b.n	8009d08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009cc8:	4a41      	ldr	r2, [pc, #260]	; (8009dd0 <inc_lock+0x118>)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	011b      	lsls	r3, r3, #4
 8009cce:	4413      	add	r3, r2
 8009cd0:	681a      	ldr	r2, [r3, #0]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d113      	bne.n	8009d02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009cda:	4a3d      	ldr	r2, [pc, #244]	; (8009dd0 <inc_lock+0x118>)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	4413      	add	r3, r2
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d109      	bne.n	8009d02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009cee:	4a38      	ldr	r2, [pc, #224]	; (8009dd0 <inc_lock+0x118>)
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	4413      	add	r3, r2
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d006      	beq.n	8009d10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d9dc      	bls.n	8009cc8 <inc_lock+0x10>
 8009d0e:	e000      	b.n	8009d12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d132      	bne.n	8009d7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e002      	b.n	8009d24 <inc_lock+0x6c>
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3301      	adds	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d806      	bhi.n	8009d38 <inc_lock+0x80>
 8009d2a:	4a29      	ldr	r2, [pc, #164]	; (8009dd0 <inc_lock+0x118>)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	011b      	lsls	r3, r3, #4
 8009d30:	4413      	add	r3, r2
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1f2      	bne.n	8009d1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d101      	bne.n	8009d42 <inc_lock+0x8a>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e040      	b.n	8009dc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	4922      	ldr	r1, [pc, #136]	; (8009dd0 <inc_lock+0x118>)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	440b      	add	r3, r1
 8009d4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	491e      	ldr	r1, [pc, #120]	; (8009dd0 <inc_lock+0x118>)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	011b      	lsls	r3, r3, #4
 8009d5a:	440b      	add	r3, r1
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	695a      	ldr	r2, [r3, #20]
 8009d64:	491a      	ldr	r1, [pc, #104]	; (8009dd0 <inc_lock+0x118>)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	440b      	add	r3, r1
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009d70:	4a17      	ldr	r2, [pc, #92]	; (8009dd0 <inc_lock+0x118>)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	011b      	lsls	r3, r3, #4
 8009d76:	4413      	add	r3, r2
 8009d78:	330c      	adds	r3, #12
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d009      	beq.n	8009d98 <inc_lock+0xe0>
 8009d84:	4a12      	ldr	r2, [pc, #72]	; (8009dd0 <inc_lock+0x118>)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	011b      	lsls	r3, r3, #4
 8009d8a:	4413      	add	r3, r2
 8009d8c:	330c      	adds	r3, #12
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d001      	beq.n	8009d98 <inc_lock+0xe0>
 8009d94:	2300      	movs	r3, #0
 8009d96:	e015      	b.n	8009dc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d108      	bne.n	8009db0 <inc_lock+0xf8>
 8009d9e:	4a0c      	ldr	r2, [pc, #48]	; (8009dd0 <inc_lock+0x118>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	4413      	add	r3, r2
 8009da6:	330c      	adds	r3, #12
 8009da8:	881b      	ldrh	r3, [r3, #0]
 8009daa:	3301      	adds	r3, #1
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	e001      	b.n	8009db4 <inc_lock+0xfc>
 8009db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db4:	4906      	ldr	r1, [pc, #24]	; (8009dd0 <inc_lock+0x118>)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	440b      	add	r3, r1
 8009dbc:	330c      	adds	r3, #12
 8009dbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3301      	adds	r3, #1
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	20000ab4 	.word	0x20000ab4

08009dd4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009ddc:	2300      	movs	r3, #0
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e010      	b.n	8009e04 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009de2:	4a0d      	ldr	r2, [pc, #52]	; (8009e18 <clear_lock+0x44>)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	011b      	lsls	r3, r3, #4
 8009de8:	4413      	add	r3, r2
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d105      	bne.n	8009dfe <clear_lock+0x2a>
 8009df2:	4a09      	ldr	r2, [pc, #36]	; (8009e18 <clear_lock+0x44>)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	4413      	add	r3, r2
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3301      	adds	r3, #1
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d9eb      	bls.n	8009de2 <clear_lock+0xe>
	}
}
 8009e0a:	bf00      	nop
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20000ab4 	.word	0x20000ab4

08009e1c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	78db      	ldrb	r3, [r3, #3]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d034      	beq.n	8009e9a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e34:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	7858      	ldrb	r0, [r3, #1]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e40:	2301      	movs	r3, #1
 8009e42:	697a      	ldr	r2, [r7, #20]
 8009e44:	f7ff fd7c 	bl	8009940 <disk_write>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d002      	beq.n	8009e54 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	73fb      	strb	r3, [r7, #15]
 8009e52:	e022      	b.n	8009e9a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	1ad2      	subs	r2, r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d217      	bcs.n	8009e9a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	789b      	ldrb	r3, [r3, #2]
 8009e6e:	613b      	str	r3, [r7, #16]
 8009e70:	e010      	b.n	8009e94 <sync_window+0x78>
					wsect += fs->fsize;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	697a      	ldr	r2, [r7, #20]
 8009e78:	4413      	add	r3, r2
 8009e7a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	7858      	ldrb	r0, [r3, #1]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e86:	2301      	movs	r3, #1
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	f7ff fd59 	bl	8009940 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	613b      	str	r3, [r7, #16]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d8eb      	bhi.n	8009e72 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3718      	adds	r7, #24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d01b      	beq.n	8009ef4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7ff ffad 	bl	8009e1c <sync_window>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d113      	bne.n	8009ef4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	7858      	ldrb	r0, [r3, #1]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	f7ff fd11 	bl	8009900 <disk_read>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	3b02      	subs	r3, #2
 8009f0c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	3b02      	subs	r3, #2
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d301      	bcc.n	8009f1e <clust2sect+0x20>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e008      	b.n	8009f30 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	895b      	ldrh	r3, [r3, #10]
 8009f22:	461a      	mov	r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	fb03 f202 	mul.w	r2, r3, r2
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	4413      	add	r3, r2
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d904      	bls.n	8009f5c <get_fat+0x20>
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d302      	bcc.n	8009f62 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	617b      	str	r3, [r7, #20]
 8009f60:	e08e      	b.n	800a080 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295
 8009f66:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d045      	beq.n	8009ffc <get_fat+0xc0>
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	d05e      	beq.n	800a032 <get_fat+0xf6>
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d179      	bne.n	800a06c <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4413      	add	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	0b1b      	lsrs	r3, r3, #12
 8009f8e:	4413      	add	r3, r2
 8009f90:	4619      	mov	r1, r3
 8009f92:	6938      	ldr	r0, [r7, #16]
 8009f94:	f7ff ff86 	bl	8009ea4 <move_window>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d169      	bne.n	800a072 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	60fa      	str	r2, [r7, #12]
 8009fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	4413      	add	r3, r2
 8009fac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fb0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	0b1b      	lsrs	r3, r3, #12
 8009fba:	4413      	add	r3, r2
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	6938      	ldr	r0, [r7, #16]
 8009fc0:	f7ff ff70 	bl	8009ea4 <move_window>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d155      	bne.n	800a076 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fd8:	021b      	lsls	r3, r3, #8
 8009fda:	461a      	mov	r2, r3
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d002      	beq.n	8009ff2 <get_fat+0xb6>
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	091b      	lsrs	r3, r3, #4
 8009ff0:	e002      	b.n	8009ff8 <get_fat+0xbc>
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ff8:	617b      	str	r3, [r7, #20]
			break;
 8009ffa:	e041      	b.n	800a080 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	0adb      	lsrs	r3, r3, #11
 800a004:	4413      	add	r3, r2
 800a006:	4619      	mov	r1, r3
 800a008:	6938      	ldr	r0, [r7, #16]
 800a00a:	f7ff ff4b 	bl	8009ea4 <move_window>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d132      	bne.n	800a07a <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	0059      	lsls	r1, r3, #1
 800a01e:	f640 73fe 	movw	r3, #4094	; 0xffe
 800a022:	400b      	ands	r3, r1
 800a024:	4413      	add	r3, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff fcc8 	bl	80099bc <ld_word>
 800a02c:	4603      	mov	r3, r0
 800a02e:	617b      	str	r3, [r7, #20]
			break;
 800a030:	e026      	b.n	800a080 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	0a9b      	lsrs	r3, r3, #10
 800a03a:	4413      	add	r3, r2
 800a03c:	4619      	mov	r1, r3
 800a03e:	6938      	ldr	r0, [r7, #16]
 800a040:	f7ff ff30 	bl	8009ea4 <move_window>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d119      	bne.n	800a07e <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	0099      	lsls	r1, r3, #2
 800a054:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a058:	400b      	ands	r3, r1
 800a05a:	4413      	add	r3, r2
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff fcc5 	bl	80099ec <ld_dword>
 800a062:	4603      	mov	r3, r0
 800a064:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a068:	617b      	str	r3, [r7, #20]
			break;
 800a06a:	e009      	b.n	800a080 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a06c:	2301      	movs	r3, #1
 800a06e:	617b      	str	r3, [r7, #20]
 800a070:	e006      	b.n	800a080 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a072:	bf00      	nop
 800a074:	e004      	b.n	800a080 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a076:	bf00      	nop
 800a078:	e002      	b.n	800a080 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a07a:	bf00      	nop
 800a07c:	e000      	b.n	800a080 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a07e:	bf00      	nop
		}
	}

	return val;
 800a080:	697b      	ldr	r3, [r7, #20]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a08a:	b590      	push	{r4, r7, lr}
 800a08c:	b089      	sub	sp, #36	; 0x24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a096:	2302      	movs	r3, #2
 800a098:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	f240 80d9 	bls.w	800a254 <put_fat+0x1ca>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	f080 80d3 	bcs.w	800a254 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d073      	beq.n	800a19e <put_fat+0x114>
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	f000 8092 	beq.w	800a1e0 <put_fat+0x156>
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	f040 80c9 	bne.w	800a254 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	69bb      	ldr	r3, [r7, #24]
 800a0c8:	085b      	lsrs	r3, r3, #1
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	0b1b      	lsrs	r3, r3, #12
 800a0d8:	4413      	add	r3, r2
 800a0da:	4619      	mov	r1, r3
 800a0dc:	68f8      	ldr	r0, [r7, #12]
 800a0de:	f7ff fee1 	bl	8009ea4 <move_window>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0e6:	7ffb      	ldrb	r3, [r7, #31]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f040 80ac 	bne.w	800a246 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	1c59      	adds	r1, r3, #1
 800a0f8:	61b9      	str	r1, [r7, #24]
 800a0fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0fe:	4413      	add	r3, r2
 800a100:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	f003 0301 	and.w	r3, r3, #1
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00d      	beq.n	800a128 <put_fat+0x9e>
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	b25b      	sxtb	r3, r3
 800a112:	f003 030f 	and.w	r3, r3, #15
 800a116:	b25a      	sxtb	r2, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	011b      	lsls	r3, r3, #4
 800a11e:	b25b      	sxtb	r3, r3
 800a120:	4313      	orrs	r3, r2
 800a122:	b25b      	sxtb	r3, r3
 800a124:	b2db      	uxtb	r3, r3
 800a126:	e001      	b.n	800a12c <put_fat+0xa2>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2201      	movs	r2, #1
 800a134:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	0b1b      	lsrs	r3, r3, #12
 800a13e:	4413      	add	r3, r2
 800a140:	4619      	mov	r1, r3
 800a142:	68f8      	ldr	r0, [r7, #12]
 800a144:	f7ff feae 	bl	8009ea4 <move_window>
 800a148:	4603      	mov	r3, r0
 800a14a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a14c:	7ffb      	ldrb	r3, [r7, #31]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d17b      	bne.n	800a24a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a15e:	4413      	add	r3, r2
 800a160:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d003      	beq.n	800a174 <put_fat+0xea>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	091b      	lsrs	r3, r3, #4
 800a170:	b2db      	uxtb	r3, r3
 800a172:	e00e      	b.n	800a192 <put_fat+0x108>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	b25b      	sxtb	r3, r3
 800a17a:	f023 030f 	bic.w	r3, r3, #15
 800a17e:	b25a      	sxtb	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	0a1b      	lsrs	r3, r3, #8
 800a184:	b25b      	sxtb	r3, r3
 800a186:	f003 030f 	and.w	r3, r3, #15
 800a18a:	b25b      	sxtb	r3, r3
 800a18c:	4313      	orrs	r3, r2
 800a18e:	b25b      	sxtb	r3, r3
 800a190:	b2db      	uxtb	r3, r3
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	70da      	strb	r2, [r3, #3]
			break;
 800a19c:	e05a      	b.n	800a254 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	0adb      	lsrs	r3, r3, #11
 800a1a6:	4413      	add	r3, r2
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff fe7a 	bl	8009ea4 <move_window>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1b4:	7ffb      	ldrb	r3, [r7, #31]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d149      	bne.n	800a24e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	0059      	lsls	r1, r3, #1
 800a1c4:	f640 73fe 	movw	r3, #4094	; 0xffe
 800a1c8:	400b      	ands	r3, r1
 800a1ca:	4413      	add	r3, r2
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	b292      	uxth	r2, r2
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff fc2d 	bl	8009a32 <st_word>
			fs->wflag = 1;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	70da      	strb	r2, [r3, #3]
			break;
 800a1de:	e039      	b.n	800a254 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	0a9b      	lsrs	r3, r3, #10
 800a1e8:	4413      	add	r3, r2
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f7ff fe59 	bl	8009ea4 <move_window>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1f6:	7ffb      	ldrb	r3, [r7, #31]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d12a      	bne.n	800a252 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	0099      	lsls	r1, r3, #2
 800a20c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a210:	400b      	ands	r3, r1
 800a212:	4413      	add	r3, r2
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fbe9 	bl	80099ec <ld_dword>
 800a21a:	4603      	mov	r3, r0
 800a21c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a220:	4323      	orrs	r3, r4
 800a222:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	0099      	lsls	r1, r3, #2
 800a22e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a232:	400b      	ands	r3, r1
 800a234:	4413      	add	r3, r2
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff fc15 	bl	8009a68 <st_dword>
			fs->wflag = 1;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2201      	movs	r2, #1
 800a242:	70da      	strb	r2, [r3, #3]
			break;
 800a244:	e006      	b.n	800a254 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a246:	bf00      	nop
 800a248:	e004      	b.n	800a254 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a24a:	bf00      	nop
 800a24c:	e002      	b.n	800a254 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a24e:	bf00      	nop
 800a250:	e000      	b.n	800a254 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a252:	bf00      	nop
		}
	}
	return res;
 800a254:	7ffb      	ldrb	r3, [r7, #31]
}
 800a256:	4618      	mov	r0, r3
 800a258:	3724      	adds	r7, #36	; 0x24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd90      	pop	{r4, r7, pc}

0800a25e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b088      	sub	sp, #32
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d904      	bls.n	800a284 <remove_chain+0x26>
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	429a      	cmp	r2, r3
 800a282:	d301      	bcc.n	800a288 <remove_chain+0x2a>
 800a284:	2302      	movs	r3, #2
 800a286:	e04b      	b.n	800a320 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00c      	beq.n	800a2a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a28e:	f04f 32ff 	mov.w	r2, #4294967295
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	69b8      	ldr	r0, [r7, #24]
 800a296:	f7ff fef8 	bl	800a08a <put_fat>
 800a29a:	4603      	mov	r3, r0
 800a29c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a29e:	7ffb      	ldrb	r3, [r7, #31]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <remove_chain+0x4a>
 800a2a4:	7ffb      	ldrb	r3, [r7, #31]
 800a2a6:	e03b      	b.n	800a320 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a2a8:	68b9      	ldr	r1, [r7, #8]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff fe46 	bl	8009f3c <get_fat>
 800a2b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d031      	beq.n	800a31c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d101      	bne.n	800a2c2 <remove_chain+0x64>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	e02e      	b.n	800a320 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c8:	d101      	bne.n	800a2ce <remove_chain+0x70>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e028      	b.n	800a320 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	68b9      	ldr	r1, [r7, #8]
 800a2d2:	69b8      	ldr	r0, [r7, #24]
 800a2d4:	f7ff fed9 	bl	800a08a <put_fat>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a2dc:	7ffb      	ldrb	r3, [r7, #31]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <remove_chain+0x88>
 800a2e2:	7ffb      	ldrb	r3, [r7, #31]
 800a2e4:	e01c      	b.n	800a320 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	691a      	ldr	r2, [r3, #16]
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	3b02      	subs	r3, #2
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d20b      	bcs.n	800a30c <remove_chain+0xae>
			fs->free_clst++;
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	791b      	ldrb	r3, [r3, #4]
 800a302:	f043 0301 	orr.w	r3, r3, #1
 800a306:	b2da      	uxtb	r2, r3
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	429a      	cmp	r2, r3
 800a318:	d3c6      	bcc.n	800a2a8 <remove_chain+0x4a>
 800a31a:	e000      	b.n	800a31e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a31c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10d      	bne.n	800a35a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <create_chain+0x2c>
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	429a      	cmp	r2, r3
 800a352:	d31b      	bcc.n	800a38c <create_chain+0x64>
 800a354:	2301      	movs	r3, #1
 800a356:	61bb      	str	r3, [r7, #24]
 800a358:	e018      	b.n	800a38c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff fded 	bl	8009f3c <get_fat>
 800a362:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d801      	bhi.n	800a36e <create_chain+0x46>
 800a36a:	2301      	movs	r3, #1
 800a36c:	e070      	b.n	800a450 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a374:	d101      	bne.n	800a37a <create_chain+0x52>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	e06a      	b.n	800a450 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	699b      	ldr	r3, [r3, #24]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	429a      	cmp	r2, r3
 800a382:	d201      	bcs.n	800a388 <create_chain+0x60>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	e063      	b.n	800a450 <create_chain+0x128>
		scl = clst;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	3301      	adds	r3, #1
 800a394:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	69fa      	ldr	r2, [r7, #28]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d307      	bcc.n	800a3b0 <create_chain+0x88>
				ncl = 2;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a3a4:	69fa      	ldr	r2, [r7, #28]
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d901      	bls.n	800a3b0 <create_chain+0x88>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e04f      	b.n	800a450 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a3b0:	69f9      	ldr	r1, [r7, #28]
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff fdc2 	bl	8009f3c <get_fat>
 800a3b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00e      	beq.n	800a3de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d003      	beq.n	800a3ce <create_chain+0xa6>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3cc:	d101      	bne.n	800a3d2 <create_chain+0xaa>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	e03e      	b.n	800a450 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a3d2:	69fa      	ldr	r2, [r7, #28]
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d1da      	bne.n	800a390 <create_chain+0x68>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e038      	b.n	800a450 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a3de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e4:	69f9      	ldr	r1, [r7, #28]
 800a3e6:	6938      	ldr	r0, [r7, #16]
 800a3e8:	f7ff fe4f 	bl	800a08a <put_fat>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <create_chain+0xe2>
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d006      	beq.n	800a40a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a3fc:	69fa      	ldr	r2, [r7, #28]
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6938      	ldr	r0, [r7, #16]
 800a402:	f7ff fe42 	bl	800a08a <put_fat>
 800a406:	4603      	mov	r3, r0
 800a408:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d116      	bne.n	800a43e <create_chain+0x116>
		fs->last_clst = ncl;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	69fa      	ldr	r2, [r7, #28]
 800a414:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	691a      	ldr	r2, [r3, #16]
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	3b02      	subs	r3, #2
 800a420:	429a      	cmp	r2, r3
 800a422:	d804      	bhi.n	800a42e <create_chain+0x106>
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	1e5a      	subs	r2, r3, #1
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	791b      	ldrb	r3, [r3, #4]
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	b2da      	uxtb	r2, r3
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	711a      	strb	r2, [r3, #4]
 800a43c:	e007      	b.n	800a44e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a43e:	7dfb      	ldrb	r3, [r7, #23]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d102      	bne.n	800a44a <create_chain+0x122>
 800a444:	f04f 33ff 	mov.w	r3, #4294967295
 800a448:	e000      	b.n	800a44c <create_chain+0x124>
 800a44a:	2301      	movs	r3, #1
 800a44c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a44e:	69fb      	ldr	r3, [r7, #28]
}
 800a450:	4618      	mov	r0, r3
 800a452:	3720      	adds	r7, #32
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b086      	sub	sp, #24
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a46e:	d204      	bcs.n	800a47a <dir_sdi+0x22>
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	f003 031f 	and.w	r3, r3, #31
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <dir_sdi+0x26>
		return FR_INT_ERR;
 800a47a:	2302      	movs	r3, #2
 800a47c:	e063      	b.n	800a546 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d106      	bne.n	800a49e <dir_sdi+0x46>
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d902      	bls.n	800a49e <dir_sdi+0x46>
		clst = fs->dirbase;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a49c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10c      	bne.n	800a4be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	095b      	lsrs	r3, r3, #5
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	8912      	ldrh	r2, [r2, #8]
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d301      	bcc.n	800a4b4 <dir_sdi+0x5c>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e048      	b.n	800a546 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	61da      	str	r2, [r3, #28]
 800a4bc:	e029      	b.n	800a512 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	895b      	ldrh	r3, [r3, #10]
 800a4c2:	031b      	lsls	r3, r3, #12
 800a4c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a4c6:	e019      	b.n	800a4fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6979      	ldr	r1, [r7, #20]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7ff fd35 	bl	8009f3c <get_fat>
 800a4d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4da:	d101      	bne.n	800a4e0 <dir_sdi+0x88>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e032      	b.n	800a546 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d904      	bls.n	800a4f0 <dir_sdi+0x98>
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	699b      	ldr	r3, [r3, #24]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d301      	bcc.n	800a4f4 <dir_sdi+0x9c>
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	e028      	b.n	800a546 <dir_sdi+0xee>
			ofs -= csz;
 800a4f4:	683a      	ldr	r2, [r7, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	429a      	cmp	r2, r3
 800a502:	d2e1      	bcs.n	800a4c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a504:	6979      	ldr	r1, [r7, #20]
 800a506:	6938      	ldr	r0, [r7, #16]
 800a508:	f7ff fcf9 	bl	8009efe <clust2sect>
 800a50c:	4602      	mov	r2, r0
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <dir_sdi+0xcc>
 800a520:	2302      	movs	r3, #2
 800a522:	e010      	b.n	800a546 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	69da      	ldr	r2, [r3, #28]
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	0b1b      	lsrs	r3, r3, #12
 800a52c:	441a      	add	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a53e:	441a      	add	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b086      	sub	sp, #24
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	3320      	adds	r3, #32
 800a564:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d003      	beq.n	800a576 <dir_next+0x28>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a574:	d301      	bcc.n	800a57a <dir_next+0x2c>
 800a576:	2304      	movs	r3, #4
 800a578:	e0aa      	b.n	800a6d0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a580:	2b00      	cmp	r3, #0
 800a582:	f040 8098 	bne.w	800a6b6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10b      	bne.n	800a5b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	095b      	lsrs	r3, r3, #5
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	8912      	ldrh	r2, [r2, #8]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	f0c0 8088 	bcc.w	800a6b6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	61da      	str	r2, [r3, #28]
 800a5ac:	2304      	movs	r3, #4
 800a5ae:	e08f      	b.n	800a6d0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	0b1b      	lsrs	r3, r3, #12
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	8952      	ldrh	r2, [r2, #10]
 800a5b8:	3a01      	subs	r2, #1
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d17a      	bne.n	800a6b6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	699b      	ldr	r3, [r3, #24]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	f7ff fcb7 	bl	8009f3c <get_fat>
 800a5ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d801      	bhi.n	800a5da <dir_next+0x8c>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	e07a      	b.n	800a6d0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e0:	d101      	bne.n	800a5e6 <dir_next+0x98>
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	e074      	b.n	800a6d0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d358      	bcc.n	800a6a2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d104      	bne.n	800a600 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	61da      	str	r2, [r3, #28]
 800a5fc:	2304      	movs	r3, #4
 800a5fe:	e067      	b.n	800a6d0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f7ff fe8d 	bl	800a328 <create_chain>
 800a60e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <dir_next+0xcc>
 800a616:	2307      	movs	r3, #7
 800a618:	e05a      	b.n	800a6d0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <dir_next+0xd6>
 800a620:	2302      	movs	r3, #2
 800a622:	e055      	b.n	800a6d0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62a:	d101      	bne.n	800a630 <dir_next+0xe2>
 800a62c:	2301      	movs	r3, #1
 800a62e:	e04f      	b.n	800a6d0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a630:	68f8      	ldr	r0, [r7, #12]
 800a632:	f7ff fbf3 	bl	8009e1c <sync_window>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <dir_next+0xf2>
 800a63c:	2301      	movs	r3, #1
 800a63e:	e047      	b.n	800a6d0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3334      	adds	r3, #52	; 0x34
 800a644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a648:	2100      	movs	r1, #0
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fa59 	bl	8009b02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a650:	2300      	movs	r3, #0
 800a652:	613b      	str	r3, [r7, #16]
 800a654:	6979      	ldr	r1, [r7, #20]
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f7ff fc51 	bl	8009efe <clust2sect>
 800a65c:	4602      	mov	r2, r0
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	631a      	str	r2, [r3, #48]	; 0x30
 800a662:	e012      	b.n	800a68a <dir_next+0x13c>
						fs->wflag = 1;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2201      	movs	r2, #1
 800a668:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f7ff fbd6 	bl	8009e1c <sync_window>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <dir_next+0x12c>
 800a676:	2301      	movs	r3, #1
 800a678:	e02a      	b.n	800a6d0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	3301      	adds	r3, #1
 800a67e:	613b      	str	r3, [r7, #16]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a684:	1c5a      	adds	r2, r3, #1
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	895b      	ldrh	r3, [r3, #10]
 800a68e:	461a      	mov	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	4293      	cmp	r3, r2
 800a694:	d3e6      	bcc.n	800a664 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	1ad2      	subs	r2, r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a6a8:	6979      	ldr	r1, [r7, #20]
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f7ff fc27 	bl	8009efe <clust2sect>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68ba      	ldr	r2, [r7, #8]
 800a6ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6c8:	441a      	add	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7ff feb4 	bl	800a458 <dir_sdi>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d12b      	bne.n	800a752 <dir_alloc+0x7a>
		n = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	69db      	ldr	r3, [r3, #28]
 800a702:	4619      	mov	r1, r3
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff fbcd 	bl	8009ea4 <move_window>
 800a70a:	4603      	mov	r3, r0
 800a70c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d11d      	bne.n	800a750 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	2be5      	cmp	r3, #229	; 0xe5
 800a71c:	d004      	beq.n	800a728 <dir_alloc+0x50>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d107      	bne.n	800a738 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	3301      	adds	r3, #1
 800a72c:	613b      	str	r3, [r7, #16]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	429a      	cmp	r2, r3
 800a734:	d102      	bne.n	800a73c <dir_alloc+0x64>
 800a736:	e00c      	b.n	800a752 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a738:	2300      	movs	r3, #0
 800a73a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a73c:	2101      	movs	r1, #1
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff ff05 	bl	800a54e <dir_next>
 800a744:	4603      	mov	r3, r0
 800a746:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a748:	7dfb      	ldrb	r3, [r7, #23]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d0d7      	beq.n	800a6fe <dir_alloc+0x26>
 800a74e:	e000      	b.n	800a752 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a750:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a752:	7dfb      	ldrb	r3, [r7, #23]
 800a754:	2b04      	cmp	r3, #4
 800a756:	d101      	bne.n	800a75c <dir_alloc+0x84>
 800a758:	2307      	movs	r3, #7
 800a75a:	75fb      	strb	r3, [r7, #23]
	return res;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b084      	sub	sp, #16
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	331a      	adds	r3, #26
 800a774:	4618      	mov	r0, r3
 800a776:	f7ff f921 	bl	80099bc <ld_word>
 800a77a:	4603      	mov	r3, r0
 800a77c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b03      	cmp	r3, #3
 800a784:	d109      	bne.n	800a79a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	3314      	adds	r3, #20
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7ff f916 	bl	80099bc <ld_word>
 800a790:	4603      	mov	r3, r0
 800a792:	041b      	lsls	r3, r3, #16
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a79a:	68fb      	ldr	r3, [r7, #12]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	331a      	adds	r3, #26
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	b292      	uxth	r2, r2
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff f939 	bl	8009a32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d109      	bne.n	800a7dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	f103 0214 	add.w	r2, r3, #20
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	0c1b      	lsrs	r3, r3, #16
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4610      	mov	r0, r2
 800a7d8:	f7ff f92b 	bl	8009a32 <st_word>
	}
}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7ff fe2f 	bl	800a458 <dir_sdi>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <dir_find+0x24>
 800a804:	7dfb      	ldrb	r3, [r7, #23]
 800a806:	e03e      	b.n	800a886 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	69db      	ldr	r3, [r3, #28]
 800a80c:	4619      	mov	r1, r3
 800a80e:	6938      	ldr	r0, [r7, #16]
 800a810:	f7ff fb48 	bl	8009ea4 <move_window>
 800a814:	4603      	mov	r3, r0
 800a816:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a818:	7dfb      	ldrb	r3, [r7, #23]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d12f      	bne.n	800a87e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d102      	bne.n	800a832 <dir_find+0x4e>
 800a82c:	2304      	movs	r3, #4
 800a82e:	75fb      	strb	r3, [r7, #23]
 800a830:	e028      	b.n	800a884 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	330b      	adds	r3, #11
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	330b      	adds	r3, #11
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	f003 0308 	and.w	r3, r3, #8
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10a      	bne.n	800a86a <dir_find+0x86>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a18      	ldr	r0, [r3, #32]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3324      	adds	r3, #36	; 0x24
 800a85c:	220b      	movs	r2, #11
 800a85e:	4619      	mov	r1, r3
 800a860:	f7ff f969 	bl	8009b36 <mem_cmp>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00b      	beq.n	800a882 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a86a:	2100      	movs	r1, #0
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff fe6e 	bl	800a54e <dir_next>
 800a872:	4603      	mov	r3, r0
 800a874:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a876:	7dfb      	ldrb	r3, [r7, #23]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0c5      	beq.n	800a808 <dir_find+0x24>
 800a87c:	e002      	b.n	800a884 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a87e:	bf00      	nop
 800a880:	e000      	b.n	800a884 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a882:	bf00      	nop

	return res;
 800a884:	7dfb      	ldrb	r3, [r7, #23]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b084      	sub	sp, #16
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a89c:	2101      	movs	r1, #1
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff ff1a 	bl	800a6d8 <dir_alloc>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d11c      	bne.n	800a8e8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	68b8      	ldr	r0, [r7, #8]
 800a8b6:	f7ff faf5 	bl	8009ea4 <move_window>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d111      	bne.n	800a8e8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff f918 	bl	8009b02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a18      	ldr	r0, [r3, #32]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	3324      	adds	r3, #36	; 0x24
 800a8da:	220b      	movs	r2, #11
 800a8dc:	4619      	mov	r1, r3
 800a8de:	f7ff f8ef 	bl	8009ac0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	3324      	adds	r3, #36	; 0x24
 800a908:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a90a:	220b      	movs	r2, #11
 800a90c:	2120      	movs	r1, #32
 800a90e:	68b8      	ldr	r0, [r7, #8]
 800a910:	f7ff f8f7 	bl	8009b02 <mem_set>
	si = i = 0; ni = 8;
 800a914:	2300      	movs	r3, #0
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	2308      	movs	r3, #8
 800a91e:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	4413      	add	r3, r2
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	2b2e      	cmp	r3, #46	; 0x2e
 800a92a:	d12f      	bne.n	800a98c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	617a      	str	r2, [r7, #20]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4413      	add	r3, r2
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800a93a:	7ffb      	ldrb	r3, [r7, #31]
 800a93c:	2b2e      	cmp	r3, #46	; 0x2e
 800a93e:	d10a      	bne.n	800a956 <create_name+0x62>
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d807      	bhi.n	800a956 <create_name+0x62>
			sfn[i++] = c;
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	613a      	str	r2, [r7, #16]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	4413      	add	r3, r2
 800a950:	7ffa      	ldrb	r2, [r7, #31]
 800a952:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800a954:	e7ea      	b.n	800a92c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800a956:	7ffb      	ldrb	r3, [r7, #31]
 800a958:	2b2f      	cmp	r3, #47	; 0x2f
 800a95a:	d007      	beq.n	800a96c <create_name+0x78>
 800a95c:	7ffb      	ldrb	r3, [r7, #31]
 800a95e:	2b5c      	cmp	r3, #92	; 0x5c
 800a960:	d004      	beq.n	800a96c <create_name+0x78>
 800a962:	7ffb      	ldrb	r3, [r7, #31]
 800a964:	2b20      	cmp	r3, #32
 800a966:	d901      	bls.n	800a96c <create_name+0x78>
 800a968:	2306      	movs	r3, #6
 800a96a:	e084      	b.n	800aa76 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	441a      	add	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800a976:	7ffb      	ldrb	r3, [r7, #31]
 800a978:	2b20      	cmp	r3, #32
 800a97a:	d801      	bhi.n	800a980 <create_name+0x8c>
 800a97c:	2224      	movs	r2, #36	; 0x24
 800a97e:	e000      	b.n	800a982 <create_name+0x8e>
 800a980:	2220      	movs	r2, #32
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	330b      	adds	r3, #11
 800a986:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	e074      	b.n	800aa76 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	1c5a      	adds	r2, r3, #1
 800a990:	617a      	str	r2, [r7, #20]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a99a:	7ffb      	ldrb	r3, [r7, #31]
 800a99c:	2b20      	cmp	r3, #32
 800a99e:	d94e      	bls.n	800aa3e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a9a0:	7ffb      	ldrb	r3, [r7, #31]
 800a9a2:	2b2f      	cmp	r3, #47	; 0x2f
 800a9a4:	d006      	beq.n	800a9b4 <create_name+0xc0>
 800a9a6:	7ffb      	ldrb	r3, [r7, #31]
 800a9a8:	2b5c      	cmp	r3, #92	; 0x5c
 800a9aa:	d110      	bne.n	800a9ce <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a9ac:	e002      	b.n	800a9b4 <create_name+0xc0>
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b2f      	cmp	r3, #47	; 0x2f
 800a9be:	d0f6      	beq.n	800a9ae <create_name+0xba>
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	2b5c      	cmp	r3, #92	; 0x5c
 800a9ca:	d0f0      	beq.n	800a9ae <create_name+0xba>
			break;
 800a9cc:	e038      	b.n	800aa40 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a9ce:	7ffb      	ldrb	r3, [r7, #31]
 800a9d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d2:	d003      	beq.n	800a9dc <create_name+0xe8>
 800a9d4:	693a      	ldr	r2, [r7, #16]
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d30c      	bcc.n	800a9f6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	2b0b      	cmp	r3, #11
 800a9e0:	d002      	beq.n	800a9e8 <create_name+0xf4>
 800a9e2:	7ffb      	ldrb	r3, [r7, #31]
 800a9e4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e6:	d001      	beq.n	800a9ec <create_name+0xf8>
 800a9e8:	2306      	movs	r3, #6
 800a9ea:	e044      	b.n	800aa76 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800a9ec:	2308      	movs	r3, #8
 800a9ee:	613b      	str	r3, [r7, #16]
 800a9f0:	230b      	movs	r3, #11
 800a9f2:	61bb      	str	r3, [r7, #24]
			continue;
 800a9f4:	e022      	b.n	800aa3c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a9f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	da04      	bge.n	800aa08 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a9fe:	7ffb      	ldrb	r3, [r7, #31]
 800aa00:	3b80      	subs	r3, #128	; 0x80
 800aa02:	4a1f      	ldr	r2, [pc, #124]	; (800aa80 <create_name+0x18c>)
 800aa04:	5cd3      	ldrb	r3, [r2, r3]
 800aa06:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800aa08:	7ffb      	ldrb	r3, [r7, #31]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	481d      	ldr	r0, [pc, #116]	; (800aa84 <create_name+0x190>)
 800aa0e:	f7ff f8b9 	bl	8009b84 <chk_chr>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <create_name+0x128>
 800aa18:	2306      	movs	r3, #6
 800aa1a:	e02c      	b.n	800aa76 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800aa1c:	7ffb      	ldrb	r3, [r7, #31]
 800aa1e:	2b60      	cmp	r3, #96	; 0x60
 800aa20:	d905      	bls.n	800aa2e <create_name+0x13a>
 800aa22:	7ffb      	ldrb	r3, [r7, #31]
 800aa24:	2b7a      	cmp	r3, #122	; 0x7a
 800aa26:	d802      	bhi.n	800aa2e <create_name+0x13a>
 800aa28:	7ffb      	ldrb	r3, [r7, #31]
 800aa2a:	3b20      	subs	r3, #32
 800aa2c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	1c5a      	adds	r2, r3, #1
 800aa32:	613a      	str	r2, [r7, #16]
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	4413      	add	r3, r2
 800aa38:	7ffa      	ldrb	r2, [r7, #31]
 800aa3a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800aa3c:	e7a6      	b.n	800a98c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aa3e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	441a      	add	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <create_name+0x160>
 800aa50:	2306      	movs	r3, #6
 800aa52:	e010      	b.n	800aa76 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	2be5      	cmp	r3, #229	; 0xe5
 800aa5a:	d102      	bne.n	800aa62 <create_name+0x16e>
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	2205      	movs	r2, #5
 800aa60:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800aa62:	7ffb      	ldrb	r3, [r7, #31]
 800aa64:	2b20      	cmp	r3, #32
 800aa66:	d801      	bhi.n	800aa6c <create_name+0x178>
 800aa68:	2204      	movs	r2, #4
 800aa6a:	e000      	b.n	800aa6e <create_name+0x17a>
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	330b      	adds	r3, #11
 800aa72:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800aa74:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3720      	adds	r7, #32
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	0800fa74 	.word	0x0800fa74
 800aa84:	0800fa10 	.word	0x0800fa10

0800aa88 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b2f      	cmp	r3, #47	; 0x2f
 800aaa2:	d00b      	beq.n	800aabc <follow_path+0x34>
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b5c      	cmp	r3, #92	; 0x5c
 800aaaa:	d007      	beq.n	800aabc <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	695a      	ldr	r2, [r3, #20]
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	609a      	str	r2, [r3, #8]
 800aab4:	e00d      	b.n	800aad2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	3301      	adds	r3, #1
 800aaba:	603b      	str	r3, [r7, #0]
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b2f      	cmp	r3, #47	; 0x2f
 800aac2:	d0f8      	beq.n	800aab6 <follow_path+0x2e>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b5c      	cmp	r3, #92	; 0x5c
 800aaca:	d0f4      	beq.n	800aab6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	2200      	movs	r2, #0
 800aad0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	2b1f      	cmp	r3, #31
 800aad8:	d80a      	bhi.n	800aaf0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2280      	movs	r2, #128	; 0x80
 800aade:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800aae2:	2100      	movs	r1, #0
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7ff fcb7 	bl	800a458 <dir_sdi>
 800aaea:	4603      	mov	r3, r0
 800aaec:	75fb      	strb	r3, [r7, #23]
 800aaee:	e056      	b.n	800ab9e <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f7ff fefd 	bl	800a8f4 <create_name>
 800aafa:	4603      	mov	r3, r0
 800aafc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d147      	bne.n	800ab94 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fe6d 	bl	800a7e4 <dir_find>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ab14:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d01b      	beq.n	800ab54 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d13a      	bne.n	800ab98 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800ab22:	7afb      	ldrb	r3, [r7, #11]
 800ab24:	f003 0320 	and.w	r3, r3, #32
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ab2c:	7afb      	ldrb	r3, [r7, #11]
 800ab2e:	f003 0304 	and.w	r3, r3, #4
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d02c      	beq.n	800ab90 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2280      	movs	r2, #128	; 0x80
 800ab3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800ab42:	e029      	b.n	800ab98 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ab44:	7afb      	ldrb	r3, [r7, #11]
 800ab46:	f003 0304 	and.w	r3, r3, #4
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d124      	bne.n	800ab98 <follow_path+0x110>
 800ab4e:	2305      	movs	r3, #5
 800ab50:	75fb      	strb	r3, [r7, #23]
				break;
 800ab52:	e021      	b.n	800ab98 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab54:	7afb      	ldrb	r3, [r7, #11]
 800ab56:	f003 0304 	and.w	r3, r3, #4
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d11e      	bne.n	800ab9c <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	799b      	ldrb	r3, [r3, #6]
 800ab62:	f003 0310 	and.w	r3, r3, #16
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d102      	bne.n	800ab70 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800ab6a:	2305      	movs	r3, #5
 800ab6c:	75fb      	strb	r3, [r7, #23]
 800ab6e:	e016      	b.n	800ab9e <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab7e:	4413      	add	r3, r2
 800ab80:	4619      	mov	r1, r3
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fdef 	bl	800a766 <ld_clust>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	609a      	str	r2, [r3, #8]
 800ab8e:	e7af      	b.n	800aaf0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ab90:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab92:	e7ad      	b.n	800aaf0 <follow_path+0x68>
			if (res != FR_OK) break;
 800ab94:	bf00      	nop
 800ab96:	e002      	b.n	800ab9e <follow_path+0x116>
				break;
 800ab98:	bf00      	nop
 800ab9a:	e000      	b.n	800ab9e <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ab9c:	bf00      	nop
			}
		}
	}

	return res;
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3718      	adds	r7, #24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800abb0:	f04f 33ff 	mov.w	r3, #4294967295
 800abb4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d031      	beq.n	800ac22 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	617b      	str	r3, [r7, #20]
 800abc4:	e002      	b.n	800abcc <get_ldnumber+0x24>
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	3301      	adds	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d903      	bls.n	800abdc <get_ldnumber+0x34>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b3a      	cmp	r3, #58	; 0x3a
 800abda:	d1f4      	bne.n	800abc6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b3a      	cmp	r3, #58	; 0x3a
 800abe2:	d11c      	bne.n	800ac1e <get_ldnumber+0x76>
			tp = *path;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	60fa      	str	r2, [r7, #12]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	3b30      	subs	r3, #48	; 0x30
 800abf4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b09      	cmp	r3, #9
 800abfa:	d80e      	bhi.n	800ac1a <get_ldnumber+0x72>
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d10a      	bne.n	800ac1a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d107      	bne.n	800ac1a <get_ldnumber+0x72>
					vol = (int)i;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	3301      	adds	r3, #1
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	e002      	b.n	800ac24 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ac1e:	2300      	movs	r3, #0
 800ac20:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ac22:	693b      	ldr	r3, [r7, #16]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	371c      	adds	r7, #28
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	70da      	strb	r2, [r3, #3]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f04f 32ff 	mov.w	r2, #4294967295
 800ac46:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff f92a 	bl	8009ea4 <move_window>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <check_fs+0x2a>
 800ac56:	2304      	movs	r3, #4
 800ac58:	e038      	b.n	800accc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3334      	adds	r3, #52	; 0x34
 800ac5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe feaa 	bl	80099bc <ld_word>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d001      	beq.n	800ac78 <check_fs+0x48>
 800ac74:	2303      	movs	r3, #3
 800ac76:	e029      	b.n	800accc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac7e:	2be9      	cmp	r3, #233	; 0xe9
 800ac80:	d009      	beq.n	800ac96 <check_fs+0x66>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ac88:	2beb      	cmp	r3, #235	; 0xeb
 800ac8a:	d11e      	bne.n	800acca <check_fs+0x9a>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ac92:	2b90      	cmp	r3, #144	; 0x90
 800ac94:	d119      	bne.n	800acca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	3334      	adds	r3, #52	; 0x34
 800ac9a:	3336      	adds	r3, #54	; 0x36
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fe fea5 	bl	80099ec <ld_dword>
 800aca2:	4603      	mov	r3, r0
 800aca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aca8:	4a0a      	ldr	r2, [pc, #40]	; (800acd4 <check_fs+0xa4>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d101      	bne.n	800acb2 <check_fs+0x82>
 800acae:	2300      	movs	r3, #0
 800acb0:	e00c      	b.n	800accc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3334      	adds	r3, #52	; 0x34
 800acb6:	3352      	adds	r3, #82	; 0x52
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fe97 	bl	80099ec <ld_dword>
 800acbe:	4602      	mov	r2, r0
 800acc0:	4b05      	ldr	r3, [pc, #20]	; (800acd8 <check_fs+0xa8>)
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d101      	bne.n	800acca <check_fs+0x9a>
 800acc6:	2300      	movs	r3, #0
 800acc8:	e000      	b.n	800accc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800acca:	2302      	movs	r3, #2
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	00544146 	.word	0x00544146
 800acd8:	33544146 	.word	0x33544146

0800acdc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b096      	sub	sp, #88	; 0x58
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	4613      	mov	r3, r2
 800ace8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff ff59 	bl	800aba8 <get_ldnumber>
 800acf6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800acf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	da01      	bge.n	800ad02 <find_volume+0x26>
 800acfe:	230b      	movs	r3, #11
 800ad00:	e231      	b.n	800b166 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ad02:	4aa8      	ldr	r2, [pc, #672]	; (800afa4 <find_volume+0x2c8>)
 800ad04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <find_volume+0x3a>
 800ad12:	230c      	movs	r3, #12
 800ad14:	e227      	b.n	800b166 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	f023 0301 	bic.w	r3, r3, #1
 800ad22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d01a      	beq.n	800ad62 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	785b      	ldrb	r3, [r3, #1]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fda5 	bl	8009880 <disk_status>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ad3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad40:	f003 0301 	and.w	r3, r3, #1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10c      	bne.n	800ad62 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ad48:	79fb      	ldrb	r3, [r7, #7]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d007      	beq.n	800ad5e <find_volume+0x82>
 800ad4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad52:	f003 0304 	and.w	r3, r3, #4
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d001      	beq.n	800ad5e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ad5a:	230a      	movs	r3, #10
 800ad5c:	e203      	b.n	800b166 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e201      	b.n	800b166 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	2200      	movs	r2, #0
 800ad66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ad68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	785b      	ldrb	r3, [r3, #1]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7fe fd9d 	bl	80098b4 <disk_initialize>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ad80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ad8c:	2303      	movs	r3, #3
 800ad8e:	e1ea      	b.n	800b166 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ad90:	79fb      	ldrb	r3, [r7, #7]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d007      	beq.n	800ada6 <find_volume+0xca>
 800ad96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad9a:	f003 0304 	and.w	r3, r3, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ada2:	230a      	movs	r3, #10
 800ada4:	e1df      	b.n	800b166 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800adaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adae:	f7ff ff3f 	bl	800ac30 <check_fs>
 800adb2:	4603      	mov	r3, r0
 800adb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800adb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d14b      	bne.n	800ae58 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800adc0:	2300      	movs	r3, #0
 800adc2:	643b      	str	r3, [r7, #64]	; 0x40
 800adc4:	e01f      	b.n	800ae06 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800adcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adce:	011b      	lsls	r3, r3, #4
 800add0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800add4:	4413      	add	r3, r2
 800add6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	3304      	adds	r3, #4
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d006      	beq.n	800adf0 <find_volume+0x114>
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	3308      	adds	r3, #8
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe fe00 	bl	80099ec <ld_dword>
 800adec:	4602      	mov	r2, r0
 800adee:	e000      	b.n	800adf2 <find_volume+0x116>
 800adf0:	2200      	movs	r2, #0
 800adf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800adfa:	440b      	add	r3, r1
 800adfc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ae00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae02:	3301      	adds	r3, #1
 800ae04:	643b      	str	r3, [r7, #64]	; 0x40
 800ae06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d9dc      	bls.n	800adc6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ae10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <find_volume+0x140>
 800ae16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ae1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ae24:	4413      	add	r3, r2
 800ae26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ae2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ae2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d005      	beq.n	800ae3e <find_volume+0x162>
 800ae32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae36:	f7ff fefb 	bl	800ac30 <check_fs>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	e000      	b.n	800ae40 <find_volume+0x164>
 800ae3e:	2303      	movs	r3, #3
 800ae40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ae44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d905      	bls.n	800ae58 <find_volume+0x17c>
 800ae4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae4e:	3301      	adds	r3, #1
 800ae50:	643b      	str	r3, [r7, #64]	; 0x40
 800ae52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d9e1      	bls.n	800ae1c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ae58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae5c:	2b04      	cmp	r3, #4
 800ae5e:	d101      	bne.n	800ae64 <find_volume+0x188>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e180      	b.n	800b166 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ae64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d901      	bls.n	800ae70 <find_volume+0x194>
 800ae6c:	230d      	movs	r3, #13
 800ae6e:	e17a      	b.n	800b166 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ae70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae72:	3334      	adds	r3, #52	; 0x34
 800ae74:	330b      	adds	r3, #11
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe fda0 	bl	80099bc <ld_word>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae82:	d001      	beq.n	800ae88 <find_volume+0x1ac>
 800ae84:	230d      	movs	r3, #13
 800ae86:	e16e      	b.n	800b166 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ae88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8a:	3334      	adds	r3, #52	; 0x34
 800ae8c:	3316      	adds	r3, #22
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe fd94 	bl	80099bc <ld_word>
 800ae94:	4603      	mov	r3, r0
 800ae96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ae98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d106      	bne.n	800aeac <find_volume+0x1d0>
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aea0:	3334      	adds	r3, #52	; 0x34
 800aea2:	3324      	adds	r3, #36	; 0x24
 800aea4:	4618      	mov	r0, r3
 800aea6:	f7fe fda1 	bl	80099ec <ld_dword>
 800aeaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800aeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aeb0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800aebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebe:	789b      	ldrb	r3, [r3, #2]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d005      	beq.n	800aed0 <find_volume+0x1f4>
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	789b      	ldrb	r3, [r3, #2]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d001      	beq.n	800aed0 <find_volume+0x1f4>
 800aecc:	230d      	movs	r3, #13
 800aece:	e14a      	b.n	800b166 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800aed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed2:	789b      	ldrb	r3, [r3, #2]
 800aed4:	461a      	mov	r2, r3
 800aed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed8:	fb02 f303 	mul.w	r3, r2, r3
 800aedc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800aede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	895b      	ldrh	r3, [r3, #10]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d008      	beq.n	800af04 <find_volume+0x228>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	895b      	ldrh	r3, [r3, #10]
 800aef6:	461a      	mov	r2, r3
 800aef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefa:	895b      	ldrh	r3, [r3, #10]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	4013      	ands	r3, r2
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <find_volume+0x22c>
 800af04:	230d      	movs	r3, #13
 800af06:	e12e      	b.n	800b166 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800af08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0a:	3334      	adds	r3, #52	; 0x34
 800af0c:	3311      	adds	r3, #17
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe fd54 	bl	80099bc <ld_word>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1e:	891b      	ldrh	r3, [r3, #8]
 800af20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af24:	b29b      	uxth	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d001      	beq.n	800af2e <find_volume+0x252>
 800af2a:	230d      	movs	r3, #13
 800af2c:	e11b      	b.n	800b166 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	3334      	adds	r3, #52	; 0x34
 800af32:	3313      	adds	r3, #19
 800af34:	4618      	mov	r0, r3
 800af36:	f7fe fd41 	bl	80099bc <ld_word>
 800af3a:	4603      	mov	r3, r0
 800af3c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800af3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af40:	2b00      	cmp	r3, #0
 800af42:	d106      	bne.n	800af52 <find_volume+0x276>
 800af44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af46:	3334      	adds	r3, #52	; 0x34
 800af48:	3320      	adds	r3, #32
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7fe fd4e 	bl	80099ec <ld_dword>
 800af50:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800af52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af54:	3334      	adds	r3, #52	; 0x34
 800af56:	330e      	adds	r3, #14
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fd2f 	bl	80099bc <ld_word>
 800af5e:	4603      	mov	r3, r0
 800af60:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800af62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <find_volume+0x290>
 800af68:	230d      	movs	r3, #13
 800af6a:	e0fc      	b.n	800b166 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800af6c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af70:	4413      	add	r3, r2
 800af72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af74:	8912      	ldrh	r2, [r2, #8]
 800af76:	09d2      	lsrs	r2, r2, #7
 800af78:	b292      	uxth	r2, r2
 800af7a:	4413      	add	r3, r2
 800af7c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800af7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	429a      	cmp	r2, r3
 800af84:	d201      	bcs.n	800af8a <find_volume+0x2ae>
 800af86:	230d      	movs	r3, #13
 800af88:	e0ed      	b.n	800b166 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800af8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af92:	8952      	ldrh	r2, [r2, #10]
 800af94:	fbb3 f3f2 	udiv	r3, r3, r2
 800af98:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d103      	bne.n	800afa8 <find_volume+0x2cc>
 800afa0:	230d      	movs	r3, #13
 800afa2:	e0e0      	b.n	800b166 <find_volume+0x48a>
 800afa4:	20000aac 	.word	0x20000aac
		fmt = FS_FAT32;
 800afa8:	2303      	movs	r3, #3
 800afaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d802      	bhi.n	800afbe <find_volume+0x2e2>
 800afb8:	2302      	movs	r3, #2
 800afba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d802      	bhi.n	800afce <find_volume+0x2f2>
 800afc8:	2301      	movs	r3, #1
 800afca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	1c9a      	adds	r2, r3, #2
 800afd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afda:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800afdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800afde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afe0:	441a      	add	r2, r3
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800afe6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	441a      	add	r2, r3
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800aff0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aff4:	2b03      	cmp	r3, #3
 800aff6:	d11e      	bne.n	800b036 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	3334      	adds	r3, #52	; 0x34
 800affc:	332a      	adds	r3, #42	; 0x2a
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe fcdc 	bl	80099bc <ld_word>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <find_volume+0x332>
 800b00a:	230d      	movs	r3, #13
 800b00c:	e0ab      	b.n	800b166 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b010:	891b      	ldrh	r3, [r3, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <find_volume+0x33e>
 800b016:	230d      	movs	r3, #13
 800b018:	e0a5      	b.n	800b166 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	3334      	adds	r3, #52	; 0x34
 800b01e:	332c      	adds	r3, #44	; 0x2c
 800b020:	4618      	mov	r0, r3
 800b022:	f7fe fce3 	bl	80099ec <ld_dword>
 800b026:	4602      	mov	r2, r0
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	647b      	str	r3, [r7, #68]	; 0x44
 800b034:	e01f      	b.n	800b076 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	891b      	ldrh	r3, [r3, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <find_volume+0x366>
 800b03e:	230d      	movs	r3, #13
 800b040:	e091      	b.n	800b166 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b048:	441a      	add	r2, r3
 800b04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b04e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b052:	2b02      	cmp	r3, #2
 800b054:	d103      	bne.n	800b05e <find_volume+0x382>
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	699b      	ldr	r3, [r3, #24]
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	e00a      	b.n	800b074 <find_volume+0x398>
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	699a      	ldr	r2, [r3, #24]
 800b062:	4613      	mov	r3, r2
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	4413      	add	r3, r2
 800b068:	085a      	lsrs	r2, r3, #1
 800b06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b074:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	69da      	ldr	r2, [r3, #28]
 800b07a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b07c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800b080:	0b1b      	lsrs	r3, r3, #12
 800b082:	429a      	cmp	r2, r3
 800b084:	d201      	bcs.n	800b08a <find_volume+0x3ae>
 800b086:	230d      	movs	r3, #13
 800b088:	e06d      	b.n	800b166 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08c:	f04f 32ff 	mov.w	r2, #4294967295
 800b090:	611a      	str	r2, [r3, #16]
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	691a      	ldr	r2, [r3, #16]
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09c:	2280      	movs	r2, #128	; 0x80
 800b09e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b0a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d149      	bne.n	800b13c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	3334      	adds	r3, #52	; 0x34
 800b0ac:	3330      	adds	r3, #48	; 0x30
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fe fc84 	bl	80099bc <ld_word>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d140      	bne.n	800b13c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0bc:	3301      	adds	r3, #1
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0c2:	f7fe feef 	bl	8009ea4 <move_window>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d137      	bne.n	800b13c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	3334      	adds	r3, #52	; 0x34
 800b0d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe fc6e 	bl	80099bc <ld_word>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d127      	bne.n	800b13c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ee:	3334      	adds	r3, #52	; 0x34
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe fc7b 	bl	80099ec <ld_dword>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	4b1d      	ldr	r3, [pc, #116]	; (800b170 <find_volume+0x494>)
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d11e      	bne.n	800b13c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b100:	3334      	adds	r3, #52	; 0x34
 800b102:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe fc70 	bl	80099ec <ld_dword>
 800b10c:	4602      	mov	r2, r0
 800b10e:	4b19      	ldr	r3, [pc, #100]	; (800b174 <find_volume+0x498>)
 800b110:	429a      	cmp	r2, r3
 800b112:	d113      	bne.n	800b13c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	3334      	adds	r3, #52	; 0x34
 800b118:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fe fc65 	bl	80099ec <ld_dword>
 800b122:	4602      	mov	r2, r0
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12a:	3334      	adds	r3, #52	; 0x34
 800b12c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b130:	4618      	mov	r0, r3
 800b132:	f7fe fc5b 	bl	80099ec <ld_dword>
 800b136:	4602      	mov	r2, r0
 800b138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b142:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <find_volume+0x49c>)
 800b146:	881b      	ldrh	r3, [r3, #0]
 800b148:	3301      	adds	r3, #1
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	4b0a      	ldr	r3, [pc, #40]	; (800b178 <find_volume+0x49c>)
 800b14e:	801a      	strh	r2, [r3, #0]
 800b150:	4b09      	ldr	r3, [pc, #36]	; (800b178 <find_volume+0x49c>)
 800b152:	881a      	ldrh	r2, [r3, #0]
 800b154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b156:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800b158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15a:	2200      	movs	r2, #0
 800b15c:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b15e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b160:	f7fe fe38 	bl	8009dd4 <clear_lock>
#endif
	return FR_OK;
 800b164:	2300      	movs	r3, #0
}
 800b166:	4618      	mov	r0, r3
 800b168:	3758      	adds	r7, #88	; 0x58
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	41615252 	.word	0x41615252
 800b174:	61417272 	.word	0x61417272
 800b178:	20000ab0 	.word	0x20000ab0

0800b17c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b18e:	f107 0310 	add.w	r3, r7, #16
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff fd08 	bl	800aba8 <get_ldnumber>
 800b198:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da01      	bge.n	800b1a4 <f_mount+0x28>
 800b1a0:	230b      	movs	r3, #11
 800b1a2:	e02b      	b.n	800b1fc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b1a4:	4a17      	ldr	r2, [pc, #92]	; (800b204 <f_mount+0x88>)
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d005      	beq.n	800b1c0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b1b4:	69b8      	ldr	r0, [r7, #24]
 800b1b6:	f7fe fe0d 	bl	8009dd4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d002      	beq.n	800b1cc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	490d      	ldr	r1, [pc, #52]	; (800b204 <f_mount+0x88>)
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d002      	beq.n	800b1e2 <f_mount+0x66>
 800b1dc:	79fb      	ldrb	r3, [r7, #7]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d001      	beq.n	800b1e6 <f_mount+0x6a>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e00a      	b.n	800b1fc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b1e6:	f107 010c 	add.w	r1, r7, #12
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fd73 	bl	800acdc <find_volume>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3720      	adds	r7, #32
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	20000aac 	.word	0x20000aac

0800b208 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b09a      	sub	sp, #104	; 0x68
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d101      	bne.n	800b220 <f_open+0x18>
 800b21c:	2309      	movs	r3, #9
 800b21e:	e1ad      	b.n	800b57c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b220:	79fb      	ldrb	r3, [r7, #7]
 800b222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b226:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b228:	79fa      	ldrb	r2, [r7, #7]
 800b22a:	f107 0114 	add.w	r1, r7, #20
 800b22e:	f107 0308 	add.w	r3, r7, #8
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff fd52 	bl	800acdc <find_volume>
 800b238:	4603      	mov	r3, r0
 800b23a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800b23e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b242:	2b00      	cmp	r3, #0
 800b244:	f040 8191 	bne.w	800b56a <f_open+0x362>
		dj.obj.fs = fs;
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b24c:	68ba      	ldr	r2, [r7, #8]
 800b24e:	f107 0318 	add.w	r3, r7, #24
 800b252:	4611      	mov	r1, r2
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff fc17 	bl	800aa88 <follow_path>
 800b25a:	4603      	mov	r3, r0
 800b25c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b260:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b264:	2b00      	cmp	r3, #0
 800b266:	d11a      	bne.n	800b29e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b268:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b26c:	b25b      	sxtb	r3, r3
 800b26e:	2b00      	cmp	r3, #0
 800b270:	da03      	bge.n	800b27a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b272:	2306      	movs	r3, #6
 800b274:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b278:	e011      	b.n	800b29e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b27a:	79fb      	ldrb	r3, [r7, #7]
 800b27c:	f023 0301 	bic.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	bf14      	ite	ne
 800b284:	2301      	movne	r3, #1
 800b286:	2300      	moveq	r3, #0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	461a      	mov	r2, r3
 800b28c:	f107 0318 	add.w	r3, r7, #24
 800b290:	4611      	mov	r1, r2
 800b292:	4618      	mov	r0, r3
 800b294:	f7fe fc92 	bl	8009bbc <chk_lock>
 800b298:	4603      	mov	r3, r0
 800b29a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b29e:	79fb      	ldrb	r3, [r7, #7]
 800b2a0:	f003 031c 	and.w	r3, r3, #28
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d07f      	beq.n	800b3a8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b2a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d017      	beq.n	800b2e0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b2b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b2b4:	2b04      	cmp	r3, #4
 800b2b6:	d10e      	bne.n	800b2d6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b2b8:	f7fe fcdc 	bl	8009c74 <enq_lock>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d006      	beq.n	800b2d0 <f_open+0xc8>
 800b2c2:	f107 0318 	add.w	r3, r7, #24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f7ff fae1 	bl	800a88e <dir_register>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	e000      	b.n	800b2d2 <f_open+0xca>
 800b2d0:	2312      	movs	r3, #18
 800b2d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b2d6:	79fb      	ldrb	r3, [r7, #7]
 800b2d8:	f043 0308 	orr.w	r3, r3, #8
 800b2dc:	71fb      	strb	r3, [r7, #7]
 800b2de:	e010      	b.n	800b302 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b2e0:	7fbb      	ldrb	r3, [r7, #30]
 800b2e2:	f003 0311 	and.w	r3, r3, #17
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d003      	beq.n	800b2f2 <f_open+0xea>
					res = FR_DENIED;
 800b2ea:	2307      	movs	r3, #7
 800b2ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b2f0:	e007      	b.n	800b302 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b2f2:	79fb      	ldrb	r3, [r7, #7]
 800b2f4:	f003 0304 	and.w	r3, r3, #4
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <f_open+0xfa>
 800b2fc:	2308      	movs	r3, #8
 800b2fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b302:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b306:	2b00      	cmp	r3, #0
 800b308:	d168      	bne.n	800b3dc <f_open+0x1d4>
 800b30a:	79fb      	ldrb	r3, [r7, #7]
 800b30c:	f003 0308 	and.w	r3, r3, #8
 800b310:	2b00      	cmp	r3, #0
 800b312:	d063      	beq.n	800b3dc <f_open+0x1d4>
				dw = GET_FATTIME();
 800b314:	f7fe fa54 	bl	80097c0 <get_fattime>
 800b318:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	330e      	adds	r3, #14
 800b31e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b320:	4618      	mov	r0, r3
 800b322:	f7fe fba1 	bl	8009a68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	3316      	adds	r3, #22
 800b32a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe fb9b 	bl	8009a68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b334:	330b      	adds	r3, #11
 800b336:	2220      	movs	r2, #32
 800b338:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b33e:	4611      	mov	r1, r2
 800b340:	4618      	mov	r0, r3
 800b342:	f7ff fa10 	bl	800a766 <ld_clust>
 800b346:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b34c:	2200      	movs	r2, #0
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff fa28 	bl	800a7a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b356:	331c      	adds	r3, #28
 800b358:	2100      	movs	r1, #0
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fe fb84 	bl	8009a68 <st_dword>
					fs->wflag = 1;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2201      	movs	r2, #1
 800b364:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d037      	beq.n	800b3dc <f_open+0x1d4>
						dw = fs->winsect;
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b370:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800b372:	f107 0318 	add.w	r3, r7, #24
 800b376:	2200      	movs	r2, #0
 800b378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe ff6f 	bl	800a25e <remove_chain>
 800b380:	4603      	mov	r3, r0
 800b382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800b386:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d126      	bne.n	800b3dc <f_open+0x1d4>
							res = move_window(fs, dw);
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fd86 	bl	8009ea4 <move_window>
 800b398:	4603      	mov	r3, r0
 800b39a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3a2:	3a01      	subs	r2, #1
 800b3a4:	60da      	str	r2, [r3, #12]
 800b3a6:	e019      	b.n	800b3dc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b3a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d115      	bne.n	800b3dc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b3b0:	7fbb      	ldrb	r3, [r7, #30]
 800b3b2:	f003 0310 	and.w	r3, r3, #16
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b3ba:	2304      	movs	r3, #4
 800b3bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b3c0:	e00c      	b.n	800b3dc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b3c2:	79fb      	ldrb	r3, [r7, #7]
 800b3c4:	f003 0302 	and.w	r3, r3, #2
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d007      	beq.n	800b3dc <f_open+0x1d4>
 800b3cc:	7fbb      	ldrb	r3, [r7, #30]
 800b3ce:	f003 0301 	and.w	r3, r3, #1
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d002      	beq.n	800b3dc <f_open+0x1d4>
						res = FR_DENIED;
 800b3d6:	2307      	movs	r3, #7
 800b3d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800b3dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d128      	bne.n	800b436 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b3e4:	79fb      	ldrb	r3, [r7, #7]
 800b3e6:	f003 0308 	and.w	r3, r3, #8
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d003      	beq.n	800b3f6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b3fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	f023 0301 	bic.w	r3, r3, #1
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bf14      	ite	ne
 800b40e:	2301      	movne	r3, #1
 800b410:	2300      	moveq	r3, #0
 800b412:	b2db      	uxtb	r3, r3
 800b414:	461a      	mov	r2, r3
 800b416:	f107 0318 	add.w	r3, r7, #24
 800b41a:	4611      	mov	r1, r2
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fe fc4b 	bl	8009cb8 <inc_lock>
 800b422:	4602      	mov	r2, r0
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d102      	bne.n	800b436 <f_open+0x22e>
 800b430:	2302      	movs	r3, #2
 800b432:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b436:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 8095 	bne.w	800b56a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b444:	4611      	mov	r1, r2
 800b446:	4618      	mov	r0, r3
 800b448:	f7ff f98d 	bl	800a766 <ld_clust>
 800b44c:	4602      	mov	r2, r0
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b454:	331c      	adds	r3, #28
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe fac8 	bl	80099ec <ld_dword>
 800b45c:	4602      	mov	r2, r0
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b468:	697a      	ldr	r2, [r7, #20]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	88da      	ldrh	r2, [r3, #6]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	79fa      	ldrb	r2, [r7, #7]
 800b47a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2200      	movs	r2, #0
 800b480:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3330      	adds	r3, #48	; 0x30
 800b492:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b496:	2100      	movs	r1, #0
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fe fb32 	bl	8009b02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	f003 0320 	and.w	r3, r3, #32
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d060      	beq.n	800b56a <f_open+0x362>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d05c      	beq.n	800b56a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	68da      	ldr	r2, [r3, #12]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	895b      	ldrh	r3, [r3, #10]
 800b4bc:	031b      	lsls	r3, r3, #12
 800b4be:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4cc:	e016      	b.n	800b4fc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fe fd32 	bl	8009f3c <get_fat>
 800b4d8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800b4da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d802      	bhi.n	800b4e6 <f_open+0x2de>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b4e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ec:	d102      	bne.n	800b4f4 <f_open+0x2ec>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b4f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4f8:	1ad3      	subs	r3, r2, r3
 800b4fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b4fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b500:	2b00      	cmp	r3, #0
 800b502:	d103      	bne.n	800b50c <f_open+0x304>
 800b504:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b508:	429a      	cmp	r2, r3
 800b50a:	d8e0      	bhi.n	800b4ce <f_open+0x2c6>
				}
				fp->clust = clst;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b510:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b512:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b516:	2b00      	cmp	r3, #0
 800b518:	d127      	bne.n	800b56a <f_open+0x362>
 800b51a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b51c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b520:	2b00      	cmp	r3, #0
 800b522:	d022      	beq.n	800b56a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe fce8 	bl	8009efe <clust2sect>
 800b52e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b532:	2b00      	cmp	r3, #0
 800b534:	d103      	bne.n	800b53e <f_open+0x336>
						res = FR_INT_ERR;
 800b536:	2302      	movs	r3, #2
 800b538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800b53c:	e015      	b.n	800b56a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b53e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b540:	0b1a      	lsrs	r2, r3, #12
 800b542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b544:	441a      	add	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	7858      	ldrb	r0, [r3, #1]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6a1a      	ldr	r2, [r3, #32]
 800b558:	2301      	movs	r3, #1
 800b55a:	f7fe f9d1 	bl	8009900 <disk_read>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <f_open+0x362>
 800b564:	2301      	movs	r3, #1
 800b566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b56a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <f_open+0x370>
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b578:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3768      	adds	r7, #104	; 0x68
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b092      	sub	sp, #72	; 0x48
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800b590:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b594:	f107 030c 	add.w	r3, r7, #12
 800b598:	2200      	movs	r2, #0
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7ff fb9e 	bl	800acdc <find_volume>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800b5a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f040 8099 	bne.w	800b6e2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	691a      	ldr	r2, [r3, #16]
 800b5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	3b02      	subs	r3, #2
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d804      	bhi.n	800b5ce <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	691a      	ldr	r2, [r3, #16]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	e089      	b.n	800b6e2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d4:	781b      	ldrb	r3, [r3, #0]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d128      	bne.n	800b62c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b5da:	2302      	movs	r3, #2
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b5e2:	f107 0314 	add.w	r3, r7, #20
 800b5e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fe fca7 	bl	8009f3c <get_fat>
 800b5ee:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f6:	d103      	bne.n	800b600 <f_getfree+0x7c>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b5fe:	e063      	b.n	800b6c8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b602:	2b01      	cmp	r3, #1
 800b604:	d103      	bne.n	800b60e <f_getfree+0x8a>
 800b606:	2302      	movs	r3, #2
 800b608:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b60c:	e05c      	b.n	800b6c8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b610:	2b00      	cmp	r3, #0
 800b612:	d102      	bne.n	800b61a <f_getfree+0x96>
 800b614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b616:	3301      	adds	r3, #1
 800b618:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b61c:	3301      	adds	r3, #1
 800b61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b626:	429a      	cmp	r2, r3
 800b628:	d3db      	bcc.n	800b5e2 <f_getfree+0x5e>
 800b62a:	e04d      	b.n	800b6c8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	637b      	str	r3, [r7, #52]	; 0x34
 800b63c:	2300      	movs	r3, #0
 800b63e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b642:	2b00      	cmp	r3, #0
 800b644:	d113      	bne.n	800b66e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	63ba      	str	r2, [r7, #56]	; 0x38
 800b64e:	4619      	mov	r1, r3
 800b650:	f7fe fc28 	bl	8009ea4 <move_window>
 800b654:	4603      	mov	r3, r0
 800b656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b65a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d131      	bne.n	800b6c6 <f_getfree+0x142>
							p = fs->win;
 800b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b664:	3334      	adds	r3, #52	; 0x34
 800b666:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b66c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2b02      	cmp	r3, #2
 800b674:	d10f      	bne.n	800b696 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b676:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b678:	f7fe f9a0 	bl	80099bc <ld_word>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d102      	bne.n	800b688 <f_getfree+0x104>
 800b682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b684:	3301      	adds	r3, #1
 800b686:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	3302      	adds	r3, #2
 800b68c:	633b      	str	r3, [r7, #48]	; 0x30
 800b68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b690:	3b02      	subs	r3, #2
 800b692:	637b      	str	r3, [r7, #52]	; 0x34
 800b694:	e010      	b.n	800b6b8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b696:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b698:	f7fe f9a8 	bl	80099ec <ld_dword>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d102      	bne.n	800b6ac <f_getfree+0x128>
 800b6a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	633b      	str	r3, [r7, #48]	; 0x30
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b4:	3b04      	subs	r3, #4
 800b6b6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d1bd      	bne.n	800b640 <f_getfree+0xbc>
 800b6c4:	e000      	b.n	800b6c8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800b6c6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6cc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6d2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d6:	791a      	ldrb	r2, [r3, #4]
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	f042 0201 	orr.w	r2, r2, #1
 800b6de:	b2d2      	uxtb	r2, r2
 800b6e0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b6e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3748      	adds	r7, #72	; 0x48
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b6f0:	b590      	push	{r4, r7, lr}
 800b6f2:	b09d      	sub	sp, #116	; 0x74
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	607a      	str	r2, [r7, #4]
 800b6fa:	603b      	str	r3, [r7, #0]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b700:	2301      	movs	r3, #1
 800b702:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b704:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b708:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b70a:	f107 030c 	add.w	r3, r7, #12
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff fa4a 	bl	800aba8 <get_ldnumber>
 800b714:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b718:	2b00      	cmp	r3, #0
 800b71a:	da02      	bge.n	800b722 <f_mkfs+0x32>
 800b71c:	230b      	movs	r3, #11
 800b71e:	f000 bc0d 	b.w	800bf3c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b722:	4a94      	ldr	r2, [pc, #592]	; (800b974 <f_mkfs+0x284>)
 800b724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d005      	beq.n	800b73a <f_mkfs+0x4a>
 800b72e:	4a91      	ldr	r2, [pc, #580]	; (800b974 <f_mkfs+0x284>)
 800b730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b736:	2200      	movs	r2, #0
 800b738:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b740:	2300      	movs	r3, #0
 800b742:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b746:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe f8b2 	bl	80098b4 <disk_initialize>
 800b750:	4603      	mov	r3, r0
 800b752:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b756:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <f_mkfs+0x76>
 800b762:	2303      	movs	r3, #3
 800b764:	e3ea      	b.n	800bf3c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b766:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b76a:	f003 0304 	and.w	r3, r3, #4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <f_mkfs+0x86>
 800b772:	230a      	movs	r3, #10
 800b774:	e3e2      	b.n	800bf3c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b776:	f107 0214 	add.w	r2, r7, #20
 800b77a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b77e:	2103      	movs	r1, #3
 800b780:	4618      	mov	r0, r3
 800b782:	f7fe f8fd 	bl	8009980 <disk_ioctl>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10c      	bne.n	800b7a6 <f_mkfs+0xb6>
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d009      	beq.n	800b7a6 <f_mkfs+0xb6>
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b798:	d805      	bhi.n	800b7a6 <f_mkfs+0xb6>
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	1e5a      	subs	r2, r3, #1
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <f_mkfs+0xba>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b7aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7ae:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d003      	beq.n	800b7be <f_mkfs+0xce>
 800b7b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d309      	bcc.n	800b7d2 <f_mkfs+0xe2>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b7c4:	d805      	bhi.n	800b7d2 <f_mkfs+0xe2>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	1e5a      	subs	r2, r3, #1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <f_mkfs+0xe6>
 800b7d2:	2313      	movs	r3, #19
 800b7d4:	e3b2      	b.n	800bf3c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b7d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7de:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b7e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b7f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f4:	fb02 f303 	mul.w	r3, r2, r3
 800b7f8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <f_mkfs+0x114>
 800b800:	230e      	movs	r3, #14
 800b802:	e39b      	b.n	800bf3c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b804:	f107 0210 	add.w	r2, r7, #16
 800b808:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b80c:	2101      	movs	r1, #1
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe f8b6 	bl	8009980 <disk_ioctl>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <f_mkfs+0x12e>
 800b81a:	2301      	movs	r3, #1
 800b81c:	e38e      	b.n	800bf3c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b81e:	7afb      	ldrb	r3, [r7, #11]
 800b820:	f003 0308 	and.w	r3, r3, #8
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <f_mkfs+0x13c>
 800b828:	2300      	movs	r3, #0
 800b82a:	e000      	b.n	800b82e <f_mkfs+0x13e>
 800b82c:	233f      	movs	r3, #63	; 0x3f
 800b82e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b834:	429a      	cmp	r2, r3
 800b836:	d901      	bls.n	800b83c <f_mkfs+0x14c>
 800b838:	230e      	movs	r3, #14
 800b83a:	e37f      	b.n	800bf3c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	2b7f      	cmp	r3, #127	; 0x7f
 800b848:	d801      	bhi.n	800b84e <f_mkfs+0x15e>
 800b84a:	230e      	movs	r3, #14
 800b84c:	e376      	b.n	800bf3c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b80      	cmp	r3, #128	; 0x80
 800b852:	d901      	bls.n	800b858 <f_mkfs+0x168>
 800b854:	2313      	movs	r3, #19
 800b856:	e371      	b.n	800bf3c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b858:	7afb      	ldrb	r3, [r7, #11]
 800b85a:	f003 0302 	and.w	r3, r3, #2
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00d      	beq.n	800b87e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b862:	7afb      	ldrb	r3, [r7, #11]
 800b864:	f003 0307 	and.w	r3, r3, #7
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d004      	beq.n	800b876 <f_mkfs+0x186>
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	f003 0301 	and.w	r3, r3, #1
 800b872:	2b00      	cmp	r3, #0
 800b874:	d103      	bne.n	800b87e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b876:	2303      	movs	r3, #3
 800b878:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b87c:	e009      	b.n	800b892 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b87e:	7afb      	ldrb	r3, [r7, #11]
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	d101      	bne.n	800b88c <f_mkfs+0x19c>
 800b888:	2313      	movs	r3, #19
 800b88a:	e357      	b.n	800bf3c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b88c:	2302      	movs	r3, #2
 800b88e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b896:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d13c      	bne.n	800b918 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b89e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d11b      	bne.n	800b8dc <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	0c5b      	lsrs	r3, r3, #17
 800b8a8:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8b2:	e005      	b.n	800b8c0 <f_mkfs+0x1d0>
 800b8b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b8c0:	4a2d      	ldr	r2, [pc, #180]	; (800b978 <f_mkfs+0x288>)
 800b8c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d007      	beq.n	800b8dc <f_mkfs+0x1ec>
 800b8cc:	4a2a      	ldr	r2, [pc, #168]	; (800b978 <f_mkfs+0x288>)
 800b8ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d2eb      	bcs.n	800b8b4 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b8dc:	693a      	ldr	r2, [r7, #16]
 800b8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e4:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	3302      	adds	r3, #2
 800b8ea:	009a      	lsls	r2, r3, #2
 800b8ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8ee:	4413      	add	r3, r2
 800b8f0:	1e5a      	subs	r2, r3, #1
 800b8f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800b8fa:	2320      	movs	r3, #32
 800b8fc:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800b8fe:	2300      	movs	r3, #0
 800b900:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b908:	4293      	cmp	r3, r2
 800b90a:	d903      	bls.n	800b914 <f_mkfs+0x224>
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	4a1b      	ldr	r2, [pc, #108]	; (800b97c <f_mkfs+0x28c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d952      	bls.n	800b9ba <f_mkfs+0x2ca>
 800b914:	230e      	movs	r3, #14
 800b916:	e311      	b.n	800bf3c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d11b      	bne.n	800b956 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	0b1b      	lsrs	r3, r3, #12
 800b922:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b924:	2300      	movs	r3, #0
 800b926:	64bb      	str	r3, [r7, #72]	; 0x48
 800b928:	2301      	movs	r3, #1
 800b92a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b92c:	e005      	b.n	800b93a <f_mkfs+0x24a>
 800b92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b930:	3301      	adds	r3, #1
 800b932:	64bb      	str	r3, [r7, #72]	; 0x48
 800b934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b93a:	4a11      	ldr	r2, [pc, #68]	; (800b980 <f_mkfs+0x290>)
 800b93c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b93e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d007      	beq.n	800b956 <f_mkfs+0x266>
 800b946:	4a0e      	ldr	r2, [pc, #56]	; (800b980 <f_mkfs+0x290>)
 800b948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b94a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b94e:	461a      	mov	r2, r3
 800b950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b952:	4293      	cmp	r3, r2
 800b954:	d2eb      	bcs.n	800b92e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b956:	693a      	ldr	r2, [r7, #16]
 800b958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b95a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b95e:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b966:	4293      	cmp	r3, r2
 800b968:	d90c      	bls.n	800b984 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b96a:	6a3b      	ldr	r3, [r7, #32]
 800b96c:	3302      	adds	r3, #2
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	663b      	str	r3, [r7, #96]	; 0x60
 800b972:	e012      	b.n	800b99a <f_mkfs+0x2aa>
 800b974:	20000aac 	.word	0x20000aac
 800b978:	0800faf4 	.word	0x0800faf4
 800b97c:	0ffffff5 	.word	0x0ffffff5
 800b980:	0800fb04 	.word	0x0800fb04
				} else {
					fmt = FS_FAT12;
 800b984:	2301      	movs	r3, #1
 800b986:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b98a:	6a3a      	ldr	r2, [r7, #32]
 800b98c:	4613      	mov	r3, r2
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	4413      	add	r3, r2
 800b992:	3301      	adds	r3, #1
 800b994:	085b      	lsrs	r3, r3, #1
 800b996:	3303      	adds	r3, #3
 800b998:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b99a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b99c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b99e:	4413      	add	r3, r2
 800b9a0:	1e5a      	subs	r2, r3, #1
 800b9a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9a8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800b9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9b0:	015a      	lsls	r2, r3, #5
 800b9b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b9b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b8:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9be:	4413      	add	r3, r2
 800b9c0:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800b9c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9c6:	fb02 f203 	mul.w	r2, r2, r3
 800b9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9cc:	4413      	add	r3, r2
 800b9ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9d0:	4413      	add	r3, r2
 800b9d2:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	69fb      	ldr	r3, [r7, #28]
 800b9d8:	4413      	add	r3, r2
 800b9da:	1e5a      	subs	r2, r3, #1
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	425b      	negs	r3, r3
 800b9e0:	401a      	ands	r2, r3
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800b9e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d108      	bne.n	800ba02 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800b9f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9f4:	4413      	add	r3, r2
 800b9f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b9fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9fc:	4413      	add	r3, r2
 800b9fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba00:	e006      	b.n	800ba10 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ba02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ba0c:	4413      	add	r3, r2
 800ba0e:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ba10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba12:	011a      	lsls	r2, r3, #4
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	441a      	add	r2, r3
 800ba18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d901      	bls.n	800ba26 <f_mkfs+0x336>
 800ba22:	230e      	movs	r3, #14
 800ba24:	e28a      	b.n	800bf3c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba2a:	1ad2      	subs	r2, r2, r3
 800ba2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba30:	fb01 f303 	mul.w	r3, r1, r3
 800ba34:	1ad2      	subs	r2, r2, r3
 800ba36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba38:	1ad2      	subs	r2, r2, r3
 800ba3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba40:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800ba42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ba46:	2b03      	cmp	r3, #3
 800ba48:	d10f      	bne.n	800ba6a <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d80a      	bhi.n	800ba6a <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d105      	bne.n	800ba66 <f_mkfs+0x376>
 800ba5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	607b      	str	r3, [r7, #4]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d144      	bne.n	800baf0 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800ba66:	230e      	movs	r3, #14
 800ba68:	e268      	b.n	800bf3c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800ba6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d133      	bne.n	800bada <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d91e      	bls.n	800baba <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d107      	bne.n	800ba92 <f_mkfs+0x3a2>
 800ba82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	2b40      	cmp	r3, #64	; 0x40
 800ba88:	d803      	bhi.n	800ba92 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800ba8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba8c:	005b      	lsls	r3, r3, #1
 800ba8e:	607b      	str	r3, [r7, #4]
 800ba90:	e033      	b.n	800bafa <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800ba92:	7afb      	ldrb	r3, [r7, #11]
 800ba94:	f003 0302 	and.w	r3, r3, #2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800baa2:	e02a      	b.n	800bafa <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d105      	bne.n	800bab6 <f_mkfs+0x3c6>
 800baaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	607b      	str	r3, [r7, #4]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b80      	cmp	r3, #128	; 0x80
 800bab4:	d91e      	bls.n	800baf4 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800bab6:	230e      	movs	r3, #14
 800bab8:	e240      	b.n	800bf3c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d80a      	bhi.n	800bada <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d105      	bne.n	800bad6 <f_mkfs+0x3e6>
 800baca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	607b      	str	r3, [r7, #4]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2b80      	cmp	r3, #128	; 0x80
 800bad4:	d910      	bls.n	800baf8 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800bad6:	230e      	movs	r3, #14
 800bad8:	e230      	b.n	800bf3c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800bada:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d10c      	bne.n	800bafc <f_mkfs+0x40c>
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bae8:	4293      	cmp	r3, r2
 800baea:	d907      	bls.n	800bafc <f_mkfs+0x40c>
 800baec:	230e      	movs	r3, #14
 800baee:	e225      	b.n	800bf3c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800baf0:	bf00      	nop
 800baf2:	e6ce      	b.n	800b892 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800baf4:	bf00      	nop
 800baf6:	e6cc      	b.n	800b892 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800baf8:	bf00      	nop
			pau = au;
 800bafa:	e6ca      	b.n	800b892 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800bafc:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800bafe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bb00:	461a      	mov	r2, r3
 800bb02:	2100      	movs	r1, #0
 800bb04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb06:	f7fd fffc 	bl	8009b02 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800bb0a:	220b      	movs	r2, #11
 800bb0c:	49bc      	ldr	r1, [pc, #752]	; (800be00 <f_mkfs+0x710>)
 800bb0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb10:	f7fd ffd6 	bl	8009ac0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800bb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb16:	330b      	adds	r3, #11
 800bb18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bb1a:	4611      	mov	r1, r2
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fd ff88 	bl	8009a32 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	330d      	adds	r3, #13
 800bb26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb28:	b2d2      	uxtb	r2, r2
 800bb2a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800bb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb2e:	330e      	adds	r3, #14
 800bb30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb32:	b292      	uxth	r2, r2
 800bb34:	4611      	mov	r1, r2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fd ff7b 	bl	8009a32 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800bb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3e:	3310      	adds	r3, #16
 800bb40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb42:	b2d2      	uxtb	r2, r2
 800bb44:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800bb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb48:	f103 0211 	add.w	r2, r3, #17
 800bb4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d002      	beq.n	800bb5a <f_mkfs+0x46a>
 800bb54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	e000      	b.n	800bb5c <f_mkfs+0x46c>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f7fd ff67 	bl	8009a32 <st_word>
		if (sz_vol < 0x10000) {
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb6a:	d208      	bcs.n	800bb7e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	3313      	adds	r3, #19
 800bb70:	693a      	ldr	r2, [r7, #16]
 800bb72:	b292      	uxth	r2, r2
 800bb74:	4611      	mov	r1, r2
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7fd ff5b 	bl	8009a32 <st_word>
 800bb7c:	e006      	b.n	800bb8c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800bb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb80:	3320      	adds	r3, #32
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fd ff6e 	bl	8009a68 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	3315      	adds	r3, #21
 800bb90:	22f8      	movs	r2, #248	; 0xf8
 800bb92:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	3318      	adds	r3, #24
 800bb98:	213f      	movs	r1, #63	; 0x3f
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7fd ff49 	bl	8009a32 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	331a      	adds	r3, #26
 800bba4:	21ff      	movs	r1, #255	; 0xff
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fd ff43 	bl	8009a32 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800bbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbae:	331c      	adds	r3, #28
 800bbb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fd ff58 	bl	8009a68 <st_dword>
		if (fmt == FS_FAT32) {
 800bbb8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	d131      	bne.n	800bc24 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800bbc6:	f7fd fdfb 	bl	80097c0 <get_fattime>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f7fd ff4a 	bl	8009a68 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800bbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd6:	3324      	adds	r3, #36	; 0x24
 800bbd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fd ff44 	bl	8009a68 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800bbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe2:	332c      	adds	r3, #44	; 0x2c
 800bbe4:	2102      	movs	r1, #2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fd ff3e 	bl	8009a68 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	3330      	adds	r3, #48	; 0x30
 800bbf0:	2101      	movs	r1, #1
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fd ff1d 	bl	8009a32 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800bbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfa:	3332      	adds	r3, #50	; 0x32
 800bbfc:	2106      	movs	r1, #6
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fd ff17 	bl	8009a32 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	3340      	adds	r3, #64	; 0x40
 800bc08:	2280      	movs	r2, #128	; 0x80
 800bc0a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800bc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0e:	3342      	adds	r3, #66	; 0x42
 800bc10:	2229      	movs	r2, #41	; 0x29
 800bc12:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800bc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc16:	3347      	adds	r3, #71	; 0x47
 800bc18:	2213      	movs	r2, #19
 800bc1a:	497a      	ldr	r1, [pc, #488]	; (800be04 <f_mkfs+0x714>)
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7fd ff4f 	bl	8009ac0 <mem_cpy>
 800bc22:	e020      	b.n	800bc66 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800bc2a:	f7fd fdc9 	bl	80097c0 <get_fattime>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	4619      	mov	r1, r3
 800bc32:	4620      	mov	r0, r4
 800bc34:	f7fd ff18 	bl	8009a68 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	3316      	adds	r3, #22
 800bc3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc3e:	b292      	uxth	r2, r2
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fd fef5 	bl	8009a32 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4a:	3324      	adds	r3, #36	; 0x24
 800bc4c:	2280      	movs	r2, #128	; 0x80
 800bc4e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	3326      	adds	r3, #38	; 0x26
 800bc54:	2229      	movs	r2, #41	; 0x29
 800bc56:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	332b      	adds	r3, #43	; 0x2b
 800bc5c:	2213      	movs	r2, #19
 800bc5e:	496a      	ldr	r1, [pc, #424]	; (800be08 <f_mkfs+0x718>)
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fd ff2d 	bl	8009ac0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800bc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bc6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7fd fede 	bl	8009a32 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800bc76:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc80:	f7fd fe5e 	bl	8009940 <disk_write>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <f_mkfs+0x59e>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e156      	b.n	800bf3c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800bc8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	d140      	bne.n	800bd18 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800bc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc98:	1d9a      	adds	r2, r3, #6
 800bc9a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bc9e:	2301      	movs	r3, #1
 800bca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bca2:	f7fd fe4d 	bl	8009940 <disk_write>
			mem_set(buf, 0, ss);
 800bca6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bca8:	461a      	mov	r2, r3
 800bcaa:	2100      	movs	r1, #0
 800bcac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcae:	f7fd ff28 	bl	8009b02 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800bcb2:	4956      	ldr	r1, [pc, #344]	; (800be0c <f_mkfs+0x71c>)
 800bcb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcb6:	f7fd fed7 	bl	8009a68 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bcc0:	4953      	ldr	r1, [pc, #332]	; (800be10 <f_mkfs+0x720>)
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7fd fed0 	bl	8009a68 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bcce:	6a3b      	ldr	r3, [r7, #32]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4610      	mov	r0, r2
 800bcd6:	f7fd fec7 	bl	8009a68 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800bcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcdc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bce0:	2102      	movs	r1, #2
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fd fec0 	bl	8009a68 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcee:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7fd fe9d 	bl	8009a32 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	1dda      	adds	r2, r3, #7
 800bcfc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd00:	2301      	movs	r3, #1
 800bd02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd04:	f7fd fe1c 	bl	8009940 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800bd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0a:	1c5a      	adds	r2, r3, #1
 800bd0c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd10:	2301      	movs	r3, #1
 800bd12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd14:	f7fd fe14 	bl	8009940 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800bd18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd1a:	2100      	movs	r1, #0
 800bd1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd1e:	f7fd fef0 	bl	8009b02 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800bd22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd24:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800bd26:	2300      	movs	r3, #0
 800bd28:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd2a:	e04b      	b.n	800bdc4 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800bd2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd30:	2b03      	cmp	r3, #3
 800bd32:	d113      	bne.n	800bd5c <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800bd34:	f06f 0107 	mvn.w	r1, #7
 800bd38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd3a:	f7fd fe95 	bl	8009a68 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	3304      	adds	r3, #4
 800bd42:	f04f 31ff 	mov.w	r1, #4294967295
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fd fe8e 	bl	8009a68 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	3308      	adds	r3, #8
 800bd50:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fd fe87 	bl	8009a68 <st_dword>
 800bd5a:	e00b      	b.n	800bd74 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800bd5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d101      	bne.n	800bd68 <f_mkfs+0x678>
 800bd64:	4b2b      	ldr	r3, [pc, #172]	; (800be14 <f_mkfs+0x724>)
 800bd66:	e001      	b.n	800bd6c <f_mkfs+0x67c>
 800bd68:	f06f 0307 	mvn.w	r3, #7
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd70:	f7fd fe7a 	bl	8009a68 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800bd74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd76:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800bd78:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	bf28      	it	cs
 800bd80:	4613      	movcs	r3, r2
 800bd82:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800bd84:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bd88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd8e:	f7fd fdd7 	bl	8009940 <disk_write>
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <f_mkfs+0x6ac>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e0cf      	b.n	800bf3c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800bd9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd9e:	461a      	mov	r2, r3
 800bda0:	2100      	movs	r1, #0
 800bda2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda4:	f7fd fead 	bl	8009b02 <mem_set>
				sect += n; nsect -= n;
 800bda8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bdaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdac:	4413      	add	r3, r2
 800bdae:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800bdb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1dc      	bne.n	800bd78 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800bdbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d3af      	bcc.n	800bd2c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800bdcc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	d101      	bne.n	800bdd8 <f_mkfs+0x6e8>
 800bdd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdd6:	e000      	b.n	800bdda <f_mkfs+0x6ea>
 800bdd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdda:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800bddc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde0:	4293      	cmp	r3, r2
 800bde2:	bf28      	it	cs
 800bde4:	4613      	movcs	r3, r2
 800bde6:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800bde8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bdec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bdf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bdf2:	f7fd fda5 	bl	8009940 <disk_write>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00d      	beq.n	800be18 <f_mkfs+0x728>
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e09d      	b.n	800bf3c <f_mkfs+0x84c>
 800be00:	0800fa20 	.word	0x0800fa20
 800be04:	0800fa2c 	.word	0x0800fa2c
 800be08:	0800fa40 	.word	0x0800fa40
 800be0c:	41615252 	.word	0x41615252
 800be10:	61417272 	.word	0x61417272
 800be14:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800be18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800be1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be1c:	4413      	add	r3, r2
 800be1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800be20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800be28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1d6      	bne.n	800bddc <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800be2e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be32:	2b03      	cmp	r3, #3
 800be34:	d103      	bne.n	800be3e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800be36:	230c      	movs	r3, #12
 800be38:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800be3c:	e010      	b.n	800be60 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be44:	d303      	bcc.n	800be4e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800be46:	2306      	movs	r3, #6
 800be48:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800be4c:	e008      	b.n	800be60 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800be4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be52:	2b02      	cmp	r3, #2
 800be54:	d101      	bne.n	800be5a <f_mkfs+0x76a>
 800be56:	2304      	movs	r3, #4
 800be58:	e000      	b.n	800be5c <f_mkfs+0x76c>
 800be5a:	2301      	movs	r3, #1
 800be5c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800be60:	7afb      	ldrb	r3, [r7, #11]
 800be62:	f003 0308 	and.w	r3, r3, #8
 800be66:	2b00      	cmp	r3, #0
 800be68:	d15b      	bne.n	800bf22 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800be6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be6c:	461a      	mov	r2, r3
 800be6e:	2100      	movs	r1, #0
 800be70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be72:	f7fd fe46 	bl	8009b02 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800be7c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800be80:	4618      	mov	r0, r3
 800be82:	f7fd fdd6 	bl	8009a32 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800be86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be88:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800be8c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	2200      	movs	r2, #0
 800be92:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800be94:	69bb      	ldr	r3, [r7, #24]
 800be96:	3301      	adds	r3, #1
 800be98:	2201      	movs	r2, #1
 800be9a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	3302      	adds	r3, #2
 800bea0:	2201      	movs	r2, #1
 800bea2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	3303      	adds	r3, #3
 800bea8:	2200      	movs	r2, #0
 800beaa:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	3304      	adds	r3, #4
 800beb0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800beb4:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	441a      	add	r2, r3
 800bebc:	4b21      	ldr	r3, [pc, #132]	; (800bf44 <f_mkfs+0x854>)
 800bebe:	fba3 1302 	umull	r1, r3, r3, r2
 800bec2:	1ad2      	subs	r2, r2, r3
 800bec4:	0852      	lsrs	r2, r2, #1
 800bec6:	4413      	add	r3, r2
 800bec8:	0b5b      	lsrs	r3, r3, #13
 800beca:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	3305      	adds	r3, #5
 800bed0:	22fe      	movs	r2, #254	; 0xfe
 800bed2:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800bed4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bed6:	089b      	lsrs	r3, r3, #2
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	3306      	adds	r3, #6
 800bede:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800bee2:	b2d2      	uxtb	r2, r2
 800bee4:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	3307      	adds	r3, #7
 800beea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800beec:	b2d2      	uxtb	r2, r2
 800beee:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	3308      	adds	r3, #8
 800bef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fd fdb6 	bl	8009a68 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	330c      	adds	r3, #12
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4611      	mov	r1, r2
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fd fdaf 	bl	8009a68 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800bf0a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bf0e:	2301      	movs	r3, #1
 800bf10:	2200      	movs	r2, #0
 800bf12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf14:	f7fd fd14 	bl	8009940 <disk_write>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <f_mkfs+0x832>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	e00c      	b.n	800bf3c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800bf22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bf26:	2200      	movs	r2, #0
 800bf28:	2100      	movs	r1, #0
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fd fd28 	bl	8009980 <disk_ioctl>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d001      	beq.n	800bf3a <f_mkfs+0x84a>
 800bf36:	2301      	movs	r3, #1
 800bf38:	e000      	b.n	800bf3c <f_mkfs+0x84c>

	return FR_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3774      	adds	r7, #116	; 0x74
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd90      	pop	{r4, r7, pc}
 800bf44:	0515565b 	.word	0x0515565b

0800bf48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	4613      	mov	r3, r2
 800bf54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf56:	2301      	movs	r3, #1
 800bf58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bf5e:	4b1f      	ldr	r3, [pc, #124]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bf60:	7a5b      	ldrb	r3, [r3, #9]
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d131      	bne.n	800bfcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf68:	4b1c      	ldr	r3, [pc, #112]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bf6a:	7a5b      	ldrb	r3, [r3, #9]
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	461a      	mov	r2, r3
 800bf70:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bf72:	2100      	movs	r1, #0
 800bf74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bf76:	4b19      	ldr	r3, [pc, #100]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bf78:	7a5b      	ldrb	r3, [r3, #9]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	4a17      	ldr	r2, [pc, #92]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bf86:	4b15      	ldr	r3, [pc, #84]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bf88:	7a5b      	ldrb	r3, [r3, #9]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	4b13      	ldr	r3, [pc, #76]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bf90:	4413      	add	r3, r2
 800bf92:	79fa      	ldrb	r2, [r7, #7]
 800bf94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf96:	4b11      	ldr	r3, [pc, #68]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bf98:	7a5b      	ldrb	r3, [r3, #9]
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	1c5a      	adds	r2, r3, #1
 800bf9e:	b2d1      	uxtb	r1, r2
 800bfa0:	4a0e      	ldr	r2, [pc, #56]	; (800bfdc <FATFS_LinkDriverEx+0x94>)
 800bfa2:	7251      	strb	r1, [r2, #9]
 800bfa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bfa6:	7dbb      	ldrb	r3, [r7, #22]
 800bfa8:	3330      	adds	r3, #48	; 0x30
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	223a      	movs	r2, #58	; 0x3a
 800bfb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	3302      	adds	r3, #2
 800bfbc:	222f      	movs	r2, #47	; 0x2f
 800bfbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	3303      	adds	r3, #3
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	20000ad4 	.word	0x20000ad4

0800bfe0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bfea:	2200      	movs	r2, #0
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff ffaa 	bl	800bf48 <FATFS_LinkDriverEx>
 800bff4:	4603      	mov	r3, r0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
	...

0800c000 <__errno>:
 800c000:	4b01      	ldr	r3, [pc, #4]	; (800c008 <__errno+0x8>)
 800c002:	6818      	ldr	r0, [r3, #0]
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	20000024 	.word	0x20000024

0800c00c <__libc_init_array>:
 800c00c:	b570      	push	{r4, r5, r6, lr}
 800c00e:	4e0d      	ldr	r6, [pc, #52]	; (800c044 <__libc_init_array+0x38>)
 800c010:	4c0d      	ldr	r4, [pc, #52]	; (800c048 <__libc_init_array+0x3c>)
 800c012:	1ba4      	subs	r4, r4, r6
 800c014:	10a4      	asrs	r4, r4, #2
 800c016:	2500      	movs	r5, #0
 800c018:	42a5      	cmp	r5, r4
 800c01a:	d109      	bne.n	800c030 <__libc_init_array+0x24>
 800c01c:	4e0b      	ldr	r6, [pc, #44]	; (800c04c <__libc_init_array+0x40>)
 800c01e:	4c0c      	ldr	r4, [pc, #48]	; (800c050 <__libc_init_array+0x44>)
 800c020:	f003 fc90 	bl	800f944 <_init>
 800c024:	1ba4      	subs	r4, r4, r6
 800c026:	10a4      	asrs	r4, r4, #2
 800c028:	2500      	movs	r5, #0
 800c02a:	42a5      	cmp	r5, r4
 800c02c:	d105      	bne.n	800c03a <__libc_init_array+0x2e>
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c034:	4798      	blx	r3
 800c036:	3501      	adds	r5, #1
 800c038:	e7ee      	b.n	800c018 <__libc_init_array+0xc>
 800c03a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c03e:	4798      	blx	r3
 800c040:	3501      	adds	r5, #1
 800c042:	e7f2      	b.n	800c02a <__libc_init_array+0x1e>
 800c044:	0800fdd0 	.word	0x0800fdd0
 800c048:	0800fdd0 	.word	0x0800fdd0
 800c04c:	0800fdd0 	.word	0x0800fdd0
 800c050:	0800fdd4 	.word	0x0800fdd4

0800c054 <memset>:
 800c054:	4402      	add	r2, r0
 800c056:	4603      	mov	r3, r0
 800c058:	4293      	cmp	r3, r2
 800c05a:	d100      	bne.n	800c05e <memset+0xa>
 800c05c:	4770      	bx	lr
 800c05e:	f803 1b01 	strb.w	r1, [r3], #1
 800c062:	e7f9      	b.n	800c058 <memset+0x4>

0800c064 <__cvt>:
 800c064:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c066:	ed2d 8b02 	vpush	{d8}
 800c06a:	eeb0 8b40 	vmov.f64	d8, d0
 800c06e:	b085      	sub	sp, #20
 800c070:	4617      	mov	r7, r2
 800c072:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c074:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c076:	ee18 2a90 	vmov	r2, s17
 800c07a:	f025 0520 	bic.w	r5, r5, #32
 800c07e:	2a00      	cmp	r2, #0
 800c080:	bfb6      	itet	lt
 800c082:	222d      	movlt	r2, #45	; 0x2d
 800c084:	2200      	movge	r2, #0
 800c086:	eeb1 8b40 	vneglt.f64	d8, d0
 800c08a:	2d46      	cmp	r5, #70	; 0x46
 800c08c:	460c      	mov	r4, r1
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	d004      	beq.n	800c09c <__cvt+0x38>
 800c092:	2d45      	cmp	r5, #69	; 0x45
 800c094:	d100      	bne.n	800c098 <__cvt+0x34>
 800c096:	3401      	adds	r4, #1
 800c098:	2102      	movs	r1, #2
 800c09a:	e000      	b.n	800c09e <__cvt+0x3a>
 800c09c:	2103      	movs	r1, #3
 800c09e:	ab03      	add	r3, sp, #12
 800c0a0:	9301      	str	r3, [sp, #4]
 800c0a2:	ab02      	add	r3, sp, #8
 800c0a4:	9300      	str	r3, [sp, #0]
 800c0a6:	4622      	mov	r2, r4
 800c0a8:	4633      	mov	r3, r6
 800c0aa:	eeb0 0b48 	vmov.f64	d0, d8
 800c0ae:	f001 fd1f 	bl	800daf0 <_dtoa_r>
 800c0b2:	2d47      	cmp	r5, #71	; 0x47
 800c0b4:	d101      	bne.n	800c0ba <__cvt+0x56>
 800c0b6:	07fb      	lsls	r3, r7, #31
 800c0b8:	d51e      	bpl.n	800c0f8 <__cvt+0x94>
 800c0ba:	2d46      	cmp	r5, #70	; 0x46
 800c0bc:	eb00 0304 	add.w	r3, r0, r4
 800c0c0:	d10c      	bne.n	800c0dc <__cvt+0x78>
 800c0c2:	7802      	ldrb	r2, [r0, #0]
 800c0c4:	2a30      	cmp	r2, #48	; 0x30
 800c0c6:	d107      	bne.n	800c0d8 <__cvt+0x74>
 800c0c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d0:	bf1c      	itt	ne
 800c0d2:	f1c4 0401 	rsbne	r4, r4, #1
 800c0d6:	6034      	strne	r4, [r6, #0]
 800c0d8:	6832      	ldr	r2, [r6, #0]
 800c0da:	4413      	add	r3, r2
 800c0dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e4:	d007      	beq.n	800c0f6 <__cvt+0x92>
 800c0e6:	2130      	movs	r1, #48	; 0x30
 800c0e8:	9a03      	ldr	r2, [sp, #12]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d204      	bcs.n	800c0f8 <__cvt+0x94>
 800c0ee:	1c54      	adds	r4, r2, #1
 800c0f0:	9403      	str	r4, [sp, #12]
 800c0f2:	7011      	strb	r1, [r2, #0]
 800c0f4:	e7f8      	b.n	800c0e8 <__cvt+0x84>
 800c0f6:	9303      	str	r3, [sp, #12]
 800c0f8:	9b03      	ldr	r3, [sp, #12]
 800c0fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0fc:	1a1b      	subs	r3, r3, r0
 800c0fe:	6013      	str	r3, [r2, #0]
 800c100:	b005      	add	sp, #20
 800c102:	ecbd 8b02 	vpop	{d8}
 800c106:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c108 <__exponent>:
 800c108:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c10a:	2900      	cmp	r1, #0
 800c10c:	4604      	mov	r4, r0
 800c10e:	bfba      	itte	lt
 800c110:	4249      	neglt	r1, r1
 800c112:	232d      	movlt	r3, #45	; 0x2d
 800c114:	232b      	movge	r3, #43	; 0x2b
 800c116:	2909      	cmp	r1, #9
 800c118:	f804 2b02 	strb.w	r2, [r4], #2
 800c11c:	7043      	strb	r3, [r0, #1]
 800c11e:	dd20      	ble.n	800c162 <__exponent+0x5a>
 800c120:	f10d 0307 	add.w	r3, sp, #7
 800c124:	461f      	mov	r7, r3
 800c126:	260a      	movs	r6, #10
 800c128:	fb91 f5f6 	sdiv	r5, r1, r6
 800c12c:	fb06 1115 	mls	r1, r6, r5, r1
 800c130:	3130      	adds	r1, #48	; 0x30
 800c132:	2d09      	cmp	r5, #9
 800c134:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c138:	f103 32ff 	add.w	r2, r3, #4294967295
 800c13c:	4629      	mov	r1, r5
 800c13e:	dc09      	bgt.n	800c154 <__exponent+0x4c>
 800c140:	3130      	adds	r1, #48	; 0x30
 800c142:	3b02      	subs	r3, #2
 800c144:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c148:	42bb      	cmp	r3, r7
 800c14a:	4622      	mov	r2, r4
 800c14c:	d304      	bcc.n	800c158 <__exponent+0x50>
 800c14e:	1a10      	subs	r0, r2, r0
 800c150:	b003      	add	sp, #12
 800c152:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c154:	4613      	mov	r3, r2
 800c156:	e7e7      	b.n	800c128 <__exponent+0x20>
 800c158:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c15c:	f804 2b01 	strb.w	r2, [r4], #1
 800c160:	e7f2      	b.n	800c148 <__exponent+0x40>
 800c162:	2330      	movs	r3, #48	; 0x30
 800c164:	4419      	add	r1, r3
 800c166:	7083      	strb	r3, [r0, #2]
 800c168:	1d02      	adds	r2, r0, #4
 800c16a:	70c1      	strb	r1, [r0, #3]
 800c16c:	e7ef      	b.n	800c14e <__exponent+0x46>
	...

0800c170 <_printf_float>:
 800c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	b08d      	sub	sp, #52	; 0x34
 800c176:	460c      	mov	r4, r1
 800c178:	4616      	mov	r6, r2
 800c17a:	461f      	mov	r7, r3
 800c17c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c180:	4605      	mov	r5, r0
 800c182:	f002 fd2d 	bl	800ebe0 <_localeconv_r>
 800c186:	f8d0 b000 	ldr.w	fp, [r0]
 800c18a:	4658      	mov	r0, fp
 800c18c:	f7f4 f858 	bl	8000240 <strlen>
 800c190:	2300      	movs	r3, #0
 800c192:	930a      	str	r3, [sp, #40]	; 0x28
 800c194:	f8d8 3000 	ldr.w	r3, [r8]
 800c198:	9005      	str	r0, [sp, #20]
 800c19a:	3307      	adds	r3, #7
 800c19c:	f023 0307 	bic.w	r3, r3, #7
 800c1a0:	f103 0108 	add.w	r1, r3, #8
 800c1a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c1a8:	6822      	ldr	r2, [r4, #0]
 800c1aa:	f8c8 1000 	str.w	r1, [r8]
 800c1ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c1b6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800c440 <_printf_float+0x2d0>
 800c1ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c1be:	eeb0 6bc0 	vabs.f64	d6, d0
 800c1c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800c1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ca:	dd24      	ble.n	800c216 <_printf_float+0xa6>
 800c1cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d4:	d502      	bpl.n	800c1dc <_printf_float+0x6c>
 800c1d6:	232d      	movs	r3, #45	; 0x2d
 800c1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1dc:	499a      	ldr	r1, [pc, #616]	; (800c448 <_printf_float+0x2d8>)
 800c1de:	4b9b      	ldr	r3, [pc, #620]	; (800c44c <_printf_float+0x2dc>)
 800c1e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c1e4:	bf8c      	ite	hi
 800c1e6:	4688      	movhi	r8, r1
 800c1e8:	4698      	movls	r8, r3
 800c1ea:	f022 0204 	bic.w	r2, r2, #4
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	6123      	str	r3, [r4, #16]
 800c1f2:	6022      	str	r2, [r4, #0]
 800c1f4:	f04f 0a00 	mov.w	sl, #0
 800c1f8:	9700      	str	r7, [sp, #0]
 800c1fa:	4633      	mov	r3, r6
 800c1fc:	aa0b      	add	r2, sp, #44	; 0x2c
 800c1fe:	4621      	mov	r1, r4
 800c200:	4628      	mov	r0, r5
 800c202:	f000 f9e1 	bl	800c5c8 <_printf_common>
 800c206:	3001      	adds	r0, #1
 800c208:	f040 8089 	bne.w	800c31e <_printf_float+0x1ae>
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295
 800c210:	b00d      	add	sp, #52	; 0x34
 800c212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c216:	eeb4 0b40 	vcmp.f64	d0, d0
 800c21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21e:	d702      	bvc.n	800c226 <_printf_float+0xb6>
 800c220:	498b      	ldr	r1, [pc, #556]	; (800c450 <_printf_float+0x2e0>)
 800c222:	4b8c      	ldr	r3, [pc, #560]	; (800c454 <_printf_float+0x2e4>)
 800c224:	e7dc      	b.n	800c1e0 <_printf_float+0x70>
 800c226:	6861      	ldr	r1, [r4, #4]
 800c228:	1c4b      	adds	r3, r1, #1
 800c22a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c22e:	ab0a      	add	r3, sp, #40	; 0x28
 800c230:	a809      	add	r0, sp, #36	; 0x24
 800c232:	d13b      	bne.n	800c2ac <_printf_float+0x13c>
 800c234:	2106      	movs	r1, #6
 800c236:	6061      	str	r1, [r4, #4]
 800c238:	f04f 0c00 	mov.w	ip, #0
 800c23c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c240:	e9cd 0900 	strd	r0, r9, [sp]
 800c244:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c248:	6022      	str	r2, [r4, #0]
 800c24a:	6861      	ldr	r1, [r4, #4]
 800c24c:	4628      	mov	r0, r5
 800c24e:	f7ff ff09 	bl	800c064 <__cvt>
 800c252:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800c256:	2b47      	cmp	r3, #71	; 0x47
 800c258:	4680      	mov	r8, r0
 800c25a:	d109      	bne.n	800c270 <_printf_float+0x100>
 800c25c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25e:	1cd8      	adds	r0, r3, #3
 800c260:	db02      	blt.n	800c268 <_printf_float+0xf8>
 800c262:	6862      	ldr	r2, [r4, #4]
 800c264:	4293      	cmp	r3, r2
 800c266:	dd47      	ble.n	800c2f8 <_printf_float+0x188>
 800c268:	f1a9 0902 	sub.w	r9, r9, #2
 800c26c:	fa5f f989 	uxtb.w	r9, r9
 800c270:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c274:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c276:	d824      	bhi.n	800c2c2 <_printf_float+0x152>
 800c278:	3901      	subs	r1, #1
 800c27a:	464a      	mov	r2, r9
 800c27c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c280:	9109      	str	r1, [sp, #36]	; 0x24
 800c282:	f7ff ff41 	bl	800c108 <__exponent>
 800c286:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c288:	1813      	adds	r3, r2, r0
 800c28a:	2a01      	cmp	r2, #1
 800c28c:	4682      	mov	sl, r0
 800c28e:	6123      	str	r3, [r4, #16]
 800c290:	dc02      	bgt.n	800c298 <_printf_float+0x128>
 800c292:	6822      	ldr	r2, [r4, #0]
 800c294:	07d1      	lsls	r1, r2, #31
 800c296:	d501      	bpl.n	800c29c <_printf_float+0x12c>
 800c298:	3301      	adds	r3, #1
 800c29a:	6123      	str	r3, [r4, #16]
 800c29c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d0a9      	beq.n	800c1f8 <_printf_float+0x88>
 800c2a4:	232d      	movs	r3, #45	; 0x2d
 800c2a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2aa:	e7a5      	b.n	800c1f8 <_printf_float+0x88>
 800c2ac:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800c2b0:	f000 8178 	beq.w	800c5a4 <_printf_float+0x434>
 800c2b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c2b8:	d1be      	bne.n	800c238 <_printf_float+0xc8>
 800c2ba:	2900      	cmp	r1, #0
 800c2bc:	d1bc      	bne.n	800c238 <_printf_float+0xc8>
 800c2be:	2101      	movs	r1, #1
 800c2c0:	e7b9      	b.n	800c236 <_printf_float+0xc6>
 800c2c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c2c6:	d119      	bne.n	800c2fc <_printf_float+0x18c>
 800c2c8:	2900      	cmp	r1, #0
 800c2ca:	6863      	ldr	r3, [r4, #4]
 800c2cc:	dd0c      	ble.n	800c2e8 <_printf_float+0x178>
 800c2ce:	6121      	str	r1, [r4, #16]
 800c2d0:	b913      	cbnz	r3, 800c2d8 <_printf_float+0x168>
 800c2d2:	6822      	ldr	r2, [r4, #0]
 800c2d4:	07d2      	lsls	r2, r2, #31
 800c2d6:	d502      	bpl.n	800c2de <_printf_float+0x16e>
 800c2d8:	3301      	adds	r3, #1
 800c2da:	440b      	add	r3, r1
 800c2dc:	6123      	str	r3, [r4, #16]
 800c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e0:	65a3      	str	r3, [r4, #88]	; 0x58
 800c2e2:	f04f 0a00 	mov.w	sl, #0
 800c2e6:	e7d9      	b.n	800c29c <_printf_float+0x12c>
 800c2e8:	b913      	cbnz	r3, 800c2f0 <_printf_float+0x180>
 800c2ea:	6822      	ldr	r2, [r4, #0]
 800c2ec:	07d0      	lsls	r0, r2, #31
 800c2ee:	d501      	bpl.n	800c2f4 <_printf_float+0x184>
 800c2f0:	3302      	adds	r3, #2
 800c2f2:	e7f3      	b.n	800c2dc <_printf_float+0x16c>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	e7f1      	b.n	800c2dc <_printf_float+0x16c>
 800c2f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c2fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c300:	4293      	cmp	r3, r2
 800c302:	db05      	blt.n	800c310 <_printf_float+0x1a0>
 800c304:	6822      	ldr	r2, [r4, #0]
 800c306:	6123      	str	r3, [r4, #16]
 800c308:	07d1      	lsls	r1, r2, #31
 800c30a:	d5e8      	bpl.n	800c2de <_printf_float+0x16e>
 800c30c:	3301      	adds	r3, #1
 800c30e:	e7e5      	b.n	800c2dc <_printf_float+0x16c>
 800c310:	2b00      	cmp	r3, #0
 800c312:	bfd4      	ite	le
 800c314:	f1c3 0302 	rsble	r3, r3, #2
 800c318:	2301      	movgt	r3, #1
 800c31a:	4413      	add	r3, r2
 800c31c:	e7de      	b.n	800c2dc <_printf_float+0x16c>
 800c31e:	6823      	ldr	r3, [r4, #0]
 800c320:	055a      	lsls	r2, r3, #21
 800c322:	d407      	bmi.n	800c334 <_printf_float+0x1c4>
 800c324:	6923      	ldr	r3, [r4, #16]
 800c326:	4642      	mov	r2, r8
 800c328:	4631      	mov	r1, r6
 800c32a:	4628      	mov	r0, r5
 800c32c:	47b8      	blx	r7
 800c32e:	3001      	adds	r0, #1
 800c330:	d12a      	bne.n	800c388 <_printf_float+0x218>
 800c332:	e76b      	b.n	800c20c <_printf_float+0x9c>
 800c334:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c338:	f240 80de 	bls.w	800c4f8 <_printf_float+0x388>
 800c33c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c340:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c348:	d133      	bne.n	800c3b2 <_printf_float+0x242>
 800c34a:	2301      	movs	r3, #1
 800c34c:	4a42      	ldr	r2, [pc, #264]	; (800c458 <_printf_float+0x2e8>)
 800c34e:	4631      	mov	r1, r6
 800c350:	4628      	mov	r0, r5
 800c352:	47b8      	blx	r7
 800c354:	3001      	adds	r0, #1
 800c356:	f43f af59 	beq.w	800c20c <_printf_float+0x9c>
 800c35a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c35e:	429a      	cmp	r2, r3
 800c360:	db02      	blt.n	800c368 <_printf_float+0x1f8>
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	07d8      	lsls	r0, r3, #31
 800c366:	d50f      	bpl.n	800c388 <_printf_float+0x218>
 800c368:	9b05      	ldr	r3, [sp, #20]
 800c36a:	465a      	mov	r2, fp
 800c36c:	4631      	mov	r1, r6
 800c36e:	4628      	mov	r0, r5
 800c370:	47b8      	blx	r7
 800c372:	3001      	adds	r0, #1
 800c374:	f43f af4a 	beq.w	800c20c <_printf_float+0x9c>
 800c378:	f04f 0800 	mov.w	r8, #0
 800c37c:	f104 091a 	add.w	r9, r4, #26
 800c380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c382:	3b01      	subs	r3, #1
 800c384:	4543      	cmp	r3, r8
 800c386:	dc09      	bgt.n	800c39c <_printf_float+0x22c>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	079b      	lsls	r3, r3, #30
 800c38c:	f100 8105 	bmi.w	800c59a <_printf_float+0x42a>
 800c390:	68e0      	ldr	r0, [r4, #12]
 800c392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c394:	4298      	cmp	r0, r3
 800c396:	bfb8      	it	lt
 800c398:	4618      	movlt	r0, r3
 800c39a:	e739      	b.n	800c210 <_printf_float+0xa0>
 800c39c:	2301      	movs	r3, #1
 800c39e:	464a      	mov	r2, r9
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	47b8      	blx	r7
 800c3a6:	3001      	adds	r0, #1
 800c3a8:	f43f af30 	beq.w	800c20c <_printf_float+0x9c>
 800c3ac:	f108 0801 	add.w	r8, r8, #1
 800c3b0:	e7e6      	b.n	800c380 <_printf_float+0x210>
 800c3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dc2b      	bgt.n	800c410 <_printf_float+0x2a0>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	4a27      	ldr	r2, [pc, #156]	; (800c458 <_printf_float+0x2e8>)
 800c3bc:	4631      	mov	r1, r6
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b8      	blx	r7
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	f43f af22 	beq.w	800c20c <_printf_float+0x9c>
 800c3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ca:	b923      	cbnz	r3, 800c3d6 <_printf_float+0x266>
 800c3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ce:	b913      	cbnz	r3, 800c3d6 <_printf_float+0x266>
 800c3d0:	6823      	ldr	r3, [r4, #0]
 800c3d2:	07d9      	lsls	r1, r3, #31
 800c3d4:	d5d8      	bpl.n	800c388 <_printf_float+0x218>
 800c3d6:	9b05      	ldr	r3, [sp, #20]
 800c3d8:	465a      	mov	r2, fp
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b8      	blx	r7
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f43f af13 	beq.w	800c20c <_printf_float+0x9c>
 800c3e6:	f04f 0900 	mov.w	r9, #0
 800c3ea:	f104 0a1a 	add.w	sl, r4, #26
 800c3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f0:	425b      	negs	r3, r3
 800c3f2:	454b      	cmp	r3, r9
 800c3f4:	dc01      	bgt.n	800c3fa <_printf_float+0x28a>
 800c3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3f8:	e795      	b.n	800c326 <_printf_float+0x1b6>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4652      	mov	r2, sl
 800c3fe:	4631      	mov	r1, r6
 800c400:	4628      	mov	r0, r5
 800c402:	47b8      	blx	r7
 800c404:	3001      	adds	r0, #1
 800c406:	f43f af01 	beq.w	800c20c <_printf_float+0x9c>
 800c40a:	f109 0901 	add.w	r9, r9, #1
 800c40e:	e7ee      	b.n	800c3ee <_printf_float+0x27e>
 800c410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c414:	429a      	cmp	r2, r3
 800c416:	bfa8      	it	ge
 800c418:	461a      	movge	r2, r3
 800c41a:	2a00      	cmp	r2, #0
 800c41c:	4691      	mov	r9, r2
 800c41e:	dd07      	ble.n	800c430 <_printf_float+0x2c0>
 800c420:	4613      	mov	r3, r2
 800c422:	4631      	mov	r1, r6
 800c424:	4642      	mov	r2, r8
 800c426:	4628      	mov	r0, r5
 800c428:	47b8      	blx	r7
 800c42a:	3001      	adds	r0, #1
 800c42c:	f43f aeee 	beq.w	800c20c <_printf_float+0x9c>
 800c430:	f104 031a 	add.w	r3, r4, #26
 800c434:	f04f 0a00 	mov.w	sl, #0
 800c438:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c43c:	9307      	str	r3, [sp, #28]
 800c43e:	e017      	b.n	800c470 <_printf_float+0x300>
 800c440:	ffffffff 	.word	0xffffffff
 800c444:	7fefffff 	.word	0x7fefffff
 800c448:	0800fb16 	.word	0x0800fb16
 800c44c:	0800fb12 	.word	0x0800fb12
 800c450:	0800fb1e 	.word	0x0800fb1e
 800c454:	0800fb1a 	.word	0x0800fb1a
 800c458:	0800fb22 	.word	0x0800fb22
 800c45c:	2301      	movs	r3, #1
 800c45e:	9a07      	ldr	r2, [sp, #28]
 800c460:	4631      	mov	r1, r6
 800c462:	4628      	mov	r0, r5
 800c464:	47b8      	blx	r7
 800c466:	3001      	adds	r0, #1
 800c468:	f43f aed0 	beq.w	800c20c <_printf_float+0x9c>
 800c46c:	f10a 0a01 	add.w	sl, sl, #1
 800c470:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c472:	9306      	str	r3, [sp, #24]
 800c474:	eba3 0309 	sub.w	r3, r3, r9
 800c478:	4553      	cmp	r3, sl
 800c47a:	dcef      	bgt.n	800c45c <_printf_float+0x2ec>
 800c47c:	9b06      	ldr	r3, [sp, #24]
 800c47e:	4498      	add	r8, r3
 800c480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c484:	429a      	cmp	r2, r3
 800c486:	db15      	blt.n	800c4b4 <_printf_float+0x344>
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	07da      	lsls	r2, r3, #31
 800c48c:	d412      	bmi.n	800c4b4 <_printf_float+0x344>
 800c48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c490:	9a06      	ldr	r2, [sp, #24]
 800c492:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c494:	1a9a      	subs	r2, r3, r2
 800c496:	eba3 0a01 	sub.w	sl, r3, r1
 800c49a:	4592      	cmp	sl, r2
 800c49c:	bfa8      	it	ge
 800c49e:	4692      	movge	sl, r2
 800c4a0:	f1ba 0f00 	cmp.w	sl, #0
 800c4a4:	dc0e      	bgt.n	800c4c4 <_printf_float+0x354>
 800c4a6:	f04f 0800 	mov.w	r8, #0
 800c4aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4ae:	f104 091a 	add.w	r9, r4, #26
 800c4b2:	e019      	b.n	800c4e8 <_printf_float+0x378>
 800c4b4:	9b05      	ldr	r3, [sp, #20]
 800c4b6:	465a      	mov	r2, fp
 800c4b8:	4631      	mov	r1, r6
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	47b8      	blx	r7
 800c4be:	3001      	adds	r0, #1
 800c4c0:	d1e5      	bne.n	800c48e <_printf_float+0x31e>
 800c4c2:	e6a3      	b.n	800c20c <_printf_float+0x9c>
 800c4c4:	4653      	mov	r3, sl
 800c4c6:	4642      	mov	r2, r8
 800c4c8:	4631      	mov	r1, r6
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	47b8      	blx	r7
 800c4ce:	3001      	adds	r0, #1
 800c4d0:	d1e9      	bne.n	800c4a6 <_printf_float+0x336>
 800c4d2:	e69b      	b.n	800c20c <_printf_float+0x9c>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	464a      	mov	r2, r9
 800c4d8:	4631      	mov	r1, r6
 800c4da:	4628      	mov	r0, r5
 800c4dc:	47b8      	blx	r7
 800c4de:	3001      	adds	r0, #1
 800c4e0:	f43f ae94 	beq.w	800c20c <_printf_float+0x9c>
 800c4e4:	f108 0801 	add.w	r8, r8, #1
 800c4e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	eba3 030a 	sub.w	r3, r3, sl
 800c4f2:	4543      	cmp	r3, r8
 800c4f4:	dcee      	bgt.n	800c4d4 <_printf_float+0x364>
 800c4f6:	e747      	b.n	800c388 <_printf_float+0x218>
 800c4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4fa:	2a01      	cmp	r2, #1
 800c4fc:	dc01      	bgt.n	800c502 <_printf_float+0x392>
 800c4fe:	07db      	lsls	r3, r3, #31
 800c500:	d539      	bpl.n	800c576 <_printf_float+0x406>
 800c502:	2301      	movs	r3, #1
 800c504:	4642      	mov	r2, r8
 800c506:	4631      	mov	r1, r6
 800c508:	4628      	mov	r0, r5
 800c50a:	47b8      	blx	r7
 800c50c:	3001      	adds	r0, #1
 800c50e:	f43f ae7d 	beq.w	800c20c <_printf_float+0x9c>
 800c512:	9b05      	ldr	r3, [sp, #20]
 800c514:	465a      	mov	r2, fp
 800c516:	4631      	mov	r1, r6
 800c518:	4628      	mov	r0, r5
 800c51a:	47b8      	blx	r7
 800c51c:	3001      	adds	r0, #1
 800c51e:	f108 0801 	add.w	r8, r8, #1
 800c522:	f43f ae73 	beq.w	800c20c <_printf_float+0x9c>
 800c526:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c52a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c52c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c534:	f103 33ff 	add.w	r3, r3, #4294967295
 800c538:	d018      	beq.n	800c56c <_printf_float+0x3fc>
 800c53a:	4642      	mov	r2, r8
 800c53c:	4631      	mov	r1, r6
 800c53e:	4628      	mov	r0, r5
 800c540:	47b8      	blx	r7
 800c542:	3001      	adds	r0, #1
 800c544:	d10e      	bne.n	800c564 <_printf_float+0x3f4>
 800c546:	e661      	b.n	800c20c <_printf_float+0x9c>
 800c548:	2301      	movs	r3, #1
 800c54a:	464a      	mov	r2, r9
 800c54c:	4631      	mov	r1, r6
 800c54e:	4628      	mov	r0, r5
 800c550:	47b8      	blx	r7
 800c552:	3001      	adds	r0, #1
 800c554:	f43f ae5a 	beq.w	800c20c <_printf_float+0x9c>
 800c558:	f108 0801 	add.w	r8, r8, #1
 800c55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c55e:	3b01      	subs	r3, #1
 800c560:	4543      	cmp	r3, r8
 800c562:	dcf1      	bgt.n	800c548 <_printf_float+0x3d8>
 800c564:	4653      	mov	r3, sl
 800c566:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c56a:	e6dd      	b.n	800c328 <_printf_float+0x1b8>
 800c56c:	f04f 0800 	mov.w	r8, #0
 800c570:	f104 091a 	add.w	r9, r4, #26
 800c574:	e7f2      	b.n	800c55c <_printf_float+0x3ec>
 800c576:	2301      	movs	r3, #1
 800c578:	e7df      	b.n	800c53a <_printf_float+0x3ca>
 800c57a:	2301      	movs	r3, #1
 800c57c:	464a      	mov	r2, r9
 800c57e:	4631      	mov	r1, r6
 800c580:	4628      	mov	r0, r5
 800c582:	47b8      	blx	r7
 800c584:	3001      	adds	r0, #1
 800c586:	f43f ae41 	beq.w	800c20c <_printf_float+0x9c>
 800c58a:	f108 0801 	add.w	r8, r8, #1
 800c58e:	68e3      	ldr	r3, [r4, #12]
 800c590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c592:	1a9b      	subs	r3, r3, r2
 800c594:	4543      	cmp	r3, r8
 800c596:	dcf0      	bgt.n	800c57a <_printf_float+0x40a>
 800c598:	e6fa      	b.n	800c390 <_printf_float+0x220>
 800c59a:	f04f 0800 	mov.w	r8, #0
 800c59e:	f104 0919 	add.w	r9, r4, #25
 800c5a2:	e7f4      	b.n	800c58e <_printf_float+0x41e>
 800c5a4:	2900      	cmp	r1, #0
 800c5a6:	f43f ae8a 	beq.w	800c2be <_printf_float+0x14e>
 800c5aa:	f04f 0c00 	mov.w	ip, #0
 800c5ae:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800c5b2:	e9cd 0900 	strd	r0, r9, [sp]
 800c5b6:	6022      	str	r2, [r4, #0]
 800c5b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f7ff fd51 	bl	800c064 <__cvt>
 800c5c2:	4680      	mov	r8, r0
 800c5c4:	e64a      	b.n	800c25c <_printf_float+0xec>
 800c5c6:	bf00      	nop

0800c5c8 <_printf_common>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	4691      	mov	r9, r2
 800c5ce:	461f      	mov	r7, r3
 800c5d0:	688a      	ldr	r2, [r1, #8]
 800c5d2:	690b      	ldr	r3, [r1, #16]
 800c5d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	bfb8      	it	lt
 800c5dc:	4613      	movlt	r3, r2
 800c5de:	f8c9 3000 	str.w	r3, [r9]
 800c5e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	b112      	cbz	r2, 800c5f2 <_printf_common+0x2a>
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	f8c9 3000 	str.w	r3, [r9]
 800c5f2:	6823      	ldr	r3, [r4, #0]
 800c5f4:	0699      	lsls	r1, r3, #26
 800c5f6:	bf42      	ittt	mi
 800c5f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c5fc:	3302      	addmi	r3, #2
 800c5fe:	f8c9 3000 	strmi.w	r3, [r9]
 800c602:	6825      	ldr	r5, [r4, #0]
 800c604:	f015 0506 	ands.w	r5, r5, #6
 800c608:	d107      	bne.n	800c61a <_printf_common+0x52>
 800c60a:	f104 0a19 	add.w	sl, r4, #25
 800c60e:	68e3      	ldr	r3, [r4, #12]
 800c610:	f8d9 2000 	ldr.w	r2, [r9]
 800c614:	1a9b      	subs	r3, r3, r2
 800c616:	42ab      	cmp	r3, r5
 800c618:	dc28      	bgt.n	800c66c <_printf_common+0xa4>
 800c61a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c61e:	6822      	ldr	r2, [r4, #0]
 800c620:	3300      	adds	r3, #0
 800c622:	bf18      	it	ne
 800c624:	2301      	movne	r3, #1
 800c626:	0692      	lsls	r2, r2, #26
 800c628:	d42d      	bmi.n	800c686 <_printf_common+0xbe>
 800c62a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c62e:	4639      	mov	r1, r7
 800c630:	4630      	mov	r0, r6
 800c632:	47c0      	blx	r8
 800c634:	3001      	adds	r0, #1
 800c636:	d020      	beq.n	800c67a <_printf_common+0xb2>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	68e5      	ldr	r5, [r4, #12]
 800c63c:	f8d9 2000 	ldr.w	r2, [r9]
 800c640:	f003 0306 	and.w	r3, r3, #6
 800c644:	2b04      	cmp	r3, #4
 800c646:	bf08      	it	eq
 800c648:	1aad      	subeq	r5, r5, r2
 800c64a:	68a3      	ldr	r3, [r4, #8]
 800c64c:	6922      	ldr	r2, [r4, #16]
 800c64e:	bf0c      	ite	eq
 800c650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c654:	2500      	movne	r5, #0
 800c656:	4293      	cmp	r3, r2
 800c658:	bfc4      	itt	gt
 800c65a:	1a9b      	subgt	r3, r3, r2
 800c65c:	18ed      	addgt	r5, r5, r3
 800c65e:	f04f 0900 	mov.w	r9, #0
 800c662:	341a      	adds	r4, #26
 800c664:	454d      	cmp	r5, r9
 800c666:	d11a      	bne.n	800c69e <_printf_common+0xd6>
 800c668:	2000      	movs	r0, #0
 800c66a:	e008      	b.n	800c67e <_printf_common+0xb6>
 800c66c:	2301      	movs	r3, #1
 800c66e:	4652      	mov	r2, sl
 800c670:	4639      	mov	r1, r7
 800c672:	4630      	mov	r0, r6
 800c674:	47c0      	blx	r8
 800c676:	3001      	adds	r0, #1
 800c678:	d103      	bne.n	800c682 <_printf_common+0xba>
 800c67a:	f04f 30ff 	mov.w	r0, #4294967295
 800c67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c682:	3501      	adds	r5, #1
 800c684:	e7c3      	b.n	800c60e <_printf_common+0x46>
 800c686:	18e1      	adds	r1, r4, r3
 800c688:	1c5a      	adds	r2, r3, #1
 800c68a:	2030      	movs	r0, #48	; 0x30
 800c68c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c690:	4422      	add	r2, r4
 800c692:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c696:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c69a:	3302      	adds	r3, #2
 800c69c:	e7c5      	b.n	800c62a <_printf_common+0x62>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	4622      	mov	r2, r4
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	47c0      	blx	r8
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	d0e6      	beq.n	800c67a <_printf_common+0xb2>
 800c6ac:	f109 0901 	add.w	r9, r9, #1
 800c6b0:	e7d8      	b.n	800c664 <_printf_common+0x9c>
	...

0800c6b4 <_printf_i>:
 800c6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c6bc:	460c      	mov	r4, r1
 800c6be:	7e09      	ldrb	r1, [r1, #24]
 800c6c0:	b085      	sub	sp, #20
 800c6c2:	296e      	cmp	r1, #110	; 0x6e
 800c6c4:	4617      	mov	r7, r2
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	4698      	mov	r8, r3
 800c6ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6cc:	f000 80b3 	beq.w	800c836 <_printf_i+0x182>
 800c6d0:	d822      	bhi.n	800c718 <_printf_i+0x64>
 800c6d2:	2963      	cmp	r1, #99	; 0x63
 800c6d4:	d036      	beq.n	800c744 <_printf_i+0x90>
 800c6d6:	d80a      	bhi.n	800c6ee <_printf_i+0x3a>
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	f000 80b9 	beq.w	800c850 <_printf_i+0x19c>
 800c6de:	2958      	cmp	r1, #88	; 0x58
 800c6e0:	f000 8083 	beq.w	800c7ea <_printf_i+0x136>
 800c6e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c6ec:	e032      	b.n	800c754 <_printf_i+0xa0>
 800c6ee:	2964      	cmp	r1, #100	; 0x64
 800c6f0:	d001      	beq.n	800c6f6 <_printf_i+0x42>
 800c6f2:	2969      	cmp	r1, #105	; 0x69
 800c6f4:	d1f6      	bne.n	800c6e4 <_printf_i+0x30>
 800c6f6:	6820      	ldr	r0, [r4, #0]
 800c6f8:	6813      	ldr	r3, [r2, #0]
 800c6fa:	0605      	lsls	r5, r0, #24
 800c6fc:	f103 0104 	add.w	r1, r3, #4
 800c700:	d52a      	bpl.n	800c758 <_printf_i+0xa4>
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	6011      	str	r1, [r2, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	da03      	bge.n	800c712 <_printf_i+0x5e>
 800c70a:	222d      	movs	r2, #45	; 0x2d
 800c70c:	425b      	negs	r3, r3
 800c70e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c712:	486f      	ldr	r0, [pc, #444]	; (800c8d0 <_printf_i+0x21c>)
 800c714:	220a      	movs	r2, #10
 800c716:	e039      	b.n	800c78c <_printf_i+0xd8>
 800c718:	2973      	cmp	r1, #115	; 0x73
 800c71a:	f000 809d 	beq.w	800c858 <_printf_i+0x1a4>
 800c71e:	d808      	bhi.n	800c732 <_printf_i+0x7e>
 800c720:	296f      	cmp	r1, #111	; 0x6f
 800c722:	d020      	beq.n	800c766 <_printf_i+0xb2>
 800c724:	2970      	cmp	r1, #112	; 0x70
 800c726:	d1dd      	bne.n	800c6e4 <_printf_i+0x30>
 800c728:	6823      	ldr	r3, [r4, #0]
 800c72a:	f043 0320 	orr.w	r3, r3, #32
 800c72e:	6023      	str	r3, [r4, #0]
 800c730:	e003      	b.n	800c73a <_printf_i+0x86>
 800c732:	2975      	cmp	r1, #117	; 0x75
 800c734:	d017      	beq.n	800c766 <_printf_i+0xb2>
 800c736:	2978      	cmp	r1, #120	; 0x78
 800c738:	d1d4      	bne.n	800c6e4 <_printf_i+0x30>
 800c73a:	2378      	movs	r3, #120	; 0x78
 800c73c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c740:	4864      	ldr	r0, [pc, #400]	; (800c8d4 <_printf_i+0x220>)
 800c742:	e055      	b.n	800c7f0 <_printf_i+0x13c>
 800c744:	6813      	ldr	r3, [r2, #0]
 800c746:	1d19      	adds	r1, r3, #4
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	6011      	str	r1, [r2, #0]
 800c74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c754:	2301      	movs	r3, #1
 800c756:	e08c      	b.n	800c872 <_printf_i+0x1be>
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	6011      	str	r1, [r2, #0]
 800c75c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c760:	bf18      	it	ne
 800c762:	b21b      	sxthne	r3, r3
 800c764:	e7cf      	b.n	800c706 <_printf_i+0x52>
 800c766:	6813      	ldr	r3, [r2, #0]
 800c768:	6825      	ldr	r5, [r4, #0]
 800c76a:	1d18      	adds	r0, r3, #4
 800c76c:	6010      	str	r0, [r2, #0]
 800c76e:	0628      	lsls	r0, r5, #24
 800c770:	d501      	bpl.n	800c776 <_printf_i+0xc2>
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	e002      	b.n	800c77c <_printf_i+0xc8>
 800c776:	0668      	lsls	r0, r5, #25
 800c778:	d5fb      	bpl.n	800c772 <_printf_i+0xbe>
 800c77a:	881b      	ldrh	r3, [r3, #0]
 800c77c:	4854      	ldr	r0, [pc, #336]	; (800c8d0 <_printf_i+0x21c>)
 800c77e:	296f      	cmp	r1, #111	; 0x6f
 800c780:	bf14      	ite	ne
 800c782:	220a      	movne	r2, #10
 800c784:	2208      	moveq	r2, #8
 800c786:	2100      	movs	r1, #0
 800c788:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c78c:	6865      	ldr	r5, [r4, #4]
 800c78e:	60a5      	str	r5, [r4, #8]
 800c790:	2d00      	cmp	r5, #0
 800c792:	f2c0 8095 	blt.w	800c8c0 <_printf_i+0x20c>
 800c796:	6821      	ldr	r1, [r4, #0]
 800c798:	f021 0104 	bic.w	r1, r1, #4
 800c79c:	6021      	str	r1, [r4, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d13d      	bne.n	800c81e <_printf_i+0x16a>
 800c7a2:	2d00      	cmp	r5, #0
 800c7a4:	f040 808e 	bne.w	800c8c4 <_printf_i+0x210>
 800c7a8:	4665      	mov	r5, ip
 800c7aa:	2a08      	cmp	r2, #8
 800c7ac:	d10b      	bne.n	800c7c6 <_printf_i+0x112>
 800c7ae:	6823      	ldr	r3, [r4, #0]
 800c7b0:	07db      	lsls	r3, r3, #31
 800c7b2:	d508      	bpl.n	800c7c6 <_printf_i+0x112>
 800c7b4:	6923      	ldr	r3, [r4, #16]
 800c7b6:	6862      	ldr	r2, [r4, #4]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	bfde      	ittt	le
 800c7bc:	2330      	movle	r3, #48	; 0x30
 800c7be:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7c6:	ebac 0305 	sub.w	r3, ip, r5
 800c7ca:	6123      	str	r3, [r4, #16]
 800c7cc:	f8cd 8000 	str.w	r8, [sp]
 800c7d0:	463b      	mov	r3, r7
 800c7d2:	aa03      	add	r2, sp, #12
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f7ff fef6 	bl	800c5c8 <_printf_common>
 800c7dc:	3001      	adds	r0, #1
 800c7de:	d14d      	bne.n	800c87c <_printf_i+0x1c8>
 800c7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e4:	b005      	add	sp, #20
 800c7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7ea:	4839      	ldr	r0, [pc, #228]	; (800c8d0 <_printf_i+0x21c>)
 800c7ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c7f0:	6813      	ldr	r3, [r2, #0]
 800c7f2:	6821      	ldr	r1, [r4, #0]
 800c7f4:	1d1d      	adds	r5, r3, #4
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6015      	str	r5, [r2, #0]
 800c7fa:	060a      	lsls	r2, r1, #24
 800c7fc:	d50b      	bpl.n	800c816 <_printf_i+0x162>
 800c7fe:	07ca      	lsls	r2, r1, #31
 800c800:	bf44      	itt	mi
 800c802:	f041 0120 	orrmi.w	r1, r1, #32
 800c806:	6021      	strmi	r1, [r4, #0]
 800c808:	b91b      	cbnz	r3, 800c812 <_printf_i+0x15e>
 800c80a:	6822      	ldr	r2, [r4, #0]
 800c80c:	f022 0220 	bic.w	r2, r2, #32
 800c810:	6022      	str	r2, [r4, #0]
 800c812:	2210      	movs	r2, #16
 800c814:	e7b7      	b.n	800c786 <_printf_i+0xd2>
 800c816:	064d      	lsls	r5, r1, #25
 800c818:	bf48      	it	mi
 800c81a:	b29b      	uxthmi	r3, r3
 800c81c:	e7ef      	b.n	800c7fe <_printf_i+0x14a>
 800c81e:	4665      	mov	r5, ip
 800c820:	fbb3 f1f2 	udiv	r1, r3, r2
 800c824:	fb02 3311 	mls	r3, r2, r1, r3
 800c828:	5cc3      	ldrb	r3, [r0, r3]
 800c82a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c82e:	460b      	mov	r3, r1
 800c830:	2900      	cmp	r1, #0
 800c832:	d1f5      	bne.n	800c820 <_printf_i+0x16c>
 800c834:	e7b9      	b.n	800c7aa <_printf_i+0xf6>
 800c836:	6813      	ldr	r3, [r2, #0]
 800c838:	6825      	ldr	r5, [r4, #0]
 800c83a:	6961      	ldr	r1, [r4, #20]
 800c83c:	1d18      	adds	r0, r3, #4
 800c83e:	6010      	str	r0, [r2, #0]
 800c840:	0628      	lsls	r0, r5, #24
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	d501      	bpl.n	800c84a <_printf_i+0x196>
 800c846:	6019      	str	r1, [r3, #0]
 800c848:	e002      	b.n	800c850 <_printf_i+0x19c>
 800c84a:	066a      	lsls	r2, r5, #25
 800c84c:	d5fb      	bpl.n	800c846 <_printf_i+0x192>
 800c84e:	8019      	strh	r1, [r3, #0]
 800c850:	2300      	movs	r3, #0
 800c852:	6123      	str	r3, [r4, #16]
 800c854:	4665      	mov	r5, ip
 800c856:	e7b9      	b.n	800c7cc <_printf_i+0x118>
 800c858:	6813      	ldr	r3, [r2, #0]
 800c85a:	1d19      	adds	r1, r3, #4
 800c85c:	6011      	str	r1, [r2, #0]
 800c85e:	681d      	ldr	r5, [r3, #0]
 800c860:	6862      	ldr	r2, [r4, #4]
 800c862:	2100      	movs	r1, #0
 800c864:	4628      	mov	r0, r5
 800c866:	f7f3 fcf3 	bl	8000250 <memchr>
 800c86a:	b108      	cbz	r0, 800c870 <_printf_i+0x1bc>
 800c86c:	1b40      	subs	r0, r0, r5
 800c86e:	6060      	str	r0, [r4, #4]
 800c870:	6863      	ldr	r3, [r4, #4]
 800c872:	6123      	str	r3, [r4, #16]
 800c874:	2300      	movs	r3, #0
 800c876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c87a:	e7a7      	b.n	800c7cc <_printf_i+0x118>
 800c87c:	6923      	ldr	r3, [r4, #16]
 800c87e:	462a      	mov	r2, r5
 800c880:	4639      	mov	r1, r7
 800c882:	4630      	mov	r0, r6
 800c884:	47c0      	blx	r8
 800c886:	3001      	adds	r0, #1
 800c888:	d0aa      	beq.n	800c7e0 <_printf_i+0x12c>
 800c88a:	6823      	ldr	r3, [r4, #0]
 800c88c:	079b      	lsls	r3, r3, #30
 800c88e:	d413      	bmi.n	800c8b8 <_printf_i+0x204>
 800c890:	68e0      	ldr	r0, [r4, #12]
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	4298      	cmp	r0, r3
 800c896:	bfb8      	it	lt
 800c898:	4618      	movlt	r0, r3
 800c89a:	e7a3      	b.n	800c7e4 <_printf_i+0x130>
 800c89c:	2301      	movs	r3, #1
 800c89e:	464a      	mov	r2, r9
 800c8a0:	4639      	mov	r1, r7
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	47c0      	blx	r8
 800c8a6:	3001      	adds	r0, #1
 800c8a8:	d09a      	beq.n	800c7e0 <_printf_i+0x12c>
 800c8aa:	3501      	adds	r5, #1
 800c8ac:	68e3      	ldr	r3, [r4, #12]
 800c8ae:	9a03      	ldr	r2, [sp, #12]
 800c8b0:	1a9b      	subs	r3, r3, r2
 800c8b2:	42ab      	cmp	r3, r5
 800c8b4:	dcf2      	bgt.n	800c89c <_printf_i+0x1e8>
 800c8b6:	e7eb      	b.n	800c890 <_printf_i+0x1dc>
 800c8b8:	2500      	movs	r5, #0
 800c8ba:	f104 0919 	add.w	r9, r4, #25
 800c8be:	e7f5      	b.n	800c8ac <_printf_i+0x1f8>
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d1ac      	bne.n	800c81e <_printf_i+0x16a>
 800c8c4:	7803      	ldrb	r3, [r0, #0]
 800c8c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8ce:	e76c      	b.n	800c7aa <_printf_i+0xf6>
 800c8d0:	0800fb24 	.word	0x0800fb24
 800c8d4:	0800fb35 	.word	0x0800fb35

0800c8d8 <_scanf_float>:
 800c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	469a      	mov	sl, r3
 800c8de:	688b      	ldr	r3, [r1, #8]
 800c8e0:	4616      	mov	r6, r2
 800c8e2:	1e5a      	subs	r2, r3, #1
 800c8e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c8e8:	b087      	sub	sp, #28
 800c8ea:	bf83      	ittte	hi
 800c8ec:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c8f0:	189b      	addhi	r3, r3, r2
 800c8f2:	9301      	strhi	r3, [sp, #4]
 800c8f4:	2300      	movls	r3, #0
 800c8f6:	bf86      	itte	hi
 800c8f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c8fc:	608b      	strhi	r3, [r1, #8]
 800c8fe:	9301      	strls	r3, [sp, #4]
 800c900:	680b      	ldr	r3, [r1, #0]
 800c902:	4688      	mov	r8, r1
 800c904:	f04f 0b00 	mov.w	fp, #0
 800c908:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c90c:	f848 3b1c 	str.w	r3, [r8], #28
 800c910:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c914:	4607      	mov	r7, r0
 800c916:	460c      	mov	r4, r1
 800c918:	4645      	mov	r5, r8
 800c91a:	465a      	mov	r2, fp
 800c91c:	46d9      	mov	r9, fp
 800c91e:	f8cd b008 	str.w	fp, [sp, #8]
 800c922:	68a1      	ldr	r1, [r4, #8]
 800c924:	b181      	cbz	r1, 800c948 <_scanf_float+0x70>
 800c926:	6833      	ldr	r3, [r6, #0]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	2b49      	cmp	r3, #73	; 0x49
 800c92c:	d071      	beq.n	800ca12 <_scanf_float+0x13a>
 800c92e:	d84d      	bhi.n	800c9cc <_scanf_float+0xf4>
 800c930:	2b39      	cmp	r3, #57	; 0x39
 800c932:	d840      	bhi.n	800c9b6 <_scanf_float+0xde>
 800c934:	2b31      	cmp	r3, #49	; 0x31
 800c936:	f080 8088 	bcs.w	800ca4a <_scanf_float+0x172>
 800c93a:	2b2d      	cmp	r3, #45	; 0x2d
 800c93c:	f000 8090 	beq.w	800ca60 <_scanf_float+0x188>
 800c940:	d815      	bhi.n	800c96e <_scanf_float+0x96>
 800c942:	2b2b      	cmp	r3, #43	; 0x2b
 800c944:	f000 808c 	beq.w	800ca60 <_scanf_float+0x188>
 800c948:	f1b9 0f00 	cmp.w	r9, #0
 800c94c:	d003      	beq.n	800c956 <_scanf_float+0x7e>
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c954:	6023      	str	r3, [r4, #0]
 800c956:	3a01      	subs	r2, #1
 800c958:	2a01      	cmp	r2, #1
 800c95a:	f200 80ea 	bhi.w	800cb32 <_scanf_float+0x25a>
 800c95e:	4545      	cmp	r5, r8
 800c960:	f200 80dc 	bhi.w	800cb1c <_scanf_float+0x244>
 800c964:	2601      	movs	r6, #1
 800c966:	4630      	mov	r0, r6
 800c968:	b007      	add	sp, #28
 800c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96e:	2b2e      	cmp	r3, #46	; 0x2e
 800c970:	f000 809f 	beq.w	800cab2 <_scanf_float+0x1da>
 800c974:	2b30      	cmp	r3, #48	; 0x30
 800c976:	d1e7      	bne.n	800c948 <_scanf_float+0x70>
 800c978:	6820      	ldr	r0, [r4, #0]
 800c97a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c97e:	d064      	beq.n	800ca4a <_scanf_float+0x172>
 800c980:	9b01      	ldr	r3, [sp, #4]
 800c982:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c986:	6020      	str	r0, [r4, #0]
 800c988:	f109 0901 	add.w	r9, r9, #1
 800c98c:	b11b      	cbz	r3, 800c996 <_scanf_float+0xbe>
 800c98e:	3b01      	subs	r3, #1
 800c990:	3101      	adds	r1, #1
 800c992:	9301      	str	r3, [sp, #4]
 800c994:	60a1      	str	r1, [r4, #8]
 800c996:	68a3      	ldr	r3, [r4, #8]
 800c998:	3b01      	subs	r3, #1
 800c99a:	60a3      	str	r3, [r4, #8]
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	6123      	str	r3, [r4, #16]
 800c9a2:	6873      	ldr	r3, [r6, #4]
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	6073      	str	r3, [r6, #4]
 800c9aa:	f340 80ac 	ble.w	800cb06 <_scanf_float+0x22e>
 800c9ae:	6833      	ldr	r3, [r6, #0]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	6033      	str	r3, [r6, #0]
 800c9b4:	e7b5      	b.n	800c922 <_scanf_float+0x4a>
 800c9b6:	2b45      	cmp	r3, #69	; 0x45
 800c9b8:	f000 8085 	beq.w	800cac6 <_scanf_float+0x1ee>
 800c9bc:	2b46      	cmp	r3, #70	; 0x46
 800c9be:	d06a      	beq.n	800ca96 <_scanf_float+0x1be>
 800c9c0:	2b41      	cmp	r3, #65	; 0x41
 800c9c2:	d1c1      	bne.n	800c948 <_scanf_float+0x70>
 800c9c4:	2a01      	cmp	r2, #1
 800c9c6:	d1bf      	bne.n	800c948 <_scanf_float+0x70>
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	e046      	b.n	800ca5a <_scanf_float+0x182>
 800c9cc:	2b65      	cmp	r3, #101	; 0x65
 800c9ce:	d07a      	beq.n	800cac6 <_scanf_float+0x1ee>
 800c9d0:	d818      	bhi.n	800ca04 <_scanf_float+0x12c>
 800c9d2:	2b54      	cmp	r3, #84	; 0x54
 800c9d4:	d066      	beq.n	800caa4 <_scanf_float+0x1cc>
 800c9d6:	d811      	bhi.n	800c9fc <_scanf_float+0x124>
 800c9d8:	2b4e      	cmp	r3, #78	; 0x4e
 800c9da:	d1b5      	bne.n	800c948 <_scanf_float+0x70>
 800c9dc:	2a00      	cmp	r2, #0
 800c9de:	d146      	bne.n	800ca6e <_scanf_float+0x196>
 800c9e0:	f1b9 0f00 	cmp.w	r9, #0
 800c9e4:	d145      	bne.n	800ca72 <_scanf_float+0x19a>
 800c9e6:	6821      	ldr	r1, [r4, #0]
 800c9e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c9ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c9f0:	d13f      	bne.n	800ca72 <_scanf_float+0x19a>
 800c9f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c9f6:	6021      	str	r1, [r4, #0]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	e02e      	b.n	800ca5a <_scanf_float+0x182>
 800c9fc:	2b59      	cmp	r3, #89	; 0x59
 800c9fe:	d01e      	beq.n	800ca3e <_scanf_float+0x166>
 800ca00:	2b61      	cmp	r3, #97	; 0x61
 800ca02:	e7de      	b.n	800c9c2 <_scanf_float+0xea>
 800ca04:	2b6e      	cmp	r3, #110	; 0x6e
 800ca06:	d0e9      	beq.n	800c9dc <_scanf_float+0x104>
 800ca08:	d815      	bhi.n	800ca36 <_scanf_float+0x15e>
 800ca0a:	2b66      	cmp	r3, #102	; 0x66
 800ca0c:	d043      	beq.n	800ca96 <_scanf_float+0x1be>
 800ca0e:	2b69      	cmp	r3, #105	; 0x69
 800ca10:	d19a      	bne.n	800c948 <_scanf_float+0x70>
 800ca12:	f1bb 0f00 	cmp.w	fp, #0
 800ca16:	d138      	bne.n	800ca8a <_scanf_float+0x1b2>
 800ca18:	f1b9 0f00 	cmp.w	r9, #0
 800ca1c:	d197      	bne.n	800c94e <_scanf_float+0x76>
 800ca1e:	6821      	ldr	r1, [r4, #0]
 800ca20:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ca24:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ca28:	d195      	bne.n	800c956 <_scanf_float+0x7e>
 800ca2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ca2e:	6021      	str	r1, [r4, #0]
 800ca30:	f04f 0b01 	mov.w	fp, #1
 800ca34:	e011      	b.n	800ca5a <_scanf_float+0x182>
 800ca36:	2b74      	cmp	r3, #116	; 0x74
 800ca38:	d034      	beq.n	800caa4 <_scanf_float+0x1cc>
 800ca3a:	2b79      	cmp	r3, #121	; 0x79
 800ca3c:	d184      	bne.n	800c948 <_scanf_float+0x70>
 800ca3e:	f1bb 0f07 	cmp.w	fp, #7
 800ca42:	d181      	bne.n	800c948 <_scanf_float+0x70>
 800ca44:	f04f 0b08 	mov.w	fp, #8
 800ca48:	e007      	b.n	800ca5a <_scanf_float+0x182>
 800ca4a:	eb12 0f0b 	cmn.w	r2, fp
 800ca4e:	f47f af7b 	bne.w	800c948 <_scanf_float+0x70>
 800ca52:	6821      	ldr	r1, [r4, #0]
 800ca54:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ca58:	6021      	str	r1, [r4, #0]
 800ca5a:	702b      	strb	r3, [r5, #0]
 800ca5c:	3501      	adds	r5, #1
 800ca5e:	e79a      	b.n	800c996 <_scanf_float+0xbe>
 800ca60:	6821      	ldr	r1, [r4, #0]
 800ca62:	0608      	lsls	r0, r1, #24
 800ca64:	f57f af70 	bpl.w	800c948 <_scanf_float+0x70>
 800ca68:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ca6c:	e7f4      	b.n	800ca58 <_scanf_float+0x180>
 800ca6e:	2a02      	cmp	r2, #2
 800ca70:	d047      	beq.n	800cb02 <_scanf_float+0x22a>
 800ca72:	f1bb 0f01 	cmp.w	fp, #1
 800ca76:	d003      	beq.n	800ca80 <_scanf_float+0x1a8>
 800ca78:	f1bb 0f04 	cmp.w	fp, #4
 800ca7c:	f47f af64 	bne.w	800c948 <_scanf_float+0x70>
 800ca80:	f10b 0b01 	add.w	fp, fp, #1
 800ca84:	fa5f fb8b 	uxtb.w	fp, fp
 800ca88:	e7e7      	b.n	800ca5a <_scanf_float+0x182>
 800ca8a:	f1bb 0f03 	cmp.w	fp, #3
 800ca8e:	d0f7      	beq.n	800ca80 <_scanf_float+0x1a8>
 800ca90:	f1bb 0f05 	cmp.w	fp, #5
 800ca94:	e7f2      	b.n	800ca7c <_scanf_float+0x1a4>
 800ca96:	f1bb 0f02 	cmp.w	fp, #2
 800ca9a:	f47f af55 	bne.w	800c948 <_scanf_float+0x70>
 800ca9e:	f04f 0b03 	mov.w	fp, #3
 800caa2:	e7da      	b.n	800ca5a <_scanf_float+0x182>
 800caa4:	f1bb 0f06 	cmp.w	fp, #6
 800caa8:	f47f af4e 	bne.w	800c948 <_scanf_float+0x70>
 800caac:	f04f 0b07 	mov.w	fp, #7
 800cab0:	e7d3      	b.n	800ca5a <_scanf_float+0x182>
 800cab2:	6821      	ldr	r1, [r4, #0]
 800cab4:	0588      	lsls	r0, r1, #22
 800cab6:	f57f af47 	bpl.w	800c948 <_scanf_float+0x70>
 800caba:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800cabe:	6021      	str	r1, [r4, #0]
 800cac0:	f8cd 9008 	str.w	r9, [sp, #8]
 800cac4:	e7c9      	b.n	800ca5a <_scanf_float+0x182>
 800cac6:	6821      	ldr	r1, [r4, #0]
 800cac8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800cacc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800cad0:	d006      	beq.n	800cae0 <_scanf_float+0x208>
 800cad2:	0548      	lsls	r0, r1, #21
 800cad4:	f57f af38 	bpl.w	800c948 <_scanf_float+0x70>
 800cad8:	f1b9 0f00 	cmp.w	r9, #0
 800cadc:	f43f af3b 	beq.w	800c956 <_scanf_float+0x7e>
 800cae0:	0588      	lsls	r0, r1, #22
 800cae2:	bf58      	it	pl
 800cae4:	9802      	ldrpl	r0, [sp, #8]
 800cae6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800caea:	bf58      	it	pl
 800caec:	eba9 0000 	subpl.w	r0, r9, r0
 800caf0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800caf4:	bf58      	it	pl
 800caf6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800cafa:	6021      	str	r1, [r4, #0]
 800cafc:	f04f 0900 	mov.w	r9, #0
 800cb00:	e7ab      	b.n	800ca5a <_scanf_float+0x182>
 800cb02:	2203      	movs	r2, #3
 800cb04:	e7a9      	b.n	800ca5a <_scanf_float+0x182>
 800cb06:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb0a:	9205      	str	r2, [sp, #20]
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4638      	mov	r0, r7
 800cb10:	4798      	blx	r3
 800cb12:	9a05      	ldr	r2, [sp, #20]
 800cb14:	2800      	cmp	r0, #0
 800cb16:	f43f af04 	beq.w	800c922 <_scanf_float+0x4a>
 800cb1a:	e715      	b.n	800c948 <_scanf_float+0x70>
 800cb1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb20:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cb24:	4632      	mov	r2, r6
 800cb26:	4638      	mov	r0, r7
 800cb28:	4798      	blx	r3
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	6123      	str	r3, [r4, #16]
 800cb30:	e715      	b.n	800c95e <_scanf_float+0x86>
 800cb32:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cb36:	2b06      	cmp	r3, #6
 800cb38:	d80a      	bhi.n	800cb50 <_scanf_float+0x278>
 800cb3a:	f1bb 0f02 	cmp.w	fp, #2
 800cb3e:	d966      	bls.n	800cc0e <_scanf_float+0x336>
 800cb40:	f1ab 0b03 	sub.w	fp, fp, #3
 800cb44:	fa5f fb8b 	uxtb.w	fp, fp
 800cb48:	eba5 0b0b 	sub.w	fp, r5, fp
 800cb4c:	455d      	cmp	r5, fp
 800cb4e:	d149      	bne.n	800cbe4 <_scanf_float+0x30c>
 800cb50:	6823      	ldr	r3, [r4, #0]
 800cb52:	05da      	lsls	r2, r3, #23
 800cb54:	d51f      	bpl.n	800cb96 <_scanf_float+0x2be>
 800cb56:	055b      	lsls	r3, r3, #21
 800cb58:	d466      	bmi.n	800cc28 <_scanf_float+0x350>
 800cb5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cb5e:	6923      	ldr	r3, [r4, #16]
 800cb60:	2965      	cmp	r1, #101	; 0x65
 800cb62:	f103 33ff 	add.w	r3, r3, #4294967295
 800cb66:	f105 3bff 	add.w	fp, r5, #4294967295
 800cb6a:	6123      	str	r3, [r4, #16]
 800cb6c:	d00d      	beq.n	800cb8a <_scanf_float+0x2b2>
 800cb6e:	2945      	cmp	r1, #69	; 0x45
 800cb70:	d00b      	beq.n	800cb8a <_scanf_float+0x2b2>
 800cb72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb76:	4632      	mov	r2, r6
 800cb78:	4638      	mov	r0, r7
 800cb7a:	4798      	blx	r3
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800cb82:	3b01      	subs	r3, #1
 800cb84:	f1a5 0b02 	sub.w	fp, r5, #2
 800cb88:	6123      	str	r3, [r4, #16]
 800cb8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb8e:	4632      	mov	r2, r6
 800cb90:	4638      	mov	r0, r7
 800cb92:	4798      	blx	r3
 800cb94:	465d      	mov	r5, fp
 800cb96:	6826      	ldr	r6, [r4, #0]
 800cb98:	f016 0610 	ands.w	r6, r6, #16
 800cb9c:	d170      	bne.n	800cc80 <_scanf_float+0x3a8>
 800cb9e:	702e      	strb	r6, [r5, #0]
 800cba0:	6823      	ldr	r3, [r4, #0]
 800cba2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbaa:	d140      	bne.n	800cc2e <_scanf_float+0x356>
 800cbac:	9b02      	ldr	r3, [sp, #8]
 800cbae:	eba9 0303 	sub.w	r3, r9, r3
 800cbb2:	425a      	negs	r2, r3
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d147      	bne.n	800cc48 <_scanf_float+0x370>
 800cbb8:	2200      	movs	r2, #0
 800cbba:	4638      	mov	r0, r7
 800cbbc:	4641      	mov	r1, r8
 800cbbe:	f000 fe6b 	bl	800d898 <_strtod_r>
 800cbc2:	6820      	ldr	r0, [r4, #0]
 800cbc4:	f8da 3000 	ldr.w	r3, [sl]
 800cbc8:	f010 0f02 	tst.w	r0, #2
 800cbcc:	f103 0204 	add.w	r2, r3, #4
 800cbd0:	f8ca 2000 	str.w	r2, [sl]
 800cbd4:	d043      	beq.n	800cc5e <_scanf_float+0x386>
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	ed83 0b00 	vstr	d0, [r3]
 800cbdc:	68e3      	ldr	r3, [r4, #12]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	60e3      	str	r3, [r4, #12]
 800cbe2:	e6c0      	b.n	800c966 <_scanf_float+0x8e>
 800cbe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbe8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cbec:	4632      	mov	r2, r6
 800cbee:	4638      	mov	r0, r7
 800cbf0:	4798      	blx	r3
 800cbf2:	6923      	ldr	r3, [r4, #16]
 800cbf4:	3b01      	subs	r3, #1
 800cbf6:	6123      	str	r3, [r4, #16]
 800cbf8:	e7a8      	b.n	800cb4c <_scanf_float+0x274>
 800cbfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbfe:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cc02:	4632      	mov	r2, r6
 800cc04:	4638      	mov	r0, r7
 800cc06:	4798      	blx	r3
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	6123      	str	r3, [r4, #16]
 800cc0e:	4545      	cmp	r5, r8
 800cc10:	d8f3      	bhi.n	800cbfa <_scanf_float+0x322>
 800cc12:	e6a7      	b.n	800c964 <_scanf_float+0x8c>
 800cc14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	4638      	mov	r0, r7
 800cc20:	4798      	blx	r3
 800cc22:	6923      	ldr	r3, [r4, #16]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	6123      	str	r3, [r4, #16]
 800cc28:	4545      	cmp	r5, r8
 800cc2a:	d8f3      	bhi.n	800cc14 <_scanf_float+0x33c>
 800cc2c:	e69a      	b.n	800c964 <_scanf_float+0x8c>
 800cc2e:	9b03      	ldr	r3, [sp, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d0c1      	beq.n	800cbb8 <_scanf_float+0x2e0>
 800cc34:	9904      	ldr	r1, [sp, #16]
 800cc36:	230a      	movs	r3, #10
 800cc38:	4632      	mov	r2, r6
 800cc3a:	3101      	adds	r1, #1
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f000 feb7 	bl	800d9b0 <_strtol_r>
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	9d04      	ldr	r5, [sp, #16]
 800cc46:	1ac2      	subs	r2, r0, r3
 800cc48:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cc4c:	429d      	cmp	r5, r3
 800cc4e:	bf28      	it	cs
 800cc50:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800cc54:	490b      	ldr	r1, [pc, #44]	; (800cc84 <_scanf_float+0x3ac>)
 800cc56:	4628      	mov	r0, r5
 800cc58:	f000 f81c 	bl	800cc94 <siprintf>
 800cc5c:	e7ac      	b.n	800cbb8 <_scanf_float+0x2e0>
 800cc5e:	f010 0004 	ands.w	r0, r0, #4
 800cc62:	d1b8      	bne.n	800cbd6 <_scanf_float+0x2fe>
 800cc64:	eeb4 0b40 	vcmp.f64	d0, d0
 800cc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6c:	681d      	ldr	r5, [r3, #0]
 800cc6e:	d704      	bvc.n	800cc7a <_scanf_float+0x3a2>
 800cc70:	f000 f80a 	bl	800cc88 <nanf>
 800cc74:	ed85 0a00 	vstr	s0, [r5]
 800cc78:	e7b0      	b.n	800cbdc <_scanf_float+0x304>
 800cc7a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800cc7e:	e7f9      	b.n	800cc74 <_scanf_float+0x39c>
 800cc80:	2600      	movs	r6, #0
 800cc82:	e670      	b.n	800c966 <_scanf_float+0x8e>
 800cc84:	0800fb46 	.word	0x0800fb46

0800cc88 <nanf>:
 800cc88:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cc90 <nanf+0x8>
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	7fc00000 	.word	0x7fc00000

0800cc94 <siprintf>:
 800cc94:	b40e      	push	{r1, r2, r3}
 800cc96:	b500      	push	{lr}
 800cc98:	b09c      	sub	sp, #112	; 0x70
 800cc9a:	ab1d      	add	r3, sp, #116	; 0x74
 800cc9c:	9002      	str	r0, [sp, #8]
 800cc9e:	9006      	str	r0, [sp, #24]
 800cca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cca4:	4809      	ldr	r0, [pc, #36]	; (800cccc <siprintf+0x38>)
 800cca6:	9107      	str	r1, [sp, #28]
 800cca8:	9104      	str	r1, [sp, #16]
 800ccaa:	4909      	ldr	r1, [pc, #36]	; (800ccd0 <siprintf+0x3c>)
 800ccac:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccb0:	9105      	str	r1, [sp, #20]
 800ccb2:	6800      	ldr	r0, [r0, #0]
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	a902      	add	r1, sp, #8
 800ccb8:	f002 fcd4 	bl	800f664 <_svfiprintf_r>
 800ccbc:	9b02      	ldr	r3, [sp, #8]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	701a      	strb	r2, [r3, #0]
 800ccc2:	b01c      	add	sp, #112	; 0x70
 800ccc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccc8:	b003      	add	sp, #12
 800ccca:	4770      	bx	lr
 800cccc:	20000024 	.word	0x20000024
 800ccd0:	ffff0208 	.word	0xffff0208

0800ccd4 <sulp>:
 800ccd4:	b570      	push	{r4, r5, r6, lr}
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	4616      	mov	r6, r2
 800ccdc:	ec45 4b10 	vmov	d0, r4, r5
 800cce0:	f002 fa7c 	bl	800f1dc <__ulp>
 800cce4:	b17e      	cbz	r6, 800cd06 <sulp+0x32>
 800cce6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ccea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	dd09      	ble.n	800cd06 <sulp+0x32>
 800ccf2:	051b      	lsls	r3, r3, #20
 800ccf4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800ccfe:	ec41 0b17 	vmov	d7, r0, r1
 800cd02:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cd06:	bd70      	pop	{r4, r5, r6, pc}

0800cd08 <_strtod_l>:
 800cd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd0c:	ed2d 8b0c 	vpush	{d8-d13}
 800cd10:	4698      	mov	r8, r3
 800cd12:	b09d      	sub	sp, #116	; 0x74
 800cd14:	2300      	movs	r3, #0
 800cd16:	4604      	mov	r4, r0
 800cd18:	4640      	mov	r0, r8
 800cd1a:	460e      	mov	r6, r1
 800cd1c:	9214      	str	r2, [sp, #80]	; 0x50
 800cd1e:	9318      	str	r3, [sp, #96]	; 0x60
 800cd20:	f001 ff5b 	bl	800ebda <__localeconv_l>
 800cd24:	4681      	mov	r9, r0
 800cd26:	6800      	ldr	r0, [r0, #0]
 800cd28:	f7f3 fa8a 	bl	8000240 <strlen>
 800cd2c:	f04f 0a00 	mov.w	sl, #0
 800cd30:	4607      	mov	r7, r0
 800cd32:	f04f 0b00 	mov.w	fp, #0
 800cd36:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cd3a:	781a      	ldrb	r2, [r3, #0]
 800cd3c:	2a0d      	cmp	r2, #13
 800cd3e:	d834      	bhi.n	800cdaa <_strtod_l+0xa2>
 800cd40:	2a09      	cmp	r2, #9
 800cd42:	d238      	bcs.n	800cdb6 <_strtod_l+0xae>
 800cd44:	2a00      	cmp	r2, #0
 800cd46:	d040      	beq.n	800cdca <_strtod_l+0xc2>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	930d      	str	r3, [sp, #52]	; 0x34
 800cd4c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800cd4e:	782b      	ldrb	r3, [r5, #0]
 800cd50:	2b30      	cmp	r3, #48	; 0x30
 800cd52:	f040 80b3 	bne.w	800cebc <_strtod_l+0x1b4>
 800cd56:	786b      	ldrb	r3, [r5, #1]
 800cd58:	2b58      	cmp	r3, #88	; 0x58
 800cd5a:	d001      	beq.n	800cd60 <_strtod_l+0x58>
 800cd5c:	2b78      	cmp	r3, #120	; 0x78
 800cd5e:	d169      	bne.n	800ce34 <_strtod_l+0x12c>
 800cd60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd62:	9301      	str	r3, [sp, #4]
 800cd64:	ab18      	add	r3, sp, #96	; 0x60
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	f8cd 8008 	str.w	r8, [sp, #8]
 800cd6c:	ab19      	add	r3, sp, #100	; 0x64
 800cd6e:	4a8f      	ldr	r2, [pc, #572]	; (800cfac <_strtod_l+0x2a4>)
 800cd70:	a917      	add	r1, sp, #92	; 0x5c
 800cd72:	4620      	mov	r0, r4
 800cd74:	f001 fc57 	bl	800e626 <__gethex>
 800cd78:	f010 0607 	ands.w	r6, r0, #7
 800cd7c:	4607      	mov	r7, r0
 800cd7e:	d005      	beq.n	800cd8c <_strtod_l+0x84>
 800cd80:	2e06      	cmp	r6, #6
 800cd82:	d12c      	bne.n	800cdde <_strtod_l+0xd6>
 800cd84:	3501      	adds	r5, #1
 800cd86:	2300      	movs	r3, #0
 800cd88:	9517      	str	r5, [sp, #92]	; 0x5c
 800cd8a:	930d      	str	r3, [sp, #52]	; 0x34
 800cd8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f040 855e 	bne.w	800d850 <_strtod_l+0xb48>
 800cd94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd96:	b1eb      	cbz	r3, 800cdd4 <_strtod_l+0xcc>
 800cd98:	ec4b ab17 	vmov	d7, sl, fp
 800cd9c:	eeb1 0b47 	vneg.f64	d0, d7
 800cda0:	b01d      	add	sp, #116	; 0x74
 800cda2:	ecbd 8b0c 	vpop	{d8-d13}
 800cda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdaa:	2a2b      	cmp	r2, #43	; 0x2b
 800cdac:	d015      	beq.n	800cdda <_strtod_l+0xd2>
 800cdae:	2a2d      	cmp	r2, #45	; 0x2d
 800cdb0:	d004      	beq.n	800cdbc <_strtod_l+0xb4>
 800cdb2:	2a20      	cmp	r2, #32
 800cdb4:	d1c8      	bne.n	800cd48 <_strtod_l+0x40>
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	9317      	str	r3, [sp, #92]	; 0x5c
 800cdba:	e7bd      	b.n	800cd38 <_strtod_l+0x30>
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	920d      	str	r2, [sp, #52]	; 0x34
 800cdc0:	1c5a      	adds	r2, r3, #1
 800cdc2:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdc4:	785b      	ldrb	r3, [r3, #1]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d1c0      	bne.n	800cd4c <_strtod_l+0x44>
 800cdca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cdcc:	9617      	str	r6, [sp, #92]	; 0x5c
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f040 853c 	bne.w	800d84c <_strtod_l+0xb44>
 800cdd4:	ec4b ab10 	vmov	d0, sl, fp
 800cdd8:	e7e2      	b.n	800cda0 <_strtod_l+0x98>
 800cdda:	2200      	movs	r2, #0
 800cddc:	e7ef      	b.n	800cdbe <_strtod_l+0xb6>
 800cdde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cde0:	b13a      	cbz	r2, 800cdf2 <_strtod_l+0xea>
 800cde2:	2135      	movs	r1, #53	; 0x35
 800cde4:	a81a      	add	r0, sp, #104	; 0x68
 800cde6:	f002 faf2 	bl	800f3ce <__copybits>
 800cdea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cdec:	4620      	mov	r0, r4
 800cdee:	f001 ff5e 	bl	800ecae <_Bfree>
 800cdf2:	3e01      	subs	r6, #1
 800cdf4:	2e04      	cmp	r6, #4
 800cdf6:	d806      	bhi.n	800ce06 <_strtod_l+0xfe>
 800cdf8:	e8df f006 	tbb	[pc, r6]
 800cdfc:	1714030a 	.word	0x1714030a
 800ce00:	0a          	.byte	0x0a
 800ce01:	00          	.byte	0x00
 800ce02:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ce06:	073b      	lsls	r3, r7, #28
 800ce08:	d5c0      	bpl.n	800cd8c <_strtod_l+0x84>
 800ce0a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ce0e:	e7bd      	b.n	800cd8c <_strtod_l+0x84>
 800ce10:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ce14:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ce16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ce1a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce1e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce22:	e7f0      	b.n	800ce06 <_strtod_l+0xfe>
 800ce24:	f8df b188 	ldr.w	fp, [pc, #392]	; 800cfb0 <_strtod_l+0x2a8>
 800ce28:	e7ed      	b.n	800ce06 <_strtod_l+0xfe>
 800ce2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ce2e:	f04f 3aff 	mov.w	sl, #4294967295
 800ce32:	e7e8      	b.n	800ce06 <_strtod_l+0xfe>
 800ce34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce36:	1c5a      	adds	r2, r3, #1
 800ce38:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	2b30      	cmp	r3, #48	; 0x30
 800ce3e:	d0f9      	beq.n	800ce34 <_strtod_l+0x12c>
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d0a3      	beq.n	800cd8c <_strtod_l+0x84>
 800ce44:	2301      	movs	r3, #1
 800ce46:	930a      	str	r3, [sp, #40]	; 0x28
 800ce48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce4a:	930c      	str	r3, [sp, #48]	; 0x30
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	9306      	str	r3, [sp, #24]
 800ce50:	9308      	str	r3, [sp, #32]
 800ce52:	461d      	mov	r5, r3
 800ce54:	220a      	movs	r2, #10
 800ce56:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ce58:	f890 8000 	ldrb.w	r8, [r0]
 800ce5c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800ce60:	b2d9      	uxtb	r1, r3
 800ce62:	2909      	cmp	r1, #9
 800ce64:	d92c      	bls.n	800cec0 <_strtod_l+0x1b8>
 800ce66:	463a      	mov	r2, r7
 800ce68:	f8d9 1000 	ldr.w	r1, [r9]
 800ce6c:	f002 fd02 	bl	800f874 <strncmp>
 800ce70:	2800      	cmp	r0, #0
 800ce72:	d035      	beq.n	800cee0 <_strtod_l+0x1d8>
 800ce74:	2000      	movs	r0, #0
 800ce76:	4642      	mov	r2, r8
 800ce78:	462b      	mov	r3, r5
 800ce7a:	4601      	mov	r1, r0
 800ce7c:	9004      	str	r0, [sp, #16]
 800ce7e:	2a65      	cmp	r2, #101	; 0x65
 800ce80:	d001      	beq.n	800ce86 <_strtod_l+0x17e>
 800ce82:	2a45      	cmp	r2, #69	; 0x45
 800ce84:	d117      	bne.n	800ceb6 <_strtod_l+0x1ae>
 800ce86:	b923      	cbnz	r3, 800ce92 <_strtod_l+0x18a>
 800ce88:	b910      	cbnz	r0, 800ce90 <_strtod_l+0x188>
 800ce8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d09c      	beq.n	800cdca <_strtod_l+0xc2>
 800ce90:	2300      	movs	r3, #0
 800ce92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ce94:	1c72      	adds	r2, r6, #1
 800ce96:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce98:	7872      	ldrb	r2, [r6, #1]
 800ce9a:	2a2b      	cmp	r2, #43	; 0x2b
 800ce9c:	f000 8082 	beq.w	800cfa4 <_strtod_l+0x29c>
 800cea0:	2a2d      	cmp	r2, #45	; 0x2d
 800cea2:	d079      	beq.n	800cf98 <_strtod_l+0x290>
 800cea4:	f04f 0e00 	mov.w	lr, #0
 800cea8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800ceac:	f1bc 0f09 	cmp.w	ip, #9
 800ceb0:	f240 8086 	bls.w	800cfc0 <_strtod_l+0x2b8>
 800ceb4:	9617      	str	r6, [sp, #92]	; 0x5c
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	e0a8      	b.n	800d00e <_strtod_l+0x306>
 800cebc:	2300      	movs	r3, #0
 800cebe:	e7c2      	b.n	800ce46 <_strtod_l+0x13e>
 800cec0:	2d08      	cmp	r5, #8
 800cec2:	bfd5      	itete	le
 800cec4:	9908      	ldrle	r1, [sp, #32]
 800cec6:	9906      	ldrgt	r1, [sp, #24]
 800cec8:	fb02 3301 	mlale	r3, r2, r1, r3
 800cecc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ced0:	f100 0001 	add.w	r0, r0, #1
 800ced4:	bfd4      	ite	le
 800ced6:	9308      	strle	r3, [sp, #32]
 800ced8:	9306      	strgt	r3, [sp, #24]
 800ceda:	3501      	adds	r5, #1
 800cedc:	9017      	str	r0, [sp, #92]	; 0x5c
 800cede:	e7ba      	b.n	800ce56 <_strtod_l+0x14e>
 800cee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cee2:	19da      	adds	r2, r3, r7
 800cee4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cee6:	5dda      	ldrb	r2, [r3, r7]
 800cee8:	2d00      	cmp	r5, #0
 800ceea:	d038      	beq.n	800cf5e <_strtod_l+0x256>
 800ceec:	4601      	mov	r1, r0
 800ceee:	462b      	mov	r3, r5
 800cef0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800cef4:	2f09      	cmp	r7, #9
 800cef6:	d913      	bls.n	800cf20 <_strtod_l+0x218>
 800cef8:	2701      	movs	r7, #1
 800cefa:	9704      	str	r7, [sp, #16]
 800cefc:	e7bf      	b.n	800ce7e <_strtod_l+0x176>
 800cefe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf00:	1c5a      	adds	r2, r3, #1
 800cf02:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf04:	785a      	ldrb	r2, [r3, #1]
 800cf06:	3001      	adds	r0, #1
 800cf08:	2a30      	cmp	r2, #48	; 0x30
 800cf0a:	d0f8      	beq.n	800cefe <_strtod_l+0x1f6>
 800cf0c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cf10:	2b08      	cmp	r3, #8
 800cf12:	f200 84a2 	bhi.w	800d85a <_strtod_l+0xb52>
 800cf16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf18:	930c      	str	r3, [sp, #48]	; 0x30
 800cf1a:	4601      	mov	r1, r0
 800cf1c:	2000      	movs	r0, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800cf24:	f100 0701 	add.w	r7, r0, #1
 800cf28:	d013      	beq.n	800cf52 <_strtod_l+0x24a>
 800cf2a:	4439      	add	r1, r7
 800cf2c:	eb00 0e03 	add.w	lr, r0, r3
 800cf30:	461f      	mov	r7, r3
 800cf32:	f04f 0c0a 	mov.w	ip, #10
 800cf36:	45be      	cmp	lr, r7
 800cf38:	d113      	bne.n	800cf62 <_strtod_l+0x25a>
 800cf3a:	181f      	adds	r7, r3, r0
 800cf3c:	2f08      	cmp	r7, #8
 800cf3e:	f103 0301 	add.w	r3, r3, #1
 800cf42:	4403      	add	r3, r0
 800cf44:	dc1d      	bgt.n	800cf82 <_strtod_l+0x27a>
 800cf46:	9a08      	ldr	r2, [sp, #32]
 800cf48:	200a      	movs	r0, #10
 800cf4a:	fb00 8202 	mla	r2, r0, r2, r8
 800cf4e:	9208      	str	r2, [sp, #32]
 800cf50:	2700      	movs	r7, #0
 800cf52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf54:	1c50      	adds	r0, r2, #1
 800cf56:	9017      	str	r0, [sp, #92]	; 0x5c
 800cf58:	7852      	ldrb	r2, [r2, #1]
 800cf5a:	4638      	mov	r0, r7
 800cf5c:	e7c8      	b.n	800cef0 <_strtod_l+0x1e8>
 800cf5e:	4628      	mov	r0, r5
 800cf60:	e7d2      	b.n	800cf08 <_strtod_l+0x200>
 800cf62:	2f08      	cmp	r7, #8
 800cf64:	f107 0701 	add.w	r7, r7, #1
 800cf68:	dc04      	bgt.n	800cf74 <_strtod_l+0x26c>
 800cf6a:	9a08      	ldr	r2, [sp, #32]
 800cf6c:	fb0c f202 	mul.w	r2, ip, r2
 800cf70:	9208      	str	r2, [sp, #32]
 800cf72:	e7e0      	b.n	800cf36 <_strtod_l+0x22e>
 800cf74:	2f10      	cmp	r7, #16
 800cf76:	bfde      	ittt	le
 800cf78:	9a06      	ldrle	r2, [sp, #24]
 800cf7a:	fb0c f202 	mulle.w	r2, ip, r2
 800cf7e:	9206      	strle	r2, [sp, #24]
 800cf80:	e7d9      	b.n	800cf36 <_strtod_l+0x22e>
 800cf82:	2b10      	cmp	r3, #16
 800cf84:	bfdf      	itttt	le
 800cf86:	9a06      	ldrle	r2, [sp, #24]
 800cf88:	200a      	movle	r0, #10
 800cf8a:	fb00 8202 	mlale	r2, r0, r2, r8
 800cf8e:	9206      	strle	r2, [sp, #24]
 800cf90:	e7de      	b.n	800cf50 <_strtod_l+0x248>
 800cf92:	2301      	movs	r3, #1
 800cf94:	9304      	str	r3, [sp, #16]
 800cf96:	e777      	b.n	800ce88 <_strtod_l+0x180>
 800cf98:	f04f 0e01 	mov.w	lr, #1
 800cf9c:	1cb2      	adds	r2, r6, #2
 800cf9e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfa0:	78b2      	ldrb	r2, [r6, #2]
 800cfa2:	e781      	b.n	800cea8 <_strtod_l+0x1a0>
 800cfa4:	f04f 0e00 	mov.w	lr, #0
 800cfa8:	e7f8      	b.n	800cf9c <_strtod_l+0x294>
 800cfaa:	bf00      	nop
 800cfac:	0800fb4c 	.word	0x0800fb4c
 800cfb0:	7ff00000 	.word	0x7ff00000
 800cfb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfb6:	f102 0c01 	add.w	ip, r2, #1
 800cfba:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800cfbe:	7852      	ldrb	r2, [r2, #1]
 800cfc0:	2a30      	cmp	r2, #48	; 0x30
 800cfc2:	d0f7      	beq.n	800cfb4 <_strtod_l+0x2ac>
 800cfc4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800cfc8:	f1bc 0f08 	cmp.w	ip, #8
 800cfcc:	f63f af73 	bhi.w	800ceb6 <_strtod_l+0x1ae>
 800cfd0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800cfd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfd6:	920e      	str	r2, [sp, #56]	; 0x38
 800cfd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cfda:	f102 0c01 	add.w	ip, r2, #1
 800cfde:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800cfe2:	7852      	ldrb	r2, [r2, #1]
 800cfe4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800cfe8:	f1b9 0f09 	cmp.w	r9, #9
 800cfec:	d939      	bls.n	800d062 <_strtod_l+0x35a>
 800cfee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800cff0:	ebac 0c07 	sub.w	ip, ip, r7
 800cff4:	f1bc 0f08 	cmp.w	ip, #8
 800cff8:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800cffc:	dc37      	bgt.n	800d06e <_strtod_l+0x366>
 800cffe:	45e0      	cmp	r8, ip
 800d000:	bfa8      	it	ge
 800d002:	46e0      	movge	r8, ip
 800d004:	f1be 0f00 	cmp.w	lr, #0
 800d008:	d001      	beq.n	800d00e <_strtod_l+0x306>
 800d00a:	f1c8 0800 	rsb	r8, r8, #0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d151      	bne.n	800d0b6 <_strtod_l+0x3ae>
 800d012:	2800      	cmp	r0, #0
 800d014:	f47f aeba 	bne.w	800cd8c <_strtod_l+0x84>
 800d018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f47f aeb6 	bne.w	800cd8c <_strtod_l+0x84>
 800d020:	9b04      	ldr	r3, [sp, #16]
 800d022:	2b00      	cmp	r3, #0
 800d024:	f47f aed1 	bne.w	800cdca <_strtod_l+0xc2>
 800d028:	2a4e      	cmp	r2, #78	; 0x4e
 800d02a:	d027      	beq.n	800d07c <_strtod_l+0x374>
 800d02c:	dc21      	bgt.n	800d072 <_strtod_l+0x36a>
 800d02e:	2a49      	cmp	r2, #73	; 0x49
 800d030:	f47f aecb 	bne.w	800cdca <_strtod_l+0xc2>
 800d034:	499a      	ldr	r1, [pc, #616]	; (800d2a0 <_strtod_l+0x598>)
 800d036:	a817      	add	r0, sp, #92	; 0x5c
 800d038:	f001 fd28 	bl	800ea8c <__match>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	f43f aec4 	beq.w	800cdca <_strtod_l+0xc2>
 800d042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d044:	4997      	ldr	r1, [pc, #604]	; (800d2a4 <_strtod_l+0x59c>)
 800d046:	3b01      	subs	r3, #1
 800d048:	a817      	add	r0, sp, #92	; 0x5c
 800d04a:	9317      	str	r3, [sp, #92]	; 0x5c
 800d04c:	f001 fd1e 	bl	800ea8c <__match>
 800d050:	b910      	cbnz	r0, 800d058 <_strtod_l+0x350>
 800d052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d054:	3301      	adds	r3, #1
 800d056:	9317      	str	r3, [sp, #92]	; 0x5c
 800d058:	f8df b260 	ldr.w	fp, [pc, #608]	; 800d2bc <_strtod_l+0x5b4>
 800d05c:	f04f 0a00 	mov.w	sl, #0
 800d060:	e694      	b.n	800cd8c <_strtod_l+0x84>
 800d062:	270a      	movs	r7, #10
 800d064:	fb07 2808 	mla	r8, r7, r8, r2
 800d068:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800d06c:	e7b4      	b.n	800cfd8 <_strtod_l+0x2d0>
 800d06e:	46e0      	mov	r8, ip
 800d070:	e7c8      	b.n	800d004 <_strtod_l+0x2fc>
 800d072:	2a69      	cmp	r2, #105	; 0x69
 800d074:	d0de      	beq.n	800d034 <_strtod_l+0x32c>
 800d076:	2a6e      	cmp	r2, #110	; 0x6e
 800d078:	f47f aea7 	bne.w	800cdca <_strtod_l+0xc2>
 800d07c:	498a      	ldr	r1, [pc, #552]	; (800d2a8 <_strtod_l+0x5a0>)
 800d07e:	a817      	add	r0, sp, #92	; 0x5c
 800d080:	f001 fd04 	bl	800ea8c <__match>
 800d084:	2800      	cmp	r0, #0
 800d086:	f43f aea0 	beq.w	800cdca <_strtod_l+0xc2>
 800d08a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	2b28      	cmp	r3, #40	; 0x28
 800d090:	d10e      	bne.n	800d0b0 <_strtod_l+0x3a8>
 800d092:	aa1a      	add	r2, sp, #104	; 0x68
 800d094:	4985      	ldr	r1, [pc, #532]	; (800d2ac <_strtod_l+0x5a4>)
 800d096:	a817      	add	r0, sp, #92	; 0x5c
 800d098:	f001 fd0c 	bl	800eab4 <__hexnan>
 800d09c:	2805      	cmp	r0, #5
 800d09e:	d107      	bne.n	800d0b0 <_strtod_l+0x3a8>
 800d0a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0a2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d0a6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d0aa:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d0ae:	e66d      	b.n	800cd8c <_strtod_l+0x84>
 800d0b0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800d2c0 <_strtod_l+0x5b8>
 800d0b4:	e7d2      	b.n	800d05c <_strtod_l+0x354>
 800d0b6:	eddd 7a08 	vldr	s15, [sp, #32]
 800d0ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d0be:	eba8 0201 	sub.w	r2, r8, r1
 800d0c2:	2d00      	cmp	r5, #0
 800d0c4:	bf08      	it	eq
 800d0c6:	461d      	moveq	r5, r3
 800d0c8:	2b10      	cmp	r3, #16
 800d0ca:	9204      	str	r2, [sp, #16]
 800d0cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	bfa8      	it	ge
 800d0d4:	2210      	movge	r2, #16
 800d0d6:	2b09      	cmp	r3, #9
 800d0d8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d0dc:	dc14      	bgt.n	800d108 <_strtod_l+0x400>
 800d0de:	9904      	ldr	r1, [sp, #16]
 800d0e0:	2900      	cmp	r1, #0
 800d0e2:	f43f ae53 	beq.w	800cd8c <_strtod_l+0x84>
 800d0e6:	9904      	ldr	r1, [sp, #16]
 800d0e8:	dd72      	ble.n	800d1d0 <_strtod_l+0x4c8>
 800d0ea:	2916      	cmp	r1, #22
 800d0ec:	dc5a      	bgt.n	800d1a4 <_strtod_l+0x49c>
 800d0ee:	4970      	ldr	r1, [pc, #448]	; (800d2b0 <_strtod_l+0x5a8>)
 800d0f0:	9b04      	ldr	r3, [sp, #16]
 800d0f2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0f6:	ed91 7b00 	vldr	d7, [r1]
 800d0fa:	ec4b ab16 	vmov	d6, sl, fp
 800d0fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d102:	ec5b ab17 	vmov	sl, fp, d7
 800d106:	e641      	b.n	800cd8c <_strtod_l+0x84>
 800d108:	4969      	ldr	r1, [pc, #420]	; (800d2b0 <_strtod_l+0x5a8>)
 800d10a:	eddd 7a06 	vldr	s15, [sp, #24]
 800d10e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800d112:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800d116:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d11a:	2b0f      	cmp	r3, #15
 800d11c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d120:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d124:	ec5b ab17 	vmov	sl, fp, d7
 800d128:	ddd9      	ble.n	800d0de <_strtod_l+0x3d6>
 800d12a:	9904      	ldr	r1, [sp, #16]
 800d12c:	1a9a      	subs	r2, r3, r2
 800d12e:	440a      	add	r2, r1
 800d130:	2a00      	cmp	r2, #0
 800d132:	f340 8096 	ble.w	800d262 <_strtod_l+0x55a>
 800d136:	f012 000f 	ands.w	r0, r2, #15
 800d13a:	d00a      	beq.n	800d152 <_strtod_l+0x44a>
 800d13c:	495c      	ldr	r1, [pc, #368]	; (800d2b0 <_strtod_l+0x5a8>)
 800d13e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d142:	ed91 7b00 	vldr	d7, [r1]
 800d146:	ec4b ab16 	vmov	d6, sl, fp
 800d14a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d14e:	ec5b ab17 	vmov	sl, fp, d7
 800d152:	f032 020f 	bics.w	r2, r2, #15
 800d156:	d072      	beq.n	800d23e <_strtod_l+0x536>
 800d158:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800d15c:	dd45      	ble.n	800d1ea <_strtod_l+0x4e2>
 800d15e:	2500      	movs	r5, #0
 800d160:	46a8      	mov	r8, r5
 800d162:	9506      	str	r5, [sp, #24]
 800d164:	46a9      	mov	r9, r5
 800d166:	2322      	movs	r3, #34	; 0x22
 800d168:	f8df b150 	ldr.w	fp, [pc, #336]	; 800d2bc <_strtod_l+0x5b4>
 800d16c:	6023      	str	r3, [r4, #0]
 800d16e:	f04f 0a00 	mov.w	sl, #0
 800d172:	9b06      	ldr	r3, [sp, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	f43f ae09 	beq.w	800cd8c <_strtod_l+0x84>
 800d17a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d17c:	4620      	mov	r0, r4
 800d17e:	f001 fd96 	bl	800ecae <_Bfree>
 800d182:	4649      	mov	r1, r9
 800d184:	4620      	mov	r0, r4
 800d186:	f001 fd92 	bl	800ecae <_Bfree>
 800d18a:	4641      	mov	r1, r8
 800d18c:	4620      	mov	r0, r4
 800d18e:	f001 fd8e 	bl	800ecae <_Bfree>
 800d192:	9906      	ldr	r1, [sp, #24]
 800d194:	4620      	mov	r0, r4
 800d196:	f001 fd8a 	bl	800ecae <_Bfree>
 800d19a:	4629      	mov	r1, r5
 800d19c:	4620      	mov	r0, r4
 800d19e:	f001 fd86 	bl	800ecae <_Bfree>
 800d1a2:	e5f3      	b.n	800cd8c <_strtod_l+0x84>
 800d1a4:	9804      	ldr	r0, [sp, #16]
 800d1a6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800d1aa:	4281      	cmp	r1, r0
 800d1ac:	dbbd      	blt.n	800d12a <_strtod_l+0x422>
 800d1ae:	4a40      	ldr	r2, [pc, #256]	; (800d2b0 <_strtod_l+0x5a8>)
 800d1b0:	f1c3 030f 	rsb	r3, r3, #15
 800d1b4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800d1b8:	ed91 7b00 	vldr	d7, [r1]
 800d1bc:	ec4b ab16 	vmov	d6, sl, fp
 800d1c0:	1ac3      	subs	r3, r0, r3
 800d1c2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d1c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1ca:	ed92 6b00 	vldr	d6, [r2]
 800d1ce:	e796      	b.n	800d0fe <_strtod_l+0x3f6>
 800d1d0:	3116      	adds	r1, #22
 800d1d2:	dbaa      	blt.n	800d12a <_strtod_l+0x422>
 800d1d4:	4936      	ldr	r1, [pc, #216]	; (800d2b0 <_strtod_l+0x5a8>)
 800d1d6:	9b04      	ldr	r3, [sp, #16]
 800d1d8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800d1dc:	ed91 7b00 	vldr	d7, [r1]
 800d1e0:	ec4b ab16 	vmov	d6, sl, fp
 800d1e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d1e8:	e78b      	b.n	800d102 <_strtod_l+0x3fa>
 800d1ea:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	4e30      	ldr	r6, [pc, #192]	; (800d2b4 <_strtod_l+0x5ac>)
 800d1f2:	1112      	asrs	r2, r2, #4
 800d1f4:	4601      	mov	r1, r0
 800d1f6:	2a01      	cmp	r2, #1
 800d1f8:	dc23      	bgt.n	800d242 <_strtod_l+0x53a>
 800d1fa:	b108      	cbz	r0, 800d200 <_strtod_l+0x4f8>
 800d1fc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d200:	4a2c      	ldr	r2, [pc, #176]	; (800d2b4 <_strtod_l+0x5ac>)
 800d202:	482d      	ldr	r0, [pc, #180]	; (800d2b8 <_strtod_l+0x5b0>)
 800d204:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800d208:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d20c:	ed91 7b00 	vldr	d7, [r1]
 800d210:	ec4b ab16 	vmov	d6, sl, fp
 800d214:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d218:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d21c:	9907      	ldr	r1, [sp, #28]
 800d21e:	4a27      	ldr	r2, [pc, #156]	; (800d2bc <_strtod_l+0x5b4>)
 800d220:	400a      	ands	r2, r1
 800d222:	4282      	cmp	r2, r0
 800d224:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d228:	d899      	bhi.n	800d15e <_strtod_l+0x456>
 800d22a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800d22e:	4282      	cmp	r2, r0
 800d230:	bf86      	itte	hi
 800d232:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800d2c4 <_strtod_l+0x5bc>
 800d236:	f04f 3aff 	movhi.w	sl, #4294967295
 800d23a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800d23e:	2700      	movs	r7, #0
 800d240:	e070      	b.n	800d324 <_strtod_l+0x61c>
 800d242:	07d7      	lsls	r7, r2, #31
 800d244:	d50a      	bpl.n	800d25c <_strtod_l+0x554>
 800d246:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800d24a:	ed90 7b00 	vldr	d7, [r0]
 800d24e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800d252:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d256:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d25a:	2001      	movs	r0, #1
 800d25c:	3101      	adds	r1, #1
 800d25e:	1052      	asrs	r2, r2, #1
 800d260:	e7c9      	b.n	800d1f6 <_strtod_l+0x4ee>
 800d262:	d0ec      	beq.n	800d23e <_strtod_l+0x536>
 800d264:	4252      	negs	r2, r2
 800d266:	f012 000f 	ands.w	r0, r2, #15
 800d26a:	d00a      	beq.n	800d282 <_strtod_l+0x57a>
 800d26c:	4910      	ldr	r1, [pc, #64]	; (800d2b0 <_strtod_l+0x5a8>)
 800d26e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800d272:	ed91 7b00 	vldr	d7, [r1]
 800d276:	ec4b ab16 	vmov	d6, sl, fp
 800d27a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d27e:	ec5b ab17 	vmov	sl, fp, d7
 800d282:	1112      	asrs	r2, r2, #4
 800d284:	d0db      	beq.n	800d23e <_strtod_l+0x536>
 800d286:	2a1f      	cmp	r2, #31
 800d288:	dd1e      	ble.n	800d2c8 <_strtod_l+0x5c0>
 800d28a:	2500      	movs	r5, #0
 800d28c:	46a8      	mov	r8, r5
 800d28e:	9506      	str	r5, [sp, #24]
 800d290:	46a9      	mov	r9, r5
 800d292:	2322      	movs	r3, #34	; 0x22
 800d294:	f04f 0a00 	mov.w	sl, #0
 800d298:	f04f 0b00 	mov.w	fp, #0
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	e768      	b.n	800d172 <_strtod_l+0x46a>
 800d2a0:	0800fb17 	.word	0x0800fb17
 800d2a4:	0800fba3 	.word	0x0800fba3
 800d2a8:	0800fb1f 	.word	0x0800fb1f
 800d2ac:	0800fb60 	.word	0x0800fb60
 800d2b0:	0800fbe0 	.word	0x0800fbe0
 800d2b4:	0800fbb8 	.word	0x0800fbb8
 800d2b8:	7ca00000 	.word	0x7ca00000
 800d2bc:	7ff00000 	.word	0x7ff00000
 800d2c0:	fff80000 	.word	0xfff80000
 800d2c4:	7fefffff 	.word	0x7fefffff
 800d2c8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800d2cc:	f012 0710 	ands.w	r7, r2, #16
 800d2d0:	49ab      	ldr	r1, [pc, #684]	; (800d580 <_strtod_l+0x878>)
 800d2d2:	bf18      	it	ne
 800d2d4:	276a      	movne	r7, #106	; 0x6a
 800d2d6:	2000      	movs	r0, #0
 800d2d8:	2a00      	cmp	r2, #0
 800d2da:	f300 8113 	bgt.w	800d504 <_strtod_l+0x7fc>
 800d2de:	b108      	cbz	r0, 800d2e4 <_strtod_l+0x5dc>
 800d2e0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800d2e4:	b1bf      	cbz	r7, 800d316 <_strtod_l+0x60e>
 800d2e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d2ea:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800d2ee:	2a00      	cmp	r2, #0
 800d2f0:	4659      	mov	r1, fp
 800d2f2:	dd10      	ble.n	800d316 <_strtod_l+0x60e>
 800d2f4:	2a1f      	cmp	r2, #31
 800d2f6:	f340 8113 	ble.w	800d520 <_strtod_l+0x818>
 800d2fa:	2a34      	cmp	r2, #52	; 0x34
 800d2fc:	bfde      	ittt	le
 800d2fe:	3a20      	suble	r2, #32
 800d300:	f04f 30ff 	movle.w	r0, #4294967295
 800d304:	fa00 f202 	lslle.w	r2, r0, r2
 800d308:	f04f 0a00 	mov.w	sl, #0
 800d30c:	bfcc      	ite	gt
 800d30e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d312:	ea02 0b01 	andle.w	fp, r2, r1
 800d316:	ec4b ab17 	vmov	d7, sl, fp
 800d31a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d322:	d0b2      	beq.n	800d28a <_strtod_l+0x582>
 800d324:	9a08      	ldr	r2, [sp, #32]
 800d326:	9200      	str	r2, [sp, #0]
 800d328:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d32a:	462a      	mov	r2, r5
 800d32c:	4620      	mov	r0, r4
 800d32e:	f001 fd10 	bl	800ed52 <__s2b>
 800d332:	9006      	str	r0, [sp, #24]
 800d334:	2800      	cmp	r0, #0
 800d336:	f43f af12 	beq.w	800d15e <_strtod_l+0x456>
 800d33a:	9a04      	ldr	r2, [sp, #16]
 800d33c:	9b04      	ldr	r3, [sp, #16]
 800d33e:	2a00      	cmp	r2, #0
 800d340:	f1c3 0300 	rsb	r3, r3, #0
 800d344:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800d568 <_strtod_l+0x860>
 800d348:	bfa8      	it	ge
 800d34a:	2300      	movge	r3, #0
 800d34c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800d570 <_strtod_l+0x868>
 800d350:	ed9f bb89 	vldr	d11, [pc, #548]	; 800d578 <_strtod_l+0x870>
 800d354:	930e      	str	r3, [sp, #56]	; 0x38
 800d356:	2500      	movs	r5, #0
 800d358:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d35c:	9310      	str	r3, [sp, #64]	; 0x40
 800d35e:	46a8      	mov	r8, r5
 800d360:	9b06      	ldr	r3, [sp, #24]
 800d362:	4620      	mov	r0, r4
 800d364:	6859      	ldr	r1, [r3, #4]
 800d366:	f001 fc6e 	bl	800ec46 <_Balloc>
 800d36a:	4681      	mov	r9, r0
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f43f aefa 	beq.w	800d166 <_strtod_l+0x45e>
 800d372:	9b06      	ldr	r3, [sp, #24]
 800d374:	691a      	ldr	r2, [r3, #16]
 800d376:	3202      	adds	r2, #2
 800d378:	f103 010c 	add.w	r1, r3, #12
 800d37c:	0092      	lsls	r2, r2, #2
 800d37e:	300c      	adds	r0, #12
 800d380:	f001 fc56 	bl	800ec30 <memcpy>
 800d384:	aa1a      	add	r2, sp, #104	; 0x68
 800d386:	a919      	add	r1, sp, #100	; 0x64
 800d388:	ec4b ab10 	vmov	d0, sl, fp
 800d38c:	4620      	mov	r0, r4
 800d38e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d392:	f001 ff99 	bl	800f2c8 <__d2b>
 800d396:	9018      	str	r0, [sp, #96]	; 0x60
 800d398:	2800      	cmp	r0, #0
 800d39a:	f43f aee4 	beq.w	800d166 <_strtod_l+0x45e>
 800d39e:	2101      	movs	r1, #1
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f001 fd62 	bl	800ee6a <__i2b>
 800d3a6:	4680      	mov	r8, r0
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	f43f aedc 	beq.w	800d166 <_strtod_l+0x45e>
 800d3ae:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d3b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d3b2:	2e00      	cmp	r6, #0
 800d3b4:	bfb1      	iteee	lt
 800d3b6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800d3b8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d3ba:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800d3bc:	18f3      	addge	r3, r6, r3
 800d3be:	bfba      	itte	lt
 800d3c0:	1b98      	sublt	r0, r3, r6
 800d3c2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d3c4:	9308      	strge	r3, [sp, #32]
 800d3c6:	eba6 0607 	sub.w	r6, r6, r7
 800d3ca:	bfb8      	it	lt
 800d3cc:	9308      	strlt	r3, [sp, #32]
 800d3ce:	4416      	add	r6, r2
 800d3d0:	4b6c      	ldr	r3, [pc, #432]	; (800d584 <_strtod_l+0x87c>)
 800d3d2:	3e01      	subs	r6, #1
 800d3d4:	429e      	cmp	r6, r3
 800d3d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d3da:	f280 80b4 	bge.w	800d546 <_strtod_l+0x83e>
 800d3de:	1b9b      	subs	r3, r3, r6
 800d3e0:	2b1f      	cmp	r3, #31
 800d3e2:	eba2 0203 	sub.w	r2, r2, r3
 800d3e6:	f04f 0101 	mov.w	r1, #1
 800d3ea:	f300 80a0 	bgt.w	800d52e <_strtod_l+0x826>
 800d3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d3f2:	9311      	str	r3, [sp, #68]	; 0x44
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3f8:	9b08      	ldr	r3, [sp, #32]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	4402      	add	r2, r0
 800d3fe:	18be      	adds	r6, r7, r2
 800d400:	9a08      	ldr	r2, [sp, #32]
 800d402:	429a      	cmp	r2, r3
 800d404:	bfa8      	it	ge
 800d406:	461a      	movge	r2, r3
 800d408:	42b2      	cmp	r2, r6
 800d40a:	bfa8      	it	ge
 800d40c:	4632      	movge	r2, r6
 800d40e:	2a00      	cmp	r2, #0
 800d410:	dd04      	ble.n	800d41c <_strtod_l+0x714>
 800d412:	9908      	ldr	r1, [sp, #32]
 800d414:	1a9b      	subs	r3, r3, r2
 800d416:	1ab6      	subs	r6, r6, r2
 800d418:	1a8a      	subs	r2, r1, r2
 800d41a:	9208      	str	r2, [sp, #32]
 800d41c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d41e:	b1c2      	cbz	r2, 800d452 <_strtod_l+0x74a>
 800d420:	4641      	mov	r1, r8
 800d422:	4620      	mov	r0, r4
 800d424:	9315      	str	r3, [sp, #84]	; 0x54
 800d426:	f001 fdbf 	bl	800efa8 <__pow5mult>
 800d42a:	4680      	mov	r8, r0
 800d42c:	2800      	cmp	r0, #0
 800d42e:	f43f ae9a 	beq.w	800d166 <_strtod_l+0x45e>
 800d432:	4601      	mov	r1, r0
 800d434:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d436:	4620      	mov	r0, r4
 800d438:	f001 fd20 	bl	800ee7c <__multiply>
 800d43c:	900c      	str	r0, [sp, #48]	; 0x30
 800d43e:	2800      	cmp	r0, #0
 800d440:	f43f ae91 	beq.w	800d166 <_strtod_l+0x45e>
 800d444:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d446:	4620      	mov	r0, r4
 800d448:	f001 fc31 	bl	800ecae <_Bfree>
 800d44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d44e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d450:	9218      	str	r2, [sp, #96]	; 0x60
 800d452:	2b00      	cmp	r3, #0
 800d454:	dc7c      	bgt.n	800d550 <_strtod_l+0x848>
 800d456:	9b04      	ldr	r3, [sp, #16]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	dd08      	ble.n	800d46e <_strtod_l+0x766>
 800d45c:	4649      	mov	r1, r9
 800d45e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d460:	4620      	mov	r0, r4
 800d462:	f001 fda1 	bl	800efa8 <__pow5mult>
 800d466:	4681      	mov	r9, r0
 800d468:	2800      	cmp	r0, #0
 800d46a:	f43f ae7c 	beq.w	800d166 <_strtod_l+0x45e>
 800d46e:	2e00      	cmp	r6, #0
 800d470:	dd08      	ble.n	800d484 <_strtod_l+0x77c>
 800d472:	4649      	mov	r1, r9
 800d474:	4632      	mov	r2, r6
 800d476:	4620      	mov	r0, r4
 800d478:	f001 fde4 	bl	800f044 <__lshift>
 800d47c:	4681      	mov	r9, r0
 800d47e:	2800      	cmp	r0, #0
 800d480:	f43f ae71 	beq.w	800d166 <_strtod_l+0x45e>
 800d484:	9b08      	ldr	r3, [sp, #32]
 800d486:	2b00      	cmp	r3, #0
 800d488:	dd08      	ble.n	800d49c <_strtod_l+0x794>
 800d48a:	4641      	mov	r1, r8
 800d48c:	461a      	mov	r2, r3
 800d48e:	4620      	mov	r0, r4
 800d490:	f001 fdd8 	bl	800f044 <__lshift>
 800d494:	4680      	mov	r8, r0
 800d496:	2800      	cmp	r0, #0
 800d498:	f43f ae65 	beq.w	800d166 <_strtod_l+0x45e>
 800d49c:	464a      	mov	r2, r9
 800d49e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f001 fe3d 	bl	800f120 <__mdiff>
 800d4a6:	4605      	mov	r5, r0
 800d4a8:	2800      	cmp	r0, #0
 800d4aa:	f43f ae5c 	beq.w	800d166 <_strtod_l+0x45e>
 800d4ae:	68c3      	ldr	r3, [r0, #12]
 800d4b0:	930c      	str	r3, [sp, #48]	; 0x30
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	60c3      	str	r3, [r0, #12]
 800d4b6:	4641      	mov	r1, r8
 800d4b8:	f001 fe18 	bl	800f0ec <__mcmp>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	da63      	bge.n	800d588 <_strtod_l+0x880>
 800d4c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d4c2:	b9e3      	cbnz	r3, 800d4fe <_strtod_l+0x7f6>
 800d4c4:	f1ba 0f00 	cmp.w	sl, #0
 800d4c8:	d119      	bne.n	800d4fe <_strtod_l+0x7f6>
 800d4ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4ce:	b9b3      	cbnz	r3, 800d4fe <_strtod_l+0x7f6>
 800d4d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4d4:	0d1b      	lsrs	r3, r3, #20
 800d4d6:	051b      	lsls	r3, r3, #20
 800d4d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d4dc:	d90f      	bls.n	800d4fe <_strtod_l+0x7f6>
 800d4de:	696b      	ldr	r3, [r5, #20]
 800d4e0:	b913      	cbnz	r3, 800d4e8 <_strtod_l+0x7e0>
 800d4e2:	692b      	ldr	r3, [r5, #16]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	dd0a      	ble.n	800d4fe <_strtod_l+0x7f6>
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	f001 fda9 	bl	800f044 <__lshift>
 800d4f2:	4641      	mov	r1, r8
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	f001 fdf9 	bl	800f0ec <__mcmp>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	dc75      	bgt.n	800d5ea <_strtod_l+0x8e2>
 800d4fe:	2f00      	cmp	r7, #0
 800d500:	d17f      	bne.n	800d602 <_strtod_l+0x8fa>
 800d502:	e63a      	b.n	800d17a <_strtod_l+0x472>
 800d504:	07d6      	lsls	r6, r2, #31
 800d506:	d508      	bpl.n	800d51a <_strtod_l+0x812>
 800d508:	ed9d 6b06 	vldr	d6, [sp, #24]
 800d50c:	ed91 7b00 	vldr	d7, [r1]
 800d510:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d514:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d518:	2001      	movs	r0, #1
 800d51a:	1052      	asrs	r2, r2, #1
 800d51c:	3108      	adds	r1, #8
 800d51e:	e6db      	b.n	800d2d8 <_strtod_l+0x5d0>
 800d520:	f04f 31ff 	mov.w	r1, #4294967295
 800d524:	fa01 f202 	lsl.w	r2, r1, r2
 800d528:	ea02 0a0a 	and.w	sl, r2, sl
 800d52c:	e6f3      	b.n	800d316 <_strtod_l+0x60e>
 800d52e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d532:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d536:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d53a:	36e2      	adds	r6, #226	; 0xe2
 800d53c:	fa01 f306 	lsl.w	r3, r1, r6
 800d540:	930f      	str	r3, [sp, #60]	; 0x3c
 800d542:	9111      	str	r1, [sp, #68]	; 0x44
 800d544:	e758      	b.n	800d3f8 <_strtod_l+0x6f0>
 800d546:	2300      	movs	r3, #0
 800d548:	930f      	str	r3, [sp, #60]	; 0x3c
 800d54a:	2301      	movs	r3, #1
 800d54c:	9311      	str	r3, [sp, #68]	; 0x44
 800d54e:	e753      	b.n	800d3f8 <_strtod_l+0x6f0>
 800d550:	461a      	mov	r2, r3
 800d552:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d554:	4620      	mov	r0, r4
 800d556:	f001 fd75 	bl	800f044 <__lshift>
 800d55a:	9018      	str	r0, [sp, #96]	; 0x60
 800d55c:	2800      	cmp	r0, #0
 800d55e:	f47f af7a 	bne.w	800d456 <_strtod_l+0x74e>
 800d562:	e600      	b.n	800d166 <_strtod_l+0x45e>
 800d564:	f3af 8000 	nop.w
 800d568:	94a03595 	.word	0x94a03595
 800d56c:	3fdfffff 	.word	0x3fdfffff
 800d570:	35afe535 	.word	0x35afe535
 800d574:	3fe00000 	.word	0x3fe00000
 800d578:	94a03595 	.word	0x94a03595
 800d57c:	3fcfffff 	.word	0x3fcfffff
 800d580:	0800fb78 	.word	0x0800fb78
 800d584:	fffffc02 	.word	0xfffffc02
 800d588:	f8cd b020 	str.w	fp, [sp, #32]
 800d58c:	f040 8085 	bne.w	800d69a <_strtod_l+0x992>
 800d590:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d592:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d596:	b322      	cbz	r2, 800d5e2 <_strtod_l+0x8da>
 800d598:	4ab7      	ldr	r2, [pc, #732]	; (800d878 <_strtod_l+0xb70>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d154      	bne.n	800d648 <_strtod_l+0x940>
 800d59e:	4651      	mov	r1, sl
 800d5a0:	b1e7      	cbz	r7, 800d5dc <_strtod_l+0x8d4>
 800d5a2:	4bb6      	ldr	r3, [pc, #728]	; (800d87c <_strtod_l+0xb74>)
 800d5a4:	465a      	mov	r2, fp
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b0:	d803      	bhi.n	800d5ba <_strtod_l+0x8b2>
 800d5b2:	0d1b      	lsrs	r3, r3, #20
 800d5b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d5b8:	409a      	lsls	r2, r3
 800d5ba:	4291      	cmp	r1, r2
 800d5bc:	d144      	bne.n	800d648 <_strtod_l+0x940>
 800d5be:	4bb0      	ldr	r3, [pc, #704]	; (800d880 <_strtod_l+0xb78>)
 800d5c0:	9a08      	ldr	r2, [sp, #32]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d102      	bne.n	800d5cc <_strtod_l+0x8c4>
 800d5c6:	3101      	adds	r1, #1
 800d5c8:	f43f adcd 	beq.w	800d166 <_strtod_l+0x45e>
 800d5cc:	4bab      	ldr	r3, [pc, #684]	; (800d87c <_strtod_l+0xb74>)
 800d5ce:	9a08      	ldr	r2, [sp, #32]
 800d5d0:	401a      	ands	r2, r3
 800d5d2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800d5d6:	f04f 0a00 	mov.w	sl, #0
 800d5da:	e790      	b.n	800d4fe <_strtod_l+0x7f6>
 800d5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5e0:	e7eb      	b.n	800d5ba <_strtod_l+0x8b2>
 800d5e2:	bb8b      	cbnz	r3, 800d648 <_strtod_l+0x940>
 800d5e4:	f1ba 0f00 	cmp.w	sl, #0
 800d5e8:	d12e      	bne.n	800d648 <_strtod_l+0x940>
 800d5ea:	465b      	mov	r3, fp
 800d5ec:	4aa3      	ldr	r2, [pc, #652]	; (800d87c <_strtod_l+0xb74>)
 800d5ee:	b30f      	cbz	r7, 800d634 <_strtod_l+0x92c>
 800d5f0:	ea02 010b 	and.w	r1, r2, fp
 800d5f4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d5f8:	dc1c      	bgt.n	800d634 <_strtod_l+0x92c>
 800d5fa:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d5fe:	f77f ae48 	ble.w	800d292 <_strtod_l+0x58a>
 800d602:	4aa0      	ldr	r2, [pc, #640]	; (800d884 <_strtod_l+0xb7c>)
 800d604:	2300      	movs	r3, #0
 800d606:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800d60a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800d60e:	ec4b ab17 	vmov	d7, sl, fp
 800d612:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d616:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d61a:	9b05      	ldr	r3, [sp, #20]
 800d61c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d620:	2b00      	cmp	r3, #0
 800d622:	f47f adaa 	bne.w	800d17a <_strtod_l+0x472>
 800d626:	9b04      	ldr	r3, [sp, #16]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f47f ada6 	bne.w	800d17a <_strtod_l+0x472>
 800d62e:	2322      	movs	r3, #34	; 0x22
 800d630:	6023      	str	r3, [r4, #0]
 800d632:	e5a2      	b.n	800d17a <_strtod_l+0x472>
 800d634:	4013      	ands	r3, r2
 800d636:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d63a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d63e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d642:	f04f 3aff 	mov.w	sl, #4294967295
 800d646:	e75a      	b.n	800d4fe <_strtod_l+0x7f6>
 800d648:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d64a:	b18b      	cbz	r3, 800d670 <_strtod_l+0x968>
 800d64c:	9a08      	ldr	r2, [sp, #32]
 800d64e:	4213      	tst	r3, r2
 800d650:	f43f af55 	beq.w	800d4fe <_strtod_l+0x7f6>
 800d654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d656:	463a      	mov	r2, r7
 800d658:	4650      	mov	r0, sl
 800d65a:	4659      	mov	r1, fp
 800d65c:	b163      	cbz	r3, 800d678 <_strtod_l+0x970>
 800d65e:	f7ff fb39 	bl	800ccd4 <sulp>
 800d662:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800d666:	ee37 7b00 	vadd.f64	d7, d7, d0
 800d66a:	ec5b ab17 	vmov	sl, fp, d7
 800d66e:	e746      	b.n	800d4fe <_strtod_l+0x7f6>
 800d670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d672:	ea13 0f0a 	tst.w	r3, sl
 800d676:	e7eb      	b.n	800d650 <_strtod_l+0x948>
 800d678:	f7ff fb2c 	bl	800ccd4 <sulp>
 800d67c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800d680:	ee37 7b40 	vsub.f64	d7, d7, d0
 800d684:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d688:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d690:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d694:	f43f adfd 	beq.w	800d292 <_strtod_l+0x58a>
 800d698:	e731      	b.n	800d4fe <_strtod_l+0x7f6>
 800d69a:	4641      	mov	r1, r8
 800d69c:	4628      	mov	r0, r5
 800d69e:	f001 fe62 	bl	800f366 <__ratio>
 800d6a2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800d6a6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ae:	d869      	bhi.n	800d784 <_strtod_l+0xa7c>
 800d6b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d045      	beq.n	800d742 <_strtod_l+0xa3a>
 800d6b6:	4b74      	ldr	r3, [pc, #464]	; (800d888 <_strtod_l+0xb80>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800d6be:	9808      	ldr	r0, [sp, #32]
 800d6c0:	496e      	ldr	r1, [pc, #440]	; (800d87c <_strtod_l+0xb74>)
 800d6c2:	ea00 0601 	and.w	r6, r0, r1
 800d6c6:	4871      	ldr	r0, [pc, #452]	; (800d88c <_strtod_l+0xb84>)
 800d6c8:	4286      	cmp	r6, r0
 800d6ca:	f040 8089 	bne.w	800d7e0 <_strtod_l+0xad8>
 800d6ce:	910f      	str	r1, [sp, #60]	; 0x3c
 800d6d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d6d4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800d6d8:	9908      	ldr	r1, [sp, #32]
 800d6da:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800d6de:	ec4b ab10 	vmov	d0, sl, fp
 800d6e2:	ec43 2b1c 	vmov	d12, r2, r3
 800d6e6:	f001 fd79 	bl	800f1dc <__ulp>
 800d6ea:	ec4b ab1d 	vmov	d13, sl, fp
 800d6ee:	eeac db00 	vfma.f64	d13, d12, d0
 800d6f2:	ed8d db08 	vstr	d13, [sp, #32]
 800d6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d6fa:	4a65      	ldr	r2, [pc, #404]	; (800d890 <_strtod_l+0xb88>)
 800d6fc:	4019      	ands	r1, r3
 800d6fe:	4291      	cmp	r1, r2
 800d700:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800d704:	d948      	bls.n	800d798 <_strtod_l+0xa90>
 800d706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d708:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d103      	bne.n	800d718 <_strtod_l+0xa10>
 800d710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d712:	3301      	adds	r3, #1
 800d714:	f43f ad27 	beq.w	800d166 <_strtod_l+0x45e>
 800d718:	f8df b164 	ldr.w	fp, [pc, #356]	; 800d880 <_strtod_l+0xb78>
 800d71c:	f04f 3aff 	mov.w	sl, #4294967295
 800d720:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d722:	4620      	mov	r0, r4
 800d724:	f001 fac3 	bl	800ecae <_Bfree>
 800d728:	4649      	mov	r1, r9
 800d72a:	4620      	mov	r0, r4
 800d72c:	f001 fabf 	bl	800ecae <_Bfree>
 800d730:	4641      	mov	r1, r8
 800d732:	4620      	mov	r0, r4
 800d734:	f001 fabb 	bl	800ecae <_Bfree>
 800d738:	4629      	mov	r1, r5
 800d73a:	4620      	mov	r0, r4
 800d73c:	f001 fab7 	bl	800ecae <_Bfree>
 800d740:	e60e      	b.n	800d360 <_strtod_l+0x658>
 800d742:	f1ba 0f00 	cmp.w	sl, #0
 800d746:	d113      	bne.n	800d770 <_strtod_l+0xa68>
 800d748:	9b08      	ldr	r3, [sp, #32]
 800d74a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d74e:	b9b3      	cbnz	r3, 800d77e <_strtod_l+0xa76>
 800d750:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d754:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800d758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d75c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800d760:	d401      	bmi.n	800d766 <_strtod_l+0xa5e>
 800d762:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d766:	eeb1 7b48 	vneg.f64	d7, d8
 800d76a:	ec53 2b17 	vmov	r2, r3, d7
 800d76e:	e7a6      	b.n	800d6be <_strtod_l+0x9b6>
 800d770:	f1ba 0f01 	cmp.w	sl, #1
 800d774:	d103      	bne.n	800d77e <_strtod_l+0xa76>
 800d776:	9b08      	ldr	r3, [sp, #32]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	f43f ad8a 	beq.w	800d292 <_strtod_l+0x58a>
 800d77e:	2200      	movs	r2, #0
 800d780:	4b44      	ldr	r3, [pc, #272]	; (800d894 <_strtod_l+0xb8c>)
 800d782:	e79a      	b.n	800d6ba <_strtod_l+0x9b2>
 800d784:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d786:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800d78a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0e9      	beq.n	800d766 <_strtod_l+0xa5e>
 800d792:	ec53 2b18 	vmov	r2, r3, d8
 800d796:	e792      	b.n	800d6be <_strtod_l+0x9b6>
 800d798:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d79c:	2f00      	cmp	r7, #0
 800d79e:	d1bf      	bne.n	800d720 <_strtod_l+0xa18>
 800d7a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7a4:	0d1b      	lsrs	r3, r3, #20
 800d7a6:	051b      	lsls	r3, r3, #20
 800d7a8:	429e      	cmp	r6, r3
 800d7aa:	d1b9      	bne.n	800d720 <_strtod_l+0xa18>
 800d7ac:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800d7b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d7b2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800d7b6:	ee38 8b40 	vsub.f64	d8, d8, d0
 800d7ba:	b92b      	cbnz	r3, 800d7c8 <_strtod_l+0xac0>
 800d7bc:	f1ba 0f00 	cmp.w	sl, #0
 800d7c0:	d102      	bne.n	800d7c8 <_strtod_l+0xac0>
 800d7c2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800d7c6:	b3d2      	cbz	r2, 800d83e <_strtod_l+0xb36>
 800d7c8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d0:	f53f acd3 	bmi.w	800d17a <_strtod_l+0x472>
 800d7d4:	eeb4 8bca 	vcmpe.f64	d8, d10
 800d7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7dc:	dda0      	ble.n	800d720 <_strtod_l+0xa18>
 800d7de:	e4cc      	b.n	800d17a <_strtod_l+0x472>
 800d7e0:	b1ef      	cbz	r7, 800d81e <_strtod_l+0xb16>
 800d7e2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800d7e6:	d81a      	bhi.n	800d81e <_strtod_l+0xb16>
 800d7e8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800d870 <_strtod_l+0xb68>
 800d7ec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800d7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f4:	d810      	bhi.n	800d818 <_strtod_l+0xb10>
 800d7f6:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800d7fa:	ee17 3a90 	vmov	r3, s15
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	bf08      	it	eq
 800d802:	2301      	moveq	r3, #1
 800d804:	ee07 3a90 	vmov	s15, r3
 800d808:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d80a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800d80e:	b99b      	cbnz	r3, 800d838 <_strtod_l+0xb30>
 800d810:	eeb1 7b48 	vneg.f64	d7, d8
 800d814:	ec53 2b17 	vmov	r2, r3, d7
 800d818:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800d81c:	1b8b      	subs	r3, r1, r6
 800d81e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d822:	ec43 2b1c 	vmov	d12, r2, r3
 800d826:	f001 fcd9 	bl	800f1dc <__ulp>
 800d82a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800d82e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800d832:	ec5b ab17 	vmov	sl, fp, d7
 800d836:	e7b1      	b.n	800d79c <_strtod_l+0xa94>
 800d838:	ec53 2b18 	vmov	r2, r3, d8
 800d83c:	e7ec      	b.n	800d818 <_strtod_l+0xb10>
 800d83e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800d842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d846:	f57f af6b 	bpl.w	800d720 <_strtod_l+0xa18>
 800d84a:	e496      	b.n	800d17a <_strtod_l+0x472>
 800d84c:	2300      	movs	r3, #0
 800d84e:	930d      	str	r3, [sp, #52]	; 0x34
 800d850:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d854:	6013      	str	r3, [r2, #0]
 800d856:	f7ff ba9d 	b.w	800cd94 <_strtod_l+0x8c>
 800d85a:	2a65      	cmp	r2, #101	; 0x65
 800d85c:	f04f 0100 	mov.w	r1, #0
 800d860:	f43f ab97 	beq.w	800cf92 <_strtod_l+0x28a>
 800d864:	2701      	movs	r7, #1
 800d866:	460b      	mov	r3, r1
 800d868:	9704      	str	r7, [sp, #16]
 800d86a:	f7ff bb0a 	b.w	800ce82 <_strtod_l+0x17a>
 800d86e:	bf00      	nop
 800d870:	ffc00000 	.word	0xffc00000
 800d874:	41dfffff 	.word	0x41dfffff
 800d878:	000fffff 	.word	0x000fffff
 800d87c:	7ff00000 	.word	0x7ff00000
 800d880:	7fefffff 	.word	0x7fefffff
 800d884:	39500000 	.word	0x39500000
 800d888:	3ff00000 	.word	0x3ff00000
 800d88c:	7fe00000 	.word	0x7fe00000
 800d890:	7c9fffff 	.word	0x7c9fffff
 800d894:	bff00000 	.word	0xbff00000

0800d898 <_strtod_r>:
 800d898:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <_strtod_r+0x18>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	b410      	push	{r4}
 800d89e:	6a1b      	ldr	r3, [r3, #32]
 800d8a0:	4c04      	ldr	r4, [pc, #16]	; (800d8b4 <_strtod_r+0x1c>)
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	bf08      	it	eq
 800d8a6:	4623      	moveq	r3, r4
 800d8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8ac:	f7ff ba2c 	b.w	800cd08 <_strtod_l>
 800d8b0:	20000024 	.word	0x20000024
 800d8b4:	20000088 	.word	0x20000088

0800d8b8 <_strtol_l.isra.0>:
 800d8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8bc:	4680      	mov	r8, r0
 800d8be:	4689      	mov	r9, r1
 800d8c0:	4692      	mov	sl, r2
 800d8c2:	461e      	mov	r6, r3
 800d8c4:	460f      	mov	r7, r1
 800d8c6:	463d      	mov	r5, r7
 800d8c8:	9808      	ldr	r0, [sp, #32]
 800d8ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8ce:	f001 f981 	bl	800ebd4 <__locale_ctype_ptr_l>
 800d8d2:	4420      	add	r0, r4
 800d8d4:	7843      	ldrb	r3, [r0, #1]
 800d8d6:	f013 0308 	ands.w	r3, r3, #8
 800d8da:	d132      	bne.n	800d942 <_strtol_l.isra.0+0x8a>
 800d8dc:	2c2d      	cmp	r4, #45	; 0x2d
 800d8de:	d132      	bne.n	800d946 <_strtol_l.isra.0+0x8e>
 800d8e0:	787c      	ldrb	r4, [r7, #1]
 800d8e2:	1cbd      	adds	r5, r7, #2
 800d8e4:	2201      	movs	r2, #1
 800d8e6:	2e00      	cmp	r6, #0
 800d8e8:	d05d      	beq.n	800d9a6 <_strtol_l.isra.0+0xee>
 800d8ea:	2e10      	cmp	r6, #16
 800d8ec:	d109      	bne.n	800d902 <_strtol_l.isra.0+0x4a>
 800d8ee:	2c30      	cmp	r4, #48	; 0x30
 800d8f0:	d107      	bne.n	800d902 <_strtol_l.isra.0+0x4a>
 800d8f2:	782b      	ldrb	r3, [r5, #0]
 800d8f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d8f8:	2b58      	cmp	r3, #88	; 0x58
 800d8fa:	d14f      	bne.n	800d99c <_strtol_l.isra.0+0xe4>
 800d8fc:	786c      	ldrb	r4, [r5, #1]
 800d8fe:	2610      	movs	r6, #16
 800d900:	3502      	adds	r5, #2
 800d902:	2a00      	cmp	r2, #0
 800d904:	bf14      	ite	ne
 800d906:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d90a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d90e:	2700      	movs	r7, #0
 800d910:	fbb1 fcf6 	udiv	ip, r1, r6
 800d914:	4638      	mov	r0, r7
 800d916:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d91a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d91e:	2b09      	cmp	r3, #9
 800d920:	d817      	bhi.n	800d952 <_strtol_l.isra.0+0x9a>
 800d922:	461c      	mov	r4, r3
 800d924:	42a6      	cmp	r6, r4
 800d926:	dd23      	ble.n	800d970 <_strtol_l.isra.0+0xb8>
 800d928:	1c7b      	adds	r3, r7, #1
 800d92a:	d007      	beq.n	800d93c <_strtol_l.isra.0+0x84>
 800d92c:	4584      	cmp	ip, r0
 800d92e:	d31c      	bcc.n	800d96a <_strtol_l.isra.0+0xb2>
 800d930:	d101      	bne.n	800d936 <_strtol_l.isra.0+0x7e>
 800d932:	45a6      	cmp	lr, r4
 800d934:	db19      	blt.n	800d96a <_strtol_l.isra.0+0xb2>
 800d936:	fb00 4006 	mla	r0, r0, r6, r4
 800d93a:	2701      	movs	r7, #1
 800d93c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d940:	e7eb      	b.n	800d91a <_strtol_l.isra.0+0x62>
 800d942:	462f      	mov	r7, r5
 800d944:	e7bf      	b.n	800d8c6 <_strtol_l.isra.0+0xe>
 800d946:	2c2b      	cmp	r4, #43	; 0x2b
 800d948:	bf04      	itt	eq
 800d94a:	1cbd      	addeq	r5, r7, #2
 800d94c:	787c      	ldrbeq	r4, [r7, #1]
 800d94e:	461a      	mov	r2, r3
 800d950:	e7c9      	b.n	800d8e6 <_strtol_l.isra.0+0x2e>
 800d952:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d956:	2b19      	cmp	r3, #25
 800d958:	d801      	bhi.n	800d95e <_strtol_l.isra.0+0xa6>
 800d95a:	3c37      	subs	r4, #55	; 0x37
 800d95c:	e7e2      	b.n	800d924 <_strtol_l.isra.0+0x6c>
 800d95e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d962:	2b19      	cmp	r3, #25
 800d964:	d804      	bhi.n	800d970 <_strtol_l.isra.0+0xb8>
 800d966:	3c57      	subs	r4, #87	; 0x57
 800d968:	e7dc      	b.n	800d924 <_strtol_l.isra.0+0x6c>
 800d96a:	f04f 37ff 	mov.w	r7, #4294967295
 800d96e:	e7e5      	b.n	800d93c <_strtol_l.isra.0+0x84>
 800d970:	1c7b      	adds	r3, r7, #1
 800d972:	d108      	bne.n	800d986 <_strtol_l.isra.0+0xce>
 800d974:	2322      	movs	r3, #34	; 0x22
 800d976:	f8c8 3000 	str.w	r3, [r8]
 800d97a:	4608      	mov	r0, r1
 800d97c:	f1ba 0f00 	cmp.w	sl, #0
 800d980:	d107      	bne.n	800d992 <_strtol_l.isra.0+0xda>
 800d982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d986:	b102      	cbz	r2, 800d98a <_strtol_l.isra.0+0xd2>
 800d988:	4240      	negs	r0, r0
 800d98a:	f1ba 0f00 	cmp.w	sl, #0
 800d98e:	d0f8      	beq.n	800d982 <_strtol_l.isra.0+0xca>
 800d990:	b10f      	cbz	r7, 800d996 <_strtol_l.isra.0+0xde>
 800d992:	f105 39ff 	add.w	r9, r5, #4294967295
 800d996:	f8ca 9000 	str.w	r9, [sl]
 800d99a:	e7f2      	b.n	800d982 <_strtol_l.isra.0+0xca>
 800d99c:	2430      	movs	r4, #48	; 0x30
 800d99e:	2e00      	cmp	r6, #0
 800d9a0:	d1af      	bne.n	800d902 <_strtol_l.isra.0+0x4a>
 800d9a2:	2608      	movs	r6, #8
 800d9a4:	e7ad      	b.n	800d902 <_strtol_l.isra.0+0x4a>
 800d9a6:	2c30      	cmp	r4, #48	; 0x30
 800d9a8:	d0a3      	beq.n	800d8f2 <_strtol_l.isra.0+0x3a>
 800d9aa:	260a      	movs	r6, #10
 800d9ac:	e7a9      	b.n	800d902 <_strtol_l.isra.0+0x4a>
	...

0800d9b0 <_strtol_r>:
 800d9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9b2:	4c06      	ldr	r4, [pc, #24]	; (800d9cc <_strtol_r+0x1c>)
 800d9b4:	4d06      	ldr	r5, [pc, #24]	; (800d9d0 <_strtol_r+0x20>)
 800d9b6:	6824      	ldr	r4, [r4, #0]
 800d9b8:	6a24      	ldr	r4, [r4, #32]
 800d9ba:	2c00      	cmp	r4, #0
 800d9bc:	bf08      	it	eq
 800d9be:	462c      	moveq	r4, r5
 800d9c0:	9400      	str	r4, [sp, #0]
 800d9c2:	f7ff ff79 	bl	800d8b8 <_strtol_l.isra.0>
 800d9c6:	b003      	add	sp, #12
 800d9c8:	bd30      	pop	{r4, r5, pc}
 800d9ca:	bf00      	nop
 800d9cc:	20000024 	.word	0x20000024
 800d9d0:	20000088 	.word	0x20000088

0800d9d4 <quorem>:
 800d9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d8:	6903      	ldr	r3, [r0, #16]
 800d9da:	690c      	ldr	r4, [r1, #16]
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	4680      	mov	r8, r0
 800d9e0:	f2c0 8082 	blt.w	800dae8 <quorem+0x114>
 800d9e4:	3c01      	subs	r4, #1
 800d9e6:	f101 0714 	add.w	r7, r1, #20
 800d9ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d9ee:	f100 0614 	add.w	r6, r0, #20
 800d9f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d9f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d9fa:	eb06 030c 	add.w	r3, r6, ip
 800d9fe:	3501      	adds	r5, #1
 800da00:	eb07 090c 	add.w	r9, r7, ip
 800da04:	9301      	str	r3, [sp, #4]
 800da06:	fbb0 f5f5 	udiv	r5, r0, r5
 800da0a:	b395      	cbz	r5, 800da72 <quorem+0x9e>
 800da0c:	f04f 0a00 	mov.w	sl, #0
 800da10:	4638      	mov	r0, r7
 800da12:	46b6      	mov	lr, r6
 800da14:	46d3      	mov	fp, sl
 800da16:	f850 2b04 	ldr.w	r2, [r0], #4
 800da1a:	b293      	uxth	r3, r2
 800da1c:	fb05 a303 	mla	r3, r5, r3, sl
 800da20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da24:	b29b      	uxth	r3, r3
 800da26:	ebab 0303 	sub.w	r3, fp, r3
 800da2a:	0c12      	lsrs	r2, r2, #16
 800da2c:	f8de b000 	ldr.w	fp, [lr]
 800da30:	fb05 a202 	mla	r2, r5, r2, sl
 800da34:	fa13 f38b 	uxtah	r3, r3, fp
 800da38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800da3c:	fa1f fb82 	uxth.w	fp, r2
 800da40:	f8de 2000 	ldr.w	r2, [lr]
 800da44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800da48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da52:	4581      	cmp	r9, r0
 800da54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800da58:	f84e 3b04 	str.w	r3, [lr], #4
 800da5c:	d2db      	bcs.n	800da16 <quorem+0x42>
 800da5e:	f856 300c 	ldr.w	r3, [r6, ip]
 800da62:	b933      	cbnz	r3, 800da72 <quorem+0x9e>
 800da64:	9b01      	ldr	r3, [sp, #4]
 800da66:	3b04      	subs	r3, #4
 800da68:	429e      	cmp	r6, r3
 800da6a:	461a      	mov	r2, r3
 800da6c:	d330      	bcc.n	800dad0 <quorem+0xfc>
 800da6e:	f8c8 4010 	str.w	r4, [r8, #16]
 800da72:	4640      	mov	r0, r8
 800da74:	f001 fb3a 	bl	800f0ec <__mcmp>
 800da78:	2800      	cmp	r0, #0
 800da7a:	db25      	blt.n	800dac8 <quorem+0xf4>
 800da7c:	3501      	adds	r5, #1
 800da7e:	4630      	mov	r0, r6
 800da80:	f04f 0c00 	mov.w	ip, #0
 800da84:	f857 2b04 	ldr.w	r2, [r7], #4
 800da88:	f8d0 e000 	ldr.w	lr, [r0]
 800da8c:	b293      	uxth	r3, r2
 800da8e:	ebac 0303 	sub.w	r3, ip, r3
 800da92:	0c12      	lsrs	r2, r2, #16
 800da94:	fa13 f38e 	uxtah	r3, r3, lr
 800da98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800daa6:	45b9      	cmp	r9, r7
 800daa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800daac:	f840 3b04 	str.w	r3, [r0], #4
 800dab0:	d2e8      	bcs.n	800da84 <quorem+0xb0>
 800dab2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dab6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800daba:	b92a      	cbnz	r2, 800dac8 <quorem+0xf4>
 800dabc:	3b04      	subs	r3, #4
 800dabe:	429e      	cmp	r6, r3
 800dac0:	461a      	mov	r2, r3
 800dac2:	d30b      	bcc.n	800dadc <quorem+0x108>
 800dac4:	f8c8 4010 	str.w	r4, [r8, #16]
 800dac8:	4628      	mov	r0, r5
 800daca:	b003      	add	sp, #12
 800dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad0:	6812      	ldr	r2, [r2, #0]
 800dad2:	3b04      	subs	r3, #4
 800dad4:	2a00      	cmp	r2, #0
 800dad6:	d1ca      	bne.n	800da6e <quorem+0x9a>
 800dad8:	3c01      	subs	r4, #1
 800dada:	e7c5      	b.n	800da68 <quorem+0x94>
 800dadc:	6812      	ldr	r2, [r2, #0]
 800dade:	3b04      	subs	r3, #4
 800dae0:	2a00      	cmp	r2, #0
 800dae2:	d1ef      	bne.n	800dac4 <quorem+0xf0>
 800dae4:	3c01      	subs	r4, #1
 800dae6:	e7ea      	b.n	800dabe <quorem+0xea>
 800dae8:	2000      	movs	r0, #0
 800daea:	e7ee      	b.n	800daca <quorem+0xf6>
 800daec:	0000      	movs	r0, r0
	...

0800daf0 <_dtoa_r>:
 800daf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf4:	ec57 6b10 	vmov	r6, r7, d0
 800daf8:	b095      	sub	sp, #84	; 0x54
 800dafa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dafc:	9108      	str	r1, [sp, #32]
 800dafe:	4604      	mov	r4, r0
 800db00:	920a      	str	r2, [sp, #40]	; 0x28
 800db02:	9311      	str	r3, [sp, #68]	; 0x44
 800db04:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800db08:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800db0c:	b93d      	cbnz	r5, 800db1e <_dtoa_r+0x2e>
 800db0e:	2010      	movs	r0, #16
 800db10:	f001 f874 	bl	800ebfc <malloc>
 800db14:	6260      	str	r0, [r4, #36]	; 0x24
 800db16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db1a:	6005      	str	r5, [r0, #0]
 800db1c:	60c5      	str	r5, [r0, #12]
 800db1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db20:	6819      	ldr	r1, [r3, #0]
 800db22:	b151      	cbz	r1, 800db3a <_dtoa_r+0x4a>
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	604a      	str	r2, [r1, #4]
 800db28:	2301      	movs	r3, #1
 800db2a:	4093      	lsls	r3, r2
 800db2c:	608b      	str	r3, [r1, #8]
 800db2e:	4620      	mov	r0, r4
 800db30:	f001 f8bd 	bl	800ecae <_Bfree>
 800db34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db36:	2200      	movs	r2, #0
 800db38:	601a      	str	r2, [r3, #0]
 800db3a:	1e3b      	subs	r3, r7, #0
 800db3c:	bfb9      	ittee	lt
 800db3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800db42:	9303      	strlt	r3, [sp, #12]
 800db44:	2300      	movge	r3, #0
 800db46:	f8c8 3000 	strge.w	r3, [r8]
 800db4a:	9d03      	ldr	r5, [sp, #12]
 800db4c:	4bac      	ldr	r3, [pc, #688]	; (800de00 <_dtoa_r+0x310>)
 800db4e:	bfbc      	itt	lt
 800db50:	2201      	movlt	r2, #1
 800db52:	f8c8 2000 	strlt.w	r2, [r8]
 800db56:	43ab      	bics	r3, r5
 800db58:	d11b      	bne.n	800db92 <_dtoa_r+0xa2>
 800db5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800db5c:	f242 730f 	movw	r3, #9999	; 0x270f
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	9b02      	ldr	r3, [sp, #8]
 800db64:	b923      	cbnz	r3, 800db70 <_dtoa_r+0x80>
 800db66:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800db6a:	2d00      	cmp	r5, #0
 800db6c:	f000 84dd 	beq.w	800e52a <_dtoa_r+0xa3a>
 800db70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db72:	b953      	cbnz	r3, 800db8a <_dtoa_r+0x9a>
 800db74:	4ba3      	ldr	r3, [pc, #652]	; (800de04 <_dtoa_r+0x314>)
 800db76:	e020      	b.n	800dbba <_dtoa_r+0xca>
 800db78:	4ba3      	ldr	r3, [pc, #652]	; (800de08 <_dtoa_r+0x318>)
 800db7a:	9304      	str	r3, [sp, #16]
 800db7c:	3308      	adds	r3, #8
 800db7e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800db80:	6013      	str	r3, [r2, #0]
 800db82:	9804      	ldr	r0, [sp, #16]
 800db84:	b015      	add	sp, #84	; 0x54
 800db86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db8a:	4b9e      	ldr	r3, [pc, #632]	; (800de04 <_dtoa_r+0x314>)
 800db8c:	9304      	str	r3, [sp, #16]
 800db8e:	3303      	adds	r3, #3
 800db90:	e7f5      	b.n	800db7e <_dtoa_r+0x8e>
 800db92:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800db9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dba2:	d10c      	bne.n	800dbbe <_dtoa_r+0xce>
 800dba4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800dba6:	2301      	movs	r3, #1
 800dba8:	6013      	str	r3, [r2, #0]
 800dbaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f000 84b9 	beq.w	800e524 <_dtoa_r+0xa34>
 800dbb2:	4b96      	ldr	r3, [pc, #600]	; (800de0c <_dtoa_r+0x31c>)
 800dbb4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dbb6:	6013      	str	r3, [r2, #0]
 800dbb8:	3b01      	subs	r3, #1
 800dbba:	9304      	str	r3, [sp, #16]
 800dbbc:	e7e1      	b.n	800db82 <_dtoa_r+0x92>
 800dbbe:	a913      	add	r1, sp, #76	; 0x4c
 800dbc0:	aa12      	add	r2, sp, #72	; 0x48
 800dbc2:	ed9d 0b04 	vldr	d0, [sp, #16]
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	f001 fb7e 	bl	800f2c8 <__d2b>
 800dbcc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800dbd0:	9001      	str	r0, [sp, #4]
 800dbd2:	9912      	ldr	r1, [sp, #72]	; 0x48
 800dbd4:	2e00      	cmp	r6, #0
 800dbd6:	d046      	beq.n	800dc66 <_dtoa_r+0x176>
 800dbd8:	9805      	ldr	r0, [sp, #20]
 800dbda:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800dbde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbe2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800dbe6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dbea:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800dbee:	2700      	movs	r7, #0
 800dbf0:	ee07 aa90 	vmov	s15, sl
 800dbf4:	ec43 2b16 	vmov	d6, r2, r3
 800dbf8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800dbfc:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800dde8 <_dtoa_r+0x2f8>
 800dc00:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dc04:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc08:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ddf0 <_dtoa_r+0x300>
 800dc0c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800dc10:	eeb0 7b46 	vmov.f64	d7, d6
 800dc14:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800ddf8 <_dtoa_r+0x308>
 800dc18:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dc1c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800dc20:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc28:	ee16 ba90 	vmov	fp, s13
 800dc2c:	d508      	bpl.n	800dc40 <_dtoa_r+0x150>
 800dc2e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800dc32:	eeb4 6b47 	vcmp.f64	d6, d7
 800dc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3a:	bf18      	it	ne
 800dc3c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800dc40:	f1bb 0f16 	cmp.w	fp, #22
 800dc44:	d834      	bhi.n	800dcb0 <_dtoa_r+0x1c0>
 800dc46:	4b72      	ldr	r3, [pc, #456]	; (800de10 <_dtoa_r+0x320>)
 800dc48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dc4c:	ed93 7b00 	vldr	d7, [r3]
 800dc50:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dc54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5c:	dd01      	ble.n	800dc62 <_dtoa_r+0x172>
 800dc5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc62:	2300      	movs	r3, #0
 800dc64:	e025      	b.n	800dcb2 <_dtoa_r+0x1c2>
 800dc66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc68:	eb01 0a03 	add.w	sl, r1, r3
 800dc6c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800dc70:	2b20      	cmp	r3, #32
 800dc72:	dd17      	ble.n	800dca4 <_dtoa_r+0x1b4>
 800dc74:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800dc78:	9a02      	ldr	r2, [sp, #8]
 800dc7a:	409d      	lsls	r5, r3
 800dc7c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800dc80:	fa22 f303 	lsr.w	r3, r2, r3
 800dc84:	432b      	orrs	r3, r5
 800dc86:	ee07 3a90 	vmov	s15, r3
 800dc8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dc8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc92:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dc96:	9805      	ldr	r0, [sp, #20]
 800dc98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc9c:	2701      	movs	r7, #1
 800dc9e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800dca2:	e7a5      	b.n	800dbf0 <_dtoa_r+0x100>
 800dca4:	9a02      	ldr	r2, [sp, #8]
 800dca6:	f1c3 0320 	rsb	r3, r3, #32
 800dcaa:	fa02 f303 	lsl.w	r3, r2, r3
 800dcae:	e7ea      	b.n	800dc86 <_dtoa_r+0x196>
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	eba1 0a0a 	sub.w	sl, r1, sl
 800dcb6:	9310      	str	r3, [sp, #64]	; 0x40
 800dcb8:	f1ba 0301 	subs.w	r3, sl, #1
 800dcbc:	9307      	str	r3, [sp, #28]
 800dcbe:	bf43      	ittte	mi
 800dcc0:	2300      	movmi	r3, #0
 800dcc2:	f1ca 0a01 	rsbmi	sl, sl, #1
 800dcc6:	9307      	strmi	r3, [sp, #28]
 800dcc8:	f04f 0a00 	movpl.w	sl, #0
 800dccc:	f1bb 0f00 	cmp.w	fp, #0
 800dcd0:	db19      	blt.n	800dd06 <_dtoa_r+0x216>
 800dcd2:	9b07      	ldr	r3, [sp, #28]
 800dcd4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800dcd8:	445b      	add	r3, fp
 800dcda:	9307      	str	r3, [sp, #28]
 800dcdc:	f04f 0800 	mov.w	r8, #0
 800dce0:	9b08      	ldr	r3, [sp, #32]
 800dce2:	2b09      	cmp	r3, #9
 800dce4:	d866      	bhi.n	800ddb4 <_dtoa_r+0x2c4>
 800dce6:	2b05      	cmp	r3, #5
 800dce8:	bfc4      	itt	gt
 800dcea:	3b04      	subgt	r3, #4
 800dcec:	9308      	strgt	r3, [sp, #32]
 800dcee:	9b08      	ldr	r3, [sp, #32]
 800dcf0:	f1a3 0302 	sub.w	r3, r3, #2
 800dcf4:	bfcc      	ite	gt
 800dcf6:	2500      	movgt	r5, #0
 800dcf8:	2501      	movle	r5, #1
 800dcfa:	2b03      	cmp	r3, #3
 800dcfc:	d866      	bhi.n	800ddcc <_dtoa_r+0x2dc>
 800dcfe:	e8df f003 	tbb	[pc, r3]
 800dd02:	5755      	.short	0x5755
 800dd04:	4909      	.short	0x4909
 800dd06:	2300      	movs	r3, #0
 800dd08:	ebaa 0a0b 	sub.w	sl, sl, fp
 800dd0c:	f1cb 0800 	rsb	r8, fp, #0
 800dd10:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd12:	e7e5      	b.n	800dce0 <_dtoa_r+0x1f0>
 800dd14:	2301      	movs	r3, #1
 800dd16:	9309      	str	r3, [sp, #36]	; 0x24
 800dd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dd59      	ble.n	800ddd2 <_dtoa_r+0x2e2>
 800dd1e:	9306      	str	r3, [sp, #24]
 800dd20:	4699      	mov	r9, r3
 800dd22:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dd24:	2200      	movs	r2, #0
 800dd26:	6072      	str	r2, [r6, #4]
 800dd28:	2204      	movs	r2, #4
 800dd2a:	f102 0014 	add.w	r0, r2, #20
 800dd2e:	4298      	cmp	r0, r3
 800dd30:	6871      	ldr	r1, [r6, #4]
 800dd32:	d953      	bls.n	800dddc <_dtoa_r+0x2ec>
 800dd34:	4620      	mov	r0, r4
 800dd36:	f000 ff86 	bl	800ec46 <_Balloc>
 800dd3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd3c:	6030      	str	r0, [r6, #0]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	9304      	str	r3, [sp, #16]
 800dd42:	f1b9 0f0e 	cmp.w	r9, #14
 800dd46:	f200 80c2 	bhi.w	800dece <_dtoa_r+0x3de>
 800dd4a:	2d00      	cmp	r5, #0
 800dd4c:	f000 80bf 	beq.w	800dece <_dtoa_r+0x3de>
 800dd50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd54:	f1bb 0f00 	cmp.w	fp, #0
 800dd58:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800dd5c:	f340 80e6 	ble.w	800df2c <_dtoa_r+0x43c>
 800dd60:	4a2b      	ldr	r2, [pc, #172]	; (800de10 <_dtoa_r+0x320>)
 800dd62:	f00b 030f 	and.w	r3, fp, #15
 800dd66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd6a:	ed93 7b00 	vldr	d7, [r3]
 800dd6e:	ea4f 132b 	mov.w	r3, fp, asr #4
 800dd72:	06da      	lsls	r2, r3, #27
 800dd74:	f140 80d8 	bpl.w	800df28 <_dtoa_r+0x438>
 800dd78:	4a26      	ldr	r2, [pc, #152]	; (800de14 <_dtoa_r+0x324>)
 800dd7a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800dd7e:	ed92 6b08 	vldr	d6, [r2, #32]
 800dd82:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800dd86:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dd8a:	f003 030f 	and.w	r3, r3, #15
 800dd8e:	2203      	movs	r2, #3
 800dd90:	4920      	ldr	r1, [pc, #128]	; (800de14 <_dtoa_r+0x324>)
 800dd92:	e04a      	b.n	800de2a <_dtoa_r+0x33a>
 800dd94:	2301      	movs	r3, #1
 800dd96:	9309      	str	r3, [sp, #36]	; 0x24
 800dd98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd9a:	445b      	add	r3, fp
 800dd9c:	f103 0901 	add.w	r9, r3, #1
 800dda0:	9306      	str	r3, [sp, #24]
 800dda2:	464b      	mov	r3, r9
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	bfb8      	it	lt
 800dda8:	2301      	movlt	r3, #1
 800ddaa:	e7ba      	b.n	800dd22 <_dtoa_r+0x232>
 800ddac:	2300      	movs	r3, #0
 800ddae:	e7b2      	b.n	800dd16 <_dtoa_r+0x226>
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	e7f0      	b.n	800dd96 <_dtoa_r+0x2a6>
 800ddb4:	2501      	movs	r5, #1
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800ddbc:	f04f 33ff 	mov.w	r3, #4294967295
 800ddc0:	9306      	str	r3, [sp, #24]
 800ddc2:	4699      	mov	r9, r3
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	2312      	movs	r3, #18
 800ddc8:	920a      	str	r2, [sp, #40]	; 0x28
 800ddca:	e7aa      	b.n	800dd22 <_dtoa_r+0x232>
 800ddcc:	2301      	movs	r3, #1
 800ddce:	9309      	str	r3, [sp, #36]	; 0x24
 800ddd0:	e7f4      	b.n	800ddbc <_dtoa_r+0x2cc>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	9306      	str	r3, [sp, #24]
 800ddd6:	4699      	mov	r9, r3
 800ddd8:	461a      	mov	r2, r3
 800ddda:	e7f5      	b.n	800ddc8 <_dtoa_r+0x2d8>
 800dddc:	3101      	adds	r1, #1
 800ddde:	6071      	str	r1, [r6, #4]
 800dde0:	0052      	lsls	r2, r2, #1
 800dde2:	e7a2      	b.n	800dd2a <_dtoa_r+0x23a>
 800dde4:	f3af 8000 	nop.w
 800dde8:	636f4361 	.word	0x636f4361
 800ddec:	3fd287a7 	.word	0x3fd287a7
 800ddf0:	8b60c8b3 	.word	0x8b60c8b3
 800ddf4:	3fc68a28 	.word	0x3fc68a28
 800ddf8:	509f79fb 	.word	0x509f79fb
 800ddfc:	3fd34413 	.word	0x3fd34413
 800de00:	7ff00000 	.word	0x7ff00000
 800de04:	0800fba9 	.word	0x0800fba9
 800de08:	0800fba0 	.word	0x0800fba0
 800de0c:	0800fb23 	.word	0x0800fb23
 800de10:	0800fbe0 	.word	0x0800fbe0
 800de14:	0800fbb8 	.word	0x0800fbb8
 800de18:	07de      	lsls	r6, r3, #31
 800de1a:	d504      	bpl.n	800de26 <_dtoa_r+0x336>
 800de1c:	ed91 6b00 	vldr	d6, [r1]
 800de20:	3201      	adds	r2, #1
 800de22:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de26:	105b      	asrs	r3, r3, #1
 800de28:	3108      	adds	r1, #8
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1f4      	bne.n	800de18 <_dtoa_r+0x328>
 800de2e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800de32:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800de36:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	f000 80a7 	beq.w	800df90 <_dtoa_r+0x4a0>
 800de42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800de46:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800de4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de52:	f140 809d 	bpl.w	800df90 <_dtoa_r+0x4a0>
 800de56:	f1b9 0f00 	cmp.w	r9, #0
 800de5a:	f000 8099 	beq.w	800df90 <_dtoa_r+0x4a0>
 800de5e:	9b06      	ldr	r3, [sp, #24]
 800de60:	2b00      	cmp	r3, #0
 800de62:	dd30      	ble.n	800dec6 <_dtoa_r+0x3d6>
 800de64:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800de68:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de70:	9d06      	ldr	r5, [sp, #24]
 800de72:	f10b 33ff 	add.w	r3, fp, #4294967295
 800de76:	3201      	adds	r2, #1
 800de78:	ed9d 6b02 	vldr	d6, [sp, #8]
 800de7c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800de80:	ee07 2a90 	vmov	s15, r2
 800de84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800de88:	eea7 5b06 	vfma.f64	d5, d7, d6
 800de8c:	ed8d 5b02 	vstr	d5, [sp, #8]
 800de90:	9a03      	ldr	r2, [sp, #12]
 800de92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de96:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800de9a:	2d00      	cmp	r5, #0
 800de9c:	d17b      	bne.n	800df96 <_dtoa_r+0x4a6>
 800de9e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dea2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dea6:	ec41 0b17 	vmov	d7, r0, r1
 800deaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800deae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb2:	f300 8253 	bgt.w	800e35c <_dtoa_r+0x86c>
 800deb6:	eeb1 7b47 	vneg.f64	d7, d7
 800deba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800debe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec2:	f100 8249 	bmi.w	800e358 <_dtoa_r+0x868>
 800dec6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800deca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f2c0 8119 	blt.w	800e108 <_dtoa_r+0x618>
 800ded6:	f1bb 0f0e 	cmp.w	fp, #14
 800deda:	f300 8115 	bgt.w	800e108 <_dtoa_r+0x618>
 800dede:	4bc3      	ldr	r3, [pc, #780]	; (800e1ec <_dtoa_r+0x6fc>)
 800dee0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dee4:	ed93 6b00 	vldr	d6, [r3]
 800dee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deea:	2b00      	cmp	r3, #0
 800deec:	f280 80ba 	bge.w	800e064 <_dtoa_r+0x574>
 800def0:	f1b9 0f00 	cmp.w	r9, #0
 800def4:	f300 80b6 	bgt.w	800e064 <_dtoa_r+0x574>
 800def8:	f040 822d 	bne.w	800e356 <_dtoa_r+0x866>
 800defc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800df00:	ee26 6b07 	vmul.f64	d6, d6, d7
 800df04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800df0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df10:	464d      	mov	r5, r9
 800df12:	464f      	mov	r7, r9
 800df14:	f280 8204 	bge.w	800e320 <_dtoa_r+0x830>
 800df18:	9b04      	ldr	r3, [sp, #16]
 800df1a:	9a04      	ldr	r2, [sp, #16]
 800df1c:	1c5e      	adds	r6, r3, #1
 800df1e:	2331      	movs	r3, #49	; 0x31
 800df20:	7013      	strb	r3, [r2, #0]
 800df22:	f10b 0b01 	add.w	fp, fp, #1
 800df26:	e1ff      	b.n	800e328 <_dtoa_r+0x838>
 800df28:	2202      	movs	r2, #2
 800df2a:	e731      	b.n	800dd90 <_dtoa_r+0x2a0>
 800df2c:	d02e      	beq.n	800df8c <_dtoa_r+0x49c>
 800df2e:	f1cb 0300 	rsb	r3, fp, #0
 800df32:	4aae      	ldr	r2, [pc, #696]	; (800e1ec <_dtoa_r+0x6fc>)
 800df34:	f003 010f 	and.w	r1, r3, #15
 800df38:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800df3c:	ed92 7b00 	vldr	d7, [r2]
 800df40:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800df44:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800df4c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800df50:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800df54:	49a6      	ldr	r1, [pc, #664]	; (800e1f0 <_dtoa_r+0x700>)
 800df56:	111b      	asrs	r3, r3, #4
 800df58:	2000      	movs	r0, #0
 800df5a:	2202      	movs	r2, #2
 800df5c:	b93b      	cbnz	r3, 800df6e <_dtoa_r+0x47e>
 800df5e:	2800      	cmp	r0, #0
 800df60:	f43f af6b 	beq.w	800de3a <_dtoa_r+0x34a>
 800df64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800df68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df6c:	e765      	b.n	800de3a <_dtoa_r+0x34a>
 800df6e:	07dd      	lsls	r5, r3, #31
 800df70:	d509      	bpl.n	800df86 <_dtoa_r+0x496>
 800df72:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800df76:	ed91 7b00 	vldr	d7, [r1]
 800df7a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df7e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800df82:	3201      	adds	r2, #1
 800df84:	2001      	movs	r0, #1
 800df86:	105b      	asrs	r3, r3, #1
 800df88:	3108      	adds	r1, #8
 800df8a:	e7e7      	b.n	800df5c <_dtoa_r+0x46c>
 800df8c:	2202      	movs	r2, #2
 800df8e:	e754      	b.n	800de3a <_dtoa_r+0x34a>
 800df90:	465b      	mov	r3, fp
 800df92:	464d      	mov	r5, r9
 800df94:	e770      	b.n	800de78 <_dtoa_r+0x388>
 800df96:	4a95      	ldr	r2, [pc, #596]	; (800e1ec <_dtoa_r+0x6fc>)
 800df98:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800df9c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dfa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfa2:	ec41 0b17 	vmov	d7, r0, r1
 800dfa6:	b35a      	cbz	r2, 800e000 <_dtoa_r+0x510>
 800dfa8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dfac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dfb0:	9e04      	ldr	r6, [sp, #16]
 800dfb2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800dfb6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dfba:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dfbe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dfc2:	ee14 2a90 	vmov	r2, s9
 800dfc6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dfca:	3230      	adds	r2, #48	; 0x30
 800dfcc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dfd0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd8:	f806 2b01 	strb.w	r2, [r6], #1
 800dfdc:	d43b      	bmi.n	800e056 <_dtoa_r+0x566>
 800dfde:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dfe2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfea:	d472      	bmi.n	800e0d2 <_dtoa_r+0x5e2>
 800dfec:	9a04      	ldr	r2, [sp, #16]
 800dfee:	1ab2      	subs	r2, r6, r2
 800dff0:	4295      	cmp	r5, r2
 800dff2:	f77f af68 	ble.w	800dec6 <_dtoa_r+0x3d6>
 800dff6:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dffa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dffe:	e7de      	b.n	800dfbe <_dtoa_r+0x4ce>
 800e000:	9a04      	ldr	r2, [sp, #16]
 800e002:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e006:	1956      	adds	r6, r2, r5
 800e008:	4611      	mov	r1, r2
 800e00a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e00e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e012:	ee14 2a90 	vmov	r2, s9
 800e016:	3230      	adds	r2, #48	; 0x30
 800e018:	f801 2b01 	strb.w	r2, [r1], #1
 800e01c:	42b1      	cmp	r1, r6
 800e01e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e022:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e026:	d11a      	bne.n	800e05e <_dtoa_r+0x56e>
 800e028:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e02c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e030:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e038:	dc4b      	bgt.n	800e0d2 <_dtoa_r+0x5e2>
 800e03a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e03e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e046:	f57f af3e 	bpl.w	800dec6 <_dtoa_r+0x3d6>
 800e04a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e04e:	2a30      	cmp	r2, #48	; 0x30
 800e050:	f106 31ff 	add.w	r1, r6, #4294967295
 800e054:	d001      	beq.n	800e05a <_dtoa_r+0x56a>
 800e056:	469b      	mov	fp, r3
 800e058:	e02a      	b.n	800e0b0 <_dtoa_r+0x5c0>
 800e05a:	460e      	mov	r6, r1
 800e05c:	e7f5      	b.n	800e04a <_dtoa_r+0x55a>
 800e05e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e062:	e7d4      	b.n	800e00e <_dtoa_r+0x51e>
 800e064:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e068:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e06c:	9e04      	ldr	r6, [sp, #16]
 800e06e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e072:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e076:	ee15 3a10 	vmov	r3, s10
 800e07a:	3330      	adds	r3, #48	; 0x30
 800e07c:	f806 3b01 	strb.w	r3, [r6], #1
 800e080:	9b04      	ldr	r3, [sp, #16]
 800e082:	1af3      	subs	r3, r6, r3
 800e084:	4599      	cmp	r9, r3
 800e086:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e08a:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e08e:	d133      	bne.n	800e0f8 <_dtoa_r+0x608>
 800e090:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e094:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e09c:	dc18      	bgt.n	800e0d0 <_dtoa_r+0x5e0>
 800e09e:	eeb4 7b46 	vcmp.f64	d7, d6
 800e0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a6:	d103      	bne.n	800e0b0 <_dtoa_r+0x5c0>
 800e0a8:	ee15 3a10 	vmov	r3, s10
 800e0ac:	07db      	lsls	r3, r3, #31
 800e0ae:	d40f      	bmi.n	800e0d0 <_dtoa_r+0x5e0>
 800e0b0:	9901      	ldr	r1, [sp, #4]
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f000 fdfb 	bl	800ecae <_Bfree>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e0bc:	7033      	strb	r3, [r6, #0]
 800e0be:	f10b 0301 	add.w	r3, fp, #1
 800e0c2:	6013      	str	r3, [r2, #0]
 800e0c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	f43f ad5b 	beq.w	800db82 <_dtoa_r+0x92>
 800e0cc:	601e      	str	r6, [r3, #0]
 800e0ce:	e558      	b.n	800db82 <_dtoa_r+0x92>
 800e0d0:	465b      	mov	r3, fp
 800e0d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e0d6:	2939      	cmp	r1, #57	; 0x39
 800e0d8:	f106 32ff 	add.w	r2, r6, #4294967295
 800e0dc:	d106      	bne.n	800e0ec <_dtoa_r+0x5fc>
 800e0de:	9904      	ldr	r1, [sp, #16]
 800e0e0:	4291      	cmp	r1, r2
 800e0e2:	d107      	bne.n	800e0f4 <_dtoa_r+0x604>
 800e0e4:	2230      	movs	r2, #48	; 0x30
 800e0e6:	700a      	strb	r2, [r1, #0]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	460a      	mov	r2, r1
 800e0ec:	7811      	ldrb	r1, [r2, #0]
 800e0ee:	3101      	adds	r1, #1
 800e0f0:	7011      	strb	r1, [r2, #0]
 800e0f2:	e7b0      	b.n	800e056 <_dtoa_r+0x566>
 800e0f4:	4616      	mov	r6, r2
 800e0f6:	e7ec      	b.n	800e0d2 <_dtoa_r+0x5e2>
 800e0f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e0fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e104:	d1b3      	bne.n	800e06e <_dtoa_r+0x57e>
 800e106:	e7d3      	b.n	800e0b0 <_dtoa_r+0x5c0>
 800e108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e10a:	2a00      	cmp	r2, #0
 800e10c:	f000 808d 	beq.w	800e22a <_dtoa_r+0x73a>
 800e110:	9a08      	ldr	r2, [sp, #32]
 800e112:	2a01      	cmp	r2, #1
 800e114:	dc72      	bgt.n	800e1fc <_dtoa_r+0x70c>
 800e116:	2f00      	cmp	r7, #0
 800e118:	d06c      	beq.n	800e1f4 <_dtoa_r+0x704>
 800e11a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e11e:	4645      	mov	r5, r8
 800e120:	4656      	mov	r6, sl
 800e122:	9a07      	ldr	r2, [sp, #28]
 800e124:	2101      	movs	r1, #1
 800e126:	441a      	add	r2, r3
 800e128:	4620      	mov	r0, r4
 800e12a:	449a      	add	sl, r3
 800e12c:	9207      	str	r2, [sp, #28]
 800e12e:	f000 fe9c 	bl	800ee6a <__i2b>
 800e132:	4607      	mov	r7, r0
 800e134:	2e00      	cmp	r6, #0
 800e136:	dd0b      	ble.n	800e150 <_dtoa_r+0x660>
 800e138:	9b07      	ldr	r3, [sp, #28]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	dd08      	ble.n	800e150 <_dtoa_r+0x660>
 800e13e:	42b3      	cmp	r3, r6
 800e140:	9a07      	ldr	r2, [sp, #28]
 800e142:	bfa8      	it	ge
 800e144:	4633      	movge	r3, r6
 800e146:	ebaa 0a03 	sub.w	sl, sl, r3
 800e14a:	1af6      	subs	r6, r6, r3
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	9307      	str	r3, [sp, #28]
 800e150:	f1b8 0f00 	cmp.w	r8, #0
 800e154:	d01d      	beq.n	800e192 <_dtoa_r+0x6a2>
 800e156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d06a      	beq.n	800e232 <_dtoa_r+0x742>
 800e15c:	b18d      	cbz	r5, 800e182 <_dtoa_r+0x692>
 800e15e:	4639      	mov	r1, r7
 800e160:	462a      	mov	r2, r5
 800e162:	4620      	mov	r0, r4
 800e164:	f000 ff20 	bl	800efa8 <__pow5mult>
 800e168:	9a01      	ldr	r2, [sp, #4]
 800e16a:	4601      	mov	r1, r0
 800e16c:	4607      	mov	r7, r0
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 fe84 	bl	800ee7c <__multiply>
 800e174:	9901      	ldr	r1, [sp, #4]
 800e176:	900c      	str	r0, [sp, #48]	; 0x30
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fd98 	bl	800ecae <_Bfree>
 800e17e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	ebb8 0205 	subs.w	r2, r8, r5
 800e186:	d004      	beq.n	800e192 <_dtoa_r+0x6a2>
 800e188:	9901      	ldr	r1, [sp, #4]
 800e18a:	4620      	mov	r0, r4
 800e18c:	f000 ff0c 	bl	800efa8 <__pow5mult>
 800e190:	9001      	str	r0, [sp, #4]
 800e192:	2101      	movs	r1, #1
 800e194:	4620      	mov	r0, r4
 800e196:	f000 fe68 	bl	800ee6a <__i2b>
 800e19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e19c:	4605      	mov	r5, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	f000 81ca 	beq.w	800e538 <_dtoa_r+0xa48>
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	4601      	mov	r1, r0
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f000 fefd 	bl	800efa8 <__pow5mult>
 800e1ae:	9b08      	ldr	r3, [sp, #32]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	dc44      	bgt.n	800e240 <_dtoa_r+0x750>
 800e1b6:	9b02      	ldr	r3, [sp, #8]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d13c      	bne.n	800e236 <_dtoa_r+0x746>
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d137      	bne.n	800e236 <_dtoa_r+0x746>
 800e1c6:	9b03      	ldr	r3, [sp, #12]
 800e1c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1cc:	0d1b      	lsrs	r3, r3, #20
 800e1ce:	051b      	lsls	r3, r3, #20
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d033      	beq.n	800e23c <_dtoa_r+0x74c>
 800e1d4:	9b07      	ldr	r3, [sp, #28]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	f10a 0a01 	add.w	sl, sl, #1
 800e1dc:	9307      	str	r3, [sp, #28]
 800e1de:	f04f 0801 	mov.w	r8, #1
 800e1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1e4:	bb73      	cbnz	r3, 800e244 <_dtoa_r+0x754>
 800e1e6:	2001      	movs	r0, #1
 800e1e8:	e034      	b.n	800e254 <_dtoa_r+0x764>
 800e1ea:	bf00      	nop
 800e1ec:	0800fbe0 	.word	0x0800fbe0
 800e1f0:	0800fbb8 	.word	0x0800fbb8
 800e1f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e1f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e1fa:	e790      	b.n	800e11e <_dtoa_r+0x62e>
 800e1fc:	f109 35ff 	add.w	r5, r9, #4294967295
 800e200:	45a8      	cmp	r8, r5
 800e202:	bfbf      	itttt	lt
 800e204:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800e206:	eba5 0808 	sublt.w	r8, r5, r8
 800e20a:	4443      	addlt	r3, r8
 800e20c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800e20e:	bfb6      	itet	lt
 800e210:	46a8      	movlt	r8, r5
 800e212:	eba8 0505 	subge.w	r5, r8, r5
 800e216:	2500      	movlt	r5, #0
 800e218:	f1b9 0f00 	cmp.w	r9, #0
 800e21c:	bfb9      	ittee	lt
 800e21e:	ebaa 0609 	sublt.w	r6, sl, r9
 800e222:	2300      	movlt	r3, #0
 800e224:	4656      	movge	r6, sl
 800e226:	464b      	movge	r3, r9
 800e228:	e77b      	b.n	800e122 <_dtoa_r+0x632>
 800e22a:	4645      	mov	r5, r8
 800e22c:	4656      	mov	r6, sl
 800e22e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e230:	e780      	b.n	800e134 <_dtoa_r+0x644>
 800e232:	4642      	mov	r2, r8
 800e234:	e7a8      	b.n	800e188 <_dtoa_r+0x698>
 800e236:	f04f 0800 	mov.w	r8, #0
 800e23a:	e7d2      	b.n	800e1e2 <_dtoa_r+0x6f2>
 800e23c:	4698      	mov	r8, r3
 800e23e:	e7d0      	b.n	800e1e2 <_dtoa_r+0x6f2>
 800e240:	f04f 0800 	mov.w	r8, #0
 800e244:	692b      	ldr	r3, [r5, #16]
 800e246:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e24a:	6918      	ldr	r0, [r3, #16]
 800e24c:	f000 fdbf 	bl	800edce <__hi0bits>
 800e250:	f1c0 0020 	rsb	r0, r0, #32
 800e254:	9b07      	ldr	r3, [sp, #28]
 800e256:	4418      	add	r0, r3
 800e258:	f010 001f 	ands.w	r0, r0, #31
 800e25c:	d047      	beq.n	800e2ee <_dtoa_r+0x7fe>
 800e25e:	f1c0 0320 	rsb	r3, r0, #32
 800e262:	2b04      	cmp	r3, #4
 800e264:	dd3b      	ble.n	800e2de <_dtoa_r+0x7ee>
 800e266:	9b07      	ldr	r3, [sp, #28]
 800e268:	f1c0 001c 	rsb	r0, r0, #28
 800e26c:	4482      	add	sl, r0
 800e26e:	4406      	add	r6, r0
 800e270:	4403      	add	r3, r0
 800e272:	9307      	str	r3, [sp, #28]
 800e274:	f1ba 0f00 	cmp.w	sl, #0
 800e278:	dd05      	ble.n	800e286 <_dtoa_r+0x796>
 800e27a:	4652      	mov	r2, sl
 800e27c:	9901      	ldr	r1, [sp, #4]
 800e27e:	4620      	mov	r0, r4
 800e280:	f000 fee0 	bl	800f044 <__lshift>
 800e284:	9001      	str	r0, [sp, #4]
 800e286:	9b07      	ldr	r3, [sp, #28]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	dd05      	ble.n	800e298 <_dtoa_r+0x7a8>
 800e28c:	4629      	mov	r1, r5
 800e28e:	461a      	mov	r2, r3
 800e290:	4620      	mov	r0, r4
 800e292:	f000 fed7 	bl	800f044 <__lshift>
 800e296:	4605      	mov	r5, r0
 800e298:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e29a:	b353      	cbz	r3, 800e2f2 <_dtoa_r+0x802>
 800e29c:	4629      	mov	r1, r5
 800e29e:	9801      	ldr	r0, [sp, #4]
 800e2a0:	f000 ff24 	bl	800f0ec <__mcmp>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	da24      	bge.n	800e2f2 <_dtoa_r+0x802>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	220a      	movs	r2, #10
 800e2ac:	9901      	ldr	r1, [sp, #4]
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f000 fd14 	bl	800ecdc <__multadd>
 800e2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b6:	9001      	str	r0, [sp, #4]
 800e2b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	f000 8142 	beq.w	800e546 <_dtoa_r+0xa56>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	4639      	mov	r1, r7
 800e2c6:	220a      	movs	r2, #10
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f000 fd07 	bl	800ecdc <__multadd>
 800e2ce:	9b06      	ldr	r3, [sp, #24]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	4607      	mov	r7, r0
 800e2d4:	dc4b      	bgt.n	800e36e <_dtoa_r+0x87e>
 800e2d6:	9b08      	ldr	r3, [sp, #32]
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	dd48      	ble.n	800e36e <_dtoa_r+0x87e>
 800e2dc:	e011      	b.n	800e302 <_dtoa_r+0x812>
 800e2de:	d0c9      	beq.n	800e274 <_dtoa_r+0x784>
 800e2e0:	9a07      	ldr	r2, [sp, #28]
 800e2e2:	331c      	adds	r3, #28
 800e2e4:	441a      	add	r2, r3
 800e2e6:	449a      	add	sl, r3
 800e2e8:	441e      	add	r6, r3
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	e7c1      	b.n	800e272 <_dtoa_r+0x782>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	e7f6      	b.n	800e2e0 <_dtoa_r+0x7f0>
 800e2f2:	f1b9 0f00 	cmp.w	r9, #0
 800e2f6:	dc34      	bgt.n	800e362 <_dtoa_r+0x872>
 800e2f8:	9b08      	ldr	r3, [sp, #32]
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	dd31      	ble.n	800e362 <_dtoa_r+0x872>
 800e2fe:	f8cd 9018 	str.w	r9, [sp, #24]
 800e302:	9b06      	ldr	r3, [sp, #24]
 800e304:	b963      	cbnz	r3, 800e320 <_dtoa_r+0x830>
 800e306:	4629      	mov	r1, r5
 800e308:	2205      	movs	r2, #5
 800e30a:	4620      	mov	r0, r4
 800e30c:	f000 fce6 	bl	800ecdc <__multadd>
 800e310:	4601      	mov	r1, r0
 800e312:	4605      	mov	r5, r0
 800e314:	9801      	ldr	r0, [sp, #4]
 800e316:	f000 fee9 	bl	800f0ec <__mcmp>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	f73f adfc 	bgt.w	800df18 <_dtoa_r+0x428>
 800e320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e322:	9e04      	ldr	r6, [sp, #16]
 800e324:	ea6f 0b03 	mvn.w	fp, r3
 800e328:	f04f 0900 	mov.w	r9, #0
 800e32c:	4629      	mov	r1, r5
 800e32e:	4620      	mov	r0, r4
 800e330:	f000 fcbd 	bl	800ecae <_Bfree>
 800e334:	2f00      	cmp	r7, #0
 800e336:	f43f aebb 	beq.w	800e0b0 <_dtoa_r+0x5c0>
 800e33a:	f1b9 0f00 	cmp.w	r9, #0
 800e33e:	d005      	beq.n	800e34c <_dtoa_r+0x85c>
 800e340:	45b9      	cmp	r9, r7
 800e342:	d003      	beq.n	800e34c <_dtoa_r+0x85c>
 800e344:	4649      	mov	r1, r9
 800e346:	4620      	mov	r0, r4
 800e348:	f000 fcb1 	bl	800ecae <_Bfree>
 800e34c:	4639      	mov	r1, r7
 800e34e:	4620      	mov	r0, r4
 800e350:	f000 fcad 	bl	800ecae <_Bfree>
 800e354:	e6ac      	b.n	800e0b0 <_dtoa_r+0x5c0>
 800e356:	2500      	movs	r5, #0
 800e358:	462f      	mov	r7, r5
 800e35a:	e7e1      	b.n	800e320 <_dtoa_r+0x830>
 800e35c:	469b      	mov	fp, r3
 800e35e:	462f      	mov	r7, r5
 800e360:	e5da      	b.n	800df18 <_dtoa_r+0x428>
 800e362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e364:	f8cd 9018 	str.w	r9, [sp, #24]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f000 80f3 	beq.w	800e554 <_dtoa_r+0xa64>
 800e36e:	2e00      	cmp	r6, #0
 800e370:	dd05      	ble.n	800e37e <_dtoa_r+0x88e>
 800e372:	4639      	mov	r1, r7
 800e374:	4632      	mov	r2, r6
 800e376:	4620      	mov	r0, r4
 800e378:	f000 fe64 	bl	800f044 <__lshift>
 800e37c:	4607      	mov	r7, r0
 800e37e:	f1b8 0f00 	cmp.w	r8, #0
 800e382:	d04c      	beq.n	800e41e <_dtoa_r+0x92e>
 800e384:	6879      	ldr	r1, [r7, #4]
 800e386:	4620      	mov	r0, r4
 800e388:	f000 fc5d 	bl	800ec46 <_Balloc>
 800e38c:	693a      	ldr	r2, [r7, #16]
 800e38e:	3202      	adds	r2, #2
 800e390:	4606      	mov	r6, r0
 800e392:	0092      	lsls	r2, r2, #2
 800e394:	f107 010c 	add.w	r1, r7, #12
 800e398:	300c      	adds	r0, #12
 800e39a:	f000 fc49 	bl	800ec30 <memcpy>
 800e39e:	2201      	movs	r2, #1
 800e3a0:	4631      	mov	r1, r6
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f000 fe4e 	bl	800f044 <__lshift>
 800e3a8:	9b02      	ldr	r3, [sp, #8]
 800e3aa:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	46b9      	mov	r9, r7
 800e3b4:	9307      	str	r3, [sp, #28]
 800e3b6:	4607      	mov	r7, r0
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	9801      	ldr	r0, [sp, #4]
 800e3bc:	f7ff fb0a 	bl	800d9d4 <quorem>
 800e3c0:	4649      	mov	r1, r9
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e3c8:	9801      	ldr	r0, [sp, #4]
 800e3ca:	f000 fe8f 	bl	800f0ec <__mcmp>
 800e3ce:	463a      	mov	r2, r7
 800e3d0:	9002      	str	r0, [sp, #8]
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	4620      	mov	r0, r4
 800e3d6:	f000 fea3 	bl	800f120 <__mdiff>
 800e3da:	68c3      	ldr	r3, [r0, #12]
 800e3dc:	4602      	mov	r2, r0
 800e3de:	bb03      	cbnz	r3, 800e422 <_dtoa_r+0x932>
 800e3e0:	4601      	mov	r1, r0
 800e3e2:	9009      	str	r0, [sp, #36]	; 0x24
 800e3e4:	9801      	ldr	r0, [sp, #4]
 800e3e6:	f000 fe81 	bl	800f0ec <__mcmp>
 800e3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f4:	f000 fc5b 	bl	800ecae <_Bfree>
 800e3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3fa:	b9a3      	cbnz	r3, 800e426 <_dtoa_r+0x936>
 800e3fc:	9a08      	ldr	r2, [sp, #32]
 800e3fe:	b992      	cbnz	r2, 800e426 <_dtoa_r+0x936>
 800e400:	9a07      	ldr	r2, [sp, #28]
 800e402:	b982      	cbnz	r2, 800e426 <_dtoa_r+0x936>
 800e404:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e408:	d029      	beq.n	800e45e <_dtoa_r+0x96e>
 800e40a:	9b02      	ldr	r3, [sp, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	dd01      	ble.n	800e414 <_dtoa_r+0x924>
 800e410:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800e414:	f10a 0601 	add.w	r6, sl, #1
 800e418:	f88a 8000 	strb.w	r8, [sl]
 800e41c:	e786      	b.n	800e32c <_dtoa_r+0x83c>
 800e41e:	4638      	mov	r0, r7
 800e420:	e7c2      	b.n	800e3a8 <_dtoa_r+0x8b8>
 800e422:	2301      	movs	r3, #1
 800e424:	e7e3      	b.n	800e3ee <_dtoa_r+0x8fe>
 800e426:	9a02      	ldr	r2, [sp, #8]
 800e428:	2a00      	cmp	r2, #0
 800e42a:	db04      	blt.n	800e436 <_dtoa_r+0x946>
 800e42c:	d124      	bne.n	800e478 <_dtoa_r+0x988>
 800e42e:	9a08      	ldr	r2, [sp, #32]
 800e430:	bb12      	cbnz	r2, 800e478 <_dtoa_r+0x988>
 800e432:	9a07      	ldr	r2, [sp, #28]
 800e434:	bb02      	cbnz	r2, 800e478 <_dtoa_r+0x988>
 800e436:	2b00      	cmp	r3, #0
 800e438:	ddec      	ble.n	800e414 <_dtoa_r+0x924>
 800e43a:	2201      	movs	r2, #1
 800e43c:	9901      	ldr	r1, [sp, #4]
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 fe00 	bl	800f044 <__lshift>
 800e444:	4629      	mov	r1, r5
 800e446:	9001      	str	r0, [sp, #4]
 800e448:	f000 fe50 	bl	800f0ec <__mcmp>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	dc03      	bgt.n	800e458 <_dtoa_r+0x968>
 800e450:	d1e0      	bne.n	800e414 <_dtoa_r+0x924>
 800e452:	f018 0f01 	tst.w	r8, #1
 800e456:	d0dd      	beq.n	800e414 <_dtoa_r+0x924>
 800e458:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e45c:	d1d8      	bne.n	800e410 <_dtoa_r+0x920>
 800e45e:	2339      	movs	r3, #57	; 0x39
 800e460:	f10a 0601 	add.w	r6, sl, #1
 800e464:	f88a 3000 	strb.w	r3, [sl]
 800e468:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e46c:	2b39      	cmp	r3, #57	; 0x39
 800e46e:	f106 32ff 	add.w	r2, r6, #4294967295
 800e472:	d04c      	beq.n	800e50e <_dtoa_r+0xa1e>
 800e474:	3301      	adds	r3, #1
 800e476:	e051      	b.n	800e51c <_dtoa_r+0xa2c>
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f10a 0601 	add.w	r6, sl, #1
 800e47e:	dd05      	ble.n	800e48c <_dtoa_r+0x99c>
 800e480:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e484:	d0eb      	beq.n	800e45e <_dtoa_r+0x96e>
 800e486:	f108 0801 	add.w	r8, r8, #1
 800e48a:	e7c5      	b.n	800e418 <_dtoa_r+0x928>
 800e48c:	9b04      	ldr	r3, [sp, #16]
 800e48e:	9a06      	ldr	r2, [sp, #24]
 800e490:	f806 8c01 	strb.w	r8, [r6, #-1]
 800e494:	1af3      	subs	r3, r6, r3
 800e496:	4293      	cmp	r3, r2
 800e498:	d021      	beq.n	800e4de <_dtoa_r+0x9ee>
 800e49a:	2300      	movs	r3, #0
 800e49c:	220a      	movs	r2, #10
 800e49e:	9901      	ldr	r1, [sp, #4]
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f000 fc1b 	bl	800ecdc <__multadd>
 800e4a6:	45b9      	cmp	r9, r7
 800e4a8:	9001      	str	r0, [sp, #4]
 800e4aa:	f04f 0300 	mov.w	r3, #0
 800e4ae:	f04f 020a 	mov.w	r2, #10
 800e4b2:	4649      	mov	r1, r9
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	d105      	bne.n	800e4c4 <_dtoa_r+0x9d4>
 800e4b8:	f000 fc10 	bl	800ecdc <__multadd>
 800e4bc:	4681      	mov	r9, r0
 800e4be:	4607      	mov	r7, r0
 800e4c0:	46b2      	mov	sl, r6
 800e4c2:	e779      	b.n	800e3b8 <_dtoa_r+0x8c8>
 800e4c4:	f000 fc0a 	bl	800ecdc <__multadd>
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	4681      	mov	r9, r0
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	220a      	movs	r2, #10
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	f000 fc03 	bl	800ecdc <__multadd>
 800e4d6:	4607      	mov	r7, r0
 800e4d8:	e7f2      	b.n	800e4c0 <_dtoa_r+0x9d0>
 800e4da:	f04f 0900 	mov.w	r9, #0
 800e4de:	2201      	movs	r2, #1
 800e4e0:	9901      	ldr	r1, [sp, #4]
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	f000 fdae 	bl	800f044 <__lshift>
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	9001      	str	r0, [sp, #4]
 800e4ec:	f000 fdfe 	bl	800f0ec <__mcmp>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	dcb9      	bgt.n	800e468 <_dtoa_r+0x978>
 800e4f4:	d102      	bne.n	800e4fc <_dtoa_r+0xa0c>
 800e4f6:	f018 0f01 	tst.w	r8, #1
 800e4fa:	d1b5      	bne.n	800e468 <_dtoa_r+0x978>
 800e4fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e500:	2b30      	cmp	r3, #48	; 0x30
 800e502:	f106 32ff 	add.w	r2, r6, #4294967295
 800e506:	f47f af11 	bne.w	800e32c <_dtoa_r+0x83c>
 800e50a:	4616      	mov	r6, r2
 800e50c:	e7f6      	b.n	800e4fc <_dtoa_r+0xa0c>
 800e50e:	9b04      	ldr	r3, [sp, #16]
 800e510:	4293      	cmp	r3, r2
 800e512:	d105      	bne.n	800e520 <_dtoa_r+0xa30>
 800e514:	9a04      	ldr	r2, [sp, #16]
 800e516:	f10b 0b01 	add.w	fp, fp, #1
 800e51a:	2331      	movs	r3, #49	; 0x31
 800e51c:	7013      	strb	r3, [r2, #0]
 800e51e:	e705      	b.n	800e32c <_dtoa_r+0x83c>
 800e520:	4616      	mov	r6, r2
 800e522:	e7a1      	b.n	800e468 <_dtoa_r+0x978>
 800e524:	4b16      	ldr	r3, [pc, #88]	; (800e580 <_dtoa_r+0xa90>)
 800e526:	f7ff bb48 	b.w	800dbba <_dtoa_r+0xca>
 800e52a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f47f ab23 	bne.w	800db78 <_dtoa_r+0x88>
 800e532:	4b14      	ldr	r3, [pc, #80]	; (800e584 <_dtoa_r+0xa94>)
 800e534:	f7ff bb41 	b.w	800dbba <_dtoa_r+0xca>
 800e538:	9b08      	ldr	r3, [sp, #32]
 800e53a:	2b01      	cmp	r3, #1
 800e53c:	f77f ae3b 	ble.w	800e1b6 <_dtoa_r+0x6c6>
 800e540:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800e544:	e64f      	b.n	800e1e6 <_dtoa_r+0x6f6>
 800e546:	9b06      	ldr	r3, [sp, #24]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	dc03      	bgt.n	800e554 <_dtoa_r+0xa64>
 800e54c:	9b08      	ldr	r3, [sp, #32]
 800e54e:	2b02      	cmp	r3, #2
 800e550:	f73f aed7 	bgt.w	800e302 <_dtoa_r+0x812>
 800e554:	9e04      	ldr	r6, [sp, #16]
 800e556:	9801      	ldr	r0, [sp, #4]
 800e558:	4629      	mov	r1, r5
 800e55a:	f7ff fa3b 	bl	800d9d4 <quorem>
 800e55e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e562:	f806 8b01 	strb.w	r8, [r6], #1
 800e566:	9b04      	ldr	r3, [sp, #16]
 800e568:	9a06      	ldr	r2, [sp, #24]
 800e56a:	1af3      	subs	r3, r6, r3
 800e56c:	429a      	cmp	r2, r3
 800e56e:	ddb4      	ble.n	800e4da <_dtoa_r+0x9ea>
 800e570:	2300      	movs	r3, #0
 800e572:	220a      	movs	r2, #10
 800e574:	9901      	ldr	r1, [sp, #4]
 800e576:	4620      	mov	r0, r4
 800e578:	f000 fbb0 	bl	800ecdc <__multadd>
 800e57c:	9001      	str	r0, [sp, #4]
 800e57e:	e7ea      	b.n	800e556 <_dtoa_r+0xa66>
 800e580:	0800fb22 	.word	0x0800fb22
 800e584:	0800fba0 	.word	0x0800fba0

0800e588 <rshift>:
 800e588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e58a:	6906      	ldr	r6, [r0, #16]
 800e58c:	114b      	asrs	r3, r1, #5
 800e58e:	429e      	cmp	r6, r3
 800e590:	f100 0414 	add.w	r4, r0, #20
 800e594:	dd30      	ble.n	800e5f8 <rshift+0x70>
 800e596:	f011 011f 	ands.w	r1, r1, #31
 800e59a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e59e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e5a2:	d108      	bne.n	800e5b6 <rshift+0x2e>
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	42b2      	cmp	r2, r6
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	d211      	bcs.n	800e5d0 <rshift+0x48>
 800e5ac:	f852 3b04 	ldr.w	r3, [r2], #4
 800e5b0:	f841 3b04 	str.w	r3, [r1], #4
 800e5b4:	e7f7      	b.n	800e5a6 <rshift+0x1e>
 800e5b6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e5ba:	f1c1 0c20 	rsb	ip, r1, #32
 800e5be:	40cd      	lsrs	r5, r1
 800e5c0:	3204      	adds	r2, #4
 800e5c2:	4623      	mov	r3, r4
 800e5c4:	42b2      	cmp	r2, r6
 800e5c6:	4617      	mov	r7, r2
 800e5c8:	d30c      	bcc.n	800e5e4 <rshift+0x5c>
 800e5ca:	601d      	str	r5, [r3, #0]
 800e5cc:	b105      	cbz	r5, 800e5d0 <rshift+0x48>
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	1b1a      	subs	r2, r3, r4
 800e5d2:	42a3      	cmp	r3, r4
 800e5d4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e5d8:	bf08      	it	eq
 800e5da:	2300      	moveq	r3, #0
 800e5dc:	6102      	str	r2, [r0, #16]
 800e5de:	bf08      	it	eq
 800e5e0:	6143      	streq	r3, [r0, #20]
 800e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5e4:	683f      	ldr	r7, [r7, #0]
 800e5e6:	fa07 f70c 	lsl.w	r7, r7, ip
 800e5ea:	433d      	orrs	r5, r7
 800e5ec:	f843 5b04 	str.w	r5, [r3], #4
 800e5f0:	f852 5b04 	ldr.w	r5, [r2], #4
 800e5f4:	40cd      	lsrs	r5, r1
 800e5f6:	e7e5      	b.n	800e5c4 <rshift+0x3c>
 800e5f8:	4623      	mov	r3, r4
 800e5fa:	e7e9      	b.n	800e5d0 <rshift+0x48>

0800e5fc <__hexdig_fun>:
 800e5fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e600:	2b09      	cmp	r3, #9
 800e602:	d802      	bhi.n	800e60a <__hexdig_fun+0xe>
 800e604:	3820      	subs	r0, #32
 800e606:	b2c0      	uxtb	r0, r0
 800e608:	4770      	bx	lr
 800e60a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e60e:	2b05      	cmp	r3, #5
 800e610:	d801      	bhi.n	800e616 <__hexdig_fun+0x1a>
 800e612:	3847      	subs	r0, #71	; 0x47
 800e614:	e7f7      	b.n	800e606 <__hexdig_fun+0xa>
 800e616:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e61a:	2b05      	cmp	r3, #5
 800e61c:	d801      	bhi.n	800e622 <__hexdig_fun+0x26>
 800e61e:	3827      	subs	r0, #39	; 0x27
 800e620:	e7f1      	b.n	800e606 <__hexdig_fun+0xa>
 800e622:	2000      	movs	r0, #0
 800e624:	4770      	bx	lr

0800e626 <__gethex>:
 800e626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62a:	b08b      	sub	sp, #44	; 0x2c
 800e62c:	468a      	mov	sl, r1
 800e62e:	9002      	str	r0, [sp, #8]
 800e630:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e632:	9306      	str	r3, [sp, #24]
 800e634:	4690      	mov	r8, r2
 800e636:	f000 fad0 	bl	800ebda <__localeconv_l>
 800e63a:	6803      	ldr	r3, [r0, #0]
 800e63c:	9303      	str	r3, [sp, #12]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7f1 fdfe 	bl	8000240 <strlen>
 800e644:	9b03      	ldr	r3, [sp, #12]
 800e646:	9001      	str	r0, [sp, #4]
 800e648:	4403      	add	r3, r0
 800e64a:	f04f 0b00 	mov.w	fp, #0
 800e64e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e652:	9307      	str	r3, [sp, #28]
 800e654:	f8da 3000 	ldr.w	r3, [sl]
 800e658:	3302      	adds	r3, #2
 800e65a:	461f      	mov	r7, r3
 800e65c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e660:	2830      	cmp	r0, #48	; 0x30
 800e662:	d06c      	beq.n	800e73e <__gethex+0x118>
 800e664:	f7ff ffca 	bl	800e5fc <__hexdig_fun>
 800e668:	4604      	mov	r4, r0
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d16a      	bne.n	800e744 <__gethex+0x11e>
 800e66e:	9a01      	ldr	r2, [sp, #4]
 800e670:	9903      	ldr	r1, [sp, #12]
 800e672:	4638      	mov	r0, r7
 800e674:	f001 f8fe 	bl	800f874 <strncmp>
 800e678:	2800      	cmp	r0, #0
 800e67a:	d166      	bne.n	800e74a <__gethex+0x124>
 800e67c:	9b01      	ldr	r3, [sp, #4]
 800e67e:	5cf8      	ldrb	r0, [r7, r3]
 800e680:	18fe      	adds	r6, r7, r3
 800e682:	f7ff ffbb 	bl	800e5fc <__hexdig_fun>
 800e686:	2800      	cmp	r0, #0
 800e688:	d062      	beq.n	800e750 <__gethex+0x12a>
 800e68a:	4633      	mov	r3, r6
 800e68c:	7818      	ldrb	r0, [r3, #0]
 800e68e:	2830      	cmp	r0, #48	; 0x30
 800e690:	461f      	mov	r7, r3
 800e692:	f103 0301 	add.w	r3, r3, #1
 800e696:	d0f9      	beq.n	800e68c <__gethex+0x66>
 800e698:	f7ff ffb0 	bl	800e5fc <__hexdig_fun>
 800e69c:	fab0 f580 	clz	r5, r0
 800e6a0:	096d      	lsrs	r5, r5, #5
 800e6a2:	4634      	mov	r4, r6
 800e6a4:	f04f 0b01 	mov.w	fp, #1
 800e6a8:	463a      	mov	r2, r7
 800e6aa:	4616      	mov	r6, r2
 800e6ac:	3201      	adds	r2, #1
 800e6ae:	7830      	ldrb	r0, [r6, #0]
 800e6b0:	f7ff ffa4 	bl	800e5fc <__hexdig_fun>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d1f8      	bne.n	800e6aa <__gethex+0x84>
 800e6b8:	9a01      	ldr	r2, [sp, #4]
 800e6ba:	9903      	ldr	r1, [sp, #12]
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f001 f8d9 	bl	800f874 <strncmp>
 800e6c2:	b950      	cbnz	r0, 800e6da <__gethex+0xb4>
 800e6c4:	b954      	cbnz	r4, 800e6dc <__gethex+0xb6>
 800e6c6:	9b01      	ldr	r3, [sp, #4]
 800e6c8:	18f4      	adds	r4, r6, r3
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4616      	mov	r6, r2
 800e6ce:	3201      	adds	r2, #1
 800e6d0:	7830      	ldrb	r0, [r6, #0]
 800e6d2:	f7ff ff93 	bl	800e5fc <__hexdig_fun>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d1f8      	bne.n	800e6cc <__gethex+0xa6>
 800e6da:	b10c      	cbz	r4, 800e6e0 <__gethex+0xba>
 800e6dc:	1ba4      	subs	r4, r4, r6
 800e6de:	00a4      	lsls	r4, r4, #2
 800e6e0:	7833      	ldrb	r3, [r6, #0]
 800e6e2:	2b50      	cmp	r3, #80	; 0x50
 800e6e4:	d001      	beq.n	800e6ea <__gethex+0xc4>
 800e6e6:	2b70      	cmp	r3, #112	; 0x70
 800e6e8:	d140      	bne.n	800e76c <__gethex+0x146>
 800e6ea:	7873      	ldrb	r3, [r6, #1]
 800e6ec:	2b2b      	cmp	r3, #43	; 0x2b
 800e6ee:	d031      	beq.n	800e754 <__gethex+0x12e>
 800e6f0:	2b2d      	cmp	r3, #45	; 0x2d
 800e6f2:	d033      	beq.n	800e75c <__gethex+0x136>
 800e6f4:	1c71      	adds	r1, r6, #1
 800e6f6:	f04f 0900 	mov.w	r9, #0
 800e6fa:	7808      	ldrb	r0, [r1, #0]
 800e6fc:	f7ff ff7e 	bl	800e5fc <__hexdig_fun>
 800e700:	1e43      	subs	r3, r0, #1
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b18      	cmp	r3, #24
 800e706:	d831      	bhi.n	800e76c <__gethex+0x146>
 800e708:	f1a0 0210 	sub.w	r2, r0, #16
 800e70c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e710:	f7ff ff74 	bl	800e5fc <__hexdig_fun>
 800e714:	1e43      	subs	r3, r0, #1
 800e716:	b2db      	uxtb	r3, r3
 800e718:	2b18      	cmp	r3, #24
 800e71a:	d922      	bls.n	800e762 <__gethex+0x13c>
 800e71c:	f1b9 0f00 	cmp.w	r9, #0
 800e720:	d000      	beq.n	800e724 <__gethex+0xfe>
 800e722:	4252      	negs	r2, r2
 800e724:	4414      	add	r4, r2
 800e726:	f8ca 1000 	str.w	r1, [sl]
 800e72a:	b30d      	cbz	r5, 800e770 <__gethex+0x14a>
 800e72c:	f1bb 0f00 	cmp.w	fp, #0
 800e730:	bf0c      	ite	eq
 800e732:	2706      	moveq	r7, #6
 800e734:	2700      	movne	r7, #0
 800e736:	4638      	mov	r0, r7
 800e738:	b00b      	add	sp, #44	; 0x2c
 800e73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73e:	f10b 0b01 	add.w	fp, fp, #1
 800e742:	e78a      	b.n	800e65a <__gethex+0x34>
 800e744:	2500      	movs	r5, #0
 800e746:	462c      	mov	r4, r5
 800e748:	e7ae      	b.n	800e6a8 <__gethex+0x82>
 800e74a:	463e      	mov	r6, r7
 800e74c:	2501      	movs	r5, #1
 800e74e:	e7c7      	b.n	800e6e0 <__gethex+0xba>
 800e750:	4604      	mov	r4, r0
 800e752:	e7fb      	b.n	800e74c <__gethex+0x126>
 800e754:	f04f 0900 	mov.w	r9, #0
 800e758:	1cb1      	adds	r1, r6, #2
 800e75a:	e7ce      	b.n	800e6fa <__gethex+0xd4>
 800e75c:	f04f 0901 	mov.w	r9, #1
 800e760:	e7fa      	b.n	800e758 <__gethex+0x132>
 800e762:	230a      	movs	r3, #10
 800e764:	fb03 0202 	mla	r2, r3, r2, r0
 800e768:	3a10      	subs	r2, #16
 800e76a:	e7cf      	b.n	800e70c <__gethex+0xe6>
 800e76c:	4631      	mov	r1, r6
 800e76e:	e7da      	b.n	800e726 <__gethex+0x100>
 800e770:	1bf3      	subs	r3, r6, r7
 800e772:	3b01      	subs	r3, #1
 800e774:	4629      	mov	r1, r5
 800e776:	2b07      	cmp	r3, #7
 800e778:	dc49      	bgt.n	800e80e <__gethex+0x1e8>
 800e77a:	9802      	ldr	r0, [sp, #8]
 800e77c:	f000 fa63 	bl	800ec46 <_Balloc>
 800e780:	9b01      	ldr	r3, [sp, #4]
 800e782:	f100 0914 	add.w	r9, r0, #20
 800e786:	f04f 0b00 	mov.w	fp, #0
 800e78a:	f1c3 0301 	rsb	r3, r3, #1
 800e78e:	4605      	mov	r5, r0
 800e790:	f8cd 9010 	str.w	r9, [sp, #16]
 800e794:	46da      	mov	sl, fp
 800e796:	9308      	str	r3, [sp, #32]
 800e798:	42b7      	cmp	r7, r6
 800e79a:	d33b      	bcc.n	800e814 <__gethex+0x1ee>
 800e79c:	9804      	ldr	r0, [sp, #16]
 800e79e:	f840 ab04 	str.w	sl, [r0], #4
 800e7a2:	eba0 0009 	sub.w	r0, r0, r9
 800e7a6:	1080      	asrs	r0, r0, #2
 800e7a8:	6128      	str	r0, [r5, #16]
 800e7aa:	0147      	lsls	r7, r0, #5
 800e7ac:	4650      	mov	r0, sl
 800e7ae:	f000 fb0e 	bl	800edce <__hi0bits>
 800e7b2:	f8d8 6000 	ldr.w	r6, [r8]
 800e7b6:	1a3f      	subs	r7, r7, r0
 800e7b8:	42b7      	cmp	r7, r6
 800e7ba:	dd64      	ble.n	800e886 <__gethex+0x260>
 800e7bc:	1bbf      	subs	r7, r7, r6
 800e7be:	4639      	mov	r1, r7
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	f000 fe1e 	bl	800f402 <__any_on>
 800e7c6:	4682      	mov	sl, r0
 800e7c8:	b178      	cbz	r0, 800e7ea <__gethex+0x1c4>
 800e7ca:	1e7b      	subs	r3, r7, #1
 800e7cc:	1159      	asrs	r1, r3, #5
 800e7ce:	f003 021f 	and.w	r2, r3, #31
 800e7d2:	f04f 0a01 	mov.w	sl, #1
 800e7d6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e7da:	fa0a f202 	lsl.w	r2, sl, r2
 800e7de:	420a      	tst	r2, r1
 800e7e0:	d003      	beq.n	800e7ea <__gethex+0x1c4>
 800e7e2:	4553      	cmp	r3, sl
 800e7e4:	dc46      	bgt.n	800e874 <__gethex+0x24e>
 800e7e6:	f04f 0a02 	mov.w	sl, #2
 800e7ea:	4639      	mov	r1, r7
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f7ff fecb 	bl	800e588 <rshift>
 800e7f2:	443c      	add	r4, r7
 800e7f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7f8:	42a3      	cmp	r3, r4
 800e7fa:	da52      	bge.n	800e8a2 <__gethex+0x27c>
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	9802      	ldr	r0, [sp, #8]
 800e800:	f000 fa55 	bl	800ecae <_Bfree>
 800e804:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e806:	2300      	movs	r3, #0
 800e808:	6013      	str	r3, [r2, #0]
 800e80a:	27a3      	movs	r7, #163	; 0xa3
 800e80c:	e793      	b.n	800e736 <__gethex+0x110>
 800e80e:	3101      	adds	r1, #1
 800e810:	105b      	asrs	r3, r3, #1
 800e812:	e7b0      	b.n	800e776 <__gethex+0x150>
 800e814:	1e73      	subs	r3, r6, #1
 800e816:	9305      	str	r3, [sp, #20]
 800e818:	9a07      	ldr	r2, [sp, #28]
 800e81a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e81e:	4293      	cmp	r3, r2
 800e820:	d018      	beq.n	800e854 <__gethex+0x22e>
 800e822:	f1bb 0f20 	cmp.w	fp, #32
 800e826:	d107      	bne.n	800e838 <__gethex+0x212>
 800e828:	9b04      	ldr	r3, [sp, #16]
 800e82a:	f8c3 a000 	str.w	sl, [r3]
 800e82e:	3304      	adds	r3, #4
 800e830:	f04f 0a00 	mov.w	sl, #0
 800e834:	9304      	str	r3, [sp, #16]
 800e836:	46d3      	mov	fp, sl
 800e838:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e83c:	f7ff fede 	bl	800e5fc <__hexdig_fun>
 800e840:	f000 000f 	and.w	r0, r0, #15
 800e844:	fa00 f00b 	lsl.w	r0, r0, fp
 800e848:	ea4a 0a00 	orr.w	sl, sl, r0
 800e84c:	f10b 0b04 	add.w	fp, fp, #4
 800e850:	9b05      	ldr	r3, [sp, #20]
 800e852:	e00d      	b.n	800e870 <__gethex+0x24a>
 800e854:	9b05      	ldr	r3, [sp, #20]
 800e856:	9a08      	ldr	r2, [sp, #32]
 800e858:	4413      	add	r3, r2
 800e85a:	42bb      	cmp	r3, r7
 800e85c:	d3e1      	bcc.n	800e822 <__gethex+0x1fc>
 800e85e:	4618      	mov	r0, r3
 800e860:	9a01      	ldr	r2, [sp, #4]
 800e862:	9903      	ldr	r1, [sp, #12]
 800e864:	9309      	str	r3, [sp, #36]	; 0x24
 800e866:	f001 f805 	bl	800f874 <strncmp>
 800e86a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d1d8      	bne.n	800e822 <__gethex+0x1fc>
 800e870:	461e      	mov	r6, r3
 800e872:	e791      	b.n	800e798 <__gethex+0x172>
 800e874:	1eb9      	subs	r1, r7, #2
 800e876:	4628      	mov	r0, r5
 800e878:	f000 fdc3 	bl	800f402 <__any_on>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d0b2      	beq.n	800e7e6 <__gethex+0x1c0>
 800e880:	f04f 0a03 	mov.w	sl, #3
 800e884:	e7b1      	b.n	800e7ea <__gethex+0x1c4>
 800e886:	da09      	bge.n	800e89c <__gethex+0x276>
 800e888:	1bf7      	subs	r7, r6, r7
 800e88a:	4629      	mov	r1, r5
 800e88c:	463a      	mov	r2, r7
 800e88e:	9802      	ldr	r0, [sp, #8]
 800e890:	f000 fbd8 	bl	800f044 <__lshift>
 800e894:	1be4      	subs	r4, r4, r7
 800e896:	4605      	mov	r5, r0
 800e898:	f100 0914 	add.w	r9, r0, #20
 800e89c:	f04f 0a00 	mov.w	sl, #0
 800e8a0:	e7a8      	b.n	800e7f4 <__gethex+0x1ce>
 800e8a2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e8a6:	42a0      	cmp	r0, r4
 800e8a8:	dd6a      	ble.n	800e980 <__gethex+0x35a>
 800e8aa:	1b04      	subs	r4, r0, r4
 800e8ac:	42a6      	cmp	r6, r4
 800e8ae:	dc2e      	bgt.n	800e90e <__gethex+0x2e8>
 800e8b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d022      	beq.n	800e8fe <__gethex+0x2d8>
 800e8b8:	2b03      	cmp	r3, #3
 800e8ba:	d024      	beq.n	800e906 <__gethex+0x2e0>
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d115      	bne.n	800e8ec <__gethex+0x2c6>
 800e8c0:	42a6      	cmp	r6, r4
 800e8c2:	d113      	bne.n	800e8ec <__gethex+0x2c6>
 800e8c4:	2e01      	cmp	r6, #1
 800e8c6:	dc0b      	bgt.n	800e8e0 <__gethex+0x2ba>
 800e8c8:	9a06      	ldr	r2, [sp, #24]
 800e8ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e8ce:	6013      	str	r3, [r2, #0]
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	612b      	str	r3, [r5, #16]
 800e8d4:	f8c9 3000 	str.w	r3, [r9]
 800e8d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8da:	2762      	movs	r7, #98	; 0x62
 800e8dc:	601d      	str	r5, [r3, #0]
 800e8de:	e72a      	b.n	800e736 <__gethex+0x110>
 800e8e0:	1e71      	subs	r1, r6, #1
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	f000 fd8d 	bl	800f402 <__any_on>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d1ed      	bne.n	800e8c8 <__gethex+0x2a2>
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	9802      	ldr	r0, [sp, #8]
 800e8f0:	f000 f9dd 	bl	800ecae <_Bfree>
 800e8f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	2750      	movs	r7, #80	; 0x50
 800e8fc:	e71b      	b.n	800e736 <__gethex+0x110>
 800e8fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e900:	2b00      	cmp	r3, #0
 800e902:	d0e1      	beq.n	800e8c8 <__gethex+0x2a2>
 800e904:	e7f2      	b.n	800e8ec <__gethex+0x2c6>
 800e906:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1dd      	bne.n	800e8c8 <__gethex+0x2a2>
 800e90c:	e7ee      	b.n	800e8ec <__gethex+0x2c6>
 800e90e:	1e67      	subs	r7, r4, #1
 800e910:	f1ba 0f00 	cmp.w	sl, #0
 800e914:	d131      	bne.n	800e97a <__gethex+0x354>
 800e916:	b127      	cbz	r7, 800e922 <__gethex+0x2fc>
 800e918:	4639      	mov	r1, r7
 800e91a:	4628      	mov	r0, r5
 800e91c:	f000 fd71 	bl	800f402 <__any_on>
 800e920:	4682      	mov	sl, r0
 800e922:	117a      	asrs	r2, r7, #5
 800e924:	2301      	movs	r3, #1
 800e926:	f007 071f 	and.w	r7, r7, #31
 800e92a:	fa03 f707 	lsl.w	r7, r3, r7
 800e92e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e932:	4621      	mov	r1, r4
 800e934:	421f      	tst	r7, r3
 800e936:	4628      	mov	r0, r5
 800e938:	bf18      	it	ne
 800e93a:	f04a 0a02 	orrne.w	sl, sl, #2
 800e93e:	1b36      	subs	r6, r6, r4
 800e940:	f7ff fe22 	bl	800e588 <rshift>
 800e944:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e948:	2702      	movs	r7, #2
 800e94a:	f1ba 0f00 	cmp.w	sl, #0
 800e94e:	d048      	beq.n	800e9e2 <__gethex+0x3bc>
 800e950:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e954:	2b02      	cmp	r3, #2
 800e956:	d015      	beq.n	800e984 <__gethex+0x35e>
 800e958:	2b03      	cmp	r3, #3
 800e95a:	d017      	beq.n	800e98c <__gethex+0x366>
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d109      	bne.n	800e974 <__gethex+0x34e>
 800e960:	f01a 0f02 	tst.w	sl, #2
 800e964:	d006      	beq.n	800e974 <__gethex+0x34e>
 800e966:	f8d9 3000 	ldr.w	r3, [r9]
 800e96a:	ea4a 0a03 	orr.w	sl, sl, r3
 800e96e:	f01a 0f01 	tst.w	sl, #1
 800e972:	d10e      	bne.n	800e992 <__gethex+0x36c>
 800e974:	f047 0710 	orr.w	r7, r7, #16
 800e978:	e033      	b.n	800e9e2 <__gethex+0x3bc>
 800e97a:	f04f 0a01 	mov.w	sl, #1
 800e97e:	e7d0      	b.n	800e922 <__gethex+0x2fc>
 800e980:	2701      	movs	r7, #1
 800e982:	e7e2      	b.n	800e94a <__gethex+0x324>
 800e984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e986:	f1c3 0301 	rsb	r3, r3, #1
 800e98a:	9315      	str	r3, [sp, #84]	; 0x54
 800e98c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d0f0      	beq.n	800e974 <__gethex+0x34e>
 800e992:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e996:	f105 0314 	add.w	r3, r5, #20
 800e99a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e99e:	eb03 010a 	add.w	r1, r3, sl
 800e9a2:	f04f 0c00 	mov.w	ip, #0
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e9b0:	d01c      	beq.n	800e9ec <__gethex+0x3c6>
 800e9b2:	3201      	adds	r2, #1
 800e9b4:	6002      	str	r2, [r0, #0]
 800e9b6:	2f02      	cmp	r7, #2
 800e9b8:	f105 0314 	add.w	r3, r5, #20
 800e9bc:	d138      	bne.n	800ea30 <__gethex+0x40a>
 800e9be:	f8d8 2000 	ldr.w	r2, [r8]
 800e9c2:	3a01      	subs	r2, #1
 800e9c4:	42b2      	cmp	r2, r6
 800e9c6:	d10a      	bne.n	800e9de <__gethex+0x3b8>
 800e9c8:	1171      	asrs	r1, r6, #5
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	f006 061f 	and.w	r6, r6, #31
 800e9d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e9d4:	fa02 f606 	lsl.w	r6, r2, r6
 800e9d8:	421e      	tst	r6, r3
 800e9da:	bf18      	it	ne
 800e9dc:	4617      	movne	r7, r2
 800e9de:	f047 0720 	orr.w	r7, r7, #32
 800e9e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e9e4:	601d      	str	r5, [r3, #0]
 800e9e6:	9b06      	ldr	r3, [sp, #24]
 800e9e8:	601c      	str	r4, [r3, #0]
 800e9ea:	e6a4      	b.n	800e736 <__gethex+0x110>
 800e9ec:	4299      	cmp	r1, r3
 800e9ee:	f843 cc04 	str.w	ip, [r3, #-4]
 800e9f2:	d8d8      	bhi.n	800e9a6 <__gethex+0x380>
 800e9f4:	68ab      	ldr	r3, [r5, #8]
 800e9f6:	4599      	cmp	r9, r3
 800e9f8:	db12      	blt.n	800ea20 <__gethex+0x3fa>
 800e9fa:	6869      	ldr	r1, [r5, #4]
 800e9fc:	9802      	ldr	r0, [sp, #8]
 800e9fe:	3101      	adds	r1, #1
 800ea00:	f000 f921 	bl	800ec46 <_Balloc>
 800ea04:	692a      	ldr	r2, [r5, #16]
 800ea06:	3202      	adds	r2, #2
 800ea08:	f105 010c 	add.w	r1, r5, #12
 800ea0c:	4683      	mov	fp, r0
 800ea0e:	0092      	lsls	r2, r2, #2
 800ea10:	300c      	adds	r0, #12
 800ea12:	f000 f90d 	bl	800ec30 <memcpy>
 800ea16:	4629      	mov	r1, r5
 800ea18:	9802      	ldr	r0, [sp, #8]
 800ea1a:	f000 f948 	bl	800ecae <_Bfree>
 800ea1e:	465d      	mov	r5, fp
 800ea20:	692b      	ldr	r3, [r5, #16]
 800ea22:	1c5a      	adds	r2, r3, #1
 800ea24:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ea28:	612a      	str	r2, [r5, #16]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	615a      	str	r2, [r3, #20]
 800ea2e:	e7c2      	b.n	800e9b6 <__gethex+0x390>
 800ea30:	692a      	ldr	r2, [r5, #16]
 800ea32:	454a      	cmp	r2, r9
 800ea34:	dd0b      	ble.n	800ea4e <__gethex+0x428>
 800ea36:	2101      	movs	r1, #1
 800ea38:	4628      	mov	r0, r5
 800ea3a:	f7ff fda5 	bl	800e588 <rshift>
 800ea3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea42:	3401      	adds	r4, #1
 800ea44:	42a3      	cmp	r3, r4
 800ea46:	f6ff aed9 	blt.w	800e7fc <__gethex+0x1d6>
 800ea4a:	2701      	movs	r7, #1
 800ea4c:	e7c7      	b.n	800e9de <__gethex+0x3b8>
 800ea4e:	f016 061f 	ands.w	r6, r6, #31
 800ea52:	d0fa      	beq.n	800ea4a <__gethex+0x424>
 800ea54:	449a      	add	sl, r3
 800ea56:	f1c6 0620 	rsb	r6, r6, #32
 800ea5a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ea5e:	f000 f9b6 	bl	800edce <__hi0bits>
 800ea62:	42b0      	cmp	r0, r6
 800ea64:	dbe7      	blt.n	800ea36 <__gethex+0x410>
 800ea66:	e7f0      	b.n	800ea4a <__gethex+0x424>

0800ea68 <L_shift>:
 800ea68:	f1c2 0208 	rsb	r2, r2, #8
 800ea6c:	0092      	lsls	r2, r2, #2
 800ea6e:	b570      	push	{r4, r5, r6, lr}
 800ea70:	f1c2 0620 	rsb	r6, r2, #32
 800ea74:	6843      	ldr	r3, [r0, #4]
 800ea76:	6804      	ldr	r4, [r0, #0]
 800ea78:	fa03 f506 	lsl.w	r5, r3, r6
 800ea7c:	432c      	orrs	r4, r5
 800ea7e:	40d3      	lsrs	r3, r2
 800ea80:	6004      	str	r4, [r0, #0]
 800ea82:	f840 3f04 	str.w	r3, [r0, #4]!
 800ea86:	4288      	cmp	r0, r1
 800ea88:	d3f4      	bcc.n	800ea74 <L_shift+0xc>
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}

0800ea8c <__match>:
 800ea8c:	b530      	push	{r4, r5, lr}
 800ea8e:	6803      	ldr	r3, [r0, #0]
 800ea90:	3301      	adds	r3, #1
 800ea92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea96:	b914      	cbnz	r4, 800ea9e <__match+0x12>
 800ea98:	6003      	str	r3, [r0, #0]
 800ea9a:	2001      	movs	r0, #1
 800ea9c:	bd30      	pop	{r4, r5, pc}
 800ea9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eaa6:	2d19      	cmp	r5, #25
 800eaa8:	bf98      	it	ls
 800eaaa:	3220      	addls	r2, #32
 800eaac:	42a2      	cmp	r2, r4
 800eaae:	d0f0      	beq.n	800ea92 <__match+0x6>
 800eab0:	2000      	movs	r0, #0
 800eab2:	e7f3      	b.n	800ea9c <__match+0x10>

0800eab4 <__hexnan>:
 800eab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab8:	680b      	ldr	r3, [r1, #0]
 800eaba:	6801      	ldr	r1, [r0, #0]
 800eabc:	115f      	asrs	r7, r3, #5
 800eabe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800eac2:	f013 031f 	ands.w	r3, r3, #31
 800eac6:	b087      	sub	sp, #28
 800eac8:	bf18      	it	ne
 800eaca:	3704      	addne	r7, #4
 800eacc:	2500      	movs	r5, #0
 800eace:	1f3e      	subs	r6, r7, #4
 800ead0:	4682      	mov	sl, r0
 800ead2:	4690      	mov	r8, r2
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	f847 5c04 	str.w	r5, [r7, #-4]
 800eada:	46b1      	mov	r9, r6
 800eadc:	4634      	mov	r4, r6
 800eade:	9502      	str	r5, [sp, #8]
 800eae0:	46ab      	mov	fp, r5
 800eae2:	784a      	ldrb	r2, [r1, #1]
 800eae4:	1c4b      	adds	r3, r1, #1
 800eae6:	9303      	str	r3, [sp, #12]
 800eae8:	b342      	cbz	r2, 800eb3c <__hexnan+0x88>
 800eaea:	4610      	mov	r0, r2
 800eaec:	9105      	str	r1, [sp, #20]
 800eaee:	9204      	str	r2, [sp, #16]
 800eaf0:	f7ff fd84 	bl	800e5fc <__hexdig_fun>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d143      	bne.n	800eb80 <__hexnan+0xcc>
 800eaf8:	9a04      	ldr	r2, [sp, #16]
 800eafa:	9905      	ldr	r1, [sp, #20]
 800eafc:	2a20      	cmp	r2, #32
 800eafe:	d818      	bhi.n	800eb32 <__hexnan+0x7e>
 800eb00:	9b02      	ldr	r3, [sp, #8]
 800eb02:	459b      	cmp	fp, r3
 800eb04:	dd13      	ble.n	800eb2e <__hexnan+0x7a>
 800eb06:	454c      	cmp	r4, r9
 800eb08:	d206      	bcs.n	800eb18 <__hexnan+0x64>
 800eb0a:	2d07      	cmp	r5, #7
 800eb0c:	dc04      	bgt.n	800eb18 <__hexnan+0x64>
 800eb0e:	462a      	mov	r2, r5
 800eb10:	4649      	mov	r1, r9
 800eb12:	4620      	mov	r0, r4
 800eb14:	f7ff ffa8 	bl	800ea68 <L_shift>
 800eb18:	4544      	cmp	r4, r8
 800eb1a:	d944      	bls.n	800eba6 <__hexnan+0xf2>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f1a4 0904 	sub.w	r9, r4, #4
 800eb22:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb26:	f8cd b008 	str.w	fp, [sp, #8]
 800eb2a:	464c      	mov	r4, r9
 800eb2c:	461d      	mov	r5, r3
 800eb2e:	9903      	ldr	r1, [sp, #12]
 800eb30:	e7d7      	b.n	800eae2 <__hexnan+0x2e>
 800eb32:	2a29      	cmp	r2, #41	; 0x29
 800eb34:	d14a      	bne.n	800ebcc <__hexnan+0x118>
 800eb36:	3102      	adds	r1, #2
 800eb38:	f8ca 1000 	str.w	r1, [sl]
 800eb3c:	f1bb 0f00 	cmp.w	fp, #0
 800eb40:	d044      	beq.n	800ebcc <__hexnan+0x118>
 800eb42:	454c      	cmp	r4, r9
 800eb44:	d206      	bcs.n	800eb54 <__hexnan+0xa0>
 800eb46:	2d07      	cmp	r5, #7
 800eb48:	dc04      	bgt.n	800eb54 <__hexnan+0xa0>
 800eb4a:	462a      	mov	r2, r5
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f7ff ff8a 	bl	800ea68 <L_shift>
 800eb54:	4544      	cmp	r4, r8
 800eb56:	d928      	bls.n	800ebaa <__hexnan+0xf6>
 800eb58:	4643      	mov	r3, r8
 800eb5a:	f854 2b04 	ldr.w	r2, [r4], #4
 800eb5e:	f843 2b04 	str.w	r2, [r3], #4
 800eb62:	42a6      	cmp	r6, r4
 800eb64:	d2f9      	bcs.n	800eb5a <__hexnan+0xa6>
 800eb66:	2200      	movs	r2, #0
 800eb68:	f843 2b04 	str.w	r2, [r3], #4
 800eb6c:	429e      	cmp	r6, r3
 800eb6e:	d2fb      	bcs.n	800eb68 <__hexnan+0xb4>
 800eb70:	6833      	ldr	r3, [r6, #0]
 800eb72:	b91b      	cbnz	r3, 800eb7c <__hexnan+0xc8>
 800eb74:	4546      	cmp	r6, r8
 800eb76:	d127      	bne.n	800ebc8 <__hexnan+0x114>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	6033      	str	r3, [r6, #0]
 800eb7c:	2005      	movs	r0, #5
 800eb7e:	e026      	b.n	800ebce <__hexnan+0x11a>
 800eb80:	3501      	adds	r5, #1
 800eb82:	2d08      	cmp	r5, #8
 800eb84:	f10b 0b01 	add.w	fp, fp, #1
 800eb88:	dd06      	ble.n	800eb98 <__hexnan+0xe4>
 800eb8a:	4544      	cmp	r4, r8
 800eb8c:	d9cf      	bls.n	800eb2e <__hexnan+0x7a>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	f844 3c04 	str.w	r3, [r4, #-4]
 800eb94:	2501      	movs	r5, #1
 800eb96:	3c04      	subs	r4, #4
 800eb98:	6822      	ldr	r2, [r4, #0]
 800eb9a:	f000 000f 	and.w	r0, r0, #15
 800eb9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eba2:	6020      	str	r0, [r4, #0]
 800eba4:	e7c3      	b.n	800eb2e <__hexnan+0x7a>
 800eba6:	2508      	movs	r5, #8
 800eba8:	e7c1      	b.n	800eb2e <__hexnan+0x7a>
 800ebaa:	9b01      	ldr	r3, [sp, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d0df      	beq.n	800eb70 <__hexnan+0xbc>
 800ebb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb4:	f1c3 0320 	rsb	r3, r3, #32
 800ebb8:	fa22 f303 	lsr.w	r3, r2, r3
 800ebbc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ebc0:	401a      	ands	r2, r3
 800ebc2:	f847 2c04 	str.w	r2, [r7, #-4]
 800ebc6:	e7d3      	b.n	800eb70 <__hexnan+0xbc>
 800ebc8:	3e04      	subs	r6, #4
 800ebca:	e7d1      	b.n	800eb70 <__hexnan+0xbc>
 800ebcc:	2004      	movs	r0, #4
 800ebce:	b007      	add	sp, #28
 800ebd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebd4 <__locale_ctype_ptr_l>:
 800ebd4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ebd8:	4770      	bx	lr

0800ebda <__localeconv_l>:
 800ebda:	30f0      	adds	r0, #240	; 0xf0
 800ebdc:	4770      	bx	lr
	...

0800ebe0 <_localeconv_r>:
 800ebe0:	4b04      	ldr	r3, [pc, #16]	; (800ebf4 <_localeconv_r+0x14>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6a18      	ldr	r0, [r3, #32]
 800ebe6:	4b04      	ldr	r3, [pc, #16]	; (800ebf8 <_localeconv_r+0x18>)
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	bf08      	it	eq
 800ebec:	4618      	moveq	r0, r3
 800ebee:	30f0      	adds	r0, #240	; 0xf0
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	20000024 	.word	0x20000024
 800ebf8:	20000088 	.word	0x20000088

0800ebfc <malloc>:
 800ebfc:	4b02      	ldr	r3, [pc, #8]	; (800ec08 <malloc+0xc>)
 800ebfe:	4601      	mov	r1, r0
 800ec00:	6818      	ldr	r0, [r3, #0]
 800ec02:	f000 bc7b 	b.w	800f4fc <_malloc_r>
 800ec06:	bf00      	nop
 800ec08:	20000024 	.word	0x20000024

0800ec0c <__ascii_mbtowc>:
 800ec0c:	b082      	sub	sp, #8
 800ec0e:	b901      	cbnz	r1, 800ec12 <__ascii_mbtowc+0x6>
 800ec10:	a901      	add	r1, sp, #4
 800ec12:	b142      	cbz	r2, 800ec26 <__ascii_mbtowc+0x1a>
 800ec14:	b14b      	cbz	r3, 800ec2a <__ascii_mbtowc+0x1e>
 800ec16:	7813      	ldrb	r3, [r2, #0]
 800ec18:	600b      	str	r3, [r1, #0]
 800ec1a:	7812      	ldrb	r2, [r2, #0]
 800ec1c:	1c10      	adds	r0, r2, #0
 800ec1e:	bf18      	it	ne
 800ec20:	2001      	movne	r0, #1
 800ec22:	b002      	add	sp, #8
 800ec24:	4770      	bx	lr
 800ec26:	4610      	mov	r0, r2
 800ec28:	e7fb      	b.n	800ec22 <__ascii_mbtowc+0x16>
 800ec2a:	f06f 0001 	mvn.w	r0, #1
 800ec2e:	e7f8      	b.n	800ec22 <__ascii_mbtowc+0x16>

0800ec30 <memcpy>:
 800ec30:	b510      	push	{r4, lr}
 800ec32:	1e43      	subs	r3, r0, #1
 800ec34:	440a      	add	r2, r1
 800ec36:	4291      	cmp	r1, r2
 800ec38:	d100      	bne.n	800ec3c <memcpy+0xc>
 800ec3a:	bd10      	pop	{r4, pc}
 800ec3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec44:	e7f7      	b.n	800ec36 <memcpy+0x6>

0800ec46 <_Balloc>:
 800ec46:	b570      	push	{r4, r5, r6, lr}
 800ec48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ec4a:	4604      	mov	r4, r0
 800ec4c:	460e      	mov	r6, r1
 800ec4e:	b93d      	cbnz	r5, 800ec60 <_Balloc+0x1a>
 800ec50:	2010      	movs	r0, #16
 800ec52:	f7ff ffd3 	bl	800ebfc <malloc>
 800ec56:	6260      	str	r0, [r4, #36]	; 0x24
 800ec58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ec5c:	6005      	str	r5, [r0, #0]
 800ec5e:	60c5      	str	r5, [r0, #12]
 800ec60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ec62:	68eb      	ldr	r3, [r5, #12]
 800ec64:	b183      	cbz	r3, 800ec88 <_Balloc+0x42>
 800ec66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec68:	68db      	ldr	r3, [r3, #12]
 800ec6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ec6e:	b9b8      	cbnz	r0, 800eca0 <_Balloc+0x5a>
 800ec70:	2101      	movs	r1, #1
 800ec72:	fa01 f506 	lsl.w	r5, r1, r6
 800ec76:	1d6a      	adds	r2, r5, #5
 800ec78:	0092      	lsls	r2, r2, #2
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f000 fbe2 	bl	800f444 <_calloc_r>
 800ec80:	b160      	cbz	r0, 800ec9c <_Balloc+0x56>
 800ec82:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ec86:	e00e      	b.n	800eca6 <_Balloc+0x60>
 800ec88:	2221      	movs	r2, #33	; 0x21
 800ec8a:	2104      	movs	r1, #4
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 fbd9 	bl	800f444 <_calloc_r>
 800ec92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec94:	60e8      	str	r0, [r5, #12]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1e4      	bne.n	800ec66 <_Balloc+0x20>
 800ec9c:	2000      	movs	r0, #0
 800ec9e:	bd70      	pop	{r4, r5, r6, pc}
 800eca0:	6802      	ldr	r2, [r0, #0]
 800eca2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800eca6:	2300      	movs	r3, #0
 800eca8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ecac:	e7f7      	b.n	800ec9e <_Balloc+0x58>

0800ecae <_Bfree>:
 800ecae:	b570      	push	{r4, r5, r6, lr}
 800ecb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ecb2:	4606      	mov	r6, r0
 800ecb4:	460d      	mov	r5, r1
 800ecb6:	b93c      	cbnz	r4, 800ecc8 <_Bfree+0x1a>
 800ecb8:	2010      	movs	r0, #16
 800ecba:	f7ff ff9f 	bl	800ebfc <malloc>
 800ecbe:	6270      	str	r0, [r6, #36]	; 0x24
 800ecc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ecc4:	6004      	str	r4, [r0, #0]
 800ecc6:	60c4      	str	r4, [r0, #12]
 800ecc8:	b13d      	cbz	r5, 800ecda <_Bfree+0x2c>
 800ecca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800eccc:	686a      	ldr	r2, [r5, #4]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecd4:	6029      	str	r1, [r5, #0]
 800ecd6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ecda:	bd70      	pop	{r4, r5, r6, pc}

0800ecdc <__multadd>:
 800ecdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece0:	690d      	ldr	r5, [r1, #16]
 800ece2:	461f      	mov	r7, r3
 800ece4:	4606      	mov	r6, r0
 800ece6:	460c      	mov	r4, r1
 800ece8:	f101 0c14 	add.w	ip, r1, #20
 800ecec:	2300      	movs	r3, #0
 800ecee:	f8dc 0000 	ldr.w	r0, [ip]
 800ecf2:	b281      	uxth	r1, r0
 800ecf4:	fb02 7101 	mla	r1, r2, r1, r7
 800ecf8:	0c0f      	lsrs	r7, r1, #16
 800ecfa:	0c00      	lsrs	r0, r0, #16
 800ecfc:	fb02 7000 	mla	r0, r2, r0, r7
 800ed00:	b289      	uxth	r1, r1
 800ed02:	3301      	adds	r3, #1
 800ed04:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ed08:	429d      	cmp	r5, r3
 800ed0a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ed0e:	f84c 1b04 	str.w	r1, [ip], #4
 800ed12:	dcec      	bgt.n	800ecee <__multadd+0x12>
 800ed14:	b1d7      	cbz	r7, 800ed4c <__multadd+0x70>
 800ed16:	68a3      	ldr	r3, [r4, #8]
 800ed18:	42ab      	cmp	r3, r5
 800ed1a:	dc12      	bgt.n	800ed42 <__multadd+0x66>
 800ed1c:	6861      	ldr	r1, [r4, #4]
 800ed1e:	4630      	mov	r0, r6
 800ed20:	3101      	adds	r1, #1
 800ed22:	f7ff ff90 	bl	800ec46 <_Balloc>
 800ed26:	6922      	ldr	r2, [r4, #16]
 800ed28:	3202      	adds	r2, #2
 800ed2a:	f104 010c 	add.w	r1, r4, #12
 800ed2e:	4680      	mov	r8, r0
 800ed30:	0092      	lsls	r2, r2, #2
 800ed32:	300c      	adds	r0, #12
 800ed34:	f7ff ff7c 	bl	800ec30 <memcpy>
 800ed38:	4621      	mov	r1, r4
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	f7ff ffb7 	bl	800ecae <_Bfree>
 800ed40:	4644      	mov	r4, r8
 800ed42:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed46:	3501      	adds	r5, #1
 800ed48:	615f      	str	r7, [r3, #20]
 800ed4a:	6125      	str	r5, [r4, #16]
 800ed4c:	4620      	mov	r0, r4
 800ed4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed52 <__s2b>:
 800ed52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed56:	460c      	mov	r4, r1
 800ed58:	4615      	mov	r5, r2
 800ed5a:	461f      	mov	r7, r3
 800ed5c:	2209      	movs	r2, #9
 800ed5e:	3308      	adds	r3, #8
 800ed60:	4606      	mov	r6, r0
 800ed62:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed66:	2100      	movs	r1, #0
 800ed68:	2201      	movs	r2, #1
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	db20      	blt.n	800edb0 <__s2b+0x5e>
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f7ff ff69 	bl	800ec46 <_Balloc>
 800ed74:	9b08      	ldr	r3, [sp, #32]
 800ed76:	6143      	str	r3, [r0, #20]
 800ed78:	2d09      	cmp	r5, #9
 800ed7a:	f04f 0301 	mov.w	r3, #1
 800ed7e:	6103      	str	r3, [r0, #16]
 800ed80:	dd19      	ble.n	800edb6 <__s2b+0x64>
 800ed82:	f104 0809 	add.w	r8, r4, #9
 800ed86:	46c1      	mov	r9, r8
 800ed88:	442c      	add	r4, r5
 800ed8a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ed8e:	4601      	mov	r1, r0
 800ed90:	3b30      	subs	r3, #48	; 0x30
 800ed92:	220a      	movs	r2, #10
 800ed94:	4630      	mov	r0, r6
 800ed96:	f7ff ffa1 	bl	800ecdc <__multadd>
 800ed9a:	45a1      	cmp	r9, r4
 800ed9c:	d1f5      	bne.n	800ed8a <__s2b+0x38>
 800ed9e:	eb08 0405 	add.w	r4, r8, r5
 800eda2:	3c08      	subs	r4, #8
 800eda4:	1b2d      	subs	r5, r5, r4
 800eda6:	1963      	adds	r3, r4, r5
 800eda8:	42bb      	cmp	r3, r7
 800edaa:	db07      	blt.n	800edbc <__s2b+0x6a>
 800edac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb0:	0052      	lsls	r2, r2, #1
 800edb2:	3101      	adds	r1, #1
 800edb4:	e7d9      	b.n	800ed6a <__s2b+0x18>
 800edb6:	340a      	adds	r4, #10
 800edb8:	2509      	movs	r5, #9
 800edba:	e7f3      	b.n	800eda4 <__s2b+0x52>
 800edbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800edc0:	4601      	mov	r1, r0
 800edc2:	3b30      	subs	r3, #48	; 0x30
 800edc4:	220a      	movs	r2, #10
 800edc6:	4630      	mov	r0, r6
 800edc8:	f7ff ff88 	bl	800ecdc <__multadd>
 800edcc:	e7eb      	b.n	800eda6 <__s2b+0x54>

0800edce <__hi0bits>:
 800edce:	0c02      	lsrs	r2, r0, #16
 800edd0:	0412      	lsls	r2, r2, #16
 800edd2:	4603      	mov	r3, r0
 800edd4:	b9b2      	cbnz	r2, 800ee04 <__hi0bits+0x36>
 800edd6:	0403      	lsls	r3, r0, #16
 800edd8:	2010      	movs	r0, #16
 800edda:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800edde:	bf04      	itt	eq
 800ede0:	021b      	lsleq	r3, r3, #8
 800ede2:	3008      	addeq	r0, #8
 800ede4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ede8:	bf04      	itt	eq
 800edea:	011b      	lsleq	r3, r3, #4
 800edec:	3004      	addeq	r0, #4
 800edee:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800edf2:	bf04      	itt	eq
 800edf4:	009b      	lsleq	r3, r3, #2
 800edf6:	3002      	addeq	r0, #2
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	db06      	blt.n	800ee0a <__hi0bits+0x3c>
 800edfc:	005b      	lsls	r3, r3, #1
 800edfe:	d503      	bpl.n	800ee08 <__hi0bits+0x3a>
 800ee00:	3001      	adds	r0, #1
 800ee02:	4770      	bx	lr
 800ee04:	2000      	movs	r0, #0
 800ee06:	e7e8      	b.n	800edda <__hi0bits+0xc>
 800ee08:	2020      	movs	r0, #32
 800ee0a:	4770      	bx	lr

0800ee0c <__lo0bits>:
 800ee0c:	6803      	ldr	r3, [r0, #0]
 800ee0e:	f013 0207 	ands.w	r2, r3, #7
 800ee12:	4601      	mov	r1, r0
 800ee14:	d00b      	beq.n	800ee2e <__lo0bits+0x22>
 800ee16:	07da      	lsls	r2, r3, #31
 800ee18:	d423      	bmi.n	800ee62 <__lo0bits+0x56>
 800ee1a:	0798      	lsls	r0, r3, #30
 800ee1c:	bf49      	itett	mi
 800ee1e:	085b      	lsrmi	r3, r3, #1
 800ee20:	089b      	lsrpl	r3, r3, #2
 800ee22:	2001      	movmi	r0, #1
 800ee24:	600b      	strmi	r3, [r1, #0]
 800ee26:	bf5c      	itt	pl
 800ee28:	600b      	strpl	r3, [r1, #0]
 800ee2a:	2002      	movpl	r0, #2
 800ee2c:	4770      	bx	lr
 800ee2e:	b298      	uxth	r0, r3
 800ee30:	b9a8      	cbnz	r0, 800ee5e <__lo0bits+0x52>
 800ee32:	0c1b      	lsrs	r3, r3, #16
 800ee34:	2010      	movs	r0, #16
 800ee36:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ee3a:	bf04      	itt	eq
 800ee3c:	0a1b      	lsreq	r3, r3, #8
 800ee3e:	3008      	addeq	r0, #8
 800ee40:	071a      	lsls	r2, r3, #28
 800ee42:	bf04      	itt	eq
 800ee44:	091b      	lsreq	r3, r3, #4
 800ee46:	3004      	addeq	r0, #4
 800ee48:	079a      	lsls	r2, r3, #30
 800ee4a:	bf04      	itt	eq
 800ee4c:	089b      	lsreq	r3, r3, #2
 800ee4e:	3002      	addeq	r0, #2
 800ee50:	07da      	lsls	r2, r3, #31
 800ee52:	d402      	bmi.n	800ee5a <__lo0bits+0x4e>
 800ee54:	085b      	lsrs	r3, r3, #1
 800ee56:	d006      	beq.n	800ee66 <__lo0bits+0x5a>
 800ee58:	3001      	adds	r0, #1
 800ee5a:	600b      	str	r3, [r1, #0]
 800ee5c:	4770      	bx	lr
 800ee5e:	4610      	mov	r0, r2
 800ee60:	e7e9      	b.n	800ee36 <__lo0bits+0x2a>
 800ee62:	2000      	movs	r0, #0
 800ee64:	4770      	bx	lr
 800ee66:	2020      	movs	r0, #32
 800ee68:	4770      	bx	lr

0800ee6a <__i2b>:
 800ee6a:	b510      	push	{r4, lr}
 800ee6c:	460c      	mov	r4, r1
 800ee6e:	2101      	movs	r1, #1
 800ee70:	f7ff fee9 	bl	800ec46 <_Balloc>
 800ee74:	2201      	movs	r2, #1
 800ee76:	6144      	str	r4, [r0, #20]
 800ee78:	6102      	str	r2, [r0, #16]
 800ee7a:	bd10      	pop	{r4, pc}

0800ee7c <__multiply>:
 800ee7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee80:	4614      	mov	r4, r2
 800ee82:	690a      	ldr	r2, [r1, #16]
 800ee84:	6923      	ldr	r3, [r4, #16]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	bfb8      	it	lt
 800ee8a:	460b      	movlt	r3, r1
 800ee8c:	4688      	mov	r8, r1
 800ee8e:	bfbc      	itt	lt
 800ee90:	46a0      	movlt	r8, r4
 800ee92:	461c      	movlt	r4, r3
 800ee94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ee98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ee9c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eea0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eea4:	eb07 0609 	add.w	r6, r7, r9
 800eea8:	42b3      	cmp	r3, r6
 800eeaa:	bfb8      	it	lt
 800eeac:	3101      	addlt	r1, #1
 800eeae:	f7ff feca 	bl	800ec46 <_Balloc>
 800eeb2:	f100 0514 	add.w	r5, r0, #20
 800eeb6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800eeba:	462b      	mov	r3, r5
 800eebc:	2200      	movs	r2, #0
 800eebe:	4573      	cmp	r3, lr
 800eec0:	d316      	bcc.n	800eef0 <__multiply+0x74>
 800eec2:	f104 0214 	add.w	r2, r4, #20
 800eec6:	f108 0114 	add.w	r1, r8, #20
 800eeca:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800eece:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	9b00      	ldr	r3, [sp, #0]
 800eed6:	9201      	str	r2, [sp, #4]
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d80c      	bhi.n	800eef6 <__multiply+0x7a>
 800eedc:	2e00      	cmp	r6, #0
 800eede:	dd03      	ble.n	800eee8 <__multiply+0x6c>
 800eee0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d05d      	beq.n	800efa4 <__multiply+0x128>
 800eee8:	6106      	str	r6, [r0, #16]
 800eeea:	b003      	add	sp, #12
 800eeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef0:	f843 2b04 	str.w	r2, [r3], #4
 800eef4:	e7e3      	b.n	800eebe <__multiply+0x42>
 800eef6:	f8b2 b000 	ldrh.w	fp, [r2]
 800eefa:	f1bb 0f00 	cmp.w	fp, #0
 800eefe:	d023      	beq.n	800ef48 <__multiply+0xcc>
 800ef00:	4689      	mov	r9, r1
 800ef02:	46ac      	mov	ip, r5
 800ef04:	f04f 0800 	mov.w	r8, #0
 800ef08:	f859 4b04 	ldr.w	r4, [r9], #4
 800ef0c:	f8dc a000 	ldr.w	sl, [ip]
 800ef10:	b2a3      	uxth	r3, r4
 800ef12:	fa1f fa8a 	uxth.w	sl, sl
 800ef16:	fb0b a303 	mla	r3, fp, r3, sl
 800ef1a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ef1e:	f8dc 4000 	ldr.w	r4, [ip]
 800ef22:	4443      	add	r3, r8
 800ef24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ef28:	fb0b 840a 	mla	r4, fp, sl, r8
 800ef2c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ef30:	46e2      	mov	sl, ip
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ef38:	454f      	cmp	r7, r9
 800ef3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ef3e:	f84a 3b04 	str.w	r3, [sl], #4
 800ef42:	d82b      	bhi.n	800ef9c <__multiply+0x120>
 800ef44:	f8cc 8004 	str.w	r8, [ip, #4]
 800ef48:	9b01      	ldr	r3, [sp, #4]
 800ef4a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ef4e:	3204      	adds	r2, #4
 800ef50:	f1ba 0f00 	cmp.w	sl, #0
 800ef54:	d020      	beq.n	800ef98 <__multiply+0x11c>
 800ef56:	682b      	ldr	r3, [r5, #0]
 800ef58:	4689      	mov	r9, r1
 800ef5a:	46a8      	mov	r8, r5
 800ef5c:	f04f 0b00 	mov.w	fp, #0
 800ef60:	f8b9 c000 	ldrh.w	ip, [r9]
 800ef64:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ef68:	fb0a 440c 	mla	r4, sl, ip, r4
 800ef6c:	445c      	add	r4, fp
 800ef6e:	46c4      	mov	ip, r8
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ef76:	f84c 3b04 	str.w	r3, [ip], #4
 800ef7a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ef7e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ef82:	0c1b      	lsrs	r3, r3, #16
 800ef84:	fb0a b303 	mla	r3, sl, r3, fp
 800ef88:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ef8c:	454f      	cmp	r7, r9
 800ef8e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ef92:	d805      	bhi.n	800efa0 <__multiply+0x124>
 800ef94:	f8c8 3004 	str.w	r3, [r8, #4]
 800ef98:	3504      	adds	r5, #4
 800ef9a:	e79b      	b.n	800eed4 <__multiply+0x58>
 800ef9c:	46d4      	mov	ip, sl
 800ef9e:	e7b3      	b.n	800ef08 <__multiply+0x8c>
 800efa0:	46e0      	mov	r8, ip
 800efa2:	e7dd      	b.n	800ef60 <__multiply+0xe4>
 800efa4:	3e01      	subs	r6, #1
 800efa6:	e799      	b.n	800eedc <__multiply+0x60>

0800efa8 <__pow5mult>:
 800efa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efac:	4615      	mov	r5, r2
 800efae:	f012 0203 	ands.w	r2, r2, #3
 800efb2:	4606      	mov	r6, r0
 800efb4:	460f      	mov	r7, r1
 800efb6:	d007      	beq.n	800efc8 <__pow5mult+0x20>
 800efb8:	3a01      	subs	r2, #1
 800efba:	4c21      	ldr	r4, [pc, #132]	; (800f040 <__pow5mult+0x98>)
 800efbc:	2300      	movs	r3, #0
 800efbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800efc2:	f7ff fe8b 	bl	800ecdc <__multadd>
 800efc6:	4607      	mov	r7, r0
 800efc8:	10ad      	asrs	r5, r5, #2
 800efca:	d035      	beq.n	800f038 <__pow5mult+0x90>
 800efcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800efce:	b93c      	cbnz	r4, 800efe0 <__pow5mult+0x38>
 800efd0:	2010      	movs	r0, #16
 800efd2:	f7ff fe13 	bl	800ebfc <malloc>
 800efd6:	6270      	str	r0, [r6, #36]	; 0x24
 800efd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800efdc:	6004      	str	r4, [r0, #0]
 800efde:	60c4      	str	r4, [r0, #12]
 800efe0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800efe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800efe8:	b94c      	cbnz	r4, 800effe <__pow5mult+0x56>
 800efea:	f240 2171 	movw	r1, #625	; 0x271
 800efee:	4630      	mov	r0, r6
 800eff0:	f7ff ff3b 	bl	800ee6a <__i2b>
 800eff4:	2300      	movs	r3, #0
 800eff6:	f8c8 0008 	str.w	r0, [r8, #8]
 800effa:	4604      	mov	r4, r0
 800effc:	6003      	str	r3, [r0, #0]
 800effe:	f04f 0800 	mov.w	r8, #0
 800f002:	07eb      	lsls	r3, r5, #31
 800f004:	d50a      	bpl.n	800f01c <__pow5mult+0x74>
 800f006:	4639      	mov	r1, r7
 800f008:	4622      	mov	r2, r4
 800f00a:	4630      	mov	r0, r6
 800f00c:	f7ff ff36 	bl	800ee7c <__multiply>
 800f010:	4639      	mov	r1, r7
 800f012:	4681      	mov	r9, r0
 800f014:	4630      	mov	r0, r6
 800f016:	f7ff fe4a 	bl	800ecae <_Bfree>
 800f01a:	464f      	mov	r7, r9
 800f01c:	106d      	asrs	r5, r5, #1
 800f01e:	d00b      	beq.n	800f038 <__pow5mult+0x90>
 800f020:	6820      	ldr	r0, [r4, #0]
 800f022:	b938      	cbnz	r0, 800f034 <__pow5mult+0x8c>
 800f024:	4622      	mov	r2, r4
 800f026:	4621      	mov	r1, r4
 800f028:	4630      	mov	r0, r6
 800f02a:	f7ff ff27 	bl	800ee7c <__multiply>
 800f02e:	6020      	str	r0, [r4, #0]
 800f030:	f8c0 8000 	str.w	r8, [r0]
 800f034:	4604      	mov	r4, r0
 800f036:	e7e4      	b.n	800f002 <__pow5mult+0x5a>
 800f038:	4638      	mov	r0, r7
 800f03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f03e:	bf00      	nop
 800f040:	0800fca8 	.word	0x0800fca8

0800f044 <__lshift>:
 800f044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f048:	460c      	mov	r4, r1
 800f04a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f04e:	6923      	ldr	r3, [r4, #16]
 800f050:	6849      	ldr	r1, [r1, #4]
 800f052:	eb0a 0903 	add.w	r9, sl, r3
 800f056:	68a3      	ldr	r3, [r4, #8]
 800f058:	4607      	mov	r7, r0
 800f05a:	4616      	mov	r6, r2
 800f05c:	f109 0501 	add.w	r5, r9, #1
 800f060:	42ab      	cmp	r3, r5
 800f062:	db32      	blt.n	800f0ca <__lshift+0x86>
 800f064:	4638      	mov	r0, r7
 800f066:	f7ff fdee 	bl	800ec46 <_Balloc>
 800f06a:	2300      	movs	r3, #0
 800f06c:	4680      	mov	r8, r0
 800f06e:	f100 0114 	add.w	r1, r0, #20
 800f072:	461a      	mov	r2, r3
 800f074:	4553      	cmp	r3, sl
 800f076:	db2b      	blt.n	800f0d0 <__lshift+0x8c>
 800f078:	6920      	ldr	r0, [r4, #16]
 800f07a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f07e:	f104 0314 	add.w	r3, r4, #20
 800f082:	f016 021f 	ands.w	r2, r6, #31
 800f086:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f08a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f08e:	d025      	beq.n	800f0dc <__lshift+0x98>
 800f090:	f1c2 0e20 	rsb	lr, r2, #32
 800f094:	2000      	movs	r0, #0
 800f096:	681e      	ldr	r6, [r3, #0]
 800f098:	468a      	mov	sl, r1
 800f09a:	4096      	lsls	r6, r2
 800f09c:	4330      	orrs	r0, r6
 800f09e:	f84a 0b04 	str.w	r0, [sl], #4
 800f0a2:	f853 0b04 	ldr.w	r0, [r3], #4
 800f0a6:	459c      	cmp	ip, r3
 800f0a8:	fa20 f00e 	lsr.w	r0, r0, lr
 800f0ac:	d814      	bhi.n	800f0d8 <__lshift+0x94>
 800f0ae:	6048      	str	r0, [r1, #4]
 800f0b0:	b108      	cbz	r0, 800f0b6 <__lshift+0x72>
 800f0b2:	f109 0502 	add.w	r5, r9, #2
 800f0b6:	3d01      	subs	r5, #1
 800f0b8:	4638      	mov	r0, r7
 800f0ba:	f8c8 5010 	str.w	r5, [r8, #16]
 800f0be:	4621      	mov	r1, r4
 800f0c0:	f7ff fdf5 	bl	800ecae <_Bfree>
 800f0c4:	4640      	mov	r0, r8
 800f0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ca:	3101      	adds	r1, #1
 800f0cc:	005b      	lsls	r3, r3, #1
 800f0ce:	e7c7      	b.n	800f060 <__lshift+0x1c>
 800f0d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	e7cd      	b.n	800f074 <__lshift+0x30>
 800f0d8:	4651      	mov	r1, sl
 800f0da:	e7dc      	b.n	800f096 <__lshift+0x52>
 800f0dc:	3904      	subs	r1, #4
 800f0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0e2:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0e6:	459c      	cmp	ip, r3
 800f0e8:	d8f9      	bhi.n	800f0de <__lshift+0x9a>
 800f0ea:	e7e4      	b.n	800f0b6 <__lshift+0x72>

0800f0ec <__mcmp>:
 800f0ec:	6903      	ldr	r3, [r0, #16]
 800f0ee:	690a      	ldr	r2, [r1, #16]
 800f0f0:	1a9b      	subs	r3, r3, r2
 800f0f2:	b530      	push	{r4, r5, lr}
 800f0f4:	d10c      	bne.n	800f110 <__mcmp+0x24>
 800f0f6:	0092      	lsls	r2, r2, #2
 800f0f8:	3014      	adds	r0, #20
 800f0fa:	3114      	adds	r1, #20
 800f0fc:	1884      	adds	r4, r0, r2
 800f0fe:	4411      	add	r1, r2
 800f100:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f104:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f108:	4295      	cmp	r5, r2
 800f10a:	d003      	beq.n	800f114 <__mcmp+0x28>
 800f10c:	d305      	bcc.n	800f11a <__mcmp+0x2e>
 800f10e:	2301      	movs	r3, #1
 800f110:	4618      	mov	r0, r3
 800f112:	bd30      	pop	{r4, r5, pc}
 800f114:	42a0      	cmp	r0, r4
 800f116:	d3f3      	bcc.n	800f100 <__mcmp+0x14>
 800f118:	e7fa      	b.n	800f110 <__mcmp+0x24>
 800f11a:	f04f 33ff 	mov.w	r3, #4294967295
 800f11e:	e7f7      	b.n	800f110 <__mcmp+0x24>

0800f120 <__mdiff>:
 800f120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f124:	460d      	mov	r5, r1
 800f126:	4607      	mov	r7, r0
 800f128:	4611      	mov	r1, r2
 800f12a:	4628      	mov	r0, r5
 800f12c:	4614      	mov	r4, r2
 800f12e:	f7ff ffdd 	bl	800f0ec <__mcmp>
 800f132:	1e06      	subs	r6, r0, #0
 800f134:	d108      	bne.n	800f148 <__mdiff+0x28>
 800f136:	4631      	mov	r1, r6
 800f138:	4638      	mov	r0, r7
 800f13a:	f7ff fd84 	bl	800ec46 <_Balloc>
 800f13e:	2301      	movs	r3, #1
 800f140:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f148:	bfa4      	itt	ge
 800f14a:	4623      	movge	r3, r4
 800f14c:	462c      	movge	r4, r5
 800f14e:	4638      	mov	r0, r7
 800f150:	6861      	ldr	r1, [r4, #4]
 800f152:	bfa6      	itte	ge
 800f154:	461d      	movge	r5, r3
 800f156:	2600      	movge	r6, #0
 800f158:	2601      	movlt	r6, #1
 800f15a:	f7ff fd74 	bl	800ec46 <_Balloc>
 800f15e:	692b      	ldr	r3, [r5, #16]
 800f160:	60c6      	str	r6, [r0, #12]
 800f162:	6926      	ldr	r6, [r4, #16]
 800f164:	f105 0914 	add.w	r9, r5, #20
 800f168:	f104 0214 	add.w	r2, r4, #20
 800f16c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f170:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f174:	f100 0514 	add.w	r5, r0, #20
 800f178:	f04f 0e00 	mov.w	lr, #0
 800f17c:	f852 ab04 	ldr.w	sl, [r2], #4
 800f180:	f859 4b04 	ldr.w	r4, [r9], #4
 800f184:	fa1e f18a 	uxtah	r1, lr, sl
 800f188:	b2a3      	uxth	r3, r4
 800f18a:	1ac9      	subs	r1, r1, r3
 800f18c:	0c23      	lsrs	r3, r4, #16
 800f18e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f192:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f196:	b289      	uxth	r1, r1
 800f198:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f19c:	45c8      	cmp	r8, r9
 800f19e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f1a2:	4694      	mov	ip, r2
 800f1a4:	f845 3b04 	str.w	r3, [r5], #4
 800f1a8:	d8e8      	bhi.n	800f17c <__mdiff+0x5c>
 800f1aa:	45bc      	cmp	ip, r7
 800f1ac:	d304      	bcc.n	800f1b8 <__mdiff+0x98>
 800f1ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f1b2:	b183      	cbz	r3, 800f1d6 <__mdiff+0xb6>
 800f1b4:	6106      	str	r6, [r0, #16]
 800f1b6:	e7c5      	b.n	800f144 <__mdiff+0x24>
 800f1b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f1bc:	fa1e f381 	uxtah	r3, lr, r1
 800f1c0:	141a      	asrs	r2, r3, #16
 800f1c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1cc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f1d0:	f845 3b04 	str.w	r3, [r5], #4
 800f1d4:	e7e9      	b.n	800f1aa <__mdiff+0x8a>
 800f1d6:	3e01      	subs	r6, #1
 800f1d8:	e7e9      	b.n	800f1ae <__mdiff+0x8e>
	...

0800f1dc <__ulp>:
 800f1dc:	4b12      	ldr	r3, [pc, #72]	; (800f228 <__ulp+0x4c>)
 800f1de:	ee10 2a90 	vmov	r2, s1
 800f1e2:	401a      	ands	r2, r3
 800f1e4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	dd04      	ble.n	800f1f6 <__ulp+0x1a>
 800f1ec:	2000      	movs	r0, #0
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	ec41 0b10 	vmov	d0, r0, r1
 800f1f4:	4770      	bx	lr
 800f1f6:	425b      	negs	r3, r3
 800f1f8:	151b      	asrs	r3, r3, #20
 800f1fa:	2b13      	cmp	r3, #19
 800f1fc:	f04f 0000 	mov.w	r0, #0
 800f200:	f04f 0100 	mov.w	r1, #0
 800f204:	dc04      	bgt.n	800f210 <__ulp+0x34>
 800f206:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f20a:	fa42 f103 	asr.w	r1, r2, r3
 800f20e:	e7ef      	b.n	800f1f0 <__ulp+0x14>
 800f210:	3b14      	subs	r3, #20
 800f212:	2b1e      	cmp	r3, #30
 800f214:	f04f 0201 	mov.w	r2, #1
 800f218:	bfda      	itte	le
 800f21a:	f1c3 031f 	rsble	r3, r3, #31
 800f21e:	fa02 f303 	lslle.w	r3, r2, r3
 800f222:	4613      	movgt	r3, r2
 800f224:	4618      	mov	r0, r3
 800f226:	e7e3      	b.n	800f1f0 <__ulp+0x14>
 800f228:	7ff00000 	.word	0x7ff00000

0800f22c <__b2d>:
 800f22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22e:	6905      	ldr	r5, [r0, #16]
 800f230:	f100 0714 	add.w	r7, r0, #20
 800f234:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f238:	1f2e      	subs	r6, r5, #4
 800f23a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f23e:	4620      	mov	r0, r4
 800f240:	f7ff fdc5 	bl	800edce <__hi0bits>
 800f244:	f1c0 0320 	rsb	r3, r0, #32
 800f248:	280a      	cmp	r0, #10
 800f24a:	600b      	str	r3, [r1, #0]
 800f24c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f2c4 <__b2d+0x98>
 800f250:	dc14      	bgt.n	800f27c <__b2d+0x50>
 800f252:	f1c0 0e0b 	rsb	lr, r0, #11
 800f256:	fa24 f10e 	lsr.w	r1, r4, lr
 800f25a:	42b7      	cmp	r7, r6
 800f25c:	ea41 030c 	orr.w	r3, r1, ip
 800f260:	bf34      	ite	cc
 800f262:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f266:	2100      	movcs	r1, #0
 800f268:	3015      	adds	r0, #21
 800f26a:	fa04 f000 	lsl.w	r0, r4, r0
 800f26e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f272:	ea40 0201 	orr.w	r2, r0, r1
 800f276:	ec43 2b10 	vmov	d0, r2, r3
 800f27a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f27c:	42b7      	cmp	r7, r6
 800f27e:	bf3a      	itte	cc
 800f280:	f1a5 0608 	subcc.w	r6, r5, #8
 800f284:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f288:	2100      	movcs	r1, #0
 800f28a:	380b      	subs	r0, #11
 800f28c:	d015      	beq.n	800f2ba <__b2d+0x8e>
 800f28e:	4084      	lsls	r4, r0
 800f290:	f1c0 0520 	rsb	r5, r0, #32
 800f294:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f298:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f29c:	42be      	cmp	r6, r7
 800f29e:	fa21 fc05 	lsr.w	ip, r1, r5
 800f2a2:	ea44 030c 	orr.w	r3, r4, ip
 800f2a6:	bf8c      	ite	hi
 800f2a8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f2ac:	2400      	movls	r4, #0
 800f2ae:	fa01 f000 	lsl.w	r0, r1, r0
 800f2b2:	40ec      	lsrs	r4, r5
 800f2b4:	ea40 0204 	orr.w	r2, r0, r4
 800f2b8:	e7dd      	b.n	800f276 <__b2d+0x4a>
 800f2ba:	ea44 030c 	orr.w	r3, r4, ip
 800f2be:	460a      	mov	r2, r1
 800f2c0:	e7d9      	b.n	800f276 <__b2d+0x4a>
 800f2c2:	bf00      	nop
 800f2c4:	3ff00000 	.word	0x3ff00000

0800f2c8 <__d2b>:
 800f2c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2cc:	460e      	mov	r6, r1
 800f2ce:	2101      	movs	r1, #1
 800f2d0:	ec59 8b10 	vmov	r8, r9, d0
 800f2d4:	4615      	mov	r5, r2
 800f2d6:	f7ff fcb6 	bl	800ec46 <_Balloc>
 800f2da:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f2de:	4607      	mov	r7, r0
 800f2e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2e4:	bb34      	cbnz	r4, 800f334 <__d2b+0x6c>
 800f2e6:	9301      	str	r3, [sp, #4]
 800f2e8:	f1b8 0300 	subs.w	r3, r8, #0
 800f2ec:	d027      	beq.n	800f33e <__d2b+0x76>
 800f2ee:	a802      	add	r0, sp, #8
 800f2f0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f2f4:	f7ff fd8a 	bl	800ee0c <__lo0bits>
 800f2f8:	9900      	ldr	r1, [sp, #0]
 800f2fa:	b1f0      	cbz	r0, 800f33a <__d2b+0x72>
 800f2fc:	9a01      	ldr	r2, [sp, #4]
 800f2fe:	f1c0 0320 	rsb	r3, r0, #32
 800f302:	fa02 f303 	lsl.w	r3, r2, r3
 800f306:	430b      	orrs	r3, r1
 800f308:	40c2      	lsrs	r2, r0
 800f30a:	617b      	str	r3, [r7, #20]
 800f30c:	9201      	str	r2, [sp, #4]
 800f30e:	9b01      	ldr	r3, [sp, #4]
 800f310:	61bb      	str	r3, [r7, #24]
 800f312:	2b00      	cmp	r3, #0
 800f314:	bf14      	ite	ne
 800f316:	2102      	movne	r1, #2
 800f318:	2101      	moveq	r1, #1
 800f31a:	6139      	str	r1, [r7, #16]
 800f31c:	b1c4      	cbz	r4, 800f350 <__d2b+0x88>
 800f31e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f322:	4404      	add	r4, r0
 800f324:	6034      	str	r4, [r6, #0]
 800f326:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f32a:	6028      	str	r0, [r5, #0]
 800f32c:	4638      	mov	r0, r7
 800f32e:	b003      	add	sp, #12
 800f330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f338:	e7d5      	b.n	800f2e6 <__d2b+0x1e>
 800f33a:	6179      	str	r1, [r7, #20]
 800f33c:	e7e7      	b.n	800f30e <__d2b+0x46>
 800f33e:	a801      	add	r0, sp, #4
 800f340:	f7ff fd64 	bl	800ee0c <__lo0bits>
 800f344:	9b01      	ldr	r3, [sp, #4]
 800f346:	617b      	str	r3, [r7, #20]
 800f348:	2101      	movs	r1, #1
 800f34a:	6139      	str	r1, [r7, #16]
 800f34c:	3020      	adds	r0, #32
 800f34e:	e7e5      	b.n	800f31c <__d2b+0x54>
 800f350:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f354:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f358:	6030      	str	r0, [r6, #0]
 800f35a:	6918      	ldr	r0, [r3, #16]
 800f35c:	f7ff fd37 	bl	800edce <__hi0bits>
 800f360:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f364:	e7e1      	b.n	800f32a <__d2b+0x62>

0800f366 <__ratio>:
 800f366:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f36a:	4688      	mov	r8, r1
 800f36c:	4669      	mov	r1, sp
 800f36e:	4681      	mov	r9, r0
 800f370:	f7ff ff5c 	bl	800f22c <__b2d>
 800f374:	a901      	add	r1, sp, #4
 800f376:	4640      	mov	r0, r8
 800f378:	ec57 6b10 	vmov	r6, r7, d0
 800f37c:	ee10 4a10 	vmov	r4, s0
 800f380:	f7ff ff54 	bl	800f22c <__b2d>
 800f384:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f388:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f38c:	eba3 0c02 	sub.w	ip, r3, r2
 800f390:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f394:	1a9b      	subs	r3, r3, r2
 800f396:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f39a:	ec51 0b10 	vmov	r0, r1, d0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	ee10 aa10 	vmov	sl, s0
 800f3a4:	bfce      	itee	gt
 800f3a6:	463a      	movgt	r2, r7
 800f3a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f3ac:	460a      	movle	r2, r1
 800f3ae:	463d      	mov	r5, r7
 800f3b0:	468b      	mov	fp, r1
 800f3b2:	bfcc      	ite	gt
 800f3b4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f3b8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f3bc:	ec45 4b17 	vmov	d7, r4, r5
 800f3c0:	ec4b ab16 	vmov	d6, sl, fp
 800f3c4:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800f3c8:	b003      	add	sp, #12
 800f3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3ce <__copybits>:
 800f3ce:	3901      	subs	r1, #1
 800f3d0:	b510      	push	{r4, lr}
 800f3d2:	1149      	asrs	r1, r1, #5
 800f3d4:	6914      	ldr	r4, [r2, #16]
 800f3d6:	3101      	adds	r1, #1
 800f3d8:	f102 0314 	add.w	r3, r2, #20
 800f3dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f3e4:	42a3      	cmp	r3, r4
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	d303      	bcc.n	800f3f2 <__copybits+0x24>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	428a      	cmp	r2, r1
 800f3ee:	d305      	bcc.n	800f3fc <__copybits+0x2e>
 800f3f0:	bd10      	pop	{r4, pc}
 800f3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3f6:	f840 2b04 	str.w	r2, [r0], #4
 800f3fa:	e7f3      	b.n	800f3e4 <__copybits+0x16>
 800f3fc:	f842 3b04 	str.w	r3, [r2], #4
 800f400:	e7f4      	b.n	800f3ec <__copybits+0x1e>

0800f402 <__any_on>:
 800f402:	f100 0214 	add.w	r2, r0, #20
 800f406:	6900      	ldr	r0, [r0, #16]
 800f408:	114b      	asrs	r3, r1, #5
 800f40a:	4298      	cmp	r0, r3
 800f40c:	b510      	push	{r4, lr}
 800f40e:	db11      	blt.n	800f434 <__any_on+0x32>
 800f410:	dd0a      	ble.n	800f428 <__any_on+0x26>
 800f412:	f011 011f 	ands.w	r1, r1, #31
 800f416:	d007      	beq.n	800f428 <__any_on+0x26>
 800f418:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f41c:	fa24 f001 	lsr.w	r0, r4, r1
 800f420:	fa00 f101 	lsl.w	r1, r0, r1
 800f424:	428c      	cmp	r4, r1
 800f426:	d10b      	bne.n	800f440 <__any_on+0x3e>
 800f428:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d803      	bhi.n	800f438 <__any_on+0x36>
 800f430:	2000      	movs	r0, #0
 800f432:	bd10      	pop	{r4, pc}
 800f434:	4603      	mov	r3, r0
 800f436:	e7f7      	b.n	800f428 <__any_on+0x26>
 800f438:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f43c:	2900      	cmp	r1, #0
 800f43e:	d0f5      	beq.n	800f42c <__any_on+0x2a>
 800f440:	2001      	movs	r0, #1
 800f442:	e7f6      	b.n	800f432 <__any_on+0x30>

0800f444 <_calloc_r>:
 800f444:	b538      	push	{r3, r4, r5, lr}
 800f446:	fb02 f401 	mul.w	r4, r2, r1
 800f44a:	4621      	mov	r1, r4
 800f44c:	f000 f856 	bl	800f4fc <_malloc_r>
 800f450:	4605      	mov	r5, r0
 800f452:	b118      	cbz	r0, 800f45c <_calloc_r+0x18>
 800f454:	4622      	mov	r2, r4
 800f456:	2100      	movs	r1, #0
 800f458:	f7fc fdfc 	bl	800c054 <memset>
 800f45c:	4628      	mov	r0, r5
 800f45e:	bd38      	pop	{r3, r4, r5, pc}

0800f460 <_free_r>:
 800f460:	b538      	push	{r3, r4, r5, lr}
 800f462:	4605      	mov	r5, r0
 800f464:	2900      	cmp	r1, #0
 800f466:	d045      	beq.n	800f4f4 <_free_r+0x94>
 800f468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f46c:	1f0c      	subs	r4, r1, #4
 800f46e:	2b00      	cmp	r3, #0
 800f470:	bfb8      	it	lt
 800f472:	18e4      	addlt	r4, r4, r3
 800f474:	f000 fa36 	bl	800f8e4 <__malloc_lock>
 800f478:	4a1f      	ldr	r2, [pc, #124]	; (800f4f8 <_free_r+0x98>)
 800f47a:	6813      	ldr	r3, [r2, #0]
 800f47c:	4610      	mov	r0, r2
 800f47e:	b933      	cbnz	r3, 800f48e <_free_r+0x2e>
 800f480:	6063      	str	r3, [r4, #4]
 800f482:	6014      	str	r4, [r2, #0]
 800f484:	4628      	mov	r0, r5
 800f486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f48a:	f000 ba2c 	b.w	800f8e6 <__malloc_unlock>
 800f48e:	42a3      	cmp	r3, r4
 800f490:	d90c      	bls.n	800f4ac <_free_r+0x4c>
 800f492:	6821      	ldr	r1, [r4, #0]
 800f494:	1862      	adds	r2, r4, r1
 800f496:	4293      	cmp	r3, r2
 800f498:	bf04      	itt	eq
 800f49a:	681a      	ldreq	r2, [r3, #0]
 800f49c:	685b      	ldreq	r3, [r3, #4]
 800f49e:	6063      	str	r3, [r4, #4]
 800f4a0:	bf04      	itt	eq
 800f4a2:	1852      	addeq	r2, r2, r1
 800f4a4:	6022      	streq	r2, [r4, #0]
 800f4a6:	6004      	str	r4, [r0, #0]
 800f4a8:	e7ec      	b.n	800f484 <_free_r+0x24>
 800f4aa:	4613      	mov	r3, r2
 800f4ac:	685a      	ldr	r2, [r3, #4]
 800f4ae:	b10a      	cbz	r2, 800f4b4 <_free_r+0x54>
 800f4b0:	42a2      	cmp	r2, r4
 800f4b2:	d9fa      	bls.n	800f4aa <_free_r+0x4a>
 800f4b4:	6819      	ldr	r1, [r3, #0]
 800f4b6:	1858      	adds	r0, r3, r1
 800f4b8:	42a0      	cmp	r0, r4
 800f4ba:	d10b      	bne.n	800f4d4 <_free_r+0x74>
 800f4bc:	6820      	ldr	r0, [r4, #0]
 800f4be:	4401      	add	r1, r0
 800f4c0:	1858      	adds	r0, r3, r1
 800f4c2:	4282      	cmp	r2, r0
 800f4c4:	6019      	str	r1, [r3, #0]
 800f4c6:	d1dd      	bne.n	800f484 <_free_r+0x24>
 800f4c8:	6810      	ldr	r0, [r2, #0]
 800f4ca:	6852      	ldr	r2, [r2, #4]
 800f4cc:	605a      	str	r2, [r3, #4]
 800f4ce:	4401      	add	r1, r0
 800f4d0:	6019      	str	r1, [r3, #0]
 800f4d2:	e7d7      	b.n	800f484 <_free_r+0x24>
 800f4d4:	d902      	bls.n	800f4dc <_free_r+0x7c>
 800f4d6:	230c      	movs	r3, #12
 800f4d8:	602b      	str	r3, [r5, #0]
 800f4da:	e7d3      	b.n	800f484 <_free_r+0x24>
 800f4dc:	6820      	ldr	r0, [r4, #0]
 800f4de:	1821      	adds	r1, r4, r0
 800f4e0:	428a      	cmp	r2, r1
 800f4e2:	bf04      	itt	eq
 800f4e4:	6811      	ldreq	r1, [r2, #0]
 800f4e6:	6852      	ldreq	r2, [r2, #4]
 800f4e8:	6062      	str	r2, [r4, #4]
 800f4ea:	bf04      	itt	eq
 800f4ec:	1809      	addeq	r1, r1, r0
 800f4ee:	6021      	streq	r1, [r4, #0]
 800f4f0:	605c      	str	r4, [r3, #4]
 800f4f2:	e7c7      	b.n	800f484 <_free_r+0x24>
 800f4f4:	bd38      	pop	{r3, r4, r5, pc}
 800f4f6:	bf00      	nop
 800f4f8:	20000ae0 	.word	0x20000ae0

0800f4fc <_malloc_r>:
 800f4fc:	b570      	push	{r4, r5, r6, lr}
 800f4fe:	1ccd      	adds	r5, r1, #3
 800f500:	f025 0503 	bic.w	r5, r5, #3
 800f504:	3508      	adds	r5, #8
 800f506:	2d0c      	cmp	r5, #12
 800f508:	bf38      	it	cc
 800f50a:	250c      	movcc	r5, #12
 800f50c:	2d00      	cmp	r5, #0
 800f50e:	4606      	mov	r6, r0
 800f510:	db01      	blt.n	800f516 <_malloc_r+0x1a>
 800f512:	42a9      	cmp	r1, r5
 800f514:	d903      	bls.n	800f51e <_malloc_r+0x22>
 800f516:	230c      	movs	r3, #12
 800f518:	6033      	str	r3, [r6, #0]
 800f51a:	2000      	movs	r0, #0
 800f51c:	bd70      	pop	{r4, r5, r6, pc}
 800f51e:	f000 f9e1 	bl	800f8e4 <__malloc_lock>
 800f522:	4a21      	ldr	r2, [pc, #132]	; (800f5a8 <_malloc_r+0xac>)
 800f524:	6814      	ldr	r4, [r2, #0]
 800f526:	4621      	mov	r1, r4
 800f528:	b991      	cbnz	r1, 800f550 <_malloc_r+0x54>
 800f52a:	4c20      	ldr	r4, [pc, #128]	; (800f5ac <_malloc_r+0xb0>)
 800f52c:	6823      	ldr	r3, [r4, #0]
 800f52e:	b91b      	cbnz	r3, 800f538 <_malloc_r+0x3c>
 800f530:	4630      	mov	r0, r6
 800f532:	f000 f98f 	bl	800f854 <_sbrk_r>
 800f536:	6020      	str	r0, [r4, #0]
 800f538:	4629      	mov	r1, r5
 800f53a:	4630      	mov	r0, r6
 800f53c:	f000 f98a 	bl	800f854 <_sbrk_r>
 800f540:	1c43      	adds	r3, r0, #1
 800f542:	d124      	bne.n	800f58e <_malloc_r+0x92>
 800f544:	230c      	movs	r3, #12
 800f546:	6033      	str	r3, [r6, #0]
 800f548:	4630      	mov	r0, r6
 800f54a:	f000 f9cc 	bl	800f8e6 <__malloc_unlock>
 800f54e:	e7e4      	b.n	800f51a <_malloc_r+0x1e>
 800f550:	680b      	ldr	r3, [r1, #0]
 800f552:	1b5b      	subs	r3, r3, r5
 800f554:	d418      	bmi.n	800f588 <_malloc_r+0x8c>
 800f556:	2b0b      	cmp	r3, #11
 800f558:	d90f      	bls.n	800f57a <_malloc_r+0x7e>
 800f55a:	600b      	str	r3, [r1, #0]
 800f55c:	50cd      	str	r5, [r1, r3]
 800f55e:	18cc      	adds	r4, r1, r3
 800f560:	4630      	mov	r0, r6
 800f562:	f000 f9c0 	bl	800f8e6 <__malloc_unlock>
 800f566:	f104 000b 	add.w	r0, r4, #11
 800f56a:	1d23      	adds	r3, r4, #4
 800f56c:	f020 0007 	bic.w	r0, r0, #7
 800f570:	1ac3      	subs	r3, r0, r3
 800f572:	d0d3      	beq.n	800f51c <_malloc_r+0x20>
 800f574:	425a      	negs	r2, r3
 800f576:	50e2      	str	r2, [r4, r3]
 800f578:	e7d0      	b.n	800f51c <_malloc_r+0x20>
 800f57a:	428c      	cmp	r4, r1
 800f57c:	684b      	ldr	r3, [r1, #4]
 800f57e:	bf16      	itet	ne
 800f580:	6063      	strne	r3, [r4, #4]
 800f582:	6013      	streq	r3, [r2, #0]
 800f584:	460c      	movne	r4, r1
 800f586:	e7eb      	b.n	800f560 <_malloc_r+0x64>
 800f588:	460c      	mov	r4, r1
 800f58a:	6849      	ldr	r1, [r1, #4]
 800f58c:	e7cc      	b.n	800f528 <_malloc_r+0x2c>
 800f58e:	1cc4      	adds	r4, r0, #3
 800f590:	f024 0403 	bic.w	r4, r4, #3
 800f594:	42a0      	cmp	r0, r4
 800f596:	d005      	beq.n	800f5a4 <_malloc_r+0xa8>
 800f598:	1a21      	subs	r1, r4, r0
 800f59a:	4630      	mov	r0, r6
 800f59c:	f000 f95a 	bl	800f854 <_sbrk_r>
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	d0cf      	beq.n	800f544 <_malloc_r+0x48>
 800f5a4:	6025      	str	r5, [r4, #0]
 800f5a6:	e7db      	b.n	800f560 <_malloc_r+0x64>
 800f5a8:	20000ae0 	.word	0x20000ae0
 800f5ac:	20000ae4 	.word	0x20000ae4

0800f5b0 <__ssputs_r>:
 800f5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5b4:	688e      	ldr	r6, [r1, #8]
 800f5b6:	429e      	cmp	r6, r3
 800f5b8:	4682      	mov	sl, r0
 800f5ba:	460c      	mov	r4, r1
 800f5bc:	4690      	mov	r8, r2
 800f5be:	4699      	mov	r9, r3
 800f5c0:	d837      	bhi.n	800f632 <__ssputs_r+0x82>
 800f5c2:	898a      	ldrh	r2, [r1, #12]
 800f5c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5c8:	d031      	beq.n	800f62e <__ssputs_r+0x7e>
 800f5ca:	6825      	ldr	r5, [r4, #0]
 800f5cc:	6909      	ldr	r1, [r1, #16]
 800f5ce:	1a6f      	subs	r7, r5, r1
 800f5d0:	6965      	ldr	r5, [r4, #20]
 800f5d2:	2302      	movs	r3, #2
 800f5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800f5dc:	f109 0301 	add.w	r3, r9, #1
 800f5e0:	443b      	add	r3, r7
 800f5e2:	429d      	cmp	r5, r3
 800f5e4:	bf38      	it	cc
 800f5e6:	461d      	movcc	r5, r3
 800f5e8:	0553      	lsls	r3, r2, #21
 800f5ea:	d530      	bpl.n	800f64e <__ssputs_r+0x9e>
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	f7ff ff85 	bl	800f4fc <_malloc_r>
 800f5f2:	4606      	mov	r6, r0
 800f5f4:	b950      	cbnz	r0, 800f60c <__ssputs_r+0x5c>
 800f5f6:	230c      	movs	r3, #12
 800f5f8:	f8ca 3000 	str.w	r3, [sl]
 800f5fc:	89a3      	ldrh	r3, [r4, #12]
 800f5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f602:	81a3      	strh	r3, [r4, #12]
 800f604:	f04f 30ff 	mov.w	r0, #4294967295
 800f608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60c:	463a      	mov	r2, r7
 800f60e:	6921      	ldr	r1, [r4, #16]
 800f610:	f7ff fb0e 	bl	800ec30 <memcpy>
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f61e:	81a3      	strh	r3, [r4, #12]
 800f620:	6126      	str	r6, [r4, #16]
 800f622:	6165      	str	r5, [r4, #20]
 800f624:	443e      	add	r6, r7
 800f626:	1bed      	subs	r5, r5, r7
 800f628:	6026      	str	r6, [r4, #0]
 800f62a:	60a5      	str	r5, [r4, #8]
 800f62c:	464e      	mov	r6, r9
 800f62e:	454e      	cmp	r6, r9
 800f630:	d900      	bls.n	800f634 <__ssputs_r+0x84>
 800f632:	464e      	mov	r6, r9
 800f634:	4632      	mov	r2, r6
 800f636:	4641      	mov	r1, r8
 800f638:	6820      	ldr	r0, [r4, #0]
 800f63a:	f000 f93a 	bl	800f8b2 <memmove>
 800f63e:	68a3      	ldr	r3, [r4, #8]
 800f640:	1b9b      	subs	r3, r3, r6
 800f642:	60a3      	str	r3, [r4, #8]
 800f644:	6823      	ldr	r3, [r4, #0]
 800f646:	441e      	add	r6, r3
 800f648:	6026      	str	r6, [r4, #0]
 800f64a:	2000      	movs	r0, #0
 800f64c:	e7dc      	b.n	800f608 <__ssputs_r+0x58>
 800f64e:	462a      	mov	r2, r5
 800f650:	f000 f94a 	bl	800f8e8 <_realloc_r>
 800f654:	4606      	mov	r6, r0
 800f656:	2800      	cmp	r0, #0
 800f658:	d1e2      	bne.n	800f620 <__ssputs_r+0x70>
 800f65a:	6921      	ldr	r1, [r4, #16]
 800f65c:	4650      	mov	r0, sl
 800f65e:	f7ff feff 	bl	800f460 <_free_r>
 800f662:	e7c8      	b.n	800f5f6 <__ssputs_r+0x46>

0800f664 <_svfiprintf_r>:
 800f664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f668:	461d      	mov	r5, r3
 800f66a:	898b      	ldrh	r3, [r1, #12]
 800f66c:	061f      	lsls	r7, r3, #24
 800f66e:	b09d      	sub	sp, #116	; 0x74
 800f670:	4680      	mov	r8, r0
 800f672:	460c      	mov	r4, r1
 800f674:	4616      	mov	r6, r2
 800f676:	d50f      	bpl.n	800f698 <_svfiprintf_r+0x34>
 800f678:	690b      	ldr	r3, [r1, #16]
 800f67a:	b96b      	cbnz	r3, 800f698 <_svfiprintf_r+0x34>
 800f67c:	2140      	movs	r1, #64	; 0x40
 800f67e:	f7ff ff3d 	bl	800f4fc <_malloc_r>
 800f682:	6020      	str	r0, [r4, #0]
 800f684:	6120      	str	r0, [r4, #16]
 800f686:	b928      	cbnz	r0, 800f694 <_svfiprintf_r+0x30>
 800f688:	230c      	movs	r3, #12
 800f68a:	f8c8 3000 	str.w	r3, [r8]
 800f68e:	f04f 30ff 	mov.w	r0, #4294967295
 800f692:	e0c8      	b.n	800f826 <_svfiprintf_r+0x1c2>
 800f694:	2340      	movs	r3, #64	; 0x40
 800f696:	6163      	str	r3, [r4, #20]
 800f698:	2300      	movs	r3, #0
 800f69a:	9309      	str	r3, [sp, #36]	; 0x24
 800f69c:	2320      	movs	r3, #32
 800f69e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f6a2:	2330      	movs	r3, #48	; 0x30
 800f6a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6a8:	9503      	str	r5, [sp, #12]
 800f6aa:	f04f 0b01 	mov.w	fp, #1
 800f6ae:	4637      	mov	r7, r6
 800f6b0:	463d      	mov	r5, r7
 800f6b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f6b6:	b10b      	cbz	r3, 800f6bc <_svfiprintf_r+0x58>
 800f6b8:	2b25      	cmp	r3, #37	; 0x25
 800f6ba:	d13e      	bne.n	800f73a <_svfiprintf_r+0xd6>
 800f6bc:	ebb7 0a06 	subs.w	sl, r7, r6
 800f6c0:	d00b      	beq.n	800f6da <_svfiprintf_r+0x76>
 800f6c2:	4653      	mov	r3, sl
 800f6c4:	4632      	mov	r2, r6
 800f6c6:	4621      	mov	r1, r4
 800f6c8:	4640      	mov	r0, r8
 800f6ca:	f7ff ff71 	bl	800f5b0 <__ssputs_r>
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	f000 80a4 	beq.w	800f81c <_svfiprintf_r+0x1b8>
 800f6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d6:	4453      	add	r3, sl
 800f6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f6da:	783b      	ldrb	r3, [r7, #0]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f000 809d 	beq.w	800f81c <_svfiprintf_r+0x1b8>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ec:	9304      	str	r3, [sp, #16]
 800f6ee:	9307      	str	r3, [sp, #28]
 800f6f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6f4:	931a      	str	r3, [sp, #104]	; 0x68
 800f6f6:	462f      	mov	r7, r5
 800f6f8:	2205      	movs	r2, #5
 800f6fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f6fe:	4850      	ldr	r0, [pc, #320]	; (800f840 <_svfiprintf_r+0x1dc>)
 800f700:	f7f0 fda6 	bl	8000250 <memchr>
 800f704:	9b04      	ldr	r3, [sp, #16]
 800f706:	b9d0      	cbnz	r0, 800f73e <_svfiprintf_r+0xda>
 800f708:	06d9      	lsls	r1, r3, #27
 800f70a:	bf44      	itt	mi
 800f70c:	2220      	movmi	r2, #32
 800f70e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f712:	071a      	lsls	r2, r3, #28
 800f714:	bf44      	itt	mi
 800f716:	222b      	movmi	r2, #43	; 0x2b
 800f718:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f71c:	782a      	ldrb	r2, [r5, #0]
 800f71e:	2a2a      	cmp	r2, #42	; 0x2a
 800f720:	d015      	beq.n	800f74e <_svfiprintf_r+0xea>
 800f722:	9a07      	ldr	r2, [sp, #28]
 800f724:	462f      	mov	r7, r5
 800f726:	2000      	movs	r0, #0
 800f728:	250a      	movs	r5, #10
 800f72a:	4639      	mov	r1, r7
 800f72c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f730:	3b30      	subs	r3, #48	; 0x30
 800f732:	2b09      	cmp	r3, #9
 800f734:	d94d      	bls.n	800f7d2 <_svfiprintf_r+0x16e>
 800f736:	b1b8      	cbz	r0, 800f768 <_svfiprintf_r+0x104>
 800f738:	e00f      	b.n	800f75a <_svfiprintf_r+0xf6>
 800f73a:	462f      	mov	r7, r5
 800f73c:	e7b8      	b.n	800f6b0 <_svfiprintf_r+0x4c>
 800f73e:	4a40      	ldr	r2, [pc, #256]	; (800f840 <_svfiprintf_r+0x1dc>)
 800f740:	1a80      	subs	r0, r0, r2
 800f742:	fa0b f000 	lsl.w	r0, fp, r0
 800f746:	4318      	orrs	r0, r3
 800f748:	9004      	str	r0, [sp, #16]
 800f74a:	463d      	mov	r5, r7
 800f74c:	e7d3      	b.n	800f6f6 <_svfiprintf_r+0x92>
 800f74e:	9a03      	ldr	r2, [sp, #12]
 800f750:	1d11      	adds	r1, r2, #4
 800f752:	6812      	ldr	r2, [r2, #0]
 800f754:	9103      	str	r1, [sp, #12]
 800f756:	2a00      	cmp	r2, #0
 800f758:	db01      	blt.n	800f75e <_svfiprintf_r+0xfa>
 800f75a:	9207      	str	r2, [sp, #28]
 800f75c:	e004      	b.n	800f768 <_svfiprintf_r+0x104>
 800f75e:	4252      	negs	r2, r2
 800f760:	f043 0302 	orr.w	r3, r3, #2
 800f764:	9207      	str	r2, [sp, #28]
 800f766:	9304      	str	r3, [sp, #16]
 800f768:	783b      	ldrb	r3, [r7, #0]
 800f76a:	2b2e      	cmp	r3, #46	; 0x2e
 800f76c:	d10c      	bne.n	800f788 <_svfiprintf_r+0x124>
 800f76e:	787b      	ldrb	r3, [r7, #1]
 800f770:	2b2a      	cmp	r3, #42	; 0x2a
 800f772:	d133      	bne.n	800f7dc <_svfiprintf_r+0x178>
 800f774:	9b03      	ldr	r3, [sp, #12]
 800f776:	1d1a      	adds	r2, r3, #4
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	9203      	str	r2, [sp, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	bfb8      	it	lt
 800f780:	f04f 33ff 	movlt.w	r3, #4294967295
 800f784:	3702      	adds	r7, #2
 800f786:	9305      	str	r3, [sp, #20]
 800f788:	4d2e      	ldr	r5, [pc, #184]	; (800f844 <_svfiprintf_r+0x1e0>)
 800f78a:	7839      	ldrb	r1, [r7, #0]
 800f78c:	2203      	movs	r2, #3
 800f78e:	4628      	mov	r0, r5
 800f790:	f7f0 fd5e 	bl	8000250 <memchr>
 800f794:	b138      	cbz	r0, 800f7a6 <_svfiprintf_r+0x142>
 800f796:	2340      	movs	r3, #64	; 0x40
 800f798:	1b40      	subs	r0, r0, r5
 800f79a:	fa03 f000 	lsl.w	r0, r3, r0
 800f79e:	9b04      	ldr	r3, [sp, #16]
 800f7a0:	4303      	orrs	r3, r0
 800f7a2:	3701      	adds	r7, #1
 800f7a4:	9304      	str	r3, [sp, #16]
 800f7a6:	7839      	ldrb	r1, [r7, #0]
 800f7a8:	4827      	ldr	r0, [pc, #156]	; (800f848 <_svfiprintf_r+0x1e4>)
 800f7aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7ae:	2206      	movs	r2, #6
 800f7b0:	1c7e      	adds	r6, r7, #1
 800f7b2:	f7f0 fd4d 	bl	8000250 <memchr>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d038      	beq.n	800f82c <_svfiprintf_r+0x1c8>
 800f7ba:	4b24      	ldr	r3, [pc, #144]	; (800f84c <_svfiprintf_r+0x1e8>)
 800f7bc:	bb13      	cbnz	r3, 800f804 <_svfiprintf_r+0x1a0>
 800f7be:	9b03      	ldr	r3, [sp, #12]
 800f7c0:	3307      	adds	r3, #7
 800f7c2:	f023 0307 	bic.w	r3, r3, #7
 800f7c6:	3308      	adds	r3, #8
 800f7c8:	9303      	str	r3, [sp, #12]
 800f7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7cc:	444b      	add	r3, r9
 800f7ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f7d0:	e76d      	b.n	800f6ae <_svfiprintf_r+0x4a>
 800f7d2:	fb05 3202 	mla	r2, r5, r2, r3
 800f7d6:	2001      	movs	r0, #1
 800f7d8:	460f      	mov	r7, r1
 800f7da:	e7a6      	b.n	800f72a <_svfiprintf_r+0xc6>
 800f7dc:	2300      	movs	r3, #0
 800f7de:	3701      	adds	r7, #1
 800f7e0:	9305      	str	r3, [sp, #20]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	250a      	movs	r5, #10
 800f7e6:	4638      	mov	r0, r7
 800f7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7ec:	3a30      	subs	r2, #48	; 0x30
 800f7ee:	2a09      	cmp	r2, #9
 800f7f0:	d903      	bls.n	800f7fa <_svfiprintf_r+0x196>
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d0c8      	beq.n	800f788 <_svfiprintf_r+0x124>
 800f7f6:	9105      	str	r1, [sp, #20]
 800f7f8:	e7c6      	b.n	800f788 <_svfiprintf_r+0x124>
 800f7fa:	fb05 2101 	mla	r1, r5, r1, r2
 800f7fe:	2301      	movs	r3, #1
 800f800:	4607      	mov	r7, r0
 800f802:	e7f0      	b.n	800f7e6 <_svfiprintf_r+0x182>
 800f804:	ab03      	add	r3, sp, #12
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	4622      	mov	r2, r4
 800f80a:	4b11      	ldr	r3, [pc, #68]	; (800f850 <_svfiprintf_r+0x1ec>)
 800f80c:	a904      	add	r1, sp, #16
 800f80e:	4640      	mov	r0, r8
 800f810:	f7fc fcae 	bl	800c170 <_printf_float>
 800f814:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f818:	4681      	mov	r9, r0
 800f81a:	d1d6      	bne.n	800f7ca <_svfiprintf_r+0x166>
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	065b      	lsls	r3, r3, #25
 800f820:	f53f af35 	bmi.w	800f68e <_svfiprintf_r+0x2a>
 800f824:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f826:	b01d      	add	sp, #116	; 0x74
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82c:	ab03      	add	r3, sp, #12
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	4622      	mov	r2, r4
 800f832:	4b07      	ldr	r3, [pc, #28]	; (800f850 <_svfiprintf_r+0x1ec>)
 800f834:	a904      	add	r1, sp, #16
 800f836:	4640      	mov	r0, r8
 800f838:	f7fc ff3c 	bl	800c6b4 <_printf_i>
 800f83c:	e7ea      	b.n	800f814 <_svfiprintf_r+0x1b0>
 800f83e:	bf00      	nop
 800f840:	0800fcb4 	.word	0x0800fcb4
 800f844:	0800fcba 	.word	0x0800fcba
 800f848:	0800fcbe 	.word	0x0800fcbe
 800f84c:	0800c171 	.word	0x0800c171
 800f850:	0800f5b1 	.word	0x0800f5b1

0800f854 <_sbrk_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4c06      	ldr	r4, [pc, #24]	; (800f870 <_sbrk_r+0x1c>)
 800f858:	2300      	movs	r3, #0
 800f85a:	4605      	mov	r5, r0
 800f85c:	4608      	mov	r0, r1
 800f85e:	6023      	str	r3, [r4, #0]
 800f860:	f7f3 f9b6 	bl	8002bd0 <_sbrk>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	d102      	bne.n	800f86e <_sbrk_r+0x1a>
 800f868:	6823      	ldr	r3, [r4, #0]
 800f86a:	b103      	cbz	r3, 800f86e <_sbrk_r+0x1a>
 800f86c:	602b      	str	r3, [r5, #0]
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	20002f80 	.word	0x20002f80

0800f874 <strncmp>:
 800f874:	b510      	push	{r4, lr}
 800f876:	b16a      	cbz	r2, 800f894 <strncmp+0x20>
 800f878:	3901      	subs	r1, #1
 800f87a:	1884      	adds	r4, r0, r2
 800f87c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f880:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f884:	4293      	cmp	r3, r2
 800f886:	d103      	bne.n	800f890 <strncmp+0x1c>
 800f888:	42a0      	cmp	r0, r4
 800f88a:	d001      	beq.n	800f890 <strncmp+0x1c>
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1f5      	bne.n	800f87c <strncmp+0x8>
 800f890:	1a98      	subs	r0, r3, r2
 800f892:	bd10      	pop	{r4, pc}
 800f894:	4610      	mov	r0, r2
 800f896:	e7fc      	b.n	800f892 <strncmp+0x1e>

0800f898 <__ascii_wctomb>:
 800f898:	b149      	cbz	r1, 800f8ae <__ascii_wctomb+0x16>
 800f89a:	2aff      	cmp	r2, #255	; 0xff
 800f89c:	bf85      	ittet	hi
 800f89e:	238a      	movhi	r3, #138	; 0x8a
 800f8a0:	6003      	strhi	r3, [r0, #0]
 800f8a2:	700a      	strbls	r2, [r1, #0]
 800f8a4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f8a8:	bf98      	it	ls
 800f8aa:	2001      	movls	r0, #1
 800f8ac:	4770      	bx	lr
 800f8ae:	4608      	mov	r0, r1
 800f8b0:	4770      	bx	lr

0800f8b2 <memmove>:
 800f8b2:	4288      	cmp	r0, r1
 800f8b4:	b510      	push	{r4, lr}
 800f8b6:	eb01 0302 	add.w	r3, r1, r2
 800f8ba:	d807      	bhi.n	800f8cc <memmove+0x1a>
 800f8bc:	1e42      	subs	r2, r0, #1
 800f8be:	4299      	cmp	r1, r3
 800f8c0:	d00a      	beq.n	800f8d8 <memmove+0x26>
 800f8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f8ca:	e7f8      	b.n	800f8be <memmove+0xc>
 800f8cc:	4283      	cmp	r3, r0
 800f8ce:	d9f5      	bls.n	800f8bc <memmove+0xa>
 800f8d0:	1881      	adds	r1, r0, r2
 800f8d2:	1ad2      	subs	r2, r2, r3
 800f8d4:	42d3      	cmn	r3, r2
 800f8d6:	d100      	bne.n	800f8da <memmove+0x28>
 800f8d8:	bd10      	pop	{r4, pc}
 800f8da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f8de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f8e2:	e7f7      	b.n	800f8d4 <memmove+0x22>

0800f8e4 <__malloc_lock>:
 800f8e4:	4770      	bx	lr

0800f8e6 <__malloc_unlock>:
 800f8e6:	4770      	bx	lr

0800f8e8 <_realloc_r>:
 800f8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ea:	4607      	mov	r7, r0
 800f8ec:	4614      	mov	r4, r2
 800f8ee:	460e      	mov	r6, r1
 800f8f0:	b921      	cbnz	r1, 800f8fc <_realloc_r+0x14>
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8f8:	f7ff be00 	b.w	800f4fc <_malloc_r>
 800f8fc:	b922      	cbnz	r2, 800f908 <_realloc_r+0x20>
 800f8fe:	f7ff fdaf 	bl	800f460 <_free_r>
 800f902:	4625      	mov	r5, r4
 800f904:	4628      	mov	r0, r5
 800f906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f908:	f000 f814 	bl	800f934 <_malloc_usable_size_r>
 800f90c:	42a0      	cmp	r0, r4
 800f90e:	d20f      	bcs.n	800f930 <_realloc_r+0x48>
 800f910:	4621      	mov	r1, r4
 800f912:	4638      	mov	r0, r7
 800f914:	f7ff fdf2 	bl	800f4fc <_malloc_r>
 800f918:	4605      	mov	r5, r0
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d0f2      	beq.n	800f904 <_realloc_r+0x1c>
 800f91e:	4631      	mov	r1, r6
 800f920:	4622      	mov	r2, r4
 800f922:	f7ff f985 	bl	800ec30 <memcpy>
 800f926:	4631      	mov	r1, r6
 800f928:	4638      	mov	r0, r7
 800f92a:	f7ff fd99 	bl	800f460 <_free_r>
 800f92e:	e7e9      	b.n	800f904 <_realloc_r+0x1c>
 800f930:	4635      	mov	r5, r6
 800f932:	e7e7      	b.n	800f904 <_realloc_r+0x1c>

0800f934 <_malloc_usable_size_r>:
 800f934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f938:	1f18      	subs	r0, r3, #4
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	bfbc      	itt	lt
 800f93e:	580b      	ldrlt	r3, [r1, r0]
 800f940:	18c0      	addlt	r0, r0, r3
 800f942:	4770      	bx	lr

0800f944 <_init>:
 800f944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f946:	bf00      	nop
 800f948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f94a:	bc08      	pop	{r3}
 800f94c:	469e      	mov	lr, r3
 800f94e:	4770      	bx	lr

0800f950 <_fini>:
 800f950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f952:	bf00      	nop
 800f954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f956:	bc08      	pop	{r3}
 800f958:	469e      	mov	lr, r3
 800f95a:	4770      	bx	lr
