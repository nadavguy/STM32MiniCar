
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122f4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  080124f8  080124f8  000224f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d58  08012d58  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08012d58  08012d58  00022d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d60  08012d60  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d60  08012d60  00022d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d64  08012d64  00022d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08012d68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004120  200001f8  08012f60  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004318  08012f60  00034318  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d14d  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000056d4  00000000  00000000  0006d373  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028f8  00000000  00000000  00072a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002660  00000000  00000000  00075340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031ab7  00000000  00000000  000779a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021a4c  00000000  00000000  000a9457  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125338  00000000  00000000  000caea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f01db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc24  00000000  00000000  001f0258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	080124dc 	.word	0x080124dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	080124dc 	.word	0x080124dc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <start_pwm1>:
 *      Author: raing
 */
#include "main.h"

void start_pwm1(int onTimemSec)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = onTimemSec * 4 / 10;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <start_pwm1+0x30>)
 80005fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000602:	1092      	asrs	r2, r2, #2
 8000604:	17db      	asrs	r3, r3, #31
 8000606:	1ad2      	subs	r2, r2, r3
 8000608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <start_pwm1+0x34>)
 8000612:	f008 ff53 	bl	80094bc <HAL_TIM_PWM_Start>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	66666667 	.word	0x66666667
 8000624:	200041c0 	.word	0x200041c0

08000628 <start_pwm2>:
{
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}

void start_pwm2(int PercentOn)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    TIM1->CCR4 = PercentOn;
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <start_pwm2+0x20>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000636:	210c      	movs	r1, #12
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <start_pwm2+0x24>)
 800063a:	f008 ff3f 	bl	80094bc <HAL_TIM_PWM_Start>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010000 	.word	0x40010000
 800064c:	20004118 	.word	0x20004118

08000650 <CheckButton>:
uint32_t ButtonPressCycleStart = 0;
uint32_t ButtonPressDurationmSec[5] = {0};
uint8_t ButtonCycle = 0;

void CheckButton(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af02      	add	r7, sp, #8
	PA0PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000656:	2101      	movs	r1, #1
 8000658:	487d      	ldr	r0, [pc, #500]	; (8000850 <CheckButton+0x200>)
 800065a:	f004 fde5 	bl	8005228 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b7c      	ldr	r3, [pc, #496]	; (8000854 <CheckButton+0x204>)
 8000664:	701a      	strb	r2, [r3, #0]
	if (PA0PinState == GPIO_PIN_RESET)
 8000666:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <CheckButton+0x204>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d108      	bne.n	8000680 <CheckButton+0x30>
	{
		SetRGB(0, 250, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	21fa      	movs	r1, #250	; 0xfa
 8000672:	2000      	movs	r0, #0
 8000674:	f000 fd04 	bl	8001080 <SetRGB>
		ButtonIsLow = true;
 8000678:	4b77      	ldr	r3, [pc, #476]	; (8000858 <CheckButton+0x208>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
		if (ButtonCycle == 0)
		{
			ButtonPressCycleStart = HAL_GetTick();
		}
	}
}
 800067e:	e0df      	b.n	8000840 <CheckButton+0x1f0>
		if (ButtonIsLow)
 8000680:	4b75      	ldr	r3, [pc, #468]	; (8000858 <CheckButton+0x208>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d044      	beq.n	8000712 <CheckButton+0xc2>
			if (ButtonCycle < 5)
 8000688:	4b74      	ldr	r3, [pc, #464]	; (800085c <CheckButton+0x20c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d818      	bhi.n	80006c2 <CheckButton+0x72>
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 8000690:	f003 f92c 	bl	80038ec <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
						- ButtonPressStart) / 100) * 100;
 8000696:	4b72      	ldr	r3, [pc, #456]	; (8000860 <CheckButton+0x210>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a71      	ldr	r2, [pc, #452]	; (8000864 <CheckButton+0x214>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	095b      	lsrs	r3, r3, #5
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006a4:	4a6d      	ldr	r2, [pc, #436]	; (800085c <CheckButton+0x20c>)
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	4611      	mov	r1, r2
						- ButtonPressStart) / 100) * 100;
 80006aa:	2264      	movs	r2, #100	; 0x64
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006b0:	4a6d      	ldr	r2, [pc, #436]	; (8000868 <CheckButton+0x218>)
 80006b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				ButtonCycle++;
 80006b6:	4b69      	ldr	r3, [pc, #420]	; (800085c <CheckButton+0x20c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b67      	ldr	r3, [pc, #412]	; (800085c <CheckButton+0x20c>)
 80006c0:	701a      	strb	r2, [r3, #0]
			if (ButtonCycle >= 5)
 80006c2:	4b66      	ldr	r3, [pc, #408]	; (800085c <CheckButton+0x20c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d907      	bls.n	80006da <CheckButton+0x8a>
				ButtonCycle = 0;
 80006ca:	4b64      	ldr	r3, [pc, #400]	; (800085c <CheckButton+0x20c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
				memset(ButtonPressDurationmSec, 0, 20);
 80006d0:	2214      	movs	r2, #20
 80006d2:	2100      	movs	r1, #0
 80006d4:	4864      	ldr	r0, [pc, #400]	; (8000868 <CheckButton+0x218>)
 80006d6:	f00e fa89 	bl	800ebec <memset>
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 80006da:	f002 fac1 	bl	8002c60 <CurrentTime>
 80006de:	ec55 4b10 	vmov	r4, r5, d0
					CurrentTime(), (HAL_GetTick() - ButtonPressStart) / 1000.0);
 80006e2:	f003 f903 	bl	80038ec <HAL_GetTick>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4b5d      	ldr	r3, [pc, #372]	; (8000860 <CheckButton+0x210>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	1ad3      	subs	r3, r2, r3
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006f6:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8000848 <CheckButton+0x1f8>
 80006fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006fe:	ed8d 7b00 	vstr	d7, [sp]
 8000702:	4622      	mov	r2, r4
 8000704:	462b      	mov	r3, r5
 8000706:	4959      	ldr	r1, [pc, #356]	; (800086c <CheckButton+0x21c>)
 8000708:	4859      	ldr	r0, [pc, #356]	; (8000870 <CheckButton+0x220>)
 800070a:	f00f f88f 	bl	800f82c <siprintf>
			SendToScreen();
 800070e:	f001 fbeb 	bl	8001ee8 <SendToScreen>
		if (HAL_GetTick() - ButtonPressCycleStart > 3000)
 8000712:	f003 f8eb 	bl	80038ec <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	4b56      	ldr	r3, [pc, #344]	; (8000874 <CheckButton+0x224>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000722:	4293      	cmp	r3, r2
 8000724:	d973      	bls.n	800080e <CheckButton+0x1be>
			if (ButtonPressDurationmSec[0] >= 2000)
 8000726:	4b50      	ldr	r3, [pc, #320]	; (8000868 <CheckButton+0x218>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800072e:	d30c      	bcc.n	800074a <CheckButton+0xfa>
				sprintf(USBTXArray, "%6.3f, Do this\r\n", CurrentTime());
 8000730:	f002 fa96 	bl	8002c60 <CurrentTime>
 8000734:	ec54 3b10 	vmov	r3, r4, d0
 8000738:	461a      	mov	r2, r3
 800073a:	4623      	mov	r3, r4
 800073c:	494e      	ldr	r1, [pc, #312]	; (8000878 <CheckButton+0x228>)
 800073e:	484c      	ldr	r0, [pc, #304]	; (8000870 <CheckButton+0x220>)
 8000740:	f00f f874 	bl	800f82c <siprintf>
				SendToScreen();
 8000744:	f001 fbd0 	bl	8001ee8 <SendToScreen>
 8000748:	e059      	b.n	80007fe <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 800074a:	4b47      	ldr	r3, [pc, #284]	; (8000868 <CheckButton+0x218>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000752:	d311      	bcc.n	8000778 <CheckButton+0x128>
					&& (ButtonPressDurationmSec[1] >= 1000))
 8000754:	4b44      	ldr	r3, [pc, #272]	; (8000868 <CheckButton+0x218>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800075c:	d30c      	bcc.n	8000778 <CheckButton+0x128>
				sprintf(USBTXArray, "%6.3f, Do that\r\n", CurrentTime());
 800075e:	f002 fa7f 	bl	8002c60 <CurrentTime>
 8000762:	ec54 3b10 	vmov	r3, r4, d0
 8000766:	461a      	mov	r2, r3
 8000768:	4623      	mov	r3, r4
 800076a:	4944      	ldr	r1, [pc, #272]	; (800087c <CheckButton+0x22c>)
 800076c:	4840      	ldr	r0, [pc, #256]	; (8000870 <CheckButton+0x220>)
 800076e:	f00f f85d 	bl	800f82c <siprintf>
				SendToScreen();
 8000772:	f001 fbb9 	bl	8001ee8 <SendToScreen>
 8000776:	e042      	b.n	80007fe <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 8000778:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <CheckButton+0x218>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000780:	d310      	bcc.n	80007a4 <CheckButton+0x154>
					&& (ButtonPressDurationmSec[1] == 0))
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <CheckButton+0x218>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10c      	bne.n	80007a4 <CheckButton+0x154>
				sprintf(USBTXArray, "%6.3f, Do that Single Press\r\n",
 800078a:	f002 fa69 	bl	8002c60 <CurrentTime>
 800078e:	ec54 3b10 	vmov	r3, r4, d0
 8000792:	461a      	mov	r2, r3
 8000794:	4623      	mov	r3, r4
 8000796:	493a      	ldr	r1, [pc, #232]	; (8000880 <CheckButton+0x230>)
 8000798:	4835      	ldr	r0, [pc, #212]	; (8000870 <CheckButton+0x220>)
 800079a:	f00f f847 	bl	800f82c <siprintf>
				SendToScreen();
 800079e:	f001 fba3 	bl	8001ee8 <SendToScreen>
 80007a2:	e02c      	b.n	80007fe <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 500)
 80007a4:	4b30      	ldr	r3, [pc, #192]	; (8000868 <CheckButton+0x218>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007ac:	d311      	bcc.n	80007d2 <CheckButton+0x182>
					&& (ButtonPressDurationmSec[1] >= 1000))
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <CheckButton+0x218>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007b6:	d30c      	bcc.n	80007d2 <CheckButton+0x182>
				sprintf(USBTXArray, "%6.3f, Or maybe this\r\n", CurrentTime());
 80007b8:	f002 fa52 	bl	8002c60 <CurrentTime>
 80007bc:	ec54 3b10 	vmov	r3, r4, d0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4623      	mov	r3, r4
 80007c4:	492f      	ldr	r1, [pc, #188]	; (8000884 <CheckButton+0x234>)
 80007c6:	482a      	ldr	r0, [pc, #168]	; (8000870 <CheckButton+0x220>)
 80007c8:	f00f f830 	bl	800f82c <siprintf>
				SendToScreen();
 80007cc:	f001 fb8c 	bl	8001ee8 <SendToScreen>
 80007d0:	e015      	b.n	80007fe <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 500)
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <CheckButton+0x218>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007da:	d310      	bcc.n	80007fe <CheckButton+0x1ae>
					&& (ButtonPressDurationmSec[1] >= 500))
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <CheckButton+0x218>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007e4:	d30b      	bcc.n	80007fe <CheckButton+0x1ae>
				sprintf(USBTXArray, "%6.3f, Or maybe that\r\n", CurrentTime());
 80007e6:	f002 fa3b 	bl	8002c60 <CurrentTime>
 80007ea:	ec54 3b10 	vmov	r3, r4, d0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4623      	mov	r3, r4
 80007f2:	4925      	ldr	r1, [pc, #148]	; (8000888 <CheckButton+0x238>)
 80007f4:	481e      	ldr	r0, [pc, #120]	; (8000870 <CheckButton+0x220>)
 80007f6:	f00f f819 	bl	800f82c <siprintf>
				SendToScreen();
 80007fa:	f001 fb75 	bl	8001ee8 <SendToScreen>
			ButtonCycle = 0;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <CheckButton+0x20c>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
			memset(ButtonPressDurationmSec, 0, 20);
 8000804:	2214      	movs	r2, #20
 8000806:	2100      	movs	r1, #0
 8000808:	4817      	ldr	r0, [pc, #92]	; (8000868 <CheckButton+0x218>)
 800080a:	f00e f9ef 	bl	800ebec <memset>
		SetRGB(250, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	20fa      	movs	r0, #250	; 0xfa
 8000814:	f000 fc34 	bl	8001080 <SetRGB>
		ButtonIsHigh = true;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <CheckButton+0x23c>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
		ButtonIsLow = false;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <CheckButton+0x208>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		ButtonPressStart = HAL_GetTick();
 8000824:	f003 f862 	bl	80038ec <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <CheckButton+0x210>)
 800082c:	601a      	str	r2, [r3, #0]
		if (ButtonCycle == 0)
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <CheckButton+0x20c>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <CheckButton+0x1f0>
			ButtonPressCycleStart = HAL_GetTick();
 8000836:	f003 f859 	bl	80038ec <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <CheckButton+0x224>)
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bdb0      	pop	{r4, r5, r7, pc}
 8000846:	bf00      	nop
 8000848:	00000000 	.word	0x00000000
 800084c:	408f4000 	.word	0x408f4000
 8000850:	40020000 	.word	0x40020000
 8000854:	20000d6c 	.word	0x20000d6c
 8000858:	20000215 	.word	0x20000215
 800085c:	20000234 	.word	0x20000234
 8000860:	20000218 	.word	0x20000218
 8000864:	51eb851f 	.word	0x51eb851f
 8000868:	20000220 	.word	0x20000220
 800086c:	080124f8 	.word	0x080124f8
 8000870:	20000714 	.word	0x20000714
 8000874:	2000021c 	.word	0x2000021c
 8000878:	08012520 	.word	0x08012520
 800087c:	08012534 	.word	0x08012534
 8000880:	08012548 	.word	0x08012548
 8000884:	08012568 	.word	0x08012568
 8000888:	08012580 	.word	0x08012580
 800088c:	20000214 	.word	0x20000214

08000890 <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <QSPI_Init+0x1c>)
 8000896:	f000 fb26 	bl	8000ee6 <QSPI_DummyCyclesCfg>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e000      	b.n	80008a6 <QSPI_Init+0x16>
  }
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000429c 	.word	0x2000429c

080008b0 <QSPI_Erase_Sector4K>:
  * @brief  Erases the specified sector of the QSPI memory.
  * @param  SectorAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t QSPI_Erase_Sector4K(uint32_t SectorAddress)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b092      	sub	sp, #72	; 0x48
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  uint8_t reg1[6];

  if (QSPI_WriteEnable() != HAL_OK)
 80008b8:	f000 f90e 	bl	8000ad8 <QSPI_WriteEnable>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <QSPI_Erase_Sector4K+0x16>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e030      	b.n	8000928 <QSPI_Erase_Sector4K+0x78>
  }

  /* Initialize the erase command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x20; //SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 80008cc:	2320      	movs	r3, #32
 80008ce:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS; //QSPI_ADDRESS_32_BITS;
 80008d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008da:	61fb      	str	r3, [r7, #28]
  s_command.Address = SectorAddress;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_NONE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80008f0:	2300      	movs	r3, #0
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008f4:	2300      	movs	r3, #0
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008f8:	f107 0310 	add.w	r3, r7, #16
 80008fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <QSPI_Erase_Sector4K+0x80>)
 8000904:	f005 ff80 	bl	8006808 <HAL_QSPI_Command>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <QSPI_Erase_Sector4K+0x62>
  {
    return HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	e00a      	b.n	8000928 <QSPI_Erase_Sector4K+0x78>
  }

  // -------------------------------------------------------------------------------------

  //  if (QSPI_AutoPolling_Erase_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)  {    return HAL_ERROR;  }
  if (QSPI_AutoPolling_Write_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)
 8000912:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <QSPI_Erase_Sector4K+0x80>)
 8000918:	f000 f96a 	bl	8000bf0 <QSPI_AutoPolling_Write_in_progress>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <QSPI_Erase_Sector4K+0x76>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <QSPI_Erase_Sector4K+0x78>
  }

  return HAL_OK;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	3748      	adds	r7, #72	; 0x48
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000429c 	.word	0x2000429c

08000934 <QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b096      	sub	sp, #88	; 0x58
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr = 0, current_size = 0, current_addr = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000944:	2300      	movs	r3, #0
 8000946:	657b      	str	r3, [r7, #84]	; 0x54
 8000948:	2300      	movs	r3, #0
 800094a:	653b      	str	r3, [r7, #80]	; 0x50
  pData = pData - 1;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3b01      	subs	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000956:	e003      	b.n	8000960 <QSPI_Write+0x2c>
  {
    current_addr += QSPI_PAGE_SIZE;
 8000958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800095a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800095e:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000960:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	429a      	cmp	r2, r3
 8000966:	d9f7      	bls.n	8000958 <QSPI_Write+0x24>
  }
  current_size = current_addr - WriteAddr;
 8000968:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	d901      	bls.n	800097c <QSPI_Write+0x48>
  {
    current_size = Size;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	657b      	str	r3, [r7, #84]	; 0x54
  }
  //  wr_time1 = systick_count_up;
  /* Initialize the address variables */
  current_addr = WriteAddr;
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction = 0x02; // simple page programm //QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 800098e:	2302      	movs	r3, #2
 8000990:	617b      	str	r3, [r7, #20]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099c:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode = QSPI_DATA_1_LINE;
 80009a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009b0:	2300      	movs	r3, #0
 80009b2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009b4:	2300      	movs	r3, #0
 80009b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 80009b8:	f000 f88e 	bl	8000ad8 <QSPI_WriteEnable>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <QSPI_Write+0x92>
    {
      return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e03f      	b.n	8000a46 <QSPI_Write+0x112>
    }

    /* Configure the command */
    s_command.Address = current_addr;
 80009c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009c8:	61bb      	str	r3, [r7, #24]
    s_command.NbData = current_size;
 80009ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009d6:	4619      	mov	r1, r3
 80009d8:	481d      	ldr	r0, [pc, #116]	; (8000a50 <QSPI_Write+0x11c>)
 80009da:	f005 ff15 	bl	8006808 <HAL_QSPI_Command>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <QSPI_Write+0xb4>
    {
      return HAL_ERROR;
 80009e4:	2301      	movs	r3, #1
 80009e6:	e02e      	b.n	8000a46 <QSPI_Write+0x112>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ec:	68f9      	ldr	r1, [r7, #12]
 80009ee:	4818      	ldr	r0, [pc, #96]	; (8000a50 <QSPI_Write+0x11c>)
 80009f0:	f005 ff68 	bl	80068c4 <HAL_QSPI_Transmit>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <QSPI_Write+0xca>
    {
      return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e023      	b.n	8000a46 <QSPI_Write+0x112>
    }

    if (QSPI_AutoPolling_Write_in_progress(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <QSPI_Write+0x11c>)
 8000a04:	f000 f8f4 	bl	8000bf0 <QSPI_AutoPolling_Write_in_progress>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <QSPI_Write+0xde>
    {
      return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e019      	b.n	8000a46 <QSPI_Write+0x112>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a16:	4413      	add	r3, r2
 8000a18:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a1e:	4413      	add	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
 8000a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d203      	bcs.n	8000a36 <QSPI_Write+0x102>
 8000a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	e001      	b.n	8000a3a <QSPI_Write+0x106>
 8000a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3a:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000a3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d3b9      	bcc.n	80009b8 <QSPI_Write+0x84>

  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3758      	adds	r7, #88	; 0x58
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000429c 	.word	0x2000429c

08000a54 <QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b092      	sub	sp, #72	; 0x48
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x03; // simple data read // QPI_READ_4_BYTE_ADDR_CMD; //
 8000a66:	2303      	movs	r3, #3
 8000a68:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	61fb      	str	r3, [r7, #28]
  s_command.Address = ReadAddr;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000a7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = QSPI_DUMMY_CYCLES_READ;
 8000a84:	2308      	movs	r3, #8
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = Size;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a90:	2300      	movs	r3, #0
 8000a92:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a94:	2300      	movs	r3, #0
 8000a96:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <QSPI_Read+0x80>)
 8000aa4:	f005 feb0 	bl	8006808 <HAL_QSPI_Command>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00b      	b.n	8000aca <QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab6:	68f9      	ldr	r1, [r7, #12]
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <QSPI_Read+0x80>)
 8000aba:	f005 ff95 	bl	80069e8 <HAL_QSPI_Receive>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <QSPI_Read+0x74>
  {
    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e000      	b.n	8000aca <QSPI_Read+0x76>
  }

  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3748      	adds	r7, #72	; 0x48
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000429c 	.word	0x2000429c

08000ad8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b094      	sub	sp, #80	; 0x50
 8000adc:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 8000ae4:	2306      	movs	r3, #6
 8000ae6:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000afc:	2300      	movs	r3, #0
 8000afe:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b00:	2300      	movs	r3, #0
 8000b02:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4816      	ldr	r0, [pc, #88]	; (8000b68 <QSPI_WriteEnable+0x90>)
 8000b10:	f005 fe7a 	bl	8006808 <HAL_QSPI_Command>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e01f      	b.n	8000b5e <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 8000b22:	2302      	movs	r3, #2
 8000b24:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b36:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 8000b38:	2305      	movs	r3, #5
 8000b3a:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b40:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b42:	463a      	mov	r2, r7
 8000b44:	f107 0118 	add.w	r1, r7, #24
 8000b48:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <QSPI_WriteEnable+0x90>)
 8000b4e:	f005 ffe8 	bl	8006b22 <HAL_QSPI_AutoPolling>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e000      	b.n	8000b5e <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3750      	adds	r7, #80	; 0x50
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	2000429c 	.word	0x2000429c

08000b6c <QSPI_READMD>:

uint8_t QSPI_READMD(uint8_t *Mid, uint8_t *Did)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b098      	sub	sp, #96	; 0x60
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x90; // ok
 8000b7c:	2390      	movs	r3, #144	; 0x90
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 5;
 8000b92:	2305      	movs	r3, #5
 8000b94:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000baa:	4619      	mov	r1, r3
 8000bac:	480f      	ldr	r0, [pc, #60]	; (8000bec <QSPI_READMD+0x80>)
 8000bae:	f005 fe2b 	bl	8006808 <HAL_QSPI_Command>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <QSPI_READMD+0x50>
  {
    return HAL_ERROR;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e013      	b.n	8000be4 <QSPI_READMD+0x78>
  }


 uint8_t reg2[6] = {0};
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	809a      	strh	r2, [r3, #4]
 HAL_QSPI_Receive(&hqspi, &(reg2), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <QSPI_READMD+0x80>)
 8000bd2:	f005 ff09 	bl	80069e8 <HAL_QSPI_Receive>
 *Mid = reg2[3];
 8000bd6:	7afa      	ldrb	r2, [r7, #11]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	701a      	strb	r2, [r3, #0]
 *Did = reg2[4];
 8000bdc:	7b3a      	ldrb	r2, [r7, #12]
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
//  HAL_QSPI_Receive(&hqspi, &(reg2[2]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[3]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[4]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[5]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);

  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3760      	adds	r7, #96	; 0x60
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000429c 	.word	0x2000429c

08000bf0 <QSPI_AutoPolling_Write_in_progress>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
uint8_t QSPI_AutoPolling_Write_in_progress(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b096      	sub	sp, #88	; 0x58
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000c00:	2305      	movs	r3, #5
 8000c02:	623b      	str	r3, [r7, #32]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c10:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  //  s_config.Mask            = QSPI_SR_WIP;
  s_config.Mask = QSPI_SR_WIP; /*!< Write in progress */
 8000c26:	2301      	movs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
  s_config.Interval = 1; //0x10;
 8000c32:	2301      	movs	r3, #1
 8000c34:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8000c3c:	f107 0208 	add.w	r2, r7, #8
 8000c40:	f107 0120 	add.w	r1, r7, #32
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f005 ff6b 	bl	8006b22 <HAL_QSPI_AutoPolling>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <QSPI_AutoPolling_Write_in_progress+0x66>
  {
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e000      	b.n	8000c58 <QSPI_AutoPolling_Write_in_progress+0x68>
  }

  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3758      	adds	r7, #88	; 0x58
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <QSPI_Read_Status_registers>:
  return HAL_OK;
}

// Read Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Read_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b098      	sub	sp, #96	; 0x60
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
  uint8_t reg1[6];
  uint8_t reg2[6];
  uint8_t reg3[6];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c72:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x05;
 8000c74:	2305      	movs	r3, #5
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000c80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c92:	2300      	movs	r3, #0
 8000c94:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c96:	2300      	movs	r3, #0
 8000c98:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f005 fdaf 	bl	8006808 <HAL_QSPI_Command>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <QSPI_Read_Status_registers+0x54>
  {
    return HAL_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e079      	b.n	8000da8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f005 fe92 	bl	80069e8 <HAL_QSPI_Receive>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <QSPI_Read_Status_registers+0x6e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e06c      	b.n	8000da8 <QSPI_Read_Status_registers+0x148>
  }
  *R1 = reg1[0];
 8000cce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cdc:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x35;
 8000cde:	2335      	movs	r3, #53	; 0x35
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000cea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d00:	2300      	movs	r3, #0
 8000d02:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	68f8      	ldr	r0, [r7, #12]
 8000d10:	f005 fd7a 	bl	8006808 <HAL_QSPI_Command>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <QSPI_Read_Status_registers+0xbe>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e044      	b.n	8000da8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d1e:	f107 0318 	add.w	r3, r7, #24
 8000d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d26:	4619      	mov	r1, r3
 8000d28:	68f8      	ldr	r0, [r7, #12]
 8000d2a:	f005 fe5d 	bl	80069e8 <HAL_QSPI_Receive>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <QSPI_Read_Status_registers+0xd8>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e037      	b.n	8000da8 <QSPI_Read_Status_registers+0x148>
  }
  *R2 = reg2[0];
 8000d38:	7e3b      	ldrb	r3, [r7, #24]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d44:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x15;
 8000d46:	2315      	movs	r3, #21
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000d52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d64:	2300      	movs	r3, #0
 8000d66:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d74:	4619      	mov	r1, r3
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f005 fd46 	bl	8006808 <HAL_QSPI_Command>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <QSPI_Read_Status_registers+0x126>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e010      	b.n	8000da8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d86:	f107 0310 	add.w	r3, r7, #16
 8000d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d8e:	4619      	mov	r1, r3
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f005 fe29 	bl	80069e8 <HAL_QSPI_Receive>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <QSPI_Read_Status_registers+0x140>
  {
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e003      	b.n	8000da8 <QSPI_Read_Status_registers+0x148>
  }
  *R3 = reg3[0];
 8000da0:	7c3b      	ldrb	r3, [r7, #16]
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	801a      	strh	r2, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3760      	adds	r7, #96	; 0x60
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <QSPI_Reset_Status_registers>:

// Reset Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Reset_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b092      	sub	sp, #72	; 0x48
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
  QSPI_CommandTypeDef s_command;

  QSPI_WriteEnable();
 8000dbe:	f7ff fe8b 	bl	8000ad8 <QSPI_WriteEnable>

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x01;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dd8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000de6:	2300      	movs	r3, #0
 8000de8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000dea:	2300      	movs	r3, #0
 8000dec:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df6:	4619      	mov	r1, r3
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f005 fd05 	bl	8006808 <HAL_QSPI_Command>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <QSPI_Reset_Status_registers+0x58>
  {
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e06a      	b.n	8000ede <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f005 fd58 	bl	80068c4 <HAL_QSPI_Transmit>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <QSPI_Reset_Status_registers+0x6e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e05f      	b.n	8000ede <QSPI_Reset_Status_registers+0x12e>
  }

  QSPI_WriteEnable();
 8000e1e:	f7ff fe5b 	bl	8000ad8 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x31;
 8000e28:	2331      	movs	r3, #49	; 0x31
 8000e2a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e46:	2300      	movs	r3, #0
 8000e48:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e56:	4619      	mov	r1, r3
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f005 fcd5 	bl	8006808 <HAL_QSPI_Command>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <QSPI_Reset_Status_registers+0xb8>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e03a      	b.n	8000ede <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f005 fd28 	bl	80068c4 <HAL_QSPI_Transmit>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <QSPI_Reset_Status_registers+0xce>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e02f      	b.n	8000ede <QSPI_Reset_Status_registers+0x12e>
  }

  QSPI_WriteEnable();
 8000e7e:	f7ff fe2b 	bl	8000ad8 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000e82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x11;
 8000e88:	2311      	movs	r3, #17
 8000e8a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f005 fca5 	bl	8006808 <HAL_QSPI_Command>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <QSPI_Reset_Status_registers+0x118>
  {
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e00a      	b.n	8000ede <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f005 fcf8 	bl	80068c4 <HAL_QSPI_Transmit>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <QSPI_Reset_Status_registers+0x12e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e7ff      	b.n	8000ede <QSPI_Reset_Status_registers+0x12e>
  }
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3748      	adds	r7, #72	; 0x48
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b094      	sub	sp, #80	; 0x50
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000f00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f12:	2300      	movs	r3, #0
 8000f14:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f16:	2300      	movs	r3, #0
 8000f18:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f22:	4619      	mov	r1, r3
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f005 fc6f 	bl	8006808 <HAL_QSPI_Command>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e08f      	b.n	8001054 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f005 fd52 	bl	80069e8 <HAL_QSPI_Receive>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e082      	b.n	8001054 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 8000f54:	2315      	movs	r3, #21
 8000f56:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f72:	2300      	movs	r3, #0
 8000f74:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f76:	2300      	movs	r3, #0
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f82:	4619      	mov	r1, r3
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f005 fc3f 	bl	8006808 <HAL_QSPI_Command>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e05f      	b.n	8001054 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	3301      	adds	r3, #1
 8000f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f005 fd21 	bl	80069e8 <HAL_QSPI_Receive>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e051      	b.n	8001054 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 8000fb0:	f7ff fd92 	bl	8000ad8 <QSPI_WriteEnable>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e04a      	b.n	8001054 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000fd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ff2:	b25a      	sxtb	r2, r3
 8000ff4:	23c0      	movs	r3, #192	; 0xc0
 8000ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ffa:	fa93 f3a3 	rbit	r3, r3
 8000ffe:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001000:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001002:	fab3 f383 	clz	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4619      	mov	r1, r3
 800100a:	2308      	movs	r3, #8
 800100c:	408b      	lsls	r3, r1
 800100e:	b25b      	sxtb	r3, r3
 8001010:	4313      	orrs	r3, r2
 8001012:	b25b      	sxtb	r3, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	4619      	mov	r1, r3
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f005 fbf0 	bl	8006808 <HAL_QSPI_Command>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e010      	b.n	8001054 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	f241 3288 	movw	r2, #5000	; 0x1388
 800103a:	4619      	mov	r1, r3
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f005 fc41 	bl	80068c4 <HAL_QSPI_Transmit>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e003      	b.n	8001054 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 800104c:	2028      	movs	r0, #40	; 0x28
 800104e:	f002 fc59 	bl	8003904 <HAL_Delay>

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3750      	adds	r7, #80	; 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <led_init>:
 */

#include "main.h"

void led_init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 8001060:	2104      	movs	r1, #4
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <led_init+0x20>)
 8001064:	f008 fa2a 	bl	80094bc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 8001068:	2100      	movs	r1, #0
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <led_init+0x20>)
 800106c:	f008 fa26 	bl	80094bc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 8001070:	210c      	movs	r1, #12
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <led_init+0x20>)
 8001074:	f008 fa22 	bl	80094bc <HAL_TIM_PWM_Start>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20003e88 	.word	0x20003e88

08001080 <SetRGB>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //Blue LED
}

// Input: 0 to 250
void SetRGB(int Red, int Green, int Blue)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	//  SetRGB(250, 0, 0); // Red
	//  SetRGB(0, 250, 0); // Green
	//  SetRGB(0, 0, 250); // Blue
	//  SetRGB(250, 250, 0);// Yellow
	TIM4->CCR2 = Red * 8000 / 250;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <SetRGB+0x68>)
 8001098:	fb82 1203 	smull	r1, r2, r2, r3
 800109c:	1112      	asrs	r2, r2, #4
 800109e:	17db      	asrs	r3, r3, #31
 80010a0:	1ad2      	subs	r2, r2, r3
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <SetRGB+0x6c>)
 80010a4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = Green * 8000 / 250;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010ac:	fb02 f303 	mul.w	r3, r2, r3
 80010b0:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <SetRGB+0x68>)
 80010b2:	fb82 1203 	smull	r1, r2, r2, r3
 80010b6:	1112      	asrs	r2, r2, #4
 80010b8:	17db      	asrs	r3, r3, #31
 80010ba:	1ad2      	subs	r2, r2, r3
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <SetRGB+0x6c>)
 80010be:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR4 = Blue * 8000 / 250;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	4a07      	ldr	r2, [pc, #28]	; (80010e8 <SetRGB+0x68>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1112      	asrs	r2, r2, #4
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad2      	subs	r2, r2, r3
 80010d6:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SetRGB+0x6c>)
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	10624dd3 	.word	0x10624dd3
 80010ec:	40000800 	.word	0x40000800

080010f0 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80010f8:	23ff      	movs	r3, #255	; 0xff
 80010fa:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8001100:	2300      	movs	r3, #0
 8001102:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001104:	2300      	movs	r3, #0
 8001106:	723b      	strb	r3, [r7, #8]
 8001108:	2300      	movs	r3, #0
 800110a:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <bno055_init+0x180>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001112:	4b57      	ldr	r3, [pc, #348]	; (8001270 <bno055_init+0x180>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68dc      	ldr	r4, [r3, #12]
 8001118:	4b55      	ldr	r3, [pc, #340]	; (8001270 <bno055_init+0x180>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	7a58      	ldrb	r0, [r3, #9]
 800111e:	f107 020d 	add.w	r2, r7, #13
 8001122:	2301      	movs	r3, #1
 8001124:	2107      	movs	r1, #7
 8001126:	47a0      	blx	r4
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800112c:	4b50      	ldr	r3, [pc, #320]	; (8001270 <bno055_init+0x180>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	691c      	ldr	r4, [r3, #16]
 8001132:	4b4f      	ldr	r3, [pc, #316]	; (8001270 <bno055_init+0x180>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	7a58      	ldrb	r0, [r3, #9]
 8001138:	f107 020e 	add.w	r2, r7, #14
 800113c:	2301      	movs	r3, #1
 800113e:	2100      	movs	r1, #0
 8001140:	47a0      	blx	r4
 8001142:	4603      	mov	r3, r0
 8001144:	b2da      	uxtb	r2, r3
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	4413      	add	r3, r2
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 800114e:	4b48      	ldr	r3, [pc, #288]	; (8001270 <bno055_init+0x180>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	7bba      	ldrb	r2, [r7, #14]
 8001154:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001156:	4b46      	ldr	r3, [pc, #280]	; (8001270 <bno055_init+0x180>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	691c      	ldr	r4, [r3, #16]
 800115c:	4b44      	ldr	r3, [pc, #272]	; (8001270 <bno055_init+0x180>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	7a58      	ldrb	r0, [r3, #9]
 8001162:	f107 020e 	add.w	r2, r7, #14
 8001166:	2301      	movs	r3, #1
 8001168:	2101      	movs	r1, #1
 800116a:	47a0      	blx	r4
 800116c:	4603      	mov	r3, r0
 800116e:	b2da      	uxtb	r2, r3
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	4413      	add	r3, r2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8001178:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <bno055_init+0x180>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	7bba      	ldrb	r2, [r7, #14]
 800117e:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <bno055_init+0x180>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	691c      	ldr	r4, [r3, #16]
 8001186:	4b3a      	ldr	r3, [pc, #232]	; (8001270 <bno055_init+0x180>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	7a58      	ldrb	r0, [r3, #9]
 800118c:	f107 020e 	add.w	r2, r7, #14
 8001190:	2301      	movs	r3, #1
 8001192:	2102      	movs	r1, #2
 8001194:	47a0      	blx	r4
 8001196:	4603      	mov	r3, r0
 8001198:	b2da      	uxtb	r2, r3
 800119a:	7bfb      	ldrb	r3, [r7, #15]
 800119c:	4413      	add	r3, r2
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <bno055_init+0x180>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	7bba      	ldrb	r2, [r7, #14]
 80011a8:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <bno055_init+0x180>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	691c      	ldr	r4, [r3, #16]
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <bno055_init+0x180>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	7a58      	ldrb	r0, [r3, #9]
 80011b6:	f107 020e 	add.w	r2, r7, #14
 80011ba:	2301      	movs	r3, #1
 80011bc:	2103      	movs	r1, #3
 80011be:	47a0      	blx	r4
 80011c0:	4603      	mov	r3, r0
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	4413      	add	r3, r2
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <bno055_init+0x180>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	7bba      	ldrb	r2, [r7, #14]
 80011d2:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <bno055_init+0x180>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	691c      	ldr	r4, [r3, #16]
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <bno055_init+0x180>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	7a58      	ldrb	r0, [r3, #9]
 80011e0:	f107 020e 	add.w	r2, r7, #14
 80011e4:	2301      	movs	r3, #1
 80011e6:	2106      	movs	r1, #6
 80011e8:	47a0      	blx	r4
 80011ea:	4603      	mov	r3, r0
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	4413      	add	r3, r2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <bno055_init+0x180>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	7bba      	ldrb	r2, [r7, #14]
 80011fc:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <bno055_init+0x180>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691c      	ldr	r4, [r3, #16]
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <bno055_init+0x180>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	7a58      	ldrb	r0, [r3, #9]
 800120a:	f107 0208 	add.w	r2, r7, #8
 800120e:	2302      	movs	r3, #2
 8001210:	2104      	movs	r1, #4
 8001212:	47a0      	blx	r4
 8001214:	4603      	mov	r3, r0
 8001216:	b2da      	uxtb	r2, r3
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	4413      	add	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8001220:	7a3b      	ldrb	r3, [r7, #8]
 8001222:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001224:	7a7b      	ldrb	r3, [r7, #9]
 8001226:	b29b      	uxth	r3, r3
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b299      	uxth	r1, r3
 800122c:	7a3b      	ldrb	r3, [r7, #8]
 800122e:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <bno055_init+0x180>)
 8001232:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001234:	430a      	orrs	r2, r1
 8001236:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8001238:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <bno055_init+0x180>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691c      	ldr	r4, [r3, #16]
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <bno055_init+0x180>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	7a58      	ldrb	r0, [r3, #9]
 8001246:	f107 020e 	add.w	r2, r7, #14
 800124a:	2301      	movs	r3, #1
 800124c:	2107      	movs	r1, #7
 800124e:	47a0      	blx	r4
 8001250:	4603      	mov	r3, r0
 8001252:	b2da      	uxtb	r2, r3
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	4413      	add	r3, r2
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <bno055_init+0x180>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	7bba      	ldrb	r2, [r7, #14]
 8001262:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8001264:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	20000238 	.word	0x20000238

08001274 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	4613      	mov	r3, r2
 8001282:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001284:	23ff      	movs	r3, #255	; 0xff
 8001286:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <bno055_write_register+0x48>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001290:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001294:	e00d      	b.n	80012b2 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <bno055_write_register+0x48>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68dc      	ldr	r4, [r3, #12]
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <bno055_write_register+0x48>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	7a58      	ldrb	r0, [r3, #9]
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	79f9      	ldrb	r1, [r7, #7]
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	47a0      	blx	r4
 80012aa:	4603      	mov	r3, r0
 80012ac:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000238 	.word	0x20000238

080012c0 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80012ca:	23ff      	movs	r3, #255	; 0xff
 80012cc:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <bno055_write_page_id+0x8c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 80012da:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80012de:	e030      	b.n	8001342 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <bno055_write_page_id+0x8c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691c      	ldr	r4, [r3, #16]
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <bno055_write_page_id+0x8c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	7a58      	ldrb	r0, [r3, #9]
 80012ec:	f107 020e 	add.w	r2, r7, #14
 80012f0:	2301      	movs	r3, #1
 80012f2:	2107      	movs	r1, #7
 80012f4:	47a0      	blx	r4
 80012f6:	4603      	mov	r3, r0
 80012f8:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d11b      	bne.n	800133a <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <bno055_write_page_id+0x8c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68dc      	ldr	r4, [r3, #12]
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <bno055_write_page_id+0x8c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	7a58      	ldrb	r0, [r3, #9]
 8001312:	f107 020e 	add.w	r2, r7, #14
 8001316:	2301      	movs	r3, #1
 8001318:	2107      	movs	r1, #7
 800131a:	47a0      	blx	r4
 800131c:	4603      	mov	r3, r0
 800131e:	b2da      	uxtb	r2, r3
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	4413      	add	r3, r2
 8001324:	b2db      	uxtb	r3, r3
 8001326:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8001328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d106      	bne.n	800133e <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <bno055_write_page_id+0x8c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	79fa      	ldrb	r2, [r7, #7]
 8001336:	711a      	strb	r2, [r3, #4]
 8001338:	e001      	b.n	800133e <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800133a:	23ff      	movs	r3, #255	; 0xff
 800133c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800133e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	bd90      	pop	{r4, r7, pc}
 800134a:	bf00      	nop
 800134c:	20000238 	.word	0x20000238

08001350 <bno055_read_mag_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_xyz(struct bno055_mag_t *mag)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001358:	23ff      	movs	r3, #255	; 0xff
 800135a:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_MAG_XYZ_DATA_SIZE] = {
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8001366:	23ff      	movs	r3, #255	; 0xff
 8001368:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <bno055_read_mag_xyz+0xd0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <bno055_read_mag_xyz+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001372:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001376:	e04e      	b.n	8001416 <bno055_read_mag_xyz+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <bno055_read_mag_xyz+0xd0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	791b      	ldrb	r3, [r3, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <bno055_read_mag_xyz+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001382:	2000      	movs	r0, #0
 8001384:	f7ff ff9c 	bl	80012c0 <bno055_write_page_id>
 8001388:	4603      	mov	r3, r0
 800138a:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800138c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d004      	beq.n	800139e <bno055_read_mag_xyz+0x4e>
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <bno055_read_mag_xyz+0xd0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	791b      	ldrb	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d137      	bne.n	800140e <bno055_read_mag_xyz+0xbe>
        {
            /*Read the six byte value of mag xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <bno055_read_mag_xyz+0xd0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691c      	ldr	r4, [r3, #16]
 80013a4:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <bno055_read_mag_xyz+0xd0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	7a58      	ldrb	r0, [r3, #9]
 80013aa:	f107 0208 	add.w	r2, r7, #8
 80013ae:	2306      	movs	r3, #6
 80013b0:	210e      	movs	r1, #14
 80013b2:	47a0      	blx	r4
 80013b4:	4603      	mov	r3, r0
 80013b6:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_MAG_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 80013b8:	7a3b      	ldrb	r3, [r7, #8]
 80013ba:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_MAG_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 80013bc:	7a7b      	ldrb	r3, [r7, #9]
 80013be:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_MAG_DATA_X_MSB_VALUEX);
            mag->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013c0:	7a7b      	ldrb	r3, [r7, #9]
 80013c2:	b25b      	sxtb	r3, r3
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 80013c8:	7a3b      	ldrb	r3, [r7, #8]
 80013ca:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
            mag->x =
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 80013d4:	7abb      	ldrb	r3, [r7, #10]
 80013d6:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_MAG_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 80013d8:	7afb      	ldrb	r3, [r7, #11]
 80013da:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_MAG_DATA_Y_MSB_VALUEY);
            mag->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013dc:	7afb      	ldrb	r3, [r7, #11]
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 80013e4:	7abb      	ldrb	r3, [r7, #10]
 80013e6:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b21a      	sxth	r2, r3
            mag->y =
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 80013f0:	7b3b      	ldrb	r3, [r7, #12]
 80013f2:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_MAG_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 80013f4:	7b7b      	ldrb	r3, [r7, #13]
 80013f6:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_MAG_DATA_Z_MSB_VALUEZ);
            mag->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80013f8:	7b7b      	ldrb	r3, [r7, #13]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8001400:	7b3b      	ldrb	r3, [r7, #12]
 8001402:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001404:	4313      	orrs	r3, r2
 8001406:	b21a      	sxth	r2, r3
            mag->z =
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	809a      	strh	r2, [r3, #4]
 800140c:	e001      	b.n	8001412 <bno055_read_mag_xyz+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800140e:	23ff      	movs	r3, #255	; 0xff
 8001410:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	20000238 	.word	0x20000238

08001424 <bno055_convert_double_mag_xyz_uT>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_xyz_uT(struct bno055_mag_double_t *mag_xyz)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800142c:	23ff      	movs	r3, #255	; 0xff
 800142e:	73fb      	strb	r3, [r7, #15]
    struct bno055_mag_t reg_mag_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001430:	2300      	movs	r3, #0
 8001432:	813b      	strh	r3, [r7, #8]
 8001434:	2300      	movs	r3, #0
 8001436:	817b      	strh	r3, [r7, #10]
 8001438:	2300      	movs	r3, #0
 800143a:	81bb      	strh	r3, [r7, #12]

    /* Read raw mag xyz data */
    com_rslt = bno055_read_mag_xyz(&reg_mag_xyz);
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff85 	bl	8001350 <bno055_read_mag_xyz>
 8001446:	4603      	mov	r3, r0
 8001448:	73fb      	strb	r3, [r7, #15]
    if (com_rslt == BNO055_SUCCESS)
 800144a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d127      	bne.n	80014a2 <bno055_convert_double_mag_xyz_uT+0x7e>
    {
        /* Convert raw mag xyz to microTesla*/
        mag_xyz->x = (double)(reg_mag_xyz.x / BNO055_MAG_DIV_UT);
 8001452:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800145e:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001462:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	ed83 7b00 	vstr	d7, [r3]
        mag_xyz->y = (double)(reg_mag_xyz.y / BNO055_MAG_DIV_UT);
 800146c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001478:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 800147c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	ed83 7b02 	vstr	d7, [r3, #8]
        mag_xyz->z = (double)(reg_mag_xyz.z / BNO055_MAG_DIV_UT);
 8001486:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001492:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001496:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	ed83 7b04 	vstr	d7, [r3, #16]
 80014a0:	e001      	b.n	80014a6 <bno055_convert_double_mag_xyz_uT+0x82>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80014a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80014bc:	23ff      	movs	r3, #255	; 0xff
 80014be:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80014c4:	23ff      	movs	r3, #255	; 0xff
 80014c6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <bno055_get_operation_mode+0x80>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 80014d0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80014d4:	e02a      	b.n	800152c <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <bno055_get_operation_mode+0x80>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	791b      	ldrb	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d004      	beq.n	80014ea <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff feed 	bl	80012c0 <bno055_write_page_id>
 80014e6:	4603      	mov	r3, r0
 80014e8:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80014ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <bno055_get_operation_mode+0x48>
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <bno055_get_operation_mode+0x80>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	791b      	ldrb	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d113      	bne.n	8001524 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <bno055_get_operation_mode+0x80>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691c      	ldr	r4, [r3, #16]
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <bno055_get_operation_mode+0x80>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	7a58      	ldrb	r0, [r3, #9]
 8001508:	f107 020d 	add.w	r2, r7, #13
 800150c:	2301      	movs	r3, #1
 800150e:	213d      	movs	r1, #61	; 0x3d
 8001510:	47a0      	blx	r4
 8001512:	4603      	mov	r3, r0
 8001514:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8001516:	7b7b      	ldrb	r3, [r7, #13]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	b2da      	uxtb	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	701a      	strb	r2, [r3, #0]
 8001522:	e001      	b.n	8001528 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001524:	23ff      	movs	r3, #255	; 0xff
 8001526:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	20000238 	.word	0x20000238

08001538 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001542:	23ff      	movs	r3, #255	; 0xff
 8001544:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001546:	2300      	movs	r3, #0
 8001548:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800154a:	2300      	movs	r3, #0
 800154c:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 800154e:	23ff      	movs	r3, #255	; 0xff
 8001550:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d102      	bne.n	8001560 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 800155a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800155e:	e0ac      	b.n	80016ba <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ffa5 	bl	80014b4 <bno055_get_operation_mode>
 800156a:	4603      	mov	r3, r0
 800156c:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800156e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 809d 	bne.w	80016b2 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001578:	7b3b      	ldrb	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d137      	bne.n	80015ee <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800157e:	4b51      	ldr	r3, [pc, #324]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691c      	ldr	r4, [r3, #16]
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	7a58      	ldrb	r0, [r3, #9]
 800158a:	f107 020d 	add.w	r2, r7, #13
 800158e:	2301      	movs	r3, #1
 8001590:	213d      	movs	r1, #61	; 0x3d
 8001592:	47a0      	blx	r4
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 808a 	bne.w	80016b6 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80015a2:	7b7b      	ldrb	r3, [r7, #13]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	f023 030f 	bic.w	r3, r3, #15
 80015aa:	b25a      	sxtb	r2, r3
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80015be:	4b41      	ldr	r3, [pc, #260]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68dc      	ldr	r4, [r3, #12]
 80015c4:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	7a58      	ldrb	r0, [r3, #9]
 80015ca:	f107 020d 	add.w	r2, r7, #13
 80015ce:	2301      	movs	r3, #1
 80015d0:	213d      	movs	r1, #61	; 0x3d
 80015d2:	47a0      	blx	r4
 80015d4:	4603      	mov	r3, r0
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	4413      	add	r3, r2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80015e0:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80015ea:	4798      	blx	r3
 80015ec:	e063      	b.n	80016b6 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80015ee:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	691c      	ldr	r4, [r3, #16]
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	7a58      	ldrb	r0, [r3, #9]
 80015fa:	f107 020d 	add.w	r2, r7, #13
 80015fe:	2301      	movs	r3, #1
 8001600:	213d      	movs	r1, #61	; 0x3d
 8001602:	47a0      	blx	r4
 8001604:	4603      	mov	r3, r0
 8001606:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d116      	bne.n	800163e <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001610:	7b7b      	ldrb	r3, [r7, #13]
 8001612:	f023 030f 	bic.w	r3, r3, #15
 8001616:	b2db      	uxtb	r3, r3
 8001618:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 800161a:	f107 030d 	add.w	r3, r7, #13
 800161e:	2201      	movs	r2, #1
 8001620:	4619      	mov	r1, r3
 8001622:	203d      	movs	r0, #61	; 0x3d
 8001624:	f7ff fe26 	bl	8001274 <bno055_write_register>
 8001628:	4603      	mov	r3, r0
 800162a:	b2da      	uxtb	r2, r3
                    com_rslt +=
 800162c:	7bfb      	ldrb	r3, [r7, #15]
 800162e:	4413      	add	r3, r2
 8001630:	b2db      	uxtb	r3, r3
 8001632:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2014      	movs	r0, #20
 800163c:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d038      	beq.n	80016b6 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691c      	ldr	r4, [r3, #16]
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	7a58      	ldrb	r0, [r3, #9]
 8001650:	f107 020d 	add.w	r2, r7, #13
 8001654:	2301      	movs	r3, #1
 8001656:	213d      	movs	r1, #61	; 0x3d
 8001658:	47a0      	blx	r4
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d127      	bne.n	80016b6 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001666:	7b7b      	ldrb	r3, [r7, #13]
 8001668:	b25b      	sxtb	r3, r3
 800166a:	f023 030f 	bic.w	r3, r3, #15
 800166e:	b25a      	sxtb	r2, r3
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	f003 030f 	and.w	r3, r3, #15
 8001678:	b25b      	sxtb	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b25b      	sxtb	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68dc      	ldr	r4, [r3, #12]
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	7a58      	ldrb	r0, [r3, #9]
 800168e:	f107 020d 	add.w	r2, r7, #13
 8001692:	2301      	movs	r3, #1
 8001694:	213d      	movs	r1, #61	; 0x3d
 8001696:	47a0      	blx	r4
 8001698:	4603      	mov	r3, r0
 800169a:	b2da      	uxtb	r2, r3
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	4413      	add	r3, r2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <bno055_set_operation_mode+0x18c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80016ae:	4798      	blx	r3
 80016b0:	e001      	b.n	80016b6 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80016b2:	23ff      	movs	r3, #255	; 0xff
 80016b4:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000238 	.word	0x20000238

080016c8 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80016d2:	23ff      	movs	r3, #255	; 0xff
 80016d4:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80016da:	2300      	movs	r3, #0
 80016dc:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80016de:	23ff      	movs	r3, #255	; 0xff
 80016e0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <bno055_set_power_mode+0xf0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80016ea:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80016ee:	e05f      	b.n	80017b0 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fedd 	bl	80014b4 <bno055_get_operation_mode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80016fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d143      	bne.n	800178e <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001706:	7b3b      	ldrb	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff ff13 	bl	8001538 <bno055_set_operation_mode>
 8001712:	4603      	mov	r3, r0
 8001714:	b2da      	uxtb	r2, r3
 8001716:	7bbb      	ldrb	r3, [r7, #14]
 8001718:	4413      	add	r3, r2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800171e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d130      	bne.n	8001788 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <bno055_set_power_mode+0xf0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691c      	ldr	r4, [r3, #16]
 800172c:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <bno055_set_power_mode+0xf0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	7a58      	ldrb	r0, [r3, #9]
 8001732:	f107 020d 	add.w	r2, r7, #13
 8001736:	2301      	movs	r3, #1
 8001738:	213e      	movs	r1, #62	; 0x3e
 800173a:	47a0      	blx	r4
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001740:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d124      	bne.n	8001792 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8001748:	7b7b      	ldrb	r3, [r7, #13]
 800174a:	b25b      	sxtb	r3, r3
 800174c:	f023 0303 	bic.w	r3, r3, #3
 8001750:	b25a      	sxtb	r2, r3
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	b25b      	sxtb	r3, r3
 800175c:	4313      	orrs	r3, r2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <bno055_set_power_mode+0xf0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68dc      	ldr	r4, [r3, #12]
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <bno055_set_power_mode+0xf0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	7a58      	ldrb	r0, [r3, #9]
 8001770:	f107 020d 	add.w	r2, r7, #13
 8001774:	2301      	movs	r3, #1
 8001776:	213e      	movs	r1, #62	; 0x3e
 8001778:	47a0      	blx	r4
 800177a:	4603      	mov	r3, r0
 800177c:	b2da      	uxtb	r2, r3
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	4413      	add	r3, r2
 8001782:	b2db      	uxtb	r3, r3
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e004      	b.n	8001792 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001788:	23ff      	movs	r3, #255	; 0xff
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e001      	b.n	8001792 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800178e:	23ff      	movs	r3, #255	; 0xff
 8001790:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001792:	7b3b      	ldrb	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d009      	beq.n	80017ac <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001798:	7b3b      	ldrb	r3, [r7, #12]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fecc 	bl	8001538 <bno055_set_operation_mode>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	4413      	add	r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 80017ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd90      	pop	{r4, r7, pc}
 80017b8:	20000238 	.word	0x20000238

080017bc <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <I2C_routine+0x28>)
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <I2C_routine+0x2c>)
 80017c4:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <I2C_routine+0x28>)
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <I2C_routine+0x30>)
 80017ca:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <I2C_routine+0x28>)
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <I2C_routine+0x34>)
 80017d0:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <I2C_routine+0x28>)
 80017d4:	2229      	movs	r2, #41	; 0x29
 80017d6:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20000d70 	.word	0x20000d70
 80017e8:	080017f5 	.word	0x080017f5
 80017ec:	0800186d 	.word	0x0800186d
 80017f0:	080018fd 	.word	0x080018fd

080017f4 <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	603a      	str	r2, [r7, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	460b      	mov	r3, r1
 8001804:	71bb      	strb	r3, [r7, #6]
 8001806:	4613      	mov	r3, r2
 8001808:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
 800181a:	e00d      	b.n	8001838 <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	441a      	add	r2, r3
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	3301      	adds	r3, #1
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	f107 0118 	add.w	r1, r7, #24
 800182c:	440b      	add	r3, r1
 800182e:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	3301      	adds	r3, #1
 8001836:	75fb      	strb	r3, [r7, #23]
 8001838:	7dfa      	ldrb	r2, [r7, #23]
 800183a:	797b      	ldrb	r3, [r7, #5]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3ed      	bcc.n	800181c <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 8001840:	797b      	ldrb	r3, [r7, #5]
 8001842:	b29b      	uxth	r3, r3
 8001844:	3301      	adds	r3, #1
 8001846:	b299      	uxth	r1, r3
 8001848:	f107 0208 	add.w	r2, r7, #8
 800184c:	230a      	movs	r3, #10
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	460b      	mov	r3, r1
 8001852:	2152      	movs	r1, #82	; 0x52
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <BNO055_I2C_bus_write+0x74>)
 8001856:	f003 fda9 	bl	80053ac <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	b25b      	sxtb	r3, r3
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20003ec8 	.word	0x20003ec8

0800186c <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af02      	add	r7, sp, #8
 8001872:	603a      	str	r2, [r7, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
 800187a:	460b      	mov	r3, r1
 800187c:	71bb      	strb	r3, [r7, #6]
 800187e:	4613      	mov	r3, r2
 8001880:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8001890:	2300      	movs	r3, #0
 8001892:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]
 800189c:	e00c      	b.n	80018b8 <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 800189e:	7dfa      	ldrb	r2, [r7, #23]
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	6839      	ldr	r1, [r7, #0]
 80018a4:	440b      	add	r3, r1
 80018a6:	f107 0118 	add.w	r1, r7, #24
 80018aa:	440a      	add	r2, r1
 80018ac:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80018b0:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	3301      	adds	r3, #1
 80018b6:	75fb      	strb	r3, [r7, #23]
 80018b8:	7dfa      	ldrb	r2, [r7, #23]
 80018ba:	797b      	ldrb	r3, [r7, #5]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d3ee      	bcc.n	800189e <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	b299      	uxth	r1, r3
 80018c4:	f107 0208 	add.w	r2, r7, #8
 80018c8:	230a      	movs	r3, #10
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	460b      	mov	r3, r1
 80018ce:	2152      	movs	r1, #82	; 0x52
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <BNO055_I2C_bus_read+0x8c>)
 80018d2:	f003 fd6b 	bl	80053ac <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 80018d6:	797b      	ldrb	r3, [r7, #5]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	230a      	movs	r3, #10
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	4613      	mov	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	2152      	movs	r1, #82	; 0x52
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <BNO055_I2C_bus_read+0x8c>)
 80018e6:	f003 fe55 	bl	8005594 <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	b25b      	sxtb	r3, r3
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20003ec8 	.word	0x20003ec8

080018fc <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f001 fffd 	bl	8003904 <HAL_Delay>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <BNOInit>:

void BNOInit()
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	I2C_routine();
 8001918:	f7ff ff50 	bl	80017bc <I2C_routine>
	comres = bno055_init(&bno055);
 800191c:	4810      	ldr	r0, [pc, #64]	; (8001960 <BNOInit+0x4c>)
 800191e:	f7ff fbe7 	bl	80010f0 <bno055_init>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <BNOInit+0x50>)
 8001928:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 800192a:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <BNOInit+0x54>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <BNOInit+0x54>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fec7 	bl	80016c8 <bno055_set_power_mode>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <BNOInit+0x50>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <BNOInit+0x50>)
 8001946:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001948:	200c      	movs	r0, #12
 800194a:	f7ff fdf5 	bl	8001538 <bno055_set_operation_mode>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <BNOInit+0x50>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a02      	ldr	r2, [pc, #8]	; (8001964 <BNOInit+0x50>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000d70 	.word	0x20000d70
 8001964:	20000000 	.word	0x20000000
 8001968:	20000b14 	.word	0x20000b14

0800196c <readBNOMagnetometer>:
}

uint32_t LastMagnetometerMeasurement = 0;

void readBNOMagnetometer()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	isNewMagDataAvailable = false;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <readBNOMagnetometer+0x44>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
	if ( (HAL_GetTick() - LastMagnetometerMeasurement) > 50 )
 8001976:	f001 ffb9 	bl	80038ec <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <readBNOMagnetometer+0x48>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b32      	cmp	r3, #50	; 0x32
 8001984:	d911      	bls.n	80019aa <readBNOMagnetometer+0x3e>
	{
		comres += bno055_convert_double_mag_xyz_uT(&d_mag_xyz);
 8001986:	480c      	ldr	r0, [pc, #48]	; (80019b8 <readBNOMagnetometer+0x4c>)
 8001988:	f7ff fd4c 	bl	8001424 <bno055_convert_double_mag_xyz_uT>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <readBNOMagnetometer+0x50>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4413      	add	r3, r2
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <readBNOMagnetometer+0x50>)
 8001998:	6013      	str	r3, [r2, #0]
		LastMagnetometerMeasurement = HAL_GetTick();
 800199a:	f001 ffa7 	bl	80038ec <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <readBNOMagnetometer+0x48>)
 80019a2:	601a      	str	r2, [r3, #0]
		isNewMagDataAvailable = true;
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <readBNOMagnetometer+0x44>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
	}
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000b20 	.word	0x20000b20
 80019b4:	2000023c 	.word	0x2000023c
 80019b8:	20003f98 	.word	0x20003f98
 80019bc:	20000000 	.word	0x20000000

080019c0 <MS56XXReset>:
int64_t OFF = 0;
int64_t SNES = 0;
int32_t P = 0;

void MS56XXReset(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2110      	movs	r1, #16
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <MS56XXReset+0x40>)
 80019ca:	f003 fc45 	bl	8005258 <HAL_GPIO_WritePin>
	SPITX[0] = 0x1E;
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <MS56XXReset+0x44>)
 80019d0:	221e      	movs	r2, #30
 80019d2:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	2201      	movs	r2, #1
 80019da:	490a      	ldr	r1, [pc, #40]	; (8001a04 <MS56XXReset+0x44>)
 80019dc:	480a      	ldr	r0, [pc, #40]	; (8001a08 <MS56XXReset+0x48>)
 80019de:	f006 ff1d 	bl	800881c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80019e2:	bf00      	nop
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <MS56XXReset+0x48>)
 80019e6:	f007 fbba 	bl	800915e <HAL_SPI_GetState>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d0f9      	beq.n	80019e4 <MS56XXReset+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	2110      	movs	r1, #16
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <MS56XXReset+0x40>)
 80019f6:	f003 fc2f 	bl	8005258 <HAL_GPIO_WritePin>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40020000 	.word	0x40020000
 8001a04:	20000240 	.word	0x20000240
 8001a08:	2000415c 	.word	0x2000415c

08001a0c <MS56XXReadProm>:

uint16_t MS56XXReadProm(uint8_t address)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = address;
 8001a16:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <MS56XXReadProm+0x78>)
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2110      	movs	r1, #16
 8001a20:	4819      	ldr	r0, [pc, #100]	; (8001a88 <MS56XXReadProm+0x7c>)
 8001a22:	f003 fc19 	bl	8005258 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4915      	ldr	r1, [pc, #84]	; (8001a84 <MS56XXReadProm+0x78>)
 8001a2e:	4817      	ldr	r0, [pc, #92]	; (8001a8c <MS56XXReadProm+0x80>)
 8001a30:	f006 fef4 	bl	800881c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001a34:	bf00      	nop
 8001a36:	4815      	ldr	r0, [pc, #84]	; (8001a8c <MS56XXReadProm+0x80>)
 8001a38:	f007 fb91 	bl	800915e <HAL_SPI_GetState>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d0f9      	beq.n	8001a36 <MS56XXReadProm+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[0], 1, HAL_MAX_DELAY);
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	2201      	movs	r2, #1
 8001a48:	4911      	ldr	r1, [pc, #68]	; (8001a90 <MS56XXReadProm+0x84>)
 8001a4a:	4810      	ldr	r0, [pc, #64]	; (8001a8c <MS56XXReadProm+0x80>)
 8001a4c:	f007 f84c 	bl	8008ae8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[1], 1, HAL_MAX_DELAY);
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
 8001a54:	2201      	movs	r2, #1
 8001a56:	490f      	ldr	r1, [pc, #60]	; (8001a94 <MS56XXReadProm+0x88>)
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <MS56XXReadProm+0x80>)
 8001a5a:	f007 f845 	bl	8008ae8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2110      	movs	r1, #16
 8001a62:	4809      	ldr	r0, [pc, #36]	; (8001a88 <MS56XXReadProm+0x7c>)
 8001a64:	f003 fbf8 	bl	8005258 <HAL_GPIO_WritePin>
	return (SPIRX2Byte[0]<<8) + SPIRX2Byte[1];
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MS56XXReadProm+0x84>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	021b      	lsls	r3, r3, #8
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MS56XXReadProm+0x84>)
 8001a74:	785b      	ldrb	r3, [r3, #1]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000240 	.word	0x20000240
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	2000415c 	.word	0x2000415c
 8001a90:	20000244 	.word	0x20000244
 8001a94:	20000245 	.word	0x20000245

08001a98 <MS56XXInit>:

void MS56XXInit(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	MS56XXReset();
 8001a9c:	f7ff ff90 	bl	80019c0 <MS56XXReset>
	HAL_Delay(50);
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f001 ff2f 	bl	8003904 <HAL_Delay>
	MS56XXReadProm(0xA0);
 8001aa6:	20a0      	movs	r0, #160	; 0xa0
 8001aa8:	f7ff ffb0 	bl	8001a0c <MS56XXReadProm>
	Coeff1 = MS56XXReadProm(0xA2);
 8001aac:	20a2      	movs	r0, #162	; 0xa2
 8001aae:	f7ff ffad 	bl	8001a0c <MS56XXReadProm>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <MS56XXInit+0xb0>)
 8001ab8:	801a      	strh	r2, [r3, #0]
	Coeff2 = MS56XXReadProm(0xA4);
 8001aba:	20a4      	movs	r0, #164	; 0xa4
 8001abc:	f7ff ffa6 	bl	8001a0c <MS56XXReadProm>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <MS56XXInit+0xb4>)
 8001ac6:	801a      	strh	r2, [r3, #0]
	Coeff3 = MS56XXReadProm(0xA6);
 8001ac8:	20a6      	movs	r0, #166	; 0xa6
 8001aca:	f7ff ff9f 	bl	8001a0c <MS56XXReadProm>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MS56XXInit+0xb8>)
 8001ad4:	801a      	strh	r2, [r3, #0]
	Coeff4 = MS56XXReadProm(0xA8);
 8001ad6:	20a8      	movs	r0, #168	; 0xa8
 8001ad8:	f7ff ff98 	bl	8001a0c <MS56XXReadProm>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MS56XXInit+0xbc>)
 8001ae2:	801a      	strh	r2, [r3, #0]
	Coeff5 = MS56XXReadProm(0xAA);
 8001ae4:	20aa      	movs	r0, #170	; 0xaa
 8001ae6:	f7ff ff91 	bl	8001a0c <MS56XXReadProm>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <MS56XXInit+0xc0>)
 8001af0:	801a      	strh	r2, [r3, #0]
	Coeff6 = MS56XXReadProm(0xAC);
 8001af2:	20ac      	movs	r0, #172	; 0xac
 8001af4:	f7ff ff8a 	bl	8001a0c <MS56XXReadProm>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MS56XXInit+0xc4>)
 8001afe:	801a      	strh	r2, [r3, #0]
	MSCRC = MS56XXReadProm(0xAE);
 8001b00:	20ae      	movs	r0, #174	; 0xae
 8001b02:	f7ff ff83 	bl	8001a0c <MS56XXReadProm>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <MS56XXInit+0xc8>)
 8001b0c:	801a      	strh	r2, [r3, #0]

	MS56XXSendCmd(0x58);
 8001b0e:	2058      	movs	r0, #88	; 0x58
 8001b10:	f000 f82c 	bl	8001b6c <MS56XXSendCmd>
	HAL_Delay(9);
 8001b14:	2009      	movs	r0, #9
 8001b16:	f001 fef5 	bl	8003904 <HAL_Delay>
	RawTemp = MS56XXRead3Bytes(0);
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f856 	bl	8001bcc <MS56XXRead3Bytes>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <MS56XXInit+0xcc>)
 8001b24:	601a      	str	r2, [r3, #0]

	MS56XXSendCmd(0x48);
 8001b26:	2048      	movs	r0, #72	; 0x48
 8001b28:	f000 f820 	bl	8001b6c <MS56XXSendCmd>
	HAL_Delay(9);
 8001b2c:	2009      	movs	r0, #9
 8001b2e:	f001 fee9 	bl	8003904 <HAL_Delay>
	RawPressure = MS56XXRead3Bytes(0);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f84a 	bl	8001bcc <MS56XXRead3Bytes>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MS56XXInit+0xd0>)
 8001b3c:	601a      	str	r2, [r3, #0]
	GetAltitudeAndTemp();
 8001b3e:	f000 f899 	bl	8001c74 <GetAltitudeAndTemp>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000024c 	.word	0x2000024c
 8001b4c:	2000024e 	.word	0x2000024e
 8001b50:	20000250 	.word	0x20000250
 8001b54:	20000252 	.word	0x20000252
 8001b58:	20000254 	.word	0x20000254
 8001b5c:	20000256 	.word	0x20000256
 8001b60:	20000258 	.word	0x20000258
 8001b64:	2000026c 	.word	0x2000026c
 8001b68:	20000270 	.word	0x20000270

08001b6c <MS56XXSendCmd>:

void MS56XXSendCmd(uint8_t Cmd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2110      	movs	r1, #16
 8001b7a:	4810      	ldr	r0, [pc, #64]	; (8001bbc <MS56XXSendCmd+0x50>)
 8001b7c:	f003 fb6c 	bl	8005258 <HAL_GPIO_WritePin>
	SPITX[0] = Cmd;
 8001b80:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <MS56XXSendCmd+0x54>)
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <MS56XXSendCmd+0x54>)
 8001b8e:	480d      	ldr	r0, [pc, #52]	; (8001bc4 <MS56XXSendCmd+0x58>)
 8001b90:	f006 fe44 	bl	800881c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001b94:	bf00      	nop
 8001b96:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <MS56XXSendCmd+0x58>)
 8001b98:	f007 fae1 	bl	800915e <HAL_SPI_GetState>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d0f9      	beq.n	8001b96 <MS56XXSendCmd+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MS56XXSendCmd+0x50>)
 8001ba8:	f003 fb56 	bl	8005258 <HAL_GPIO_WritePin>
	isCmdSet = true;
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <MS56XXSendCmd+0x5c>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	20000240 	.word	0x20000240
 8001bc4:	2000415c 	.word	0x2000415c
 8001bc8:	2000025a 	.word	0x2000025a

08001bcc <MS56XXRead3Bytes>:

uint32_t MS56XXRead3Bytes(uint8_t address)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = 0x00;
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <MS56XXRead3Bytes+0x8c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2110      	movs	r1, #16
 8001be0:	481e      	ldr	r0, [pc, #120]	; (8001c5c <MS56XXRead3Bytes+0x90>)
 8001be2:	f003 fb39 	bl	8005258 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	2201      	movs	r2, #1
 8001bec:	491a      	ldr	r1, [pc, #104]	; (8001c58 <MS56XXRead3Bytes+0x8c>)
 8001bee:	481c      	ldr	r0, [pc, #112]	; (8001c60 <MS56XXRead3Bytes+0x94>)
 8001bf0:	f006 fe14 	bl	800881c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001bf4:	bf00      	nop
 8001bf6:	481a      	ldr	r0, [pc, #104]	; (8001c60 <MS56XXRead3Bytes+0x94>)
 8001bf8:	f007 fab1 	bl	800915e <HAL_SPI_GetState>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d0f9      	beq.n	8001bf6 <MS56XXRead3Bytes+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[0], 1, HAL_MAX_DELAY);
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	2201      	movs	r2, #1
 8001c08:	4916      	ldr	r1, [pc, #88]	; (8001c64 <MS56XXRead3Bytes+0x98>)
 8001c0a:	4815      	ldr	r0, [pc, #84]	; (8001c60 <MS56XXRead3Bytes+0x94>)
 8001c0c:	f006 ff6c 	bl	8008ae8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[1], 1, HAL_MAX_DELAY);
 8001c10:	f04f 33ff 	mov.w	r3, #4294967295
 8001c14:	2201      	movs	r2, #1
 8001c16:	4914      	ldr	r1, [pc, #80]	; (8001c68 <MS56XXRead3Bytes+0x9c>)
 8001c18:	4811      	ldr	r0, [pc, #68]	; (8001c60 <MS56XXRead3Bytes+0x94>)
 8001c1a:	f006 ff65 	bl	8008ae8 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[2], 1, HAL_MAX_DELAY);
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	2201      	movs	r2, #1
 8001c24:	4911      	ldr	r1, [pc, #68]	; (8001c6c <MS56XXRead3Bytes+0xa0>)
 8001c26:	480e      	ldr	r0, [pc, #56]	; (8001c60 <MS56XXRead3Bytes+0x94>)
 8001c28:	f006 ff5e 	bl	8008ae8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2110      	movs	r1, #16
 8001c30:	480a      	ldr	r0, [pc, #40]	; (8001c5c <MS56XXRead3Bytes+0x90>)
 8001c32:	f003 fb11 	bl	8005258 <HAL_GPIO_WritePin>
	isCmdSet = false;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MS56XXRead3Bytes+0xa4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
	return (SPIRX3Byte[0] << 16) + (SPIRX3Byte[1] << 8 ) + (SPIRX3Byte[0]);
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MS56XXRead3Bytes+0x98>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <MS56XXRead3Bytes+0x98>)
 8001c44:	785b      	ldrb	r3, [r3, #1]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <MS56XXRead3Bytes+0x98>)
 8001c4c:	7812      	ldrb	r2, [r2, #0]
 8001c4e:	4413      	add	r3, r2
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000240 	.word	0x20000240
 8001c5c:	40020000 	.word	0x40020000
 8001c60:	2000415c 	.word	0x2000415c
 8001c64:	20000248 	.word	0x20000248
 8001c68:	20000249 	.word	0x20000249
 8001c6c:	2000024a 	.word	0x2000024a
 8001c70:	2000025a 	.word	0x2000025a

08001c74 <GetAltitudeAndTemp>:

uint16_t GetAltitudeAndTemp(void)
{
 8001c74:	b4f0      	push	{r4, r5, r6, r7}
 8001c76:	af00      	add	r7, sp, #0
	dT = RawTemp - Coeff5 * 256;
 8001c78:	4b47      	ldr	r3, [pc, #284]	; (8001d98 <GetAltitudeAndTemp+0x124>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <GetAltitudeAndTemp+0x128>)
 8001c7e:	8812      	ldrh	r2, [r2, #0]
 8001c80:	0212      	lsls	r2, r2, #8
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <GetAltitudeAndTemp+0x12c>)
 8001c88:	601a      	str	r2, [r3, #0]
	TEMP = 2000 + dT * Coeff6 / 8388608;
 8001c8a:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <GetAltitudeAndTemp+0x130>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <GetAltitudeAndTemp+0x12c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	fb03 f302 	mul.w	r3, r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da02      	bge.n	8001ca2 <GetAltitudeAndTemp+0x2e>
 8001c9c:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <GetAltitudeAndTemp+0x134>)
 8001c9e:	441a      	add	r2, r3
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	15db      	asrs	r3, r3, #23
 8001ca4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001ca8:	4a40      	ldr	r2, [pc, #256]	; (8001dac <GetAltitudeAndTemp+0x138>)
 8001caa:	6013      	str	r3, [r2, #0]
	OFF = Coeff2 * 131072 + Coeff4 * dT / 64;
 8001cac:	4b40      	ldr	r3, [pc, #256]	; (8001db0 <GetAltitudeAndTemp+0x13c>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	045a      	lsls	r2, r3, #17
 8001cb2:	4b40      	ldr	r3, [pc, #256]	; (8001db4 <GetAltitudeAndTemp+0x140>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <GetAltitudeAndTemp+0x12c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fb03 f301 	mul.w	r3, r3, r1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da00      	bge.n	8001cc6 <GetAltitudeAndTemp+0x52>
 8001cc4:	333f      	adds	r3, #63	; 0x3f
 8001cc6:	119b      	asrs	r3, r3, #6
 8001cc8:	4413      	add	r3, r2
 8001cca:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001cce:	4a3a      	ldr	r2, [pc, #232]	; (8001db8 <GetAltitudeAndTemp+0x144>)
 8001cd0:	e9c2 3400 	strd	r3, r4, [r2]
	SNES = Coeff1 * 32768 + (Coeff3 * dT) / 127;
 8001cd4:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <GetAltitudeAndTemp+0x148>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	03da      	lsls	r2, r3, #15
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <GetAltitudeAndTemp+0x14c>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <GetAltitudeAndTemp+0x12c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fb03 f301 	mul.w	r3, r3, r1
 8001ce8:	4936      	ldr	r1, [pc, #216]	; (8001dc4 <GetAltitudeAndTemp+0x150>)
 8001cea:	fb81 0103 	smull	r0, r1, r1, r3
 8001cee:	4419      	add	r1, r3
 8001cf0:	1189      	asrs	r1, r1, #6
 8001cf2:	17db      	asrs	r3, r3, #31
 8001cf4:	1acb      	subs	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001cfc:	4a32      	ldr	r2, [pc, #200]	; (8001dc8 <GetAltitudeAndTemp+0x154>)
 8001cfe:	e9c2 3400 	strd	r3, r4, [r2]
	P = ((RawPressure * SNES) / 2097152 - OFF) / 32768;
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <GetAltitudeAndTemp+0x158>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4619      	mov	r1, r3
 8001d08:	f04f 0200 	mov.w	r2, #0
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <GetAltitudeAndTemp+0x154>)
 8001d0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d12:	fb03 f502 	mul.w	r5, r3, r2
 8001d16:	fb01 f004 	mul.w	r0, r1, r4
 8001d1a:	4428      	add	r0, r5
 8001d1c:	fba1 3403 	umull	r3, r4, r1, r3
 8001d20:	1902      	adds	r2, r0, r4
 8001d22:	4614      	mov	r4, r2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f174 0200 	sbcs.w	r2, r4, #0
 8001d2a:	da05      	bge.n	8001d38 <GetAltitudeAndTemp+0xc4>
 8001d2c:	4928      	ldr	r1, [pc, #160]	; (8001dd0 <GetAltitudeAndTemp+0x15c>)
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	185b      	adds	r3, r3, r1
 8001d34:	eb44 0402 	adc.w	r4, r4, r2
 8001d38:	f04f 0100 	mov.w	r1, #0
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	0d59      	lsrs	r1, r3, #21
 8001d42:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 8001d46:	1562      	asrs	r2, r4, #21
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <GetAltitudeAndTemp+0x144>)
 8001d4a:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4614      	mov	r4, r2
 8001d52:	1b5b      	subs	r3, r3, r5
 8001d54:	eb64 0406 	sbc.w	r4, r4, r6
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f174 0200 	sbcs.w	r2, r4, #0
 8001d5e:	da06      	bge.n	8001d6e <GetAltitudeAndTemp+0xfa>
 8001d60:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	185b      	adds	r3, r3, r1
 8001d6a:	eb44 0402 	adc.w	r4, r4, r2
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	0bd9      	lsrs	r1, r3, #15
 8001d78:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8001d7c:	13e2      	asrs	r2, r4, #15
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <GetAltitudeAndTemp+0x160>)
 8001d86:	601a      	str	r2, [r3, #0]
	return P;
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <GetAltitudeAndTemp+0x160>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bcf0      	pop	{r4, r5, r6, r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	2000026c 	.word	0x2000026c
 8001d9c:	20000254 	.word	0x20000254
 8001da0:	20000274 	.word	0x20000274
 8001da4:	20000256 	.word	0x20000256
 8001da8:	007fffff 	.word	0x007fffff
 8001dac:	20000278 	.word	0x20000278
 8001db0:	2000024e 	.word	0x2000024e
 8001db4:	20000252 	.word	0x20000252
 8001db8:	20000280 	.word	0x20000280
 8001dbc:	2000024c 	.word	0x2000024c
 8001dc0:	20000250 	.word	0x20000250
 8001dc4:	81020409 	.word	0x81020409
 8001dc8:	20000288 	.word	0x20000288
 8001dcc:	20000270 	.word	0x20000270
 8001dd0:	001fffff 	.word	0x001fffff
 8001dd4:	20000290 	.word	0x20000290

08001dd8 <MS56XXCyclicRead>:

void MS56XXCyclicRead(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
	if ( (HAL_GetTick() - LastTempMeasurement) > 1000 )
 8001ddc:	f001 fd86 	bl	80038ec <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <MS56XXCyclicRead+0xf0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dec:	d917      	bls.n	8001e1e <MS56XXCyclicRead+0x46>
	{
		if (!isCmdSet)
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <MS56XXCyclicRead+0xf4>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	f083 0301 	eor.w	r3, r3, #1
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d010      	beq.n	8001e1e <MS56XXCyclicRead+0x46>
		{
			MS56XXSendCmd(0x58);
 8001dfc:	2058      	movs	r0, #88	; 0x58
 8001dfe:	f7ff feb5 	bl	8001b6c <MS56XXSendCmd>
			isCmdSet = true;
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <MS56XXCyclicRead+0xf4>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8001e08:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <MS56XXCyclicRead+0xf8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = false;
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <MS56XXCyclicRead+0xfc>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 8001e14:	f001 fd6a 	bl	80038ec <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <MS56XXCyclicRead+0x100>)
 8001e1c:	601a      	str	r2, [r3, #0]
		}
	}

	if ((HAL_GetTick() - LastPressureMeasurement) > 20)
 8001e1e:	f001 fd65 	bl	80038ec <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <MS56XXCyclicRead+0x104>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b14      	cmp	r3, #20
 8001e2c:	d917      	bls.n	8001e5e <MS56XXCyclicRead+0x86>
	{
		if (!isCmdSet)
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <MS56XXCyclicRead+0xf4>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f083 0301 	eor.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <MS56XXCyclicRead+0x86>
		{
			MS56XXSendCmd(0x48);
 8001e3c:	2048      	movs	r0, #72	; 0x48
 8001e3e:	f7ff fe95 	bl	8001b6c <MS56XXSendCmd>
			isCmdSet = true;
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <MS56XXCyclicRead+0xf4>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <MS56XXCyclicRead+0xf8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = true;
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <MS56XXCyclicRead+0xfc>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 8001e54:	f001 fd4a 	bl	80038ec <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <MS56XXCyclicRead+0x100>)
 8001e5c:	601a      	str	r2, [r3, #0]
		}
	}

	if ( (HAL_GetTick() - LastCommandSent) > 9 )
 8001e5e:	f001 fd45 	bl	80038ec <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <MS56XXCyclicRead+0x100>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b09      	cmp	r3, #9
 8001e6c:	d929      	bls.n	8001ec2 <MS56XXCyclicRead+0xea>
	{
		if (isCmdSet)
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <MS56XXCyclicRead+0xf4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d025      	beq.n	8001ec2 <MS56XXCyclicRead+0xea>
		{
			if (!isPressureLastCmd)
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MS56XXCyclicRead+0xfc>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f083 0301 	eor.w	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00b      	beq.n	8001e9c <MS56XXCyclicRead+0xc4>
			{
				RawTemp = MS56XXRead3Bytes(0);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fea1 	bl	8001bcc <MS56XXRead3Bytes>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MS56XXCyclicRead+0x108>)
 8001e8e:	601a      	str	r2, [r3, #0]
				LastTempMeasurement = HAL_GetTick();
 8001e90:	f001 fd2c 	bl	80038ec <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MS56XXCyclicRead+0xf0>)
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e00a      	b.n	8001eb2 <MS56XXCyclicRead+0xda>
			}
			else
			{
				RawPressure = MS56XXRead3Bytes(0);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff fe95 	bl	8001bcc <MS56XXRead3Bytes>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <MS56XXCyclicRead+0x10c>)
 8001ea6:	601a      	str	r2, [r3, #0]
				LastPressureMeasurement = HAL_GetTick();
 8001ea8:	f001 fd20 	bl	80038ec <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <MS56XXCyclicRead+0x104>)
 8001eb0:	601a      	str	r2, [r3, #0]
			}
			isCmdSet = false;
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MS56XXCyclicRead+0xf4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	701a      	strb	r2, [r3, #0]
			GetAltitudeAndTemp();
 8001eb8:	f7ff fedc 	bl	8001c74 <GetAltitudeAndTemp>
			isNewMS56XXDataAvailable = true;
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <MS56XXCyclicRead+0xf8>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000260 	.word	0x20000260
 8001ecc:	2000025a 	.word	0x2000025a
 8001ed0:	2000025c 	.word	0x2000025c
 8001ed4:	2000025b 	.word	0x2000025b
 8001ed8:	20000268 	.word	0x20000268
 8001edc:	20000264 	.word	0x20000264
 8001ee0:	2000026c 	.word	0x2000026c
 8001ee4:	20000270 	.word	0x20000270

08001ee8 <SendToScreen>:
 */
#include "main.h"
#include "string.h"

void SendToScreen(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, USBTXArray, 150,4); // HAL_UART_Transmit(&huart2, USBTXArray, 1024,3); TIM2->CCR1
 8001eec:	2304      	movs	r3, #4
 8001eee:	2296      	movs	r2, #150	; 0x96
 8001ef0:	4905      	ldr	r1, [pc, #20]	; (8001f08 <SendToScreen+0x20>)
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <SendToScreen+0x24>)
 8001ef4:	f008 faae 	bl	800a454 <HAL_UART_Transmit>
	memset(USBTXArray,0, 150);
 8001ef8:	2296      	movs	r2, #150	; 0x96
 8001efa:	2100      	movs	r1, #0
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <SendToScreen+0x20>)
 8001efe:	f00c fe75 	bl	800ebec <memset>
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000714 	.word	0x20000714
 8001f0c:	20004200 	.word	0x20004200

08001f10 <ParseRCMessage>:
{

}

void ParseRCMessage(uint8_t *pData)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	int a = 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FATFS SDFatFS;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8001f2c:	4904      	ldr	r1, [pc, #16]	; (8001f40 <MX_FATFS_Init+0x18>)
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <MX_FATFS_Init+0x1c>)
 8001f30:	f00c fd5c 	bl	800e9ec <FATFS_LinkDriver>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <MX_FATFS_Init+0x20>)
 8001f3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000d88 	.word	0x20000d88
 8001f44:	2000000c 	.word	0x2000000c
 8001f48:	20000d8c 	.word	0x20000d8c

08001f4c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8001f50:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f60:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8001f64:	b085      	sub	sp, #20
 8001f66:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f68:	f001 fc6f 	bl	800384a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f6c:	f000 f952 	bl	8002214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f70:	f000 fd8a 	bl	8002a88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f74:	f000 fd62 	bl	8002a3c <MX_DMA_Init>
  MX_TIM4_Init();
 8001f78:	f000 fc8e 	bl	8002898 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001f7c:	f000 fb70 	bl	8002660 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001f80:	f000 fd2c 	bl	80029dc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f84:	f000 fa40 	bl	8002408 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001f88:	f7ff ffce 	bl	8001f28 <MX_FATFS_Init>
  MX_QUADSPI_Init();
 8001f8c:	f000 fa7c 	bl	8002488 <MX_QUADSPI_Init>
  MX_SDMMC1_MMC_Init();
 8001f90:	f000 fb02 	bl	8002598 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 8001f94:	f000 fb26 	bl	80025e4 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001f98:	f000 f9e4 	bl	8002364 <MX_ADC1_Init>
  MX_RTC_Init();
 8001f9c:	f000 faa0 	bl	80024e0 <MX_RTC_Init>
  MX_TIM2_Init();
 8001fa0:	f000 fc1e 	bl	80027e0 <MX_TIM2_Init>
  MX_UART5_Init();
 8001fa4:	f000 fcea 	bl	800297c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Init(&htim1);	// PWM Generation Servos
 8001fa8:	487f      	ldr	r0, [pc, #508]	; (80021a8 <main+0x24c>)
 8001faa:	f007 fa5b 	bl	8009464 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim4); 	// LED
 8001fae:	487f      	ldr	r0, [pc, #508]	; (80021ac <main+0x250>)
 8001fb0:	f007 fa58 	bl	8009464 <HAL_TIM_PWM_Init>
	HAL_ADC_Start(&hadc1);		// Battery
 8001fb4:	487e      	ldr	r0, [pc, #504]	; (80021b0 <main+0x254>)
 8001fb6:	f001 fd0b 	bl	80039d0 <HAL_ADC_Start>
//
//	MS56XXInit();

//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); 	// QSPI CS Low
//	HAL_Delay(15);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); 	// QSPI WP High
 8001fba:	2201      	movs	r2, #1
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	487d      	ldr	r0, [pc, #500]	; (80021b4 <main+0x258>)
 8001fc0:	f003 f94a 	bl	8005258 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001fc4:	200f      	movs	r0, #15
 8001fc6:	f001 fc9d 	bl	8003904 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);		// QSPI RST High
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2102      	movs	r1, #2
 8001fce:	487a      	ldr	r0, [pc, #488]	; (80021b8 <main+0x25c>)
 8001fd0:	f003 f942 	bl	8005258 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f001 fc95 	bl	8003904 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);		// QSPI RST High
 8001fda:	2201      	movs	r2, #1
 8001fdc:	2102      	movs	r1, #2
 8001fde:	4876      	ldr	r0, [pc, #472]	; (80021b8 <main+0x25c>)
 8001fe0:	f003 f93a 	bl	8005258 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001fe4:	200f      	movs	r0, #15
 8001fe6:	f001 fc8d 	bl	8003904 <HAL_Delay>

	  QSPI_Init();
 8001fea:	f7fe fc51 	bl	8000890 <QSPI_Init>

	  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8001fee:	4b73      	ldr	r3, [pc, #460]	; (80021bc <main+0x260>)
 8001ff0:	4a73      	ldr	r2, [pc, #460]	; (80021c0 <main+0x264>)
 8001ff2:	4974      	ldr	r1, [pc, #464]	; (80021c4 <main+0x268>)
 8001ff4:	4874      	ldr	r0, [pc, #464]	; (80021c8 <main+0x26c>)
 8001ff6:	f7fe fe33 	bl	8000c60 <QSPI_Read_Status_registers>
	  RR2 = 0x22;
 8001ffa:	4b71      	ldr	r3, [pc, #452]	; (80021c0 <main+0x264>)
 8001ffc:	2222      	movs	r2, #34	; 0x22
 8001ffe:	801a      	strh	r2, [r3, #0]
	  RR3 = 0x60;
 8002000:	4b6e      	ldr	r3, [pc, #440]	; (80021bc <main+0x260>)
 8002002:	2260      	movs	r2, #96	; 0x60
 8002004:	801a      	strh	r2, [r3, #0]
	  QSPI_Reset_Status_registers(&hqspi, &RR1,  &RR2, &RR3);
 8002006:	4b6d      	ldr	r3, [pc, #436]	; (80021bc <main+0x260>)
 8002008:	4a6d      	ldr	r2, [pc, #436]	; (80021c0 <main+0x264>)
 800200a:	496e      	ldr	r1, [pc, #440]	; (80021c4 <main+0x268>)
 800200c:	486e      	ldr	r0, [pc, #440]	; (80021c8 <main+0x26c>)
 800200e:	f7fe fecf 	bl	8000db0 <QSPI_Reset_Status_registers>
	  HAL_Delay(40);
 8002012:	2028      	movs	r0, #40	; 0x28
 8002014:	f001 fc76 	bl	8003904 <HAL_Delay>
	  QSPI_READMD(&MID,&DID);
 8002018:	496c      	ldr	r1, [pc, #432]	; (80021cc <main+0x270>)
 800201a:	486d      	ldr	r0, [pc, #436]	; (80021d0 <main+0x274>)
 800201c:	f7fe fda6 	bl	8000b6c <QSPI_READMD>


	  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8002020:	4b66      	ldr	r3, [pc, #408]	; (80021bc <main+0x260>)
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <main+0x264>)
 8002024:	4967      	ldr	r1, [pc, #412]	; (80021c4 <main+0x268>)
 8002026:	4868      	ldr	r0, [pc, #416]	; (80021c8 <main+0x26c>)
 8002028:	f7fe fe1a 	bl	8000c60 <QSPI_Read_Status_registers>
	do
	{
		HAL_Delay(1);
 800202c:	2001      	movs	r0, #1
 800202e:	f001 fc69 	bl	8003904 <HAL_Delay>
		FS_ret2 = f_mount(&USERFatFS, "\\", 0);
 8002032:	2200      	movs	r2, #0
 8002034:	4967      	ldr	r1, [pc, #412]	; (80021d4 <main+0x278>)
 8002036:	4868      	ldr	r0, [pc, #416]	; (80021d8 <main+0x27c>)
 8002038:	f00b fda6 	bl	800db88 <f_mount>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <main+0x280>)
 8002042:	701a      	strb	r2, [r3, #0]
	} while (FS_ret2 != FR_OK);
 8002044:	4b65      	ldr	r3, [pc, #404]	; (80021dc <main+0x280>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ef      	bne.n	800202c <main+0xd0>

	DWORD free_clusters, free_sectors, total_sectors;

	FATFS *getFreeFs;
	uint8_t buffer[_MAX_SS];
	FS_ret2 = f_getfree("\\", &free_clusters, &getFreeFs);
 800204c:	f241 0204 	movw	r2, #4100	; 0x1004
 8002050:	443a      	add	r2, r7
 8002052:	f241 0308 	movw	r3, #4104	; 0x1008
 8002056:	443b      	add	r3, r7
 8002058:	4619      	mov	r1, r3
 800205a:	485e      	ldr	r0, [pc, #376]	; (80021d4 <main+0x278>)
 800205c:	f00b ff98 	bl	800df90 <f_getfree>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <main+0x280>)
 8002066:	701a      	strb	r2, [r3, #0]
	if (FS_ret2 != FR_OK)
 8002068:	4b5c      	ldr	r3, [pc, #368]	; (80021dc <main+0x280>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d010      	beq.n	8002092 <main+0x136>
	{
		FS_ret2 = f_mkfs("\\", FM_FAT, 0, buffer, sizeof(buffer));
 8002070:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <main+0x284>)
 8002072:	f241 0218 	movw	r2, #4120	; 0x1018
 8002076:	443a      	add	r2, r7
 8002078:	4413      	add	r3, r2
 800207a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800207e:	9200      	str	r2, [sp, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	2101      	movs	r1, #1
 8002084:	4853      	ldr	r0, [pc, #332]	; (80021d4 <main+0x278>)
 8002086:	f00c f839 	bl	800e0fc <f_mkfs>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	4b53      	ldr	r3, [pc, #332]	; (80021dc <main+0x280>)
 8002090:	701a      	strb	r2, [r3, #0]
//		while (1);
	}

	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8002092:	f241 0304 	movw	r3, #4100	; 0x1004
 8002096:	443b      	add	r3, r7
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	3b02      	subs	r3, #2
 800209e:	f241 0204 	movw	r2, #4100	; 0x1004
 80020a2:	443a      	add	r2, r7
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	8952      	ldrh	r2, [r2, #10]
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	f241 0214 	movw	r2, #4116	; 0x1014
 80020b0:	443a      	add	r2, r7
 80020b2:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 80020b4:	f241 0304 	movw	r3, #4100	; 0x1004
 80020b8:	443b      	add	r3, r7
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	895b      	ldrh	r3, [r3, #10]
 80020be:	461a      	mov	r2, r3
 80020c0:	f241 0308 	movw	r3, #4104	; 0x1008
 80020c4:	443b      	add	r3, r7
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fb03 f302 	mul.w	r3, r3, r2
 80020cc:	f241 0210 	movw	r2, #4112	; 0x1010
 80020d0:	443a      	add	r2, r7
 80020d2:	6013      	str	r3, [r2, #0]

	do
	{
		HAL_Delay(1);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f001 fc15 	bl	8003904 <HAL_Delay>
		FS_ret2 = f_open(&USERFile, "Index.txt", FA_READ);
 80020da:	2201      	movs	r2, #1
 80020dc:	4941      	ldr	r1, [pc, #260]	; (80021e4 <main+0x288>)
 80020de:	4842      	ldr	r0, [pc, #264]	; (80021e8 <main+0x28c>)
 80020e0:	f00b fd98 	bl	800dc14 <f_open>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <main+0x280>)
 80020ea:	701a      	strb	r2, [r3, #0]
	} while (FS_ret2 != FR_OK);
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <main+0x280>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ef      	bne.n	80020d4 <main+0x178>

//	BNOInit();

	vBat = measureBattery();
 80020f4:	f000 fdcc 	bl	8002c90 <measureBattery>
 80020f8:	eeb0 7b40 	vmov.f64	d7, d0
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <main+0x290>)
 80020fe:	ed83 7b00 	vstr	d7, [r3]
	MS56XXInit();
 8002102:	f7ff fcc9 	bl	8001a98 <MS56XXInit>
	BNOInit();
 8002106:	f7ff fc05 	bl	8001914 <BNOInit>
  led_init();
 800210a:	f7fe ffa7 	bl	800105c <led_init>

//	readBNOAnglesDeg();
	//Read Data from terminal - Example
	HAL_UART_Receive_DMA(&huart2, USBRXArray, 1024);
 800210e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002112:	4937      	ldr	r1, [pc, #220]	; (80021f0 <main+0x294>)
 8002114:	4837      	ldr	r0, [pc, #220]	; (80021f4 <main+0x298>)
 8002116:	f008 faab 	bl	800a670 <HAL_UART_Receive_DMA>
	//Write Data to terminal - Example
	ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);
 800211a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211e:	4936      	ldr	r1, [pc, #216]	; (80021f8 <main+0x29c>)
 8002120:	4834      	ldr	r0, [pc, #208]	; (80021f4 <main+0x298>)
 8002122:	f008 fa29 	bl	800a578 <HAL_UART_Transmit_DMA>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	4b34      	ldr	r3, [pc, #208]	; (80021fc <main+0x2a0>)
 800212c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart5, UART5RXArray, 128);
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	4933      	ldr	r1, [pc, #204]	; (8002200 <main+0x2a4>)
 8002132:	4834      	ldr	r0, [pc, #208]	; (8002204 <main+0x2a8>)
 8002134:	f008 fa9c 	bl	800a670 <HAL_UART_Receive_DMA>
//		}
//		sprintf(USBTXArray, "%6.3f, Roll: %6.3f, Pitch: %6.3f, Yaw: %6.3f\r\n",
//				CurrentTime(), Roll, Pitch, Yaw);
//		SendToScreen();

MS56XXCyclicRead();
 8002138:	f7ff fe4e 	bl	8001dd8 <MS56XXCyclicRead>
//			sprintf(USBTXArray, "%6.3f, Pressure: %d, Temp: %d\r\n",
//					CurrentTime(), P, TEMP);
//			SendToScreen();
//		}

		CheckButton();
 800213c:	f7fe fa88 	bl	8000650 <CheckButton>
		readBNOMagnetometer();
 8002140:	f7ff fc14 	bl	800196c <readBNOMagnetometer>

		if (isNewMagDataAvailable)
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <main+0x2ac>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01a      	beq.n	8002182 <main+0x226>
		{
			sprintf(USBTXArray, "%6.3f, MagX: %6.3f, MagY: %6.3f, MagZ: %6.3f\r\n",
 800214c:	f000 fd88 	bl	8002c60 <CurrentTime>
 8002150:	ec59 8b10 	vmov	r8, r9, d0
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <main+0x2b0>)
 8002156:	e9d3 3400 	ldrd	r3, r4, [r3]
 800215a:	4a2c      	ldr	r2, [pc, #176]	; (800220c <main+0x2b0>)
 800215c:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8002160:	482a      	ldr	r0, [pc, #168]	; (800220c <main+0x2b0>)
 8002162:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 8002166:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800216a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800216e:	e9cd 3400 	strd	r3, r4, [sp]
 8002172:	4642      	mov	r2, r8
 8002174:	464b      	mov	r3, r9
 8002176:	4926      	ldr	r1, [pc, #152]	; (8002210 <main+0x2b4>)
 8002178:	481f      	ldr	r0, [pc, #124]	; (80021f8 <main+0x29c>)
 800217a:	f00d fb57 	bl	800f82c <siprintf>
								CurrentTime(), d_mag_xyz.x, d_mag_xyz.y, d_mag_xyz.z);
						SendToScreen();
 800217e:	f7ff feb3 	bl	8001ee8 <SendToScreen>
		}

		ParseRCMessage(UART5RXArray);
 8002182:	481f      	ldr	r0, [pc, #124]	; (8002200 <main+0x2a4>)
 8002184:	f7ff fec4 	bl	8001f10 <ParseRCMessage>
		int PWMValue = 1000 * ((2 - 1) * (double)90.0  / (145.0 - 35.0) + 0.5);
 8002188:	f240 5326 	movw	r3, #1318	; 0x526
 800218c:	f241 020c 	movw	r2, #4108	; 0x100c
 8002190:	443a      	add	r2, r7
 8002192:	6013      	str	r3, [r2, #0]
		start_pwm1(PWMValue); // Control Servo
 8002194:	f241 030c 	movw	r3, #4108	; 0x100c
 8002198:	443b      	add	r3, r7
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	f7fe fa28 	bl	80005f0 <start_pwm1>
		start_pwm2(0*80); // Control Car Motor
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7fe fa41 	bl	8000628 <start_pwm2>
	{
 80021a6:	e7c7      	b.n	8002138 <main+0x1dc>
 80021a8:	20004118 	.word	0x20004118
 80021ac:	20003e88 	.word	0x20003e88
 80021b0:	20004038 	.word	0x20004038
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40020000 	.word	0x40020000
 80021bc:	20000b26 	.word	0x20000b26
 80021c0:	20000b24 	.word	0x20000b24
 80021c4:	20000b22 	.word	0x20000b22
 80021c8:	2000429c 	.word	0x2000429c
 80021cc:	20000b29 	.word	0x20000b29
 80021d0:	20000b28 	.word	0x20000b28
 80021d4:	08012598 	.word	0x08012598
 80021d8:	20002df4 	.word	0x20002df4
 80021dc:	20004158 	.word	0x20004158
 80021e0:	ffffefec 	.word	0xffffefec
 80021e4:	0801259c 	.word	0x0801259c
 80021e8:	20000d90 	.word	0x20000d90
 80021ec:	20000b18 	.word	0x20000b18
 80021f0:	20000294 	.word	0x20000294
 80021f4:	20004200 	.word	0x20004200
 80021f8:	20000714 	.word	0x20000714
 80021fc:	20004298 	.word	0x20004298
 8002200:	20000694 	.word	0x20000694
 8002204:	20003fb0 	.word	0x20003fb0
 8002208:	20000b20 	.word	0x20000b20
 800220c:	20003f98 	.word	0x20003f98
 8002210:	080125a8 	.word	0x080125a8

08002214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b0b8      	sub	sp, #224	; 0xe0
 8002218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800221a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800221e:	2234      	movs	r2, #52	; 0x34
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f00c fce2 	bl	800ebec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002228:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	2290      	movs	r2, #144	; 0x90
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f00c fcd3 	bl	800ebec <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002246:	f004 f849 	bl	80062dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b43      	ldr	r3, [pc, #268]	; (8002358 <SystemClock_Config+0x144>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a42      	ldr	r2, [pc, #264]	; (8002358 <SystemClock_Config+0x144>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b40      	ldr	r3, [pc, #256]	; (8002358 <SystemClock_Config+0x144>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <SystemClock_Config+0x148>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a3d      	ldr	r2, [pc, #244]	; (800235c <SystemClock_Config+0x148>)
 8002268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <SystemClock_Config+0x148>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800227a:	2309      	movs	r3, #9
 800227c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002288:	2301      	movs	r3, #1
 800228a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800228e:	2302      	movs	r3, #2
 8002290:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800229c:	2319      	movs	r3, #25
 800229e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80022a2:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80022a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022aa:	2302      	movs	r3, #2
 80022ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80022b0:	2309      	movs	r3, #9
 80022b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fef6 	bl	80070ac <HAL_RCC_OscConfig>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80022c6:	f000 fd09 	bl	8002cdc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022ca:	f004 f817 	bl	80062fc <HAL_PWREx_EnableOverDrive>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80022d4:	f000 fd02 	bl	8002cdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022d8:	230f      	movs	r3, #15
 80022da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80022fe:	2107      	movs	r1, #7
 8002300:	4618      	mov	r0, r3
 8002302:	f005 f981 	bl	8007608 <HAL_RCC_ClockConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800230c:	f000 fce6 	bl	8002cdc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <SystemClock_Config+0x14c>)
 8002312:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800231a:	2300      	movs	r3, #0
 800231c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800231e:	2300      	movs	r3, #0
 8002320:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002322:	2300      	movs	r3, #0
 8002324:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002336:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	4618      	mov	r0, r3
 800233e:	f005 fb61 	bl	8007a04 <HAL_RCCEx_PeriphCLKConfig>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8002348:	f000 fcc8 	bl	8002cdc <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800234c:	f005 fa48 	bl	80077e0 <HAL_RCC_EnableCSS>
}
 8002350:	bf00      	nop
 8002352:	37e0      	adds	r7, #224	; 0xe0
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40023800 	.word	0x40023800
 800235c:	40007000 	.word	0x40007000
 8002360:	00a044b0 	.word	0x00a044b0

08002364 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800236a:	463b      	mov	r3, r7
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8002376:	4b21      	ldr	r3, [pc, #132]	; (80023fc <MX_ADC1_Init+0x98>)
 8002378:	4a21      	ldr	r2, [pc, #132]	; (8002400 <MX_ADC1_Init+0x9c>)
 800237a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800237c:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <MX_ADC1_Init+0x98>)
 800237e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002382:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <MX_ADC1_Init+0x98>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800238a:	4b1c      	ldr	r3, [pc, #112]	; (80023fc <MX_ADC1_Init+0x98>)
 800238c:	2201      	movs	r2, #1
 800238e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <MX_ADC1_Init+0x98>)
 8002392:	2201      	movs	r2, #1
 8002394:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <MX_ADC1_Init+0x98>)
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <MX_ADC1_Init+0x98>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a4:	4b15      	ldr	r3, [pc, #84]	; (80023fc <MX_ADC1_Init+0x98>)
 80023a6:	4a17      	ldr	r2, [pc, #92]	; (8002404 <MX_ADC1_Init+0xa0>)
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <MX_ADC1_Init+0x98>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <MX_ADC1_Init+0x98>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_ADC1_Init+0x98>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <MX_ADC1_Init+0x98>)
 80023c0:	2201      	movs	r2, #1
 80023c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023c4:	480d      	ldr	r0, [pc, #52]	; (80023fc <MX_ADC1_Init+0x98>)
 80023c6:	f001 fabf 	bl	8003948 <HAL_ADC_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80023d0:	f000 fc84 	bl	8002cdc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80023d4:	230d      	movs	r3, #13
 80023d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80023d8:	2301      	movs	r3, #1
 80023da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	4619      	mov	r1, r3
 80023e4:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_ADC1_Init+0x98>)
 80023e6:	f001 fd1f 	bl	8003e28 <HAL_ADC_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023f0:	f000 fc74 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	20004038 	.word	0x20004038
 8002400:	40012000 	.word	0x40012000
 8002404:	0f000001 	.word	0x0f000001

08002408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <MX_I2C1_Init+0x74>)
 800240e:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <MX_I2C1_Init+0x78>)
 8002410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <MX_I2C1_Init+0x74>)
 8002414:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <MX_I2C1_Init+0x7c>)
 8002416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <MX_I2C1_Init+0x74>)
 800241a:	2252      	movs	r2, #82	; 0x52
 800241c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <MX_I2C1_Init+0x74>)
 8002420:	2201      	movs	r2, #1
 8002422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <MX_I2C1_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <MX_I2C1_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <MX_I2C1_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_I2C1_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MX_I2C1_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002442:	480e      	ldr	r0, [pc, #56]	; (800247c <MX_I2C1_Init+0x74>)
 8002444:	f002 ff22 	bl	800528c <HAL_I2C_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800244e:	f000 fc45 	bl	8002cdc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002452:	2100      	movs	r1, #0
 8002454:	4809      	ldr	r0, [pc, #36]	; (800247c <MX_I2C1_Init+0x74>)
 8002456:	f003 fb8d 	bl	8005b74 <HAL_I2CEx_ConfigAnalogFilter>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002460:	f000 fc3c 	bl	8002cdc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002464:	2100      	movs	r1, #0
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <MX_I2C1_Init+0x74>)
 8002468:	f003 fbcf 	bl	8005c0a <HAL_I2CEx_ConfigDigitalFilter>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002472:	f000 fc33 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20003ec8 	.word	0x20003ec8
 8002480:	40005400 	.word	0x40005400
 8002484:	6000030d 	.word	0x6000030d

08002488 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <MX_QUADSPI_Init+0x54>)
 8002490:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 800249a:	2220      	movs	r2, #32
 800249c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 80024a0:	2210      	movs	r2, #16
 80024a2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 80024a6:	2217      	movs	r2, #23
 80024a8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80024b6:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 80024b8:	2280      	movs	r2, #128	; 0x80
 80024ba:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 80024be:	2200      	movs	r2, #0
 80024c0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <MX_QUADSPI_Init+0x50>)
 80024c4:	f003 ff6a 	bl	800639c <HAL_QSPI_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80024ce:	f000 fc05 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000429c 	.word	0x2000429c
 80024dc:	a0001000 	.word	0xa0001000

080024e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	611a      	str	r2, [r3, #16]
 80024f6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80024f8:	2300      	movs	r3, #0
 80024fa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <MX_RTC_Init+0xb0>)
 80024fe:	4a25      	ldr	r2, [pc, #148]	; (8002594 <MX_RTC_Init+0xb4>)
 8002500:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <MX_RTC_Init+0xb0>)
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <MX_RTC_Init+0xb0>)
 800250a:	227f      	movs	r2, #127	; 0x7f
 800250c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <MX_RTC_Init+0xb0>)
 8002510:	22ff      	movs	r2, #255	; 0xff
 8002512:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002514:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <MX_RTC_Init+0xb0>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <MX_RTC_Init+0xb0>)
 800251c:	2200      	movs	r2, #0
 800251e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <MX_RTC_Init+0xb0>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002526:	481a      	ldr	r0, [pc, #104]	; (8002590 <MX_RTC_Init+0xb0>)
 8002528:	f005 fe92 	bl	8008250 <HAL_RTC_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002532:	f000 fbd3 	bl	8002cdc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800254a:	f107 0308 	add.w	r3, r7, #8
 800254e:	2200      	movs	r2, #0
 8002550:	4619      	mov	r1, r3
 8002552:	480f      	ldr	r0, [pc, #60]	; (8002590 <MX_RTC_Init+0xb0>)
 8002554:	f005 fef8 	bl	8008348 <HAL_RTC_SetTime>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800255e:	f000 fbbd 	bl	8002cdc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002562:	2301      	movs	r3, #1
 8002564:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8002566:	2301      	movs	r3, #1
 8002568:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 800256a:	2301      	movs	r3, #1
 800256c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002572:	1d3b      	adds	r3, r7, #4
 8002574:	2200      	movs	r2, #0
 8002576:	4619      	mov	r1, r3
 8002578:	4805      	ldr	r0, [pc, #20]	; (8002590 <MX_RTC_Init+0xb0>)
 800257a:	f005 ffa3 	bl	80084c4 <HAL_RTC_SetDate>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002584:	f000 fbaa 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	3720      	adds	r7, #32
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	200040e0 	.word	0x200040e0
 8002594:	40002800 	.word	0x40002800

08002598 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_SDMMC1_MMC_Init+0x44>)
 800259e:	4a10      	ldr	r2, [pc, #64]	; (80025e0 <MX_SDMMC1_MMC_Init+0x48>)
 80025a0:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_SDMMC1_MMC_Init+0x44>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_SDMMC1_MMC_Init+0x44>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_SDMMC1_MMC_Init+0x44>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	60da      	str	r2, [r3, #12]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_SDMMC1_MMC_Init+0x44>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	611a      	str	r2, [r3, #16]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_SDMMC1_MMC_Init+0x44>)
 80025bc:	2200      	movs	r2, #0
 80025be:	615a      	str	r2, [r3, #20]
  hmmc1.Init.ClockDiv = 0;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_SDMMC1_MMC_Init+0x44>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_SDMMC1_MMC_Init+0x44>)
 80025c8:	f003 fb6b 	bl	8005ca2 <HAL_MMC_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_SDMMC1_MMC_Init+0x3e>
  {
    Error_Handler();
 80025d2:	f000 fb83 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20003f14 	.word	0x20003f14
 80025e0:	40012c00 	.word	0x40012c00

080025e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <MX_SPI1_Init+0x74>)
 80025ea:	4a1c      	ldr	r2, [pc, #112]	; (800265c <MX_SPI1_Init+0x78>)
 80025ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <MX_SPI1_Init+0x74>)
 80025f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <MX_SPI1_Init+0x74>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <MX_SPI1_Init+0x74>)
 80025fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002602:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <MX_SPI1_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800260a:	4b13      	ldr	r3, [pc, #76]	; (8002658 <MX_SPI1_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <MX_SPI1_Init+0x74>)
 8002612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002616:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <MX_SPI1_Init+0x74>)
 800261a:	2220      	movs	r2, #32
 800261c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <MX_SPI1_Init+0x74>)
 8002620:	2200      	movs	r2, #0
 8002622:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <MX_SPI1_Init+0x74>)
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <MX_SPI1_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <MX_SPI1_Init+0x74>)
 8002632:	2207      	movs	r2, #7
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <MX_SPI1_Init+0x74>)
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <MX_SPI1_Init+0x74>)
 800263e:	2208      	movs	r2, #8
 8002640:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002642:	4805      	ldr	r0, [pc, #20]	; (8002658 <MX_SPI1_Init+0x74>)
 8002644:	f006 f858 	bl	80086f8 <HAL_SPI_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800264e:	f000 fb45 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000415c 	.word	0x2000415c
 800265c:	40013000 	.word	0x40013000

08002660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b09a      	sub	sp, #104	; 0x68
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002666:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002672:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]
 8002690:	615a      	str	r2, [r3, #20]
 8002692:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002694:	1d3b      	adds	r3, r7, #4
 8002696:	222c      	movs	r2, #44	; 0x2c
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f00c faa6 	bl	800ebec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026a0:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026a2:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <MX_TIM1_Init+0x17c>)
 80026a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 80026a6:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026a8:	f240 221b 	movw	r2, #539	; 0x21b
 80026ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 80026b4:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80026ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026c2:	4b45      	ldr	r3, [pc, #276]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026c8:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80026ce:	4842      	ldr	r0, [pc, #264]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026d0:	f006 ff38 	bl	8009544 <HAL_TIM_IC_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80026da:	f000 faff 	bl	8002cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026de:	483e      	ldr	r0, [pc, #248]	; (80027d8 <MX_TIM1_Init+0x178>)
 80026e0:	f006 fec0 	bl	8009464 <HAL_TIM_PWM_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80026ea:	f000 faf7 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026ee:	2320      	movs	r3, #32
 80026f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80026f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026f6:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002700:	4619      	mov	r1, r3
 8002702:	4835      	ldr	r0, [pc, #212]	; (80027d8 <MX_TIM1_Init+0x178>)
 8002704:	f007 fd4c 	bl	800a1a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800270e:	f000 fae5 	bl	8002cdc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002712:	2300      	movs	r3, #0
 8002714:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002716:	2301      	movs	r3, #1
 8002718:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800271a:	2300      	movs	r3, #0
 800271c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002726:	2200      	movs	r2, #0
 8002728:	4619      	mov	r1, r3
 800272a:	482b      	ldr	r0, [pc, #172]	; (80027d8 <MX_TIM1_Init+0x178>)
 800272c:	f006 ff35 	bl	800959a <HAL_TIM_IC_ConfigChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8002736:	f000 fad1 	bl	8002cdc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800273a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800273e:	2208      	movs	r2, #8
 8002740:	4619      	mov	r1, r3
 8002742:	4825      	ldr	r0, [pc, #148]	; (80027d8 <MX_TIM1_Init+0x178>)
 8002744:	f006 ff29 	bl	800959a <HAL_TIM_IC_ConfigChannel>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800274e:	f000 fac5 	bl	8002cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002752:	2360      	movs	r3, #96	; 0x60
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 600;
 8002756:	f44f 7316 	mov.w	r3, #600	; 0x258
 800275a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800275c:	2300      	movs	r3, #0
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002764:	2300      	movs	r3, #0
 8002766:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002768:	2300      	movs	r3, #0
 800276a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800276c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002770:	220c      	movs	r2, #12
 8002772:	4619      	mov	r1, r3
 8002774:	4818      	ldr	r0, [pc, #96]	; (80027d8 <MX_TIM1_Init+0x178>)
 8002776:	f006 ffad 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8002780:	f000 faac 	bl	8002cdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800279c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	4619      	mov	r1, r3
 80027b8:	4807      	ldr	r0, [pc, #28]	; (80027d8 <MX_TIM1_Init+0x178>)
 80027ba:	f007 fd7f 	bl	800a2bc <HAL_TIMEx_ConfigBreakDeadTime>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 80027c4:	f000 fa8a 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <MX_TIM1_Init+0x178>)
 80027ca:	f000 fd0d 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 80027ce:	bf00      	nop
 80027d0:	3768      	adds	r7, #104	; 0x68
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20004118 	.word	0x20004118
 80027dc:	40010000 	.word	0x40010000

080027e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f2:	463b      	mov	r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <MX_TIM2_Init+0xb4>)
 8002806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800280a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 539;
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <MX_TIM2_Init+0xb4>)
 800280e:	f240 221b 	movw	r2, #539	; 0x21b
 8002812:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002814:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <MX_TIM2_Init+0xb4>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <MX_TIM2_Init+0xb4>)
 800281c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002820:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002822:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <MX_TIM2_Init+0xb4>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002828:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <MX_TIM2_Init+0xb4>)
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800282e:	4819      	ldr	r0, [pc, #100]	; (8002894 <MX_TIM2_Init+0xb4>)
 8002830:	f006 fe18 	bl	8009464 <HAL_TIM_PWM_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800283a:	f000 fa4f 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4811      	ldr	r0, [pc, #68]	; (8002894 <MX_TIM2_Init+0xb4>)
 800284e:	f007 fca7 	bl	800a1a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8002858:	f000 fa40 	bl	8002cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800285c:	2360      	movs	r3, #96	; 0x60
 800285e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 600;
 8002860:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002864:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800286e:	463b      	mov	r3, r7
 8002870:	2200      	movs	r2, #0
 8002872:	4619      	mov	r1, r3
 8002874:	4807      	ldr	r0, [pc, #28]	; (8002894 <MX_TIM2_Init+0xb4>)
 8002876:	f006 ff2d 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8002880:	f000 fa2c 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002884:	4803      	ldr	r0, [pc, #12]	; (8002894 <MX_TIM2_Init+0xb4>)
 8002886:	f000 fcaf 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	; 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200041c0 	.word	0x200041c0

08002898 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	; 0x28
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028aa:	463b      	mov	r3, r7
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
 80028b8:	615a      	str	r2, [r3, #20]
 80028ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <MX_TIM4_Init+0xdc>)
 80028be:	4a2e      	ldr	r2, [pc, #184]	; (8002978 <MX_TIM4_Init+0xe0>)
 80028c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <MX_TIM4_Init+0xdc>)
 80028c4:	f240 221b 	movw	r2, #539	; 0x21b
 80028c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <MX_TIM4_Init+0xdc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <MX_TIM4_Init+0xdc>)
 80028d2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80028d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d8:	4b26      	ldr	r3, [pc, #152]	; (8002974 <MX_TIM4_Init+0xdc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028de:	4b25      	ldr	r3, [pc, #148]	; (8002974 <MX_TIM4_Init+0xdc>)
 80028e0:	2280      	movs	r2, #128	; 0x80
 80028e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80028e4:	4823      	ldr	r0, [pc, #140]	; (8002974 <MX_TIM4_Init+0xdc>)
 80028e6:	f006 fdbd 	bl	8009464 <HAL_TIM_PWM_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80028f0:	f000 f9f4 	bl	8002cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	481c      	ldr	r0, [pc, #112]	; (8002974 <MX_TIM4_Init+0xdc>)
 8002904:	f007 fc4c 	bl	800a1a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800290e:	f000 f9e5 	bl	8002cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002912:	2360      	movs	r3, #96	; 0x60
 8002914:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002922:	463b      	mov	r3, r7
 8002924:	2200      	movs	r2, #0
 8002926:	4619      	mov	r1, r3
 8002928:	4812      	ldr	r0, [pc, #72]	; (8002974 <MX_TIM4_Init+0xdc>)
 800292a:	f006 fed3 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002934:	f000 f9d2 	bl	8002cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002938:	463b      	mov	r3, r7
 800293a:	2204      	movs	r2, #4
 800293c:	4619      	mov	r1, r3
 800293e:	480d      	ldr	r0, [pc, #52]	; (8002974 <MX_TIM4_Init+0xdc>)
 8002940:	f006 fec8 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800294a:	f000 f9c7 	bl	8002cdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800294e:	463b      	mov	r3, r7
 8002950:	220c      	movs	r2, #12
 8002952:	4619      	mov	r1, r3
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <MX_TIM4_Init+0xdc>)
 8002956:	f006 febd 	bl	80096d4 <HAL_TIM_PWM_ConfigChannel>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8002960:	f000 f9bc 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002964:	4803      	ldr	r0, [pc, #12]	; (8002974 <MX_TIM4_Init+0xdc>)
 8002966:	f000 fc3f 	bl	80031e8 <HAL_TIM_MspPostInit>

}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	; 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20003e88 	.word	0x20003e88
 8002978:	40000800 	.word	0x40000800

0800297c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <MX_UART5_Init+0x58>)
 8002982:	4a15      	ldr	r2, [pc, #84]	; (80029d8 <MX_UART5_Init+0x5c>)
 8002984:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <MX_UART5_Init+0x58>)
 8002988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800298c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_UART5_Init+0x58>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MX_UART5_Init+0x58>)
 8002996:	2200      	movs	r2, #0
 8002998:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MX_UART5_Init+0x58>)
 800299c:	2200      	movs	r2, #0
 800299e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <MX_UART5_Init+0x58>)
 80029a2:	220c      	movs	r2, #12
 80029a4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <MX_UART5_Init+0x58>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_UART5_Init+0x58>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MX_UART5_Init+0x58>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_UART5_Init+0x58>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_UART5_Init+0x58>)
 80029c0:	f007 fcfa 	bl	800a3b8 <HAL_UART_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80029ca:	f000 f987 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20003fb0 	.word	0x20003fb0
 80029d8:	40005000 	.word	0x40005000

080029dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029e0:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029e2:	4a15      	ldr	r2, [pc, #84]	; (8002a38 <MX_USART2_UART_Init+0x5c>)
 80029e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029e8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80029ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029f4:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a00:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a02:	220c      	movs	r2, #12
 8002a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0c:	4b09      	ldr	r3, [pc, #36]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a1e:	4805      	ldr	r0, [pc, #20]	; (8002a34 <MX_USART2_UART_Init+0x58>)
 8002a20:	f007 fcca 	bl	800a3b8 <HAL_UART_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a2a:	f000 f957 	bl	8002cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20004200 	.word	0x20004200
 8002a38:	40004400 	.word	0x40004400

08002a3c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <MX_DMA_Init+0x48>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <MX_DMA_Init+0x48>)
 8002a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <MX_DMA_Init+0x48>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2010      	movs	r0, #16
 8002a60:	f001 fd0b 	bl	800447a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002a64:	2010      	movs	r0, #16
 8002a66:	f001 fd24 	bl	80044b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2011      	movs	r0, #17
 8002a70:	f001 fd03 	bl	800447a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a74:	2011      	movs	r0, #17
 8002a76:	f001 fd1c 	bl	80044b2 <HAL_NVIC_EnableIRQ>

}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800

08002a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8e:	f107 031c 	add.w	r3, r7, #28
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a9e:	4b69      	ldr	r3, [pc, #420]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a68      	ldr	r2, [pc, #416]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002aa4:	f043 0310 	orr.w	r3, r3, #16
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a62      	ldr	r2, [pc, #392]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b60      	ldr	r3, [pc, #384]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ace:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a5c      	ldr	r2, [pc, #368]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae6:	4b57      	ldr	r3, [pc, #348]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a56      	ldr	r2, [pc, #344]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a50      	ldr	r2, [pc, #320]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b4e      	ldr	r3, [pc, #312]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b16:	4b4b      	ldr	r3, [pc, #300]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a4a      	ldr	r2, [pc, #296]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002b1c:	f043 0308 	orr.w	r3, r3, #8
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <MX_GPIO_Init+0x1bc>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_WP_GPIO_Port, Flash_WP_Pin, GPIO_PIN_SET);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2104      	movs	r1, #4
 8002b32:	4845      	ldr	r0, [pc, #276]	; (8002c48 <MX_GPIO_Init+0x1c0>)
 8002b34:	f002 fb90 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_Reset_GPIO_Port, Flash_Reset_Pin, GPIO_PIN_SET);
 8002b38:	2201      	movs	r2, #1
 8002b3a:	2102      	movs	r1, #2
 8002b3c:	4843      	ldr	r0, [pc, #268]	; (8002c4c <MX_GPIO_Init+0x1c4>)
 8002b3e:	f002 fb8b 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5611_CS_GPIO_Port, MS5611_CS_Pin, GPIO_PIN_RESET);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2110      	movs	r1, #16
 8002b46:	4841      	ldr	r0, [pc, #260]	; (8002c4c <MX_GPIO_Init+0x1c4>)
 8002b48:	f002 fb86 	bl	8005258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Flash_WP_Pin */
  GPIO_InitStruct.Pin = Flash_WP_Pin;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_WP_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	4619      	mov	r1, r3
 8002b62:	4839      	ldr	r0, [pc, #228]	; (8002c48 <MX_GPIO_Init+0x1c0>)
 8002b64:	f002 f9b6 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6 
                           PE9 PE10 PE11 PE12 
                           PE13 PE14 PE15 PE0 
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8002b68:	f64f 637b 	movw	r3, #65147	; 0xfe7b
 8002b6c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b76:	f107 031c 	add.w	r3, r7, #28
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4832      	ldr	r0, [pc, #200]	; (8002c48 <MX_GPIO_Init+0x1c0>)
 8002b7e:	f002 f9a9 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2 
                           PC4 PC5 PC6 PC7 
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 8002b82:	f242 63f7 	movw	r3, #9975	; 0x26f7
 8002b86:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b90:	f107 031c 	add.w	r3, r7, #28
 8002b94:	4619      	mov	r1, r3
 8002b96:	482e      	ldr	r0, [pc, #184]	; (8002c50 <MX_GPIO_Init+0x1c8>)
 8002b98:	f002 f99c 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 031c 	add.w	r3, r7, #28
 8002bac:	4619      	mov	r1, r3
 8002bae:	4827      	ldr	r0, [pc, #156]	; (8002c4c <MX_GPIO_Init+0x1c4>)
 8002bb0:	f002 f990 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_Reset_Pin */
  GPIO_InitStruct.Pin = Flash_Reset_Pin;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_Reset_GPIO_Port, &GPIO_InitStruct);
 8002bc4:	f107 031c 	add.w	r3, r7, #28
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4820      	ldr	r0, [pc, #128]	; (8002c4c <MX_GPIO_Init+0x1c4>)
 8002bcc:	f002 f982 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MS5611_CS_Pin */
  GPIO_InitStruct.Pin = MS5611_CS_Pin;
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MS5611_CS_GPIO_Port, &GPIO_InitStruct);
 8002be0:	f107 031c 	add.w	r3, r7, #28
 8002be4:	4619      	mov	r1, r3
 8002be6:	4819      	ldr	r0, [pc, #100]	; (8002c4c <MX_GPIO_Init+0x1c4>)
 8002be8:	f002 f974 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_12 
 8002bec:	f249 23c0 	movw	r3, #37568	; 0x92c0
 8002bf0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 031c 	add.w	r3, r7, #28
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4812      	ldr	r0, [pc, #72]	; (8002c4c <MX_GPIO_Init+0x1c4>)
 8002c02:	f002 f967 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8002c06:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8002c0a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480e      	ldr	r0, [pc, #56]	; (8002c54 <MX_GPIO_Init+0x1cc>)
 8002c1c:	f002 f95a 	bl	8004ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD0 PD1 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002c20:	f644 73fb 	movw	r3, #20475	; 0x4ffb
 8002c24:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c26:	2303      	movs	r3, #3
 8002c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c2e:	f107 031c 	add.w	r3, r7, #28
 8002c32:	4619      	mov	r1, r3
 8002c34:	4808      	ldr	r0, [pc, #32]	; (8002c58 <MX_GPIO_Init+0x1d0>)
 8002c36:	f002 f94d 	bl	8004ed4 <HAL_GPIO_Init>

}
 8002c3a:	bf00      	nop
 8002c3c:	3730      	adds	r7, #48	; 0x30
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40020000 	.word	0x40020000
 8002c50:	40020800 	.word	0x40020800
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020c00 	.word	0x40020c00
 8002c5c:	00000000 	.word	0x00000000

08002c60 <CurrentTime>:

/* USER CODE BEGIN 4 */
double CurrentTime(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
	return HAL_GetTick() / 1000.0;
 8002c64:	f000 fe42 	bl	80038ec <HAL_GetTick>
 8002c68:	ee07 0a90 	vmov	s15, r0
 8002c6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002c70:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8002c88 <CurrentTime+0x28>
 8002c74:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002c78:	eeb0 7b45 	vmov.f64	d7, d5
}
 8002c7c:	eeb0 0b47 	vmov.f64	d0, d7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	f3af 8000 	nop.w
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	408f4000 	.word	0x408f4000

08002c90 <measureBattery>:

double measureBattery()
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
	uint32_t D = HAL_ADC_GetValue(&hadc1);
 8002c96:	4810      	ldr	r0, [pc, #64]	; (8002cd8 <measureBattery+0x48>)
 8002c98:	f001 f89b 	bl	8003dd2 <HAL_ADC_GetValue>
 8002c9c:	6078      	str	r0, [r7, #4]
	return 2 * 3.3 * D / 4096.0;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002ca8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8002cc8 <measureBattery+0x38>
 8002cac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002cb0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8002cd0 <measureBattery+0x40>
 8002cb4:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002cb8:	eeb0 7b45 	vmov.f64	d7, d5
}
 8002cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	66666666 	.word	0x66666666
 8002ccc:	401a6666 	.word	0x401a6666
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	40b00000 	.word	0x40b00000
 8002cd8:	20004038 	.word	0x20004038

08002cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_MspInit+0x50>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <HAL_MspInit+0x50>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <HAL_MspInit+0x50>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <HAL_MspInit+0x50>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <HAL_MspInit+0x50>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	; 0x44
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_MspInit+0x50>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	2004      	movs	r0, #4
 8002d28:	f001 fba7 	bl	800447a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8002d2c:	2004      	movs	r0, #4
 8002d2e:	f001 fbc0 	bl	80044b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800

08002d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <HAL_ADC_MspInit+0x84>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d12b      	bne.n	8002dba <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_ADC_MspInit+0x88>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	4a18      	ldr	r2, [pc, #96]	; (8002dc8 <HAL_ADC_MspInit+0x88>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_ADC_MspInit+0x88>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_ADC_MspInit+0x88>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_ADC_MspInit+0x88>)
 8002d80:	f043 0304 	orr.w	r3, r3, #4
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <HAL_ADC_MspInit+0x88>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d92:	2308      	movs	r3, #8
 8002d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d96:	2303      	movs	r3, #3
 8002d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	4619      	mov	r1, r3
 8002da4:	4809      	ldr	r0, [pc, #36]	; (8002dcc <HAL_ADC_MspInit+0x8c>)
 8002da6:	f002 f895 	bl	8004ed4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2012      	movs	r0, #18
 8002db0:	f001 fb63 	bl	800447a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002db4:	2012      	movs	r0, #18
 8002db6:	f001 fb7c 	bl	80044b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	; 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40012000 	.word	0x40012000
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020800 	.word	0x40020800

08002dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <HAL_I2C_MspInit+0x8c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d12f      	bne.n	8002e52 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_I2C_MspInit+0x90>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_I2C_MspInit+0x90>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_I2C_MspInit+0x90>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e0a:	23c0      	movs	r3, #192	; 0xc0
 8002e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e0e:	2312      	movs	r3, #18
 8002e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e16:	2303      	movs	r3, #3
 8002e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e1a:	2304      	movs	r3, #4
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1e:	f107 0314 	add.w	r3, r7, #20
 8002e22:	4619      	mov	r1, r3
 8002e24:	480f      	ldr	r0, [pc, #60]	; (8002e64 <HAL_I2C_MspInit+0x94>)
 8002e26:	f002 f855 	bl	8004ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_I2C_MspInit+0x90>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <HAL_I2C_MspInit+0x90>)
 8002e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_I2C_MspInit+0x90>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	201f      	movs	r0, #31
 8002e48:	f001 fb17 	bl	800447a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e4c:	201f      	movs	r0, #31
 8002e4e:	f001 fb30 	bl	80044b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e52:	bf00      	nop
 8002e54:	3728      	adds	r7, #40	; 0x28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40005400 	.word	0x40005400
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020400 	.word	0x40020400

08002e68 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08c      	sub	sp, #48	; 0x30
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 031c 	add.w	r3, r7, #28
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a38      	ldr	r2, [pc, #224]	; (8002f68 <HAL_QSPI_MspInit+0x100>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d169      	bne.n	8002f5e <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002e8a:	4b38      	ldr	r3, [pc, #224]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	4a37      	ldr	r2, [pc, #220]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	6393      	str	r3, [r2, #56]	; 0x38
 8002e96:	4b35      	ldr	r3, [pc, #212]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a31      	ldr	r2, [pc, #196]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eba:	4b2c      	ldr	r3, [pc, #176]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a2b      	ldr	r2, [pc, #172]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002ec0:	f043 0310 	orr.w	r3, r3, #16
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a25      	ldr	r2, [pc, #148]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <HAL_QSPI_MspInit+0x104>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PE7     ------> QUADSPI_BK2_IO0
    PE8     ------> QUADSPI_BK2_IO1
    PC11     ------> QUADSPI_BK2_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002eea:	2304      	movs	r3, #4
 8002eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002efa:	2309      	movs	r3, #9
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f107 031c 	add.w	r3, r7, #28
 8002f02:	4619      	mov	r1, r3
 8002f04:	481a      	ldr	r0, [pc, #104]	; (8002f70 <HAL_QSPI_MspInit+0x108>)
 8002f06:	f001 ffe5 	bl	8004ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002f0a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002f1c:	230a      	movs	r3, #10
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	4619      	mov	r1, r3
 8002f26:	4813      	ldr	r0, [pc, #76]	; (8002f74 <HAL_QSPI_MspInit+0x10c>)
 8002f28:	f001 ffd4 	bl	8004ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f3e:	2309      	movs	r3, #9
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	4619      	mov	r1, r3
 8002f48:	480b      	ldr	r0, [pc, #44]	; (8002f78 <HAL_QSPI_MspInit+0x110>)
 8002f4a:	f001 ffc3 	bl	8004ed4 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	205c      	movs	r0, #92	; 0x5c
 8002f54:	f001 fa91 	bl	800447a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002f58:	205c      	movs	r0, #92	; 0x5c
 8002f5a:	f001 faaa 	bl	80044b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002f5e:	bf00      	nop
 8002f60:	3730      	adds	r7, #48	; 0x30
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	a0001000 	.word	0xa0001000
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40020800 	.word	0x40020800

08002f7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a07      	ldr	r2, [pc, #28]	; (8002fa8 <HAL_RTC_MspInit+0x2c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d105      	bne.n	8002f9a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <HAL_RTC_MspInit+0x30>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a06      	ldr	r2, [pc, #24]	; (8002fac <HAL_RTC_MspInit+0x30>)
 8002f94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	40002800 	.word	0x40002800
 8002fac:	40023800 	.word	0x40023800

08002fb0 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <HAL_MMC_MspInit+0xb4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d144      	bne.n	800305c <HAL_MMC_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8002fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8002ff0:	f043 0304 	orr.w	r3, r3, #4
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_MMC_MspInit+0xb8>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800301a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800301e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003028:	2303      	movs	r3, #3
 800302a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800302c:	230c      	movs	r3, #12
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	4619      	mov	r1, r3
 8003036:	480d      	ldr	r0, [pc, #52]	; (800306c <HAL_MMC_MspInit+0xbc>)
 8003038:	f001 ff4c 	bl	8004ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800303c:	2304      	movs	r3, #4
 800303e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003048:	2303      	movs	r3, #3
 800304a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800304c:	230c      	movs	r3, #12
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	4806      	ldr	r0, [pc, #24]	; (8003070 <HAL_MMC_MspInit+0xc0>)
 8003058:	f001 ff3c 	bl	8004ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800305c:	bf00      	nop
 800305e:	3728      	adds	r7, #40	; 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40023800 	.word	0x40023800
 800306c:	40020800 	.word	0x40020800
 8003070:	40020c00 	.word	0x40020c00

08003074 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <HAL_SPI_MspInit+0x7c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d127      	bne.n	80030e6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003096:	4b17      	ldr	r3, [pc, #92]	; (80030f4 <HAL_SPI_MspInit+0x80>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a16      	ldr	r2, [pc, #88]	; (80030f4 <HAL_SPI_MspInit+0x80>)
 800309c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_SPI_MspInit+0x80>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ae:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_SPI_MspInit+0x80>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <HAL_SPI_MspInit+0x80>)
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_SPI_MspInit+0x80>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80030c6:	2338      	movs	r3, #56	; 0x38
 80030c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d2:	2303      	movs	r3, #3
 80030d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030d6:	2305      	movs	r3, #5
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <HAL_SPI_MspInit+0x84>)
 80030e2:	f001 fef7 	bl	8004ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40013000 	.word	0x40013000
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020400 	.word	0x40020400

080030fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08a      	sub	sp, #40	; 0x28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	f107 0314 	add.w	r3, r7, #20
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_TIM_IC_MspInit+0x7c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d128      	bne.n	8003170 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <HAL_TIM_IC_MspInit+0x80>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	4a16      	ldr	r2, [pc, #88]	; (800317c <HAL_TIM_IC_MspInit+0x80>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6453      	str	r3, [r2, #68]	; 0x44
 800312a:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_TIM_IC_MspInit+0x80>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_TIM_IC_MspInit+0x80>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_TIM_IC_MspInit+0x80>)
 800313c:	f043 0301 	orr.w	r3, r3, #1
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_TIM_IC_MspInit+0x80>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 800314e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003160:	2301      	movs	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4619      	mov	r1, r3
 800316a:	4805      	ldr	r0, [pc, #20]	; (8003180 <HAL_TIM_IC_MspInit+0x84>)
 800316c:	f001 feb2 	bl	8004ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003170:	bf00      	nop
 8003172:	3728      	adds	r7, #40	; 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40010000 	.word	0x40010000
 800317c:	40023800 	.word	0x40023800
 8003180:	40020000 	.word	0x40020000

08003184 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003194:	d10c      	bne.n	80031b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_TIM_PWM_MspInit+0x5c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a11      	ldr	r2, [pc, #68]	; (80031e0 <HAL_TIM_PWM_MspInit+0x5c>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b0f      	ldr	r3, [pc, #60]	; (80031e0 <HAL_TIM_PWM_MspInit+0x5c>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031ae:	e010      	b.n	80031d2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a0b      	ldr	r2, [pc, #44]	; (80031e4 <HAL_TIM_PWM_MspInit+0x60>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10b      	bne.n	80031d2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <HAL_TIM_PWM_MspInit+0x5c>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_TIM_PWM_MspInit+0x5c>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_TIM_PWM_MspInit+0x5c>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40000800 	.word	0x40000800

080031e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a34      	ldr	r2, [pc, #208]	; (80032d8 <HAL_TIM_MspPostInit+0xf0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d11d      	bne.n	8003246 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320a:	4b34      	ldr	r3, [pc, #208]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a33      	ldr	r2, [pc, #204]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b31      	ldr	r3, [pc, #196]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM2_J1_P4_Pin;
 8003222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003230:	2300      	movs	r3, #0
 8003232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003234:	2301      	movs	r3, #1
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM2_J1_P4_GPIO_Port, &GPIO_InitStruct);
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	4619      	mov	r1, r3
 800323e:	4828      	ldr	r0, [pc, #160]	; (80032e0 <HAL_TIM_MspPostInit+0xf8>)
 8003240:	f001 fe48 	bl	8004ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003244:	e043      	b.n	80032ce <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324e:	d11c      	bne.n	800328a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003250:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6313      	str	r3, [r2, #48]	; 0x30
 800325c:	4b1f      	ldr	r3, [pc, #124]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_J1_P1_Pin;
 8003268:	2320      	movs	r3, #32
 800326a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326c:	2302      	movs	r3, #2
 800326e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003270:	2300      	movs	r3, #0
 8003272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003274:	2300      	movs	r3, #0
 8003276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003278:	2301      	movs	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_J1_P1_GPIO_Port, &GPIO_InitStruct);
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	4619      	mov	r1, r3
 8003282:	4817      	ldr	r0, [pc, #92]	; (80032e0 <HAL_TIM_MspPostInit+0xf8>)
 8003284:	f001 fe26 	bl	8004ed4 <HAL_GPIO_Init>
}
 8003288:	e021      	b.n	80032ce <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <HAL_TIM_MspPostInit+0xfc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d11c      	bne.n	80032ce <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003294:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a10      	ldr	r2, [pc, #64]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 800329a:	f043 0308 	orr.w	r3, r3, #8
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <HAL_TIM_MspPostInit+0xf4>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 80032ac:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80032b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032be:	2302      	movs	r3, #2
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032c2:	f107 0314 	add.w	r3, r7, #20
 80032c6:	4619      	mov	r1, r3
 80032c8:	4807      	ldr	r0, [pc, #28]	; (80032e8 <HAL_TIM_MspPostInit+0x100>)
 80032ca:	f001 fe03 	bl	8004ed4 <HAL_GPIO_Init>
}
 80032ce:	bf00      	nop
 80032d0:	3728      	adds	r7, #40	; 0x28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40020c00 	.word	0x40020c00

080032ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 031c 	add.w	r3, r7, #28
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a69      	ldr	r2, [pc, #420]	; (80034b0 <HAL_UART_MspInit+0x1c4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d131      	bne.n	8003372 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800330e:	4b69      	ldr	r3, [pc, #420]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a68      	ldr	r2, [pc, #416]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 8003314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b66      	ldr	r3, [pc, #408]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003322:	61bb      	str	r3, [r7, #24]
 8003324:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	4a62      	ldr	r2, [pc, #392]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	6313      	str	r3, [r2, #48]	; 0x30
 8003332:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration    
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800333e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8003350:	2307      	movs	r3, #7
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003354:	f107 031c 	add.w	r3, r7, #28
 8003358:	4619      	mov	r1, r3
 800335a:	4857      	ldr	r0, [pc, #348]	; (80034b8 <HAL_UART_MspInit+0x1cc>)
 800335c:	f001 fdba 	bl	8004ed4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	2035      	movs	r0, #53	; 0x35
 8003366:	f001 f888 	bl	800447a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800336a:	2035      	movs	r0, #53	; 0x35
 800336c:	f001 f8a1 	bl	80044b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003370:	e09a      	b.n	80034a8 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a51      	ldr	r2, [pc, #324]	; (80034bc <HAL_UART_MspInit+0x1d0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	f040 8095 	bne.w	80034a8 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 800337e:	4b4d      	ldr	r3, [pc, #308]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a4c      	ldr	r2, [pc, #304]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 8003384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a46      	ldr	r2, [pc, #280]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <HAL_UART_MspInit+0x1c8>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 80033ae:	230c      	movs	r3, #12
 80033b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b2:	2302      	movs	r3, #2
 80033b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ba:	2303      	movs	r3, #3
 80033bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033be:	2307      	movs	r3, #7
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c2:	f107 031c 	add.w	r3, r7, #28
 80033c6:	4619      	mov	r1, r3
 80033c8:	483d      	ldr	r0, [pc, #244]	; (80034c0 <HAL_UART_MspInit+0x1d4>)
 80033ca:	f001 fd83 	bl	8004ed4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80033ce:	4b3d      	ldr	r3, [pc, #244]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 80033d0:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <HAL_UART_MspInit+0x1dc>)
 80033d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80033d4:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 80033d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033dc:	4b39      	ldr	r3, [pc, #228]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e2:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033e8:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 80033ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033f0:	4b34      	ldr	r3, [pc, #208]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80033fc:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 80033fe:	2200      	movs	r2, #0
 8003400:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003402:	4b30      	ldr	r3, [pc, #192]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 8003404:	2200      	movs	r2, #0
 8003406:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003408:	4b2e      	ldr	r3, [pc, #184]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 800340a:	2200      	movs	r2, #0
 800340c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800340e:	482d      	ldr	r0, [pc, #180]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 8003410:	f001 f86a 	bl	80044e8 <HAL_DMA_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800341a:	f7ff fc5f 	bl	8002cdc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 8003422:	66da      	str	r2, [r3, #108]	; 0x6c
 8003424:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_UART_MspInit+0x1d8>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800342a:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 800342c:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_UART_MspInit+0x1e4>)
 800342e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003430:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003432:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003436:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003438:	4b24      	ldr	r3, [pc, #144]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 800343a:	2240      	movs	r2, #64	; 0x40
 800343c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800343e:	4b23      	ldr	r3, [pc, #140]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003440:	2200      	movs	r2, #0
 8003442:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800344a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800344c:	4b1f      	ldr	r3, [pc, #124]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 800344e:	2200      	movs	r2, #0
 8003450:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003452:	4b1e      	ldr	r3, [pc, #120]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003458:	4b1c      	ldr	r3, [pc, #112]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003460:	2200      	movs	r2, #0
 8003462:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003464:	4b19      	ldr	r3, [pc, #100]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003466:	2204      	movs	r2, #4
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 800346c:	2203      	movs	r2, #3
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003472:	2200      	movs	r2, #0
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800347c:	4813      	ldr	r0, [pc, #76]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 800347e:	f001 f833 	bl	80044e8 <HAL_DMA_Init>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8003488:	f7ff fc28 	bl	8002cdc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0f      	ldr	r2, [pc, #60]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003490:	669a      	str	r2, [r3, #104]	; 0x68
 8003492:	4a0e      	ldr	r2, [pc, #56]	; (80034cc <HAL_UART_MspInit+0x1e0>)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	2100      	movs	r1, #0
 800349c:	2026      	movs	r0, #38	; 0x26
 800349e:	f000 ffec 	bl	800447a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034a2:	2026      	movs	r0, #38	; 0x26
 80034a4:	f001 f805 	bl	80044b2 <HAL_NVIC_EnableIRQ>
}
 80034a8:	bf00      	nop
 80034aa:	3730      	adds	r7, #48	; 0x30
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40005000 	.word	0x40005000
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40020400 	.word	0x40020400
 80034bc:	40004400 	.word	0x40004400
 80034c0:	40020000 	.word	0x40020000
 80034c4:	20003e28 	.word	0x20003e28
 80034c8:	40026088 	.word	0x40026088
 80034cc:	20004080 	.word	0x20004080
 80034d0:	400260a0 	.word	0x400260a0

080034d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80034d8:	f004 fa78 	bl	80079cc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <HardFault_Handler+0x4>

080034e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034ea:	e7fe      	b.n	80034ea <MemManage_Handler+0x4>

080034ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <BusFault_Handler+0x4>

080034f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034f6:	e7fe      	b.n	80034f6 <UsageFault_Handler+0x4>

080034f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003526:	f000 f9cd 	bl	80038c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}

0800352e <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8003532:	f001 fb71 	bl	8004c18 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <DMA1_Stream5_IRQHandler+0x10>)
 8003542:	f001 f901 	bl	8004748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20003e28 	.word	0x20003e28

08003550 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <DMA1_Stream6_IRQHandler+0x10>)
 8003556:	f001 f8f7 	bl	8004748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20004080 	.word	0x20004080

08003564 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <ADC_IRQHandler+0x10>)
 800356a:	f000 faf1 	bl	8003b50 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20004038 	.word	0x20004038

08003578 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <I2C1_EV_IRQHandler+0x10>)
 800357e:	f002 f8ff 	bl	8005780 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20003ec8 	.word	0x20003ec8

0800358c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <USART2_IRQHandler+0x10>)
 8003592:	f007 f8f1 	bl	800a778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20004200 	.word	0x20004200

080035a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <UART5_IRQHandler+0x10>)
 80035a6:	f007 f8e7 	bl	800a778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20003fb0 	.word	0x20003fb0

080035b4 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <QUADSPI_IRQHandler+0x10>)
 80035ba:	f002 ff6b 	bl	8006494 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	2000429c 	.word	0x2000429c

080035c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <_sbrk+0x50>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <_sbrk+0x16>
		heap_end = &end;
 80035d8:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <_sbrk+0x50>)
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <_sbrk+0x54>)
 80035dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <_sbrk+0x50>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <_sbrk+0x50>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	466a      	mov	r2, sp
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d907      	bls.n	8003602 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80035f2:	f00b fad1 	bl	800eb98 <__errno>
 80035f6:	4602      	mov	r2, r0
 80035f8:	230c      	movs	r3, #12
 80035fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003600:	e006      	b.n	8003610 <_sbrk+0x48>
	}

	heap_end += incr;
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <_sbrk+0x50>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	4a03      	ldr	r2, [pc, #12]	; (8003618 <_sbrk+0x50>)
 800360c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800360e:	68fb      	ldr	r3, [r7, #12]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000b2c 	.word	0x20000b2c
 800361c:	20004318 	.word	0x20004318

08003620 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <SystemInit+0x28>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	4a07      	ldr	r2, [pc, #28]	; (8003648 <SystemInit+0x28>)
 800362c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003634:	4b04      	ldr	r3, [pc, #16]	; (8003648 <SystemInit+0x28>)
 8003636:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800363a:	609a      	str	r2, [r3, #8]
#endif
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = 0; //STA_NOINIT;
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <USER_initialize+0x24>)
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
//	{       Stat &= ~STA_NOINIT;
//	}
//	else
//	{      // printf("DISK IO INIT ERROR \n");
//	}
    return Stat;
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <USER_initialize+0x24>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000008 	.word	0x20000008

08003674 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	4603      	mov	r3, r0
 800367c:	71fb      	strb	r3, [r7, #7]
//      {
//        return HAL_ERROR;
//      }
//  }

  Stat = STA_NOINIT;
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <USER_status+0x34>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
  Stat &= ~STA_NOINIT;
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <USER_status+0x34>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	b2da      	uxtb	r2, r3
 8003690:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <USER_status+0x34>)
 8003692:	701a      	strb	r2, [r3, #0]
  	return Stat;
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <USER_status+0x34>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000008 	.word	0x20000008

080036ac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4603      	mov	r3, r0
 80036ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    	uint32_t SecAdd = sector * SECTOR_SIZE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	031b      	lsls	r3, r3, #12
 80036c0:	617b      	str	r3, [r7, #20]
	uint32_t Size = count * SECTOR_SIZE;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	031b      	lsls	r3, r3, #12
 80036c6:	613b      	str	r3, [r7, #16]
//uint8_t QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)        
	if(QSPI_Read((uint8_t*)buff, (uint32_t)SecAdd, (uint32_t) Size ) ==  HAL_OK)
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	6979      	ldr	r1, [r7, #20]
 80036cc:	68b8      	ldr	r0, [r7, #8]
 80036ce:	f7fd f9c1 	bl	8000a54 <QSPI_Read>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <USER_read+0x30>
	{       return RES_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	e000      	b.n	80036de <USER_read+0x32>
	}
	else
	{       //printf("DISK Read Error \n");
		return RES_ERROR;
 80036dc:	2301      	movs	r3, #1
	}
  /* USER CODE END READ */
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4603      	mov	r3, r0
 80036f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	DSector = sector;
 80036f8:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <USER_write+0x7c>)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6013      	str	r3, [r2, #0]
	SecAdd = sector * SECTOR_SIZE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	031b      	lsls	r3, r3, #12
 8003702:	4a19      	ldr	r2, [pc, #100]	; (8003768 <USER_write+0x80>)
 8003704:	6013      	str	r3, [r2, #0]
	Size = count * SECTOR_SIZE;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	031b      	lsls	r3, r3, #12
 800370a:	4a18      	ldr	r2, [pc, #96]	; (800376c <USER_write+0x84>)
 800370c:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i< count; i++)
 800370e:	2300      	movs	r3, #0
 8003710:	82fb      	strh	r3, [r7, #22]
 8003712:	e010      	b.n	8003736 <USER_write+0x4e>
	{       if(QSPI_Erase_Sector4K(SecAdd + (i * SECTOR_SIZE)) != HAL_OK)
 8003714:	8afb      	ldrh	r3, [r7, #22]
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	461a      	mov	r2, r3
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <USER_write+0x80>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4413      	add	r3, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f7fd f8c5 	bl	80008b0 <QSPI_Erase_Sector4K>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <USER_write+0x48>
		{	// printf("DISK IO ERASE FAIL \n");
			return RES_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e014      	b.n	800375a <USER_write+0x72>
	for(uint16_t i = 0; i< count; i++)
 8003730:	8afb      	ldrh	r3, [r7, #22]
 8003732:	3301      	adds	r3, #1
 8003734:	82fb      	strh	r3, [r7, #22]
 8003736:	8afb      	ldrh	r3, [r7, #22]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d8ea      	bhi.n	8003714 <USER_write+0x2c>
		}
	}
     
	if(QSPI_Write((uint8_t *)buff, SecAdd, Size) != HAL_OK)
 800373e:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <USER_write+0x80>)
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <USER_write+0x84>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	68b8      	ldr	r0, [r7, #8]
 800374a:	f7fd f8f3 	bl	8000934 <QSPI_Write>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <USER_write+0x70>
	{       // printf("DISK IO WRITE FAIL \n");
		return RES_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <USER_write+0x72>
	}
  /* USER CODE HERE */
    return RES_OK;
 8003758:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200042f0 	.word	0x200042f0
 8003768:	200042e8 	.word	0x200042e8
 800376c:	200042ec 	.word	0x200042ec

08003770 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	603a      	str	r2, [r7, #0]
 800377a:	71fb      	strb	r3, [r7, #7]
 800377c:	460b      	mov	r3, r1
 800377e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <USER_ioctl+0x84>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <USER_ioctl+0x26>
 8003792:	2303      	movs	r3, #3
 8003794:	e027      	b.n	80037e6 <USER_ioctl+0x76>
  
  switch (cmd)
 8003796:	79bb      	ldrb	r3, [r7, #6]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d821      	bhi.n	80037e0 <USER_ioctl+0x70>
 800379c:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <USER_ioctl+0x34>)
 800379e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a2:	bf00      	nop
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bb 	.word	0x080037bb
 80037ac:	080037c9 	.word	0x080037c9
 80037b0:	080037d7 	.word	0x080037d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	73fb      	strb	r3, [r7, #15]
    break;
 80037b8:	e014      	b.n	80037e4 <USER_ioctl+0x74>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = 4096; //SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037c0:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	73fb      	strb	r3, [r7, #15]
    break;
 80037c6:	e00d      	b.n	80037e4 <USER_ioctl+0x74>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = SECTOR_SIZE;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ce:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]
    break;
 80037d4:	e006      	b.n	80037e4 <USER_ioctl+0x74>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = SECTOR_SIZE;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037dc:	601a      	str	r2, [r3, #0]
    break;
 80037de:	e001      	b.n	80037e4 <USER_ioctl+0x74>
  
  default:
    res = RES_PARERR;
 80037e0:	2304      	movs	r3, #4
 80037e2:	73fb      	strb	r3, [r7, #15]
  }
	return res;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000008 	.word	0x20000008

080037f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80037f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003830 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037fe:	e003      	b.n	8003808 <LoopCopyDataInit>

08003800 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003802:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003804:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003806:	3104      	adds	r1, #4

08003808 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003808:	480b      	ldr	r0, [pc, #44]	; (8003838 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800380c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800380e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003810:	d3f6      	bcc.n	8003800 <CopyDataInit>
  ldr  r2, =_sbss
 8003812:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003814:	e002      	b.n	800381c <LoopFillZerobss>

08003816 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003816:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003818:	f842 3b04 	str.w	r3, [r2], #4

0800381c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800381e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003820:	d3f9      	bcc.n	8003816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003822:	f7ff fefd 	bl	8003620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003826:	f00b f9bd 	bl	800eba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800382a:	f7fe fb97 	bl	8001f5c <main>
  bx  lr    
 800382e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003830:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003834:	08012d68 	.word	0x08012d68
  ldr  r0, =_sdata
 8003838:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800383c:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8003840:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8003844:	20004318 	.word	0x20004318

08003848 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003848:	e7fe      	b.n	8003848 <CAN1_RX0_IRQHandler>

0800384a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800384e:	2003      	movs	r0, #3
 8003850:	f000 fe08 	bl	8004464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003854:	2000      	movs	r0, #0
 8003856:	f000 f805 	bl	8003864 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800385a:	f7ff fa47 	bl	8002cec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800386c:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <HAL_InitTick+0x54>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_InitTick+0x58>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	4619      	mov	r1, r3
 8003876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800387a:	fbb3 f3f1 	udiv	r3, r3, r1
 800387e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fe23 	bl	80044ce <HAL_SYSTICK_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e00e      	b.n	80038b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b0f      	cmp	r3, #15
 8003896:	d80a      	bhi.n	80038ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003898:	2200      	movs	r2, #0
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	f04f 30ff 	mov.w	r0, #4294967295
 80038a0:	f000 fdeb 	bl	800447a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038a4:	4a06      	ldr	r2, [pc, #24]	; (80038c0 <HAL_InitTick+0x5c>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000004 	.word	0x20000004
 80038bc:	20000024 	.word	0x20000024
 80038c0:	20000020 	.word	0x20000020

080038c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <HAL_IncTick+0x20>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	461a      	mov	r2, r3
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_IncTick+0x24>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4413      	add	r3, r2
 80038d4:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <HAL_IncTick+0x24>)
 80038d6:	6013      	str	r3, [r2, #0]
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	20000024 	.word	0x20000024
 80038e8:	200042f4 	.word	0x200042f4

080038ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return uwTick;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_GetTick+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	200042f4 	.word	0x200042f4

08003904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800390c:	f7ff ffee 	bl	80038ec <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d005      	beq.n	800392a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_Delay+0x40>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800392a:	bf00      	nop
 800392c:	f7ff ffde 	bl	80038ec <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	429a      	cmp	r2, r3
 800393a:	d8f7      	bhi.n	800392c <HAL_Delay+0x28>
  {
  }
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000024 	.word	0x20000024

08003948 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e031      	b.n	80039c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff f9ea 	bl	8002d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d116      	bne.n	80039b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	4b10      	ldr	r3, [pc, #64]	; (80039cc <HAL_ADC_Init+0x84>)
 800398c:	4013      	ands	r3, r2
 800398e:	f043 0202 	orr.w	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fb90 	bl	80040bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
 80039b2:	e001      	b.n	80039b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	ffffeefd 	.word	0xffffeefd

080039d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_ADC_Start+0x1a>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e0a0      	b.n	8003b2c <HAL_ADC_Start+0x15c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d018      	beq.n	8003a32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003a10:	4b49      	ldr	r3, [pc, #292]	; (8003b38 <HAL_ADC_Start+0x168>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a49      	ldr	r2, [pc, #292]	; (8003b3c <HAL_ADC_Start+0x16c>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	0c9a      	lsrs	r2, r3, #18
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003a24:	e002      	b.n	8003a2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f9      	bne.n	8003a26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d174      	bne.n	8003b2a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a44:	4b3e      	ldr	r3, [pc, #248]	; (8003b40 <HAL_ADC_Start+0x170>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d106      	bne.n	8003a8a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f023 0206 	bic.w	r2, r3, #6
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44
 8003a88:	e002      	b.n	8003a90 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003aa2:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <HAL_ADC_Start+0x174>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10f      	bne.n	8003ace <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d136      	bne.n	8003b2a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e02d      	b.n	8003b2a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1d      	ldr	r2, [pc, #116]	; (8003b48 <HAL_ADC_Start+0x178>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10e      	bne.n	8003af6 <HAL_ADC_Start+0x126>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d107      	bne.n	8003af6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003af4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_ADC_Start+0x174>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d113      	bne.n	8003b2a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_ADC_Start+0x17c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10e      	bne.n	8003b2a <HAL_ADC_Start+0x15a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d107      	bne.n	8003b2a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b28:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20000004 	.word	0x20000004
 8003b3c:	431bde83 	.word	0x431bde83
 8003b40:	fffff8fe 	.word	0xfffff8fe
 8003b44:	40012300 	.word	0x40012300
 8003b48:	40012000 	.word	0x40012000
 8003b4c:	40012200 	.word	0x40012200

08003b50 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	bf0c      	ite	eq
 8003b6e:	2301      	moveq	r3, #1
 8003b70:	2300      	movne	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0320 	and.w	r3, r3, #32
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d049      	beq.n	8003c26 <HAL_ADC_IRQHandler+0xd6>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d046      	beq.n	8003c26 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d12b      	bne.n	8003c16 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d127      	bne.n	8003c16 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d006      	beq.n	8003be2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d119      	bne.n	8003c16 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0220 	bic.w	r2, r2, #32
 8003bf0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f043 0201 	orr.w	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8e8 	bl	8003dec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f06f 0212 	mvn.w	r2, #18
 8003c24:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d057      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x1b8>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d054      	beq.n	8003d08 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d105      	bne.n	8003c76 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d139      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d12b      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d124      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11d      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d119      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fad9 	bl	80042b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 020c 	mvn.w	r2, #12
 8003d06:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	bf0c      	ite	eq
 8003d16:	2301      	moveq	r3, #1
 8003d18:	2300      	movne	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	2b40      	cmp	r3, #64	; 0x40
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2301      	moveq	r3, #1
 8003d2e:	2300      	movne	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d017      	beq.n	8003d6a <HAL_ADC_IRQHandler+0x21a>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d014      	beq.n	8003d6a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10d      	bne.n	8003d6a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f850 	bl	8003e00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0201 	mvn.w	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d015      	beq.n	8003dca <HAL_ADC_IRQHandler+0x27a>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	f043 0202 	orr.w	r2, r3, #2
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0220 	mvn.w	r2, #32
 8003db8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f82a 	bl	8003e14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0220 	mvn.w	r2, #32
 8003dc8:	601a      	str	r2, [r3, #0]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x1c>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e12a      	b.n	800409a <HAL_ADC_ConfigChannel+0x272>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b09      	cmp	r3, #9
 8003e52:	d93a      	bls.n	8003eca <HAL_ADC_ConfigChannel+0xa2>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e5c:	d035      	beq.n	8003eca <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68d9      	ldr	r1, [r3, #12]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	3b1e      	subs	r3, #30
 8003e74:	2207      	movs	r2, #7
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	400a      	ands	r2, r1
 8003e82:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a87      	ldr	r2, [pc, #540]	; (80040a8 <HAL_ADC_ConfigChannel+0x280>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68d9      	ldr	r1, [r3, #12]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	061a      	lsls	r2, r3, #24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ea2:	e035      	b.n	8003f10 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68d9      	ldr	r1, [r3, #12]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4403      	add	r3, r0
 8003ebc:	3b1e      	subs	r3, #30
 8003ebe:	409a      	lsls	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec8:	e022      	b.n	8003f10 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6919      	ldr	r1, [r3, #16]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	2207      	movs	r2, #7
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	400a      	ands	r2, r1
 8003eec:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6919      	ldr	r1, [r3, #16]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	4618      	mov	r0, r3
 8003f00:	4603      	mov	r3, r0
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4403      	add	r3, r0
 8003f06:	409a      	lsls	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b06      	cmp	r3, #6
 8003f16:	d824      	bhi.n	8003f62 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	3b05      	subs	r3, #5
 8003f2a:	221f      	movs	r2, #31
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43da      	mvns	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	400a      	ands	r2, r1
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4618      	mov	r0, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	3b05      	subs	r3, #5
 8003f54:	fa00 f203 	lsl.w	r2, r0, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f60:	e04c      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d824      	bhi.n	8003fb4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	4413      	add	r3, r2
 8003f7a:	3b23      	subs	r3, #35	; 0x23
 8003f7c:	221f      	movs	r2, #31
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43da      	mvns	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	400a      	ands	r2, r1
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4618      	mov	r0, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3b23      	subs	r3, #35	; 0x23
 8003fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb2:	e023      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b41      	subs	r3, #65	; 0x41
 8003fc6:	221f      	movs	r2, #31
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	3b41      	subs	r3, #65	; 0x41
 8003ff0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a2a      	ldr	r2, [pc, #168]	; (80040ac <HAL_ADC_ConfigChannel+0x284>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10a      	bne.n	800401c <HAL_ADC_ConfigChannel+0x1f4>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800400e:	d105      	bne.n	800401c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004010:	4b27      	ldr	r3, [pc, #156]	; (80040b0 <HAL_ADC_ConfigChannel+0x288>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <HAL_ADC_ConfigChannel+0x288>)
 8004016:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800401a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <HAL_ADC_ConfigChannel+0x284>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d109      	bne.n	800403a <HAL_ADC_ConfigChannel+0x212>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b12      	cmp	r3, #18
 800402c:	d105      	bne.n	800403a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800402e:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <HAL_ADC_ConfigChannel+0x288>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4a1f      	ldr	r2, [pc, #124]	; (80040b0 <HAL_ADC_ConfigChannel+0x288>)
 8004034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004038:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_ADC_ConfigChannel+0x284>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d125      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x268>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a17      	ldr	r2, [pc, #92]	; (80040a8 <HAL_ADC_ConfigChannel+0x280>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <HAL_ADC_ConfigChannel+0x22e>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b11      	cmp	r3, #17
 8004054:	d11c      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004056:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <HAL_ADC_ConfigChannel+0x288>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <HAL_ADC_ConfigChannel+0x288>)
 800405c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004060:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <HAL_ADC_ConfigChannel+0x280>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d111      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_ADC_ConfigChannel+0x28c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a11      	ldr	r2, [pc, #68]	; (80040b8 <HAL_ADC_ConfigChannel+0x290>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0c9a      	lsrs	r2, r3, #18
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004082:	e002      	b.n	800408a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3b01      	subs	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f9      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	10000012 	.word	0x10000012
 80040ac:	40012000 	.word	0x40012000
 80040b0:	40012300 	.word	0x40012300
 80040b4:	20000004 	.word	0x20000004
 80040b8:	431bde83 	.word	0x431bde83

080040bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80040c4:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <ADC_Init+0x1ec>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <ADC_Init+0x1ec>)
 80040ca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040ce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80040d0:	4b75      	ldr	r3, [pc, #468]	; (80042a8 <ADC_Init+0x1ec>)
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4973      	ldr	r1, [pc, #460]	; (80042a8 <ADC_Init+0x1ec>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	021a      	lsls	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6859      	ldr	r1, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6899      	ldr	r1, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	4a58      	ldr	r2, [pc, #352]	; (80042ac <ADC_Init+0x1f0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d022      	beq.n	8004196 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800415e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6899      	ldr	r1, [r3, #8]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	e00f      	b.n	80041b6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0202 	bic.w	r2, r2, #2
 80041c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6899      	ldr	r1, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	005a      	lsls	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01b      	beq.n	800421c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	3b01      	subs	r3, #1
 8004210:	035a      	lsls	r2, r3, #13
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	e007      	b.n	800422c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
 8004246:	3b01      	subs	r3, #1
 8004248:	051a      	lsls	r2, r3, #20
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800426e:	025a      	lsls	r2, r3, #9
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	029a      	lsls	r2, r3, #10
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	40012300 	.word	0x40012300
 80042ac:	0f000001 	.word	0x0f000001

080042b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <__NVIC_SetPriorityGrouping+0x40>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042e0:	4013      	ands	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <__NVIC_SetPriorityGrouping+0x44>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042f2:	4a04      	ldr	r2, [pc, #16]	; (8004304 <__NVIC_SetPriorityGrouping+0x40>)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	60d3      	str	r3, [r2, #12]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00
 8004308:	05fa0000 	.word	0x05fa0000

0800430c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004310:	4b04      	ldr	r3, [pc, #16]	; (8004324 <__NVIC_GetPriorityGrouping+0x18>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	0a1b      	lsrs	r3, r3, #8
 8004316:	f003 0307 	and.w	r3, r3, #7
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	e000ed00 	.word	0xe000ed00

08004328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	4603      	mov	r3, r0
 8004330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	2b00      	cmp	r3, #0
 8004338:	db0b      	blt.n	8004352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	f003 021f 	and.w	r2, r3, #31
 8004340:	4907      	ldr	r1, [pc, #28]	; (8004360 <__NVIC_EnableIRQ+0x38>)
 8004342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	2001      	movs	r0, #1
 800434a:	fa00 f202 	lsl.w	r2, r0, r2
 800434e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000e100 	.word	0xe000e100

08004364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	6039      	str	r1, [r7, #0]
 800436e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004374:	2b00      	cmp	r3, #0
 8004376:	db0a      	blt.n	800438e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	b2da      	uxtb	r2, r3
 800437c:	490c      	ldr	r1, [pc, #48]	; (80043b0 <__NVIC_SetPriority+0x4c>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	0112      	lsls	r2, r2, #4
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	440b      	add	r3, r1
 8004388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800438c:	e00a      	b.n	80043a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4908      	ldr	r1, [pc, #32]	; (80043b4 <__NVIC_SetPriority+0x50>)
 8004394:	79fb      	ldrb	r3, [r7, #7]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	3b04      	subs	r3, #4
 800439c:	0112      	lsls	r2, r2, #4
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	440b      	add	r3, r1
 80043a2:	761a      	strb	r2, [r3, #24]
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	e000e100 	.word	0xe000e100
 80043b4:	e000ed00 	.word	0xe000ed00

080043b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b089      	sub	sp, #36	; 0x24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f1c3 0307 	rsb	r3, r3, #7
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	bf28      	it	cs
 80043d6:	2304      	movcs	r3, #4
 80043d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3304      	adds	r3, #4
 80043de:	2b06      	cmp	r3, #6
 80043e0:	d902      	bls.n	80043e8 <NVIC_EncodePriority+0x30>
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	3b03      	subs	r3, #3
 80043e6:	e000      	b.n	80043ea <NVIC_EncodePriority+0x32>
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ec:	f04f 32ff 	mov.w	r2, #4294967295
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43da      	mvns	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	401a      	ands	r2, r3
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004400:	f04f 31ff 	mov.w	r1, #4294967295
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	fa01 f303 	lsl.w	r3, r1, r3
 800440a:	43d9      	mvns	r1, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004410:	4313      	orrs	r3, r2
         );
}
 8004412:	4618      	mov	r0, r3
 8004414:	3724      	adds	r7, #36	; 0x24
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
	...

08004420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3b01      	subs	r3, #1
 800442c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004430:	d301      	bcc.n	8004436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004432:	2301      	movs	r3, #1
 8004434:	e00f      	b.n	8004456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004436:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <SysTick_Config+0x40>)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3b01      	subs	r3, #1
 800443c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800443e:	210f      	movs	r1, #15
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	f7ff ff8e 	bl	8004364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <SysTick_Config+0x40>)
 800444a:	2200      	movs	r2, #0
 800444c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800444e:	4b04      	ldr	r3, [pc, #16]	; (8004460 <SysTick_Config+0x40>)
 8004450:	2207      	movs	r2, #7
 8004452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	e000e010 	.word	0xe000e010

08004464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7ff ff29 	bl	80042c4 <__NVIC_SetPriorityGrouping>
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af00      	add	r7, sp, #0
 8004480:	4603      	mov	r3, r0
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800448c:	f7ff ff3e 	bl	800430c <__NVIC_GetPriorityGrouping>
 8004490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	6978      	ldr	r0, [r7, #20]
 8004498:	f7ff ff8e 	bl	80043b8 <NVIC_EncodePriority>
 800449c:	4602      	mov	r2, r0
 800449e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a2:	4611      	mov	r1, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff ff5d 	bl	8004364 <__NVIC_SetPriority>
}
 80044aa:	bf00      	nop
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	4603      	mov	r3, r0
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff ff31 	bl	8004328 <__NVIC_EnableIRQ>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7ff ffa2 	bl	8004420 <SysTick_Config>
 80044dc:	4603      	mov	r3, r0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044f4:	f7ff f9fa 	bl	80038ec <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e099      	b.n	8004638 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004524:	e00f      	b.n	8004546 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004526:	f7ff f9e1 	bl	80038ec <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b05      	cmp	r3, #5
 8004532:	d908      	bls.n	8004546 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2203      	movs	r2, #3
 800453e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e078      	b.n	8004638 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e8      	bne.n	8004526 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4b38      	ldr	r3, [pc, #224]	; (8004640 <HAL_DMA_Init+0x158>)
 8004560:	4013      	ands	r3, r2
 8004562:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	2b04      	cmp	r3, #4
 800459e:	d107      	bne.n	80045b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	4313      	orrs	r3, r2
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d117      	bne.n	800460a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fa99 	bl	8004b24 <DMA_CheckFifoParam>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2240      	movs	r2, #64	; 0x40
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004606:	2301      	movs	r3, #1
 8004608:	e016      	b.n	8004638 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 fa50 	bl	8004ab8 <DMA_CalcBaseAndBitshift>
 8004618:	4603      	mov	r3, r0
 800461a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	223f      	movs	r2, #63	; 0x3f
 8004622:	409a      	lsls	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	e010803f 	.word	0xe010803f

08004644 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_DMA_Start_IT+0x26>
 8004666:	2302      	movs	r3, #2
 8004668:	e048      	b.n	80046fc <HAL_DMA_Start_IT+0xb8>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d137      	bne.n	80046ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	68b9      	ldr	r1, [r7, #8]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f9e2 	bl	8004a5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	223f      	movs	r2, #63	; 0x3f
 800469e:	409a      	lsls	r2, r3
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0216 	orr.w	r2, r2, #22
 80046b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0208 	orr.w	r2, r2, #8
 80046da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0201 	orr.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e005      	b.n	80046fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
 80046f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d004      	beq.n	8004722 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e00c      	b.n	800473c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2205      	movs	r2, #5
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004754:	4b92      	ldr	r3, [pc, #584]	; (80049a0 <HAL_DMA_IRQHandler+0x258>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a92      	ldr	r2, [pc, #584]	; (80049a4 <HAL_DMA_IRQHandler+0x25c>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	0a9b      	lsrs	r3, r3, #10
 8004760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004772:	2208      	movs	r2, #8
 8004774:	409a      	lsls	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01a      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0204 	bic.w	r2, r2, #4
 800479a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	2208      	movs	r2, #8
 80047a2:	409a      	lsls	r2, r3
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	f043 0201 	orr.w	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b8:	2201      	movs	r2, #1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4013      	ands	r3, r2
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d012      	beq.n	80047ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d6:	2201      	movs	r2, #1
 80047d8:	409a      	lsls	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	f043 0202 	orr.w	r2, r3, #2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	2204      	movs	r2, #4
 80047f0:	409a      	lsls	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d012      	beq.n	8004820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00b      	beq.n	8004820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480c:	2204      	movs	r2, #4
 800480e:	409a      	lsls	r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004818:	f043 0204 	orr.w	r2, r3, #4
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004824:	2210      	movs	r2, #16
 8004826:	409a      	lsls	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d043      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d03c      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004842:	2210      	movs	r2, #16
 8004844:	409a      	lsls	r2, r3
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d018      	beq.n	800488a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d108      	bne.n	8004878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d024      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
 8004876:	e01f      	b.n	80048b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01b      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
 8004888:	e016      	b.n	80048b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d107      	bne.n	80048a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0208 	bic.w	r2, r2, #8
 80048a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	2220      	movs	r2, #32
 80048be:	409a      	lsls	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 808e 	beq.w	80049e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0310 	and.w	r3, r3, #16
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8086 	beq.w	80049e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048de:	2220      	movs	r2, #32
 80048e0:	409a      	lsls	r2, r3
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b05      	cmp	r3, #5
 80048f0:	d136      	bne.n	8004960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0216 	bic.w	r2, r2, #22
 8004900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d103      	bne.n	8004922 <HAL_DMA_IRQHandler+0x1da>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0208 	bic.w	r2, r2, #8
 8004930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	223f      	movs	r2, #63	; 0x3f
 8004938:	409a      	lsls	r2, r3
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004952:	2b00      	cmp	r3, #0
 8004954:	d07d      	beq.n	8004a52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	4798      	blx	r3
        }
        return;
 800495e:	e078      	b.n	8004a52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01c      	beq.n	80049a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d108      	bne.n	800498e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	2b00      	cmp	r3, #0
 8004982:	d030      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	4798      	blx	r3
 800498c:	e02b      	b.n	80049e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d027      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	4798      	blx	r3
 800499e:	e022      	b.n	80049e6 <HAL_DMA_IRQHandler+0x29e>
 80049a0:	20000004 	.word	0x20000004
 80049a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10f      	bne.n	80049d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0210 	bic.w	r2, r2, #16
 80049c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d032      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d022      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2205      	movs	r2, #5
 80049fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0201 	bic.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	3301      	adds	r3, #1
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d307      	bcc.n	8004a2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f2      	bne.n	8004a12 <HAL_DMA_IRQHandler+0x2ca>
 8004a2c:	e000      	b.n	8004a30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4798      	blx	r3
 8004a50:	e000      	b.n	8004a54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a52:	bf00      	nop
    }
  }
}
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop

08004a5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d108      	bne.n	8004a9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a9a:	e007      	b.n	8004aac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	3b10      	subs	r3, #16
 8004ac8:	4a13      	ldr	r2, [pc, #76]	; (8004b18 <DMA_CalcBaseAndBitshift+0x60>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ad2:	4a12      	ldr	r2, [pc, #72]	; (8004b1c <DMA_CalcBaseAndBitshift+0x64>)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d908      	bls.n	8004af8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <DMA_CalcBaseAndBitshift+0x68>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	1d1a      	adds	r2, r3, #4
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	659a      	str	r2, [r3, #88]	; 0x58
 8004af6:	e006      	b.n	8004b06 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <DMA_CalcBaseAndBitshift+0x68>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	aaaaaaab 	.word	0xaaaaaaab
 8004b1c:	08012638 	.word	0x08012638
 8004b20:	fffffc00 	.word	0xfffffc00

08004b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d11f      	bne.n	8004b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d855      	bhi.n	8004bf0 <DMA_CheckFifoParam+0xcc>
 8004b44:	a201      	add	r2, pc, #4	; (adr r2, 8004b4c <DMA_CheckFifoParam+0x28>)
 8004b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4a:	bf00      	nop
 8004b4c:	08004b5d 	.word	0x08004b5d
 8004b50:	08004b6f 	.word	0x08004b6f
 8004b54:	08004b5d 	.word	0x08004b5d
 8004b58:	08004bf1 	.word	0x08004bf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d045      	beq.n	8004bf4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b6c:	e042      	b.n	8004bf4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b76:	d13f      	bne.n	8004bf8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b7c:	e03c      	b.n	8004bf8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b86:	d121      	bne.n	8004bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d836      	bhi.n	8004bfc <DMA_CheckFifoParam+0xd8>
 8004b8e:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <DMA_CheckFifoParam+0x70>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bab 	.word	0x08004bab
 8004b9c:	08004ba5 	.word	0x08004ba5
 8004ba0:	08004bbd 	.word	0x08004bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba8:	e02f      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d024      	beq.n	8004c00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bba:	e021      	b.n	8004c00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bc4:	d11e      	bne.n	8004c04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004bca:	e01b      	b.n	8004c04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d902      	bls.n	8004bd8 <DMA_CheckFifoParam+0xb4>
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d003      	beq.n	8004bde <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004bd6:	e018      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      break;
 8004bdc:	e015      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00e      	beq.n	8004c08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
      break;
 8004bee:	e00b      	b.n	8004c08 <DMA_CheckFifoParam+0xe4>
      break;
 8004bf0:	bf00      	nop
 8004bf2:	e00a      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
      break;
 8004bf4:	bf00      	nop
 8004bf6:	e008      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
      break;
 8004bf8:	bf00      	nop
 8004bfa:	e006      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
      break;
 8004bfc:	bf00      	nop
 8004bfe:	e004      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
      break;
 8004c00:	bf00      	nop
 8004c02:	e002      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
      break;   
 8004c04:	bf00      	nop
 8004c06:	e000      	b.n	8004c0a <DMA_CheckFifoParam+0xe6>
      break;
 8004c08:	bf00      	nop
    }
  } 
  
  return status; 
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 8004c22:	4b52      	ldr	r3, [pc, #328]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	4a51      	ldr	r2, [pc, #324]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8004c2e:	4b4f      	ldr	r3, [pc, #316]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	4a4e      	ldr	r2, [pc, #312]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c34:	f023 0302 	bic.w	r3, r3, #2
 8004c38:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 8004c3a:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	4a4b      	ldr	r2, [pc, #300]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004c44:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 8004c46:	4b49      	ldr	r3, [pc, #292]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	4948      	ldr	r1, [pc, #288]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c4c:	4b48      	ldr	r3, [pc, #288]	; (8004d70 <HAL_FLASH_IRQHandler+0x158>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004c52:	4b46      	ldr	r3, [pc, #280]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d046      	beq.n	8004cec <HAL_FLASH_IRQHandler+0xd4>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004c5e:	4b43      	ldr	r3, [pc, #268]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8004c64:	4b43      	ldr	r3, [pc, #268]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d02e      	beq.n	8004ccc <HAL_FLASH_IRQHandler+0xb4>
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d033      	beq.n	8004cda <HAL_FLASH_IRQHandler+0xc2>
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d000      	beq.n	8004c78 <HAL_FLASH_IRQHandler+0x60>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 8004c76:	e03a      	b.n	8004cee <HAL_FLASH_IRQHandler+0xd6>
        pFlash.NbSectorsToErase--;
 8004c78:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	4a3d      	ldr	r2, [pc, #244]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004c80:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8004c82:	4b3c      	ldr	r3, [pc, #240]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d013      	beq.n	8004cb2 <HAL_FLASH_IRQHandler+0x9a>
          temp = pFlash.Sector;
 8004c8a:	4b3a      	ldr	r3, [pc, #232]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f871 	bl	8004d78 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 8004c96:	4b37      	ldr	r3, [pc, #220]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	4a35      	ldr	r2, [pc, #212]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004c9e:	60d3      	str	r3, [r2, #12]
 8004ca0:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8004ca2:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004ca4:	7a1b      	ldrb	r3, [r3, #8]
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8c2 	bl	8004e34 <FLASH_Erase_Sector>
        break;
 8004cb0:	e01d      	b.n	8004cee <HAL_FLASH_IRQHandler+0xd6>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	4a2e      	ldr	r2, [pc, #184]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f85a 	bl	8004d78 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004cc4:	4b2b      	ldr	r3, [pc, #172]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
        break;
 8004cca:	e010      	b.n	8004cee <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(0);
 8004ccc:	2000      	movs	r0, #0
 8004cce:	f000 f853 	bl	8004d78 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004cd2:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
        break;
 8004cd8:	e009      	b.n	8004cee <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8004cda:	4b26      	ldr	r3, [pc, #152]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f84a 	bl	8004d78 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004ce4:	4b23      	ldr	r3, [pc, #140]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
        break;
 8004cea:	e000      	b.n	8004cee <HAL_FLASH_IRQHandler+0xd6>
    }
  }
 8004cec:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8004cee:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d020      	beq.n	8004d3c <HAL_FLASH_IRQHandler+0x124>
  {
    switch (pFlash.ProcedureOnGoing)
 8004cfa:	4b1e      	ldr	r3, [pc, #120]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d00c      	beq.n	8004d1e <HAL_FLASH_IRQHandler+0x106>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d00d      	beq.n	8004d24 <HAL_FLASH_IRQHandler+0x10c>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d000      	beq.n	8004d0e <HAL_FLASH_IRQHandler+0xf6>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 8004d0c:	e00e      	b.n	8004d2c <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Sector;
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 8004d14:	4b17      	ldr	r3, [pc, #92]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004d16:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1a:	60da      	str	r2, [r3, #12]
        break;
 8004d1c:	e006      	b.n	8004d2c <HAL_FLASH_IRQHandler+0x114>
        temp = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	607b      	str	r3, [r7, #4]
        break;
 8004d22:	e003      	b.n	8004d2c <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Address;
 8004d24:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	607b      	str	r3, [r7, #4]
        break;
 8004d2a:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8004d2c:	f000 f838 	bl	8004da0 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f82b 	bl	8004d8c <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8004d3c:	4b0d      	ldr	r3, [pc, #52]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10e      	bne.n	8004d64 <HAL_FLASH_IRQHandler+0x14c>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8004d46:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	4a08      	ldr	r2, [pc, #32]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004d4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d50:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8004d52:	4b06      	ldr	r3, [pc, #24]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	4a05      	ldr	r2, [pc, #20]	; (8004d6c <HAL_FLASH_IRQHandler+0x154>)
 8004d58:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004d5c:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <HAL_FLASH_IRQHandler+0x15c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	751a      	strb	r2, [r3, #20]
  }
  
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40023c00 	.word	0x40023c00
 8004d70:	ffff7ffb 	.word	0xffff7ffb
 8004d74:	200042f8 	.word	0x200042f8

08004d78 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004da4:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <FLASH_SetErrorCode+0x8c>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004db0:	4b1f      	ldr	r3, [pc, #124]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f043 0320 	orr.w	r3, r3, #32
 8004db8:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004dba:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	; (8004e2c <FLASH_SetErrorCode+0x8c>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f043 0310 	orr.w	r3, r3, #16
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004dd2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004dd4:	4b15      	ldr	r3, [pc, #84]	; (8004e2c <FLASH_SetErrorCode+0x8c>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004de0:	4b13      	ldr	r3, [pc, #76]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f043 0308 	orr.w	r3, r3, #8
 8004de8:	4a11      	ldr	r2, [pc, #68]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004dea:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004dec:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <FLASH_SetErrorCode+0x8c>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004df8:	4b0d      	ldr	r3, [pc, #52]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f043 0304 	orr.w	r3, r3, #4
 8004e00:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004e02:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <FLASH_SetErrorCode+0x8c>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <FLASH_SetErrorCode+0x90>)
 8004e1a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8004e1c:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <FLASH_SetErrorCode+0x8c>)
 8004e1e:	22f2      	movs	r2, #242	; 0xf2
 8004e20:	60da      	str	r2, [r3, #12]
}
 8004e22:	bf00      	nop
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	40023c00 	.word	0x40023c00
 8004e30:	200042f8 	.word	0x200042f8

08004e34 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e010      	b.n	8004e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d103      	bne.n	8004e5e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e009      	b.n	8004e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d103      	bne.n	8004e6c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	e002      	b.n	8004e72 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b0b      	cmp	r3, #11
 8004e76:	d902      	bls.n	8004e7e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004e8a:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	4910      	ldr	r1, [pc, #64]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004e96:	4b0e      	ldr	r3, [pc, #56]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	4a0d      	ldr	r2, [pc, #52]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004e9c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004ea0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	4a08      	ldr	r2, [pc, #32]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004eae:	f043 0302 	orr.w	r3, r3, #2
 8004eb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	4a05      	ldr	r2, [pc, #20]	; (8004ed0 <FLASH_Erase_Sector+0x9c>)
 8004eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ebe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ec0:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40023c00 	.word	0x40023c00

08004ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b089      	sub	sp, #36	; 0x24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	e175      	b.n	80051e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4013      	ands	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	f040 8164 	bne.w	80051da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d00b      	beq.n	8004f32 <HAL_GPIO_Init+0x5e>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d007      	beq.n	8004f32 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f26:	2b11      	cmp	r3, #17
 8004f28:	d003      	beq.n	8004f32 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b12      	cmp	r3, #18
 8004f30:	d130      	bne.n	8004f94 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4013      	ands	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f68:	2201      	movs	r2, #1
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	43db      	mvns	r3, r3
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 0201 	and.w	r2, r3, #1
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_Init+0x100>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b12      	cmp	r3, #18
 8004fd2:	d123      	bne.n	800501c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	08da      	lsrs	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3208      	adds	r2, #8
 8004fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	220f      	movs	r2, #15
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	08da      	lsrs	r2, r3, #3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3208      	adds	r2, #8
 8005016:	69b9      	ldr	r1, [r7, #24]
 8005018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	2203      	movs	r2, #3
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 0203 	and.w	r2, r3, #3
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80be 	beq.w	80051da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505e:	4b65      	ldr	r3, [pc, #404]	; (80051f4 <HAL_GPIO_Init+0x320>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	4a64      	ldr	r2, [pc, #400]	; (80051f4 <HAL_GPIO_Init+0x320>)
 8005064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005068:	6453      	str	r3, [r2, #68]	; 0x44
 800506a:	4b62      	ldr	r3, [pc, #392]	; (80051f4 <HAL_GPIO_Init+0x320>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005076:	4a60      	ldr	r2, [pc, #384]	; (80051f8 <HAL_GPIO_Init+0x324>)
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	089b      	lsrs	r3, r3, #2
 800507c:	3302      	adds	r3, #2
 800507e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	220f      	movs	r2, #15
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43db      	mvns	r3, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4013      	ands	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a57      	ldr	r2, [pc, #348]	; (80051fc <HAL_GPIO_Init+0x328>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d037      	beq.n	8005112 <HAL_GPIO_Init+0x23e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a56      	ldr	r2, [pc, #344]	; (8005200 <HAL_GPIO_Init+0x32c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d031      	beq.n	800510e <HAL_GPIO_Init+0x23a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a55      	ldr	r2, [pc, #340]	; (8005204 <HAL_GPIO_Init+0x330>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d02b      	beq.n	800510a <HAL_GPIO_Init+0x236>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a54      	ldr	r2, [pc, #336]	; (8005208 <HAL_GPIO_Init+0x334>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d025      	beq.n	8005106 <HAL_GPIO_Init+0x232>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a53      	ldr	r2, [pc, #332]	; (800520c <HAL_GPIO_Init+0x338>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01f      	beq.n	8005102 <HAL_GPIO_Init+0x22e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a52      	ldr	r2, [pc, #328]	; (8005210 <HAL_GPIO_Init+0x33c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d019      	beq.n	80050fe <HAL_GPIO_Init+0x22a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a51      	ldr	r2, [pc, #324]	; (8005214 <HAL_GPIO_Init+0x340>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_GPIO_Init+0x226>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a50      	ldr	r2, [pc, #320]	; (8005218 <HAL_GPIO_Init+0x344>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00d      	beq.n	80050f6 <HAL_GPIO_Init+0x222>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a4f      	ldr	r2, [pc, #316]	; (800521c <HAL_GPIO_Init+0x348>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <HAL_GPIO_Init+0x21e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a4e      	ldr	r2, [pc, #312]	; (8005220 <HAL_GPIO_Init+0x34c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d101      	bne.n	80050ee <HAL_GPIO_Init+0x21a>
 80050ea:	2309      	movs	r3, #9
 80050ec:	e012      	b.n	8005114 <HAL_GPIO_Init+0x240>
 80050ee:	230a      	movs	r3, #10
 80050f0:	e010      	b.n	8005114 <HAL_GPIO_Init+0x240>
 80050f2:	2308      	movs	r3, #8
 80050f4:	e00e      	b.n	8005114 <HAL_GPIO_Init+0x240>
 80050f6:	2307      	movs	r3, #7
 80050f8:	e00c      	b.n	8005114 <HAL_GPIO_Init+0x240>
 80050fa:	2306      	movs	r3, #6
 80050fc:	e00a      	b.n	8005114 <HAL_GPIO_Init+0x240>
 80050fe:	2305      	movs	r3, #5
 8005100:	e008      	b.n	8005114 <HAL_GPIO_Init+0x240>
 8005102:	2304      	movs	r3, #4
 8005104:	e006      	b.n	8005114 <HAL_GPIO_Init+0x240>
 8005106:	2303      	movs	r3, #3
 8005108:	e004      	b.n	8005114 <HAL_GPIO_Init+0x240>
 800510a:	2302      	movs	r3, #2
 800510c:	e002      	b.n	8005114 <HAL_GPIO_Init+0x240>
 800510e:	2301      	movs	r3, #1
 8005110:	e000      	b.n	8005114 <HAL_GPIO_Init+0x240>
 8005112:	2300      	movs	r3, #0
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	f002 0203 	and.w	r2, r2, #3
 800511a:	0092      	lsls	r2, r2, #2
 800511c:	4093      	lsls	r3, r2
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005124:	4934      	ldr	r1, [pc, #208]	; (80051f8 <HAL_GPIO_Init+0x324>)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	089b      	lsrs	r3, r3, #2
 800512a:	3302      	adds	r3, #2
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005132:	4b3c      	ldr	r3, [pc, #240]	; (8005224 <HAL_GPIO_Init+0x350>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	43db      	mvns	r3, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4013      	ands	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4313      	orrs	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005156:	4a33      	ldr	r2, [pc, #204]	; (8005224 <HAL_GPIO_Init+0x350>)
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800515c:	4b31      	ldr	r3, [pc, #196]	; (8005224 <HAL_GPIO_Init+0x350>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	43db      	mvns	r3, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4013      	ands	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005180:	4a28      	ldr	r2, [pc, #160]	; (8005224 <HAL_GPIO_Init+0x350>)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005186:	4b27      	ldr	r3, [pc, #156]	; (8005224 <HAL_GPIO_Init+0x350>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	43db      	mvns	r3, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4013      	ands	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051aa:	4a1e      	ldr	r2, [pc, #120]	; (8005224 <HAL_GPIO_Init+0x350>)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051b0:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_GPIO_Init+0x350>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	43db      	mvns	r3, r3
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	4013      	ands	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051d4:	4a13      	ldr	r2, [pc, #76]	; (8005224 <HAL_GPIO_Init+0x350>)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3301      	adds	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b0f      	cmp	r3, #15
 80051e4:	f67f ae86 	bls.w	8004ef4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051e8:	bf00      	nop
 80051ea:	3724      	adds	r7, #36	; 0x24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	40023800 	.word	0x40023800
 80051f8:	40013800 	.word	0x40013800
 80051fc:	40020000 	.word	0x40020000
 8005200:	40020400 	.word	0x40020400
 8005204:	40020800 	.word	0x40020800
 8005208:	40020c00 	.word	0x40020c00
 800520c:	40021000 	.word	0x40021000
 8005210:	40021400 	.word	0x40021400
 8005214:	40021800 	.word	0x40021800
 8005218:	40021c00 	.word	0x40021c00
 800521c:	40022000 	.word	0x40022000
 8005220:	40022400 	.word	0x40022400
 8005224:	40013c00 	.word	0x40013c00

08005228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	887b      	ldrh	r3, [r7, #2]
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	e001      	b.n	800524a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800524a:	7bfb      	ldrb	r3, [r7, #15]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	807b      	strh	r3, [r7, #2]
 8005264:	4613      	mov	r3, r2
 8005266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005268:	787b      	ldrb	r3, [r7, #1]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800526e:	887a      	ldrh	r2, [r7, #2]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005274:	e003      	b.n	800527e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005276:	887b      	ldrh	r3, [r7, #2]
 8005278:	041a      	lsls	r2, r3, #16
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	619a      	str	r2, [r3, #24]
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e07f      	b.n	800539e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d106      	bne.n	80052b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fd fd8c 	bl	8002dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2224      	movs	r2, #36	; 0x24
 80052bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0201 	bic.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d107      	bne.n	8005306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005302:	609a      	str	r2, [r3, #8]
 8005304:	e006      	b.n	8005314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d104      	bne.n	8005326 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b1d      	ldr	r3, [pc, #116]	; (80053a8 <HAL_I2C_Init+0x11c>)
 8005332:	430b      	orrs	r3, r1
 8005334:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005344:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	ea42 0103 	orr.w	r1, r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	021a      	lsls	r2, r3, #8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69d9      	ldr	r1, [r3, #28]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1a      	ldr	r2, [r3, #32]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	02008000 	.word	0x02008000

080053ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	607a      	str	r2, [r7, #4]
 80053b6:	461a      	mov	r2, r3
 80053b8:	460b      	mov	r3, r1
 80053ba:	817b      	strh	r3, [r7, #10]
 80053bc:	4613      	mov	r3, r2
 80053be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	f040 80da 	bne.w	8005582 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_I2C_Master_Transmit+0x30>
 80053d8:	2302      	movs	r3, #2
 80053da:	e0d3      	b.n	8005584 <HAL_I2C_Master_Transmit+0x1d8>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80053e4:	f7fe fa82 	bl	80038ec <HAL_GetTick>
 80053e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	2319      	movs	r3, #25
 80053f0:	2201      	movs	r2, #1
 80053f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fa00 	bl	80057fc <I2C_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e0be      	b.n	8005584 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2221      	movs	r2, #33	; 0x21
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2210      	movs	r2, #16
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	893a      	ldrh	r2, [r7, #8]
 8005426:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2bff      	cmp	r3, #255	; 0xff
 8005436:	d90e      	bls.n	8005456 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	22ff      	movs	r2, #255	; 0xff
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005442:	b2da      	uxtb	r2, r3
 8005444:	8979      	ldrh	r1, [r7, #10]
 8005446:	4b51      	ldr	r3, [pc, #324]	; (800558c <HAL_I2C_Master_Transmit+0x1e0>)
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fb62 	bl	8005b18 <I2C_TransferConfig>
 8005454:	e06c      	b.n	8005530 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005464:	b2da      	uxtb	r2, r3
 8005466:	8979      	ldrh	r1, [r7, #10]
 8005468:	4b48      	ldr	r3, [pc, #288]	; (800558c <HAL_I2C_Master_Transmit+0x1e0>)
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fb51 	bl	8005b18 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005476:	e05b      	b.n	8005530 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	6a39      	ldr	r1, [r7, #32]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f9fd 	bl	800587c <I2C_WaitOnTXISFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e07b      	b.n	8005584 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d034      	beq.n	8005530 <HAL_I2C_Master_Transmit+0x184>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d130      	bne.n	8005530 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f98f 	bl	80057fc <I2C_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e04d      	b.n	8005584 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2bff      	cmp	r3, #255	; 0xff
 80054f0:	d90e      	bls.n	8005510 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	8979      	ldrh	r1, [r7, #10]
 8005500:	2300      	movs	r3, #0
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fb05 	bl	8005b18 <I2C_TransferConfig>
 800550e:	e00f      	b.n	8005530 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551e:	b2da      	uxtb	r2, r3
 8005520:	8979      	ldrh	r1, [r7, #10]
 8005522:	2300      	movs	r3, #0
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 faf4 	bl	8005b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d19e      	bne.n	8005478 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	6a39      	ldr	r1, [r7, #32]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f9dc 	bl	80058fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e01a      	b.n	8005584 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2220      	movs	r2, #32
 8005554:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	6859      	ldr	r1, [r3, #4]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <HAL_I2C_Master_Transmit+0x1e4>)
 8005562:	400b      	ands	r3, r1
 8005564:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	e000      	b.n	8005584 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005582:	2302      	movs	r3, #2
  }
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	80002000 	.word	0x80002000
 8005590:	fe00e800 	.word	0xfe00e800

08005594 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	607a      	str	r2, [r7, #4]
 800559e:	461a      	mov	r2, r3
 80055a0:	460b      	mov	r3, r1
 80055a2:	817b      	strh	r3, [r7, #10]
 80055a4:	4613      	mov	r3, r2
 80055a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	f040 80db 	bne.w	800576c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_I2C_Master_Receive+0x30>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e0d4      	b.n	800576e <HAL_I2C_Master_Receive+0x1da>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055cc:	f7fe f98e 	bl	80038ec <HAL_GetTick>
 80055d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	2319      	movs	r3, #25
 80055d8:	2201      	movs	r2, #1
 80055da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f90c 	bl	80057fc <I2C_WaitOnFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0bf      	b.n	800576e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2222      	movs	r2, #34	; 0x22
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2210      	movs	r2, #16
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	893a      	ldrh	r2, [r7, #8]
 800560e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	2bff      	cmp	r3, #255	; 0xff
 800561e:	d90e      	bls.n	800563e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	22ff      	movs	r2, #255	; 0xff
 8005624:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562a:	b2da      	uxtb	r2, r3
 800562c:	8979      	ldrh	r1, [r7, #10]
 800562e:	4b52      	ldr	r3, [pc, #328]	; (8005778 <HAL_I2C_Master_Receive+0x1e4>)
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 fa6e 	bl	8005b18 <I2C_TransferConfig>
 800563c:	e06d      	b.n	800571a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564c:	b2da      	uxtb	r2, r3
 800564e:	8979      	ldrh	r1, [r7, #10]
 8005650:	4b49      	ldr	r3, [pc, #292]	; (8005778 <HAL_I2C_Master_Receive+0x1e4>)
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fa5d 	bl	8005b18 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800565e:	e05c      	b.n	800571a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	6a39      	ldr	r1, [r7, #32]
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f985 	bl	8005974 <I2C_WaitOnRXNEFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e07c      	b.n	800576e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	b2d2      	uxtb	r2, r2
 8005680:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d034      	beq.n	800571a <HAL_I2C_Master_Receive+0x186>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d130      	bne.n	800571a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	2200      	movs	r2, #0
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	f000 f89a 	bl	80057fc <I2C_WaitOnFlagUntilTimeout>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e04d      	b.n	800576e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2bff      	cmp	r3, #255	; 0xff
 80056da:	d90e      	bls.n	80056fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	22ff      	movs	r2, #255	; 0xff
 80056e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	8979      	ldrh	r1, [r7, #10]
 80056ea:	2300      	movs	r3, #0
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 fa10 	bl	8005b18 <I2C_TransferConfig>
 80056f8:	e00f      	b.n	800571a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005708:	b2da      	uxtb	r2, r3
 800570a:	8979      	ldrh	r1, [r7, #10]
 800570c:	2300      	movs	r3, #0
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f9ff 	bl	8005b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d19d      	bne.n	8005660 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	6a39      	ldr	r1, [r7, #32]
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f8e7 	bl	80058fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e01a      	b.n	800576e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2220      	movs	r2, #32
 800573e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6859      	ldr	r1, [r3, #4]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <HAL_I2C_Master_Receive+0x1e8>)
 800574c:	400b      	ands	r3, r1
 800574e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800576c:	2302      	movs	r3, #2
  }
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	80002400 	.word	0x80002400
 800577c:	fe00e800 	.word	0xfe00e800

08005780 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
  }
}
 80057ac:	bf00      	nop
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d103      	bne.n	80057d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2200      	movs	r2, #0
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d007      	beq.n	80057f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	619a      	str	r2, [r3, #24]
  }
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800580c:	e022      	b.n	8005854 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005814:	d01e      	beq.n	8005854 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005816:	f7fe f869 	bl	80038ec <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	429a      	cmp	r2, r3
 8005824:	d302      	bcc.n	800582c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d113      	bne.n	8005854 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005830:	f043 0220 	orr.w	r2, r3, #32
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e00f      	b.n	8005874 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	bf0c      	ite	eq
 8005864:	2301      	moveq	r3, #1
 8005866:	2300      	movne	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	429a      	cmp	r2, r3
 8005870:	d0cd      	beq.n	800580e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005888:	e02c      	b.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	68b9      	ldr	r1, [r7, #8]
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f8dc 	bl	8005a4c <I2C_IsAcknowledgeFailed>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e02a      	b.n	80058f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d01e      	beq.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a6:	f7fe f821 	bl	80038ec <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d113      	bne.n	80058e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c0:	f043 0220 	orr.w	r2, r3, #32
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e007      	b.n	80058f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d1cb      	bne.n	800588a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005908:	e028      	b.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68b9      	ldr	r1, [r7, #8]
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f89c 	bl	8005a4c <I2C_IsAcknowledgeFailed>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e026      	b.n	800596c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fd ffe5 	bl	80038ec <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d113      	bne.n	800595c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e007      	b.n	800596c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b20      	cmp	r3, #32
 8005968:	d1cf      	bne.n	800590a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005980:	e055      	b.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f860 	bl	8005a4c <I2C_IsAcknowledgeFailed>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e053      	b.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d129      	bne.n	80059f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d105      	bne.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	e03f      	b.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2220      	movs	r2, #32
 80059c4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80059d2:	400b      	ands	r3, r1
 80059d4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e022      	b.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f8:	f7fd ff78 	bl	80038ec <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d302      	bcc.n	8005a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10f      	bne.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e007      	b.n	8005a3e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d1a2      	bne.n	8005982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	fe00e800 	.word	0xfe00e800

08005a4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d151      	bne.n	8005b0a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a66:	e022      	b.n	8005aae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d01e      	beq.n	8005aae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a70:	f7fd ff3c 	bl	80038ec <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d302      	bcc.n	8005a86 <I2C_IsAcknowledgeFailed+0x3a>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d113      	bne.n	8005aae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	f043 0220 	orr.w	r2, r3, #32
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e02e      	b.n	8005b0c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d1d5      	bne.n	8005a68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2210      	movs	r2, #16
 8005ac2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7ff fe71 	bl	80057b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6859      	ldr	r1, [r3, #4]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <I2C_IsAcknowledgeFailed+0xc8>)
 8005ade:	400b      	ands	r3, r1
 8005ae0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	f043 0204 	orr.w	r2, r3, #4
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	fe00e800 	.word	0xfe00e800

08005b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	607b      	str	r3, [r7, #4]
 8005b22:	460b      	mov	r3, r1
 8005b24:	817b      	strh	r3, [r7, #10]
 8005b26:	4613      	mov	r3, r2
 8005b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	0d5b      	lsrs	r3, r3, #21
 8005b34:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b38:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <I2C_TransferConfig+0x58>)
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	43db      	mvns	r3, r3
 8005b3e:	ea02 0103 	and.w	r1, r2, r3
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b48:	7a7b      	ldrb	r3, [r7, #9]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	03ff63ff 	.word	0x03ff63ff

08005b74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b20      	cmp	r3, #32
 8005b88:	d138      	bne.n	8005bfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e032      	b.n	8005bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2224      	movs	r2, #36	; 0x24
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0201 	bic.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6819      	ldr	r1, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0201 	orr.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e000      	b.n	8005bfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
  }
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b20      	cmp	r3, #32
 8005c1e:	d139      	bne.n	8005c94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e033      	b.n	8005c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2224      	movs	r2, #36	; 0x24
 8005c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2220      	movs	r2, #32
 8005c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e022      	b.n	8005cfa <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d105      	bne.n	8005ccc <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fd f972 	bl	8002fb0 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2203      	movs	r2, #3
 8005cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f814 	bl	8005d02 <HAL_MMC_InitCard>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e00a      	b.n	8005cfa <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8005d02:	b5b0      	push	{r4, r5, r7, lr}
 8005d04:	b08e      	sub	sp, #56	; 0x38
 8005d06:	af04      	add	r7, sp, #16
 8005d08:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005d16:	2300      	movs	r3, #0
 8005d18:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005d1e:	2376      	movs	r3, #118	; 0x76
 8005d20:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hmmc->Instance, Init);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681d      	ldr	r5, [r3, #0]
 8005d26:	466c      	mov	r4, sp
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005d34:	f107 0308 	add.w	r3, r7, #8
 8005d38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f005 fbc0 	bl	800b4c0 <SDMMC_Init>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 8005d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e044      	b.n	8005ddc <HAL_MMC_InitCard+0xda>
  }

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d60:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hmmc->Instance);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f005 fbd6 	bl	800b518 <SDMMC_PowerState_ON>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 8005d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_MMC_InitCard+0x7c>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e02e      	b.n	8005ddc <HAL_MMC_InitCard+0xda>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa54 	bl	800623c <MMC_PowerON>
 8005d94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <HAL_MMC_InitCard+0xb2>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e013      	b.n	8005ddc <HAL_MMC_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f980 	bl	80060ba <MMC_InitCard>
 8005dba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <HAL_MMC_InitCard+0xd8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <HAL_MMC_InitCard+0xda>
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3728      	adds	r7, #40	; 0x28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bdb0      	pop	{r4, r5, r7, pc}

08005de4 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df2:	0f9b      	lsrs	r3, r3, #30
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfe:	0e9b      	lsrs	r3, r3, #26
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e10:	0e1b      	lsrs	r3, r3, #24
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0303 	and.w	r3, r3, #3
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e22:	0c1b      	lsrs	r3, r3, #16
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2e:	0a1b      	lsrs	r3, r3, #8
 8005e30:	b2da      	uxtb	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e44:	0d1b      	lsrs	r3, r3, #20
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e50:	0c1b      	lsrs	r3, r3, #16
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e62:	0bdb      	lsrs	r3, r3, #15
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e74:	0b9b      	lsrs	r3, r3, #14
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e86:	0b5b      	lsrs	r3, r3, #13
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e98:	0b1b      	lsrs	r3, r3, #12
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb0:	009a      	lsls	r2, r3, #2
 8005eb2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ebc:	0f92      	lsrs	r2, r2, #30
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec8:	0edb      	lsrs	r3, r3, #27
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eda:	0e1b      	lsrs	r3, r3, #24
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0307 	and.w	r3, r3, #7
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eec:	0d5b      	lsrs	r3, r3, #21
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f003 0307 	and.w	r3, r3, #7
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efe:	0c9b      	lsrs	r3, r3, #18
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f10:	0bdb      	lsrs	r3, r3, #15
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	761a      	strb	r2, [r3, #24]

  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	7e1b      	ldrb	r3, [r3, #24]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	3302      	adds	r3, #2
 8005f34:	2201      	movs	r2, #1
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f3e:	fb02 f203 	mul.w	r2, r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	7a1b      	ldrb	r3, [r3, #8]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	2201      	movs	r2, #1
 8005f52:	409a      	lsls	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54

  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005f60:	0a52      	lsrs	r2, r2, #9
 8005f62:	fb02 f203 	mul.w	r2, r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f70:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f76:	0b9b      	lsrs	r3, r3, #14
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f88:	09db      	lsrs	r3, r3, #7
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005faa:	0fdb      	lsrs	r3, r3, #31
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb6:	0f5b      	lsrs	r3, r3, #29
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fc8:	0e9b      	lsrs	r3, r3, #26
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fda:	0d9b      	lsrs	r3, r3, #22
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fec:	0d5b      	lsrs	r3, r3, #21
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	b2db      	uxtb	r3, r3
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	b2da      	uxtb	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601c:	0bdb      	lsrs	r3, r3, #15
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	b2da      	uxtb	r2, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006030:	0b9b      	lsrs	r3, r3, #14
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	b2da      	uxtb	r2, r3
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006044:	0b5b      	lsrs	r3, r3, #13
 8006046:	b2db      	uxtb	r3, r3
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	b2da      	uxtb	r2, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006058:	0b1b      	lsrs	r3, r3, #12
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	b2da      	uxtb	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606c:	0a9b      	lsrs	r3, r3, #10
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	b2da      	uxtb	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006080:	0a1b      	lsrs	r3, r3, #8
 8006082:	b2db      	uxtb	r3, r3
 8006084:	f003 0303 	and.w	r3, r3, #3
 8006088:	b2da      	uxtb	r2, r3
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609c:	b2da      	uxtb	r2, r3
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80060ba:	b5b0      	push	{r4, r5, r7, lr}
 80060bc:	b094      	sub	sp, #80	; 0x50
 80060be:	af04      	add	r7, sp, #16
 80060c0:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 80060c2:	2301      	movs	r3, #1
 80060c4:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f005 fa33 	bl	800b536 <SDMMC_GetPowerState>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d102      	bne.n	80060dc <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 80060d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80060da:	e0aa      	b.n	8006232 <MMC_InitCard+0x178>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f005 fac2 	bl	800b66a <SDMMC_CmdSendCID>
 80060e6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d001      	beq.n	80060f2 <MMC_InitCard+0x38>
  {
    return errorstate;
 80060ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f0:	e09f      	b.n	8006232 <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2100      	movs	r1, #0
 80060f8:	4618      	mov	r0, r3
 80060fa:	f005 fa62 	bl	800b5c2 <SDMMC_GetResponse>
 80060fe:	4602      	mov	r2, r0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2104      	movs	r1, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f005 fa59 	bl	800b5c2 <SDMMC_GetResponse>
 8006110:	4602      	mov	r2, r0
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2108      	movs	r1, #8
 800611c:	4618      	mov	r0, r3
 800611e:	f005 fa50 	bl	800b5c2 <SDMMC_GetResponse>
 8006122:	4602      	mov	r2, r0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	210c      	movs	r1, #12
 800612e:	4618      	mov	r0, r3
 8006130:	f005 fa47 	bl	800b5c2 <SDMMC_GetResponse>
 8006134:	4602      	mov	r2, r0
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f107 020e 	add.w	r2, r7, #14
 8006142:	4611      	mov	r1, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f005 facd 	bl	800b6e4 <SDMMC_CmdSetRelAdd>
 800614a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 800614c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <MMC_InitCard+0x9c>
  {
    return errorstate;
 8006152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006154:	e06d      	b.n	8006232 <MMC_InitCard+0x178>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8006156:	89fb      	ldrh	r3, [r7, #14]
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006166:	041b      	lsls	r3, r3, #16
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f005 fa9b 	bl	800b6a6 <SDMMC_CmdSendCSD>
 8006170:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <MMC_InitCard+0xc2>
  {
    return errorstate;
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	e05a      	b.n	8006232 <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2100      	movs	r1, #0
 8006182:	4618      	mov	r0, r3
 8006184:	f005 fa1d 	bl	800b5c2 <SDMMC_GetResponse>
 8006188:	4602      	mov	r2, r0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2104      	movs	r1, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f005 fa14 	bl	800b5c2 <SDMMC_GetResponse>
 800619a:	4602      	mov	r2, r0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2108      	movs	r1, #8
 80061a6:	4618      	mov	r0, r3
 80061a8:	f005 fa0b 	bl	800b5c2 <SDMMC_GetResponse>
 80061ac:	4602      	mov	r2, r0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	210c      	movs	r1, #12
 80061b8:	4618      	mov	r0, r3
 80061ba:	f005 fa02 	bl	800b5c2 <SDMMC_GetResponse>
 80061be:	4602      	mov	r2, r0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2104      	movs	r1, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f005 f9f9 	bl	800b5c2 <SDMMC_GetResponse>
 80061d0:	4603      	mov	r3, r0
 80061d2:	0d1a      	lsrs	r2, r3, #20
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 80061d8:	f107 0310 	add.w	r3, r7, #16
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff fe00 	bl	8005de4 <HAL_MMC_GetCardCSD>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <MMC_InitCard+0x136>
  {
    return hmmc->ErrorCode;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	e020      	b.n	8006232 <MMC_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	f04f 0400 	mov.w	r4, #0
 80061fe:	461a      	mov	r2, r3
 8006200:	4623      	mov	r3, r4
 8006202:	4608      	mov	r0, r1
 8006204:	f005 f9f0 	bl	800b5e8 <SDMMC_CmdSelDesel>
 8006208:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <MMC_InitCard+0x15a>
  {
    return errorstate;
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	e00e      	b.n	8006232 <MMC_InitCard+0x178>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hmmc->Instance, hmmc->Init);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681d      	ldr	r5, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	466c      	mov	r4, sp
 800621c:	f103 0210 	add.w	r2, r3, #16
 8006220:	ca07      	ldmia	r2, {r0, r1, r2}
 8006222:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006226:	3304      	adds	r3, #4
 8006228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800622a:	4628      	mov	r0, r5
 800622c:	f005 f948 	bl	800b4c0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3740      	adds	r7, #64	; 0x40
 8006236:	46bd      	mov	sp, r7
 8006238:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800623c <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f005 f9ea 	bl	800b62e <SDMMC_CmdGoIdleState>
 800625a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d027      	beq.n	80062b2 <MMC_PowerON+0x76>
  {
    return errorstate;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	e034      	b.n	80062d0 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	60ba      	str	r2, [r7, #8]
 800626c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006270:	4293      	cmp	r3, r2
 8006272:	d102      	bne.n	800627a <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8006274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006278:	e02a      	b.n	80062d0 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4916      	ldr	r1, [pc, #88]	; (80062d8 <MMC_PowerON+0x9c>)
 8006280:	4618      	mov	r0, r3
 8006282:	f005 fa50 	bl	800b726 <SDMMC_CmdOpCondition>
 8006286:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800628e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006292:	e01d      	b.n	80062d0 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f005 f991 	bl	800b5c2 <SDMMC_GetResponse>
 80062a0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	0fdb      	lsrs	r3, r3, #31
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <MMC_PowerON+0x72>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <MMC_PowerON+0x74>
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0d6      	beq.n	8006266 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	0e1b      	lsrs	r3, r3, #24
 80062bc:	2bc0      	cmp	r3, #192	; 0xc0
 80062be:	d103      	bne.n	80062c8 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	645a      	str	r2, [r3, #68]	; 0x44
 80062c6:	e002      	b.n	80062ce <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	c0ff8000 	.word	0xc0ff8000

080062dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a04      	ldr	r2, [pc, #16]	; (80062f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80062e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ea:	6013      	str	r3, [r2, #0]
}
 80062ec:	bf00      	nop
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40007000 	.word	0x40007000

080062fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006306:	4b23      	ldr	r3, [pc, #140]	; (8006394 <HAL_PWREx_EnableOverDrive+0x98>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	4a22      	ldr	r2, [pc, #136]	; (8006394 <HAL_PWREx_EnableOverDrive+0x98>)
 800630c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006310:	6413      	str	r3, [r2, #64]	; 0x40
 8006312:	4b20      	ldr	r3, [pc, #128]	; (8006394 <HAL_PWREx_EnableOverDrive+0x98>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800631e:	4b1e      	ldr	r3, [pc, #120]	; (8006398 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1d      	ldr	r2, [pc, #116]	; (8006398 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006328:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800632a:	f7fd fadf 	bl	80038ec <HAL_GetTick>
 800632e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006330:	e009      	b.n	8006346 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006332:	f7fd fadb 	bl	80038ec <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006340:	d901      	bls.n	8006346 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e022      	b.n	800638c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006346:	4b14      	ldr	r3, [pc, #80]	; (8006398 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006352:	d1ee      	bne.n	8006332 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006354:	4b10      	ldr	r3, [pc, #64]	; (8006398 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a0f      	ldr	r2, [pc, #60]	; (8006398 <HAL_PWREx_EnableOverDrive+0x9c>)
 800635a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006360:	f7fd fac4 	bl	80038ec <HAL_GetTick>
 8006364:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006366:	e009      	b.n	800637c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006368:	f7fd fac0 	bl	80038ec <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006376:	d901      	bls.n	800637c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e007      	b.n	800638c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <HAL_PWREx_EnableOverDrive+0x9c>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006388:	d1ee      	bne.n	8006368 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	40023800 	.word	0x40023800
 8006398:	40007000 	.word	0x40007000

0800639c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80063a4:	f7fd faa2 	bl	80038ec <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e067      	b.n	8006484 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fc fd4d 	bl	8002e68 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80063ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fc6c 	bl	8006cb0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	021a      	lsls	r2, r3, #8
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	2120      	movs	r1, #32
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fc97 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 8006404:	4603      	mov	r3, r0
 8006406:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006408:	7afb      	ldrb	r3, [r7, #11]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d135      	bne.n	800647a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	4b1d      	ldr	r3, [pc, #116]	; (800648c <HAL_QSPI_Init+0xf0>)
 8006416:	4013      	ands	r3, r2
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	6852      	ldr	r2, [r2, #4]
 800641c:	0611      	lsls	r1, r2, #24
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	68d2      	ldr	r2, [r2, #12]
 8006422:	4311      	orrs	r1, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	69d2      	ldr	r2, [r2, #28]
 8006428:	4311      	orrs	r1, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6a12      	ldr	r2, [r2, #32]
 800642e:	4311      	orrs	r1, r2
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6812      	ldr	r2, [r2, #0]
 8006434:	430b      	orrs	r3, r1
 8006436:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	4b14      	ldr	r3, [pc, #80]	; (8006490 <HAL_QSPI_Init+0xf4>)
 8006440:	4013      	ands	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6912      	ldr	r2, [r2, #16]
 8006446:	0411      	lsls	r1, r2, #16
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	6952      	ldr	r2, [r2, #20]
 800644c:	4311      	orrs	r1, r2
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6992      	ldr	r2, [r2, #24]
 8006452:	4311      	orrs	r1, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6812      	ldr	r2, [r2, #0]
 8006458:	430b      	orrs	r3, r1
 800645a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0201 	orr.w	r2, r2, #1
 800646a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006482:	7afb      	ldrb	r3, [r7, #11]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	00ffff2f 	.word	0x00ffff2f
 8006490:	ffe0f8fe 	.word	0xffe0f8fe

08006494 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d064      	beq.n	8006580 <HAL_QSPI_IRQHandler+0xec>
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d05f      	beq.n	8006580 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3320      	adds	r3, #32
 80064c6:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b12      	cmp	r3, #18
 80064d2:	d125      	bne.n	8006520 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80064d4:	e01c      	b.n	8006510 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00f      	beq.n	80064fe <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	781a      	ldrb	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f6:	1e5a      	subs	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80064fc:	e008      	b.n	8006510 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800650c:	601a      	str	r2, [r3, #0]
          break;
 800650e:	e033      	b.n	8006578 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1db      	bne.n	80064d6 <HAL_QSPI_IRQHandler+0x42>
 800651e:	e02b      	b.n	8006578 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b22      	cmp	r3, #34	; 0x22
 800652a:	d125      	bne.n	8006578 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800652c:	e01d      	b.n	800656a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	2b00      	cmp	r3, #0
 8006534:	d010      	beq.n	8006558 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	7812      	ldrb	r2, [r2, #0]
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006546:	1c5a      	adds	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006550:	1e5a      	subs	r2, r3, #1
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	639a      	str	r2, [r3, #56]	; 0x38
 8006556:	e008      	b.n	800656a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006566:	601a      	str	r2, [r3, #0]
          break;
 8006568:	e006      	b.n	8006578 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0304 	and.w	r3, r3, #4
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1da      	bne.n	800652e <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fb7b 	bl	8006c74 <HAL_QSPI_FifoThresholdCallback>
 800657e:	e13c      	b.n	80067fa <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	f000 80b0 	beq.w	80066ec <HAL_QSPI_IRQHandler+0x258>
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80aa 	beq.w	80066ec <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2202      	movs	r2, #2
 800659e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80065ae:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b12      	cmp	r3, #18
 80065ba:	d120      	bne.n	80065fe <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d011      	beq.n	80065ee <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0204 	bic.w	r2, r2, #4
 80065d8:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fb32 	bl	8006c60 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80065fc:	e0fa      	b.n	80067f4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b22      	cmp	r3, #34	; 0x22
 8006608:	d143      	bne.n	8006692 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d012      	beq.n	800663e <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0204 	bic.w	r2, r2, #4
 8006626:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	e021      	b.n	8006682 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3320      	adds	r3, #32
 8006644:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8006646:	e013      	b.n	8006670 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	d017      	beq.n	8006680 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	7812      	ldrb	r2, [r2, #0]
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	1e5a      	subs	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e4      	bne.n	8006648 <HAL_QSPI_IRQHandler+0x1b4>
 800667e:	e000      	b.n	8006682 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8006680:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fade 	bl	8006c4c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8006690:	e0b0      	b.n	80067f4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d107      	bne.n	80066ae <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fac6 	bl	8006c38 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80066ac:	e0a2      	b.n	80067f4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	f040 809c 	bne.w	80067f4 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	695a      	ldr	r2, [r3, #20]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80066ca:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 faa1 	bl	8006c24 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80066e2:	e087      	b.n	80067f4 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fa93 	bl	8006c10 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80066ea:	e083      	b.n	80067f4 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d01f      	beq.n	8006736 <HAL_QSPI_IRQHandler+0x2a2>
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01a      	beq.n	8006736 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2208      	movs	r2, #8
 8006706:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8006724:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 faaa 	bl	8006c88 <HAL_QSPI_StatusMatchCallback>
 8006734:	e061      	b.n	80067fa <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d047      	beq.n	80067d0 <HAL_QSPI_IRQHandler+0x33c>
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d042      	beq.n	80067d0 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2201      	movs	r2, #1
 8006750:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8006760:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	f043 0202 	orr.w	r2, r3, #2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d021      	beq.n	80067c0 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0204 	bic.w	r2, r2, #4
 800678a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006790:	4a1c      	ldr	r2, [pc, #112]	; (8006804 <HAL_QSPI_IRQHandler+0x370>)
 8006792:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	4618      	mov	r0, r3
 800679a:	f7fd ffb3 	bl	8004704 <HAL_DMA_Abort_IT>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d029      	beq.n	80067f8 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a8:	f043 0204 	orr.w	r2, r3, #4
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fa29 	bl	8006c10 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80067be:	e01b      	b.n	80067f8 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fa21 	bl	8006c10 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80067ce:	e013      	b.n	80067f8 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00f      	beq.n	80067fa <HAL_QSPI_IRQHandler+0x366>
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2210      	movs	r2, #16
 80067ea:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fa55 	bl	8006c9c <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80067f2:	e002      	b.n	80067fa <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80067f4:	bf00      	nop
 80067f6:	e000      	b.n	80067fa <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80067f8:	bf00      	nop
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	08006ccd 	.word	0x08006ccd

08006808 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006814:	f7fd f86a 	bl	80038ec <HAL_GetTick>
 8006818:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_QSPI_Command+0x22>
 8006826:	2302      	movs	r3, #2
 8006828:	e048      	b.n	80068bc <HAL_QSPI_Command+0xb4>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b01      	cmp	r3, #1
 800683c:	d137      	bne.n	80068ae <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	2200      	movs	r2, #0
 8006854:	2120      	movs	r1, #32
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fa6b 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 800685c:	4603      	mov	r3, r0
 800685e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d125      	bne.n	80068b2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006866:	2200      	movs	r2, #0
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fa98 	bl	8006da0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d115      	bne.n	80068a4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	2201      	movs	r2, #1
 8006880:	2102      	movs	r1, #2
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fa55 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10f      	bne.n	80068b2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2202      	movs	r2, #2
 8006898:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068a2:	e006      	b.n	80068b2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068ac:	e001      	b.n	80068b2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80068ae:	2302      	movs	r3, #2
 80068b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b08a      	sub	sp, #40	; 0x28
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80068d4:	f7fd f80a 	bl	80038ec <HAL_GetTick>
 80068d8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3320      	adds	r3, #32
 80068e0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_QSPI_Transmit+0x2e>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e076      	b.n	80069e0 <HAL_QSPI_Transmit+0x11c>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	d165      	bne.n	80069d2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d056      	beq.n	80069c0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2212      	movs	r2, #18
 8006916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006946:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006948:	e01b      	b.n	8006982 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	2201      	movs	r2, #1
 8006952:	2104      	movs	r1, #4
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f9ec 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800695e:	7ffb      	ldrb	r3, [r7, #31]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d113      	bne.n	800698c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006968:	781a      	ldrb	r2, [r3, #0]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	1e5a      	subs	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1df      	bne.n	800694a <HAL_QSPI_Transmit+0x86>
 800698a:	e000      	b.n	800698e <HAL_QSPI_Transmit+0xca>
          break;
 800698c:	bf00      	nop
      }

      if (status == HAL_OK)
 800698e:	7ffb      	ldrb	r3, [r7, #31]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d110      	bne.n	80069b6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	2201      	movs	r2, #1
 800699c:	2102      	movs	r1, #2
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 f9c7 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 80069a4:	4603      	mov	r3, r0
 80069a6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80069a8:	7ffb      	ldrb	r3, [r7, #31]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d103      	bne.n	80069b6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2202      	movs	r2, #2
 80069b4:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069be:	e00a      	b.n	80069d6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c4:	f043 0208 	orr.w	r2, r3, #8
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e001      	b.n	80069d6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
 80069d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80069de:	7ffb      	ldrb	r3, [r7, #31]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3720      	adds	r7, #32
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b08a      	sub	sp, #40	; 0x28
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80069f8:	f7fc ff78 	bl	80038ec <HAL_GetTick>
 80069fc:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3320      	adds	r3, #32
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_QSPI_Receive+0x36>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e07d      	b.n	8006b1a <HAL_QSPI_Receive+0x132>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d16c      	bne.n	8006b0c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d05d      	beq.n	8006afa <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2222      	movs	r2, #34	; 0x22
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a76:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006a80:	e01c      	b.n	8006abc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	2106      	movs	r1, #6
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f000 f950 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006a96:	7ffb      	ldrb	r3, [r7, #31]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d114      	bne.n	8006ac6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	7812      	ldrb	r2, [r2, #0]
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	1e5a      	subs	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1de      	bne.n	8006a82 <HAL_QSPI_Receive+0x9a>
 8006ac4:	e000      	b.n	8006ac8 <HAL_QSPI_Receive+0xe0>
          break;
 8006ac6:	bf00      	nop
      }

      if (status == HAL_OK)
 8006ac8:	7ffb      	ldrb	r3, [r7, #31]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d110      	bne.n	8006af0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f92a 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006ae2:	7ffb      	ldrb	r3, [r7, #31]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2202      	movs	r2, #2
 8006aee:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006af8:	e00a      	b.n	8006b10 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	f043 0208 	orr.w	r2, r3, #8
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e001      	b.n	8006b10 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006b18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3720      	adds	r7, #32
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b088      	sub	sp, #32
 8006b26:	af02      	add	r7, sp, #8
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b30:	f7fc fedc 	bl	80038ec <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_QSPI_AutoPolling+0x24>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e060      	b.n	8006c08 <HAL_QSPI_AutoPolling+0xe6>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d14f      	bne.n	8006bfa <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2242      	movs	r2, #66	; 0x42
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2120      	movs	r1, #32
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f8dd 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006b7c:	7dfb      	ldrb	r3, [r7, #23]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d13d      	bne.n	8006bfe <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6852      	ldr	r2, [r2, #4]
 8006b94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6892      	ldr	r2, [r2, #8]
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006bb8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006bc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f8e9 	bl	8006da0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	2108      	movs	r1, #8
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f8aa 	bl	8006d32 <QSPI_WaitFlagStateUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10a      	bne.n	8006bfe <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2208      	movs	r2, #8
 8006bee:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bf8:	e001      	b.n	8006bfe <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8006c7c:	bf00      	nop
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d114      	bne.n	8006d1c <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006d08:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0202 	orr.w	r2, r2, #2
 8006d18:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8006d1a:	e006      	b.n	8006d2a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff ff73 	bl	8006c10 <HAL_QSPI_ErrorCallback>
}
 8006d2a:	bf00      	nop
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	603b      	str	r3, [r7, #0]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d42:	e01a      	b.n	8006d7a <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d4a:	d016      	beq.n	8006d7a <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4c:	f7fc fdce 	bl	80038ec <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d302      	bcc.n	8006d62 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2204      	movs	r2, #4
 8006d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d6e:	f043 0201 	orr.w	r2, r3, #1
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e00e      	b.n	8006d98 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4013      	ands	r3, r2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	bf14      	ite	ne
 8006d88:	2301      	movne	r3, #1
 8006d8a:	2300      	moveq	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d1d6      	bne.n	8006d44 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d009      	beq.n	8006dc8 <QSPI_Config+0x28>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006dba:	d005      	beq.n	8006dc8 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3a01      	subs	r2, #1
 8006dc6:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f000 80b9 	beq.w	8006f44 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d05f      	beq.n	8006e9a <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	6892      	ldr	r2, [r2, #8]
 8006de2:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d031      	beq.n	8006e50 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	431a      	orrs	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	431a      	orrs	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	049b      	lsls	r3, r3, #18
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	ea42 0103 	orr.w	r1, r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006e40:	f000 812e 	beq.w	80070a0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	6852      	ldr	r2, [r2, #4]
 8006e4c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8006e4e:	e127      	b.n	80070a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	431a      	orrs	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	049b      	lsls	r3, r3, #18
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	431a      	orrs	r2, r3
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	ea42 0103 	orr.w	r1, r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	615a      	str	r2, [r3, #20]
}
 8006e98:	e102      	b.n	80070a0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d02e      	beq.n	8006f00 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	049b      	lsls	r3, r3, #18
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	ea42 0103 	orr.w	r1, r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ef0:	f000 80d6 	beq.w	80070a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	6852      	ldr	r2, [r2, #4]
 8006efc:	619a      	str	r2, [r3, #24]
}
 8006efe:	e0cf      	b.n	80070a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	431a      	orrs	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	049b      	lsls	r3, r3, #18
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	431a      	orrs	r2, r3
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	ea42 0103 	orr.w	r1, r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	615a      	str	r2, [r3, #20]
}
 8006f42:	e0ad      	b.n	80070a0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6a1b      	ldr	r3, [r3, #32]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d058      	beq.n	8006ffe <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	6892      	ldr	r2, [r2, #8]
 8006f54:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	69db      	ldr	r3, [r3, #28]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d02d      	beq.n	8006fba <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	431a      	orrs	r2, r3
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	431a      	orrs	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	049b      	lsls	r3, r3, #18
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	431a      	orrs	r2, r3
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	ea42 0103 	orr.w	r1, r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006fac:	d078      	beq.n	80070a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68ba      	ldr	r2, [r7, #8]
 8006fb4:	6852      	ldr	r2, [r2, #4]
 8006fb6:	619a      	str	r2, [r3, #24]
}
 8006fb8:	e072      	b.n	80070a0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	049b      	lsls	r3, r3, #18
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	431a      	orrs	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	ea42 0103 	orr.w	r1, r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	615a      	str	r2, [r3, #20]
}
 8006ffc:	e050      	b.n	80070a0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d02a      	beq.n	800705c <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	431a      	orrs	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007014:	431a      	orrs	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	431a      	orrs	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	049b      	lsls	r3, r3, #18
 8007022:	431a      	orrs	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	431a      	orrs	r2, r3
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	431a      	orrs	r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	431a      	orrs	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	ea42 0103 	orr.w	r1, r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	430a      	orrs	r2, r1
 8007046:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800704e:	d027      	beq.n	80070a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	6852      	ldr	r2, [r2, #4]
 8007058:	619a      	str	r2, [r3, #24]
}
 800705a:	e021      	b.n	80070a0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01d      	beq.n	80070a0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706c:	431a      	orrs	r2, r3
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007072:	431a      	orrs	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	431a      	orrs	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	049b      	lsls	r3, r3, #18
 8007080:	431a      	orrs	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	431a      	orrs	r2, r3
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	431a      	orrs	r2, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	ea42 0103 	orr.w	r1, r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	430a      	orrs	r2, r1
 800709e:	615a      	str	r2, [r3, #20]
}
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80070b4:	2300      	movs	r3, #0
 80070b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e29b      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 8087 	beq.w	80071de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070d0:	4b96      	ldr	r3, [pc, #600]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 030c 	and.w	r3, r3, #12
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d00c      	beq.n	80070f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070dc:	4b93      	ldr	r3, [pc, #588]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 030c 	and.w	r3, r3, #12
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d112      	bne.n	800710e <HAL_RCC_OscConfig+0x62>
 80070e8:	4b90      	ldr	r3, [pc, #576]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070f4:	d10b      	bne.n	800710e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f6:	4b8d      	ldr	r3, [pc, #564]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d06c      	beq.n	80071dc <HAL_RCC_OscConfig+0x130>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d168      	bne.n	80071dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e275      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007116:	d106      	bne.n	8007126 <HAL_RCC_OscConfig+0x7a>
 8007118:	4b84      	ldr	r3, [pc, #528]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a83      	ldr	r2, [pc, #524]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800711e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	e02e      	b.n	8007184 <HAL_RCC_OscConfig+0xd8>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10c      	bne.n	8007148 <HAL_RCC_OscConfig+0x9c>
 800712e:	4b7f      	ldr	r3, [pc, #508]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a7e      	ldr	r2, [pc, #504]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4b7c      	ldr	r3, [pc, #496]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a7b      	ldr	r2, [pc, #492]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	e01d      	b.n	8007184 <HAL_RCC_OscConfig+0xd8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007150:	d10c      	bne.n	800716c <HAL_RCC_OscConfig+0xc0>
 8007152:	4b76      	ldr	r3, [pc, #472]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a75      	ldr	r2, [pc, #468]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	4b73      	ldr	r3, [pc, #460]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a72      	ldr	r2, [pc, #456]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e00b      	b.n	8007184 <HAL_RCC_OscConfig+0xd8>
 800716c:	4b6f      	ldr	r3, [pc, #444]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a6e      	ldr	r2, [pc, #440]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	4b6c      	ldr	r3, [pc, #432]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a6b      	ldr	r2, [pc, #428]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800717e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d013      	beq.n	80071b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fc fbae 	bl	80038ec <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007194:	f7fc fbaa 	bl	80038ec <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b64      	cmp	r3, #100	; 0x64
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e229      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071a6:	4b61      	ldr	r3, [pc, #388]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d0f0      	beq.n	8007194 <HAL_RCC_OscConfig+0xe8>
 80071b2:	e014      	b.n	80071de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b4:	f7fc fb9a 	bl	80038ec <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071bc:	f7fc fb96 	bl	80038ec <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b64      	cmp	r3, #100	; 0x64
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e215      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071ce:	4b57      	ldr	r3, [pc, #348]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x110>
 80071da:	e000      	b.n	80071de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d069      	beq.n	80072be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071ea:	4b50      	ldr	r3, [pc, #320]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 030c 	and.w	r3, r3, #12
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071f6:	4b4d      	ldr	r3, [pc, #308]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 030c 	and.w	r3, r3, #12
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d11c      	bne.n	800723c <HAL_RCC_OscConfig+0x190>
 8007202:	4b4a      	ldr	r3, [pc, #296]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d116      	bne.n	800723c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800720e:	4b47      	ldr	r3, [pc, #284]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0302 	and.w	r3, r3, #2
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_RCC_OscConfig+0x17a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d001      	beq.n	8007226 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e1e9      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007226:	4b41      	ldr	r3, [pc, #260]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	493d      	ldr	r1, [pc, #244]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007236:	4313      	orrs	r3, r2
 8007238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800723a:	e040      	b.n	80072be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d023      	beq.n	800728c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007244:	4b39      	ldr	r3, [pc, #228]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a38      	ldr	r2, [pc, #224]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007250:	f7fc fb4c 	bl	80038ec <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007258:	f7fc fb48 	bl	80038ec <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e1c7      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726a:	4b30      	ldr	r3, [pc, #192]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0f0      	beq.n	8007258 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007276:	4b2d      	ldr	r3, [pc, #180]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4929      	ldr	r1, [pc, #164]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007286:	4313      	orrs	r3, r2
 8007288:	600b      	str	r3, [r1, #0]
 800728a:	e018      	b.n	80072be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800728c:	4b27      	ldr	r3, [pc, #156]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a26      	ldr	r2, [pc, #152]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007292:	f023 0301 	bic.w	r3, r3, #1
 8007296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007298:	f7fc fb28 	bl	80038ec <HAL_GetTick>
 800729c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072a0:	f7fc fb24 	bl	80038ec <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e1a3      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072b2:	4b1e      	ldr	r3, [pc, #120]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f0      	bne.n	80072a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d038      	beq.n	800733c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d019      	beq.n	8007306 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80072d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072d6:	4a15      	ldr	r2, [pc, #84]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80072d8:	f043 0301 	orr.w	r3, r3, #1
 80072dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072de:	f7fc fb05 	bl	80038ec <HAL_GetTick>
 80072e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e6:	f7fc fb01 	bl	80038ec <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e180      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072f8:	4b0c      	ldr	r3, [pc, #48]	; (800732c <HAL_RCC_OscConfig+0x280>)
 80072fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0f0      	beq.n	80072e6 <HAL_RCC_OscConfig+0x23a>
 8007304:	e01a      	b.n	800733c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007306:	4b09      	ldr	r3, [pc, #36]	; (800732c <HAL_RCC_OscConfig+0x280>)
 8007308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800730a:	4a08      	ldr	r2, [pc, #32]	; (800732c <HAL_RCC_OscConfig+0x280>)
 800730c:	f023 0301 	bic.w	r3, r3, #1
 8007310:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007312:	f7fc faeb 	bl	80038ec <HAL_GetTick>
 8007316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007318:	e00a      	b.n	8007330 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800731a:	f7fc fae7 	bl	80038ec <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	2b02      	cmp	r3, #2
 8007326:	d903      	bls.n	8007330 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e166      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
 800732c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007330:	4b92      	ldr	r3, [pc, #584]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1ee      	bne.n	800731a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80a4 	beq.w	8007492 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800734a:	4b8c      	ldr	r3, [pc, #560]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10d      	bne.n	8007372 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007356:	4b89      	ldr	r3, [pc, #548]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735a:	4a88      	ldr	r2, [pc, #544]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800735c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007360:	6413      	str	r3, [r2, #64]	; 0x40
 8007362:	4b86      	ldr	r3, [pc, #536]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800736a:	60bb      	str	r3, [r7, #8]
 800736c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800736e:	2301      	movs	r3, #1
 8007370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007372:	4b83      	ldr	r3, [pc, #524]	; (8007580 <HAL_RCC_OscConfig+0x4d4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737a:	2b00      	cmp	r3, #0
 800737c:	d118      	bne.n	80073b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800737e:	4b80      	ldr	r3, [pc, #512]	; (8007580 <HAL_RCC_OscConfig+0x4d4>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a7f      	ldr	r2, [pc, #508]	; (8007580 <HAL_RCC_OscConfig+0x4d4>)
 8007384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800738a:	f7fc faaf 	bl	80038ec <HAL_GetTick>
 800738e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007390:	e008      	b.n	80073a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007392:	f7fc faab 	bl	80038ec <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b64      	cmp	r3, #100	; 0x64
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e12a      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a4:	4b76      	ldr	r3, [pc, #472]	; (8007580 <HAL_RCC_OscConfig+0x4d4>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0f0      	beq.n	8007392 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d106      	bne.n	80073c6 <HAL_RCC_OscConfig+0x31a>
 80073b8:	4b70      	ldr	r3, [pc, #448]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	4a6f      	ldr	r2, [pc, #444]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	6713      	str	r3, [r2, #112]	; 0x70
 80073c4:	e02d      	b.n	8007422 <HAL_RCC_OscConfig+0x376>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10c      	bne.n	80073e8 <HAL_RCC_OscConfig+0x33c>
 80073ce:	4b6b      	ldr	r3, [pc, #428]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	4a6a      	ldr	r2, [pc, #424]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	6713      	str	r3, [r2, #112]	; 0x70
 80073da:	4b68      	ldr	r3, [pc, #416]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073de:	4a67      	ldr	r2, [pc, #412]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073e0:	f023 0304 	bic.w	r3, r3, #4
 80073e4:	6713      	str	r3, [r2, #112]	; 0x70
 80073e6:	e01c      	b.n	8007422 <HAL_RCC_OscConfig+0x376>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2b05      	cmp	r3, #5
 80073ee:	d10c      	bne.n	800740a <HAL_RCC_OscConfig+0x35e>
 80073f0:	4b62      	ldr	r3, [pc, #392]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f4:	4a61      	ldr	r2, [pc, #388]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073f6:	f043 0304 	orr.w	r3, r3, #4
 80073fa:	6713      	str	r3, [r2, #112]	; 0x70
 80073fc:	4b5f      	ldr	r3, [pc, #380]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80073fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007400:	4a5e      	ldr	r2, [pc, #376]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007402:	f043 0301 	orr.w	r3, r3, #1
 8007406:	6713      	str	r3, [r2, #112]	; 0x70
 8007408:	e00b      	b.n	8007422 <HAL_RCC_OscConfig+0x376>
 800740a:	4b5c      	ldr	r3, [pc, #368]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800740c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740e:	4a5b      	ldr	r2, [pc, #364]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	6713      	str	r3, [r2, #112]	; 0x70
 8007416:	4b59      	ldr	r3, [pc, #356]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741a:	4a58      	ldr	r2, [pc, #352]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800741c:	f023 0304 	bic.w	r3, r3, #4
 8007420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d015      	beq.n	8007456 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800742a:	f7fc fa5f 	bl	80038ec <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007430:	e00a      	b.n	8007448 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007432:	f7fc fa5b 	bl	80038ec <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e0d8      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007448:	4b4c      	ldr	r3, [pc, #304]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800744a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d0ee      	beq.n	8007432 <HAL_RCC_OscConfig+0x386>
 8007454:	e014      	b.n	8007480 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007456:	f7fc fa49 	bl	80038ec <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800745c:	e00a      	b.n	8007474 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745e:	f7fc fa45 	bl	80038ec <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	f241 3288 	movw	r2, #5000	; 0x1388
 800746c:	4293      	cmp	r3, r2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e0c2      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007474:	4b41      	ldr	r3, [pc, #260]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1ee      	bne.n	800745e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007480:	7dfb      	ldrb	r3, [r7, #23]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d105      	bne.n	8007492 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007486:	4b3d      	ldr	r3, [pc, #244]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	4a3c      	ldr	r2, [pc, #240]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800748c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 80ae 	beq.w	80075f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800749c:	4b37      	ldr	r3, [pc, #220]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f003 030c 	and.w	r3, r3, #12
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d06d      	beq.n	8007584 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d14b      	bne.n	8007548 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b0:	4b32      	ldr	r3, [pc, #200]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a31      	ldr	r2, [pc, #196]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80074b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074bc:	f7fc fa16 	bl	80038ec <HAL_GetTick>
 80074c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c2:	e008      	b.n	80074d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074c4:	f7fc fa12 	bl	80038ec <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d901      	bls.n	80074d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e091      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074d6:	4b29      	ldr	r3, [pc, #164]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f0      	bne.n	80074c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69da      	ldr	r2, [r3, #28]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	019b      	lsls	r3, r3, #6
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	085b      	lsrs	r3, r3, #1
 80074fa:	3b01      	subs	r3, #1
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	061b      	lsls	r3, r3, #24
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	491b      	ldr	r1, [pc, #108]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007510:	4313      	orrs	r3, r2
 8007512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007514:	4b19      	ldr	r3, [pc, #100]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a18      	ldr	r2, [pc, #96]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800751a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800751e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007520:	f7fc f9e4 	bl	80038ec <HAL_GetTick>
 8007524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007526:	e008      	b.n	800753a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007528:	f7fc f9e0 	bl	80038ec <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	2b02      	cmp	r3, #2
 8007534:	d901      	bls.n	800753a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e05f      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800753a:	4b10      	ldr	r3, [pc, #64]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f0      	beq.n	8007528 <HAL_RCC_OscConfig+0x47c>
 8007546:	e057      	b.n	80075f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007548:	4b0c      	ldr	r3, [pc, #48]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a0b      	ldr	r2, [pc, #44]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 800754e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007554:	f7fc f9ca 	bl	80038ec <HAL_GetTick>
 8007558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800755a:	e008      	b.n	800756e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800755c:	f7fc f9c6 	bl	80038ec <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d901      	bls.n	800756e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e045      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800756e:	4b03      	ldr	r3, [pc, #12]	; (800757c <HAL_RCC_OscConfig+0x4d0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1f0      	bne.n	800755c <HAL_RCC_OscConfig+0x4b0>
 800757a:	e03d      	b.n	80075f8 <HAL_RCC_OscConfig+0x54c>
 800757c:	40023800 	.word	0x40023800
 8007580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007584:	4b1f      	ldr	r3, [pc, #124]	; (8007604 <HAL_RCC_OscConfig+0x558>)
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d030      	beq.n	80075f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800759c:	429a      	cmp	r2, r3
 800759e:	d129      	bne.n	80075f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d122      	bne.n	80075f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80075b4:	4013      	ands	r3, r2
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075bc:	4293      	cmp	r3, r2
 80075be:	d119      	bne.n	80075f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	3b01      	subs	r3, #1
 80075ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d10f      	bne.n	80075f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d107      	bne.n	80075f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d001      	beq.n	80075f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	40023800 	.word	0x40023800

08007608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0d0      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007620:	4b6a      	ldr	r3, [pc, #424]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d910      	bls.n	8007650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762e:	4b67      	ldr	r3, [pc, #412]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f023 020f 	bic.w	r2, r3, #15
 8007636:	4965      	ldr	r1, [pc, #404]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	4313      	orrs	r3, r2
 800763c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800763e:	4b63      	ldr	r3, [pc, #396]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	429a      	cmp	r2, r3
 800764a:	d001      	beq.n	8007650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e0b8      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d020      	beq.n	800769e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007668:	4b59      	ldr	r3, [pc, #356]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	4a58      	ldr	r2, [pc, #352]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 800766e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d005      	beq.n	800768c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007680:	4b53      	ldr	r3, [pc, #332]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	4a52      	ldr	r2, [pc, #328]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800768a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800768c:	4b50      	ldr	r3, [pc, #320]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	494d      	ldr	r1, [pc, #308]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 800769a:	4313      	orrs	r3, r2
 800769c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d040      	beq.n	800772c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d107      	bne.n	80076c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b2:	4b47      	ldr	r3, [pc, #284]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d115      	bne.n	80076ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e07f      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d107      	bne.n	80076da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076ca:	4b41      	ldr	r3, [pc, #260]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d109      	bne.n	80076ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e073      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076da:	4b3d      	ldr	r3, [pc, #244]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e06b      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076ea:	4b39      	ldr	r3, [pc, #228]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f023 0203 	bic.w	r2, r3, #3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	4936      	ldr	r1, [pc, #216]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fc:	f7fc f8f6 	bl	80038ec <HAL_GetTick>
 8007700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007702:	e00a      	b.n	800771a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007704:	f7fc f8f2 	bl	80038ec <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007712:	4293      	cmp	r3, r2
 8007714:	d901      	bls.n	800771a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e053      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800771a:	4b2d      	ldr	r3, [pc, #180]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 020c 	and.w	r2, r3, #12
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	429a      	cmp	r2, r3
 800772a:	d1eb      	bne.n	8007704 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800772c:	4b27      	ldr	r3, [pc, #156]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d210      	bcs.n	800775c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800773a:	4b24      	ldr	r3, [pc, #144]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f023 020f 	bic.w	r2, r3, #15
 8007742:	4922      	ldr	r1, [pc, #136]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	4313      	orrs	r3, r2
 8007748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800774a:	4b20      	ldr	r3, [pc, #128]	; (80077cc <HAL_RCC_ClockConfig+0x1c4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	429a      	cmp	r2, r3
 8007756:	d001      	beq.n	800775c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e032      	b.n	80077c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007768:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	4916      	ldr	r1, [pc, #88]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007776:	4313      	orrs	r3, r2
 8007778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007786:	4b12      	ldr	r3, [pc, #72]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	490e      	ldr	r1, [pc, #56]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007796:	4313      	orrs	r3, r2
 8007798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800779a:	f000 f831 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 800779e:	4601      	mov	r1, r0
 80077a0:	4b0b      	ldr	r3, [pc, #44]	; (80077d0 <HAL_RCC_ClockConfig+0x1c8>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	091b      	lsrs	r3, r3, #4
 80077a6:	f003 030f 	and.w	r3, r3, #15
 80077aa:	4a0a      	ldr	r2, [pc, #40]	; (80077d4 <HAL_RCC_ClockConfig+0x1cc>)
 80077ac:	5cd3      	ldrb	r3, [r2, r3]
 80077ae:	fa21 f303 	lsr.w	r3, r1, r3
 80077b2:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <HAL_RCC_ClockConfig+0x1d0>)
 80077b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80077b6:	4b09      	ldr	r3, [pc, #36]	; (80077dc <HAL_RCC_ClockConfig+0x1d4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fc f852 	bl	8003864 <HAL_InitTick>

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40023c00 	.word	0x40023c00
 80077d0:	40023800 	.word	0x40023800
 80077d4:	08012620 	.word	0x08012620
 80077d8:	20000004 	.word	0x20000004
 80077dc:	20000020 	.word	0x20000020

080077e0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <HAL_RCC_EnableCSS+0x1c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a04      	ldr	r2, [pc, #16]	; (80077fc <HAL_RCC_EnableCSS+0x1c>)
 80077ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077ee:	6013      	str	r3, [r2, #0]
}
 80077f0:	bf00      	nop
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40023800 	.word	0x40023800

08007800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	2300      	movs	r3, #0
 8007810:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007816:	4b50      	ldr	r3, [pc, #320]	; (8007958 <HAL_RCC_GetSysClockFreq+0x158>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 030c 	and.w	r3, r3, #12
 800781e:	2b04      	cmp	r3, #4
 8007820:	d007      	beq.n	8007832 <HAL_RCC_GetSysClockFreq+0x32>
 8007822:	2b08      	cmp	r3, #8
 8007824:	d008      	beq.n	8007838 <HAL_RCC_GetSysClockFreq+0x38>
 8007826:	2b00      	cmp	r3, #0
 8007828:	f040 808d 	bne.w	8007946 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800782c:	4b4b      	ldr	r3, [pc, #300]	; (800795c <HAL_RCC_GetSysClockFreq+0x15c>)
 800782e:	60bb      	str	r3, [r7, #8]
      break;
 8007830:	e08c      	b.n	800794c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007832:	4b4b      	ldr	r3, [pc, #300]	; (8007960 <HAL_RCC_GetSysClockFreq+0x160>)
 8007834:	60bb      	str	r3, [r7, #8]
      break;
 8007836:	e089      	b.n	800794c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007838:	4b47      	ldr	r3, [pc, #284]	; (8007958 <HAL_RCC_GetSysClockFreq+0x158>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007840:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007842:	4b45      	ldr	r3, [pc, #276]	; (8007958 <HAL_RCC_GetSysClockFreq+0x158>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d023      	beq.n	8007896 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800784e:	4b42      	ldr	r3, [pc, #264]	; (8007958 <HAL_RCC_GetSysClockFreq+0x158>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	099b      	lsrs	r3, r3, #6
 8007854:	f04f 0400 	mov.w	r4, #0
 8007858:	f240 11ff 	movw	r1, #511	; 0x1ff
 800785c:	f04f 0200 	mov.w	r2, #0
 8007860:	ea03 0501 	and.w	r5, r3, r1
 8007864:	ea04 0602 	and.w	r6, r4, r2
 8007868:	4a3d      	ldr	r2, [pc, #244]	; (8007960 <HAL_RCC_GetSysClockFreq+0x160>)
 800786a:	fb02 f106 	mul.w	r1, r2, r6
 800786e:	2200      	movs	r2, #0
 8007870:	fb02 f205 	mul.w	r2, r2, r5
 8007874:	440a      	add	r2, r1
 8007876:	493a      	ldr	r1, [pc, #232]	; (8007960 <HAL_RCC_GetSysClockFreq+0x160>)
 8007878:	fba5 0101 	umull	r0, r1, r5, r1
 800787c:	1853      	adds	r3, r2, r1
 800787e:	4619      	mov	r1, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f04f 0400 	mov.w	r4, #0
 8007886:	461a      	mov	r2, r3
 8007888:	4623      	mov	r3, r4
 800788a:	f7f8 fd31 	bl	80002f0 <__aeabi_uldivmod>
 800788e:	4603      	mov	r3, r0
 8007890:	460c      	mov	r4, r1
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e049      	b.n	800792a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007896:	4b30      	ldr	r3, [pc, #192]	; (8007958 <HAL_RCC_GetSysClockFreq+0x158>)
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	099b      	lsrs	r3, r3, #6
 800789c:	f04f 0400 	mov.w	r4, #0
 80078a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	ea03 0501 	and.w	r5, r3, r1
 80078ac:	ea04 0602 	and.w	r6, r4, r2
 80078b0:	4629      	mov	r1, r5
 80078b2:	4632      	mov	r2, r6
 80078b4:	f04f 0300 	mov.w	r3, #0
 80078b8:	f04f 0400 	mov.w	r4, #0
 80078bc:	0154      	lsls	r4, r2, #5
 80078be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80078c2:	014b      	lsls	r3, r1, #5
 80078c4:	4619      	mov	r1, r3
 80078c6:	4622      	mov	r2, r4
 80078c8:	1b49      	subs	r1, r1, r5
 80078ca:	eb62 0206 	sbc.w	r2, r2, r6
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	f04f 0400 	mov.w	r4, #0
 80078d6:	0194      	lsls	r4, r2, #6
 80078d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80078dc:	018b      	lsls	r3, r1, #6
 80078de:	1a5b      	subs	r3, r3, r1
 80078e0:	eb64 0402 	sbc.w	r4, r4, r2
 80078e4:	f04f 0100 	mov.w	r1, #0
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	00e2      	lsls	r2, r4, #3
 80078ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80078f2:	00d9      	lsls	r1, r3, #3
 80078f4:	460b      	mov	r3, r1
 80078f6:	4614      	mov	r4, r2
 80078f8:	195b      	adds	r3, r3, r5
 80078fa:	eb44 0406 	adc.w	r4, r4, r6
 80078fe:	f04f 0100 	mov.w	r1, #0
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	02a2      	lsls	r2, r4, #10
 8007908:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800790c:	0299      	lsls	r1, r3, #10
 800790e:	460b      	mov	r3, r1
 8007910:	4614      	mov	r4, r2
 8007912:	4618      	mov	r0, r3
 8007914:	4621      	mov	r1, r4
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f04f 0400 	mov.w	r4, #0
 800791c:	461a      	mov	r2, r3
 800791e:	4623      	mov	r3, r4
 8007920:	f7f8 fce6 	bl	80002f0 <__aeabi_uldivmod>
 8007924:	4603      	mov	r3, r0
 8007926:	460c      	mov	r4, r1
 8007928:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <HAL_RCC_GetSysClockFreq+0x158>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	0c1b      	lsrs	r3, r3, #16
 8007930:	f003 0303 	and.w	r3, r3, #3
 8007934:	3301      	adds	r3, #1
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007942:	60bb      	str	r3, [r7, #8]
      break;
 8007944:	e002      	b.n	800794c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007946:	4b05      	ldr	r3, [pc, #20]	; (800795c <HAL_RCC_GetSysClockFreq+0x15c>)
 8007948:	60bb      	str	r3, [r7, #8]
      break;
 800794a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800794c:	68bb      	ldr	r3, [r7, #8]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007956:	bf00      	nop
 8007958:	40023800 	.word	0x40023800
 800795c:	00f42400 	.word	0x00f42400
 8007960:	017d7840 	.word	0x017d7840

08007964 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007968:	4b03      	ldr	r3, [pc, #12]	; (8007978 <HAL_RCC_GetHCLKFreq+0x14>)
 800796a:	681b      	ldr	r3, [r3, #0]
}
 800796c:	4618      	mov	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000004 	.word	0x20000004

0800797c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007980:	f7ff fff0 	bl	8007964 <HAL_RCC_GetHCLKFreq>
 8007984:	4601      	mov	r1, r0
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	0a9b      	lsrs	r3, r3, #10
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	4a03      	ldr	r2, [pc, #12]	; (80079a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007992:	5cd3      	ldrb	r3, [r2, r3]
 8007994:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007998:	4618      	mov	r0, r3
 800799a:	bd80      	pop	{r7, pc}
 800799c:	40023800 	.word	0x40023800
 80079a0:	08012630 	.word	0x08012630

080079a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079a8:	f7ff ffdc 	bl	8007964 <HAL_RCC_GetHCLKFreq>
 80079ac:	4601      	mov	r1, r0
 80079ae:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	0b5b      	lsrs	r3, r3, #13
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	4a03      	ldr	r2, [pc, #12]	; (80079c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079ba:	5cd3      	ldrb	r3, [r2, r3]
 80079bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40023800 	.word	0x40023800
 80079c8:	08012630 	.word	0x08012630

080079cc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80079d0:	4b06      	ldr	r3, [pc, #24]	; (80079ec <HAL_RCC_NMI_IRQHandler+0x20>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d104      	bne.n	80079e6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80079dc:	f000 f80a 	bl	80079f4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80079e0:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80079e2:	2280      	movs	r2, #128	; 0x80
 80079e4:	701a      	strb	r2, [r3, #0]
  }
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	40023800 	.word	0x40023800
 80079f0:	4002380e 	.word	0x4002380e

080079f4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0301 	and.w	r3, r3, #1
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d012      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a2c:	4b69      	ldr	r3, [pc, #420]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	4a68      	ldr	r2, [pc, #416]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a36:	6093      	str	r3, [r2, #8]
 8007a38:	4b66      	ldr	r3, [pc, #408]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a40:	4964      	ldr	r1, [pc, #400]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a42:	4313      	orrs	r3, r2
 8007a44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d017      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a5e:	4b5d      	ldr	r3, [pc, #372]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6c:	4959      	ldr	r1, [pc, #356]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a7c:	d101      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d017      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a9a:	4b4e      	ldr	r3, [pc, #312]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	494a      	ldr	r1, [pc, #296]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ab8:	d101      	bne.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007aba:	2301      	movs	r3, #1
 8007abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 808b 	beq.w	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ae8:	4b3a      	ldr	r3, [pc, #232]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	4a39      	ldr	r2, [pc, #228]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007af2:	6413      	str	r3, [r2, #64]	; 0x40
 8007af4:	4b37      	ldr	r3, [pc, #220]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007afc:	60bb      	str	r3, [r7, #8]
 8007afe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007b00:	4b35      	ldr	r3, [pc, #212]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a34      	ldr	r2, [pc, #208]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b0c:	f7fb feee 	bl	80038ec <HAL_GetTick>
 8007b10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b12:	e008      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b14:	f7fb feea 	bl	80038ec <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b64      	cmp	r3, #100	; 0x64
 8007b20:	d901      	bls.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	e38d      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b26:	4b2c      	ldr	r3, [pc, #176]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d0f0      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b32:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d035      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d02e      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b50:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b5a:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5e:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b66:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6a:	4a1a      	ldr	r2, [pc, #104]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b72:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b78:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d114      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b84:	f7fb feb2 	bl	80038ec <HAL_GetTick>
 8007b88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b8a:	e00a      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b8c:	f7fb feae 	bl	80038ec <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e34f      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ba2:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0ee      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bba:	d111      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bc8:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bca:	400b      	ands	r3, r1
 8007bcc:	4901      	ldr	r1, [pc, #4]	; (8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	608b      	str	r3, [r1, #8]
 8007bd2:	e00b      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40007000 	.word	0x40007000
 8007bdc:	0ffffcff 	.word	0x0ffffcff
 8007be0:	4bb3      	ldr	r3, [pc, #716]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	4ab2      	ldr	r2, [pc, #712]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007be6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007bea:	6093      	str	r3, [r2, #8]
 8007bec:	4bb0      	ldr	r3, [pc, #704]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf8:	49ad      	ldr	r1, [pc, #692]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0310 	and.w	r3, r3, #16
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d010      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c0a:	4ba9      	ldr	r3, [pc, #676]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c10:	4aa7      	ldr	r2, [pc, #668]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007c1a:	4ba5      	ldr	r3, [pc, #660]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c24:	49a2      	ldr	r1, [pc, #648]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c38:	4b9d      	ldr	r3, [pc, #628]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c46:	499a      	ldr	r1, [pc, #616]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c5a:	4b95      	ldr	r3, [pc, #596]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c68:	4991      	ldr	r1, [pc, #580]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c7c:	4b8c      	ldr	r3, [pc, #560]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c8a:	4989      	ldr	r1, [pc, #548]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c9e:	4b84      	ldr	r3, [pc, #528]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cac:	4980      	ldr	r1, [pc, #512]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cc0:	4b7b      	ldr	r3, [pc, #492]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	f023 0203 	bic.w	r2, r3, #3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cce:	4978      	ldr	r1, [pc, #480]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ce2:	4b73      	ldr	r3, [pc, #460]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce8:	f023 020c 	bic.w	r2, r3, #12
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf0:	496f      	ldr	r1, [pc, #444]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007d04:	4b6a      	ldr	r3, [pc, #424]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d12:	4967      	ldr	r1, [pc, #412]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d26:	4b62      	ldr	r3, [pc, #392]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d34:	495e      	ldr	r1, [pc, #376]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d48:	4b59      	ldr	r3, [pc, #356]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d56:	4956      	ldr	r1, [pc, #344]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d6a:	4b51      	ldr	r3, [pc, #324]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d78:	494d      	ldr	r1, [pc, #308]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d8c:	4b48      	ldr	r3, [pc, #288]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9a:	4945      	ldr	r1, [pc, #276]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007dae:	4b40      	ldr	r3, [pc, #256]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dbc:	493c      	ldr	r1, [pc, #240]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dd0:	4b37      	ldr	r3, [pc, #220]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dde:	4934      	ldr	r1, [pc, #208]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d011      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007df2:	4b2f      	ldr	r3, [pc, #188]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e00:	492b      	ldr	r1, [pc, #172]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e10:	d101      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007e12:	2301      	movs	r3, #1
 8007e14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007e22:	2301      	movs	r3, #1
 8007e24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00a      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e32:	4b1f      	ldr	r3, [pc, #124]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e40:	491b      	ldr	r1, [pc, #108]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e54:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e64:	4912      	ldr	r1, [pc, #72]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00b      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007e78:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e88:	4909      	ldr	r1, [pc, #36]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00f      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e9c:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eac:	e002      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007eae:	bf00      	nop
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	4985      	ldr	r1, [pc, #532]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007ec8:	4b80      	ldr	r3, [pc, #512]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ece:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ed8:	497c      	ldr	r1, [pc, #496]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007eda:	4313      	orrs	r3, r2
 8007edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d005      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eee:	f040 80d6 	bne.w	800809e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ef2:	4b76      	ldr	r3, [pc, #472]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a75      	ldr	r2, [pc, #468]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007ef8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007efe:	f7fb fcf5 	bl	80038ec <HAL_GetTick>
 8007f02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f04:	e008      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f06:	f7fb fcf1 	bl	80038ec <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	2b64      	cmp	r3, #100	; 0x64
 8007f12:	d901      	bls.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e194      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f18:	4b6c      	ldr	r3, [pc, #432]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1f0      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0301 	and.w	r3, r3, #1
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d021      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d11d      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f38:	4b64      	ldr	r3, [pc, #400]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3e:	0c1b      	lsrs	r3, r3, #16
 8007f40:	f003 0303 	and.w	r3, r3, #3
 8007f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f46:	4b61      	ldr	r3, [pc, #388]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f4c:	0e1b      	lsrs	r3, r3, #24
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	019a      	lsls	r2, r3, #6
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	041b      	lsls	r3, r3, #16
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	061b      	lsls	r3, r3, #24
 8007f64:	431a      	orrs	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	071b      	lsls	r3, r3, #28
 8007f6c:	4957      	ldr	r1, [pc, #348]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d004      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f88:	d00a      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d02e      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f9e:	d129      	bne.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007fa0:	4b4a      	ldr	r3, [pc, #296]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa6:	0c1b      	lsrs	r3, r3, #16
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fae:	4b47      	ldr	r3, [pc, #284]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fb4:	0f1b      	lsrs	r3, r3, #28
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	019a      	lsls	r2, r3, #6
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	041b      	lsls	r3, r3, #16
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	061b      	lsls	r3, r3, #24
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	071b      	lsls	r3, r3, #28
 8007fd4:	493d      	ldr	r1, [pc, #244]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007fdc:	4b3b      	ldr	r3, [pc, #236]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe2:	f023 021f 	bic.w	r2, r3, #31
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	3b01      	subs	r3, #1
 8007fec:	4937      	ldr	r1, [pc, #220]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01d      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008000:	4b32      	ldr	r3, [pc, #200]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008006:	0e1b      	lsrs	r3, r3, #24
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800800e:	4b2f      	ldr	r3, [pc, #188]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008014:	0f1b      	lsrs	r3, r3, #28
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	019a      	lsls	r2, r3, #6
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	041b      	lsls	r3, r3, #16
 8008028:	431a      	orrs	r2, r3
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	061b      	lsls	r3, r3, #24
 800802e:	431a      	orrs	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	071b      	lsls	r3, r3, #28
 8008034:	4925      	ldr	r1, [pc, #148]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d011      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	019a      	lsls	r2, r3, #6
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	061b      	lsls	r3, r3, #24
 800805c:	431a      	orrs	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	071b      	lsls	r3, r3, #28
 8008064:	4919      	ldr	r1, [pc, #100]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008066:	4313      	orrs	r3, r2
 8008068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800806c:	4b17      	ldr	r3, [pc, #92]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a16      	ldr	r2, [pc, #88]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008078:	f7fb fc38 	bl	80038ec <HAL_GetTick>
 800807c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800807e:	e008      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008080:	f7fb fc34 	bl	80038ec <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b64      	cmp	r3, #100	; 0x64
 800808c:	d901      	bls.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e0d7      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008092:	4b0e      	ldr	r3, [pc, #56]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0f0      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	f040 80cd 	bne.w	8008240 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80080a6:	4b09      	ldr	r3, [pc, #36]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a08      	ldr	r2, [pc, #32]	; (80080cc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80080ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b2:	f7fb fc1b 	bl	80038ec <HAL_GetTick>
 80080b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080b8:	e00a      	b.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080ba:	f7fb fc17 	bl	80038ec <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b64      	cmp	r3, #100	; 0x64
 80080c6:	d903      	bls.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e0ba      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80080cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80080d0:	4b5e      	ldr	r3, [pc, #376]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080dc:	d0ed      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d009      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d02e      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	2b00      	cmp	r3, #0
 8008104:	d12a      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008106:	4b51      	ldr	r3, [pc, #324]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810c:	0c1b      	lsrs	r3, r3, #16
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008114:	4b4d      	ldr	r3, [pc, #308]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800811a:	0f1b      	lsrs	r3, r3, #28
 800811c:	f003 0307 	and.w	r3, r3, #7
 8008120:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	019a      	lsls	r2, r3, #6
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	041b      	lsls	r3, r3, #16
 800812c:	431a      	orrs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	061b      	lsls	r3, r3, #24
 8008134:	431a      	orrs	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	071b      	lsls	r3, r3, #28
 800813a:	4944      	ldr	r1, [pc, #272]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800813c:	4313      	orrs	r3, r2
 800813e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008142:	4b42      	ldr	r3, [pc, #264]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008148:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	3b01      	subs	r3, #1
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	493d      	ldr	r1, [pc, #244]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008156:	4313      	orrs	r3, r2
 8008158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d022      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800816c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008170:	d11d      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008172:	4b36      	ldr	r3, [pc, #216]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008178:	0e1b      	lsrs	r3, r3, #24
 800817a:	f003 030f 	and.w	r3, r3, #15
 800817e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008180:	4b32      	ldr	r3, [pc, #200]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008186:	0f1b      	lsrs	r3, r3, #28
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	019a      	lsls	r2, r3, #6
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	041b      	lsls	r3, r3, #16
 800819a:	431a      	orrs	r2, r3
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	061b      	lsls	r3, r3, #24
 80081a0:	431a      	orrs	r2, r3
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	071b      	lsls	r3, r3, #28
 80081a6:	4929      	ldr	r1, [pc, #164]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d028      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081ba:	4b24      	ldr	r3, [pc, #144]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80081bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c0:	0e1b      	lsrs	r3, r3, #24
 80081c2:	f003 030f 	and.w	r3, r3, #15
 80081c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80081c8:	4b20      	ldr	r3, [pc, #128]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80081ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ce:	0c1b      	lsrs	r3, r3, #16
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	019a      	lsls	r2, r3, #6
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	431a      	orrs	r2, r3
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	061b      	lsls	r3, r3, #24
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	071b      	lsls	r3, r3, #28
 80081ee:	4917      	ldr	r1, [pc, #92]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80081f6:	4b15      	ldr	r3, [pc, #84]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80081f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	4911      	ldr	r1, [pc, #68]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008206:	4313      	orrs	r3, r2
 8008208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800820c:	4b0f      	ldr	r3, [pc, #60]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a0e      	ldr	r2, [pc, #56]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008218:	f7fb fb68 	bl	80038ec <HAL_GetTick>
 800821c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800821e:	e008      	b.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008220:	f7fb fb64 	bl	80038ec <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	2b64      	cmp	r3, #100	; 0x64
 800822c:	d901      	bls.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e007      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008232:	4b06      	ldr	r3, [pc, #24]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800823a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800823e:	d1ef      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3720      	adds	r7, #32
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	40023800 	.word	0x40023800

08008250 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e06b      	b.n	800833a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7f5b      	ldrb	r3, [r3, #29]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d105      	bne.n	8008278 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fa fe82 	bl	8002f7c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	22ca      	movs	r2, #202	; 0xca
 8008284:	625a      	str	r2, [r3, #36]	; 0x24
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2253      	movs	r2, #83	; 0x53
 800828c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f9e8 	bl	8008664 <RTC_EnterInitMode>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d008      	beq.n	80082ac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	22ff      	movs	r2, #255	; 0xff
 80082a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2204      	movs	r2, #4
 80082a6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e046      	b.n	800833a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6899      	ldr	r1, [r3, #8]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b23      	ldr	r3, [pc, #140]	; (8008344 <HAL_RTC_Init+0xf4>)
 80082b8:	400b      	ands	r3, r1
 80082ba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6899      	ldr	r1, [r3, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	68d2      	ldr	r2, [r2, #12]
 80082e2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6919      	ldr	r1, [r3, #16]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	041a      	lsls	r2, r3, #16
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	430a      	orrs	r2, r1
 80082f6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68da      	ldr	r2, [r3, #12]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008306:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f022 0208 	bic.w	r2, r2, #8
 8008316:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	22ff      	movs	r2, #255	; 0xff
 8008330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008338:	2300      	movs	r3, #0
  }
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	ff8fffbf 	.word	0xff8fffbf

08008348 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008348:	b590      	push	{r4, r7, lr}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	7f1b      	ldrb	r3, [r3, #28]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d101      	bne.n	8008364 <HAL_RTC_SetTime+0x1c>
 8008360:	2302      	movs	r3, #2
 8008362:	e0a8      	b.n	80084b6 <HAL_RTC_SetTime+0x16e>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2202      	movs	r2, #2
 800836e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d126      	bne.n	80083c4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	d102      	bne.n	800838a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	2200      	movs	r2, #0
 8008388:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	4618      	mov	r0, r3
 8008390:	f000 f994 	bl	80086bc <RTC_ByteToBcd2>
 8008394:	4603      	mov	r3, r0
 8008396:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	785b      	ldrb	r3, [r3, #1]
 800839c:	4618      	mov	r0, r3
 800839e:	f000 f98d 	bl	80086bc <RTC_ByteToBcd2>
 80083a2:	4603      	mov	r3, r0
 80083a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083a6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	789b      	ldrb	r3, [r3, #2]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f000 f985 	bl	80086bc <RTC_ByteToBcd2>
 80083b2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80083b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	7b1b      	ldrb	r3, [r3, #12]
 80083bc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80083be:	4313      	orrs	r3, r2
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	e018      	b.n	80083f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	2200      	movs	r2, #0
 80083d6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	785b      	ldrb	r3, [r3, #1]
 80083e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80083e4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80083ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	7b1b      	ldrb	r3, [r3, #12]
 80083f0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	22ca      	movs	r2, #202	; 0xca
 80083fc:	625a      	str	r2, [r3, #36]	; 0x24
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2253      	movs	r2, #83	; 0x53
 8008404:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f000 f92c 	bl	8008664 <RTC_EnterInitMode>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	22ff      	movs	r2, #255	; 0xff
 8008418:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2204      	movs	r2, #4
 800841e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e045      	b.n	80084b6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	6979      	ldr	r1, [r7, #20]
 8008430:	4b23      	ldr	r3, [pc, #140]	; (80084c0 <HAL_RTC_SetTime+0x178>)
 8008432:	400b      	ands	r3, r1
 8008434:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008444:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6899      	ldr	r1, [r3, #8]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	695b      	ldr	r3, [r3, #20]
 8008454:	431a      	orrs	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800846c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f003 0320 	and.w	r3, r3, #32
 8008478:	2b00      	cmp	r3, #0
 800847a:	d111      	bne.n	80084a0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f8c9 	bl	8008614 <HAL_RTC_WaitForSynchro>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00b      	beq.n	80084a0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	22ff      	movs	r2, #255	; 0xff
 800848e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2204      	movs	r2, #4
 8008494:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e00a      	b.n	80084b6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2201      	movs	r2, #1
 80084ac:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80084b4:	2300      	movs	r3, #0
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd90      	pop	{r4, r7, pc}
 80084be:	bf00      	nop
 80084c0:	007f7f7f 	.word	0x007f7f7f

080084c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	7f1b      	ldrb	r3, [r3, #28]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_RTC_SetDate+0x1c>
 80084dc:	2302      	movs	r3, #2
 80084de:	e092      	b.n	8008606 <HAL_RTC_SetDate+0x142>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2202      	movs	r2, #2
 80084ea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10e      	bne.n	8008510 <HAL_RTC_SetDate+0x4c>
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	f003 0310 	and.w	r3, r3, #16
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d008      	beq.n	8008510 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	785b      	ldrb	r3, [r3, #1]
 8008502:	f023 0310 	bic.w	r3, r3, #16
 8008506:	b2db      	uxtb	r3, r3
 8008508:	330a      	adds	r3, #10
 800850a:	b2da      	uxtb	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d11c      	bne.n	8008550 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	78db      	ldrb	r3, [r3, #3]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f8ce 	bl	80086bc <RTC_ByteToBcd2>
 8008520:	4603      	mov	r3, r0
 8008522:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	785b      	ldrb	r3, [r3, #1]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f8c7 	bl	80086bc <RTC_ByteToBcd2>
 800852e:	4603      	mov	r3, r0
 8008530:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008532:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	789b      	ldrb	r3, [r3, #2]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 f8bf 	bl	80086bc <RTC_ByteToBcd2>
 800853e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008540:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	e00e      	b.n	800856e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	78db      	ldrb	r3, [r3, #3]
 8008554:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800855c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008562:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800856a:	4313      	orrs	r3, r2
 800856c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	22ca      	movs	r2, #202	; 0xca
 8008574:	625a      	str	r2, [r3, #36]	; 0x24
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2253      	movs	r2, #83	; 0x53
 800857c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 f870 	bl	8008664 <RTC_EnterInitMode>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	22ff      	movs	r2, #255	; 0xff
 8008590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2204      	movs	r2, #4
 8008596:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e031      	b.n	8008606 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	6979      	ldr	r1, [r7, #20]
 80085a8:	4b19      	ldr	r3, [pc, #100]	; (8008610 <HAL_RTC_SetDate+0x14c>)
 80085aa:	400b      	ands	r3, r1
 80085ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f003 0320 	and.w	r3, r3, #32
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d111      	bne.n	80085f0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f821 	bl	8008614 <HAL_RTC_WaitForSynchro>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	22ff      	movs	r2, #255	; 0xff
 80085de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2204      	movs	r2, #4
 80085e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e00a      	b.n	8008606 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	22ff      	movs	r2, #255	; 0xff
 80085f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008604:	2300      	movs	r3, #0
  }
}
 8008606:	4618      	mov	r0, r3
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	bd90      	pop	{r4, r7, pc}
 800860e:	bf00      	nop
 8008610:	00ffff3f 	.word	0x00ffff3f

08008614 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800862e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008630:	f7fb f95c 	bl	80038ec <HAL_GetTick>
 8008634:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008636:	e009      	b.n	800864c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008638:	f7fb f958 	bl	80038ec <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008646:	d901      	bls.n	800864c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e007      	b.n	800865c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0ee      	beq.n	8008638 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d119      	bne.n	80086b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008688:	f7fb f930 	bl	80038ec <HAL_GetTick>
 800868c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800868e:	e009      	b.n	80086a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008690:	f7fb f92c 	bl	80038ec <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800869e:	d901      	bls.n	80086a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e007      	b.n	80086b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d0ee      	beq.n	8008690 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80086ca:	e005      	b.n	80086d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	3b0a      	subs	r3, #10
 80086d6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b09      	cmp	r3, #9
 80086dc:	d8f6      	bhi.n	80086cc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	011b      	lsls	r3, r3, #4
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	b2db      	uxtb	r3, r3
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e084      	b.n	8008814 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008716:	b2db      	uxtb	r3, r3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7fa fca5 	bl	8003074 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008740:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800874a:	d902      	bls.n	8008752 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e002      	b.n	8008758 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008756:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008760:	d007      	beq.n	8008772 <HAL_SPI_Init+0x7a>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800876a:	d002      	beq.n	8008772 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10b      	bne.n	8008792 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008782:	d903      	bls.n	800878c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2202      	movs	r2, #2
 8008788:	631a      	str	r2, [r3, #48]	; 0x30
 800878a:	e002      	b.n	8008792 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	431a      	orrs	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	ea42 0103 	orr.w	r1, r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	0c1b      	lsrs	r3, r3, #16
 80087d2:	f003 0204 	and.w	r2, r3, #4
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	431a      	orrs	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e0:	431a      	orrs	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	ea42 0103 	orr.w	r1, r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	69da      	ldr	r2, [r3, #28]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	4613      	mov	r3, r2
 800882a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008836:	2b01      	cmp	r3, #1
 8008838:	d101      	bne.n	800883e <HAL_SPI_Transmit+0x22>
 800883a:	2302      	movs	r3, #2
 800883c:	e150      	b.n	8008ae0 <HAL_SPI_Transmit+0x2c4>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008846:	f7fb f851 	bl	80038ec <HAL_GetTick>
 800884a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800884c:	88fb      	ldrh	r3, [r7, #6]
 800884e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b01      	cmp	r3, #1
 800885a:	d002      	beq.n	8008862 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800885c:	2302      	movs	r3, #2
 800885e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008860:	e135      	b.n	8008ace <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <HAL_SPI_Transmit+0x52>
 8008868:	88fb      	ldrh	r3, [r7, #6]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008872:	e12c      	b.n	8008ace <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2203      	movs	r2, #3
 8008878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	88fa      	ldrh	r2, [r7, #6]
 800888c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	88fa      	ldrh	r2, [r7, #6]
 8008892:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088be:	d107      	bne.n	80088d0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d007      	beq.n	80088ee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80088f6:	d94b      	bls.n	8008990 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <HAL_SPI_Transmit+0xea>
 8008900:	8afb      	ldrh	r3, [r7, #22]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d13e      	bne.n	8008984 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	881a      	ldrh	r2, [r3, #0]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	1c9a      	adds	r2, r3, #2
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008920:	b29b      	uxth	r3, r3
 8008922:	3b01      	subs	r3, #1
 8008924:	b29a      	uxth	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800892a:	e02b      	b.n	8008984 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b02      	cmp	r3, #2
 8008938:	d112      	bne.n	8008960 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	881a      	ldrh	r2, [r3, #0]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	1c9a      	adds	r2, r3, #2
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800895e:	e011      	b.n	8008984 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008960:	f7fa ffc4 	bl	80038ec <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d803      	bhi.n	8008978 <HAL_SPI_Transmit+0x15c>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008976:	d102      	bne.n	800897e <HAL_SPI_Transmit+0x162>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008982:	e0a4      	b.n	8008ace <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008988:	b29b      	uxth	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1ce      	bne.n	800892c <HAL_SPI_Transmit+0x110>
 800898e:	e07c      	b.n	8008a8a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_SPI_Transmit+0x182>
 8008998:	8afb      	ldrh	r3, [r7, #22]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d170      	bne.n	8008a80 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d912      	bls.n	80089ce <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ac:	881a      	ldrh	r2, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b8:	1c9a      	adds	r2, r3, #2
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3b02      	subs	r3, #2
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80089cc:	e058      	b.n	8008a80 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	330c      	adds	r3, #12
 80089d8:	7812      	ldrb	r2, [r2, #0]
 80089da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80089f4:	e044      	b.n	8008a80 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d12b      	bne.n	8008a5c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d912      	bls.n	8008a34 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	881a      	ldrh	r2, [r3, #0]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	1c9a      	adds	r2, r3, #2
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3b02      	subs	r3, #2
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a32:	e025      	b.n	8008a80 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	7812      	ldrb	r2, [r2, #0]
 8008a40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	3b01      	subs	r3, #1
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008a5a:	e011      	b.n	8008a80 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a5c:	f7fa ff46 	bl	80038ec <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	683a      	ldr	r2, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d803      	bhi.n	8008a74 <HAL_SPI_Transmit+0x258>
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a72:	d102      	bne.n	8008a7a <HAL_SPI_Transmit+0x25e>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a7e:	e026      	b.n	8008ace <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1b5      	bne.n	80089f6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fca2 	bl	80093d8 <SPI_EndRxTxTransaction>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	613b      	str	r3, [r7, #16]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	77fb      	strb	r3, [r7, #31]
 8008aca:	e000      	b.n	8008ace <HAL_SPI_Transmit+0x2b2>
  }

error:
 8008acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3720      	adds	r7, #32
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b088      	sub	sp, #32
 8008aec:	af02      	add	r7, sp, #8
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	4613      	mov	r3, r2
 8008af6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b04:	d112      	bne.n	8008b2c <HAL_SPI_Receive+0x44>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10e      	bne.n	8008b2c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2204      	movs	r2, #4
 8008b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b16:	88fa      	ldrh	r2, [r7, #6]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	68b9      	ldr	r1, [r7, #8]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 f908 	bl	8008d38 <HAL_SPI_TransmitReceive>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	e101      	b.n	8008d30 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d101      	bne.n	8008b3a <HAL_SPI_Receive+0x52>
 8008b36:	2302      	movs	r3, #2
 8008b38:	e0fa      	b.n	8008d30 <HAL_SPI_Receive+0x248>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b42:	f7fa fed3 	bl	80038ec <HAL_GetTick>
 8008b46:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d002      	beq.n	8008b5a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b54:	2302      	movs	r3, #2
 8008b56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b58:	e0e1      	b.n	8008d1e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <HAL_SPI_Receive+0x7e>
 8008b60:	88fb      	ldrh	r3, [r7, #6]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b6a:	e0d8      	b.n	8008d1e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2204      	movs	r2, #4
 8008b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2200      	movs	r2, #0
 8008b78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	88fa      	ldrh	r2, [r7, #6]
 8008b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	88fa      	ldrh	r2, [r7, #6]
 8008b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bb6:	d908      	bls.n	8008bca <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bc6:	605a      	str	r2, [r3, #4]
 8008bc8:	e007      	b.n	8008bda <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bd8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be2:	d107      	bne.n	8008bf4 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfe:	2b40      	cmp	r3, #64	; 0x40
 8008c00:	d007      	beq.n	8008c12 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c1a:	d867      	bhi.n	8008cec <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c1c:	e030      	b.n	8008c80 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d117      	bne.n	8008c5c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f103 020c 	add.w	r2, r3, #12
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c38:	7812      	ldrb	r2, [r2, #0]
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	3b01      	subs	r3, #1
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008c5a:	e011      	b.n	8008c80 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c5c:	f7fa fe46 	bl	80038ec <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d803      	bhi.n	8008c74 <HAL_SPI_Receive+0x18c>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c72:	d102      	bne.n	8008c7a <HAL_SPI_Receive+0x192>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c7e:	e04e      	b.n	8008d1e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1c8      	bne.n	8008c1e <HAL_SPI_Receive+0x136>
 8008c8c:	e034      	b.n	8008cf8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d115      	bne.n	8008cc8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	b292      	uxth	r2, r2
 8008ca8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	1c9a      	adds	r2, r3, #2
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008cc6:	e011      	b.n	8008cec <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cc8:	f7fa fe10 	bl	80038ec <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d803      	bhi.n	8008ce0 <HAL_SPI_Receive+0x1f8>
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d102      	bne.n	8008ce6 <HAL_SPI_Receive+0x1fe>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d102      	bne.n	8008cec <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008cea:	e018      	b.n	8008d1e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1ca      	bne.n	8008c8e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 fb13 	bl	8009328 <SPI_EndRxTransaction>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	75fb      	strb	r3, [r7, #23]
 8008d1a:	e000      	b.n	8008d1e <HAL_SPI_Receive+0x236>
  }

error :
 8008d1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3718      	adds	r7, #24
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b08a      	sub	sp, #40	; 0x28
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d46:	2301      	movs	r3, #1
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d101      	bne.n	8008d5e <HAL_SPI_TransmitReceive+0x26>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e1fb      	b.n	8009156 <HAL_SPI_TransmitReceive+0x41e>
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d66:	f7fa fdc1 	bl	80038ec <HAL_GetTick>
 8008d6a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d72:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008d7a:	887b      	ldrh	r3, [r7, #2]
 8008d7c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008d7e:	887b      	ldrh	r3, [r7, #2]
 8008d80:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d82:	7efb      	ldrb	r3, [r7, #27]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d00e      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x6e>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d8e:	d106      	bne.n	8008d9e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d102      	bne.n	8008d9e <HAL_SPI_TransmitReceive+0x66>
 8008d98:	7efb      	ldrb	r3, [r7, #27]
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d003      	beq.n	8008da6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008d9e:	2302      	movs	r3, #2
 8008da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008da4:	e1cd      	b.n	8009142 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x80>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <HAL_SPI_TransmitReceive+0x80>
 8008db2:	887b      	ldrh	r3, [r7, #2]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d103      	bne.n	8008dc0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008dbe:	e1c0      	b.n	8009142 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	d003      	beq.n	8008dd4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2205      	movs	r2, #5
 8008dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	887a      	ldrh	r2, [r7, #2]
 8008de4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	887a      	ldrh	r2, [r7, #2]
 8008dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	887a      	ldrh	r2, [r7, #2]
 8008dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	887a      	ldrh	r2, [r7, #2]
 8008e00:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e16:	d802      	bhi.n	8008e1e <HAL_SPI_TransmitReceive+0xe6>
 8008e18:	8a3b      	ldrh	r3, [r7, #16]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d908      	bls.n	8008e30 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e2c:	605a      	str	r2, [r3, #4]
 8008e2e:	e007      	b.n	8008e40 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e3e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e4a:	2b40      	cmp	r3, #64	; 0x40
 8008e4c:	d007      	beq.n	8008e5e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e66:	d97c      	bls.n	8008f62 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <HAL_SPI_TransmitReceive+0x13e>
 8008e70:	8a7b      	ldrh	r3, [r7, #18]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d169      	bne.n	8008f4a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	881a      	ldrh	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	1c9a      	adds	r2, r3, #2
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	3b01      	subs	r3, #1
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e9a:	e056      	b.n	8008f4a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b02      	cmp	r3, #2
 8008ea8:	d11b      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x1aa>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d016      	beq.n	8008ee2 <HAL_SPI_TransmitReceive+0x1aa>
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d113      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebe:	881a      	ldrh	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	1c9a      	adds	r2, r3, #2
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d11c      	bne.n	8008f2a <HAL_SPI_TransmitReceive+0x1f2>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d016      	beq.n	8008f2a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	b292      	uxth	r2, r2
 8008f08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	1c9a      	adds	r2, r3, #2
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f26:	2301      	movs	r3, #1
 8008f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f2a:	f7fa fcdf 	bl	80038ec <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d807      	bhi.n	8008f4a <HAL_SPI_TransmitReceive+0x212>
 8008f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d003      	beq.n	8008f4a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f48:	e0fb      	b.n	8009142 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1a3      	bne.n	8008e9c <HAL_SPI_TransmitReceive+0x164>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d19d      	bne.n	8008e9c <HAL_SPI_TransmitReceive+0x164>
 8008f60:	e0df      	b.n	8009122 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <HAL_SPI_TransmitReceive+0x23a>
 8008f6a:	8a7b      	ldrh	r3, [r7, #18]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	f040 80cb 	bne.w	8009108 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d912      	bls.n	8008fa2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f80:	881a      	ldrh	r2, [r3, #0]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8c:	1c9a      	adds	r2, r3, #2
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	3b02      	subs	r3, #2
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fa0:	e0b2      	b.n	8009108 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	330c      	adds	r3, #12
 8008fac:	7812      	ldrb	r2, [r2, #0]
 8008fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fc8:	e09e      	b.n	8009108 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f003 0302 	and.w	r3, r3, #2
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d134      	bne.n	8009042 <HAL_SPI_TransmitReceive+0x30a>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d02f      	beq.n	8009042 <HAL_SPI_TransmitReceive+0x30a>
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d12c      	bne.n	8009042 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d912      	bls.n	8009018 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff6:	881a      	ldrh	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009002:	1c9a      	adds	r2, r3, #2
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b02      	subs	r3, #2
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009016:	e012      	b.n	800903e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	330c      	adds	r3, #12
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800903e:	2300      	movs	r3, #0
 8009040:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b01      	cmp	r3, #1
 800904e:	d148      	bne.n	80090e2 <HAL_SPI_TransmitReceive+0x3aa>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009056:	b29b      	uxth	r3, r3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d042      	beq.n	80090e2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009062:	b29b      	uxth	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	d923      	bls.n	80090b0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009072:	b292      	uxth	r2, r2
 8009074:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	1c9a      	adds	r2, r3, #2
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b02      	subs	r3, #2
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b01      	cmp	r3, #1
 800909c:	d81f      	bhi.n	80090de <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090ac:	605a      	str	r2, [r3, #4]
 80090ae:	e016      	b.n	80090de <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f103 020c 	add.w	r2, r3, #12
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	7812      	ldrb	r2, [r2, #0]
 80090be:	b2d2      	uxtb	r2, r2
 80090c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c6:	1c5a      	adds	r2, r3, #1
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	3b01      	subs	r3, #1
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090de:	2301      	movs	r3, #1
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80090e2:	f7fa fc03 	bl	80038ec <HAL_GetTick>
 80090e6:	4602      	mov	r2, r0
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d803      	bhi.n	80090fa <HAL_SPI_TransmitReceive+0x3c2>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f8:	d102      	bne.n	8009100 <HAL_SPI_TransmitReceive+0x3c8>
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d103      	bne.n	8009108 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009106:	e01c      	b.n	8009142 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	f47f af5b 	bne.w	8008fca <HAL_SPI_TransmitReceive+0x292>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	f47f af54 	bne.w	8008fca <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 f956 	bl	80093d8 <SPI_EndRxTxTransaction>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d006      	beq.n	8009140 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2220      	movs	r2, #32
 800913c:	661a      	str	r2, [r3, #96]	; 0x60
 800913e:	e000      	b.n	8009142 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009140:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2201      	movs	r2, #1
 8009146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009156:	4618      	mov	r0, r3
 8009158:	3728      	adds	r7, #40	; 0x28
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800916c:	b2db      	uxtb	r3, r3
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b084      	sub	sp, #16
 800917e:	af00      	add	r7, sp, #0
 8009180:	60f8      	str	r0, [r7, #12]
 8009182:	60b9      	str	r1, [r7, #8]
 8009184:	603b      	str	r3, [r7, #0]
 8009186:	4613      	mov	r3, r2
 8009188:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800918a:	e04c      	b.n	8009226 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009192:	d048      	beq.n	8009226 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009194:	f7fa fbaa 	bl	80038ec <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d902      	bls.n	80091aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d13d      	bne.n	8009226 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80091b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091c2:	d111      	bne.n	80091e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091cc:	d004      	beq.n	80091d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091d6:	d107      	bne.n	80091e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091f0:	d10f      	bne.n	8009212 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e00f      	b.n	8009246 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4013      	ands	r3, r2
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	429a      	cmp	r2, r3
 8009234:	bf0c      	ite	eq
 8009236:	2301      	moveq	r3, #1
 8009238:	2300      	movne	r3, #0
 800923a:	b2db      	uxtb	r3, r3
 800923c:	461a      	mov	r2, r3
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	429a      	cmp	r2, r3
 8009242:	d1a3      	bne.n	800918c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	60f8      	str	r0, [r7, #12]
 8009256:	60b9      	str	r1, [r7, #8]
 8009258:	607a      	str	r2, [r7, #4]
 800925a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800925c:	e057      	b.n	800930e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009264:	d106      	bne.n	8009274 <SPI_WaitFifoStateUntilTimeout+0x26>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d103      	bne.n	8009274 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800927a:	d048      	beq.n	800930e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800927c:	f7fa fb36 	bl	80038ec <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d902      	bls.n	8009292 <SPI_WaitFifoStateUntilTimeout+0x44>
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d13d      	bne.n	800930e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80092a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092aa:	d111      	bne.n	80092d0 <SPI_WaitFifoStateUntilTimeout+0x82>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092b4:	d004      	beq.n	80092c0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092be:	d107      	bne.n	80092d0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092d8:	d10f      	bne.n	80092fa <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e008      	b.n	8009320 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689a      	ldr	r2, [r3, #8]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	4013      	ands	r3, r2
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	429a      	cmp	r2, r3
 800931c:	d19f      	bne.n	800925e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af02      	add	r7, sp, #8
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800933c:	d111      	bne.n	8009362 <SPI_EndRxTransaction+0x3a>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009346:	d004      	beq.n	8009352 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009350:	d107      	bne.n	8009362 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009360:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	2200      	movs	r2, #0
 800936a:	2180      	movs	r1, #128	; 0x80
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7ff ff04 	bl	800917a <SPI_WaitFlagStateUntilTimeout>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d007      	beq.n	8009388 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800937c:	f043 0220 	orr.w	r2, r3, #32
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e023      	b.n	80093d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009390:	d11d      	bne.n	80093ce <SPI_EndRxTransaction+0xa6>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800939a:	d004      	beq.n	80093a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093a4:	d113      	bne.n	80093ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff ff4b 	bl	800924e <SPI_WaitFifoStateUntilTimeout>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d007      	beq.n	80093ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c2:	f043 0220 	orr.w	r2, r3, #32
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80093ca:	2303      	movs	r3, #3
 80093cc:	e000      	b.n	80093d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b086      	sub	sp, #24
 80093dc:	af02      	add	r7, sp, #8
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f7ff ff2c 	bl	800924e <SPI_WaitFifoStateUntilTimeout>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d007      	beq.n	800940c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009400:	f043 0220 	orr.w	r2, r3, #32
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e027      	b.n	800945c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	2180      	movs	r1, #128	; 0x80
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7ff feaf 	bl	800917a <SPI_WaitFlagStateUntilTimeout>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d007      	beq.n	8009432 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009426:	f043 0220 	orr.w	r2, r3, #32
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e014      	b.n	800945c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2200      	movs	r2, #0
 800943a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff ff05 	bl	800924e <SPI_WaitFifoStateUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d007      	beq.n	800945a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800944e:	f043 0220 	orr.w	r2, r3, #32
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e000      	b.n	800945c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e01d      	b.n	80094b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7f9 fe7a 	bl	8003184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3304      	adds	r3, #4
 80094a0:	4619      	mov	r1, r3
 80094a2:	4610      	mov	r0, r2
 80094a4:	f000 fa2e 	bl	8009904 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2201      	movs	r2, #1
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f000 fe40 	bl	800a154 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a17      	ldr	r2, [pc, #92]	; (8009538 <HAL_TIM_PWM_Start+0x7c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d004      	beq.n	80094e8 <HAL_TIM_PWM_Start+0x2c>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a16      	ldr	r2, [pc, #88]	; (800953c <HAL_TIM_PWM_Start+0x80>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d101      	bne.n	80094ec <HAL_TIM_PWM_Start+0x30>
 80094e8:	2301      	movs	r3, #1
 80094ea:	e000      	b.n	80094ee <HAL_TIM_PWM_Start+0x32>
 80094ec:	2300      	movs	r3, #0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d007      	beq.n	8009502 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009500:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689a      	ldr	r2, [r3, #8]
 8009508:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <HAL_TIM_PWM_Start+0x84>)
 800950a:	4013      	ands	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2b06      	cmp	r3, #6
 8009512:	d00b      	beq.n	800952c <HAL_TIM_PWM_Start+0x70>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800951a:	d007      	beq.n	800952c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0201 	orr.w	r2, r2, #1
 800952a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	40010000 	.word	0x40010000
 800953c:	40010400 	.word	0x40010400
 8009540:	00010007 	.word	0x00010007

08009544 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e01d      	b.n	8009592 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b00      	cmp	r3, #0
 8009560:	d106      	bne.n	8009570 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f7f9 fdc6 	bl	80030fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2202      	movs	r2, #2
 8009574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3304      	adds	r3, #4
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f000 f9be 	bl	8009904 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d101      	bne.n	80095b4 <HAL_TIM_IC_ConfigChannel+0x1a>
 80095b0:	2302      	movs	r3, #2
 80095b2:	e08a      	b.n	80096ca <HAL_TIM_IC_ConfigChannel+0x130>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2202      	movs	r2, #2
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d11b      	bne.n	8009602 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6818      	ldr	r0, [r3, #0]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6819      	ldr	r1, [r3, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	685a      	ldr	r2, [r3, #4]
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f000 fc91 	bl	8009f00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	699a      	ldr	r2, [r3, #24]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f022 020c 	bic.w	r2, r2, #12
 80095ec:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6999      	ldr	r1, [r3, #24]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	430a      	orrs	r2, r1
 80095fe:	619a      	str	r2, [r3, #24]
 8009600:	e05a      	b.n	80096b8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b04      	cmp	r3, #4
 8009606:	d11c      	bne.n	8009642 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	6819      	ldr	r1, [r3, #0]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f000 fce6 	bl	8009fe8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	699a      	ldr	r2, [r3, #24]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800962a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6999      	ldr	r1, [r3, #24]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	021a      	lsls	r2, r3, #8
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	619a      	str	r2, [r3, #24]
 8009640:	e03a      	b.n	80096b8 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b08      	cmp	r3, #8
 8009646:	d11b      	bne.n	8009680 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	6819      	ldr	r1, [r3, #0]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f000 fd03 	bl	800a062 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	69da      	ldr	r2, [r3, #28]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 020c 	bic.w	r2, r2, #12
 800966a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	69d9      	ldr	r1, [r3, #28]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	689a      	ldr	r2, [r3, #8]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	61da      	str	r2, [r3, #28]
 800967e:	e01b      	b.n	80096b8 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	6819      	ldr	r1, [r3, #0]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f000 fd23 	bl	800a0da <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	69da      	ldr	r2, [r3, #28]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80096a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	69d9      	ldr	r1, [r3, #28]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	021a      	lsls	r2, r3, #8
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d101      	bne.n	80096ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80096ea:	2302      	movs	r3, #2
 80096ec:	e105      	b.n	80098fa <HAL_TIM_PWM_ConfigChannel+0x226>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2202      	movs	r2, #2
 80096fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b14      	cmp	r3, #20
 8009702:	f200 80f0 	bhi.w	80098e6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009706:	a201      	add	r2, pc, #4	; (adr r2, 800970c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970c:	08009761 	.word	0x08009761
 8009710:	080098e7 	.word	0x080098e7
 8009714:	080098e7 	.word	0x080098e7
 8009718:	080098e7 	.word	0x080098e7
 800971c:	080097a1 	.word	0x080097a1
 8009720:	080098e7 	.word	0x080098e7
 8009724:	080098e7 	.word	0x080098e7
 8009728:	080098e7 	.word	0x080098e7
 800972c:	080097e3 	.word	0x080097e3
 8009730:	080098e7 	.word	0x080098e7
 8009734:	080098e7 	.word	0x080098e7
 8009738:	080098e7 	.word	0x080098e7
 800973c:	08009823 	.word	0x08009823
 8009740:	080098e7 	.word	0x080098e7
 8009744:	080098e7 	.word	0x080098e7
 8009748:	080098e7 	.word	0x080098e7
 800974c:	08009865 	.word	0x08009865
 8009750:	080098e7 	.word	0x080098e7
 8009754:	080098e7 	.word	0x080098e7
 8009758:	080098e7 	.word	0x080098e7
 800975c:	080098a5 	.word	0x080098a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68b9      	ldr	r1, [r7, #8]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f96c 	bl	8009a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699a      	ldr	r2, [r3, #24]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0208 	orr.w	r2, r2, #8
 800977a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0204 	bic.w	r2, r2, #4
 800978a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6999      	ldr	r1, [r3, #24]
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	691a      	ldr	r2, [r3, #16]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	430a      	orrs	r2, r1
 800979c:	619a      	str	r2, [r3, #24]
      break;
 800979e:	e0a3      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f9be 	bl	8009b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	699a      	ldr	r2, [r3, #24]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	699a      	ldr	r2, [r3, #24]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6999      	ldr	r1, [r3, #24]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	021a      	lsls	r2, r3, #8
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	619a      	str	r2, [r3, #24]
      break;
 80097e0:	e082      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68b9      	ldr	r1, [r7, #8]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fa15 	bl	8009c18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69da      	ldr	r2, [r3, #28]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f042 0208 	orr.w	r2, r2, #8
 80097fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69da      	ldr	r2, [r3, #28]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f022 0204 	bic.w	r2, r2, #4
 800980c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69d9      	ldr	r1, [r3, #28]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	691a      	ldr	r2, [r3, #16]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	430a      	orrs	r2, r1
 800981e:	61da      	str	r2, [r3, #28]
      break;
 8009820:	e062      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68b9      	ldr	r1, [r7, #8]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fa6b 	bl	8009d04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69da      	ldr	r2, [r3, #28]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800983c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69da      	ldr	r2, [r3, #28]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800984c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69d9      	ldr	r1, [r3, #28]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	021a      	lsls	r2, r3, #8
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	61da      	str	r2, [r3, #28]
      break;
 8009862:	e041      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	4618      	mov	r0, r3
 800986c:	f000 faa2 	bl	8009db4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f042 0208 	orr.w	r2, r2, #8
 800987e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 0204 	bic.w	r2, r2, #4
 800988e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	691a      	ldr	r2, [r3, #16]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098a2:	e021      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fad4 	bl	8009e58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	021a      	lsls	r2, r3, #8
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098e4:	e000      	b.n	80098e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80098e6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop

08009904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009904:	b480      	push	{r7}
 8009906:	b085      	sub	sp, #20
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a40      	ldr	r2, [pc, #256]	; (8009a18 <TIM_Base_SetConfig+0x114>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d013      	beq.n	8009944 <TIM_Base_SetConfig+0x40>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009922:	d00f      	beq.n	8009944 <TIM_Base_SetConfig+0x40>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a3d      	ldr	r2, [pc, #244]	; (8009a1c <TIM_Base_SetConfig+0x118>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d00b      	beq.n	8009944 <TIM_Base_SetConfig+0x40>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a3c      	ldr	r2, [pc, #240]	; (8009a20 <TIM_Base_SetConfig+0x11c>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d007      	beq.n	8009944 <TIM_Base_SetConfig+0x40>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a3b      	ldr	r2, [pc, #236]	; (8009a24 <TIM_Base_SetConfig+0x120>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <TIM_Base_SetConfig+0x40>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a3a      	ldr	r2, [pc, #232]	; (8009a28 <TIM_Base_SetConfig+0x124>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d108      	bne.n	8009956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800994a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	4313      	orrs	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4a2f      	ldr	r2, [pc, #188]	; (8009a18 <TIM_Base_SetConfig+0x114>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d02b      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009964:	d027      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a2c      	ldr	r2, [pc, #176]	; (8009a1c <TIM_Base_SetConfig+0x118>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d023      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a2b      	ldr	r2, [pc, #172]	; (8009a20 <TIM_Base_SetConfig+0x11c>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d01f      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a2a      	ldr	r2, [pc, #168]	; (8009a24 <TIM_Base_SetConfig+0x120>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d01b      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a29      	ldr	r2, [pc, #164]	; (8009a28 <TIM_Base_SetConfig+0x124>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d017      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4a28      	ldr	r2, [pc, #160]	; (8009a2c <TIM_Base_SetConfig+0x128>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d013      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a27      	ldr	r2, [pc, #156]	; (8009a30 <TIM_Base_SetConfig+0x12c>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d00f      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a26      	ldr	r2, [pc, #152]	; (8009a34 <TIM_Base_SetConfig+0x130>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d00b      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a25      	ldr	r2, [pc, #148]	; (8009a38 <TIM_Base_SetConfig+0x134>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d007      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a24      	ldr	r2, [pc, #144]	; (8009a3c <TIM_Base_SetConfig+0x138>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d003      	beq.n	80099b6 <TIM_Base_SetConfig+0xb2>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a23      	ldr	r2, [pc, #140]	; (8009a40 <TIM_Base_SetConfig+0x13c>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d108      	bne.n	80099c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a0a      	ldr	r2, [pc, #40]	; (8009a18 <TIM_Base_SetConfig+0x114>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d003      	beq.n	80099fc <TIM_Base_SetConfig+0xf8>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a0c      	ldr	r2, [pc, #48]	; (8009a28 <TIM_Base_SetConfig+0x124>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d103      	bne.n	8009a04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	615a      	str	r2, [r3, #20]
}
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40000800 	.word	0x40000800
 8009a24:	40000c00 	.word	0x40000c00
 8009a28:	40010400 	.word	0x40010400
 8009a2c:	40014000 	.word	0x40014000
 8009a30:	40014400 	.word	0x40014400
 8009a34:	40014800 	.word	0x40014800
 8009a38:	40001800 	.word	0x40001800
 8009a3c:	40001c00 	.word	0x40001c00
 8009a40:	40002000 	.word	0x40002000

08009a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	f023 0201 	bic.w	r2, r3, #1
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	4b2b      	ldr	r3, [pc, #172]	; (8009b1c <TIM_OC1_SetConfig+0xd8>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f023 0303 	bic.w	r3, r3, #3
 8009a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f023 0302 	bic.w	r3, r3, #2
 8009a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a21      	ldr	r2, [pc, #132]	; (8009b20 <TIM_OC1_SetConfig+0xdc>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d003      	beq.n	8009aa8 <TIM_OC1_SetConfig+0x64>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a20      	ldr	r2, [pc, #128]	; (8009b24 <TIM_OC1_SetConfig+0xe0>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d10c      	bne.n	8009ac2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f023 0308 	bic.w	r3, r3, #8
 8009aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f023 0304 	bic.w	r3, r3, #4
 8009ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a16      	ldr	r2, [pc, #88]	; (8009b20 <TIM_OC1_SetConfig+0xdc>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d003      	beq.n	8009ad2 <TIM_OC1_SetConfig+0x8e>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a15      	ldr	r2, [pc, #84]	; (8009b24 <TIM_OC1_SetConfig+0xe0>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d111      	bne.n	8009af6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	695b      	ldr	r3, [r3, #20]
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	621a      	str	r2, [r3, #32]
}
 8009b10:	bf00      	nop
 8009b12:	371c      	adds	r7, #28
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	fffeff8f 	.word	0xfffeff8f
 8009b20:	40010000 	.word	0x40010000
 8009b24:	40010400 	.word	0x40010400

08009b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	f023 0210 	bic.w	r2, r3, #16
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4b2e      	ldr	r3, [pc, #184]	; (8009c0c <TIM_OC2_SetConfig+0xe4>)
 8009b54:	4013      	ands	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	021b      	lsls	r3, r3, #8
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	f023 0320 	bic.w	r3, r3, #32
 8009b72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	011b      	lsls	r3, r3, #4
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a23      	ldr	r2, [pc, #140]	; (8009c10 <TIM_OC2_SetConfig+0xe8>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d003      	beq.n	8009b90 <TIM_OC2_SetConfig+0x68>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a22      	ldr	r2, [pc, #136]	; (8009c14 <TIM_OC2_SetConfig+0xec>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d10d      	bne.n	8009bac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009baa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a18      	ldr	r2, [pc, #96]	; (8009c10 <TIM_OC2_SetConfig+0xe8>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d003      	beq.n	8009bbc <TIM_OC2_SetConfig+0x94>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a17      	ldr	r2, [pc, #92]	; (8009c14 <TIM_OC2_SetConfig+0xec>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d113      	bne.n	8009be4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	685a      	ldr	r2, [r3, #4]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	621a      	str	r2, [r3, #32]
}
 8009bfe:	bf00      	nop
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	feff8fff 	.word	0xfeff8fff
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400

08009c18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	4b2d      	ldr	r3, [pc, #180]	; (8009cf8 <TIM_OC3_SetConfig+0xe0>)
 8009c44:	4013      	ands	r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0303 	bic.w	r3, r3, #3
 8009c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a22      	ldr	r2, [pc, #136]	; (8009cfc <TIM_OC3_SetConfig+0xe4>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <TIM_OC3_SetConfig+0x66>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a21      	ldr	r2, [pc, #132]	; (8009d00 <TIM_OC3_SetConfig+0xe8>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d10d      	bne.n	8009c9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	021b      	lsls	r3, r3, #8
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a17      	ldr	r2, [pc, #92]	; (8009cfc <TIM_OC3_SetConfig+0xe4>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d003      	beq.n	8009caa <TIM_OC3_SetConfig+0x92>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a16      	ldr	r2, [pc, #88]	; (8009d00 <TIM_OC3_SetConfig+0xe8>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d113      	bne.n	8009cd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	011b      	lsls	r3, r3, #4
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	621a      	str	r2, [r3, #32]
}
 8009cec:	bf00      	nop
 8009cee:	371c      	adds	r7, #28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	fffeff8f 	.word	0xfffeff8f
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	40010400 	.word	0x40010400

08009d04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	69db      	ldr	r3, [r3, #28]
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	4b1e      	ldr	r3, [pc, #120]	; (8009da8 <TIM_OC4_SetConfig+0xa4>)
 8009d30:	4013      	ands	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	021b      	lsls	r3, r3, #8
 8009d42:	68fa      	ldr	r2, [r7, #12]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	031b      	lsls	r3, r3, #12
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a13      	ldr	r2, [pc, #76]	; (8009dac <TIM_OC4_SetConfig+0xa8>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d003      	beq.n	8009d6c <TIM_OC4_SetConfig+0x68>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a12      	ldr	r2, [pc, #72]	; (8009db0 <TIM_OC4_SetConfig+0xac>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d109      	bne.n	8009d80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	019b      	lsls	r3, r3, #6
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	621a      	str	r2, [r3, #32]
}
 8009d9a:	bf00      	nop
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	feff8fff 	.word	0xfeff8fff
 8009dac:	40010000 	.word	0x40010000
 8009db0:	40010400 	.word	0x40010400

08009db4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4b1b      	ldr	r3, [pc, #108]	; (8009e4c <TIM_OC5_SetConfig+0x98>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009df4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	041b      	lsls	r3, r3, #16
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a12      	ldr	r2, [pc, #72]	; (8009e50 <TIM_OC5_SetConfig+0x9c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d003      	beq.n	8009e12 <TIM_OC5_SetConfig+0x5e>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a11      	ldr	r2, [pc, #68]	; (8009e54 <TIM_OC5_SetConfig+0xa0>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d109      	bne.n	8009e26 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	021b      	lsls	r3, r3, #8
 8009e20:	697a      	ldr	r2, [r7, #20]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	693a      	ldr	r2, [r7, #16]
 8009e3e:	621a      	str	r2, [r3, #32]
}
 8009e40:	bf00      	nop
 8009e42:	371c      	adds	r7, #28
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	fffeff8f 	.word	0xfffeff8f
 8009e50:	40010000 	.word	0x40010000
 8009e54:	40010400 	.word	0x40010400

08009e58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <TIM_OC6_SetConfig+0x9c>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	021b      	lsls	r3, r3, #8
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	051b      	lsls	r3, r3, #20
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <TIM_OC6_SetConfig+0xa0>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d003      	beq.n	8009eb8 <TIM_OC6_SetConfig+0x60>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a12      	ldr	r2, [pc, #72]	; (8009efc <TIM_OC6_SetConfig+0xa4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d109      	bne.n	8009ecc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	029b      	lsls	r3, r3, #10
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	621a      	str	r2, [r3, #32]
}
 8009ee6:	bf00      	nop
 8009ee8:	371c      	adds	r7, #28
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	feff8fff 	.word	0xfeff8fff
 8009ef8:	40010000 	.word	0x40010000
 8009efc:	40010400 	.word	0x40010400

08009f00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b087      	sub	sp, #28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	f023 0201 	bic.w	r2, r3, #1
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4a28      	ldr	r2, [pc, #160]	; (8009fcc <TIM_TI1_SetConfig+0xcc>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d01b      	beq.n	8009f66 <TIM_TI1_SetConfig+0x66>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f34:	d017      	beq.n	8009f66 <TIM_TI1_SetConfig+0x66>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	4a25      	ldr	r2, [pc, #148]	; (8009fd0 <TIM_TI1_SetConfig+0xd0>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d013      	beq.n	8009f66 <TIM_TI1_SetConfig+0x66>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4a24      	ldr	r2, [pc, #144]	; (8009fd4 <TIM_TI1_SetConfig+0xd4>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00f      	beq.n	8009f66 <TIM_TI1_SetConfig+0x66>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	4a23      	ldr	r2, [pc, #140]	; (8009fd8 <TIM_TI1_SetConfig+0xd8>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d00b      	beq.n	8009f66 <TIM_TI1_SetConfig+0x66>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4a22      	ldr	r2, [pc, #136]	; (8009fdc <TIM_TI1_SetConfig+0xdc>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d007      	beq.n	8009f66 <TIM_TI1_SetConfig+0x66>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4a21      	ldr	r2, [pc, #132]	; (8009fe0 <TIM_TI1_SetConfig+0xe0>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d003      	beq.n	8009f66 <TIM_TI1_SetConfig+0x66>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	4a20      	ldr	r2, [pc, #128]	; (8009fe4 <TIM_TI1_SetConfig+0xe4>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d101      	bne.n	8009f6a <TIM_TI1_SetConfig+0x6a>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e000      	b.n	8009f6c <TIM_TI1_SetConfig+0x6c>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d008      	beq.n	8009f82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f023 0303 	bic.w	r3, r3, #3
 8009f76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	e003      	b.n	8009f8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	f043 0301 	orr.w	r3, r3, #1
 8009f88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	011b      	lsls	r3, r3, #4
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f023 030a 	bic.w	r3, r3, #10
 8009fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f003 030a 	and.w	r3, r3, #10
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	621a      	str	r2, [r3, #32]
}
 8009fbe:	bf00      	nop
 8009fc0:	371c      	adds	r7, #28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	40010000 	.word	0x40010000
 8009fd0:	40000400 	.word	0x40000400
 8009fd4:	40000800 	.word	0x40000800
 8009fd8:	40000c00 	.word	0x40000c00
 8009fdc:	40010400 	.word	0x40010400
 8009fe0:	40014000 	.word	0x40014000
 8009fe4:	40001800 	.word	0x40001800

08009fe8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
 8009ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6a1b      	ldr	r3, [r3, #32]
 8009ffa:	f023 0210 	bic.w	r2, r3, #16
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6a1b      	ldr	r3, [r3, #32]
 800a00c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	021b      	lsls	r3, r3, #8
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	031b      	lsls	r3, r3, #12
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	4313      	orrs	r3, r2
 800a032:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a03a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	011b      	lsls	r3, r3, #4
 800a040:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	4313      	orrs	r3, r2
 800a048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	697a      	ldr	r2, [r7, #20]
 800a04e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	621a      	str	r2, [r3, #32]
}
 800a056:	bf00      	nop
 800a058:	371c      	adds	r7, #28
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a062:	b480      	push	{r7}
 800a064:	b087      	sub	sp, #28
 800a066:	af00      	add	r7, sp, #0
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	607a      	str	r2, [r7, #4]
 800a06e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f023 0303 	bic.w	r3, r3, #3
 800a08e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a090:	697a      	ldr	r2, [r7, #20]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4313      	orrs	r3, r2
 800a096:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a09e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a0b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	621a      	str	r2, [r3, #32]
}
 800a0ce:	bf00      	nop
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b087      	sub	sp, #28
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
 800a0e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a106:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	4313      	orrs	r3, r2
 800a110:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a118:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	031b      	lsls	r3, r3, #12
 800a11e:	b29b      	uxth	r3, r3
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	4313      	orrs	r3, r2
 800a124:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a12c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	031b      	lsls	r3, r3, #12
 800a132:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	621a      	str	r2, [r3, #32]
}
 800a148:	bf00      	nop
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a154:	b480      	push	{r7}
 800a156:	b087      	sub	sp, #28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	f003 031f 	and.w	r3, r3, #31
 800a166:	2201      	movs	r2, #1
 800a168:	fa02 f303 	lsl.w	r3, r2, r3
 800a16c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a1a      	ldr	r2, [r3, #32]
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	43db      	mvns	r3, r3
 800a176:	401a      	ands	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6a1a      	ldr	r2, [r3, #32]
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f003 031f 	and.w	r3, r3, #31
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	fa01 f303 	lsl.w	r3, r1, r3
 800a18c:	431a      	orrs	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	621a      	str	r2, [r3, #32]
}
 800a192:	bf00      	nop
 800a194:	371c      	adds	r7, #28
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr
	...

0800a1a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d101      	bne.n	800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	e06d      	b.n	800a294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2202      	movs	r2, #2
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a30      	ldr	r2, [pc, #192]	; (800a2a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d004      	beq.n	800a1ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a2f      	ldr	r2, [pc, #188]	; (800a2a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d108      	bne.n	800a1fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a20      	ldr	r2, [pc, #128]	; (800a2a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d022      	beq.n	800a268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a22a:	d01d      	beq.n	800a268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a1d      	ldr	r2, [pc, #116]	; (800a2a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d018      	beq.n	800a268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a1c      	ldr	r2, [pc, #112]	; (800a2ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d013      	beq.n	800a268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a1a      	ldr	r2, [pc, #104]	; (800a2b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d00e      	beq.n	800a268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a15      	ldr	r2, [pc, #84]	; (800a2a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d009      	beq.n	800a268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a16      	ldr	r2, [pc, #88]	; (800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d004      	beq.n	800a268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a15      	ldr	r2, [pc, #84]	; (800a2b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d10c      	bne.n	800a282 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a26e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	4313      	orrs	r3, r2
 800a278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	40010000 	.word	0x40010000
 800a2a4:	40010400 	.word	0x40010400
 800a2a8:	40000400 	.word	0x40000400
 800a2ac:	40000800 	.word	0x40000800
 800a2b0:	40000c00 	.word	0x40000c00
 800a2b4:	40014000 	.word	0x40014000
 800a2b8:	40001800 	.word	0x40001800

0800a2bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d101      	bne.n	800a2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	e065      	b.n	800a3a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	4313      	orrs	r3, r2
 800a308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4313      	orrs	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	041b      	lsls	r3, r3, #16
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a16      	ldr	r2, [pc, #88]	; (800a3b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d004      	beq.n	800a366 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a14      	ldr	r2, [pc, #80]	; (800a3b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d115      	bne.n	800a392 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a370:	051b      	lsls	r3, r3, #20
 800a372:	4313      	orrs	r3, r2
 800a374:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	4313      	orrs	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	4313      	orrs	r3, r2
 800a390:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	40010000 	.word	0x40010000
 800a3b4:	40010400 	.word	0x40010400

0800a3b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e040      	b.n	800a44c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d106      	bne.n	800a3e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f7f8 ff86 	bl	80032ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2224      	movs	r2, #36	; 0x24
 800a3e4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f022 0201 	bic.w	r2, r2, #1
 800a3f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fb40 	bl	800aa7c <UART_SetConfig>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d101      	bne.n	800a406 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e022      	b.n	800a44c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d002      	beq.n	800a414 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fdde 	bl	800afd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a422:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a432:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f042 0201 	orr.w	r2, r2, #1
 800a442:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fe65 	bl	800b114 <UART_CheckIdleState>
 800a44a:	4603      	mov	r3, r0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08a      	sub	sp, #40	; 0x28
 800a458:	af02      	add	r7, sp, #8
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	603b      	str	r3, [r7, #0]
 800a460:	4613      	mov	r3, r2
 800a462:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a468:	2b20      	cmp	r3, #32
 800a46a:	d17f      	bne.n	800a56c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <HAL_UART_Transmit+0x24>
 800a472:	88fb      	ldrh	r3, [r7, #6]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e078      	b.n	800a56e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a482:	2b01      	cmp	r3, #1
 800a484:	d101      	bne.n	800a48a <HAL_UART_Transmit+0x36>
 800a486:	2302      	movs	r3, #2
 800a488:	e071      	b.n	800a56e <HAL_UART_Transmit+0x11a>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2221      	movs	r2, #33	; 0x21
 800a49c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a49e:	f7f9 fa25 	bl	80038ec <HAL_GetTick>
 800a4a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	88fa      	ldrh	r2, [r7, #6]
 800a4a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	88fa      	ldrh	r2, [r7, #6]
 800a4b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4bc:	d108      	bne.n	800a4d0 <HAL_UART_Transmit+0x7c>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d104      	bne.n	800a4d0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	61bb      	str	r3, [r7, #24]
 800a4ce:	e003      	b.n	800a4d8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a4e0:	e02c      	b.n	800a53c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2180      	movs	r1, #128	; 0x80
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 fe56 	bl	800b19e <UART_WaitOnFlagUntilTimeout>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e038      	b.n	800a56e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d10b      	bne.n	800a51a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a510:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	3302      	adds	r3, #2
 800a516:	61bb      	str	r3, [r7, #24]
 800a518:	e007      	b.n	800a52a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	781a      	ldrb	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	3301      	adds	r3, #1
 800a528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a530:	b29b      	uxth	r3, r3
 800a532:	3b01      	subs	r3, #1
 800a534:	b29a      	uxth	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a542:	b29b      	uxth	r3, r3
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1cc      	bne.n	800a4e2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	9300      	str	r3, [sp, #0]
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2200      	movs	r2, #0
 800a550:	2140      	movs	r1, #64	; 0x40
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f000 fe23 	bl	800b19e <UART_WaitOnFlagUntilTimeout>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d001      	beq.n	800a562 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	e005      	b.n	800a56e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2220      	movs	r2, #32
 800a566:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	e000      	b.n	800a56e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a56c:	2302      	movs	r3, #2
  }
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3720      	adds	r7, #32
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
	...

0800a578 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	4613      	mov	r3, r2
 800a584:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a58a:	2b20      	cmp	r3, #32
 800a58c:	d164      	bne.n	800a658 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d002      	beq.n	800a59a <HAL_UART_Transmit_DMA+0x22>
 800a594:	88fb      	ldrh	r3, [r7, #6]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e05d      	b.n	800a65a <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d101      	bne.n	800a5ac <HAL_UART_Transmit_DMA+0x34>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e056      	b.n	800a65a <HAL_UART_Transmit_DMA+0xe2>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	68ba      	ldr	r2, [r7, #8]
 800a5b8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	88fa      	ldrh	r2, [r7, #6]
 800a5be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	88fa      	ldrh	r2, [r7, #6]
 800a5c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2221      	movs	r2, #33	; 0x21
 800a5d4:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d02a      	beq.n	800a634 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5e2:	4a20      	ldr	r2, [pc, #128]	; (800a664 <HAL_UART_Transmit_DMA+0xec>)
 800a5e4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5ea:	4a1f      	ldr	r2, [pc, #124]	; (800a668 <HAL_UART_Transmit_DMA+0xf0>)
 800a5ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5f2:	4a1e      	ldr	r2, [pc, #120]	; (800a66c <HAL_UART_Transmit_DMA+0xf4>)
 800a5f4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a606:	4619      	mov	r1, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3328      	adds	r3, #40	; 0x28
 800a60e:	461a      	mov	r2, r3
 800a610:	88fb      	ldrh	r3, [r7, #6]
 800a612:	f7fa f817 	bl	8004644 <HAL_DMA_Start_IT>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00b      	beq.n	800a634 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2210      	movs	r2, #16
 800a620:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2220      	movs	r2, #32
 800a62e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	e012      	b.n	800a65a <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2240      	movs	r2, #64	; 0x40
 800a63a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a652:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	e000      	b.n	800a65a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800a658:	2302      	movs	r3, #2
  }
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	0800b2ff 	.word	0x0800b2ff
 800a668:	0800b34f 	.word	0x0800b34f
 800a66c:	0800b3eb 	.word	0x0800b3eb

0800a670 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a682:	2b20      	cmp	r3, #32
 800a684:	d16c      	bne.n	800a760 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <HAL_UART_Receive_DMA+0x22>
 800a68c:	88fb      	ldrh	r3, [r7, #6]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e065      	b.n	800a762 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d101      	bne.n	800a6a4 <HAL_UART_Receive_DMA+0x34>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	e05e      	b.n	800a762 <HAL_UART_Receive_DMA+0xf2>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	88fa      	ldrh	r2, [r7, #6]
 800a6b6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2222      	movs	r2, #34	; 0x22
 800a6c4:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d02a      	beq.n	800a724 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6d2:	4a26      	ldr	r2, [pc, #152]	; (800a76c <HAL_UART_Receive_DMA+0xfc>)
 800a6d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6da:	4a25      	ldr	r2, [pc, #148]	; (800a770 <HAL_UART_Receive_DMA+0x100>)
 800a6dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e2:	4a24      	ldr	r2, [pc, #144]	; (800a774 <HAL_UART_Receive_DMA+0x104>)
 800a6e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3324      	adds	r3, #36	; 0x24
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6fe:	461a      	mov	r2, r3
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	f7f9 ff9f 	bl	8004644 <HAL_DMA_Start_IT>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00b      	beq.n	800a724 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2210      	movs	r2, #16
 800a710:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2220      	movs	r2, #32
 800a71e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e01e      	b.n	800a762 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a73a:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689a      	ldr	r2, [r3, #8]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f042 0201 	orr.w	r2, r2, #1
 800a74a:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689a      	ldr	r2, [r3, #8]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a75a:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	e000      	b.n	800a762 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800a760:	2302      	movs	r3, #2
  }
}
 800a762:	4618      	mov	r0, r3
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	0800b36b 	.word	0x0800b36b
 800a770:	0800b3cf 	.word	0x0800b3cf
 800a774:	0800b3eb 	.word	0x0800b3eb

0800a778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a798:	69fa      	ldr	r2, [r7, #28]
 800a79a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a79e:	4013      	ands	r3, r2
 800a7a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d113      	bne.n	800a7d0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	f003 0320 	and.w	r3, r3, #32
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00e      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d009      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 8114 	beq.w	800a9ee <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	4798      	blx	r3
      }
      return;
 800a7ce:	e10e      	b.n	800a9ee <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 80d6 	beq.w	800a984 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d105      	bne.n	800a7ee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 80cb 	beq.w	800a984 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00e      	beq.n	800a816 <HAL_UART_IRQHandler+0x9e>
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d009      	beq.n	800a816 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2201      	movs	r2, #1
 800a808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a80e:	f043 0201 	orr.w	r2, r3, #1
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	f003 0302 	and.w	r3, r3, #2
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00e      	beq.n	800a83e <HAL_UART_IRQHandler+0xc6>
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	d009      	beq.n	800a83e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2202      	movs	r2, #2
 800a830:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a836:	f043 0204 	orr.w	r2, r3, #4
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	f003 0304 	and.w	r3, r3, #4
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00e      	beq.n	800a866 <HAL_UART_IRQHandler+0xee>
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d009      	beq.n	800a866 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2204      	movs	r2, #4
 800a858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a85e:	f043 0202 	orr.w	r2, r3, #2
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	f003 0308 	and.w	r3, r3, #8
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d013      	beq.n	800a898 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	f003 0320 	and.w	r3, r3, #32
 800a876:	2b00      	cmp	r3, #0
 800a878:	d104      	bne.n	800a884 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2208      	movs	r2, #8
 800a88a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a890:	f043 0208 	orr.w	r2, r3, #8
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00f      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x14a>
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00a      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8ba:	f043 0220 	orr.w	r2, r3, #32
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 8093 	beq.w	800a9f2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f003 0320 	and.w	r3, r3, #32
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00c      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	f003 0320 	and.w	r3, r3, #32
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d007      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8f4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a900:	2b40      	cmp	r3, #64	; 0x40
 800a902:	d004      	beq.n	800a90e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d031      	beq.n	800a972 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fcd5 	bl	800b2be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a91e:	2b40      	cmp	r3, #64	; 0x40
 800a920:	d123      	bne.n	800a96a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a930:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d013      	beq.n	800a962 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a93e:	4a30      	ldr	r2, [pc, #192]	; (800aa00 <HAL_UART_IRQHandler+0x288>)
 800a940:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a946:	4618      	mov	r0, r3
 800a948:	f7f9 fedc 	bl	8004704 <HAL_DMA_Abort_IT>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d016      	beq.n	800a980 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a958:	687a      	ldr	r2, [r7, #4]
 800a95a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a95c:	4610      	mov	r0, r2
 800a95e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a960:	e00e      	b.n	800a980 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f876 	bl	800aa54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a968:	e00a      	b.n	800a980 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f872 	bl	800aa54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a970:	e006      	b.n	800a980 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f000 f86e 	bl	800aa54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a97e:	e038      	b.n	800a9f2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a980:	bf00      	nop
    return;
 800a982:	e036      	b.n	800a9f2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00d      	beq.n	800a9aa <HAL_UART_IRQHandler+0x232>
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d008      	beq.n	800a9aa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a9a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f860 	bl	800aa68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9a8:	e026      	b.n	800a9f8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00d      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d008      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d017      	beq.n	800a9f6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	4798      	blx	r3
    }
    return;
 800a9ce:	e012      	b.n	800a9f6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00e      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x280>
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d009      	beq.n	800a9f8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fd52 	bl	800b48e <UART_EndTransmit_IT>
    return;
 800a9ea:	bf00      	nop
 800a9ec:	e004      	b.n	800a9f8 <HAL_UART_IRQHandler+0x280>
      return;
 800a9ee:	bf00      	nop
 800a9f0:	e002      	b.n	800a9f8 <HAL_UART_IRQHandler+0x280>
    return;
 800a9f2:	bf00      	nop
 800a9f4:	e000      	b.n	800a9f8 <HAL_UART_IRQHandler+0x280>
    return;
 800a9f6:	bf00      	nop
  }

}
 800a9f8:	3720      	adds	r7, #32
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	0800b463 	.word	0x0800b463

0800aa04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800aa34:	bf00      	nop
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b083      	sub	sp, #12
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa5c:	bf00      	nop
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800aa84:	2300      	movs	r3, #0
 800aa86:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	4bb1      	ldr	r3, [pc, #708]	; (800ad70 <UART_SetConfig+0x2f4>)
 800aaac:	4013      	ands	r3, r2
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6812      	ldr	r2, [r2, #0]
 800aab2:	6939      	ldr	r1, [r7, #16]
 800aab4:	430b      	orrs	r3, r1
 800aab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	430a      	orrs	r2, r1
 800aacc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a1b      	ldr	r3, [r3, #32]
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4313      	orrs	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a9f      	ldr	r2, [pc, #636]	; (800ad74 <UART_SetConfig+0x2f8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d121      	bne.n	800ab40 <UART_SetConfig+0xc4>
 800aafc:	4b9e      	ldr	r3, [pc, #632]	; (800ad78 <UART_SetConfig+0x2fc>)
 800aafe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d816      	bhi.n	800ab38 <UART_SetConfig+0xbc>
 800ab0a:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <UART_SetConfig+0x94>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab21 	.word	0x0800ab21
 800ab14:	0800ab2d 	.word	0x0800ab2d
 800ab18:	0800ab27 	.word	0x0800ab27
 800ab1c:	0800ab33 	.word	0x0800ab33
 800ab20:	2301      	movs	r3, #1
 800ab22:	77fb      	strb	r3, [r7, #31]
 800ab24:	e151      	b.n	800adca <UART_SetConfig+0x34e>
 800ab26:	2302      	movs	r3, #2
 800ab28:	77fb      	strb	r3, [r7, #31]
 800ab2a:	e14e      	b.n	800adca <UART_SetConfig+0x34e>
 800ab2c:	2304      	movs	r3, #4
 800ab2e:	77fb      	strb	r3, [r7, #31]
 800ab30:	e14b      	b.n	800adca <UART_SetConfig+0x34e>
 800ab32:	2308      	movs	r3, #8
 800ab34:	77fb      	strb	r3, [r7, #31]
 800ab36:	e148      	b.n	800adca <UART_SetConfig+0x34e>
 800ab38:	2310      	movs	r3, #16
 800ab3a:	77fb      	strb	r3, [r7, #31]
 800ab3c:	bf00      	nop
 800ab3e:	e144      	b.n	800adca <UART_SetConfig+0x34e>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a8d      	ldr	r2, [pc, #564]	; (800ad7c <UART_SetConfig+0x300>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d134      	bne.n	800abb4 <UART_SetConfig+0x138>
 800ab4a:	4b8b      	ldr	r3, [pc, #556]	; (800ad78 <UART_SetConfig+0x2fc>)
 800ab4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab50:	f003 030c 	and.w	r3, r3, #12
 800ab54:	2b0c      	cmp	r3, #12
 800ab56:	d829      	bhi.n	800abac <UART_SetConfig+0x130>
 800ab58:	a201      	add	r2, pc, #4	; (adr r2, 800ab60 <UART_SetConfig+0xe4>)
 800ab5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5e:	bf00      	nop
 800ab60:	0800ab95 	.word	0x0800ab95
 800ab64:	0800abad 	.word	0x0800abad
 800ab68:	0800abad 	.word	0x0800abad
 800ab6c:	0800abad 	.word	0x0800abad
 800ab70:	0800aba1 	.word	0x0800aba1
 800ab74:	0800abad 	.word	0x0800abad
 800ab78:	0800abad 	.word	0x0800abad
 800ab7c:	0800abad 	.word	0x0800abad
 800ab80:	0800ab9b 	.word	0x0800ab9b
 800ab84:	0800abad 	.word	0x0800abad
 800ab88:	0800abad 	.word	0x0800abad
 800ab8c:	0800abad 	.word	0x0800abad
 800ab90:	0800aba7 	.word	0x0800aba7
 800ab94:	2300      	movs	r3, #0
 800ab96:	77fb      	strb	r3, [r7, #31]
 800ab98:	e117      	b.n	800adca <UART_SetConfig+0x34e>
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	77fb      	strb	r3, [r7, #31]
 800ab9e:	e114      	b.n	800adca <UART_SetConfig+0x34e>
 800aba0:	2304      	movs	r3, #4
 800aba2:	77fb      	strb	r3, [r7, #31]
 800aba4:	e111      	b.n	800adca <UART_SetConfig+0x34e>
 800aba6:	2308      	movs	r3, #8
 800aba8:	77fb      	strb	r3, [r7, #31]
 800abaa:	e10e      	b.n	800adca <UART_SetConfig+0x34e>
 800abac:	2310      	movs	r3, #16
 800abae:	77fb      	strb	r3, [r7, #31]
 800abb0:	bf00      	nop
 800abb2:	e10a      	b.n	800adca <UART_SetConfig+0x34e>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a71      	ldr	r2, [pc, #452]	; (800ad80 <UART_SetConfig+0x304>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d120      	bne.n	800ac00 <UART_SetConfig+0x184>
 800abbe:	4b6e      	ldr	r3, [pc, #440]	; (800ad78 <UART_SetConfig+0x2fc>)
 800abc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800abc8:	2b10      	cmp	r3, #16
 800abca:	d00f      	beq.n	800abec <UART_SetConfig+0x170>
 800abcc:	2b10      	cmp	r3, #16
 800abce:	d802      	bhi.n	800abd6 <UART_SetConfig+0x15a>
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <UART_SetConfig+0x164>
 800abd4:	e010      	b.n	800abf8 <UART_SetConfig+0x17c>
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d005      	beq.n	800abe6 <UART_SetConfig+0x16a>
 800abda:	2b30      	cmp	r3, #48	; 0x30
 800abdc:	d009      	beq.n	800abf2 <UART_SetConfig+0x176>
 800abde:	e00b      	b.n	800abf8 <UART_SetConfig+0x17c>
 800abe0:	2300      	movs	r3, #0
 800abe2:	77fb      	strb	r3, [r7, #31]
 800abe4:	e0f1      	b.n	800adca <UART_SetConfig+0x34e>
 800abe6:	2302      	movs	r3, #2
 800abe8:	77fb      	strb	r3, [r7, #31]
 800abea:	e0ee      	b.n	800adca <UART_SetConfig+0x34e>
 800abec:	2304      	movs	r3, #4
 800abee:	77fb      	strb	r3, [r7, #31]
 800abf0:	e0eb      	b.n	800adca <UART_SetConfig+0x34e>
 800abf2:	2308      	movs	r3, #8
 800abf4:	77fb      	strb	r3, [r7, #31]
 800abf6:	e0e8      	b.n	800adca <UART_SetConfig+0x34e>
 800abf8:	2310      	movs	r3, #16
 800abfa:	77fb      	strb	r3, [r7, #31]
 800abfc:	bf00      	nop
 800abfe:	e0e4      	b.n	800adca <UART_SetConfig+0x34e>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a5f      	ldr	r2, [pc, #380]	; (800ad84 <UART_SetConfig+0x308>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d120      	bne.n	800ac4c <UART_SetConfig+0x1d0>
 800ac0a:	4b5b      	ldr	r3, [pc, #364]	; (800ad78 <UART_SetConfig+0x2fc>)
 800ac0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ac14:	2b40      	cmp	r3, #64	; 0x40
 800ac16:	d00f      	beq.n	800ac38 <UART_SetConfig+0x1bc>
 800ac18:	2b40      	cmp	r3, #64	; 0x40
 800ac1a:	d802      	bhi.n	800ac22 <UART_SetConfig+0x1a6>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <UART_SetConfig+0x1b0>
 800ac20:	e010      	b.n	800ac44 <UART_SetConfig+0x1c8>
 800ac22:	2b80      	cmp	r3, #128	; 0x80
 800ac24:	d005      	beq.n	800ac32 <UART_SetConfig+0x1b6>
 800ac26:	2bc0      	cmp	r3, #192	; 0xc0
 800ac28:	d009      	beq.n	800ac3e <UART_SetConfig+0x1c2>
 800ac2a:	e00b      	b.n	800ac44 <UART_SetConfig+0x1c8>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	77fb      	strb	r3, [r7, #31]
 800ac30:	e0cb      	b.n	800adca <UART_SetConfig+0x34e>
 800ac32:	2302      	movs	r3, #2
 800ac34:	77fb      	strb	r3, [r7, #31]
 800ac36:	e0c8      	b.n	800adca <UART_SetConfig+0x34e>
 800ac38:	2304      	movs	r3, #4
 800ac3a:	77fb      	strb	r3, [r7, #31]
 800ac3c:	e0c5      	b.n	800adca <UART_SetConfig+0x34e>
 800ac3e:	2308      	movs	r3, #8
 800ac40:	77fb      	strb	r3, [r7, #31]
 800ac42:	e0c2      	b.n	800adca <UART_SetConfig+0x34e>
 800ac44:	2310      	movs	r3, #16
 800ac46:	77fb      	strb	r3, [r7, #31]
 800ac48:	bf00      	nop
 800ac4a:	e0be      	b.n	800adca <UART_SetConfig+0x34e>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a4d      	ldr	r2, [pc, #308]	; (800ad88 <UART_SetConfig+0x30c>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d124      	bne.n	800aca0 <UART_SetConfig+0x224>
 800ac56:	4b48      	ldr	r3, [pc, #288]	; (800ad78 <UART_SetConfig+0x2fc>)
 800ac58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac64:	d012      	beq.n	800ac8c <UART_SetConfig+0x210>
 800ac66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac6a:	d802      	bhi.n	800ac72 <UART_SetConfig+0x1f6>
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d007      	beq.n	800ac80 <UART_SetConfig+0x204>
 800ac70:	e012      	b.n	800ac98 <UART_SetConfig+0x21c>
 800ac72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac76:	d006      	beq.n	800ac86 <UART_SetConfig+0x20a>
 800ac78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac7c:	d009      	beq.n	800ac92 <UART_SetConfig+0x216>
 800ac7e:	e00b      	b.n	800ac98 <UART_SetConfig+0x21c>
 800ac80:	2300      	movs	r3, #0
 800ac82:	77fb      	strb	r3, [r7, #31]
 800ac84:	e0a1      	b.n	800adca <UART_SetConfig+0x34e>
 800ac86:	2302      	movs	r3, #2
 800ac88:	77fb      	strb	r3, [r7, #31]
 800ac8a:	e09e      	b.n	800adca <UART_SetConfig+0x34e>
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	77fb      	strb	r3, [r7, #31]
 800ac90:	e09b      	b.n	800adca <UART_SetConfig+0x34e>
 800ac92:	2308      	movs	r3, #8
 800ac94:	77fb      	strb	r3, [r7, #31]
 800ac96:	e098      	b.n	800adca <UART_SetConfig+0x34e>
 800ac98:	2310      	movs	r3, #16
 800ac9a:	77fb      	strb	r3, [r7, #31]
 800ac9c:	bf00      	nop
 800ac9e:	e094      	b.n	800adca <UART_SetConfig+0x34e>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a39      	ldr	r2, [pc, #228]	; (800ad8c <UART_SetConfig+0x310>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d124      	bne.n	800acf4 <UART_SetConfig+0x278>
 800acaa:	4b33      	ldr	r3, [pc, #204]	; (800ad78 <UART_SetConfig+0x2fc>)
 800acac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800acb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acb8:	d012      	beq.n	800ace0 <UART_SetConfig+0x264>
 800acba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acbe:	d802      	bhi.n	800acc6 <UART_SetConfig+0x24a>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d007      	beq.n	800acd4 <UART_SetConfig+0x258>
 800acc4:	e012      	b.n	800acec <UART_SetConfig+0x270>
 800acc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acca:	d006      	beq.n	800acda <UART_SetConfig+0x25e>
 800accc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acd0:	d009      	beq.n	800ace6 <UART_SetConfig+0x26a>
 800acd2:	e00b      	b.n	800acec <UART_SetConfig+0x270>
 800acd4:	2301      	movs	r3, #1
 800acd6:	77fb      	strb	r3, [r7, #31]
 800acd8:	e077      	b.n	800adca <UART_SetConfig+0x34e>
 800acda:	2302      	movs	r3, #2
 800acdc:	77fb      	strb	r3, [r7, #31]
 800acde:	e074      	b.n	800adca <UART_SetConfig+0x34e>
 800ace0:	2304      	movs	r3, #4
 800ace2:	77fb      	strb	r3, [r7, #31]
 800ace4:	e071      	b.n	800adca <UART_SetConfig+0x34e>
 800ace6:	2308      	movs	r3, #8
 800ace8:	77fb      	strb	r3, [r7, #31]
 800acea:	e06e      	b.n	800adca <UART_SetConfig+0x34e>
 800acec:	2310      	movs	r3, #16
 800acee:	77fb      	strb	r3, [r7, #31]
 800acf0:	bf00      	nop
 800acf2:	e06a      	b.n	800adca <UART_SetConfig+0x34e>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a25      	ldr	r2, [pc, #148]	; (800ad90 <UART_SetConfig+0x314>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d124      	bne.n	800ad48 <UART_SetConfig+0x2cc>
 800acfe:	4b1e      	ldr	r3, [pc, #120]	; (800ad78 <UART_SetConfig+0x2fc>)
 800ad00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ad08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad0c:	d012      	beq.n	800ad34 <UART_SetConfig+0x2b8>
 800ad0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad12:	d802      	bhi.n	800ad1a <UART_SetConfig+0x29e>
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d007      	beq.n	800ad28 <UART_SetConfig+0x2ac>
 800ad18:	e012      	b.n	800ad40 <UART_SetConfig+0x2c4>
 800ad1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad1e:	d006      	beq.n	800ad2e <UART_SetConfig+0x2b2>
 800ad20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad24:	d009      	beq.n	800ad3a <UART_SetConfig+0x2be>
 800ad26:	e00b      	b.n	800ad40 <UART_SetConfig+0x2c4>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	77fb      	strb	r3, [r7, #31]
 800ad2c:	e04d      	b.n	800adca <UART_SetConfig+0x34e>
 800ad2e:	2302      	movs	r3, #2
 800ad30:	77fb      	strb	r3, [r7, #31]
 800ad32:	e04a      	b.n	800adca <UART_SetConfig+0x34e>
 800ad34:	2304      	movs	r3, #4
 800ad36:	77fb      	strb	r3, [r7, #31]
 800ad38:	e047      	b.n	800adca <UART_SetConfig+0x34e>
 800ad3a:	2308      	movs	r3, #8
 800ad3c:	77fb      	strb	r3, [r7, #31]
 800ad3e:	e044      	b.n	800adca <UART_SetConfig+0x34e>
 800ad40:	2310      	movs	r3, #16
 800ad42:	77fb      	strb	r3, [r7, #31]
 800ad44:	bf00      	nop
 800ad46:	e040      	b.n	800adca <UART_SetConfig+0x34e>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a11      	ldr	r2, [pc, #68]	; (800ad94 <UART_SetConfig+0x318>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d139      	bne.n	800adc6 <UART_SetConfig+0x34a>
 800ad52:	4b09      	ldr	r3, [pc, #36]	; (800ad78 <UART_SetConfig+0x2fc>)
 800ad54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ad5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad60:	d027      	beq.n	800adb2 <UART_SetConfig+0x336>
 800ad62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad66:	d817      	bhi.n	800ad98 <UART_SetConfig+0x31c>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d01c      	beq.n	800ada6 <UART_SetConfig+0x32a>
 800ad6c:	e027      	b.n	800adbe <UART_SetConfig+0x342>
 800ad6e:	bf00      	nop
 800ad70:	efff69f3 	.word	0xefff69f3
 800ad74:	40011000 	.word	0x40011000
 800ad78:	40023800 	.word	0x40023800
 800ad7c:	40004400 	.word	0x40004400
 800ad80:	40004800 	.word	0x40004800
 800ad84:	40004c00 	.word	0x40004c00
 800ad88:	40005000 	.word	0x40005000
 800ad8c:	40011400 	.word	0x40011400
 800ad90:	40007800 	.word	0x40007800
 800ad94:	40007c00 	.word	0x40007c00
 800ad98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad9c:	d006      	beq.n	800adac <UART_SetConfig+0x330>
 800ad9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ada2:	d009      	beq.n	800adb8 <UART_SetConfig+0x33c>
 800ada4:	e00b      	b.n	800adbe <UART_SetConfig+0x342>
 800ada6:	2300      	movs	r3, #0
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e00e      	b.n	800adca <UART_SetConfig+0x34e>
 800adac:	2302      	movs	r3, #2
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	e00b      	b.n	800adca <UART_SetConfig+0x34e>
 800adb2:	2304      	movs	r3, #4
 800adb4:	77fb      	strb	r3, [r7, #31]
 800adb6:	e008      	b.n	800adca <UART_SetConfig+0x34e>
 800adb8:	2308      	movs	r3, #8
 800adba:	77fb      	strb	r3, [r7, #31]
 800adbc:	e005      	b.n	800adca <UART_SetConfig+0x34e>
 800adbe:	2310      	movs	r3, #16
 800adc0:	77fb      	strb	r3, [r7, #31]
 800adc2:	bf00      	nop
 800adc4:	e001      	b.n	800adca <UART_SetConfig+0x34e>
 800adc6:	2310      	movs	r3, #16
 800adc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800add2:	d17f      	bne.n	800aed4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800add4:	7ffb      	ldrb	r3, [r7, #31]
 800add6:	2b08      	cmp	r3, #8
 800add8:	d85c      	bhi.n	800ae94 <UART_SetConfig+0x418>
 800adda:	a201      	add	r2, pc, #4	; (adr r2, 800ade0 <UART_SetConfig+0x364>)
 800addc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade0:	0800ae05 	.word	0x0800ae05
 800ade4:	0800ae25 	.word	0x0800ae25
 800ade8:	0800ae45 	.word	0x0800ae45
 800adec:	0800ae95 	.word	0x0800ae95
 800adf0:	0800ae5d 	.word	0x0800ae5d
 800adf4:	0800ae95 	.word	0x0800ae95
 800adf8:	0800ae95 	.word	0x0800ae95
 800adfc:	0800ae95 	.word	0x0800ae95
 800ae00:	0800ae7d 	.word	0x0800ae7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae04:	f7fc fdba 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 800ae08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	005a      	lsls	r2, r3, #1
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	085b      	lsrs	r3, r3, #1
 800ae14:	441a      	add	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	61bb      	str	r3, [r7, #24]
        break;
 800ae22:	e03a      	b.n	800ae9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae24:	f7fc fdbe 	bl	80079a4 <HAL_RCC_GetPCLK2Freq>
 800ae28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	005a      	lsls	r2, r3, #1
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	085b      	lsrs	r3, r3, #1
 800ae34:	441a      	add	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	61bb      	str	r3, [r7, #24]
        break;
 800ae42:	e02a      	b.n	800ae9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	085a      	lsrs	r2, r3, #1
 800ae4a:	4b5f      	ldr	r3, [pc, #380]	; (800afc8 <UART_SetConfig+0x54c>)
 800ae4c:	4413      	add	r3, r2
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6852      	ldr	r2, [r2, #4]
 800ae52:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	61bb      	str	r3, [r7, #24]
        break;
 800ae5a:	e01e      	b.n	800ae9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae5c:	f7fc fcd0 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 800ae60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	005a      	lsls	r2, r3, #1
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	085b      	lsrs	r3, r3, #1
 800ae6c:	441a      	add	r2, r3
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	61bb      	str	r3, [r7, #24]
        break;
 800ae7a:	e00e      	b.n	800ae9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	085b      	lsrs	r3, r3, #1
 800ae82:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	61bb      	str	r3, [r7, #24]
        break;
 800ae92:	e002      	b.n	800ae9a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	75fb      	strb	r3, [r7, #23]
        break;
 800ae98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	2b0f      	cmp	r3, #15
 800ae9e:	d916      	bls.n	800aece <UART_SetConfig+0x452>
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aea6:	d212      	bcs.n	800aece <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	f023 030f 	bic.w	r3, r3, #15
 800aeb0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	085b      	lsrs	r3, r3, #1
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	f003 0307 	and.w	r3, r3, #7
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	897b      	ldrh	r3, [r7, #10]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	897a      	ldrh	r2, [r7, #10]
 800aeca:	60da      	str	r2, [r3, #12]
 800aecc:	e070      	b.n	800afb0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	75fb      	strb	r3, [r7, #23]
 800aed2:	e06d      	b.n	800afb0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800aed4:	7ffb      	ldrb	r3, [r7, #31]
 800aed6:	2b08      	cmp	r3, #8
 800aed8:	d859      	bhi.n	800af8e <UART_SetConfig+0x512>
 800aeda:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <UART_SetConfig+0x464>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af05 	.word	0x0800af05
 800aee4:	0800af23 	.word	0x0800af23
 800aee8:	0800af41 	.word	0x0800af41
 800aeec:	0800af8f 	.word	0x0800af8f
 800aef0:	0800af59 	.word	0x0800af59
 800aef4:	0800af8f 	.word	0x0800af8f
 800aef8:	0800af8f 	.word	0x0800af8f
 800aefc:	0800af8f 	.word	0x0800af8f
 800af00:	0800af77 	.word	0x0800af77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af04:	f7fc fd3a 	bl	800797c <HAL_RCC_GetPCLK1Freq>
 800af08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	085a      	lsrs	r2, r3, #1
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	441a      	add	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	61bb      	str	r3, [r7, #24]
        break;
 800af20:	e038      	b.n	800af94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af22:	f7fc fd3f 	bl	80079a4 <HAL_RCC_GetPCLK2Freq>
 800af26:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	085a      	lsrs	r2, r3, #1
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	441a      	add	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	fbb2 f3f3 	udiv	r3, r2, r3
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	61bb      	str	r3, [r7, #24]
        break;
 800af3e:	e029      	b.n	800af94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	085a      	lsrs	r2, r3, #1
 800af46:	4b21      	ldr	r3, [pc, #132]	; (800afcc <UART_SetConfig+0x550>)
 800af48:	4413      	add	r3, r2
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	6852      	ldr	r2, [r2, #4]
 800af4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800af52:	b29b      	uxth	r3, r3
 800af54:	61bb      	str	r3, [r7, #24]
        break;
 800af56:	e01d      	b.n	800af94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af58:	f7fc fc52 	bl	8007800 <HAL_RCC_GetSysClockFreq>
 800af5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	085a      	lsrs	r2, r3, #1
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	441a      	add	r2, r3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af70:	b29b      	uxth	r3, r3
 800af72:	61bb      	str	r3, [r7, #24]
        break;
 800af74:	e00e      	b.n	800af94 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	085b      	lsrs	r3, r3, #1
 800af7c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	fbb2 f3f3 	udiv	r3, r2, r3
 800af88:	b29b      	uxth	r3, r3
 800af8a:	61bb      	str	r3, [r7, #24]
        break;
 800af8c:	e002      	b.n	800af94 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	75fb      	strb	r3, [r7, #23]
        break;
 800af92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af94:	69bb      	ldr	r3, [r7, #24]
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d908      	bls.n	800afac <UART_SetConfig+0x530>
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afa0:	d204      	bcs.n	800afac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	60da      	str	r2, [r3, #12]
 800afaa:	e001      	b.n	800afb0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3720      	adds	r7, #32
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	01e84800 	.word	0x01e84800
 800afcc:	00f42400 	.word	0x00f42400

0800afd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	430a      	orrs	r2, r1
 800aff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00a      	beq.n	800b01c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	430a      	orrs	r2, r1
 800b01a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	f003 0304 	and.w	r3, r3, #4
 800b024:	2b00      	cmp	r3, #0
 800b026:	d00a      	beq.n	800b03e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b042:	f003 0308 	and.w	r3, r3, #8
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	f003 0310 	and.w	r3, r3, #16
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00a      	beq.n	800b082 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	430a      	orrs	r2, r1
 800b080:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b086:	f003 0320 	and.w	r3, r3, #32
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d01a      	beq.n	800b0e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ce:	d10a      	bne.n	800b0e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	430a      	orrs	r2, r1
 800b106:	605a      	str	r2, [r3, #4]
  }
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af02      	add	r7, sp, #8
 800b11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b122:	f7f8 fbe3 	bl	80038ec <HAL_GetTick>
 800b126:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0308 	and.w	r3, r3, #8
 800b132:	2b08      	cmp	r3, #8
 800b134:	d10e      	bne.n	800b154 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b136:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f82a 	bl	800b19e <UART_WaitOnFlagUntilTimeout>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b150:	2303      	movs	r3, #3
 800b152:	e020      	b.n	800b196 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 0304 	and.w	r3, r3, #4
 800b15e:	2b04      	cmp	r3, #4
 800b160:	d10e      	bne.n	800b180 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b162:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f814 	bl	800b19e <UART_WaitOnFlagUntilTimeout>
 800b176:	4603      	mov	r3, r0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d001      	beq.n	800b180 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e00a      	b.n	800b196 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2220      	movs	r2, #32
 800b184:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2220      	movs	r2, #32
 800b18a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	603b      	str	r3, [r7, #0]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1ae:	e05d      	b.n	800b26c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b6:	d059      	beq.n	800b26c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b8:	f7f8 fb98 	bl	80038ec <HAL_GetTick>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d302      	bcc.n	800b1ce <UART_WaitOnFlagUntilTimeout+0x30>
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d11b      	bne.n	800b206 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b1dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f022 0201 	bic.w	r2, r2, #1
 800b1ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2220      	movs	r2, #32
 800b1f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b202:	2303      	movs	r3, #3
 800b204:	e042      	b.n	800b28c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0304 	and.w	r3, r3, #4
 800b210:	2b00      	cmp	r3, #0
 800b212:	d02b      	beq.n	800b26c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b21e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b222:	d123      	bne.n	800b26c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b22c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b23c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	689a      	ldr	r2, [r3, #8]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 0201 	bic.w	r2, r2, #1
 800b24c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2220      	movs	r2, #32
 800b252:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2220      	movs	r2, #32
 800b258:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2220      	movs	r2, #32
 800b25e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e00f      	b.n	800b28c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	69da      	ldr	r2, [r3, #28]
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	4013      	ands	r3, r2
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	429a      	cmp	r2, r3
 800b27a:	bf0c      	ite	eq
 800b27c:	2301      	moveq	r3, #1
 800b27e:	2300      	movne	r3, #0
 800b280:	b2db      	uxtb	r3, r3
 800b282:	461a      	mov	r2, r3
 800b284:	79fb      	ldrb	r3, [r7, #7]
 800b286:	429a      	cmp	r2, r3
 800b288:	d092      	beq.n	800b1b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b2aa:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b2b2:	bf00      	nop
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2d4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689a      	ldr	r2, [r3, #8]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f022 0201 	bic.w	r2, r2, #1
 800b2e4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2220      	movs	r2, #32
 800b2ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b2f2:	bf00      	nop
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b314:	d014      	beq.n	800b340 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	689a      	ldr	r2, [r3, #8]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b32c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b33c:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b33e:	e002      	b.n	800b346 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800b340:	68f8      	ldr	r0, [r7, #12]
 800b342:	f7ff fb5f 	bl	800aa04 <HAL_UART_TxCpltCallback>
}
 800b346:	bf00      	nop
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b084      	sub	sp, #16
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7ff fb5b 	bl	800aa18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b362:	bf00      	nop
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b084      	sub	sp, #16
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b376:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	69db      	ldr	r3, [r3, #28]
 800b37c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b380:	d01e      	beq.n	800b3c0 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b398:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	689a      	ldr	r2, [r3, #8]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 0201 	bic.w	r2, r2, #1
 800b3a8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689a      	ldr	r2, [r3, #8]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3b8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2220      	movs	r2, #32
 800b3be:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b3c0:	68f8      	ldr	r0, [r7, #12]
 800b3c2:	f7ff fb33 	bl	800aa2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3c6:	bf00      	nop
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b084      	sub	sp, #16
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f7ff fb2f 	bl	800aa40 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3e2:	bf00      	nop
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b086      	sub	sp, #24
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b402:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b40e:	2b80      	cmp	r3, #128	; 0x80
 800b410:	d109      	bne.n	800b426 <UART_DMAError+0x3c>
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	2b21      	cmp	r3, #33	; 0x21
 800b416:	d106      	bne.n	800b426 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b420:	6978      	ldr	r0, [r7, #20]
 800b422:	f7ff ff37 	bl	800b294 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b430:	2b40      	cmp	r3, #64	; 0x40
 800b432:	d109      	bne.n	800b448 <UART_DMAError+0x5e>
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b22      	cmp	r3, #34	; 0x22
 800b438:	d106      	bne.n	800b448 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b442:	6978      	ldr	r0, [r7, #20]
 800b444:	f7ff ff3b 	bl	800b2be <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b44c:	f043 0210 	orr.w	r2, r3, #16
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b454:	6978      	ldr	r0, [r7, #20]
 800b456:	f7ff fafd 	bl	800aa54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b45a:	bf00      	nop
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b084      	sub	sp, #16
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2200      	movs	r2, #0
 800b474:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f7ff fae7 	bl	800aa54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b486:	bf00      	nop
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b082      	sub	sp, #8
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4a4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7ff faa6 	bl	800aa04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4b8:	bf00      	nop
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b4c0:	b084      	sub	sp, #16
 800b4c2:	b480      	push	{r7}
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	f107 001c 	add.w	r0, r7, #28
 800b4ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b4d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b4da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b4de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b4e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b4e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b4ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	4b07      	ldr	r3, [pc, #28]	; (800b514 <SDMMC_Init+0x54>)
 800b4f8:	4013      	ands	r3, r2
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	b004      	add	sp, #16
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	ffff8100 	.word	0xffff8100

0800b518 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2203      	movs	r2, #3
 800b524:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b526:	2002      	movs	r0, #2
 800b528:	f7f8 f9ec 	bl	8003904 <HAL_Delay>
  
  return HAL_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b536:	b480      	push	{r7}
 800b538:	b083      	sub	sp, #12
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0303 	and.w	r3, r3, #3
}
 800b546:	4618      	mov	r0, r3
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
	...

0800b554 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b55e:	2300      	movs	r3, #0
 800b560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	681a      	ldr	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b572:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b578:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b57e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	4313      	orrs	r3, r2
 800b584:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	68da      	ldr	r2, [r3, #12]
 800b58a:	4b06      	ldr	r3, [pc, #24]	; (800b5a4 <SDMMC_SendCommand+0x50>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	431a      	orrs	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	fffff000 	.word	0xfffff000

0800b5a8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	b2db      	uxtb	r3, r3
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	370c      	adds	r7, #12
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3314      	adds	r3, #20
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
}  
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b08a      	sub	sp, #40	; 0x28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b5f8:	2307      	movs	r3, #7
 800b5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5fc:	2340      	movs	r3, #64	; 0x40
 800b5fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b600:	2300      	movs	r3, #0
 800b602:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b608:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b60a:	f107 0310 	add.w	r3, r7, #16
 800b60e:	4619      	mov	r1, r3
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	f7ff ff9f 	bl	800b554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b616:	f241 3288 	movw	r2, #5000	; 0x1388
 800b61a:	2107      	movs	r1, #7
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 f8c9 	bl	800b7b4 <SDMMC_GetCmdResp1>
 800b622:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b626:	4618      	mov	r0, r3
 800b628:	3728      	adds	r7, #40	; 0x28
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b088      	sub	sp, #32
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b63e:	2300      	movs	r3, #0
 800b640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b642:	2300      	movs	r3, #0
 800b644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b64a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b64c:	f107 0308 	add.w	r3, r7, #8
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff ff7e 	bl	800b554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f883 	bl	800b764 <SDMMC_GetCmdError>
 800b65e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b660:	69fb      	ldr	r3, [r7, #28]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3720      	adds	r7, #32
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b088      	sub	sp, #32
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b676:	2302      	movs	r3, #2
 800b678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b67a:	23c0      	movs	r3, #192	; 0xc0
 800b67c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b67e:	2300      	movs	r3, #0
 800b680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b686:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b688:	f107 0308 	add.w	r3, r7, #8
 800b68c:	4619      	mov	r1, r3
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7ff ff60 	bl	800b554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 f979 	bl	800b98c <SDMMC_GetCmdResp2>
 800b69a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b69c:	69fb      	ldr	r3, [r7, #28]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3720      	adds	r7, #32
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b088      	sub	sp, #32
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b6b4:	2309      	movs	r3, #9
 800b6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b6b8:	23c0      	movs	r3, #192	; 0xc0
 800b6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff ff41 	bl	800b554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f95a 	bl	800b98c <SDMMC_GetCmdResp2>
 800b6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6da:	69fb      	ldr	r3, [r7, #28]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3720      	adds	r7, #32
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b6f2:	2303      	movs	r3, #3
 800b6f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6f6:	2340      	movs	r3, #64	; 0x40
 800b6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b702:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b704:	f107 0308 	add.w	r3, r7, #8
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff ff22 	bl	800b554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	2103      	movs	r1, #3
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f9b9 	bl	800ba8c <SDMMC_GetCmdResp6>
 800b71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b71c:	69fb      	ldr	r3, [r7, #28]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3720      	adds	r7, #32
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b088      	sub	sp, #32
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800b734:	2301      	movs	r3, #1
 800b736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b738:	2340      	movs	r3, #64	; 0x40
 800b73a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b73c:	2300      	movs	r3, #0
 800b73e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b744:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b746:	f107 0308 	add.w	r3, r7, #8
 800b74a:	4619      	mov	r1, r3
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ff01 	bl	800b554 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f960 	bl	800ba18 <SDMMC_GetCmdResp3>
 800b758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b75a:	69fb      	ldr	r3, [r7, #28]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3720      	adds	r7, #32
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b764:	b490      	push	{r4, r7}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b76c:	4b0f      	ldr	r3, [pc, #60]	; (800b7ac <SDMMC_GetCmdError+0x48>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a0f      	ldr	r2, [pc, #60]	; (800b7b0 <SDMMC_GetCmdError+0x4c>)
 800b772:	fba2 2303 	umull	r2, r3, r2, r3
 800b776:	0a5b      	lsrs	r3, r3, #9
 800b778:	f241 3288 	movw	r2, #5000	; 0x1388
 800b77c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b780:	4623      	mov	r3, r4
 800b782:	1e5c      	subs	r4, r3, #1
 800b784:	2b00      	cmp	r3, #0
 800b786:	d102      	bne.n	800b78e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b78c:	e009      	b.n	800b7a2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0f2      	beq.n	800b780 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	22c5      	movs	r2, #197	; 0xc5
 800b79e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b7a0:	2300      	movs	r3, #0
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bc90      	pop	{r4, r7}
 800b7aa:	4770      	bx	lr
 800b7ac:	20000004 	.word	0x20000004
 800b7b0:	10624dd3 	.word	0x10624dd3

0800b7b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b7c2:	4b6f      	ldr	r3, [pc, #444]	; (800b980 <SDMMC_GetCmdResp1+0x1cc>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a6f      	ldr	r2, [pc, #444]	; (800b984 <SDMMC_GetCmdResp1+0x1d0>)
 800b7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7cc:	0a5b      	lsrs	r3, r3, #9
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7d4:	4623      	mov	r3, r4
 800b7d6:	1e5c      	subs	r4, r3, #1
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d102      	bne.n	800b7e2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7e0:	e0c9      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7e6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0f0      	beq.n	800b7d4 <SDMMC_GetCmdResp1+0x20>
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d1eb      	bne.n	800b7d4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2204      	movs	r2, #4
 800b80c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b80e:	2304      	movs	r3, #4
 800b810:	e0b1      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d004      	beq.n	800b828 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2201      	movs	r2, #1
 800b822:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b824:	2301      	movs	r3, #1
 800b826:	e0a6      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	22c5      	movs	r2, #197	; 0xc5
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f7ff feba 	bl	800b5a8 <SDMMC_GetCommandResponse>
 800b834:	4603      	mov	r3, r0
 800b836:	461a      	mov	r2, r3
 800b838:	7afb      	ldrb	r3, [r7, #11]
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d001      	beq.n	800b842 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b83e:	2301      	movs	r3, #1
 800b840:	e099      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b842:	2100      	movs	r1, #0
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff febc 	bl	800b5c2 <SDMMC_GetResponse>
 800b84a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	4b4e      	ldr	r3, [pc, #312]	; (800b988 <SDMMC_GetCmdResp1+0x1d4>)
 800b850:	4013      	ands	r3, r2
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b856:	2300      	movs	r3, #0
 800b858:	e08d      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	da02      	bge.n	800b866 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b860:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b864:	e087      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b870:	2340      	movs	r3, #64	; 0x40
 800b872:	e080      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b87e:	2380      	movs	r3, #128	; 0x80
 800b880:	e079      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b88c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b890:	e071      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d002      	beq.n	800b8a2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b89c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8a0:	e069      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b8ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8b0:	e061      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b8bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8c0:	e059      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d002      	beq.n	800b8d2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8d0:	e051      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d002      	beq.n	800b8e2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b8dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8e0:	e049      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b8ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b8f0:	e041      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b8fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b900:	e039      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b90c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b910:	e031      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d002      	beq.n	800b922 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b91c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b920:	e029      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b92c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b930:	e021      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d002      	beq.n	800b942 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b93c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b940:	e019      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d002      	beq.n	800b952 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b94c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b950:	e011      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d002      	beq.n	800b962 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b95c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b960:	e009      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	f003 0308 	and.w	r3, r3, #8
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b96c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b970:	e001      	b.n	800b976 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b976:	4618      	mov	r0, r3
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd90      	pop	{r4, r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000004 	.word	0x20000004
 800b984:	10624dd3 	.word	0x10624dd3
 800b988:	fdffe008 	.word	0xfdffe008

0800b98c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b98c:	b490      	push	{r4, r7}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b994:	4b1e      	ldr	r3, [pc, #120]	; (800ba10 <SDMMC_GetCmdResp2+0x84>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a1e      	ldr	r2, [pc, #120]	; (800ba14 <SDMMC_GetCmdResp2+0x88>)
 800b99a:	fba2 2303 	umull	r2, r3, r2, r3
 800b99e:	0a5b      	lsrs	r3, r3, #9
 800b9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b9a8:	4623      	mov	r3, r4
 800b9aa:	1e5c      	subs	r4, r3, #1
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d102      	bne.n	800b9b6 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9b4:	e026      	b.n	800ba04 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0f0      	beq.n	800b9a8 <SDMMC_GetCmdResp2+0x1c>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1eb      	bne.n	800b9a8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d4:	f003 0304 	and.w	r3, r3, #4
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2204      	movs	r2, #4
 800b9e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9e2:	2304      	movs	r3, #4
 800b9e4:	e00e      	b.n	800ba04 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ea:	f003 0301 	and.w	r3, r3, #1
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d004      	beq.n	800b9fc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e003      	b.n	800ba04 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	22c5      	movs	r2, #197	; 0xc5
 800ba00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bc90      	pop	{r4, r7}
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	20000004 	.word	0x20000004
 800ba14:	10624dd3 	.word	0x10624dd3

0800ba18 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ba18:	b490      	push	{r4, r7}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba20:	4b18      	ldr	r3, [pc, #96]	; (800ba84 <SDMMC_GetCmdResp3+0x6c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a18      	ldr	r2, [pc, #96]	; (800ba88 <SDMMC_GetCmdResp3+0x70>)
 800ba26:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2a:	0a5b      	lsrs	r3, r3, #9
 800ba2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ba34:	4623      	mov	r3, r4
 800ba36:	1e5c      	subs	r4, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d102      	bne.n	800ba42 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba40:	e01b      	b.n	800ba7a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0f0      	beq.n	800ba34 <SDMMC_GetCmdResp3+0x1c>
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1eb      	bne.n	800ba34 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba60:	f003 0304 	and.w	r3, r3, #4
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2204      	movs	r2, #4
 800ba6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba6e:	2304      	movs	r3, #4
 800ba70:	e003      	b.n	800ba7a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	22c5      	movs	r2, #197	; 0xc5
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bc90      	pop	{r4, r7}
 800ba82:	4770      	bx	lr
 800ba84:	20000004 	.word	0x20000004
 800ba88:	10624dd3 	.word	0x10624dd3

0800ba8c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ba8c:	b590      	push	{r4, r7, lr}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	460b      	mov	r3, r1
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba9a:	4b34      	ldr	r3, [pc, #208]	; (800bb6c <SDMMC_GetCmdResp6+0xe0>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a34      	ldr	r2, [pc, #208]	; (800bb70 <SDMMC_GetCmdResp6+0xe4>)
 800baa0:	fba2 2303 	umull	r2, r3, r2, r3
 800baa4:	0a5b      	lsrs	r3, r3, #9
 800baa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800baaa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800baae:	4623      	mov	r3, r4
 800bab0:	1e5c      	subs	r4, r3, #1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d102      	bne.n	800babc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bab6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800baba:	e052      	b.n	800bb62 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bac0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d0f0      	beq.n	800baae <SDMMC_GetCmdResp6+0x22>
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1eb      	bne.n	800baae <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bada:	f003 0304 	and.w	r3, r3, #4
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2204      	movs	r2, #4
 800bae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bae8:	2304      	movs	r3, #4
 800baea:	e03a      	b.n	800bb62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d004      	beq.n	800bb02 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2201      	movs	r2, #1
 800bafc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e02f      	b.n	800bb62 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f7ff fd50 	bl	800b5a8 <SDMMC_GetCommandResponse>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	7afb      	ldrb	r3, [r7, #11]
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d001      	beq.n	800bb16 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e025      	b.n	800bb62 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	22c5      	movs	r2, #197	; 0xc5
 800bb1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bb1c:	2100      	movs	r1, #0
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f7ff fd4f 	bl	800b5c2 <SDMMC_GetResponse>
 800bb24:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d106      	bne.n	800bb3e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	0c1b      	lsrs	r3, r3, #16
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e011      	b.n	800bb62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d002      	beq.n	800bb4e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb4c:	e009      	b.n	800bb62 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb5c:	e001      	b.n	800bb62 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd90      	pop	{r4, r7, pc}
 800bb6a:	bf00      	nop
 800bb6c:	20000004 	.word	0x20000004
 800bb70:	10624dd3 	.word	0x10624dd3

0800bb74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	4a08      	ldr	r2, [pc, #32]	; (800bba4 <disk_status+0x30>)
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4413      	add	r3, r2
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	79fa      	ldrb	r2, [r7, #7]
 800bb8c:	4905      	ldr	r1, [pc, #20]	; (800bba4 <disk_status+0x30>)
 800bb8e:	440a      	add	r2, r1
 800bb90:	7a12      	ldrb	r2, [r2, #8]
 800bb92:	4610      	mov	r0, r2
 800bb94:	4798      	blx	r3
 800bb96:	4603      	mov	r3, r0
 800bb98:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bb9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	20000d58 	.word	0x20000d58

0800bba8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	4a0d      	ldr	r2, [pc, #52]	; (800bbf0 <disk_initialize+0x48>)
 800bbba:	5cd3      	ldrb	r3, [r2, r3]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d111      	bne.n	800bbe4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	4a0b      	ldr	r2, [pc, #44]	; (800bbf0 <disk_initialize+0x48>)
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bbc8:	79fb      	ldrb	r3, [r7, #7]
 800bbca:	4a09      	ldr	r2, [pc, #36]	; (800bbf0 <disk_initialize+0x48>)
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	79fa      	ldrb	r2, [r7, #7]
 800bbd6:	4906      	ldr	r1, [pc, #24]	; (800bbf0 <disk_initialize+0x48>)
 800bbd8:	440a      	add	r2, r1
 800bbda:	7a12      	ldrb	r2, [r2, #8]
 800bbdc:	4610      	mov	r0, r2
 800bbde:	4798      	blx	r3
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20000d58 	.word	0x20000d58

0800bbf4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bbf4:	b590      	push	{r4, r7, lr}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60b9      	str	r1, [r7, #8]
 800bbfc:	607a      	str	r2, [r7, #4]
 800bbfe:	603b      	str	r3, [r7, #0]
 800bc00:	4603      	mov	r3, r0
 800bc02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
 800bc06:	4a0a      	ldr	r2, [pc, #40]	; (800bc30 <disk_read+0x3c>)
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	689c      	ldr	r4, [r3, #8]
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
 800bc12:	4a07      	ldr	r2, [pc, #28]	; (800bc30 <disk_read+0x3c>)
 800bc14:	4413      	add	r3, r2
 800bc16:	7a18      	ldrb	r0, [r3, #8]
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	68b9      	ldr	r1, [r7, #8]
 800bc1e:	47a0      	blx	r4
 800bc20:	4603      	mov	r3, r0
 800bc22:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	371c      	adds	r7, #28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd90      	pop	{r4, r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	20000d58 	.word	0x20000d58

0800bc34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bc34:	b590      	push	{r4, r7, lr}
 800bc36:	b087      	sub	sp, #28
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60b9      	str	r1, [r7, #8]
 800bc3c:	607a      	str	r2, [r7, #4]
 800bc3e:	603b      	str	r3, [r7, #0]
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
 800bc46:	4a0a      	ldr	r2, [pc, #40]	; (800bc70 <disk_write+0x3c>)
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	68dc      	ldr	r4, [r3, #12]
 800bc50:	7bfb      	ldrb	r3, [r7, #15]
 800bc52:	4a07      	ldr	r2, [pc, #28]	; (800bc70 <disk_write+0x3c>)
 800bc54:	4413      	add	r3, r2
 800bc56:	7a18      	ldrb	r0, [r3, #8]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	47a0      	blx	r4
 800bc60:	4603      	mov	r3, r0
 800bc62:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	371c      	adds	r7, #28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd90      	pop	{r4, r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	20000d58 	.word	0x20000d58

0800bc74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	603a      	str	r2, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
 800bc80:	460b      	mov	r3, r1
 800bc82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bc84:	79fb      	ldrb	r3, [r7, #7]
 800bc86:	4a09      	ldr	r2, [pc, #36]	; (800bcac <disk_ioctl+0x38>)
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	79fa      	ldrb	r2, [r7, #7]
 800bc92:	4906      	ldr	r1, [pc, #24]	; (800bcac <disk_ioctl+0x38>)
 800bc94:	440a      	add	r2, r1
 800bc96:	7a10      	ldrb	r0, [r2, #8]
 800bc98:	79b9      	ldrb	r1, [r7, #6]
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	4798      	blx	r3
 800bc9e:	4603      	mov	r3, r0
 800bca0:	73fb      	strb	r3, [r7, #15]
  return res;
 800bca2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	20000d58 	.word	0x20000d58

0800bcb0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b085      	sub	sp, #20
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bcc0:	89fb      	ldrh	r3, [r7, #14]
 800bcc2:	021b      	lsls	r3, r3, #8
 800bcc4:	b21a      	sxth	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	b21b      	sxth	r3, r3
 800bccc:	4313      	orrs	r3, r2
 800bcce:	b21b      	sxth	r3, r3
 800bcd0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bcd2:	89fb      	ldrh	r3, [r7, #14]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3303      	adds	r3, #3
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	021b      	lsls	r3, r3, #8
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	3202      	adds	r2, #2
 800bcf8:	7812      	ldrb	r2, [r2, #0]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	021b      	lsls	r3, r3, #8
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	3201      	adds	r2, #1
 800bd06:	7812      	ldrb	r2, [r2, #0]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	7812      	ldrb	r2, [r2, #0]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60fb      	str	r3, [r7, #12]
	return rv;
 800bd18:	68fb      	ldr	r3, [r7, #12]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3714      	adds	r7, #20
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	607a      	str	r2, [r7, #4]
 800bd38:	887a      	ldrh	r2, [r7, #2]
 800bd3a:	b2d2      	uxtb	r2, r2
 800bd3c:	701a      	strb	r2, [r3, #0]
 800bd3e:	887b      	ldrh	r3, [r7, #2]
 800bd40:	0a1b      	lsrs	r3, r3, #8
 800bd42:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	607a      	str	r2, [r7, #4]
 800bd4a:	887a      	ldrh	r2, [r7, #2]
 800bd4c:	b2d2      	uxtb	r2, r2
 800bd4e:	701a      	strb	r2, [r3, #0]
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	1c5a      	adds	r2, r3, #1
 800bd6a:	607a      	str	r2, [r7, #4]
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	b2d2      	uxtb	r2, r2
 800bd70:	701a      	strb	r2, [r3, #0]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	0a1b      	lsrs	r3, r3, #8
 800bd76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	1c5a      	adds	r2, r3, #1
 800bd7c:	607a      	str	r2, [r7, #4]
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	b2d2      	uxtb	r2, r2
 800bd82:	701a      	strb	r2, [r3, #0]
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	0a1b      	lsrs	r3, r3, #8
 800bd88:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	1c5a      	adds	r2, r3, #1
 800bd8e:	607a      	str	r2, [r7, #4]
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	b2d2      	uxtb	r2, r2
 800bd94:	701a      	strb	r2, [r3, #0]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	0a1b      	lsrs	r3, r3, #8
 800bd9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	1c5a      	adds	r2, r3, #1
 800bda0:	607a      	str	r2, [r7, #4]
 800bda2:	683a      	ldr	r2, [r7, #0]
 800bda4:	b2d2      	uxtb	r2, r2
 800bda6:	701a      	strb	r2, [r3, #0]
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00d      	beq.n	800bdea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	1c53      	adds	r3, r2, #1
 800bdd2:	613b      	str	r3, [r7, #16]
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	1c59      	adds	r1, r3, #1
 800bdd8:	6179      	str	r1, [r7, #20]
 800bdda:	7812      	ldrb	r2, [r2, #0]
 800bddc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3b01      	subs	r3, #1
 800bde2:	607b      	str	r3, [r7, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d1f1      	bne.n	800bdce <mem_cpy+0x1a>
	}
}
 800bdea:	bf00      	nop
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bdf6:	b480      	push	{r7}
 800bdf8:	b087      	sub	sp, #28
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	60f8      	str	r0, [r7, #12]
 800bdfe:	60b9      	str	r1, [r7, #8]
 800be00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	1c5a      	adds	r2, r3, #1
 800be0a:	617a      	str	r2, [r7, #20]
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	b2d2      	uxtb	r2, r2
 800be10:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	3b01      	subs	r3, #1
 800be16:	607b      	str	r3, [r7, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1f3      	bne.n	800be06 <mem_set+0x10>
}
 800be1e:	bf00      	nop
 800be20:	371c      	adds	r7, #28
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr

0800be2a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800be2a:	b480      	push	{r7}
 800be2c:	b089      	sub	sp, #36	; 0x24
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	60b9      	str	r1, [r7, #8]
 800be34:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	61fb      	str	r3, [r7, #28]
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800be3e:	2300      	movs	r3, #0
 800be40:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	61fa      	str	r2, [r7, #28]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	4619      	mov	r1, r3
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	61ba      	str	r2, [r7, #24]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	1acb      	subs	r3, r1, r3
 800be56:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	607b      	str	r3, [r7, #4]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d002      	beq.n	800be6a <mem_cmp+0x40>
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0eb      	beq.n	800be42 <mem_cmp+0x18>

	return r;
 800be6a:	697b      	ldr	r3, [r7, #20]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3724      	adds	r7, #36	; 0x24
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800be82:	e002      	b.n	800be8a <chk_chr+0x12>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3301      	adds	r3, #1
 800be88:	607b      	str	r3, [r7, #4]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <chk_chr+0x26>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	461a      	mov	r2, r3
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d1f2      	bne.n	800be84 <chk_chr+0xc>
	return *str;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	781b      	ldrb	r3, [r3, #0]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	370c      	adds	r7, #12
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
	...

0800beb0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800beba:	2300      	movs	r3, #0
 800bebc:	60bb      	str	r3, [r7, #8]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	e029      	b.n	800bf18 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bec4:	4a27      	ldr	r2, [pc, #156]	; (800bf64 <chk_lock+0xb4>)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	011b      	lsls	r3, r3, #4
 800beca:	4413      	add	r3, r2
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d01d      	beq.n	800bf0e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bed2:	4a24      	ldr	r2, [pc, #144]	; (800bf64 <chk_lock+0xb4>)
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	011b      	lsls	r3, r3, #4
 800bed8:	4413      	add	r3, r2
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d116      	bne.n	800bf12 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bee4:	4a1f      	ldr	r2, [pc, #124]	; (800bf64 <chk_lock+0xb4>)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	011b      	lsls	r3, r3, #4
 800beea:	4413      	add	r3, r2
 800beec:	3304      	adds	r3, #4
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d10c      	bne.n	800bf12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bef8:	4a1a      	ldr	r2, [pc, #104]	; (800bf64 <chk_lock+0xb4>)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	4413      	add	r3, r2
 800bf00:	3308      	adds	r3, #8
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d102      	bne.n	800bf12 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bf0c:	e007      	b.n	800bf1e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3301      	adds	r3, #1
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d9d2      	bls.n	800bec4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d109      	bne.n	800bf38 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <chk_lock+0x80>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b02      	cmp	r3, #2
 800bf2e:	d101      	bne.n	800bf34 <chk_lock+0x84>
 800bf30:	2300      	movs	r3, #0
 800bf32:	e010      	b.n	800bf56 <chk_lock+0xa6>
 800bf34:	2312      	movs	r3, #18
 800bf36:	e00e      	b.n	800bf56 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d108      	bne.n	800bf50 <chk_lock+0xa0>
 800bf3e:	4a09      	ldr	r2, [pc, #36]	; (800bf64 <chk_lock+0xb4>)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	011b      	lsls	r3, r3, #4
 800bf44:	4413      	add	r3, r2
 800bf46:	330c      	adds	r3, #12
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4e:	d101      	bne.n	800bf54 <chk_lock+0xa4>
 800bf50:	2310      	movs	r3, #16
 800bf52:	e000      	b.n	800bf56 <chk_lock+0xa6>
 800bf54:	2300      	movs	r3, #0
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3714      	adds	r7, #20
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop
 800bf64:	20000b38 	.word	0x20000b38

0800bf68 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	e002      	b.n	800bf7a <enq_lock+0x12>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3301      	adds	r3, #1
 800bf78:	607b      	str	r3, [r7, #4]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d806      	bhi.n	800bf8e <enq_lock+0x26>
 800bf80:	4a09      	ldr	r2, [pc, #36]	; (800bfa8 <enq_lock+0x40>)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	011b      	lsls	r3, r3, #4
 800bf86:	4413      	add	r3, r2
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1f2      	bne.n	800bf74 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	bf14      	ite	ne
 800bf94:	2301      	movne	r3, #1
 800bf96:	2300      	moveq	r3, #0
 800bf98:	b2db      	uxtb	r3, r3
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	20000b38 	.word	0x20000b38

0800bfac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	e01f      	b.n	800bffc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bfbc:	4a41      	ldr	r2, [pc, #260]	; (800c0c4 <inc_lock+0x118>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	4413      	add	r3, r2
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d113      	bne.n	800bff6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bfce:	4a3d      	ldr	r2, [pc, #244]	; (800c0c4 <inc_lock+0x118>)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	4413      	add	r3, r2
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d109      	bne.n	800bff6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bfe2:	4a38      	ldr	r2, [pc, #224]	; (800c0c4 <inc_lock+0x118>)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	011b      	lsls	r3, r3, #4
 800bfe8:	4413      	add	r3, r2
 800bfea:	3308      	adds	r3, #8
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d006      	beq.n	800c004 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3301      	adds	r3, #1
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d9dc      	bls.n	800bfbc <inc_lock+0x10>
 800c002:	e000      	b.n	800c006 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c004:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d132      	bne.n	800c072 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]
 800c010:	e002      	b.n	800c018 <inc_lock+0x6c>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	3301      	adds	r3, #1
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d806      	bhi.n	800c02c <inc_lock+0x80>
 800c01e:	4a29      	ldr	r2, [pc, #164]	; (800c0c4 <inc_lock+0x118>)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	4413      	add	r3, r2
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1f2      	bne.n	800c012 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2b02      	cmp	r3, #2
 800c030:	d101      	bne.n	800c036 <inc_lock+0x8a>
 800c032:	2300      	movs	r3, #0
 800c034:	e040      	b.n	800c0b8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	4922      	ldr	r1, [pc, #136]	; (800c0c4 <inc_lock+0x118>)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	011b      	lsls	r3, r3, #4
 800c040:	440b      	add	r3, r1
 800c042:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689a      	ldr	r2, [r3, #8]
 800c048:	491e      	ldr	r1, [pc, #120]	; (800c0c4 <inc_lock+0x118>)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	011b      	lsls	r3, r3, #4
 800c04e:	440b      	add	r3, r1
 800c050:	3304      	adds	r3, #4
 800c052:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	695a      	ldr	r2, [r3, #20]
 800c058:	491a      	ldr	r1, [pc, #104]	; (800c0c4 <inc_lock+0x118>)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	011b      	lsls	r3, r3, #4
 800c05e:	440b      	add	r3, r1
 800c060:	3308      	adds	r3, #8
 800c062:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c064:	4a17      	ldr	r2, [pc, #92]	; (800c0c4 <inc_lock+0x118>)
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	4413      	add	r3, r2
 800c06c:	330c      	adds	r3, #12
 800c06e:	2200      	movs	r2, #0
 800c070:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d009      	beq.n	800c08c <inc_lock+0xe0>
 800c078:	4a12      	ldr	r2, [pc, #72]	; (800c0c4 <inc_lock+0x118>)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	011b      	lsls	r3, r3, #4
 800c07e:	4413      	add	r3, r2
 800c080:	330c      	adds	r3, #12
 800c082:	881b      	ldrh	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d001      	beq.n	800c08c <inc_lock+0xe0>
 800c088:	2300      	movs	r3, #0
 800c08a:	e015      	b.n	800c0b8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d108      	bne.n	800c0a4 <inc_lock+0xf8>
 800c092:	4a0c      	ldr	r2, [pc, #48]	; (800c0c4 <inc_lock+0x118>)
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	011b      	lsls	r3, r3, #4
 800c098:	4413      	add	r3, r2
 800c09a:	330c      	adds	r3, #12
 800c09c:	881b      	ldrh	r3, [r3, #0]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	e001      	b.n	800c0a8 <inc_lock+0xfc>
 800c0a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0a8:	4906      	ldr	r1, [pc, #24]	; (800c0c4 <inc_lock+0x118>)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	440b      	add	r3, r1
 800c0b0:	330c      	adds	r3, #12
 800c0b2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3301      	adds	r3, #1
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	20000b38 	.word	0x20000b38

0800c0c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	e010      	b.n	800c0f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0d6:	4a0d      	ldr	r2, [pc, #52]	; (800c10c <clear_lock+0x44>)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	011b      	lsls	r3, r3, #4
 800c0dc:	4413      	add	r3, r2
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d105      	bne.n	800c0f2 <clear_lock+0x2a>
 800c0e6:	4a09      	ldr	r2, [pc, #36]	; (800c10c <clear_lock+0x44>)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	011b      	lsls	r3, r3, #4
 800c0ec:	4413      	add	r3, r2
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	60fb      	str	r3, [r7, #12]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d9eb      	bls.n	800c0d6 <clear_lock+0xe>
	}
}
 800c0fe:	bf00      	nop
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20000b38 	.word	0x20000b38

0800c110 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	78db      	ldrb	r3, [r3, #3]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d034      	beq.n	800c18e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c128:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	7858      	ldrb	r0, [r3, #1]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c134:	2301      	movs	r3, #1
 800c136:	697a      	ldr	r2, [r7, #20]
 800c138:	f7ff fd7c 	bl	800bc34 <disk_write>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d002      	beq.n	800c148 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c142:	2301      	movs	r3, #1
 800c144:	73fb      	strb	r3, [r7, #15]
 800c146:	e022      	b.n	800c18e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2200      	movs	r2, #0
 800c14c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	1ad2      	subs	r2, r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	69db      	ldr	r3, [r3, #28]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d217      	bcs.n	800c18e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	789b      	ldrb	r3, [r3, #2]
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	e010      	b.n	800c188 <sync_window+0x78>
					wsect += fs->fsize;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	4413      	add	r3, r2
 800c16e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	7858      	ldrb	r0, [r3, #1]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c17a:	2301      	movs	r3, #1
 800c17c:	697a      	ldr	r2, [r7, #20]
 800c17e:	f7ff fd59 	bl	800bc34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	3b01      	subs	r3, #1
 800c186:	613b      	str	r3, [r7, #16]
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d8eb      	bhi.n	800c166 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c190:	4618      	mov	r0, r3
 800c192:	3718      	adds	r7, #24
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d01b      	beq.n	800c1e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff ffad 	bl	800c110 <sync_window>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d113      	bne.n	800c1e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	7858      	ldrb	r0, [r3, #1]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	f7ff fd11 	bl	800bbf4 <disk_read>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d004      	beq.n	800c1e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	683a      	ldr	r2, [r7, #0]
 800c1e6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3710      	adds	r7, #16
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}

0800c1f2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	3b02      	subs	r3, #2
 800c200:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	3b02      	subs	r3, #2
 800c208:	683a      	ldr	r2, [r7, #0]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d301      	bcc.n	800c212 <clust2sect+0x20>
 800c20e:	2300      	movs	r3, #0
 800c210:	e008      	b.n	800c224 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	895b      	ldrh	r3, [r3, #10]
 800c216:	461a      	mov	r2, r3
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	fb03 f202 	mul.w	r2, r3, r2
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c222:	4413      	add	r3, r2
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b086      	sub	sp, #24
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d904      	bls.n	800c250 <get_fat+0x20>
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d302      	bcc.n	800c256 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c250:	2301      	movs	r3, #1
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	e08e      	b.n	800c374 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c256:	f04f 33ff 	mov.w	r3, #4294967295
 800c25a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b02      	cmp	r3, #2
 800c262:	d045      	beq.n	800c2f0 <get_fat+0xc0>
 800c264:	2b03      	cmp	r3, #3
 800c266:	d05e      	beq.n	800c326 <get_fat+0xf6>
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d179      	bne.n	800c360 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	085b      	lsrs	r3, r3, #1
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	4413      	add	r3, r2
 800c278:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	0b1b      	lsrs	r3, r3, #12
 800c282:	4413      	add	r3, r2
 800c284:	4619      	mov	r1, r3
 800c286:	6938      	ldr	r0, [r7, #16]
 800c288:	f7ff ff86 	bl	800c198 <move_window>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d169      	bne.n	800c366 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	60fa      	str	r2, [r7, #12]
 800c298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	0b1b      	lsrs	r3, r3, #12
 800c2ae:	4413      	add	r3, r2
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	6938      	ldr	r0, [r7, #16]
 800c2b4:	f7ff ff70 	bl	800c198 <move_window>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d155      	bne.n	800c36a <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c2cc:	021b      	lsls	r3, r3, #8
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d002      	beq.n	800c2e6 <get_fat+0xb6>
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	091b      	lsrs	r3, r3, #4
 800c2e4:	e002      	b.n	800c2ec <get_fat+0xbc>
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2ec:	617b      	str	r3, [r7, #20]
			break;
 800c2ee:	e041      	b.n	800c374 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	0adb      	lsrs	r3, r3, #11
 800c2f8:	4413      	add	r3, r2
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6938      	ldr	r0, [r7, #16]
 800c2fe:	f7ff ff4b 	bl	800c198 <move_window>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d132      	bne.n	800c36e <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	0059      	lsls	r1, r3, #1
 800c312:	f640 73fe 	movw	r3, #4094	; 0xffe
 800c316:	400b      	ands	r3, r1
 800c318:	4413      	add	r3, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7ff fcc8 	bl	800bcb0 <ld_word>
 800c320:	4603      	mov	r3, r0
 800c322:	617b      	str	r3, [r7, #20]
			break;
 800c324:	e026      	b.n	800c374 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	0a9b      	lsrs	r3, r3, #10
 800c32e:	4413      	add	r3, r2
 800c330:	4619      	mov	r1, r3
 800c332:	6938      	ldr	r0, [r7, #16]
 800c334:	f7ff ff30 	bl	800c198 <move_window>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d119      	bne.n	800c372 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	0099      	lsls	r1, r3, #2
 800c348:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c34c:	400b      	ands	r3, r1
 800c34e:	4413      	add	r3, r2
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff fcc5 	bl	800bce0 <ld_dword>
 800c356:	4603      	mov	r3, r0
 800c358:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c35c:	617b      	str	r3, [r7, #20]
			break;
 800c35e:	e009      	b.n	800c374 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c360:	2301      	movs	r3, #1
 800c362:	617b      	str	r3, [r7, #20]
 800c364:	e006      	b.n	800c374 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c366:	bf00      	nop
 800c368:	e004      	b.n	800c374 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c36a:	bf00      	nop
 800c36c:	e002      	b.n	800c374 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c36e:	bf00      	nop
 800c370:	e000      	b.n	800c374 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c372:	bf00      	nop
		}
	}

	return val;
 800c374:	697b      	ldr	r3, [r7, #20]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3718      	adds	r7, #24
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}

0800c37e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c37e:	b590      	push	{r4, r7, lr}
 800c380:	b089      	sub	sp, #36	; 0x24
 800c382:	af00      	add	r7, sp, #0
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c38a:	2302      	movs	r3, #2
 800c38c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2b01      	cmp	r3, #1
 800c392:	f240 80d9 	bls.w	800c548 <put_fat+0x1ca>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	68ba      	ldr	r2, [r7, #8]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	f080 80d3 	bcs.w	800c548 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d073      	beq.n	800c492 <put_fat+0x114>
 800c3aa:	2b03      	cmp	r3, #3
 800c3ac:	f000 8092 	beq.w	800c4d4 <put_fat+0x156>
 800c3b0:	2b01      	cmp	r3, #1
 800c3b2:	f040 80c9 	bne.w	800c548 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	61bb      	str	r3, [r7, #24]
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	085b      	lsrs	r3, r3, #1
 800c3be:	69ba      	ldr	r2, [r7, #24]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	0b1b      	lsrs	r3, r3, #12
 800c3cc:	4413      	add	r3, r2
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f7ff fee1 	bl	800c198 <move_window>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3da:	7ffb      	ldrb	r3, [r7, #31]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	f040 80ac 	bne.w	800c53a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	1c59      	adds	r1, r3, #1
 800c3ec:	61b9      	str	r1, [r7, #24]
 800c3ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3f2:	4413      	add	r3, r2
 800c3f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	f003 0301 	and.w	r3, r3, #1
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00d      	beq.n	800c41c <put_fat+0x9e>
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	b25b      	sxtb	r3, r3
 800c406:	f003 030f 	and.w	r3, r3, #15
 800c40a:	b25a      	sxtb	r2, r3
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	011b      	lsls	r3, r3, #4
 800c412:	b25b      	sxtb	r3, r3
 800c414:	4313      	orrs	r3, r2
 800c416:	b25b      	sxtb	r3, r3
 800c418:	b2db      	uxtb	r3, r3
 800c41a:	e001      	b.n	800c420 <put_fat+0xa2>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	b2db      	uxtb	r3, r3
 800c420:	697a      	ldr	r2, [r7, #20]
 800c422:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2201      	movs	r2, #1
 800c428:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	0b1b      	lsrs	r3, r3, #12
 800c432:	4413      	add	r3, r2
 800c434:	4619      	mov	r1, r3
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f7ff feae 	bl	800c198 <move_window>
 800c43c:	4603      	mov	r3, r0
 800c43e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c440:	7ffb      	ldrb	r3, [r7, #31]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d17b      	bne.n	800c53e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c44c:	69bb      	ldr	r3, [r7, #24]
 800c44e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c452:	4413      	add	r3, r2
 800c454:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	f003 0301 	and.w	r3, r3, #1
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d003      	beq.n	800c468 <put_fat+0xea>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	091b      	lsrs	r3, r3, #4
 800c464:	b2db      	uxtb	r3, r3
 800c466:	e00e      	b.n	800c486 <put_fat+0x108>
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	b25b      	sxtb	r3, r3
 800c46e:	f023 030f 	bic.w	r3, r3, #15
 800c472:	b25a      	sxtb	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	0a1b      	lsrs	r3, r3, #8
 800c478:	b25b      	sxtb	r3, r3
 800c47a:	f003 030f 	and.w	r3, r3, #15
 800c47e:	b25b      	sxtb	r3, r3
 800c480:	4313      	orrs	r3, r2
 800c482:	b25b      	sxtb	r3, r3
 800c484:	b2db      	uxtb	r3, r3
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2201      	movs	r2, #1
 800c48e:	70da      	strb	r2, [r3, #3]
			break;
 800c490:	e05a      	b.n	800c548 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	0adb      	lsrs	r3, r3, #11
 800c49a:	4413      	add	r3, r2
 800c49c:	4619      	mov	r1, r3
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f7ff fe7a 	bl	800c198 <move_window>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4a8:	7ffb      	ldrb	r3, [r7, #31]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d149      	bne.n	800c542 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	0059      	lsls	r1, r3, #1
 800c4b8:	f640 73fe 	movw	r3, #4094	; 0xffe
 800c4bc:	400b      	ands	r3, r1
 800c4be:	4413      	add	r3, r2
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	b292      	uxth	r2, r2
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff fc2d 	bl	800bd26 <st_word>
			fs->wflag = 1;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	70da      	strb	r2, [r3, #3]
			break;
 800c4d2:	e039      	b.n	800c548 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	0a9b      	lsrs	r3, r3, #10
 800c4dc:	4413      	add	r3, r2
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7ff fe59 	bl	800c198 <move_window>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4ea:	7ffb      	ldrb	r3, [r7, #31]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d12a      	bne.n	800c546 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	0099      	lsls	r1, r3, #2
 800c500:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c504:	400b      	ands	r3, r1
 800c506:	4413      	add	r3, r2
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff fbe9 	bl	800bce0 <ld_dword>
 800c50e:	4603      	mov	r3, r0
 800c510:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c514:	4323      	orrs	r3, r4
 800c516:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	0099      	lsls	r1, r3, #2
 800c522:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c526:	400b      	ands	r3, r1
 800c528:	4413      	add	r3, r2
 800c52a:	6879      	ldr	r1, [r7, #4]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7ff fc15 	bl	800bd5c <st_dword>
			fs->wflag = 1;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2201      	movs	r2, #1
 800c536:	70da      	strb	r2, [r3, #3]
			break;
 800c538:	e006      	b.n	800c548 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c53a:	bf00      	nop
 800c53c:	e004      	b.n	800c548 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c53e:	bf00      	nop
 800c540:	e002      	b.n	800c548 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c542:	bf00      	nop
 800c544:	e000      	b.n	800c548 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c546:	bf00      	nop
		}
	}
	return res;
 800c548:	7ffb      	ldrb	r3, [r7, #31]
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3724      	adds	r7, #36	; 0x24
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd90      	pop	{r4, r7, pc}

0800c552 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c552:	b580      	push	{r7, lr}
 800c554:	b088      	sub	sp, #32
 800c556:	af00      	add	r7, sp, #0
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c55e:	2300      	movs	r3, #0
 800c560:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d904      	bls.n	800c578 <remove_chain+0x26>
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	68ba      	ldr	r2, [r7, #8]
 800c574:	429a      	cmp	r2, r3
 800c576:	d301      	bcc.n	800c57c <remove_chain+0x2a>
 800c578:	2302      	movs	r3, #2
 800c57a:	e04b      	b.n	800c614 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00c      	beq.n	800c59c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c582:	f04f 32ff 	mov.w	r2, #4294967295
 800c586:	6879      	ldr	r1, [r7, #4]
 800c588:	69b8      	ldr	r0, [r7, #24]
 800c58a:	f7ff fef8 	bl	800c37e <put_fat>
 800c58e:	4603      	mov	r3, r0
 800c590:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c592:	7ffb      	ldrb	r3, [r7, #31]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d001      	beq.n	800c59c <remove_chain+0x4a>
 800c598:	7ffb      	ldrb	r3, [r7, #31]
 800c59a:	e03b      	b.n	800c614 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c59c:	68b9      	ldr	r1, [r7, #8]
 800c59e:	68f8      	ldr	r0, [r7, #12]
 800c5a0:	f7ff fe46 	bl	800c230 <get_fat>
 800c5a4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d031      	beq.n	800c610 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d101      	bne.n	800c5b6 <remove_chain+0x64>
 800c5b2:	2302      	movs	r3, #2
 800c5b4:	e02e      	b.n	800c614 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5bc:	d101      	bne.n	800c5c2 <remove_chain+0x70>
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e028      	b.n	800c614 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	68b9      	ldr	r1, [r7, #8]
 800c5c6:	69b8      	ldr	r0, [r7, #24]
 800c5c8:	f7ff fed9 	bl	800c37e <put_fat>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c5d0:	7ffb      	ldrb	r3, [r7, #31]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d001      	beq.n	800c5da <remove_chain+0x88>
 800c5d6:	7ffb      	ldrb	r3, [r7, #31]
 800c5d8:	e01c      	b.n	800c614 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	695a      	ldr	r2, [r3, #20]
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	3b02      	subs	r3, #2
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d20b      	bcs.n	800c600 <remove_chain+0xae>
			fs->free_clst++;
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	695b      	ldr	r3, [r3, #20]
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	791b      	ldrb	r3, [r3, #4]
 800c5f6:	f043 0301 	orr.w	r3, r3, #1
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d3c6      	bcc.n	800c59c <remove_chain+0x4a>
 800c60e:	e000      	b.n	800c612 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c610:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3720      	adds	r7, #32
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10d      	bne.n	800c64e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	691b      	ldr	r3, [r3, #16]
 800c636:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d004      	beq.n	800c648 <create_chain+0x2c>
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	69ba      	ldr	r2, [r7, #24]
 800c644:	429a      	cmp	r2, r3
 800c646:	d31b      	bcc.n	800c680 <create_chain+0x64>
 800c648:	2301      	movs	r3, #1
 800c64a:	61bb      	str	r3, [r7, #24]
 800c64c:	e018      	b.n	800c680 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7ff fded 	bl	800c230 <get_fat>
 800c656:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d801      	bhi.n	800c662 <create_chain+0x46>
 800c65e:	2301      	movs	r3, #1
 800c660:	e070      	b.n	800c744 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c668:	d101      	bne.n	800c66e <create_chain+0x52>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	e06a      	b.n	800c744 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	429a      	cmp	r2, r3
 800c676:	d201      	bcs.n	800c67c <create_chain+0x60>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	e063      	b.n	800c744 <create_chain+0x128>
		scl = clst;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c684:	69fb      	ldr	r3, [r7, #28]
 800c686:	3301      	adds	r3, #1
 800c688:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	69fa      	ldr	r2, [r7, #28]
 800c690:	429a      	cmp	r2, r3
 800c692:	d307      	bcc.n	800c6a4 <create_chain+0x88>
				ncl = 2;
 800c694:	2302      	movs	r3, #2
 800c696:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c698:	69fa      	ldr	r2, [r7, #28]
 800c69a:	69bb      	ldr	r3, [r7, #24]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d901      	bls.n	800c6a4 <create_chain+0x88>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	e04f      	b.n	800c744 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c6a4:	69f9      	ldr	r1, [r7, #28]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7ff fdc2 	bl	800c230 <get_fat>
 800c6ac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00e      	beq.n	800c6d2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d003      	beq.n	800c6c2 <create_chain+0xa6>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6c0:	d101      	bne.n	800c6c6 <create_chain+0xaa>
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	e03e      	b.n	800c744 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c6c6:	69fa      	ldr	r2, [r7, #28]
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d1da      	bne.n	800c684 <create_chain+0x68>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e038      	b.n	800c744 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c6d2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c6d8:	69f9      	ldr	r1, [r7, #28]
 800c6da:	6938      	ldr	r0, [r7, #16]
 800c6dc:	f7ff fe4f 	bl	800c37e <put_fat>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c6e4:	7dfb      	ldrb	r3, [r7, #23]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d109      	bne.n	800c6fe <create_chain+0xe2>
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d006      	beq.n	800c6fe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c6f0:	69fa      	ldr	r2, [r7, #28]
 800c6f2:	6839      	ldr	r1, [r7, #0]
 800c6f4:	6938      	ldr	r0, [r7, #16]
 800c6f6:	f7ff fe42 	bl	800c37e <put_fat>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c6fe:	7dfb      	ldrb	r3, [r7, #23]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d116      	bne.n	800c732 <create_chain+0x116>
		fs->last_clst = ncl;
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	69fa      	ldr	r2, [r7, #28]
 800c708:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	695a      	ldr	r2, [r3, #20]
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	3b02      	subs	r3, #2
 800c714:	429a      	cmp	r2, r3
 800c716:	d804      	bhi.n	800c722 <create_chain+0x106>
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	695b      	ldr	r3, [r3, #20]
 800c71c:	1e5a      	subs	r2, r3, #1
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	791b      	ldrb	r3, [r3, #4]
 800c726:	f043 0301 	orr.w	r3, r3, #1
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	711a      	strb	r2, [r3, #4]
 800c730:	e007      	b.n	800c742 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c732:	7dfb      	ldrb	r3, [r7, #23]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d102      	bne.n	800c73e <create_chain+0x122>
 800c738:	f04f 33ff 	mov.w	r3, #4294967295
 800c73c:	e000      	b.n	800c740 <create_chain+0x124>
 800c73e:	2301      	movs	r3, #1
 800c740:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c742:	69fb      	ldr	r3, [r7, #28]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3720      	adds	r7, #32
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c762:	d204      	bcs.n	800c76e <dir_sdi+0x22>
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	f003 031f 	and.w	r3, r3, #31
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c76e:	2302      	movs	r3, #2
 800c770:	e063      	b.n	800c83a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	683a      	ldr	r2, [r7, #0]
 800c776:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	689b      	ldr	r3, [r3, #8]
 800c77c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d106      	bne.n	800c792 <dir_sdi+0x46>
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b02      	cmp	r3, #2
 800c78a:	d902      	bls.n	800c792 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c790:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10c      	bne.n	800c7b2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	095b      	lsrs	r3, r3, #5
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	8912      	ldrh	r2, [r2, #8]
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d301      	bcc.n	800c7a8 <dir_sdi+0x5c>
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	e048      	b.n	800c83a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	61da      	str	r2, [r3, #28]
 800c7b0:	e029      	b.n	800c806 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	895b      	ldrh	r3, [r3, #10]
 800c7b6:	031b      	lsls	r3, r3, #12
 800c7b8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7ba:	e019      	b.n	800c7f0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6979      	ldr	r1, [r7, #20]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7ff fd35 	bl	800c230 <get_fat>
 800c7c6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ce:	d101      	bne.n	800c7d4 <dir_sdi+0x88>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	e032      	b.n	800c83a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d904      	bls.n	800c7e4 <dir_sdi+0x98>
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	699b      	ldr	r3, [r3, #24]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d301      	bcc.n	800c7e8 <dir_sdi+0x9c>
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	e028      	b.n	800c83a <dir_sdi+0xee>
			ofs -= csz;
 800c7e8:	683a      	ldr	r2, [r7, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7f0:	683a      	ldr	r2, [r7, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d2e1      	bcs.n	800c7bc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c7f8:	6979      	ldr	r1, [r7, #20]
 800c7fa:	6938      	ldr	r0, [r7, #16]
 800c7fc:	f7ff fcf9 	bl	800c1f2 <clust2sect>
 800c800:	4602      	mov	r2, r0
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	697a      	ldr	r2, [r7, #20]
 800c80a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	69db      	ldr	r3, [r3, #28]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <dir_sdi+0xcc>
 800c814:	2302      	movs	r3, #2
 800c816:	e010      	b.n	800c83a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	69da      	ldr	r2, [r3, #28]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	0b1b      	lsrs	r3, r3, #12
 800c820:	441a      	add	r2, r3
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c832:	441a      	add	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b086      	sub	sp, #24
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	3320      	adds	r3, #32
 800c858:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	69db      	ldr	r3, [r3, #28]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d003      	beq.n	800c86a <dir_next+0x28>
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c868:	d301      	bcc.n	800c86e <dir_next+0x2c>
 800c86a:	2304      	movs	r3, #4
 800c86c:	e0aa      	b.n	800c9c4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c874:	2b00      	cmp	r3, #0
 800c876:	f040 8098 	bne.w	800c9aa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	1c5a      	adds	r2, r3, #1
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	699b      	ldr	r3, [r3, #24]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10b      	bne.n	800c8a4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	095b      	lsrs	r3, r3, #5
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	8912      	ldrh	r2, [r2, #8]
 800c894:	4293      	cmp	r3, r2
 800c896:	f0c0 8088 	bcc.w	800c9aa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	61da      	str	r2, [r3, #28]
 800c8a0:	2304      	movs	r3, #4
 800c8a2:	e08f      	b.n	800c9c4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	0b1b      	lsrs	r3, r3, #12
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	8952      	ldrh	r2, [r2, #10]
 800c8ac:	3a01      	subs	r2, #1
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d17a      	bne.n	800c9aa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4610      	mov	r0, r2
 800c8be:	f7ff fcb7 	bl	800c230 <get_fat>
 800c8c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d801      	bhi.n	800c8ce <dir_next+0x8c>
 800c8ca:	2302      	movs	r3, #2
 800c8cc:	e07a      	b.n	800c9c4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8d4:	d101      	bne.n	800c8da <dir_next+0x98>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e074      	b.n	800c9c4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d358      	bcc.n	800c996 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d104      	bne.n	800c8f4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	61da      	str	r2, [r3, #28]
 800c8f0:	2304      	movs	r3, #4
 800c8f2:	e067      	b.n	800c9c4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	f7ff fe8d 	bl	800c61c <create_chain>
 800c902:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <dir_next+0xcc>
 800c90a:	2307      	movs	r3, #7
 800c90c:	e05a      	b.n	800c9c4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d101      	bne.n	800c918 <dir_next+0xd6>
 800c914:	2302      	movs	r3, #2
 800c916:	e055      	b.n	800c9c4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91e:	d101      	bne.n	800c924 <dir_next+0xe2>
 800c920:	2301      	movs	r3, #1
 800c922:	e04f      	b.n	800c9c4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f7ff fbf3 	bl	800c110 <sync_window>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <dir_next+0xf2>
 800c930:	2301      	movs	r3, #1
 800c932:	e047      	b.n	800c9c4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3334      	adds	r3, #52	; 0x34
 800c938:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c93c:	2100      	movs	r1, #0
 800c93e:	4618      	mov	r0, r3
 800c940:	f7ff fa59 	bl	800bdf6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c944:	2300      	movs	r3, #0
 800c946:	613b      	str	r3, [r7, #16]
 800c948:	6979      	ldr	r1, [r7, #20]
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f7ff fc51 	bl	800c1f2 <clust2sect>
 800c950:	4602      	mov	r2, r0
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	631a      	str	r2, [r3, #48]	; 0x30
 800c956:	e012      	b.n	800c97e <dir_next+0x13c>
						fs->wflag = 1;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2201      	movs	r2, #1
 800c95c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f7ff fbd6 	bl	800c110 <sync_window>
 800c964:	4603      	mov	r3, r0
 800c966:	2b00      	cmp	r3, #0
 800c968:	d001      	beq.n	800c96e <dir_next+0x12c>
 800c96a:	2301      	movs	r3, #1
 800c96c:	e02a      	b.n	800c9c4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	3301      	adds	r3, #1
 800c972:	613b      	str	r3, [r7, #16]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c978:	1c5a      	adds	r2, r3, #1
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	631a      	str	r2, [r3, #48]	; 0x30
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	895b      	ldrh	r3, [r3, #10]
 800c982:	461a      	mov	r2, r3
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	4293      	cmp	r3, r2
 800c988:	d3e6      	bcc.n	800c958 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	1ad2      	subs	r2, r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c99c:	6979      	ldr	r1, [r7, #20]
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f7ff fc27 	bl	800c1f2 <clust2sect>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68ba      	ldr	r2, [r7, #8]
 800c9ae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9bc:	441a      	add	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3718      	adds	r7, #24
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b086      	sub	sp, #24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c9dc:	2100      	movs	r1, #0
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7ff feb4 	bl	800c74c <dir_sdi>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d12b      	bne.n	800ca46 <dir_alloc+0x7a>
		n = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	69db      	ldr	r3, [r3, #28]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f7ff fbcd 	bl	800c198 <move_window>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca02:	7dfb      	ldrb	r3, [r7, #23]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d11d      	bne.n	800ca44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a1b      	ldr	r3, [r3, #32]
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	2be5      	cmp	r3, #229	; 0xe5
 800ca10:	d004      	beq.n	800ca1c <dir_alloc+0x50>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d107      	bne.n	800ca2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	613b      	str	r3, [r7, #16]
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d102      	bne.n	800ca30 <dir_alloc+0x64>
 800ca2a:	e00c      	b.n	800ca46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ca30:	2101      	movs	r1, #1
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7ff ff05 	bl	800c842 <dir_next>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ca3c:	7dfb      	ldrb	r3, [r7, #23]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0d7      	beq.n	800c9f2 <dir_alloc+0x26>
 800ca42:	e000      	b.n	800ca46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ca44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	2b04      	cmp	r3, #4
 800ca4a:	d101      	bne.n	800ca50 <dir_alloc+0x84>
 800ca4c:	2307      	movs	r3, #7
 800ca4e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ca50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3718      	adds	r7, #24
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	331a      	adds	r3, #26
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7ff f921 	bl	800bcb0 <ld_word>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d109      	bne.n	800ca8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	3314      	adds	r3, #20
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7ff f916 	bl	800bcb0 <ld_word>
 800ca84:	4603      	mov	r3, r0
 800ca86:	041b      	lsls	r3, r3, #16
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3710      	adds	r7, #16
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	331a      	adds	r3, #26
 800caa8:	687a      	ldr	r2, [r7, #4]
 800caaa:	b292      	uxth	r2, r2
 800caac:	4611      	mov	r1, r2
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff f939 	bl	800bd26 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	2b03      	cmp	r3, #3
 800caba:	d109      	bne.n	800cad0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	f103 0214 	add.w	r2, r3, #20
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	0c1b      	lsrs	r3, r3, #16
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	4619      	mov	r1, r3
 800caca:	4610      	mov	r0, r2
 800cacc:	f7ff f92b 	bl	800bd26 <st_word>
	}
}
 800cad0:	bf00      	nop
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800cad8:	b590      	push	{r4, r7, lr}
 800cada:	b087      	sub	sp, #28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	331a      	adds	r3, #26
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff f8e2 	bl	800bcb0 <ld_word>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <cmp_lfn+0x1e>
 800caf2:	2300      	movs	r3, #0
 800caf4:	e059      	b.n	800cbaa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cafe:	1e5a      	subs	r2, r3, #1
 800cb00:	4613      	mov	r3, r2
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4413      	add	r3, r2
 800cb0a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	81fb      	strh	r3, [r7, #14]
 800cb10:	2300      	movs	r3, #0
 800cb12:	613b      	str	r3, [r7, #16]
 800cb14:	e033      	b.n	800cb7e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cb16:	4a27      	ldr	r2, [pc, #156]	; (800cbb4 <cmp_lfn+0xdc>)
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	4413      	add	r3, r2
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7ff f8c3 	bl	800bcb0 <ld_word>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cb2e:	89fb      	ldrh	r3, [r7, #14]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d01a      	beq.n	800cb6a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	2bfe      	cmp	r3, #254	; 0xfe
 800cb38:	d812      	bhi.n	800cb60 <cmp_lfn+0x88>
 800cb3a:	89bb      	ldrh	r3, [r7, #12]
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 ffa1 	bl	800ea84 <ff_wtoupper>
 800cb42:	4603      	mov	r3, r0
 800cb44:	461c      	mov	r4, r3
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	1c5a      	adds	r2, r3, #1
 800cb4a:	617a      	str	r2, [r7, #20]
 800cb4c:	005b      	lsls	r3, r3, #1
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	4413      	add	r3, r2
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f001 ff95 	bl	800ea84 <ff_wtoupper>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	d001      	beq.n	800cb64 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cb60:	2300      	movs	r3, #0
 800cb62:	e022      	b.n	800cbaa <cmp_lfn+0xd2>
			}
			wc = uc;
 800cb64:	89bb      	ldrh	r3, [r7, #12]
 800cb66:	81fb      	strh	r3, [r7, #14]
 800cb68:	e006      	b.n	800cb78 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cb6a:	89bb      	ldrh	r3, [r7, #12]
 800cb6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d001      	beq.n	800cb78 <cmp_lfn+0xa0>
 800cb74:	2300      	movs	r3, #0
 800cb76:	e018      	b.n	800cbaa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	613b      	str	r3, [r7, #16]
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	2b0c      	cmp	r3, #12
 800cb82:	d9c8      	bls.n	800cb16 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00b      	beq.n	800cba8 <cmp_lfn+0xd0>
 800cb90:	89fb      	ldrh	r3, [r7, #14]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d008      	beq.n	800cba8 <cmp_lfn+0xd0>
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	881b      	ldrh	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <cmp_lfn+0xd0>
 800cba4:	2300      	movs	r3, #0
 800cba6:	e000      	b.n	800cbaa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cba8:	2301      	movs	r3, #1
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	371c      	adds	r7, #28
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd90      	pop	{r4, r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	080126c0 	.word	0x080126c0

0800cbb8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b088      	sub	sp, #32
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	71fb      	strb	r3, [r7, #7]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	330d      	adds	r3, #13
 800cbd2:	79ba      	ldrb	r2, [r7, #6]
 800cbd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	330b      	adds	r3, #11
 800cbda:	220f      	movs	r2, #15
 800cbdc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	330c      	adds	r3, #12
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	331a      	adds	r3, #26
 800cbea:	2100      	movs	r1, #0
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff f89a 	bl	800bd26 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	1e5a      	subs	r2, r3, #1
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	005b      	lsls	r3, r3, #1
 800cbfa:	4413      	add	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	4413      	add	r3, r2
 800cc00:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cc02:	2300      	movs	r3, #0
 800cc04:	82fb      	strh	r3, [r7, #22]
 800cc06:	2300      	movs	r3, #0
 800cc08:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cc0a:	8afb      	ldrh	r3, [r7, #22]
 800cc0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d007      	beq.n	800cc24 <put_lfn+0x6c>
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	1c5a      	adds	r2, r3, #1
 800cc18:	61fa      	str	r2, [r7, #28]
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	4413      	add	r3, r2
 800cc20:	881b      	ldrh	r3, [r3, #0]
 800cc22:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800cc24:	4a17      	ldr	r2, [pc, #92]	; (800cc84 <put_lfn+0xcc>)
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	4413      	add	r3, r2
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	4413      	add	r3, r2
 800cc32:	8afa      	ldrh	r2, [r7, #22]
 800cc34:	4611      	mov	r1, r2
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff f875 	bl	800bd26 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cc3c:	8afb      	ldrh	r3, [r7, #22]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <put_lfn+0x90>
 800cc42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cc46:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	61bb      	str	r3, [r7, #24]
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	2b0c      	cmp	r3, #12
 800cc52:	d9da      	bls.n	800cc0a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cc54:	8afb      	ldrh	r3, [r7, #22]
 800cc56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d006      	beq.n	800cc6c <put_lfn+0xb4>
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	4413      	add	r3, r2
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d103      	bne.n	800cc74 <put_lfn+0xbc>
 800cc6c:	79fb      	ldrb	r3, [r7, #7]
 800cc6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc72:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	79fa      	ldrb	r2, [r7, #7]
 800cc78:	701a      	strb	r2, [r3, #0]
}
 800cc7a:	bf00      	nop
 800cc7c:	3720      	adds	r7, #32
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	080126c0 	.word	0x080126c0

0800cc88 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08c      	sub	sp, #48	; 0x30
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cc96:	220b      	movs	r2, #11
 800cc98:	68b9      	ldr	r1, [r7, #8]
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f7ff f88a 	bl	800bdb4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	2b05      	cmp	r3, #5
 800cca4:	d929      	bls.n	800ccfa <gen_numname+0x72>
		sr = seq;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ccaa:	e020      	b.n	800ccee <gen_numname+0x66>
			wc = *lfn++;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	1c9a      	adds	r2, r3, #2
 800ccb0:	607a      	str	r2, [r7, #4]
 800ccb2:	881b      	ldrh	r3, [r3, #0]
 800ccb4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccba:	e015      	b.n	800cce8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ccbc:	69fb      	ldr	r3, [r7, #28]
 800ccbe:	005a      	lsls	r2, r3, #1
 800ccc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	4413      	add	r3, r2
 800ccc8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ccca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cccc:	085b      	lsrs	r3, r3, #1
 800ccce:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <gen_numname+0x5a>
 800ccda:	69fa      	ldr	r2, [r7, #28]
 800ccdc:	4b31      	ldr	r3, [pc, #196]	; (800cda4 <gen_numname+0x11c>)
 800ccde:	4053      	eors	r3, r2
 800cce0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce4:	3301      	adds	r3, #1
 800cce6:	62bb      	str	r3, [r7, #40]	; 0x28
 800cce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccea:	2b0f      	cmp	r3, #15
 800ccec:	d9e6      	bls.n	800ccbc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	881b      	ldrh	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1da      	bne.n	800ccac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ccf6:	69fb      	ldr	r3, [r7, #28]
 800ccf8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ccfa:	2307      	movs	r3, #7
 800ccfc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	f003 030f 	and.w	r3, r3, #15
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	3330      	adds	r3, #48	; 0x30
 800cd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cd0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd12:	2b39      	cmp	r3, #57	; 0x39
 800cd14:	d904      	bls.n	800cd20 <gen_numname+0x98>
 800cd16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cd1a:	3307      	adds	r3, #7
 800cd1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd22:	1e5a      	subs	r2, r3, #1
 800cd24:	62ba      	str	r2, [r7, #40]	; 0x28
 800cd26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cd2a:	4413      	add	r3, r2
 800cd2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cd30:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	091b      	lsrs	r3, r3, #4
 800cd38:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1de      	bne.n	800ccfe <gen_numname+0x76>
	ns[i] = '~';
 800cd40:	f107 0214 	add.w	r2, r7, #20
 800cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd46:	4413      	add	r3, r2
 800cd48:	227e      	movs	r2, #126	; 0x7e
 800cd4a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	627b      	str	r3, [r7, #36]	; 0x24
 800cd50:	e002      	b.n	800cd58 <gen_numname+0xd0>
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	3301      	adds	r3, #1
 800cd56:	627b      	str	r3, [r7, #36]	; 0x24
 800cd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d205      	bcs.n	800cd6c <gen_numname+0xe4>
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	4413      	add	r3, r2
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2b20      	cmp	r3, #32
 800cd6a:	d1f2      	bne.n	800cd52 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6e:	2b07      	cmp	r3, #7
 800cd70:	d808      	bhi.n	800cd84 <gen_numname+0xfc>
 800cd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd74:	1c5a      	adds	r2, r3, #1
 800cd76:	62ba      	str	r2, [r7, #40]	; 0x28
 800cd78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800cd7c:	4413      	add	r3, r2
 800cd7e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cd82:	e000      	b.n	800cd86 <gen_numname+0xfe>
 800cd84:	2120      	movs	r1, #32
 800cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	627a      	str	r2, [r7, #36]	; 0x24
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	4413      	add	r3, r2
 800cd90:	460a      	mov	r2, r1
 800cd92:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd96:	2b07      	cmp	r3, #7
 800cd98:	d9e8      	bls.n	800cd6c <gen_numname+0xe4>
}
 800cd9a:	bf00      	nop
 800cd9c:	3730      	adds	r7, #48	; 0x30
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	00011021 	.word	0x00011021

0800cda8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cdb4:	230b      	movs	r3, #11
 800cdb6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
 800cdba:	b2da      	uxtb	r2, r3
 800cdbc:	0852      	lsrs	r2, r2, #1
 800cdbe:	01db      	lsls	r3, r3, #7
 800cdc0:	4313      	orrs	r3, r2
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	1c59      	adds	r1, r3, #1
 800cdc8:	6079      	str	r1, [r7, #4]
 800cdca:	781b      	ldrb	r3, [r3, #0]
 800cdcc:	4413      	add	r3, r2
 800cdce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	60bb      	str	r3, [r7, #8]
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d1ed      	bne.n	800cdb8 <sum_sfn+0x10>
	return sum;
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdde:	4618      	mov	r0, r3
 800cde0:	3714      	adds	r7, #20
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b086      	sub	sp, #24
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff fca6 	bl	800c74c <dir_sdi>
 800ce00:	4603      	mov	r3, r0
 800ce02:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce04:	7dfb      	ldrb	r3, [r7, #23]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <dir_find+0x24>
 800ce0a:	7dfb      	ldrb	r3, [r7, #23]
 800ce0c:	e0a9      	b.n	800cf62 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce0e:	23ff      	movs	r3, #255	; 0xff
 800ce10:	753b      	strb	r3, [r7, #20]
 800ce12:	7d3b      	ldrb	r3, [r7, #20]
 800ce14:	757b      	strb	r3, [r7, #21]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f04f 32ff 	mov.w	r2, #4294967295
 800ce1c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	69db      	ldr	r3, [r3, #28]
 800ce22:	4619      	mov	r1, r3
 800ce24:	6938      	ldr	r0, [r7, #16]
 800ce26:	f7ff f9b7 	bl	800c198 <move_window>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce2e:	7dfb      	ldrb	r3, [r7, #23]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f040 8090 	bne.w	800cf56 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce3e:	7dbb      	ldrb	r3, [r7, #22]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d102      	bne.n	800ce4a <dir_find+0x60>
 800ce44:	2304      	movs	r3, #4
 800ce46:	75fb      	strb	r3, [r7, #23]
 800ce48:	e08a      	b.n	800cf60 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	330b      	adds	r3, #11
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce56:	73fb      	strb	r3, [r7, #15]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	7bfa      	ldrb	r2, [r7, #15]
 800ce5c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ce5e:	7dbb      	ldrb	r3, [r7, #22]
 800ce60:	2be5      	cmp	r3, #229	; 0xe5
 800ce62:	d007      	beq.n	800ce74 <dir_find+0x8a>
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
 800ce66:	f003 0308 	and.w	r3, r3, #8
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d009      	beq.n	800ce82 <dir_find+0x98>
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
 800ce70:	2b0f      	cmp	r3, #15
 800ce72:	d006      	beq.n	800ce82 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce74:	23ff      	movs	r3, #255	; 0xff
 800ce76:	757b      	strb	r3, [r7, #21]
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce7e:	631a      	str	r2, [r3, #48]	; 0x30
 800ce80:	e05e      	b.n	800cf40 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
 800ce84:	2b0f      	cmp	r3, #15
 800ce86:	d136      	bne.n	800cef6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ce8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d154      	bne.n	800cf40 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ce96:	7dbb      	ldrb	r3, [r7, #22]
 800ce98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00d      	beq.n	800cebc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a1b      	ldr	r3, [r3, #32]
 800cea4:	7b5b      	ldrb	r3, [r3, #13]
 800cea6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cea8:	7dbb      	ldrb	r3, [r7, #22]
 800ceaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceae:	75bb      	strb	r3, [r7, #22]
 800ceb0:	7dbb      	ldrb	r3, [r7, #22]
 800ceb2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	695a      	ldr	r2, [r3, #20]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cebc:	7dba      	ldrb	r2, [r7, #22]
 800cebe:	7d7b      	ldrb	r3, [r7, #21]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d115      	bne.n	800cef0 <dir_find+0x106>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6a1b      	ldr	r3, [r3, #32]
 800cec8:	330d      	adds	r3, #13
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	7d3a      	ldrb	r2, [r7, #20]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d10e      	bne.n	800cef0 <dir_find+0x106>
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	68da      	ldr	r2, [r3, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a1b      	ldr	r3, [r3, #32]
 800ceda:	4619      	mov	r1, r3
 800cedc:	4610      	mov	r0, r2
 800cede:	f7ff fdfb 	bl	800cad8 <cmp_lfn>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d003      	beq.n	800cef0 <dir_find+0x106>
 800cee8:	7d7b      	ldrb	r3, [r7, #21]
 800ceea:	3b01      	subs	r3, #1
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	e000      	b.n	800cef2 <dir_find+0x108>
 800cef0:	23ff      	movs	r3, #255	; 0xff
 800cef2:	757b      	strb	r3, [r7, #21]
 800cef4:	e024      	b.n	800cf40 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cef6:	7d7b      	ldrb	r3, [r7, #21]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d109      	bne.n	800cf10 <dir_find+0x126>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a1b      	ldr	r3, [r3, #32]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7ff ff51 	bl	800cda8 <sum_sfn>
 800cf06:	4603      	mov	r3, r0
 800cf08:	461a      	mov	r2, r3
 800cf0a:	7d3b      	ldrb	r3, [r7, #20]
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d024      	beq.n	800cf5a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10a      	bne.n	800cf34 <dir_find+0x14a>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a18      	ldr	r0, [r3, #32]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	3324      	adds	r3, #36	; 0x24
 800cf26:	220b      	movs	r2, #11
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f7fe ff7e 	bl	800be2a <mem_cmp>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d014      	beq.n	800cf5e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf34:	23ff      	movs	r3, #255	; 0xff
 800cf36:	757b      	strb	r3, [r7, #21]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf3e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cf40:	2100      	movs	r1, #0
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff fc7d 	bl	800c842 <dir_next>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cf4c:	7dfb      	ldrb	r3, [r7, #23]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f43f af65 	beq.w	800ce1e <dir_find+0x34>
 800cf54:	e004      	b.n	800cf60 <dir_find+0x176>
		if (res != FR_OK) break;
 800cf56:	bf00      	nop
 800cf58:	e002      	b.n	800cf60 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cf5a:	bf00      	nop
 800cf5c:	e000      	b.n	800cf60 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf5e:	bf00      	nop

	return res;
 800cf60:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3718      	adds	r7, #24
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
	...

0800cf6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08c      	sub	sp, #48	; 0x30
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <dir_register+0x20>
 800cf88:	2306      	movs	r3, #6
 800cf8a:	e0e0      	b.n	800d14e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	627b      	str	r3, [r7, #36]	; 0x24
 800cf90:	e002      	b.n	800cf98 <dir_register+0x2c>
 800cf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf94:	3301      	adds	r3, #1
 800cf96:	627b      	str	r3, [r7, #36]	; 0x24
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	68da      	ldr	r2, [r3, #12]
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	005b      	lsls	r3, r3, #1
 800cfa0:	4413      	add	r3, r2
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d1f4      	bne.n	800cf92 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cfae:	f107 030c 	add.w	r3, r7, #12
 800cfb2:	220c      	movs	r2, #12
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe fefd 	bl	800bdb4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d032      	beq.n	800d02a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2240      	movs	r2, #64	; 0x40
 800cfc8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cfcc:	2301      	movs	r3, #1
 800cfce:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfd0:	e016      	b.n	800d000 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	68da      	ldr	r2, [r3, #12]
 800cfdc:	f107 010c 	add.w	r1, r7, #12
 800cfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe2:	f7ff fe51 	bl	800cc88 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7ff feff 	bl	800cdea <dir_find>
 800cfec:	4603      	mov	r3, r0
 800cfee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800cff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d106      	bne.n	800d008 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffc:	3301      	adds	r3, #1
 800cffe:	62bb      	str	r3, [r7, #40]	; 0x28
 800d000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d002:	2b63      	cmp	r3, #99	; 0x63
 800d004:	d9e5      	bls.n	800cfd2 <dir_register+0x66>
 800d006:	e000      	b.n	800d00a <dir_register+0x9e>
			if (res != FR_OK) break;
 800d008:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00c:	2b64      	cmp	r3, #100	; 0x64
 800d00e:	d101      	bne.n	800d014 <dir_register+0xa8>
 800d010:	2307      	movs	r3, #7
 800d012:	e09c      	b.n	800d14e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d018:	2b04      	cmp	r3, #4
 800d01a:	d002      	beq.n	800d022 <dir_register+0xb6>
 800d01c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d020:	e095      	b.n	800d14e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d022:	7dfa      	ldrb	r2, [r7, #23]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
 800d02c:	f003 0302 	and.w	r3, r3, #2
 800d030:	2b00      	cmp	r3, #0
 800d032:	d007      	beq.n	800d044 <dir_register+0xd8>
 800d034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d036:	330c      	adds	r3, #12
 800d038:	4a47      	ldr	r2, [pc, #284]	; (800d158 <dir_register+0x1ec>)
 800d03a:	fba2 2303 	umull	r2, r3, r2, r3
 800d03e:	089b      	lsrs	r3, r3, #2
 800d040:	3301      	adds	r3, #1
 800d042:	e000      	b.n	800d046 <dir_register+0xda>
 800d044:	2301      	movs	r3, #1
 800d046:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d048:	6a39      	ldr	r1, [r7, #32]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff fcbe 	bl	800c9cc <dir_alloc>
 800d050:	4603      	mov	r3, r0
 800d052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d148      	bne.n	800d0f0 <dir_register+0x184>
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	3b01      	subs	r3, #1
 800d062:	623b      	str	r3, [r7, #32]
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d042      	beq.n	800d0f0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	695a      	ldr	r2, [r3, #20]
 800d06e:	6a3b      	ldr	r3, [r7, #32]
 800d070:	015b      	lsls	r3, r3, #5
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	4619      	mov	r1, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f7ff fb68 	bl	800c74c <dir_sdi>
 800d07c:	4603      	mov	r3, r0
 800d07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d086:	2b00      	cmp	r3, #0
 800d088:	d132      	bne.n	800d0f0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	3324      	adds	r3, #36	; 0x24
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fe8a 	bl	800cda8 <sum_sfn>
 800d094:	4603      	mov	r3, r0
 800d096:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	69db      	ldr	r3, [r3, #28]
 800d09c:	4619      	mov	r1, r3
 800d09e:	69f8      	ldr	r0, [r7, #28]
 800d0a0:	f7ff f87a 	bl	800c198 <move_window>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d0aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d11d      	bne.n	800d0ee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	68d8      	ldr	r0, [r3, #12]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6a19      	ldr	r1, [r3, #32]
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	b2da      	uxtb	r2, r3
 800d0be:	7efb      	ldrb	r3, [r7, #27]
 800d0c0:	f7ff fd7a 	bl	800cbb8 <put_lfn>
				fs->wflag = 1;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d0ca:	2100      	movs	r1, #0
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff fbb8 	bl	800c842 <dir_next>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d0d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d107      	bne.n	800d0f0 <dir_register+0x184>
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	623b      	str	r3, [r7, #32]
 800d0e6:	6a3b      	ldr	r3, [r7, #32]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1d5      	bne.n	800d098 <dir_register+0x12c>
 800d0ec:	e000      	b.n	800d0f0 <dir_register+0x184>
				if (res != FR_OK) break;
 800d0ee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d0f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d128      	bne.n	800d14a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	69db      	ldr	r3, [r3, #28]
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	69f8      	ldr	r0, [r7, #28]
 800d100:	f7ff f84a 	bl	800c198 <move_window>
 800d104:	4603      	mov	r3, r0
 800d106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d10a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d11b      	bne.n	800d14a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6a1b      	ldr	r3, [r3, #32]
 800d116:	2220      	movs	r2, #32
 800d118:	2100      	movs	r1, #0
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fe fe6b 	bl	800bdf6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a18      	ldr	r0, [r3, #32]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3324      	adds	r3, #36	; 0x24
 800d128:	220b      	movs	r2, #11
 800d12a:	4619      	mov	r1, r3
 800d12c:	f7fe fe42 	bl	800bdb4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	330c      	adds	r3, #12
 800d13c:	f002 0218 	and.w	r2, r2, #24
 800d140:	b2d2      	uxtb	r2, r2
 800d142:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	2201      	movs	r2, #1
 800d148:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3730      	adds	r7, #48	; 0x30
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	4ec4ec4f 	.word	0x4ec4ec4f

0800d15c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b08a      	sub	sp, #40	; 0x28
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	613b      	str	r3, [r7, #16]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	60fb      	str	r3, [r7, #12]
 800d174:	2300      	movs	r3, #0
 800d176:	617b      	str	r3, [r7, #20]
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	61ba      	str	r2, [r7, #24]
 800d182:	693a      	ldr	r2, [r7, #16]
 800d184:	4413      	add	r3, r2
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d18a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d18c:	2b1f      	cmp	r3, #31
 800d18e:	d940      	bls.n	800d212 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d192:	2b2f      	cmp	r3, #47	; 0x2f
 800d194:	d006      	beq.n	800d1a4 <create_name+0x48>
 800d196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d198:	2b5c      	cmp	r3, #92	; 0x5c
 800d19a:	d110      	bne.n	800d1be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d19c:	e002      	b.n	800d1a4 <create_name+0x48>
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	61bb      	str	r3, [r7, #24]
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	2b2f      	cmp	r3, #47	; 0x2f
 800d1ae:	d0f6      	beq.n	800d19e <create_name+0x42>
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	2b5c      	cmp	r3, #92	; 0x5c
 800d1ba:	d0f0      	beq.n	800d19e <create_name+0x42>
			break;
 800d1bc:	e02a      	b.n	800d214 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2bfe      	cmp	r3, #254	; 0xfe
 800d1c2:	d901      	bls.n	800d1c8 <create_name+0x6c>
 800d1c4:	2306      	movs	r3, #6
 800d1c6:	e177      	b.n	800d4b8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d1ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f001 fc1a 	bl	800ea0c <ff_convert>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d1dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d101      	bne.n	800d1e6 <create_name+0x8a>
 800d1e2:	2306      	movs	r3, #6
 800d1e4:	e168      	b.n	800d4b8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d1e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1e8:	2b7f      	cmp	r3, #127	; 0x7f
 800d1ea:	d809      	bhi.n	800d200 <create_name+0xa4>
 800d1ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	48b3      	ldr	r0, [pc, #716]	; (800d4c0 <create_name+0x364>)
 800d1f2:	f7fe fe41 	bl	800be78 <chk_chr>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <create_name+0xa4>
 800d1fc:	2306      	movs	r3, #6
 800d1fe:	e15b      	b.n	800d4b8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	1c5a      	adds	r2, r3, #1
 800d204:	617a      	str	r2, [r7, #20]
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	4413      	add	r3, r2
 800d20c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d20e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d210:	e7b4      	b.n	800d17c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d212:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	441a      	add	r2, r3
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d220:	2b1f      	cmp	r3, #31
 800d222:	d801      	bhi.n	800d228 <create_name+0xcc>
 800d224:	2304      	movs	r3, #4
 800d226:	e000      	b.n	800d22a <create_name+0xce>
 800d228:	2300      	movs	r3, #0
 800d22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d22e:	e011      	b.n	800d254 <create_name+0xf8>
		w = lfn[di - 1];
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d236:	4413      	add	r3, r2
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	4413      	add	r3, r2
 800d23e:	881b      	ldrh	r3, [r3, #0]
 800d240:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d244:	2b20      	cmp	r3, #32
 800d246:	d002      	beq.n	800d24e <create_name+0xf2>
 800d248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d24a:	2b2e      	cmp	r3, #46	; 0x2e
 800d24c:	d106      	bne.n	800d25c <create_name+0x100>
		di--;
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	3b01      	subs	r3, #1
 800d252:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1ea      	bne.n	800d230 <create_name+0xd4>
 800d25a:	e000      	b.n	800d25e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d25c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	68fa      	ldr	r2, [r7, #12]
 800d264:	4413      	add	r3, r2
 800d266:	2200      	movs	r2, #0
 800d268:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <create_name+0x118>
 800d270:	2306      	movs	r3, #6
 800d272:	e121      	b.n	800d4b8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	3324      	adds	r3, #36	; 0x24
 800d278:	220b      	movs	r2, #11
 800d27a:	2120      	movs	r1, #32
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe fdba 	bl	800bdf6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d282:	2300      	movs	r3, #0
 800d284:	61bb      	str	r3, [r7, #24]
 800d286:	e002      	b.n	800d28e <create_name+0x132>
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	3301      	adds	r3, #1
 800d28c:	61bb      	str	r3, [r7, #24]
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	005b      	lsls	r3, r3, #1
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	4413      	add	r3, r2
 800d296:	881b      	ldrh	r3, [r3, #0]
 800d298:	2b20      	cmp	r3, #32
 800d29a:	d0f5      	beq.n	800d288 <create_name+0x12c>
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2a8:	d0ee      	beq.n	800d288 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d009      	beq.n	800d2c4 <create_name+0x168>
 800d2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2b4:	f043 0303 	orr.w	r3, r3, #3
 800d2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d2bc:	e002      	b.n	800d2c4 <create_name+0x168>
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	617b      	str	r3, [r7, #20]
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d009      	beq.n	800d2de <create_name+0x182>
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d2d0:	4413      	add	r3, r2
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	2b2e      	cmp	r3, #46	; 0x2e
 800d2dc:	d1ef      	bne.n	800d2be <create_name+0x162>

	i = b = 0; ni = 8;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	623b      	str	r3, [r7, #32]
 800d2e8:	2308      	movs	r3, #8
 800d2ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	61ba      	str	r2, [r7, #24]
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4413      	add	r3, r2
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d2fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f000 8090 	beq.w	800d424 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d306:	2b20      	cmp	r3, #32
 800d308:	d006      	beq.n	800d318 <create_name+0x1bc>
 800d30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d30c:	2b2e      	cmp	r3, #46	; 0x2e
 800d30e:	d10a      	bne.n	800d326 <create_name+0x1ca>
 800d310:	69ba      	ldr	r2, [r7, #24]
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	429a      	cmp	r2, r3
 800d316:	d006      	beq.n	800d326 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d31c:	f043 0303 	orr.w	r3, r3, #3
 800d320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d324:	e07d      	b.n	800d422 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d326:	6a3a      	ldr	r2, [r7, #32]
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d203      	bcs.n	800d336 <create_name+0x1da>
 800d32e:	69ba      	ldr	r2, [r7, #24]
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	429a      	cmp	r2, r3
 800d334:	d123      	bne.n	800d37e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	2b0b      	cmp	r3, #11
 800d33a:	d106      	bne.n	800d34a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d340:	f043 0303 	orr.w	r3, r3, #3
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d348:	e06f      	b.n	800d42a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d34a:	69ba      	ldr	r2, [r7, #24]
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d005      	beq.n	800d35e <create_name+0x202>
 800d352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d356:	f043 0303 	orr.w	r3, r3, #3
 800d35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d35e:	69ba      	ldr	r2, [r7, #24]
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	429a      	cmp	r2, r3
 800d364:	d860      	bhi.n	800d428 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	61bb      	str	r3, [r7, #24]
 800d36a:	2308      	movs	r3, #8
 800d36c:	623b      	str	r3, [r7, #32]
 800d36e:	230b      	movs	r3, #11
 800d370:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d372:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d37c:	e051      	b.n	800d422 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d37e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d380:	2b7f      	cmp	r3, #127	; 0x7f
 800d382:	d914      	bls.n	800d3ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d386:	2100      	movs	r1, #0
 800d388:	4618      	mov	r0, r3
 800d38a:	f001 fb3f 	bl	800ea0c <ff_convert>
 800d38e:	4603      	mov	r3, r0
 800d390:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d394:	2b00      	cmp	r3, #0
 800d396:	d004      	beq.n	800d3a2 <create_name+0x246>
 800d398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d39a:	3b80      	subs	r3, #128	; 0x80
 800d39c:	4a49      	ldr	r2, [pc, #292]	; (800d4c4 <create_name+0x368>)
 800d39e:	5cd3      	ldrb	r3, [r2, r3]
 800d3a0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3a6:	f043 0302 	orr.w	r3, r3, #2
 800d3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d007      	beq.n	800d3c4 <create_name+0x268>
 800d3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	4843      	ldr	r0, [pc, #268]	; (800d4c8 <create_name+0x36c>)
 800d3ba:	f7fe fd5d 	bl	800be78 <chk_chr>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d008      	beq.n	800d3d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d3c4:	235f      	movs	r3, #95	; 0x5f
 800d3c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3cc:	f043 0303 	orr.w	r3, r3, #3
 800d3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3d4:	e01b      	b.n	800d40e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d3d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3d8:	2b40      	cmp	r3, #64	; 0x40
 800d3da:	d909      	bls.n	800d3f0 <create_name+0x294>
 800d3dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3de:	2b5a      	cmp	r3, #90	; 0x5a
 800d3e0:	d806      	bhi.n	800d3f0 <create_name+0x294>
					b |= 2;
 800d3e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3e6:	f043 0302 	orr.w	r3, r3, #2
 800d3ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d3ee:	e00e      	b.n	800d40e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d3f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3f2:	2b60      	cmp	r3, #96	; 0x60
 800d3f4:	d90b      	bls.n	800d40e <create_name+0x2b2>
 800d3f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3f8:	2b7a      	cmp	r3, #122	; 0x7a
 800d3fa:	d808      	bhi.n	800d40e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d400:	f043 0301 	orr.w	r3, r3, #1
 800d404:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d40a:	3b20      	subs	r3, #32
 800d40c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d40e:	6a3b      	ldr	r3, [r7, #32]
 800d410:	1c5a      	adds	r2, r3, #1
 800d412:	623a      	str	r2, [r7, #32]
 800d414:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d416:	b2d1      	uxtb	r1, r2
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	4413      	add	r3, r2
 800d41c:	460a      	mov	r2, r1
 800d41e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d422:	e763      	b.n	800d2ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d424:	bf00      	nop
 800d426:	e000      	b.n	800d42a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800d428:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d430:	2be5      	cmp	r3, #229	; 0xe5
 800d432:	d103      	bne.n	800d43c <create_name+0x2e0>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2205      	movs	r2, #5
 800d438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	2b08      	cmp	r3, #8
 800d440:	d104      	bne.n	800d44c <create_name+0x2f0>
 800d442:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d44c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d450:	f003 030c 	and.w	r3, r3, #12
 800d454:	2b0c      	cmp	r3, #12
 800d456:	d005      	beq.n	800d464 <create_name+0x308>
 800d458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d45c:	f003 0303 	and.w	r3, r3, #3
 800d460:	2b03      	cmp	r3, #3
 800d462:	d105      	bne.n	800d470 <create_name+0x314>
 800d464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d468:	f043 0302 	orr.w	r3, r3, #2
 800d46c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d474:	f003 0302 	and.w	r3, r3, #2
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d117      	bne.n	800d4ac <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d47c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d480:	f003 0303 	and.w	r3, r3, #3
 800d484:	2b01      	cmp	r3, #1
 800d486:	d105      	bne.n	800d494 <create_name+0x338>
 800d488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d48c:	f043 0310 	orr.w	r3, r3, #16
 800d490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d494:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d498:	f003 030c 	and.w	r3, r3, #12
 800d49c:	2b04      	cmp	r3, #4
 800d49e:	d105      	bne.n	800d4ac <create_name+0x350>
 800d4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4a4:	f043 0308 	orr.w	r3, r3, #8
 800d4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d4b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d4b6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3728      	adds	r7, #40	; 0x28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	080125d8 	.word	0x080125d8
 800d4c4:	08012640 	.word	0x08012640
 800d4c8:	080125e4 	.word	0x080125e4

0800d4cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d4e0:	e002      	b.n	800d4e8 <follow_path+0x1c>
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b2f      	cmp	r3, #47	; 0x2f
 800d4ee:	d0f8      	beq.n	800d4e2 <follow_path+0x16>
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b5c      	cmp	r3, #92	; 0x5c
 800d4f6:	d0f4      	beq.n	800d4e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	2b1f      	cmp	r3, #31
 800d504:	d80a      	bhi.n	800d51c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2280      	movs	r2, #128	; 0x80
 800d50a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d50e:	2100      	movs	r1, #0
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff f91b 	bl	800c74c <dir_sdi>
 800d516:	4603      	mov	r3, r0
 800d518:	75fb      	strb	r3, [r7, #23]
 800d51a:	e043      	b.n	800d5a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d51c:	463b      	mov	r3, r7
 800d51e:	4619      	mov	r1, r3
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7ff fe1b 	bl	800d15c <create_name>
 800d526:	4603      	mov	r3, r0
 800d528:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d52a:	7dfb      	ldrb	r3, [r7, #23]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d134      	bne.n	800d59a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f7ff fc5a 	bl	800cdea <dir_find>
 800d536:	4603      	mov	r3, r0
 800d538:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d540:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00a      	beq.n	800d55e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d548:	7dfb      	ldrb	r3, [r7, #23]
 800d54a:	2b04      	cmp	r3, #4
 800d54c:	d127      	bne.n	800d59e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d54e:	7afb      	ldrb	r3, [r7, #11]
 800d550:	f003 0304 	and.w	r3, r3, #4
 800d554:	2b00      	cmp	r3, #0
 800d556:	d122      	bne.n	800d59e <follow_path+0xd2>
 800d558:	2305      	movs	r3, #5
 800d55a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d55c:	e01f      	b.n	800d59e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d55e:	7afb      	ldrb	r3, [r7, #11]
 800d560:	f003 0304 	and.w	r3, r3, #4
 800d564:	2b00      	cmp	r3, #0
 800d566:	d11c      	bne.n	800d5a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	799b      	ldrb	r3, [r3, #6]
 800d56c:	f003 0310 	and.w	r3, r3, #16
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d574:	2305      	movs	r3, #5
 800d576:	75fb      	strb	r3, [r7, #23]
 800d578:	e014      	b.n	800d5a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	695b      	ldr	r3, [r3, #20]
 800d584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d588:	4413      	add	r3, r2
 800d58a:	4619      	mov	r1, r3
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f7ff fa64 	bl	800ca5a <ld_clust>
 800d592:	4602      	mov	r2, r0
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d598:	e7c0      	b.n	800d51c <follow_path+0x50>
			if (res != FR_OK) break;
 800d59a:	bf00      	nop
 800d59c:	e002      	b.n	800d5a4 <follow_path+0xd8>
				break;
 800d59e:	bf00      	nop
 800d5a0:	e000      	b.n	800d5a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d5a2:	bf00      	nop
			}
		}
	}

	return res;
 800d5a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3718      	adds	r7, #24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}

0800d5ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b087      	sub	sp, #28
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d031      	beq.n	800d628 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	e002      	b.n	800d5d2 <get_ldnumber+0x24>
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	617b      	str	r3, [r7, #20]
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	2b1f      	cmp	r3, #31
 800d5d8:	d903      	bls.n	800d5e2 <get_ldnumber+0x34>
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	2b3a      	cmp	r3, #58	; 0x3a
 800d5e0:	d1f4      	bne.n	800d5cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	2b3a      	cmp	r3, #58	; 0x3a
 800d5e8:	d11c      	bne.n	800d624 <get_ldnumber+0x76>
			tp = *path;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	1c5a      	adds	r2, r3, #1
 800d5f4:	60fa      	str	r2, [r7, #12]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	3b30      	subs	r3, #48	; 0x30
 800d5fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	2b09      	cmp	r3, #9
 800d600:	d80e      	bhi.n	800d620 <get_ldnumber+0x72>
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	429a      	cmp	r2, r3
 800d608:	d10a      	bne.n	800d620 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d107      	bne.n	800d620 <get_ldnumber+0x72>
					vol = (int)i;
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	3301      	adds	r3, #1
 800d618:	617b      	str	r3, [r7, #20]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	e002      	b.n	800d62a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d624:	2300      	movs	r3, #0
 800d626:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d628:	693b      	ldr	r3, [r7, #16]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	371c      	adds	r7, #28
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr
	...

0800d638 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	70da      	strb	r2, [r3, #3]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f04f 32ff 	mov.w	r2, #4294967295
 800d64e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7fe fda0 	bl	800c198 <move_window>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <check_fs+0x2a>
 800d65e:	2304      	movs	r3, #4
 800d660:	e038      	b.n	800d6d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3334      	adds	r3, #52	; 0x34
 800d666:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe fb20 	bl	800bcb0 <ld_word>
 800d670:	4603      	mov	r3, r0
 800d672:	461a      	mov	r2, r3
 800d674:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d678:	429a      	cmp	r2, r3
 800d67a:	d001      	beq.n	800d680 <check_fs+0x48>
 800d67c:	2303      	movs	r3, #3
 800d67e:	e029      	b.n	800d6d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d686:	2be9      	cmp	r3, #233	; 0xe9
 800d688:	d009      	beq.n	800d69e <check_fs+0x66>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d690:	2beb      	cmp	r3, #235	; 0xeb
 800d692:	d11e      	bne.n	800d6d2 <check_fs+0x9a>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d69a:	2b90      	cmp	r3, #144	; 0x90
 800d69c:	d119      	bne.n	800d6d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	3334      	adds	r3, #52	; 0x34
 800d6a2:	3336      	adds	r3, #54	; 0x36
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fe fb1b 	bl	800bce0 <ld_dword>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d6b0:	4a0a      	ldr	r2, [pc, #40]	; (800d6dc <check_fs+0xa4>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d101      	bne.n	800d6ba <check_fs+0x82>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	e00c      	b.n	800d6d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	3334      	adds	r3, #52	; 0x34
 800d6be:	3352      	adds	r3, #82	; 0x52
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fe fb0d 	bl	800bce0 <ld_dword>
 800d6c6:	4602      	mov	r2, r0
 800d6c8:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <check_fs+0xa8>)
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d101      	bne.n	800d6d2 <check_fs+0x9a>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e000      	b.n	800d6d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d6d2:	2302      	movs	r3, #2
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	00544146 	.word	0x00544146
 800d6e0:	33544146 	.word	0x33544146

0800d6e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b096      	sub	sp, #88	; 0x58
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	4613      	mov	r3, r2
 800d6f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f7ff ff58 	bl	800d5ae <get_ldnumber>
 800d6fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d702:	2b00      	cmp	r3, #0
 800d704:	da01      	bge.n	800d70a <find_volume+0x26>
 800d706:	230b      	movs	r3, #11
 800d708:	e231      	b.n	800db6e <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d70a:	4aa8      	ldr	r2, [pc, #672]	; (800d9ac <find_volume+0x2c8>)
 800d70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d712:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d716:	2b00      	cmp	r3, #0
 800d718:	d101      	bne.n	800d71e <find_volume+0x3a>
 800d71a:	230c      	movs	r3, #12
 800d71c:	e227      	b.n	800db6e <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d722:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d724:	79fb      	ldrb	r3, [r7, #7]
 800d726:	f023 0301 	bic.w	r3, r3, #1
 800d72a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d01a      	beq.n	800d76a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d736:	785b      	ldrb	r3, [r3, #1]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fe fa1b 	bl	800bb74 <disk_status>
 800d73e:	4603      	mov	r3, r0
 800d740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d748:	f003 0301 	and.w	r3, r3, #1
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10c      	bne.n	800d76a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d750:	79fb      	ldrb	r3, [r7, #7]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d007      	beq.n	800d766 <find_volume+0x82>
 800d756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d75a:	f003 0304 	and.w	r3, r3, #4
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d762:	230a      	movs	r3, #10
 800d764:	e203      	b.n	800db6e <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800d766:	2300      	movs	r3, #0
 800d768:	e201      	b.n	800db6e <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76c:	2200      	movs	r2, #0
 800d76e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d772:	b2da      	uxtb	r2, r3
 800d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d776:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77a:	785b      	ldrb	r3, [r3, #1]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fa13 	bl	800bba8 <disk_initialize>
 800d782:	4603      	mov	r3, r0
 800d784:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b00      	cmp	r3, #0
 800d792:	d001      	beq.n	800d798 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d794:	2303      	movs	r3, #3
 800d796:	e1ea      	b.n	800db6e <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d798:	79fb      	ldrb	r3, [r7, #7]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d007      	beq.n	800d7ae <find_volume+0xca>
 800d79e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d7a2:	f003 0304 	and.w	r3, r3, #4
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d7aa:	230a      	movs	r3, #10
 800d7ac:	e1df      	b.n	800db6e <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d7b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d7b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7b6:	f7ff ff3f 	bl	800d638 <check_fs>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d7c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d14b      	bne.n	800d860 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	643b      	str	r3, [r7, #64]	; 0x40
 800d7cc:	e01f      	b.n	800d80e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7d6:	011b      	lsls	r3, r3, #4
 800d7d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d7dc:	4413      	add	r3, r2
 800d7de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d006      	beq.n	800d7f8 <find_volume+0x114>
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ec:	3308      	adds	r3, #8
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7fe fa76 	bl	800bce0 <ld_dword>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	e000      	b.n	800d7fa <find_volume+0x116>
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d802:	440b      	add	r3, r1
 800d804:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d80a:	3301      	adds	r3, #1
 800d80c:	643b      	str	r3, [r7, #64]	; 0x40
 800d80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d810:	2b03      	cmp	r3, #3
 800d812:	d9dc      	bls.n	800d7ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d814:	2300      	movs	r3, #0
 800d816:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d002      	beq.n	800d824 <find_volume+0x140>
 800d81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d820:	3b01      	subs	r3, #1
 800d822:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d82c:	4413      	add	r3, r2
 800d82e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d832:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d836:	2b00      	cmp	r3, #0
 800d838:	d005      	beq.n	800d846 <find_volume+0x162>
 800d83a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d83c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d83e:	f7ff fefb 	bl	800d638 <check_fs>
 800d842:	4603      	mov	r3, r0
 800d844:	e000      	b.n	800d848 <find_volume+0x164>
 800d846:	2303      	movs	r3, #3
 800d848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d84c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d850:	2b01      	cmp	r3, #1
 800d852:	d905      	bls.n	800d860 <find_volume+0x17c>
 800d854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d856:	3301      	adds	r3, #1
 800d858:	643b      	str	r3, [r7, #64]	; 0x40
 800d85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d85c:	2b03      	cmp	r3, #3
 800d85e:	d9e1      	bls.n	800d824 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d860:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d864:	2b04      	cmp	r3, #4
 800d866:	d101      	bne.n	800d86c <find_volume+0x188>
 800d868:	2301      	movs	r3, #1
 800d86a:	e180      	b.n	800db6e <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d86c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d870:	2b01      	cmp	r3, #1
 800d872:	d901      	bls.n	800d878 <find_volume+0x194>
 800d874:	230d      	movs	r3, #13
 800d876:	e17a      	b.n	800db6e <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d87a:	3334      	adds	r3, #52	; 0x34
 800d87c:	330b      	adds	r3, #11
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe fa16 	bl	800bcb0 <ld_word>
 800d884:	4603      	mov	r3, r0
 800d886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d88a:	d001      	beq.n	800d890 <find_volume+0x1ac>
 800d88c:	230d      	movs	r3, #13
 800d88e:	e16e      	b.n	800db6e <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	3334      	adds	r3, #52	; 0x34
 800d894:	3316      	adds	r3, #22
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe fa0a 	bl	800bcb0 <ld_word>
 800d89c:	4603      	mov	r3, r0
 800d89e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d106      	bne.n	800d8b4 <find_volume+0x1d0>
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a8:	3334      	adds	r3, #52	; 0x34
 800d8aa:	3324      	adds	r3, #36	; 0x24
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fe fa17 	bl	800bce0 <ld_dword>
 800d8b2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d8b8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c6:	789b      	ldrb	r3, [r3, #2]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d005      	beq.n	800d8d8 <find_volume+0x1f4>
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	789b      	ldrb	r3, [r3, #2]
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d001      	beq.n	800d8d8 <find_volume+0x1f4>
 800d8d4:	230d      	movs	r3, #13
 800d8d6:	e14a      	b.n	800db6e <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8da:	789b      	ldrb	r3, [r3, #2]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e0:	fb02 f303 	mul.w	r3, r2, r3
 800d8e4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8ec:	b29a      	uxth	r2, r3
 800d8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8f4:	895b      	ldrh	r3, [r3, #10]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d008      	beq.n	800d90c <find_volume+0x228>
 800d8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8fc:	895b      	ldrh	r3, [r3, #10]
 800d8fe:	461a      	mov	r2, r3
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	895b      	ldrh	r3, [r3, #10]
 800d904:	3b01      	subs	r3, #1
 800d906:	4013      	ands	r3, r2
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d001      	beq.n	800d910 <find_volume+0x22c>
 800d90c:	230d      	movs	r3, #13
 800d90e:	e12e      	b.n	800db6e <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d912:	3334      	adds	r3, #52	; 0x34
 800d914:	3311      	adds	r3, #17
 800d916:	4618      	mov	r0, r3
 800d918:	f7fe f9ca 	bl	800bcb0 <ld_word>
 800d91c:	4603      	mov	r3, r0
 800d91e:	461a      	mov	r2, r3
 800d920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d922:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d926:	891b      	ldrh	r3, [r3, #8]
 800d928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <find_volume+0x252>
 800d932:	230d      	movs	r3, #13
 800d934:	e11b      	b.n	800db6e <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d938:	3334      	adds	r3, #52	; 0x34
 800d93a:	3313      	adds	r3, #19
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fe f9b7 	bl	800bcb0 <ld_word>
 800d942:	4603      	mov	r3, r0
 800d944:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d106      	bne.n	800d95a <find_volume+0x276>
 800d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94e:	3334      	adds	r3, #52	; 0x34
 800d950:	3320      	adds	r3, #32
 800d952:	4618      	mov	r0, r3
 800d954:	f7fe f9c4 	bl	800bce0 <ld_dword>
 800d958:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d95c:	3334      	adds	r3, #52	; 0x34
 800d95e:	330e      	adds	r3, #14
 800d960:	4618      	mov	r0, r3
 800d962:	f7fe f9a5 	bl	800bcb0 <ld_word>
 800d966:	4603      	mov	r3, r0
 800d968:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d96a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d101      	bne.n	800d974 <find_volume+0x290>
 800d970:	230d      	movs	r3, #13
 800d972:	e0fc      	b.n	800db6e <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d974:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d978:	4413      	add	r3, r2
 800d97a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d97c:	8912      	ldrh	r2, [r2, #8]
 800d97e:	09d2      	lsrs	r2, r2, #7
 800d980:	b292      	uxth	r2, r2
 800d982:	4413      	add	r3, r2
 800d984:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d201      	bcs.n	800d992 <find_volume+0x2ae>
 800d98e:	230d      	movs	r3, #13
 800d990:	e0ed      	b.n	800db6e <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d99a:	8952      	ldrh	r2, [r2, #10]
 800d99c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d103      	bne.n	800d9b0 <find_volume+0x2cc>
 800d9a8:	230d      	movs	r3, #13
 800d9aa:	e0e0      	b.n	800db6e <find_volume+0x48a>
 800d9ac:	20000b30 	.word	0x20000b30
		fmt = FS_FAT32;
 800d9b0:	2303      	movs	r3, #3
 800d9b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d802      	bhi.n	800d9c6 <find_volume+0x2e2>
 800d9c0:	2302      	movs	r3, #2
 800d9c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d802      	bhi.n	800d9d6 <find_volume+0x2f2>
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	1c9a      	adds	r2, r3, #2
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9e2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d9e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e8:	441a      	add	r2, r3
 800d9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ec:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d9ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	441a      	add	r2, r3
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d9f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d9fc:	2b03      	cmp	r3, #3
 800d9fe:	d11e      	bne.n	800da3e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800da00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da02:	3334      	adds	r3, #52	; 0x34
 800da04:	332a      	adds	r3, #42	; 0x2a
 800da06:	4618      	mov	r0, r3
 800da08:	f7fe f952 	bl	800bcb0 <ld_word>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d001      	beq.n	800da16 <find_volume+0x332>
 800da12:	230d      	movs	r3, #13
 800da14:	e0ab      	b.n	800db6e <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800da16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da18:	891b      	ldrh	r3, [r3, #8]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <find_volume+0x33e>
 800da1e:	230d      	movs	r3, #13
 800da20:	e0a5      	b.n	800db6e <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800da22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da24:	3334      	adds	r3, #52	; 0x34
 800da26:	332c      	adds	r3, #44	; 0x2c
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fe f959 	bl	800bce0 <ld_dword>
 800da2e:	4602      	mov	r2, r0
 800da30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da32:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800da34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da36:	699b      	ldr	r3, [r3, #24]
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	647b      	str	r3, [r7, #68]	; 0x44
 800da3c:	e01f      	b.n	800da7e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800da3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da40:	891b      	ldrh	r3, [r3, #8]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d101      	bne.n	800da4a <find_volume+0x366>
 800da46:	230d      	movs	r3, #13
 800da48:	e091      	b.n	800db6e <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da50:	441a      	add	r2, r3
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800da56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	d103      	bne.n	800da66 <find_volume+0x382>
 800da5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	e00a      	b.n	800da7c <find_volume+0x398>
 800da66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da68:	699a      	ldr	r2, [r3, #24]
 800da6a:	4613      	mov	r3, r2
 800da6c:	005b      	lsls	r3, r3, #1
 800da6e:	4413      	add	r3, r2
 800da70:	085a      	lsrs	r2, r3, #1
 800da72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800da7c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800da7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da80:	69da      	ldr	r2, [r3, #28]
 800da82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da84:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800da88:	0b1b      	lsrs	r3, r3, #12
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d201      	bcs.n	800da92 <find_volume+0x3ae>
 800da8e:	230d      	movs	r3, #13
 800da90:	e06d      	b.n	800db6e <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800da92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da94:	f04f 32ff 	mov.w	r2, #4294967295
 800da98:	615a      	str	r2, [r3, #20]
 800da9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9c:	695a      	ldr	r2, [r3, #20]
 800da9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800daa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa4:	2280      	movs	r2, #128	; 0x80
 800daa6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800daa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800daac:	2b03      	cmp	r3, #3
 800daae:	d149      	bne.n	800db44 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dab2:	3334      	adds	r3, #52	; 0x34
 800dab4:	3330      	adds	r3, #48	; 0x30
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fe f8fa 	bl	800bcb0 <ld_word>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d140      	bne.n	800db44 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dac4:	3301      	adds	r3, #1
 800dac6:	4619      	mov	r1, r3
 800dac8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800daca:	f7fe fb65 	bl	800c198 <move_window>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d137      	bne.n	800db44 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	2200      	movs	r2, #0
 800dad8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dadc:	3334      	adds	r3, #52	; 0x34
 800dade:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fe f8e4 	bl	800bcb0 <ld_word>
 800dae8:	4603      	mov	r3, r0
 800daea:	461a      	mov	r2, r3
 800daec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d127      	bne.n	800db44 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	3334      	adds	r3, #52	; 0x34
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe f8f1 	bl	800bce0 <ld_dword>
 800dafe:	4602      	mov	r2, r0
 800db00:	4b1d      	ldr	r3, [pc, #116]	; (800db78 <find_volume+0x494>)
 800db02:	429a      	cmp	r2, r3
 800db04:	d11e      	bne.n	800db44 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800db06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db08:	3334      	adds	r3, #52	; 0x34
 800db0a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fe f8e6 	bl	800bce0 <ld_dword>
 800db14:	4602      	mov	r2, r0
 800db16:	4b19      	ldr	r3, [pc, #100]	; (800db7c <find_volume+0x498>)
 800db18:	429a      	cmp	r2, r3
 800db1a:	d113      	bne.n	800db44 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800db1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1e:	3334      	adds	r3, #52	; 0x34
 800db20:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800db24:	4618      	mov	r0, r3
 800db26:	f7fe f8db 	bl	800bce0 <ld_dword>
 800db2a:	4602      	mov	r2, r0
 800db2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	3334      	adds	r3, #52	; 0x34
 800db34:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800db38:	4618      	mov	r0, r3
 800db3a:	f7fe f8d1 	bl	800bce0 <ld_dword>
 800db3e:	4602      	mov	r2, r0
 800db40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db42:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800db4a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800db4c:	4b0c      	ldr	r3, [pc, #48]	; (800db80 <find_volume+0x49c>)
 800db4e:	881b      	ldrh	r3, [r3, #0]
 800db50:	3301      	adds	r3, #1
 800db52:	b29a      	uxth	r2, r3
 800db54:	4b0a      	ldr	r3, [pc, #40]	; (800db80 <find_volume+0x49c>)
 800db56:	801a      	strh	r2, [r3, #0]
 800db58:	4b09      	ldr	r3, [pc, #36]	; (800db80 <find_volume+0x49c>)
 800db5a:	881a      	ldrh	r2, [r3, #0]
 800db5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db62:	4a08      	ldr	r2, [pc, #32]	; (800db84 <find_volume+0x4a0>)
 800db64:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800db66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800db68:	f7fe faae 	bl	800c0c8 <clear_lock>
#endif
	return FR_OK;
 800db6c:	2300      	movs	r3, #0
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3758      	adds	r7, #88	; 0x58
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	41615252 	.word	0x41615252
 800db7c:	61417272 	.word	0x61417272
 800db80:	20000b34 	.word	0x20000b34
 800db84:	20000b58 	.word	0x20000b58

0800db88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b088      	sub	sp, #32
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	4613      	mov	r3, r2
 800db94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800db9a:	f107 0310 	add.w	r3, r7, #16
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7ff fd05 	bl	800d5ae <get_ldnumber>
 800dba4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	da01      	bge.n	800dbb0 <f_mount+0x28>
 800dbac:	230b      	movs	r3, #11
 800dbae:	e02b      	b.n	800dc08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dbb0:	4a17      	ldr	r2, [pc, #92]	; (800dc10 <f_mount+0x88>)
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d005      	beq.n	800dbcc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dbc0:	69b8      	ldr	r0, [r7, #24]
 800dbc2:	f7fe fa81 	bl	800c0c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d002      	beq.n	800dbd8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	490d      	ldr	r1, [pc, #52]	; (800dc10 <f_mount+0x88>)
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d002      	beq.n	800dbee <f_mount+0x66>
 800dbe8:	79fb      	ldrb	r3, [r7, #7]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d001      	beq.n	800dbf2 <f_mount+0x6a>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	e00a      	b.n	800dc08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dbf2:	f107 010c 	add.w	r1, r7, #12
 800dbf6:	f107 0308 	add.w	r3, r7, #8
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7ff fd71 	bl	800d6e4 <find_volume>
 800dc02:	4603      	mov	r3, r0
 800dc04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dc06:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3720      	adds	r7, #32
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	20000b30 	.word	0x20000b30

0800dc14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b09a      	sub	sp, #104	; 0x68
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <f_open+0x18>
 800dc28:	2309      	movs	r3, #9
 800dc2a:	e1ad      	b.n	800df88 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dc34:	79fa      	ldrb	r2, [r7, #7]
 800dc36:	f107 0110 	add.w	r1, r7, #16
 800dc3a:	f107 0308 	add.w	r3, r7, #8
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7ff fd50 	bl	800d6e4 <find_volume>
 800dc44:	4603      	mov	r3, r0
 800dc46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800dc4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f040 8191 	bne.w	800df76 <f_open+0x362>
		dj.obj.fs = fs;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dc58:	68ba      	ldr	r2, [r7, #8]
 800dc5a:	f107 0314 	add.w	r3, r7, #20
 800dc5e:	4611      	mov	r1, r2
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7ff fc33 	bl	800d4cc <follow_path>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dc6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d11a      	bne.n	800dcaa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dc74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc78:	b25b      	sxtb	r3, r3
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	da03      	bge.n	800dc86 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dc7e:	2306      	movs	r3, #6
 800dc80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dc84:	e011      	b.n	800dcaa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc86:	79fb      	ldrb	r3, [r7, #7]
 800dc88:	f023 0301 	bic.w	r3, r3, #1
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	bf14      	ite	ne
 800dc90:	2301      	movne	r3, #1
 800dc92:	2300      	moveq	r3, #0
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	461a      	mov	r2, r3
 800dc98:	f107 0314 	add.w	r3, r7, #20
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe f906 	bl	800beb0 <chk_lock>
 800dca4:	4603      	mov	r3, r0
 800dca6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dcaa:	79fb      	ldrb	r3, [r7, #7]
 800dcac:	f003 031c 	and.w	r3, r3, #28
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d07f      	beq.n	800ddb4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dcb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d017      	beq.n	800dcec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dcbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dcc0:	2b04      	cmp	r3, #4
 800dcc2:	d10e      	bne.n	800dce2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dcc4:	f7fe f950 	bl	800bf68 <enq_lock>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d006      	beq.n	800dcdc <f_open+0xc8>
 800dcce:	f107 0314 	add.w	r3, r7, #20
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff f94a 	bl	800cf6c <dir_register>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	e000      	b.n	800dcde <f_open+0xca>
 800dcdc:	2312      	movs	r3, #18
 800dcde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dce2:	79fb      	ldrb	r3, [r7, #7]
 800dce4:	f043 0308 	orr.w	r3, r3, #8
 800dce8:	71fb      	strb	r3, [r7, #7]
 800dcea:	e010      	b.n	800dd0e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dcec:	7ebb      	ldrb	r3, [r7, #26]
 800dcee:	f003 0311 	and.w	r3, r3, #17
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d003      	beq.n	800dcfe <f_open+0xea>
					res = FR_DENIED;
 800dcf6:	2307      	movs	r3, #7
 800dcf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dcfc:	e007      	b.n	800dd0e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	f003 0304 	and.w	r3, r3, #4
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <f_open+0xfa>
 800dd08:	2308      	movs	r3, #8
 800dd0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dd0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d168      	bne.n	800dde8 <f_open+0x1d4>
 800dd16:	79fb      	ldrb	r3, [r7, #7]
 800dd18:	f003 0308 	and.w	r3, r3, #8
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d063      	beq.n	800dde8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800dd20:	f7f4 f914 	bl	8001f4c <get_fattime>
 800dd24:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dd26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd28:	330e      	adds	r3, #14
 800dd2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe f815 	bl	800bd5c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd34:	3316      	adds	r3, #22
 800dd36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fe f80f 	bl	800bd5c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd40:	330b      	adds	r3, #11
 800dd42:	2220      	movs	r2, #32
 800dd44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fe fe84 	bl	800ca5a <ld_clust>
 800dd52:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd58:	2200      	movs	r2, #0
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fe fe9c 	bl	800ca98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd62:	331c      	adds	r3, #28
 800dd64:	2100      	movs	r1, #0
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fd fff8 	bl	800bd5c <st_dword>
					fs->wflag = 1;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dd72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d037      	beq.n	800dde8 <f_open+0x1d4>
						dw = fs->winsect;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dd7e:	f107 0314 	add.w	r3, r7, #20
 800dd82:	2200      	movs	r2, #0
 800dd84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fe fbe3 	bl	800c552 <remove_chain>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dd92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d126      	bne.n	800dde8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fe f9fa 	bl	800c198 <move_window>
 800dda4:	4603      	mov	r3, r0
 800dda6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddae:	3a01      	subs	r2, #1
 800ddb0:	611a      	str	r2, [r3, #16]
 800ddb2:	e019      	b.n	800dde8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ddb4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d115      	bne.n	800dde8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ddbc:	7ebb      	ldrb	r3, [r7, #26]
 800ddbe:	f003 0310 	and.w	r3, r3, #16
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d003      	beq.n	800ddce <f_open+0x1ba>
					res = FR_NO_FILE;
 800ddc6:	2304      	movs	r3, #4
 800ddc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ddcc:	e00c      	b.n	800dde8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ddce:	79fb      	ldrb	r3, [r7, #7]
 800ddd0:	f003 0302 	and.w	r3, r3, #2
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d007      	beq.n	800dde8 <f_open+0x1d4>
 800ddd8:	7ebb      	ldrb	r3, [r7, #26]
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d002      	beq.n	800dde8 <f_open+0x1d4>
						res = FR_DENIED;
 800dde2:	2307      	movs	r3, #7
 800dde4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dde8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d128      	bne.n	800de42 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	f003 0308 	and.w	r3, r3, #8
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d003      	beq.n	800de02 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800de0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de10:	79fb      	ldrb	r3, [r7, #7]
 800de12:	f023 0301 	bic.w	r3, r3, #1
 800de16:	2b00      	cmp	r3, #0
 800de18:	bf14      	ite	ne
 800de1a:	2301      	movne	r3, #1
 800de1c:	2300      	moveq	r3, #0
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	461a      	mov	r2, r3
 800de22:	f107 0314 	add.w	r3, r7, #20
 800de26:	4611      	mov	r1, r2
 800de28:	4618      	mov	r0, r3
 800de2a:	f7fe f8bf 	bl	800bfac <inc_lock>
 800de2e:	4602      	mov	r2, r0
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d102      	bne.n	800de42 <f_open+0x22e>
 800de3c:	2302      	movs	r3, #2
 800de3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800de42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de46:	2b00      	cmp	r3, #0
 800de48:	f040 8095 	bne.w	800df76 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800de4c:	693b      	ldr	r3, [r7, #16]
 800de4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de50:	4611      	mov	r1, r2
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe fe01 	bl	800ca5a <ld_clust>
 800de58:	4602      	mov	r2, r0
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800de5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de60:	331c      	adds	r3, #28
 800de62:	4618      	mov	r0, r3
 800de64:	f7fd ff3c 	bl	800bce0 <ld_dword>
 800de68:	4602      	mov	r2, r0
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	88da      	ldrh	r2, [r3, #6]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	79fa      	ldrb	r2, [r7, #7]
 800de86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2200      	movs	r2, #0
 800de8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2200      	movs	r2, #0
 800de92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2200      	movs	r2, #0
 800de98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	3330      	adds	r3, #48	; 0x30
 800de9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dea2:	2100      	movs	r1, #0
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fd ffa6 	bl	800bdf6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800deaa:	79fb      	ldrb	r3, [r7, #7]
 800deac:	f003 0320 	and.w	r3, r3, #32
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d060      	beq.n	800df76 <f_open+0x362>
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d05c      	beq.n	800df76 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	68da      	ldr	r2, [r3, #12]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	895b      	ldrh	r3, [r3, #10]
 800dec8:	031b      	lsls	r3, r3, #12
 800deca:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ded8:	e016      	b.n	800df08 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800dede:	4618      	mov	r0, r3
 800dee0:	f7fe f9a6 	bl	800c230 <get_fat>
 800dee4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800dee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee8:	2b01      	cmp	r3, #1
 800deea:	d802      	bhi.n	800def2 <f_open+0x2de>
 800deec:	2302      	movs	r3, #2
 800deee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800def2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800def4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800def8:	d102      	bne.n	800df00 <f_open+0x2ec>
 800defa:	2301      	movs	r3, #1
 800defc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d103      	bne.n	800df18 <f_open+0x304>
 800df10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df14:	429a      	cmp	r2, r3
 800df16:	d8e0      	bhi.n	800deda <f_open+0x2c6>
				}
				fp->clust = clst;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800df1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df22:	2b00      	cmp	r3, #0
 800df24:	d127      	bne.n	800df76 <f_open+0x362>
 800df26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d022      	beq.n	800df76 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df34:	4618      	mov	r0, r3
 800df36:	f7fe f95c 	bl	800c1f2 <clust2sect>
 800df3a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800df3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d103      	bne.n	800df4a <f_open+0x336>
						res = FR_INT_ERR;
 800df42:	2302      	movs	r3, #2
 800df44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800df48:	e015      	b.n	800df76 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800df4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df4c:	0b1a      	lsrs	r2, r3, #12
 800df4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df50:	441a      	add	r2, r3
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	7858      	ldrb	r0, [r3, #1]
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	6a1a      	ldr	r2, [r3, #32]
 800df64:	2301      	movs	r3, #1
 800df66:	f7fd fe45 	bl	800bbf4 <disk_read>
 800df6a:	4603      	mov	r3, r0
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <f_open+0x362>
 800df70:	2301      	movs	r3, #1
 800df72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800df76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d002      	beq.n	800df84 <f_open+0x370>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800df84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3768      	adds	r7, #104	; 0x68
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b092      	sub	sp, #72	; 0x48
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800df9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800dfa0:	f107 030c 	add.w	r3, r7, #12
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7ff fb9c 	bl	800d6e4 <find_volume>
 800dfac:	4603      	mov	r3, r0
 800dfae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800dfb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f040 8099 	bne.w	800e0ee <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800dfbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800dfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc4:	695a      	ldr	r2, [r3, #20]
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	3b02      	subs	r3, #2
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d804      	bhi.n	800dfda <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd2:	695a      	ldr	r2, [r3, #20]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	e089      	b.n	800e0ee <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800dfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d128      	bne.n	800e038 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800dfe6:	2302      	movs	r3, #2
 800dfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfec:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800dfee:	f107 0314 	add.w	r3, r7, #20
 800dff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe f91b 	bl	800c230 <get_fat>
 800dffa:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e002:	d103      	bne.n	800e00c <f_getfree+0x7c>
 800e004:	2301      	movs	r3, #1
 800e006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e00a:	e063      	b.n	800e0d4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d103      	bne.n	800e01a <f_getfree+0x8a>
 800e012:	2302      	movs	r3, #2
 800e014:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e018:	e05c      	b.n	800e0d4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d102      	bne.n	800e026 <f_getfree+0x96>
 800e020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e022:	3301      	adds	r3, #1
 800e024:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800e026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e028:	3301      	adds	r3, #1
 800e02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02e:	699b      	ldr	r3, [r3, #24]
 800e030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e032:	429a      	cmp	r2, r3
 800e034:	d3db      	bcc.n	800dfee <f_getfree+0x5e>
 800e036:	e04d      	b.n	800e0d4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e042:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800e044:	2300      	movs	r3, #0
 800e046:	637b      	str	r3, [r7, #52]	; 0x34
 800e048:	2300      	movs	r3, #0
 800e04a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800e04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d113      	bne.n	800e07a <f_getfree+0xea>
							res = move_window(fs, sect++);
 800e052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e056:	1c5a      	adds	r2, r3, #1
 800e058:	63ba      	str	r2, [r7, #56]	; 0x38
 800e05a:	4619      	mov	r1, r3
 800e05c:	f7fe f89c 	bl	800c198 <move_window>
 800e060:	4603      	mov	r3, r0
 800e062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800e066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d131      	bne.n	800e0d2 <f_getfree+0x142>
							p = fs->win;
 800e06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e070:	3334      	adds	r3, #52	; 0x34
 800e072:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800e074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e078:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800e07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d10f      	bne.n	800e0a2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800e082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e084:	f7fd fe14 	bl	800bcb0 <ld_word>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d102      	bne.n	800e094 <f_getfree+0x104>
 800e08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e090:	3301      	adds	r3, #1
 800e092:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800e094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e096:	3302      	adds	r3, #2
 800e098:	633b      	str	r3, [r7, #48]	; 0x30
 800e09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e09c:	3b02      	subs	r3, #2
 800e09e:	637b      	str	r3, [r7, #52]	; 0x34
 800e0a0:	e010      	b.n	800e0c4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e0a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0a4:	f7fd fe1c 	bl	800bce0 <ld_dword>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d102      	bne.n	800e0b8 <f_getfree+0x128>
 800e0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800e0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	633b      	str	r3, [r7, #48]	; 0x30
 800e0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c0:	3b04      	subs	r3, #4
 800e0c2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800e0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d1bd      	bne.n	800e04c <f_getfree+0xbc>
 800e0d0:	e000      	b.n	800e0d4 <f_getfree+0x144>
							if (res != FR_OK) break;
 800e0d2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0d8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800e0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e2:	791a      	ldrb	r2, [r3, #4]
 800e0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e6:	f042 0201 	orr.w	r2, r2, #1
 800e0ea:	b2d2      	uxtb	r2, r2
 800e0ec:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800e0ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3748      	adds	r7, #72	; 0x48
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
	...

0800e0fc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800e0fc:	b590      	push	{r4, r7, lr}
 800e0fe:	b09d      	sub	sp, #116	; 0x74
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	607a      	str	r2, [r7, #4]
 800e106:	603b      	str	r3, [r7, #0]
 800e108:	460b      	mov	r3, r1
 800e10a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800e10c:	2301      	movs	r3, #1
 800e10e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800e110:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e114:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e116:	f107 030c 	add.w	r3, r7, #12
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7ff fa47 	bl	800d5ae <get_ldnumber>
 800e120:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e124:	2b00      	cmp	r3, #0
 800e126:	da02      	bge.n	800e12e <f_mkfs+0x32>
 800e128:	230b      	movs	r3, #11
 800e12a:	f000 bc0d 	b.w	800e948 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800e12e:	4a94      	ldr	r2, [pc, #592]	; (800e380 <f_mkfs+0x284>)
 800e130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d005      	beq.n	800e146 <f_mkfs+0x4a>
 800e13a:	4a91      	ldr	r2, [pc, #580]	; (800e380 <f_mkfs+0x284>)
 800e13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e142:	2200      	movs	r2, #0
 800e144:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800e146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e148:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800e14c:	2300      	movs	r3, #0
 800e14e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800e152:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e156:	4618      	mov	r0, r3
 800e158:	f7fd fd26 	bl	800bba8 <disk_initialize>
 800e15c:	4603      	mov	r3, r0
 800e15e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800e162:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e166:	f003 0301 	and.w	r3, r3, #1
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d001      	beq.n	800e172 <f_mkfs+0x76>
 800e16e:	2303      	movs	r3, #3
 800e170:	e3ea      	b.n	800e948 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e172:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e176:	f003 0304 	and.w	r3, r3, #4
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d001      	beq.n	800e182 <f_mkfs+0x86>
 800e17e:	230a      	movs	r3, #10
 800e180:	e3e2      	b.n	800e948 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800e182:	f107 0214 	add.w	r2, r7, #20
 800e186:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e18a:	2103      	movs	r1, #3
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fd fd71 	bl	800bc74 <disk_ioctl>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d10c      	bne.n	800e1b2 <f_mkfs+0xb6>
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d009      	beq.n	800e1b2 <f_mkfs+0xb6>
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1a4:	d805      	bhi.n	800e1b2 <f_mkfs+0xb6>
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	1e5a      	subs	r2, r3, #1
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <f_mkfs+0xba>
 800e1b2:	2301      	movs	r3, #1
 800e1b4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800e1b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e1ba:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d003      	beq.n	800e1ca <f_mkfs+0xce>
 800e1c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d309      	bcc.n	800e1de <f_mkfs+0xe2>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e1d0:	d805      	bhi.n	800e1de <f_mkfs+0xe2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	1e5a      	subs	r2, r3, #1
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4013      	ands	r3, r2
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <f_mkfs+0xe6>
 800e1de:	2313      	movs	r3, #19
 800e1e0:	e3b2      	b.n	800e948 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800e1e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ea:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800e1f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800e1fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e200:	fb02 f303 	mul.w	r3, r2, r3
 800e204:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d101      	bne.n	800e210 <f_mkfs+0x114>
 800e20c:	230e      	movs	r3, #14
 800e20e:	e39b      	b.n	800e948 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800e210:	f107 0210 	add.w	r2, r7, #16
 800e214:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e218:	2101      	movs	r1, #1
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fd fd2a 	bl	800bc74 <disk_ioctl>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d001      	beq.n	800e22a <f_mkfs+0x12e>
 800e226:	2301      	movs	r3, #1
 800e228:	e38e      	b.n	800e948 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800e22a:	7afb      	ldrb	r3, [r7, #11]
 800e22c:	f003 0308 	and.w	r3, r3, #8
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <f_mkfs+0x13c>
 800e234:	2300      	movs	r3, #0
 800e236:	e000      	b.n	800e23a <f_mkfs+0x13e>
 800e238:	233f      	movs	r3, #63	; 0x3f
 800e23a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e240:	429a      	cmp	r2, r3
 800e242:	d901      	bls.n	800e248 <f_mkfs+0x14c>
 800e244:	230e      	movs	r3, #14
 800e246:	e37f      	b.n	800e948 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800e248:	693a      	ldr	r2, [r7, #16]
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	2b7f      	cmp	r3, #127	; 0x7f
 800e254:	d801      	bhi.n	800e25a <f_mkfs+0x15e>
 800e256:	230e      	movs	r3, #14
 800e258:	e376      	b.n	800e948 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2b80      	cmp	r3, #128	; 0x80
 800e25e:	d901      	bls.n	800e264 <f_mkfs+0x168>
 800e260:	2313      	movs	r3, #19
 800e262:	e371      	b.n	800e948 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800e264:	7afb      	ldrb	r3, [r7, #11]
 800e266:	f003 0302 	and.w	r3, r3, #2
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d00d      	beq.n	800e28a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800e26e:	7afb      	ldrb	r3, [r7, #11]
 800e270:	f003 0307 	and.w	r3, r3, #7
 800e274:	2b02      	cmp	r3, #2
 800e276:	d004      	beq.n	800e282 <f_mkfs+0x186>
 800e278:	7afb      	ldrb	r3, [r7, #11]
 800e27a:	f003 0301 	and.w	r3, r3, #1
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d103      	bne.n	800e28a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800e282:	2303      	movs	r3, #3
 800e284:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e288:	e009      	b.n	800e29e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800e28a:	7afb      	ldrb	r3, [r7, #11]
 800e28c:	f003 0301 	and.w	r3, r3, #1
 800e290:	2b00      	cmp	r3, #0
 800e292:	d101      	bne.n	800e298 <f_mkfs+0x19c>
 800e294:	2313      	movs	r3, #19
 800e296:	e357      	b.n	800e948 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800e298:	2302      	movs	r3, #2
 800e29a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e2a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e2a6:	2b03      	cmp	r3, #3
 800e2a8:	d13c      	bne.n	800e324 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800e2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d11b      	bne.n	800e2e8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	0c5b      	lsrs	r3, r3, #17
 800e2b4:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e2be:	e005      	b.n	800e2cc <f_mkfs+0x1d0>
 800e2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2c8:	005b      	lsls	r3, r3, #1
 800e2ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e2cc:	4a2d      	ldr	r2, [pc, #180]	; (800e384 <f_mkfs+0x288>)
 800e2ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d007      	beq.n	800e2e8 <f_mkfs+0x1ec>
 800e2d8:	4a2a      	ldr	r2, [pc, #168]	; (800e384 <f_mkfs+0x288>)
 800e2da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d2eb      	bcs.n	800e2c0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e2e8:	693a      	ldr	r2, [r7, #16]
 800e2ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e2ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2f0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e2f2:	6a3b      	ldr	r3, [r7, #32]
 800e2f4:	3302      	adds	r3, #2
 800e2f6:	009a      	lsls	r2, r3, #2
 800e2f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e2fa:	4413      	add	r3, r2
 800e2fc:	1e5a      	subs	r2, r3, #1
 800e2fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e300:	fbb2 f3f3 	udiv	r3, r2, r3
 800e304:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800e306:	2320      	movs	r3, #32
 800e308:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800e30a:	2300      	movs	r3, #0
 800e30c:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e30e:	6a3b      	ldr	r3, [r7, #32]
 800e310:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e314:	4293      	cmp	r3, r2
 800e316:	d903      	bls.n	800e320 <f_mkfs+0x224>
 800e318:	6a3b      	ldr	r3, [r7, #32]
 800e31a:	4a1b      	ldr	r2, [pc, #108]	; (800e388 <f_mkfs+0x28c>)
 800e31c:	4293      	cmp	r3, r2
 800e31e:	d952      	bls.n	800e3c6 <f_mkfs+0x2ca>
 800e320:	230e      	movs	r3, #14
 800e322:	e311      	b.n	800e948 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e326:	2b00      	cmp	r3, #0
 800e328:	d11b      	bne.n	800e362 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	0b1b      	lsrs	r3, r3, #12
 800e32e:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e330:	2300      	movs	r3, #0
 800e332:	64bb      	str	r3, [r7, #72]	; 0x48
 800e334:	2301      	movs	r3, #1
 800e336:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e338:	e005      	b.n	800e346 <f_mkfs+0x24a>
 800e33a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e33c:	3301      	adds	r3, #1
 800e33e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e342:	005b      	lsls	r3, r3, #1
 800e344:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e346:	4a11      	ldr	r2, [pc, #68]	; (800e38c <f_mkfs+0x290>)
 800e348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e34a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d007      	beq.n	800e362 <f_mkfs+0x266>
 800e352:	4a0e      	ldr	r2, [pc, #56]	; (800e38c <f_mkfs+0x290>)
 800e354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e35a:	461a      	mov	r2, r3
 800e35c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e35e:	4293      	cmp	r3, r2
 800e360:	d2eb      	bcs.n	800e33a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e366:	fbb2 f3f3 	udiv	r3, r2, r3
 800e36a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e372:	4293      	cmp	r3, r2
 800e374:	d90c      	bls.n	800e390 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e376:	6a3b      	ldr	r3, [r7, #32]
 800e378:	3302      	adds	r3, #2
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	663b      	str	r3, [r7, #96]	; 0x60
 800e37e:	e012      	b.n	800e3a6 <f_mkfs+0x2aa>
 800e380:	20000b30 	.word	0x20000b30
 800e384:	080126d0 	.word	0x080126d0
 800e388:	0ffffff5 	.word	0x0ffffff5
 800e38c:	080126e0 	.word	0x080126e0
				} else {
					fmt = FS_FAT12;
 800e390:	2301      	movs	r3, #1
 800e392:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e396:	6a3a      	ldr	r2, [r7, #32]
 800e398:	4613      	mov	r3, r2
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	4413      	add	r3, r2
 800e39e:	3301      	adds	r3, #1
 800e3a0:	085b      	lsrs	r3, r3, #1
 800e3a2:	3303      	adds	r3, #3
 800e3a4:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e3a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e3a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3aa:	4413      	add	r3, r2
 800e3ac:	1e5a      	subs	r2, r3, #1
 800e3ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e3b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e3ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3bc:	015a      	lsls	r2, r3, #5
 800e3be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c4:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3ca:	4413      	add	r3, r2
 800e3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3d2:	fb02 f203 	mul.w	r2, r2, r3
 800e3d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e3d8:	4413      	add	r3, r2
 800e3da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3dc:	4413      	add	r3, r2
 800e3de:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e3e0:	697a      	ldr	r2, [r7, #20]
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	1e5a      	subs	r2, r3, #1
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	425b      	negs	r3, r3
 800e3ec:	401a      	ands	r2, r3
 800e3ee:	69fb      	ldr	r3, [r7, #28]
 800e3f0:	1ad3      	subs	r3, r2, r3
 800e3f2:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e3f4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e3f8:	2b03      	cmp	r3, #3
 800e3fa:	d108      	bne.n	800e40e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e3fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e400:	4413      	add	r3, r2
 800e402:	65bb      	str	r3, [r7, #88]	; 0x58
 800e404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e408:	4413      	add	r3, r2
 800e40a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e40c:	e006      	b.n	800e41c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e40e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e412:	fbb2 f3f3 	udiv	r3, r2, r3
 800e416:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e418:	4413      	add	r3, r2
 800e41a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e41c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e41e:	011a      	lsls	r2, r3, #4
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	441a      	add	r2, r3
 800e424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e426:	1ad2      	subs	r2, r2, r3
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d901      	bls.n	800e432 <f_mkfs+0x336>
 800e42e:	230e      	movs	r3, #14
 800e430:	e28a      	b.n	800e948 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e432:	693a      	ldr	r2, [r7, #16]
 800e434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e436:	1ad2      	subs	r2, r2, r3
 800e438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e43a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e43c:	fb01 f303 	mul.w	r3, r1, r3
 800e440:	1ad2      	subs	r2, r2, r3
 800e442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e444:	1ad2      	subs	r2, r2, r3
 800e446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e448:	fbb2 f3f3 	udiv	r3, r2, r3
 800e44c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e44e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e452:	2b03      	cmp	r3, #3
 800e454:	d10f      	bne.n	800e476 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e456:	6a3b      	ldr	r3, [r7, #32]
 800e458:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d80a      	bhi.n	800e476 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d105      	bne.n	800e472 <f_mkfs+0x376>
 800e466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e468:	085b      	lsrs	r3, r3, #1
 800e46a:	607b      	str	r3, [r7, #4]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d144      	bne.n	800e4fc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e472:	230e      	movs	r3, #14
 800e474:	e268      	b.n	800e948 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e476:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	d133      	bne.n	800e4e6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e47e:	6a3b      	ldr	r3, [r7, #32]
 800e480:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e484:	4293      	cmp	r3, r2
 800e486:	d91e      	bls.n	800e4c6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d107      	bne.n	800e49e <f_mkfs+0x3a2>
 800e48e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e490:	005b      	lsls	r3, r3, #1
 800e492:	2b40      	cmp	r3, #64	; 0x40
 800e494:	d803      	bhi.n	800e49e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e498:	005b      	lsls	r3, r3, #1
 800e49a:	607b      	str	r3, [r7, #4]
 800e49c:	e033      	b.n	800e506 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e49e:	7afb      	ldrb	r3, [r7, #11]
 800e4a0:	f003 0302 	and.w	r3, r3, #2
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d003      	beq.n	800e4b0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e4a8:	2303      	movs	r3, #3
 800e4aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e4ae:	e02a      	b.n	800e506 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d105      	bne.n	800e4c2 <f_mkfs+0x3c6>
 800e4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4b8:	005b      	lsls	r3, r3, #1
 800e4ba:	607b      	str	r3, [r7, #4]
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2b80      	cmp	r3, #128	; 0x80
 800e4c0:	d91e      	bls.n	800e500 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e4c2:	230e      	movs	r3, #14
 800e4c4:	e240      	b.n	800e948 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e4c6:	6a3b      	ldr	r3, [r7, #32]
 800e4c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d80a      	bhi.n	800e4e6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d105      	bne.n	800e4e2 <f_mkfs+0x3e6>
 800e4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4d8:	005b      	lsls	r3, r3, #1
 800e4da:	607b      	str	r3, [r7, #4]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b80      	cmp	r3, #128	; 0x80
 800e4e0:	d910      	bls.n	800e504 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e4e2:	230e      	movs	r3, #14
 800e4e4:	e230      	b.n	800e948 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e4e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d10c      	bne.n	800e508 <f_mkfs+0x40c>
 800e4ee:	6a3b      	ldr	r3, [r7, #32]
 800e4f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d907      	bls.n	800e508 <f_mkfs+0x40c>
 800e4f8:	230e      	movs	r3, #14
 800e4fa:	e225      	b.n	800e948 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e4fc:	bf00      	nop
 800e4fe:	e6ce      	b.n	800e29e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e500:	bf00      	nop
 800e502:	e6cc      	b.n	800e29e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e504:	bf00      	nop
			pau = au;
 800e506:	e6ca      	b.n	800e29e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e508:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e50a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e50c:	461a      	mov	r2, r3
 800e50e:	2100      	movs	r1, #0
 800e510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e512:	f7fd fc70 	bl	800bdf6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e516:	220b      	movs	r2, #11
 800e518:	49bc      	ldr	r1, [pc, #752]	; (800e80c <f_mkfs+0x710>)
 800e51a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e51c:	f7fd fc4a 	bl	800bdb4 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e522:	330b      	adds	r3, #11
 800e524:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e526:	4611      	mov	r1, r2
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fd fbfc 	bl	800bd26 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e530:	330d      	adds	r3, #13
 800e532:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e534:	b2d2      	uxtb	r2, r2
 800e536:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53a:	330e      	adds	r3, #14
 800e53c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e53e:	b292      	uxth	r2, r2
 800e540:	4611      	mov	r1, r2
 800e542:	4618      	mov	r0, r3
 800e544:	f7fd fbef 	bl	800bd26 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54a:	3310      	adds	r3, #16
 800e54c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e54e:	b2d2      	uxtb	r2, r2
 800e550:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e554:	f103 0211 	add.w	r2, r3, #17
 800e558:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e55c:	2b03      	cmp	r3, #3
 800e55e:	d002      	beq.n	800e566 <f_mkfs+0x46a>
 800e560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e562:	b29b      	uxth	r3, r3
 800e564:	e000      	b.n	800e568 <f_mkfs+0x46c>
 800e566:	2300      	movs	r3, #0
 800e568:	4619      	mov	r1, r3
 800e56a:	4610      	mov	r0, r2
 800e56c:	f7fd fbdb 	bl	800bd26 <st_word>
		if (sz_vol < 0x10000) {
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e576:	d208      	bcs.n	800e58a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	3313      	adds	r3, #19
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	b292      	uxth	r2, r2
 800e580:	4611      	mov	r1, r2
 800e582:	4618      	mov	r0, r3
 800e584:	f7fd fbcf 	bl	800bd26 <st_word>
 800e588:	e006      	b.n	800e598 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58c:	3320      	adds	r3, #32
 800e58e:	693a      	ldr	r2, [r7, #16]
 800e590:	4611      	mov	r1, r2
 800e592:	4618      	mov	r0, r3
 800e594:	f7fd fbe2 	bl	800bd5c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59a:	3315      	adds	r3, #21
 800e59c:	22f8      	movs	r2, #248	; 0xf8
 800e59e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5a2:	3318      	adds	r3, #24
 800e5a4:	213f      	movs	r1, #63	; 0x3f
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7fd fbbd 	bl	800bd26 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ae:	331a      	adds	r3, #26
 800e5b0:	21ff      	movs	r1, #255	; 0xff
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fd fbb7 	bl	800bd26 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ba:	331c      	adds	r3, #28
 800e5bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fd fbcc 	bl	800bd5c <st_dword>
		if (fmt == FS_FAT32) {
 800e5c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5c8:	2b03      	cmp	r3, #3
 800e5ca:	d131      	bne.n	800e630 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ce:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800e5d2:	f7f3 fcbb 	bl	8001f4c <get_fattime>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	4619      	mov	r1, r3
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f7fd fbbe 	bl	800bd5c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5e2:	3324      	adds	r3, #36	; 0x24
 800e5e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fd fbb8 	bl	800bd5c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ee:	332c      	adds	r3, #44	; 0x2c
 800e5f0:	2102      	movs	r1, #2
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fd fbb2 	bl	800bd5c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5fa:	3330      	adds	r3, #48	; 0x30
 800e5fc:	2101      	movs	r1, #1
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fd fb91 	bl	800bd26 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e606:	3332      	adds	r3, #50	; 0x32
 800e608:	2106      	movs	r1, #6
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fd fb8b 	bl	800bd26 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e612:	3340      	adds	r3, #64	; 0x40
 800e614:	2280      	movs	r2, #128	; 0x80
 800e616:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61a:	3342      	adds	r3, #66	; 0x42
 800e61c:	2229      	movs	r2, #41	; 0x29
 800e61e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e622:	3347      	adds	r3, #71	; 0x47
 800e624:	2213      	movs	r2, #19
 800e626:	497a      	ldr	r1, [pc, #488]	; (800e810 <f_mkfs+0x714>)
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fd fbc3 	bl	800bdb4 <mem_cpy>
 800e62e:	e020      	b.n	800e672 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e632:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800e636:	f7f3 fc89 	bl	8001f4c <get_fattime>
 800e63a:	4603      	mov	r3, r0
 800e63c:	4619      	mov	r1, r3
 800e63e:	4620      	mov	r0, r4
 800e640:	f7fd fb8c 	bl	800bd5c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e646:	3316      	adds	r3, #22
 800e648:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e64a:	b292      	uxth	r2, r2
 800e64c:	4611      	mov	r1, r2
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fd fb69 	bl	800bd26 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e656:	3324      	adds	r3, #36	; 0x24
 800e658:	2280      	movs	r2, #128	; 0x80
 800e65a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e65e:	3326      	adds	r3, #38	; 0x26
 800e660:	2229      	movs	r2, #41	; 0x29
 800e662:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e666:	332b      	adds	r3, #43	; 0x2b
 800e668:	2213      	movs	r2, #19
 800e66a:	496a      	ldr	r1, [pc, #424]	; (800e814 <f_mkfs+0x718>)
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7fd fba1 	bl	800bdb4 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e674:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e678:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fd fb52 	bl	800bd26 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e682:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e686:	2301      	movs	r3, #1
 800e688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e68a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e68c:	f7fd fad2 	bl	800bc34 <disk_write>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <f_mkfs+0x59e>
 800e696:	2301      	movs	r3, #1
 800e698:	e156      	b.n	800e948 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e69a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e69e:	2b03      	cmp	r3, #3
 800e6a0:	d140      	bne.n	800e724 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	1d9a      	adds	r2, r3, #6
 800e6a6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6ae:	f7fd fac1 	bl	800bc34 <disk_write>
			mem_set(buf, 0, ss);
 800e6b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6ba:	f7fd fb9c 	bl	800bdf6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e6be:	4956      	ldr	r1, [pc, #344]	; (800e818 <f_mkfs+0x71c>)
 800e6c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6c2:	f7fd fb4b 	bl	800bd5c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e6cc:	4953      	ldr	r1, [pc, #332]	; (800e81c <f_mkfs+0x720>)
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fd fb44 	bl	800bd5c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e6da:	6a3b      	ldr	r3, [r7, #32]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	4619      	mov	r1, r3
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	f7fd fb3b 	bl	800bd5c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e6ec:	2102      	movs	r1, #2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fd fb34 	bl	800bd5c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e6fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e6fe:	4618      	mov	r0, r3
 800e700:	f7fd fb11 	bl	800bd26 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e706:	1dda      	adds	r2, r3, #7
 800e708:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e70c:	2301      	movs	r3, #1
 800e70e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e710:	f7fd fa90 	bl	800bc34 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e71c:	2301      	movs	r3, #1
 800e71e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e720:	f7fd fa88 	bl	800bc34 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e726:	2100      	movs	r1, #0
 800e728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e72a:	f7fd fb64 	bl	800bdf6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e72e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e730:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e732:	2300      	movs	r3, #0
 800e734:	64bb      	str	r3, [r7, #72]	; 0x48
 800e736:	e04b      	b.n	800e7d0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800e738:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	d113      	bne.n	800e768 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e740:	f06f 0107 	mvn.w	r1, #7
 800e744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e746:	f7fd fb09 	bl	800bd5c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74c:	3304      	adds	r3, #4
 800e74e:	f04f 31ff 	mov.w	r1, #4294967295
 800e752:	4618      	mov	r0, r3
 800e754:	f7fd fb02 	bl	800bd5c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75a:	3308      	adds	r3, #8
 800e75c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e760:	4618      	mov	r0, r3
 800e762:	f7fd fafb 	bl	800bd5c <st_dword>
 800e766:	e00b      	b.n	800e780 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e768:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d101      	bne.n	800e774 <f_mkfs+0x678>
 800e770:	4b2b      	ldr	r3, [pc, #172]	; (800e820 <f_mkfs+0x724>)
 800e772:	e001      	b.n	800e778 <f_mkfs+0x67c>
 800e774:	f06f 0307 	mvn.w	r3, #7
 800e778:	4619      	mov	r1, r3
 800e77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e77c:	f7fd faee 	bl	800bd5c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e782:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	4293      	cmp	r3, r2
 800e78a:	bf28      	it	cs
 800e78c:	4613      	movcs	r3, r2
 800e78e:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e790:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e796:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e79a:	f7fd fa4b 	bl	800bc34 <disk_write>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d001      	beq.n	800e7a8 <f_mkfs+0x6ac>
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e0cf      	b.n	800e948 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800e7a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e7b0:	f7fd fb21 	bl	800bdf6 <mem_set>
				sect += n; nsect -= n;
 800e7b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7b8:	4413      	add	r3, r2
 800e7ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e7be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800e7c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1dc      	bne.n	800e784 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e7ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d3af      	bcc.n	800e738 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e7d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e7dc:	2b03      	cmp	r3, #3
 800e7de:	d101      	bne.n	800e7e4 <f_mkfs+0x6e8>
 800e7e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e2:	e000      	b.n	800e7e6 <f_mkfs+0x6ea>
 800e7e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e6:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e7e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	bf28      	it	cs
 800e7f0:	4613      	movcs	r3, r2
 800e7f2:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e7f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e7f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7fe:	f7fd fa19 	bl	800bc34 <disk_write>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00d      	beq.n	800e824 <f_mkfs+0x728>
 800e808:	2301      	movs	r3, #1
 800e80a:	e09d      	b.n	800e948 <f_mkfs+0x84c>
 800e80c:	080125ec 	.word	0x080125ec
 800e810:	080125f8 	.word	0x080125f8
 800e814:	0801260c 	.word	0x0801260c
 800e818:	41615252 	.word	0x41615252
 800e81c:	61417272 	.word	0x61417272
 800e820:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800e824:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e828:	4413      	add	r3, r2
 800e82a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e82c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e82e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800e834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1d6      	bne.n	800e7e8 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800e83a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e83e:	2b03      	cmp	r3, #3
 800e840:	d103      	bne.n	800e84a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800e842:	230c      	movs	r3, #12
 800e844:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e848:	e010      	b.n	800e86c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e850:	d303      	bcc.n	800e85a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e852:	2306      	movs	r3, #6
 800e854:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e858:	e008      	b.n	800e86c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e85a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d101      	bne.n	800e866 <f_mkfs+0x76a>
 800e862:	2304      	movs	r3, #4
 800e864:	e000      	b.n	800e868 <f_mkfs+0x76c>
 800e866:	2301      	movs	r3, #1
 800e868:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800e86c:	7afb      	ldrb	r3, [r7, #11]
 800e86e:	f003 0308 	and.w	r3, r3, #8
 800e872:	2b00      	cmp	r3, #0
 800e874:	d15b      	bne.n	800e92e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800e876:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e878:	461a      	mov	r2, r3
 800e87a:	2100      	movs	r1, #0
 800e87c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e87e:	f7fd faba 	bl	800bdf6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800e882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e884:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e888:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fd fa4a 	bl	800bd26 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800e892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e894:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e898:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800e89a:	69bb      	ldr	r3, [r7, #24]
 800e89c:	2200      	movs	r2, #0
 800e89e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800e8a0:	69bb      	ldr	r3, [r7, #24]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	3302      	adds	r3, #2
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	3303      	adds	r3, #3
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800e8c0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800e8c2:	693a      	ldr	r2, [r7, #16]
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	441a      	add	r2, r3
 800e8c8:	4b21      	ldr	r3, [pc, #132]	; (800e950 <f_mkfs+0x854>)
 800e8ca:	fba3 1302 	umull	r1, r3, r3, r2
 800e8ce:	1ad2      	subs	r2, r2, r3
 800e8d0:	0852      	lsrs	r2, r2, #1
 800e8d2:	4413      	add	r3, r2
 800e8d4:	0b5b      	lsrs	r3, r3, #13
 800e8d6:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	3305      	adds	r3, #5
 800e8dc:	22fe      	movs	r2, #254	; 0xfe
 800e8de:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800e8e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8e2:	089b      	lsrs	r3, r3, #2
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	3306      	adds	r3, #6
 800e8ea:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800e8ee:	b2d2      	uxtb	r2, r2
 800e8f0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800e8f2:	69bb      	ldr	r3, [r7, #24]
 800e8f4:	3307      	adds	r3, #7
 800e8f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8f8:	b2d2      	uxtb	r2, r2
 800e8fa:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	3308      	adds	r3, #8
 800e900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e902:	4618      	mov	r0, r3
 800e904:	f7fd fa2a 	bl	800bd5c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	330c      	adds	r3, #12
 800e90c:	693a      	ldr	r2, [r7, #16]
 800e90e:	4611      	mov	r1, r2
 800e910:	4618      	mov	r0, r3
 800e912:	f7fd fa23 	bl	800bd5c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800e916:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e91a:	2301      	movs	r3, #1
 800e91c:	2200      	movs	r2, #0
 800e91e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e920:	f7fd f988 	bl	800bc34 <disk_write>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <f_mkfs+0x832>
 800e92a:	2301      	movs	r3, #1
 800e92c:	e00c      	b.n	800e948 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800e92e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e932:	2200      	movs	r2, #0
 800e934:	2100      	movs	r1, #0
 800e936:	4618      	mov	r0, r3
 800e938:	f7fd f99c 	bl	800bc74 <disk_ioctl>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <f_mkfs+0x84a>
 800e942:	2301      	movs	r3, #1
 800e944:	e000      	b.n	800e948 <f_mkfs+0x84c>

	return FR_OK;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3774      	adds	r7, #116	; 0x74
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd90      	pop	{r4, r7, pc}
 800e950:	0515565b 	.word	0x0515565b

0800e954 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e954:	b480      	push	{r7}
 800e956:	b087      	sub	sp, #28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	4613      	mov	r3, r2
 800e960:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e962:	2301      	movs	r3, #1
 800e964:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e966:	2300      	movs	r3, #0
 800e968:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e96a:	4b1f      	ldr	r3, [pc, #124]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e96c:	7a5b      	ldrb	r3, [r3, #9]
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	2b00      	cmp	r3, #0
 800e972:	d131      	bne.n	800e9d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e974:	4b1c      	ldr	r3, [pc, #112]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e976:	7a5b      	ldrb	r3, [r3, #9]
 800e978:	b2db      	uxtb	r3, r3
 800e97a:	461a      	mov	r2, r3
 800e97c:	4b1a      	ldr	r3, [pc, #104]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e97e:	2100      	movs	r1, #0
 800e980:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e982:	4b19      	ldr	r3, [pc, #100]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e984:	7a5b      	ldrb	r3, [r3, #9]
 800e986:	b2db      	uxtb	r3, r3
 800e988:	4a17      	ldr	r2, [pc, #92]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e98a:	009b      	lsls	r3, r3, #2
 800e98c:	4413      	add	r3, r2
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e992:	4b15      	ldr	r3, [pc, #84]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e994:	7a5b      	ldrb	r3, [r3, #9]
 800e996:	b2db      	uxtb	r3, r3
 800e998:	461a      	mov	r2, r3
 800e99a:	4b13      	ldr	r3, [pc, #76]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e99c:	4413      	add	r3, r2
 800e99e:	79fa      	ldrb	r2, [r7, #7]
 800e9a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e9a2:	4b11      	ldr	r3, [pc, #68]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e9a4:	7a5b      	ldrb	r3, [r3, #9]
 800e9a6:	b2db      	uxtb	r3, r3
 800e9a8:	1c5a      	adds	r2, r3, #1
 800e9aa:	b2d1      	uxtb	r1, r2
 800e9ac:	4a0e      	ldr	r2, [pc, #56]	; (800e9e8 <FATFS_LinkDriverEx+0x94>)
 800e9ae:	7251      	strb	r1, [r2, #9]
 800e9b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e9b2:	7dbb      	ldrb	r3, [r7, #22]
 800e9b4:	3330      	adds	r3, #48	; 0x30
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	3301      	adds	r3, #1
 800e9c0:	223a      	movs	r2, #58	; 0x3a
 800e9c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	3302      	adds	r3, #2
 800e9c8:	222f      	movs	r2, #47	; 0x2f
 800e9ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	3303      	adds	r3, #3
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e9d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	371c      	adds	r7, #28
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	20000d58 	.word	0x20000d58

0800e9ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f7ff ffaa 	bl	800e954 <FATFS_LinkDriverEx>
 800ea00:	4603      	mov	r3, r0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
	...

0800ea0c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b085      	sub	sp, #20
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	4603      	mov	r3, r0
 800ea14:	6039      	str	r1, [r7, #0]
 800ea16:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ea18:	88fb      	ldrh	r3, [r7, #6]
 800ea1a:	2b7f      	cmp	r3, #127	; 0x7f
 800ea1c:	d802      	bhi.n	800ea24 <ff_convert+0x18>
		c = chr;
 800ea1e:	88fb      	ldrh	r3, [r7, #6]
 800ea20:	81fb      	strh	r3, [r7, #14]
 800ea22:	e025      	b.n	800ea70 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00b      	beq.n	800ea42 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ea2a:	88fb      	ldrh	r3, [r7, #6]
 800ea2c:	2bff      	cmp	r3, #255	; 0xff
 800ea2e:	d805      	bhi.n	800ea3c <ff_convert+0x30>
 800ea30:	88fb      	ldrh	r3, [r7, #6]
 800ea32:	3b80      	subs	r3, #128	; 0x80
 800ea34:	4a12      	ldr	r2, [pc, #72]	; (800ea80 <ff_convert+0x74>)
 800ea36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea3a:	e000      	b.n	800ea3e <ff_convert+0x32>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	81fb      	strh	r3, [r7, #14]
 800ea40:	e016      	b.n	800ea70 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ea42:	2300      	movs	r3, #0
 800ea44:	81fb      	strh	r3, [r7, #14]
 800ea46:	e009      	b.n	800ea5c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ea48:	89fb      	ldrh	r3, [r7, #14]
 800ea4a:	4a0d      	ldr	r2, [pc, #52]	; (800ea80 <ff_convert+0x74>)
 800ea4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea50:	88fa      	ldrh	r2, [r7, #6]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d006      	beq.n	800ea64 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ea56:	89fb      	ldrh	r3, [r7, #14]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	81fb      	strh	r3, [r7, #14]
 800ea5c:	89fb      	ldrh	r3, [r7, #14]
 800ea5e:	2b7f      	cmp	r3, #127	; 0x7f
 800ea60:	d9f2      	bls.n	800ea48 <ff_convert+0x3c>
 800ea62:	e000      	b.n	800ea66 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ea64:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ea66:	89fb      	ldrh	r3, [r7, #14]
 800ea68:	3380      	adds	r3, #128	; 0x80
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ea70:	89fb      	ldrh	r3, [r7, #14]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3714      	adds	r7, #20
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop
 800ea80:	080126f0 	.word	0x080126f0

0800ea84 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b087      	sub	sp, #28
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ea8e:	88fb      	ldrh	r3, [r7, #6]
 800ea90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea94:	d201      	bcs.n	800ea9a <ff_wtoupper+0x16>
 800ea96:	4b3e      	ldr	r3, [pc, #248]	; (800eb90 <ff_wtoupper+0x10c>)
 800ea98:	e000      	b.n	800ea9c <ff_wtoupper+0x18>
 800ea9a:	4b3e      	ldr	r3, [pc, #248]	; (800eb94 <ff_wtoupper+0x110>)
 800ea9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	1c9a      	adds	r2, r3, #2
 800eaa2:	617a      	str	r2, [r7, #20]
 800eaa4:	881b      	ldrh	r3, [r3, #0]
 800eaa6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eaa8:	8a7b      	ldrh	r3, [r7, #18]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d068      	beq.n	800eb80 <ff_wtoupper+0xfc>
 800eaae:	88fa      	ldrh	r2, [r7, #6]
 800eab0:	8a7b      	ldrh	r3, [r7, #18]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d364      	bcc.n	800eb80 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	1c9a      	adds	r2, r3, #2
 800eaba:	617a      	str	r2, [r7, #20]
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	823b      	strh	r3, [r7, #16]
 800eac0:	8a3b      	ldrh	r3, [r7, #16]
 800eac2:	0a1b      	lsrs	r3, r3, #8
 800eac4:	81fb      	strh	r3, [r7, #14]
 800eac6:	8a3b      	ldrh	r3, [r7, #16]
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eacc:	88fa      	ldrh	r2, [r7, #6]
 800eace:	8a79      	ldrh	r1, [r7, #18]
 800ead0:	8a3b      	ldrh	r3, [r7, #16]
 800ead2:	440b      	add	r3, r1
 800ead4:	429a      	cmp	r2, r3
 800ead6:	da49      	bge.n	800eb6c <ff_wtoupper+0xe8>
			switch (cmd) {
 800ead8:	89fb      	ldrh	r3, [r7, #14]
 800eada:	2b08      	cmp	r3, #8
 800eadc:	d84f      	bhi.n	800eb7e <ff_wtoupper+0xfa>
 800eade:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <ff_wtoupper+0x60>)
 800eae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae4:	0800eb09 	.word	0x0800eb09
 800eae8:	0800eb1b 	.word	0x0800eb1b
 800eaec:	0800eb31 	.word	0x0800eb31
 800eaf0:	0800eb39 	.word	0x0800eb39
 800eaf4:	0800eb41 	.word	0x0800eb41
 800eaf8:	0800eb49 	.word	0x0800eb49
 800eafc:	0800eb51 	.word	0x0800eb51
 800eb00:	0800eb59 	.word	0x0800eb59
 800eb04:	0800eb61 	.word	0x0800eb61
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800eb08:	88fa      	ldrh	r2, [r7, #6]
 800eb0a:	8a7b      	ldrh	r3, [r7, #18]
 800eb0c:	1ad3      	subs	r3, r2, r3
 800eb0e:	005b      	lsls	r3, r3, #1
 800eb10:	697a      	ldr	r2, [r7, #20]
 800eb12:	4413      	add	r3, r2
 800eb14:	881b      	ldrh	r3, [r3, #0]
 800eb16:	80fb      	strh	r3, [r7, #6]
 800eb18:	e027      	b.n	800eb6a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800eb1a:	88fa      	ldrh	r2, [r7, #6]
 800eb1c:	8a7b      	ldrh	r3, [r7, #18]
 800eb1e:	1ad3      	subs	r3, r2, r3
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	f003 0301 	and.w	r3, r3, #1
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	88fa      	ldrh	r2, [r7, #6]
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	80fb      	strh	r3, [r7, #6]
 800eb2e:	e01c      	b.n	800eb6a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800eb30:	88fb      	ldrh	r3, [r7, #6]
 800eb32:	3b10      	subs	r3, #16
 800eb34:	80fb      	strh	r3, [r7, #6]
 800eb36:	e018      	b.n	800eb6a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800eb38:	88fb      	ldrh	r3, [r7, #6]
 800eb3a:	3b20      	subs	r3, #32
 800eb3c:	80fb      	strh	r3, [r7, #6]
 800eb3e:	e014      	b.n	800eb6a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800eb40:	88fb      	ldrh	r3, [r7, #6]
 800eb42:	3b30      	subs	r3, #48	; 0x30
 800eb44:	80fb      	strh	r3, [r7, #6]
 800eb46:	e010      	b.n	800eb6a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800eb48:	88fb      	ldrh	r3, [r7, #6]
 800eb4a:	3b1a      	subs	r3, #26
 800eb4c:	80fb      	strh	r3, [r7, #6]
 800eb4e:	e00c      	b.n	800eb6a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800eb50:	88fb      	ldrh	r3, [r7, #6]
 800eb52:	3308      	adds	r3, #8
 800eb54:	80fb      	strh	r3, [r7, #6]
 800eb56:	e008      	b.n	800eb6a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800eb58:	88fb      	ldrh	r3, [r7, #6]
 800eb5a:	3b50      	subs	r3, #80	; 0x50
 800eb5c:	80fb      	strh	r3, [r7, #6]
 800eb5e:	e004      	b.n	800eb6a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800eb60:	88fb      	ldrh	r3, [r7, #6]
 800eb62:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800eb66:	80fb      	strh	r3, [r7, #6]
 800eb68:	bf00      	nop
			}
			break;
 800eb6a:	e008      	b.n	800eb7e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800eb6c:	89fb      	ldrh	r3, [r7, #14]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d195      	bne.n	800ea9e <ff_wtoupper+0x1a>
 800eb72:	8a3b      	ldrh	r3, [r7, #16]
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	4413      	add	r3, r2
 800eb7a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800eb7c:	e78f      	b.n	800ea9e <ff_wtoupper+0x1a>
			break;
 800eb7e:	bf00      	nop
	}

	return chr;
 800eb80:	88fb      	ldrh	r3, [r7, #6]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	371c      	adds	r7, #28
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop
 800eb90:	080127f0 	.word	0x080127f0
 800eb94:	080129e4 	.word	0x080129e4

0800eb98 <__errno>:
 800eb98:	4b01      	ldr	r3, [pc, #4]	; (800eba0 <__errno+0x8>)
 800eb9a:	6818      	ldr	r0, [r3, #0]
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	20000028 	.word	0x20000028

0800eba4 <__libc_init_array>:
 800eba4:	b570      	push	{r4, r5, r6, lr}
 800eba6:	4e0d      	ldr	r6, [pc, #52]	; (800ebdc <__libc_init_array+0x38>)
 800eba8:	4c0d      	ldr	r4, [pc, #52]	; (800ebe0 <__libc_init_array+0x3c>)
 800ebaa:	1ba4      	subs	r4, r4, r6
 800ebac:	10a4      	asrs	r4, r4, #2
 800ebae:	2500      	movs	r5, #0
 800ebb0:	42a5      	cmp	r5, r4
 800ebb2:	d109      	bne.n	800ebc8 <__libc_init_array+0x24>
 800ebb4:	4e0b      	ldr	r6, [pc, #44]	; (800ebe4 <__libc_init_array+0x40>)
 800ebb6:	4c0c      	ldr	r4, [pc, #48]	; (800ebe8 <__libc_init_array+0x44>)
 800ebb8:	f003 fc90 	bl	80124dc <_init>
 800ebbc:	1ba4      	subs	r4, r4, r6
 800ebbe:	10a4      	asrs	r4, r4, #2
 800ebc0:	2500      	movs	r5, #0
 800ebc2:	42a5      	cmp	r5, r4
 800ebc4:	d105      	bne.n	800ebd2 <__libc_init_array+0x2e>
 800ebc6:	bd70      	pop	{r4, r5, r6, pc}
 800ebc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebcc:	4798      	blx	r3
 800ebce:	3501      	adds	r5, #1
 800ebd0:	e7ee      	b.n	800ebb0 <__libc_init_array+0xc>
 800ebd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ebd6:	4798      	blx	r3
 800ebd8:	3501      	adds	r5, #1
 800ebda:	e7f2      	b.n	800ebc2 <__libc_init_array+0x1e>
 800ebdc:	08012d60 	.word	0x08012d60
 800ebe0:	08012d60 	.word	0x08012d60
 800ebe4:	08012d60 	.word	0x08012d60
 800ebe8:	08012d64 	.word	0x08012d64

0800ebec <memset>:
 800ebec:	4402      	add	r2, r0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d100      	bne.n	800ebf6 <memset+0xa>
 800ebf4:	4770      	bx	lr
 800ebf6:	f803 1b01 	strb.w	r1, [r3], #1
 800ebfa:	e7f9      	b.n	800ebf0 <memset+0x4>

0800ebfc <__cvt>:
 800ebfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebfe:	ed2d 8b02 	vpush	{d8}
 800ec02:	eeb0 8b40 	vmov.f64	d8, d0
 800ec06:	b085      	sub	sp, #20
 800ec08:	4617      	mov	r7, r2
 800ec0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ec0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ec0e:	ee18 2a90 	vmov	r2, s17
 800ec12:	f025 0520 	bic.w	r5, r5, #32
 800ec16:	2a00      	cmp	r2, #0
 800ec18:	bfb6      	itet	lt
 800ec1a:	222d      	movlt	r2, #45	; 0x2d
 800ec1c:	2200      	movge	r2, #0
 800ec1e:	eeb1 8b40 	vneglt.f64	d8, d0
 800ec22:	2d46      	cmp	r5, #70	; 0x46
 800ec24:	460c      	mov	r4, r1
 800ec26:	701a      	strb	r2, [r3, #0]
 800ec28:	d004      	beq.n	800ec34 <__cvt+0x38>
 800ec2a:	2d45      	cmp	r5, #69	; 0x45
 800ec2c:	d100      	bne.n	800ec30 <__cvt+0x34>
 800ec2e:	3401      	adds	r4, #1
 800ec30:	2102      	movs	r1, #2
 800ec32:	e000      	b.n	800ec36 <__cvt+0x3a>
 800ec34:	2103      	movs	r1, #3
 800ec36:	ab03      	add	r3, sp, #12
 800ec38:	9301      	str	r3, [sp, #4]
 800ec3a:	ab02      	add	r3, sp, #8
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	4622      	mov	r2, r4
 800ec40:	4633      	mov	r3, r6
 800ec42:	eeb0 0b48 	vmov.f64	d0, d8
 800ec46:	f001 fd1f 	bl	8010688 <_dtoa_r>
 800ec4a:	2d47      	cmp	r5, #71	; 0x47
 800ec4c:	d101      	bne.n	800ec52 <__cvt+0x56>
 800ec4e:	07fb      	lsls	r3, r7, #31
 800ec50:	d51e      	bpl.n	800ec90 <__cvt+0x94>
 800ec52:	2d46      	cmp	r5, #70	; 0x46
 800ec54:	eb00 0304 	add.w	r3, r0, r4
 800ec58:	d10c      	bne.n	800ec74 <__cvt+0x78>
 800ec5a:	7802      	ldrb	r2, [r0, #0]
 800ec5c:	2a30      	cmp	r2, #48	; 0x30
 800ec5e:	d107      	bne.n	800ec70 <__cvt+0x74>
 800ec60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ec64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec68:	bf1c      	itt	ne
 800ec6a:	f1c4 0401 	rsbne	r4, r4, #1
 800ec6e:	6034      	strne	r4, [r6, #0]
 800ec70:	6832      	ldr	r2, [r6, #0]
 800ec72:	4413      	add	r3, r2
 800ec74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ec78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7c:	d007      	beq.n	800ec8e <__cvt+0x92>
 800ec7e:	2130      	movs	r1, #48	; 0x30
 800ec80:	9a03      	ldr	r2, [sp, #12]
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d204      	bcs.n	800ec90 <__cvt+0x94>
 800ec86:	1c54      	adds	r4, r2, #1
 800ec88:	9403      	str	r4, [sp, #12]
 800ec8a:	7011      	strb	r1, [r2, #0]
 800ec8c:	e7f8      	b.n	800ec80 <__cvt+0x84>
 800ec8e:	9303      	str	r3, [sp, #12]
 800ec90:	9b03      	ldr	r3, [sp, #12]
 800ec92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec94:	1a1b      	subs	r3, r3, r0
 800ec96:	6013      	str	r3, [r2, #0]
 800ec98:	b005      	add	sp, #20
 800ec9a:	ecbd 8b02 	vpop	{d8}
 800ec9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eca0 <__exponent>:
 800eca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eca2:	2900      	cmp	r1, #0
 800eca4:	4604      	mov	r4, r0
 800eca6:	bfba      	itte	lt
 800eca8:	4249      	neglt	r1, r1
 800ecaa:	232d      	movlt	r3, #45	; 0x2d
 800ecac:	232b      	movge	r3, #43	; 0x2b
 800ecae:	2909      	cmp	r1, #9
 800ecb0:	f804 2b02 	strb.w	r2, [r4], #2
 800ecb4:	7043      	strb	r3, [r0, #1]
 800ecb6:	dd20      	ble.n	800ecfa <__exponent+0x5a>
 800ecb8:	f10d 0307 	add.w	r3, sp, #7
 800ecbc:	461f      	mov	r7, r3
 800ecbe:	260a      	movs	r6, #10
 800ecc0:	fb91 f5f6 	sdiv	r5, r1, r6
 800ecc4:	fb06 1115 	mls	r1, r6, r5, r1
 800ecc8:	3130      	adds	r1, #48	; 0x30
 800ecca:	2d09      	cmp	r5, #9
 800eccc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ecd0:	f103 32ff 	add.w	r2, r3, #4294967295
 800ecd4:	4629      	mov	r1, r5
 800ecd6:	dc09      	bgt.n	800ecec <__exponent+0x4c>
 800ecd8:	3130      	adds	r1, #48	; 0x30
 800ecda:	3b02      	subs	r3, #2
 800ecdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ece0:	42bb      	cmp	r3, r7
 800ece2:	4622      	mov	r2, r4
 800ece4:	d304      	bcc.n	800ecf0 <__exponent+0x50>
 800ece6:	1a10      	subs	r0, r2, r0
 800ece8:	b003      	add	sp, #12
 800ecea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecec:	4613      	mov	r3, r2
 800ecee:	e7e7      	b.n	800ecc0 <__exponent+0x20>
 800ecf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecf4:	f804 2b01 	strb.w	r2, [r4], #1
 800ecf8:	e7f2      	b.n	800ece0 <__exponent+0x40>
 800ecfa:	2330      	movs	r3, #48	; 0x30
 800ecfc:	4419      	add	r1, r3
 800ecfe:	7083      	strb	r3, [r0, #2]
 800ed00:	1d02      	adds	r2, r0, #4
 800ed02:	70c1      	strb	r1, [r0, #3]
 800ed04:	e7ef      	b.n	800ece6 <__exponent+0x46>
	...

0800ed08 <_printf_float>:
 800ed08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0c:	b08d      	sub	sp, #52	; 0x34
 800ed0e:	460c      	mov	r4, r1
 800ed10:	4616      	mov	r6, r2
 800ed12:	461f      	mov	r7, r3
 800ed14:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ed18:	4605      	mov	r5, r0
 800ed1a:	f002 fd2d 	bl	8011778 <_localeconv_r>
 800ed1e:	f8d0 b000 	ldr.w	fp, [r0]
 800ed22:	4658      	mov	r0, fp
 800ed24:	f7f1 fa8c 	bl	8000240 <strlen>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ed30:	9005      	str	r0, [sp, #20]
 800ed32:	3307      	adds	r3, #7
 800ed34:	f023 0307 	bic.w	r3, r3, #7
 800ed38:	f103 0108 	add.w	r1, r3, #8
 800ed3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ed40:	6822      	ldr	r2, [r4, #0]
 800ed42:	f8c8 1000 	str.w	r1, [r8]
 800ed46:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ed4a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ed4e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800efd8 <_printf_float+0x2d0>
 800ed52:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ed56:	eeb0 6bc0 	vabs.f64	d6, d0
 800ed5a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ed5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed62:	dd24      	ble.n	800edae <_printf_float+0xa6>
 800ed64:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	d502      	bpl.n	800ed74 <_printf_float+0x6c>
 800ed6e:	232d      	movs	r3, #45	; 0x2d
 800ed70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed74:	499a      	ldr	r1, [pc, #616]	; (800efe0 <_printf_float+0x2d8>)
 800ed76:	4b9b      	ldr	r3, [pc, #620]	; (800efe4 <_printf_float+0x2dc>)
 800ed78:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ed7c:	bf8c      	ite	hi
 800ed7e:	4688      	movhi	r8, r1
 800ed80:	4698      	movls	r8, r3
 800ed82:	f022 0204 	bic.w	r2, r2, #4
 800ed86:	2303      	movs	r3, #3
 800ed88:	6123      	str	r3, [r4, #16]
 800ed8a:	6022      	str	r2, [r4, #0]
 800ed8c:	f04f 0a00 	mov.w	sl, #0
 800ed90:	9700      	str	r7, [sp, #0]
 800ed92:	4633      	mov	r3, r6
 800ed94:	aa0b      	add	r2, sp, #44	; 0x2c
 800ed96:	4621      	mov	r1, r4
 800ed98:	4628      	mov	r0, r5
 800ed9a:	f000 f9e1 	bl	800f160 <_printf_common>
 800ed9e:	3001      	adds	r0, #1
 800eda0:	f040 8089 	bne.w	800eeb6 <_printf_float+0x1ae>
 800eda4:	f04f 30ff 	mov.w	r0, #4294967295
 800eda8:	b00d      	add	sp, #52	; 0x34
 800edaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edae:	eeb4 0b40 	vcmp.f64	d0, d0
 800edb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb6:	d702      	bvc.n	800edbe <_printf_float+0xb6>
 800edb8:	498b      	ldr	r1, [pc, #556]	; (800efe8 <_printf_float+0x2e0>)
 800edba:	4b8c      	ldr	r3, [pc, #560]	; (800efec <_printf_float+0x2e4>)
 800edbc:	e7dc      	b.n	800ed78 <_printf_float+0x70>
 800edbe:	6861      	ldr	r1, [r4, #4]
 800edc0:	1c4b      	adds	r3, r1, #1
 800edc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800edc6:	ab0a      	add	r3, sp, #40	; 0x28
 800edc8:	a809      	add	r0, sp, #36	; 0x24
 800edca:	d13b      	bne.n	800ee44 <_printf_float+0x13c>
 800edcc:	2106      	movs	r1, #6
 800edce:	6061      	str	r1, [r4, #4]
 800edd0:	f04f 0c00 	mov.w	ip, #0
 800edd4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800edd8:	e9cd 0900 	strd	r0, r9, [sp]
 800eddc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ede0:	6022      	str	r2, [r4, #0]
 800ede2:	6861      	ldr	r1, [r4, #4]
 800ede4:	4628      	mov	r0, r5
 800ede6:	f7ff ff09 	bl	800ebfc <__cvt>
 800edea:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800edee:	2b47      	cmp	r3, #71	; 0x47
 800edf0:	4680      	mov	r8, r0
 800edf2:	d109      	bne.n	800ee08 <_printf_float+0x100>
 800edf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf6:	1cd8      	adds	r0, r3, #3
 800edf8:	db02      	blt.n	800ee00 <_printf_float+0xf8>
 800edfa:	6862      	ldr	r2, [r4, #4]
 800edfc:	4293      	cmp	r3, r2
 800edfe:	dd47      	ble.n	800ee90 <_printf_float+0x188>
 800ee00:	f1a9 0902 	sub.w	r9, r9, #2
 800ee04:	fa5f f989 	uxtb.w	r9, r9
 800ee08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ee0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee0e:	d824      	bhi.n	800ee5a <_printf_float+0x152>
 800ee10:	3901      	subs	r1, #1
 800ee12:	464a      	mov	r2, r9
 800ee14:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ee18:	9109      	str	r1, [sp, #36]	; 0x24
 800ee1a:	f7ff ff41 	bl	800eca0 <__exponent>
 800ee1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee20:	1813      	adds	r3, r2, r0
 800ee22:	2a01      	cmp	r2, #1
 800ee24:	4682      	mov	sl, r0
 800ee26:	6123      	str	r3, [r4, #16]
 800ee28:	dc02      	bgt.n	800ee30 <_printf_float+0x128>
 800ee2a:	6822      	ldr	r2, [r4, #0]
 800ee2c:	07d1      	lsls	r1, r2, #31
 800ee2e:	d501      	bpl.n	800ee34 <_printf_float+0x12c>
 800ee30:	3301      	adds	r3, #1
 800ee32:	6123      	str	r3, [r4, #16]
 800ee34:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d0a9      	beq.n	800ed90 <_printf_float+0x88>
 800ee3c:	232d      	movs	r3, #45	; 0x2d
 800ee3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee42:	e7a5      	b.n	800ed90 <_printf_float+0x88>
 800ee44:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800ee48:	f000 8178 	beq.w	800f13c <_printf_float+0x434>
 800ee4c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ee50:	d1be      	bne.n	800edd0 <_printf_float+0xc8>
 800ee52:	2900      	cmp	r1, #0
 800ee54:	d1bc      	bne.n	800edd0 <_printf_float+0xc8>
 800ee56:	2101      	movs	r1, #1
 800ee58:	e7b9      	b.n	800edce <_printf_float+0xc6>
 800ee5a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ee5e:	d119      	bne.n	800ee94 <_printf_float+0x18c>
 800ee60:	2900      	cmp	r1, #0
 800ee62:	6863      	ldr	r3, [r4, #4]
 800ee64:	dd0c      	ble.n	800ee80 <_printf_float+0x178>
 800ee66:	6121      	str	r1, [r4, #16]
 800ee68:	b913      	cbnz	r3, 800ee70 <_printf_float+0x168>
 800ee6a:	6822      	ldr	r2, [r4, #0]
 800ee6c:	07d2      	lsls	r2, r2, #31
 800ee6e:	d502      	bpl.n	800ee76 <_printf_float+0x16e>
 800ee70:	3301      	adds	r3, #1
 800ee72:	440b      	add	r3, r1
 800ee74:	6123      	str	r3, [r4, #16]
 800ee76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee78:	65a3      	str	r3, [r4, #88]	; 0x58
 800ee7a:	f04f 0a00 	mov.w	sl, #0
 800ee7e:	e7d9      	b.n	800ee34 <_printf_float+0x12c>
 800ee80:	b913      	cbnz	r3, 800ee88 <_printf_float+0x180>
 800ee82:	6822      	ldr	r2, [r4, #0]
 800ee84:	07d0      	lsls	r0, r2, #31
 800ee86:	d501      	bpl.n	800ee8c <_printf_float+0x184>
 800ee88:	3302      	adds	r3, #2
 800ee8a:	e7f3      	b.n	800ee74 <_printf_float+0x16c>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e7f1      	b.n	800ee74 <_printf_float+0x16c>
 800ee90:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ee94:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	db05      	blt.n	800eea8 <_printf_float+0x1a0>
 800ee9c:	6822      	ldr	r2, [r4, #0]
 800ee9e:	6123      	str	r3, [r4, #16]
 800eea0:	07d1      	lsls	r1, r2, #31
 800eea2:	d5e8      	bpl.n	800ee76 <_printf_float+0x16e>
 800eea4:	3301      	adds	r3, #1
 800eea6:	e7e5      	b.n	800ee74 <_printf_float+0x16c>
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	bfd4      	ite	le
 800eeac:	f1c3 0302 	rsble	r3, r3, #2
 800eeb0:	2301      	movgt	r3, #1
 800eeb2:	4413      	add	r3, r2
 800eeb4:	e7de      	b.n	800ee74 <_printf_float+0x16c>
 800eeb6:	6823      	ldr	r3, [r4, #0]
 800eeb8:	055a      	lsls	r2, r3, #21
 800eeba:	d407      	bmi.n	800eecc <_printf_float+0x1c4>
 800eebc:	6923      	ldr	r3, [r4, #16]
 800eebe:	4642      	mov	r2, r8
 800eec0:	4631      	mov	r1, r6
 800eec2:	4628      	mov	r0, r5
 800eec4:	47b8      	blx	r7
 800eec6:	3001      	adds	r0, #1
 800eec8:	d12a      	bne.n	800ef20 <_printf_float+0x218>
 800eeca:	e76b      	b.n	800eda4 <_printf_float+0x9c>
 800eecc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800eed0:	f240 80de 	bls.w	800f090 <_printf_float+0x388>
 800eed4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800eed8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee0:	d133      	bne.n	800ef4a <_printf_float+0x242>
 800eee2:	2301      	movs	r3, #1
 800eee4:	4a42      	ldr	r2, [pc, #264]	; (800eff0 <_printf_float+0x2e8>)
 800eee6:	4631      	mov	r1, r6
 800eee8:	4628      	mov	r0, r5
 800eeea:	47b8      	blx	r7
 800eeec:	3001      	adds	r0, #1
 800eeee:	f43f af59 	beq.w	800eda4 <_printf_float+0x9c>
 800eef2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eef6:	429a      	cmp	r2, r3
 800eef8:	db02      	blt.n	800ef00 <_printf_float+0x1f8>
 800eefa:	6823      	ldr	r3, [r4, #0]
 800eefc:	07d8      	lsls	r0, r3, #31
 800eefe:	d50f      	bpl.n	800ef20 <_printf_float+0x218>
 800ef00:	9b05      	ldr	r3, [sp, #20]
 800ef02:	465a      	mov	r2, fp
 800ef04:	4631      	mov	r1, r6
 800ef06:	4628      	mov	r0, r5
 800ef08:	47b8      	blx	r7
 800ef0a:	3001      	adds	r0, #1
 800ef0c:	f43f af4a 	beq.w	800eda4 <_printf_float+0x9c>
 800ef10:	f04f 0800 	mov.w	r8, #0
 800ef14:	f104 091a 	add.w	r9, r4, #26
 800ef18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef1a:	3b01      	subs	r3, #1
 800ef1c:	4543      	cmp	r3, r8
 800ef1e:	dc09      	bgt.n	800ef34 <_printf_float+0x22c>
 800ef20:	6823      	ldr	r3, [r4, #0]
 800ef22:	079b      	lsls	r3, r3, #30
 800ef24:	f100 8105 	bmi.w	800f132 <_printf_float+0x42a>
 800ef28:	68e0      	ldr	r0, [r4, #12]
 800ef2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef2c:	4298      	cmp	r0, r3
 800ef2e:	bfb8      	it	lt
 800ef30:	4618      	movlt	r0, r3
 800ef32:	e739      	b.n	800eda8 <_printf_float+0xa0>
 800ef34:	2301      	movs	r3, #1
 800ef36:	464a      	mov	r2, r9
 800ef38:	4631      	mov	r1, r6
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	47b8      	blx	r7
 800ef3e:	3001      	adds	r0, #1
 800ef40:	f43f af30 	beq.w	800eda4 <_printf_float+0x9c>
 800ef44:	f108 0801 	add.w	r8, r8, #1
 800ef48:	e7e6      	b.n	800ef18 <_printf_float+0x210>
 800ef4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	dc2b      	bgt.n	800efa8 <_printf_float+0x2a0>
 800ef50:	2301      	movs	r3, #1
 800ef52:	4a27      	ldr	r2, [pc, #156]	; (800eff0 <_printf_float+0x2e8>)
 800ef54:	4631      	mov	r1, r6
 800ef56:	4628      	mov	r0, r5
 800ef58:	47b8      	blx	r7
 800ef5a:	3001      	adds	r0, #1
 800ef5c:	f43f af22 	beq.w	800eda4 <_printf_float+0x9c>
 800ef60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef62:	b923      	cbnz	r3, 800ef6e <_printf_float+0x266>
 800ef64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef66:	b913      	cbnz	r3, 800ef6e <_printf_float+0x266>
 800ef68:	6823      	ldr	r3, [r4, #0]
 800ef6a:	07d9      	lsls	r1, r3, #31
 800ef6c:	d5d8      	bpl.n	800ef20 <_printf_float+0x218>
 800ef6e:	9b05      	ldr	r3, [sp, #20]
 800ef70:	465a      	mov	r2, fp
 800ef72:	4631      	mov	r1, r6
 800ef74:	4628      	mov	r0, r5
 800ef76:	47b8      	blx	r7
 800ef78:	3001      	adds	r0, #1
 800ef7a:	f43f af13 	beq.w	800eda4 <_printf_float+0x9c>
 800ef7e:	f04f 0900 	mov.w	r9, #0
 800ef82:	f104 0a1a 	add.w	sl, r4, #26
 800ef86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef88:	425b      	negs	r3, r3
 800ef8a:	454b      	cmp	r3, r9
 800ef8c:	dc01      	bgt.n	800ef92 <_printf_float+0x28a>
 800ef8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef90:	e795      	b.n	800eebe <_printf_float+0x1b6>
 800ef92:	2301      	movs	r3, #1
 800ef94:	4652      	mov	r2, sl
 800ef96:	4631      	mov	r1, r6
 800ef98:	4628      	mov	r0, r5
 800ef9a:	47b8      	blx	r7
 800ef9c:	3001      	adds	r0, #1
 800ef9e:	f43f af01 	beq.w	800eda4 <_printf_float+0x9c>
 800efa2:	f109 0901 	add.w	r9, r9, #1
 800efa6:	e7ee      	b.n	800ef86 <_printf_float+0x27e>
 800efa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800efac:	429a      	cmp	r2, r3
 800efae:	bfa8      	it	ge
 800efb0:	461a      	movge	r2, r3
 800efb2:	2a00      	cmp	r2, #0
 800efb4:	4691      	mov	r9, r2
 800efb6:	dd07      	ble.n	800efc8 <_printf_float+0x2c0>
 800efb8:	4613      	mov	r3, r2
 800efba:	4631      	mov	r1, r6
 800efbc:	4642      	mov	r2, r8
 800efbe:	4628      	mov	r0, r5
 800efc0:	47b8      	blx	r7
 800efc2:	3001      	adds	r0, #1
 800efc4:	f43f aeee 	beq.w	800eda4 <_printf_float+0x9c>
 800efc8:	f104 031a 	add.w	r3, r4, #26
 800efcc:	f04f 0a00 	mov.w	sl, #0
 800efd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800efd4:	9307      	str	r3, [sp, #28]
 800efd6:	e017      	b.n	800f008 <_printf_float+0x300>
 800efd8:	ffffffff 	.word	0xffffffff
 800efdc:	7fefffff 	.word	0x7fefffff
 800efe0:	08012aa4 	.word	0x08012aa4
 800efe4:	08012aa0 	.word	0x08012aa0
 800efe8:	08012aac 	.word	0x08012aac
 800efec:	08012aa8 	.word	0x08012aa8
 800eff0:	08012ab0 	.word	0x08012ab0
 800eff4:	2301      	movs	r3, #1
 800eff6:	9a07      	ldr	r2, [sp, #28]
 800eff8:	4631      	mov	r1, r6
 800effa:	4628      	mov	r0, r5
 800effc:	47b8      	blx	r7
 800effe:	3001      	adds	r0, #1
 800f000:	f43f aed0 	beq.w	800eda4 <_printf_float+0x9c>
 800f004:	f10a 0a01 	add.w	sl, sl, #1
 800f008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f00a:	9306      	str	r3, [sp, #24]
 800f00c:	eba3 0309 	sub.w	r3, r3, r9
 800f010:	4553      	cmp	r3, sl
 800f012:	dcef      	bgt.n	800eff4 <_printf_float+0x2ec>
 800f014:	9b06      	ldr	r3, [sp, #24]
 800f016:	4498      	add	r8, r3
 800f018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f01c:	429a      	cmp	r2, r3
 800f01e:	db15      	blt.n	800f04c <_printf_float+0x344>
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	07da      	lsls	r2, r3, #31
 800f024:	d412      	bmi.n	800f04c <_printf_float+0x344>
 800f026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f028:	9a06      	ldr	r2, [sp, #24]
 800f02a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f02c:	1a9a      	subs	r2, r3, r2
 800f02e:	eba3 0a01 	sub.w	sl, r3, r1
 800f032:	4592      	cmp	sl, r2
 800f034:	bfa8      	it	ge
 800f036:	4692      	movge	sl, r2
 800f038:	f1ba 0f00 	cmp.w	sl, #0
 800f03c:	dc0e      	bgt.n	800f05c <_printf_float+0x354>
 800f03e:	f04f 0800 	mov.w	r8, #0
 800f042:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f046:	f104 091a 	add.w	r9, r4, #26
 800f04a:	e019      	b.n	800f080 <_printf_float+0x378>
 800f04c:	9b05      	ldr	r3, [sp, #20]
 800f04e:	465a      	mov	r2, fp
 800f050:	4631      	mov	r1, r6
 800f052:	4628      	mov	r0, r5
 800f054:	47b8      	blx	r7
 800f056:	3001      	adds	r0, #1
 800f058:	d1e5      	bne.n	800f026 <_printf_float+0x31e>
 800f05a:	e6a3      	b.n	800eda4 <_printf_float+0x9c>
 800f05c:	4653      	mov	r3, sl
 800f05e:	4642      	mov	r2, r8
 800f060:	4631      	mov	r1, r6
 800f062:	4628      	mov	r0, r5
 800f064:	47b8      	blx	r7
 800f066:	3001      	adds	r0, #1
 800f068:	d1e9      	bne.n	800f03e <_printf_float+0x336>
 800f06a:	e69b      	b.n	800eda4 <_printf_float+0x9c>
 800f06c:	2301      	movs	r3, #1
 800f06e:	464a      	mov	r2, r9
 800f070:	4631      	mov	r1, r6
 800f072:	4628      	mov	r0, r5
 800f074:	47b8      	blx	r7
 800f076:	3001      	adds	r0, #1
 800f078:	f43f ae94 	beq.w	800eda4 <_printf_float+0x9c>
 800f07c:	f108 0801 	add.w	r8, r8, #1
 800f080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f084:	1a9b      	subs	r3, r3, r2
 800f086:	eba3 030a 	sub.w	r3, r3, sl
 800f08a:	4543      	cmp	r3, r8
 800f08c:	dcee      	bgt.n	800f06c <_printf_float+0x364>
 800f08e:	e747      	b.n	800ef20 <_printf_float+0x218>
 800f090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f092:	2a01      	cmp	r2, #1
 800f094:	dc01      	bgt.n	800f09a <_printf_float+0x392>
 800f096:	07db      	lsls	r3, r3, #31
 800f098:	d539      	bpl.n	800f10e <_printf_float+0x406>
 800f09a:	2301      	movs	r3, #1
 800f09c:	4642      	mov	r2, r8
 800f09e:	4631      	mov	r1, r6
 800f0a0:	4628      	mov	r0, r5
 800f0a2:	47b8      	blx	r7
 800f0a4:	3001      	adds	r0, #1
 800f0a6:	f43f ae7d 	beq.w	800eda4 <_printf_float+0x9c>
 800f0aa:	9b05      	ldr	r3, [sp, #20]
 800f0ac:	465a      	mov	r2, fp
 800f0ae:	4631      	mov	r1, r6
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	47b8      	blx	r7
 800f0b4:	3001      	adds	r0, #1
 800f0b6:	f108 0801 	add.w	r8, r8, #1
 800f0ba:	f43f ae73 	beq.w	800eda4 <_printf_float+0x9c>
 800f0be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f0c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0cc:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0d0:	d018      	beq.n	800f104 <_printf_float+0x3fc>
 800f0d2:	4642      	mov	r2, r8
 800f0d4:	4631      	mov	r1, r6
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	47b8      	blx	r7
 800f0da:	3001      	adds	r0, #1
 800f0dc:	d10e      	bne.n	800f0fc <_printf_float+0x3f4>
 800f0de:	e661      	b.n	800eda4 <_printf_float+0x9c>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	464a      	mov	r2, r9
 800f0e4:	4631      	mov	r1, r6
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	47b8      	blx	r7
 800f0ea:	3001      	adds	r0, #1
 800f0ec:	f43f ae5a 	beq.w	800eda4 <_printf_float+0x9c>
 800f0f0:	f108 0801 	add.w	r8, r8, #1
 800f0f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0f6:	3b01      	subs	r3, #1
 800f0f8:	4543      	cmp	r3, r8
 800f0fa:	dcf1      	bgt.n	800f0e0 <_printf_float+0x3d8>
 800f0fc:	4653      	mov	r3, sl
 800f0fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f102:	e6dd      	b.n	800eec0 <_printf_float+0x1b8>
 800f104:	f04f 0800 	mov.w	r8, #0
 800f108:	f104 091a 	add.w	r9, r4, #26
 800f10c:	e7f2      	b.n	800f0f4 <_printf_float+0x3ec>
 800f10e:	2301      	movs	r3, #1
 800f110:	e7df      	b.n	800f0d2 <_printf_float+0x3ca>
 800f112:	2301      	movs	r3, #1
 800f114:	464a      	mov	r2, r9
 800f116:	4631      	mov	r1, r6
 800f118:	4628      	mov	r0, r5
 800f11a:	47b8      	blx	r7
 800f11c:	3001      	adds	r0, #1
 800f11e:	f43f ae41 	beq.w	800eda4 <_printf_float+0x9c>
 800f122:	f108 0801 	add.w	r8, r8, #1
 800f126:	68e3      	ldr	r3, [r4, #12]
 800f128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f12a:	1a9b      	subs	r3, r3, r2
 800f12c:	4543      	cmp	r3, r8
 800f12e:	dcf0      	bgt.n	800f112 <_printf_float+0x40a>
 800f130:	e6fa      	b.n	800ef28 <_printf_float+0x220>
 800f132:	f04f 0800 	mov.w	r8, #0
 800f136:	f104 0919 	add.w	r9, r4, #25
 800f13a:	e7f4      	b.n	800f126 <_printf_float+0x41e>
 800f13c:	2900      	cmp	r1, #0
 800f13e:	f43f ae8a 	beq.w	800ee56 <_printf_float+0x14e>
 800f142:	f04f 0c00 	mov.w	ip, #0
 800f146:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800f14a:	e9cd 0900 	strd	r0, r9, [sp]
 800f14e:	6022      	str	r2, [r4, #0]
 800f150:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f154:	4628      	mov	r0, r5
 800f156:	f7ff fd51 	bl	800ebfc <__cvt>
 800f15a:	4680      	mov	r8, r0
 800f15c:	e64a      	b.n	800edf4 <_printf_float+0xec>
 800f15e:	bf00      	nop

0800f160 <_printf_common>:
 800f160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f164:	4691      	mov	r9, r2
 800f166:	461f      	mov	r7, r3
 800f168:	688a      	ldr	r2, [r1, #8]
 800f16a:	690b      	ldr	r3, [r1, #16]
 800f16c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f170:	4293      	cmp	r3, r2
 800f172:	bfb8      	it	lt
 800f174:	4613      	movlt	r3, r2
 800f176:	f8c9 3000 	str.w	r3, [r9]
 800f17a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f17e:	4606      	mov	r6, r0
 800f180:	460c      	mov	r4, r1
 800f182:	b112      	cbz	r2, 800f18a <_printf_common+0x2a>
 800f184:	3301      	adds	r3, #1
 800f186:	f8c9 3000 	str.w	r3, [r9]
 800f18a:	6823      	ldr	r3, [r4, #0]
 800f18c:	0699      	lsls	r1, r3, #26
 800f18e:	bf42      	ittt	mi
 800f190:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f194:	3302      	addmi	r3, #2
 800f196:	f8c9 3000 	strmi.w	r3, [r9]
 800f19a:	6825      	ldr	r5, [r4, #0]
 800f19c:	f015 0506 	ands.w	r5, r5, #6
 800f1a0:	d107      	bne.n	800f1b2 <_printf_common+0x52>
 800f1a2:	f104 0a19 	add.w	sl, r4, #25
 800f1a6:	68e3      	ldr	r3, [r4, #12]
 800f1a8:	f8d9 2000 	ldr.w	r2, [r9]
 800f1ac:	1a9b      	subs	r3, r3, r2
 800f1ae:	42ab      	cmp	r3, r5
 800f1b0:	dc28      	bgt.n	800f204 <_printf_common+0xa4>
 800f1b2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f1b6:	6822      	ldr	r2, [r4, #0]
 800f1b8:	3300      	adds	r3, #0
 800f1ba:	bf18      	it	ne
 800f1bc:	2301      	movne	r3, #1
 800f1be:	0692      	lsls	r2, r2, #26
 800f1c0:	d42d      	bmi.n	800f21e <_printf_common+0xbe>
 800f1c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1c6:	4639      	mov	r1, r7
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	47c0      	blx	r8
 800f1cc:	3001      	adds	r0, #1
 800f1ce:	d020      	beq.n	800f212 <_printf_common+0xb2>
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	68e5      	ldr	r5, [r4, #12]
 800f1d4:	f8d9 2000 	ldr.w	r2, [r9]
 800f1d8:	f003 0306 	and.w	r3, r3, #6
 800f1dc:	2b04      	cmp	r3, #4
 800f1de:	bf08      	it	eq
 800f1e0:	1aad      	subeq	r5, r5, r2
 800f1e2:	68a3      	ldr	r3, [r4, #8]
 800f1e4:	6922      	ldr	r2, [r4, #16]
 800f1e6:	bf0c      	ite	eq
 800f1e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f1ec:	2500      	movne	r5, #0
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	bfc4      	itt	gt
 800f1f2:	1a9b      	subgt	r3, r3, r2
 800f1f4:	18ed      	addgt	r5, r5, r3
 800f1f6:	f04f 0900 	mov.w	r9, #0
 800f1fa:	341a      	adds	r4, #26
 800f1fc:	454d      	cmp	r5, r9
 800f1fe:	d11a      	bne.n	800f236 <_printf_common+0xd6>
 800f200:	2000      	movs	r0, #0
 800f202:	e008      	b.n	800f216 <_printf_common+0xb6>
 800f204:	2301      	movs	r3, #1
 800f206:	4652      	mov	r2, sl
 800f208:	4639      	mov	r1, r7
 800f20a:	4630      	mov	r0, r6
 800f20c:	47c0      	blx	r8
 800f20e:	3001      	adds	r0, #1
 800f210:	d103      	bne.n	800f21a <_printf_common+0xba>
 800f212:	f04f 30ff 	mov.w	r0, #4294967295
 800f216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f21a:	3501      	adds	r5, #1
 800f21c:	e7c3      	b.n	800f1a6 <_printf_common+0x46>
 800f21e:	18e1      	adds	r1, r4, r3
 800f220:	1c5a      	adds	r2, r3, #1
 800f222:	2030      	movs	r0, #48	; 0x30
 800f224:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f228:	4422      	add	r2, r4
 800f22a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f22e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f232:	3302      	adds	r3, #2
 800f234:	e7c5      	b.n	800f1c2 <_printf_common+0x62>
 800f236:	2301      	movs	r3, #1
 800f238:	4622      	mov	r2, r4
 800f23a:	4639      	mov	r1, r7
 800f23c:	4630      	mov	r0, r6
 800f23e:	47c0      	blx	r8
 800f240:	3001      	adds	r0, #1
 800f242:	d0e6      	beq.n	800f212 <_printf_common+0xb2>
 800f244:	f109 0901 	add.w	r9, r9, #1
 800f248:	e7d8      	b.n	800f1fc <_printf_common+0x9c>
	...

0800f24c <_printf_i>:
 800f24c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f250:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f254:	460c      	mov	r4, r1
 800f256:	7e09      	ldrb	r1, [r1, #24]
 800f258:	b085      	sub	sp, #20
 800f25a:	296e      	cmp	r1, #110	; 0x6e
 800f25c:	4617      	mov	r7, r2
 800f25e:	4606      	mov	r6, r0
 800f260:	4698      	mov	r8, r3
 800f262:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f264:	f000 80b3 	beq.w	800f3ce <_printf_i+0x182>
 800f268:	d822      	bhi.n	800f2b0 <_printf_i+0x64>
 800f26a:	2963      	cmp	r1, #99	; 0x63
 800f26c:	d036      	beq.n	800f2dc <_printf_i+0x90>
 800f26e:	d80a      	bhi.n	800f286 <_printf_i+0x3a>
 800f270:	2900      	cmp	r1, #0
 800f272:	f000 80b9 	beq.w	800f3e8 <_printf_i+0x19c>
 800f276:	2958      	cmp	r1, #88	; 0x58
 800f278:	f000 8083 	beq.w	800f382 <_printf_i+0x136>
 800f27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f280:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f284:	e032      	b.n	800f2ec <_printf_i+0xa0>
 800f286:	2964      	cmp	r1, #100	; 0x64
 800f288:	d001      	beq.n	800f28e <_printf_i+0x42>
 800f28a:	2969      	cmp	r1, #105	; 0x69
 800f28c:	d1f6      	bne.n	800f27c <_printf_i+0x30>
 800f28e:	6820      	ldr	r0, [r4, #0]
 800f290:	6813      	ldr	r3, [r2, #0]
 800f292:	0605      	lsls	r5, r0, #24
 800f294:	f103 0104 	add.w	r1, r3, #4
 800f298:	d52a      	bpl.n	800f2f0 <_printf_i+0xa4>
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	6011      	str	r1, [r2, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	da03      	bge.n	800f2aa <_printf_i+0x5e>
 800f2a2:	222d      	movs	r2, #45	; 0x2d
 800f2a4:	425b      	negs	r3, r3
 800f2a6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f2aa:	486f      	ldr	r0, [pc, #444]	; (800f468 <_printf_i+0x21c>)
 800f2ac:	220a      	movs	r2, #10
 800f2ae:	e039      	b.n	800f324 <_printf_i+0xd8>
 800f2b0:	2973      	cmp	r1, #115	; 0x73
 800f2b2:	f000 809d 	beq.w	800f3f0 <_printf_i+0x1a4>
 800f2b6:	d808      	bhi.n	800f2ca <_printf_i+0x7e>
 800f2b8:	296f      	cmp	r1, #111	; 0x6f
 800f2ba:	d020      	beq.n	800f2fe <_printf_i+0xb2>
 800f2bc:	2970      	cmp	r1, #112	; 0x70
 800f2be:	d1dd      	bne.n	800f27c <_printf_i+0x30>
 800f2c0:	6823      	ldr	r3, [r4, #0]
 800f2c2:	f043 0320 	orr.w	r3, r3, #32
 800f2c6:	6023      	str	r3, [r4, #0]
 800f2c8:	e003      	b.n	800f2d2 <_printf_i+0x86>
 800f2ca:	2975      	cmp	r1, #117	; 0x75
 800f2cc:	d017      	beq.n	800f2fe <_printf_i+0xb2>
 800f2ce:	2978      	cmp	r1, #120	; 0x78
 800f2d0:	d1d4      	bne.n	800f27c <_printf_i+0x30>
 800f2d2:	2378      	movs	r3, #120	; 0x78
 800f2d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f2d8:	4864      	ldr	r0, [pc, #400]	; (800f46c <_printf_i+0x220>)
 800f2da:	e055      	b.n	800f388 <_printf_i+0x13c>
 800f2dc:	6813      	ldr	r3, [r2, #0]
 800f2de:	1d19      	adds	r1, r3, #4
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6011      	str	r1, [r2, #0]
 800f2e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e08c      	b.n	800f40a <_printf_i+0x1be>
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	6011      	str	r1, [r2, #0]
 800f2f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f2f8:	bf18      	it	ne
 800f2fa:	b21b      	sxthne	r3, r3
 800f2fc:	e7cf      	b.n	800f29e <_printf_i+0x52>
 800f2fe:	6813      	ldr	r3, [r2, #0]
 800f300:	6825      	ldr	r5, [r4, #0]
 800f302:	1d18      	adds	r0, r3, #4
 800f304:	6010      	str	r0, [r2, #0]
 800f306:	0628      	lsls	r0, r5, #24
 800f308:	d501      	bpl.n	800f30e <_printf_i+0xc2>
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	e002      	b.n	800f314 <_printf_i+0xc8>
 800f30e:	0668      	lsls	r0, r5, #25
 800f310:	d5fb      	bpl.n	800f30a <_printf_i+0xbe>
 800f312:	881b      	ldrh	r3, [r3, #0]
 800f314:	4854      	ldr	r0, [pc, #336]	; (800f468 <_printf_i+0x21c>)
 800f316:	296f      	cmp	r1, #111	; 0x6f
 800f318:	bf14      	ite	ne
 800f31a:	220a      	movne	r2, #10
 800f31c:	2208      	moveq	r2, #8
 800f31e:	2100      	movs	r1, #0
 800f320:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f324:	6865      	ldr	r5, [r4, #4]
 800f326:	60a5      	str	r5, [r4, #8]
 800f328:	2d00      	cmp	r5, #0
 800f32a:	f2c0 8095 	blt.w	800f458 <_printf_i+0x20c>
 800f32e:	6821      	ldr	r1, [r4, #0]
 800f330:	f021 0104 	bic.w	r1, r1, #4
 800f334:	6021      	str	r1, [r4, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d13d      	bne.n	800f3b6 <_printf_i+0x16a>
 800f33a:	2d00      	cmp	r5, #0
 800f33c:	f040 808e 	bne.w	800f45c <_printf_i+0x210>
 800f340:	4665      	mov	r5, ip
 800f342:	2a08      	cmp	r2, #8
 800f344:	d10b      	bne.n	800f35e <_printf_i+0x112>
 800f346:	6823      	ldr	r3, [r4, #0]
 800f348:	07db      	lsls	r3, r3, #31
 800f34a:	d508      	bpl.n	800f35e <_printf_i+0x112>
 800f34c:	6923      	ldr	r3, [r4, #16]
 800f34e:	6862      	ldr	r2, [r4, #4]
 800f350:	429a      	cmp	r2, r3
 800f352:	bfde      	ittt	le
 800f354:	2330      	movle	r3, #48	; 0x30
 800f356:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f35a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f35e:	ebac 0305 	sub.w	r3, ip, r5
 800f362:	6123      	str	r3, [r4, #16]
 800f364:	f8cd 8000 	str.w	r8, [sp]
 800f368:	463b      	mov	r3, r7
 800f36a:	aa03      	add	r2, sp, #12
 800f36c:	4621      	mov	r1, r4
 800f36e:	4630      	mov	r0, r6
 800f370:	f7ff fef6 	bl	800f160 <_printf_common>
 800f374:	3001      	adds	r0, #1
 800f376:	d14d      	bne.n	800f414 <_printf_i+0x1c8>
 800f378:	f04f 30ff 	mov.w	r0, #4294967295
 800f37c:	b005      	add	sp, #20
 800f37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f382:	4839      	ldr	r0, [pc, #228]	; (800f468 <_printf_i+0x21c>)
 800f384:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f388:	6813      	ldr	r3, [r2, #0]
 800f38a:	6821      	ldr	r1, [r4, #0]
 800f38c:	1d1d      	adds	r5, r3, #4
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	6015      	str	r5, [r2, #0]
 800f392:	060a      	lsls	r2, r1, #24
 800f394:	d50b      	bpl.n	800f3ae <_printf_i+0x162>
 800f396:	07ca      	lsls	r2, r1, #31
 800f398:	bf44      	itt	mi
 800f39a:	f041 0120 	orrmi.w	r1, r1, #32
 800f39e:	6021      	strmi	r1, [r4, #0]
 800f3a0:	b91b      	cbnz	r3, 800f3aa <_printf_i+0x15e>
 800f3a2:	6822      	ldr	r2, [r4, #0]
 800f3a4:	f022 0220 	bic.w	r2, r2, #32
 800f3a8:	6022      	str	r2, [r4, #0]
 800f3aa:	2210      	movs	r2, #16
 800f3ac:	e7b7      	b.n	800f31e <_printf_i+0xd2>
 800f3ae:	064d      	lsls	r5, r1, #25
 800f3b0:	bf48      	it	mi
 800f3b2:	b29b      	uxthmi	r3, r3
 800f3b4:	e7ef      	b.n	800f396 <_printf_i+0x14a>
 800f3b6:	4665      	mov	r5, ip
 800f3b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3bc:	fb02 3311 	mls	r3, r2, r1, r3
 800f3c0:	5cc3      	ldrb	r3, [r0, r3]
 800f3c2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f3c6:	460b      	mov	r3, r1
 800f3c8:	2900      	cmp	r1, #0
 800f3ca:	d1f5      	bne.n	800f3b8 <_printf_i+0x16c>
 800f3cc:	e7b9      	b.n	800f342 <_printf_i+0xf6>
 800f3ce:	6813      	ldr	r3, [r2, #0]
 800f3d0:	6825      	ldr	r5, [r4, #0]
 800f3d2:	6961      	ldr	r1, [r4, #20]
 800f3d4:	1d18      	adds	r0, r3, #4
 800f3d6:	6010      	str	r0, [r2, #0]
 800f3d8:	0628      	lsls	r0, r5, #24
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	d501      	bpl.n	800f3e2 <_printf_i+0x196>
 800f3de:	6019      	str	r1, [r3, #0]
 800f3e0:	e002      	b.n	800f3e8 <_printf_i+0x19c>
 800f3e2:	066a      	lsls	r2, r5, #25
 800f3e4:	d5fb      	bpl.n	800f3de <_printf_i+0x192>
 800f3e6:	8019      	strh	r1, [r3, #0]
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	6123      	str	r3, [r4, #16]
 800f3ec:	4665      	mov	r5, ip
 800f3ee:	e7b9      	b.n	800f364 <_printf_i+0x118>
 800f3f0:	6813      	ldr	r3, [r2, #0]
 800f3f2:	1d19      	adds	r1, r3, #4
 800f3f4:	6011      	str	r1, [r2, #0]
 800f3f6:	681d      	ldr	r5, [r3, #0]
 800f3f8:	6862      	ldr	r2, [r4, #4]
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	f7f0 ff27 	bl	8000250 <memchr>
 800f402:	b108      	cbz	r0, 800f408 <_printf_i+0x1bc>
 800f404:	1b40      	subs	r0, r0, r5
 800f406:	6060      	str	r0, [r4, #4]
 800f408:	6863      	ldr	r3, [r4, #4]
 800f40a:	6123      	str	r3, [r4, #16]
 800f40c:	2300      	movs	r3, #0
 800f40e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f412:	e7a7      	b.n	800f364 <_printf_i+0x118>
 800f414:	6923      	ldr	r3, [r4, #16]
 800f416:	462a      	mov	r2, r5
 800f418:	4639      	mov	r1, r7
 800f41a:	4630      	mov	r0, r6
 800f41c:	47c0      	blx	r8
 800f41e:	3001      	adds	r0, #1
 800f420:	d0aa      	beq.n	800f378 <_printf_i+0x12c>
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	079b      	lsls	r3, r3, #30
 800f426:	d413      	bmi.n	800f450 <_printf_i+0x204>
 800f428:	68e0      	ldr	r0, [r4, #12]
 800f42a:	9b03      	ldr	r3, [sp, #12]
 800f42c:	4298      	cmp	r0, r3
 800f42e:	bfb8      	it	lt
 800f430:	4618      	movlt	r0, r3
 800f432:	e7a3      	b.n	800f37c <_printf_i+0x130>
 800f434:	2301      	movs	r3, #1
 800f436:	464a      	mov	r2, r9
 800f438:	4639      	mov	r1, r7
 800f43a:	4630      	mov	r0, r6
 800f43c:	47c0      	blx	r8
 800f43e:	3001      	adds	r0, #1
 800f440:	d09a      	beq.n	800f378 <_printf_i+0x12c>
 800f442:	3501      	adds	r5, #1
 800f444:	68e3      	ldr	r3, [r4, #12]
 800f446:	9a03      	ldr	r2, [sp, #12]
 800f448:	1a9b      	subs	r3, r3, r2
 800f44a:	42ab      	cmp	r3, r5
 800f44c:	dcf2      	bgt.n	800f434 <_printf_i+0x1e8>
 800f44e:	e7eb      	b.n	800f428 <_printf_i+0x1dc>
 800f450:	2500      	movs	r5, #0
 800f452:	f104 0919 	add.w	r9, r4, #25
 800f456:	e7f5      	b.n	800f444 <_printf_i+0x1f8>
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1ac      	bne.n	800f3b6 <_printf_i+0x16a>
 800f45c:	7803      	ldrb	r3, [r0, #0]
 800f45e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f462:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f466:	e76c      	b.n	800f342 <_printf_i+0xf6>
 800f468:	08012ab2 	.word	0x08012ab2
 800f46c:	08012ac3 	.word	0x08012ac3

0800f470 <_scanf_float>:
 800f470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f474:	469a      	mov	sl, r3
 800f476:	688b      	ldr	r3, [r1, #8]
 800f478:	4616      	mov	r6, r2
 800f47a:	1e5a      	subs	r2, r3, #1
 800f47c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f480:	b087      	sub	sp, #28
 800f482:	bf83      	ittte	hi
 800f484:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800f488:	189b      	addhi	r3, r3, r2
 800f48a:	9301      	strhi	r3, [sp, #4]
 800f48c:	2300      	movls	r3, #0
 800f48e:	bf86      	itte	hi
 800f490:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f494:	608b      	strhi	r3, [r1, #8]
 800f496:	9301      	strls	r3, [sp, #4]
 800f498:	680b      	ldr	r3, [r1, #0]
 800f49a:	4688      	mov	r8, r1
 800f49c:	f04f 0b00 	mov.w	fp, #0
 800f4a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f4a4:	f848 3b1c 	str.w	r3, [r8], #28
 800f4a8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800f4ac:	4607      	mov	r7, r0
 800f4ae:	460c      	mov	r4, r1
 800f4b0:	4645      	mov	r5, r8
 800f4b2:	465a      	mov	r2, fp
 800f4b4:	46d9      	mov	r9, fp
 800f4b6:	f8cd b008 	str.w	fp, [sp, #8]
 800f4ba:	68a1      	ldr	r1, [r4, #8]
 800f4bc:	b181      	cbz	r1, 800f4e0 <_scanf_float+0x70>
 800f4be:	6833      	ldr	r3, [r6, #0]
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	2b49      	cmp	r3, #73	; 0x49
 800f4c4:	d071      	beq.n	800f5aa <_scanf_float+0x13a>
 800f4c6:	d84d      	bhi.n	800f564 <_scanf_float+0xf4>
 800f4c8:	2b39      	cmp	r3, #57	; 0x39
 800f4ca:	d840      	bhi.n	800f54e <_scanf_float+0xde>
 800f4cc:	2b31      	cmp	r3, #49	; 0x31
 800f4ce:	f080 8088 	bcs.w	800f5e2 <_scanf_float+0x172>
 800f4d2:	2b2d      	cmp	r3, #45	; 0x2d
 800f4d4:	f000 8090 	beq.w	800f5f8 <_scanf_float+0x188>
 800f4d8:	d815      	bhi.n	800f506 <_scanf_float+0x96>
 800f4da:	2b2b      	cmp	r3, #43	; 0x2b
 800f4dc:	f000 808c 	beq.w	800f5f8 <_scanf_float+0x188>
 800f4e0:	f1b9 0f00 	cmp.w	r9, #0
 800f4e4:	d003      	beq.n	800f4ee <_scanf_float+0x7e>
 800f4e6:	6823      	ldr	r3, [r4, #0]
 800f4e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	3a01      	subs	r2, #1
 800f4f0:	2a01      	cmp	r2, #1
 800f4f2:	f200 80ea 	bhi.w	800f6ca <_scanf_float+0x25a>
 800f4f6:	4545      	cmp	r5, r8
 800f4f8:	f200 80dc 	bhi.w	800f6b4 <_scanf_float+0x244>
 800f4fc:	2601      	movs	r6, #1
 800f4fe:	4630      	mov	r0, r6
 800f500:	b007      	add	sp, #28
 800f502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f506:	2b2e      	cmp	r3, #46	; 0x2e
 800f508:	f000 809f 	beq.w	800f64a <_scanf_float+0x1da>
 800f50c:	2b30      	cmp	r3, #48	; 0x30
 800f50e:	d1e7      	bne.n	800f4e0 <_scanf_float+0x70>
 800f510:	6820      	ldr	r0, [r4, #0]
 800f512:	f410 7f80 	tst.w	r0, #256	; 0x100
 800f516:	d064      	beq.n	800f5e2 <_scanf_float+0x172>
 800f518:	9b01      	ldr	r3, [sp, #4]
 800f51a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800f51e:	6020      	str	r0, [r4, #0]
 800f520:	f109 0901 	add.w	r9, r9, #1
 800f524:	b11b      	cbz	r3, 800f52e <_scanf_float+0xbe>
 800f526:	3b01      	subs	r3, #1
 800f528:	3101      	adds	r1, #1
 800f52a:	9301      	str	r3, [sp, #4]
 800f52c:	60a1      	str	r1, [r4, #8]
 800f52e:	68a3      	ldr	r3, [r4, #8]
 800f530:	3b01      	subs	r3, #1
 800f532:	60a3      	str	r3, [r4, #8]
 800f534:	6923      	ldr	r3, [r4, #16]
 800f536:	3301      	adds	r3, #1
 800f538:	6123      	str	r3, [r4, #16]
 800f53a:	6873      	ldr	r3, [r6, #4]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	2b00      	cmp	r3, #0
 800f540:	6073      	str	r3, [r6, #4]
 800f542:	f340 80ac 	ble.w	800f69e <_scanf_float+0x22e>
 800f546:	6833      	ldr	r3, [r6, #0]
 800f548:	3301      	adds	r3, #1
 800f54a:	6033      	str	r3, [r6, #0]
 800f54c:	e7b5      	b.n	800f4ba <_scanf_float+0x4a>
 800f54e:	2b45      	cmp	r3, #69	; 0x45
 800f550:	f000 8085 	beq.w	800f65e <_scanf_float+0x1ee>
 800f554:	2b46      	cmp	r3, #70	; 0x46
 800f556:	d06a      	beq.n	800f62e <_scanf_float+0x1be>
 800f558:	2b41      	cmp	r3, #65	; 0x41
 800f55a:	d1c1      	bne.n	800f4e0 <_scanf_float+0x70>
 800f55c:	2a01      	cmp	r2, #1
 800f55e:	d1bf      	bne.n	800f4e0 <_scanf_float+0x70>
 800f560:	2202      	movs	r2, #2
 800f562:	e046      	b.n	800f5f2 <_scanf_float+0x182>
 800f564:	2b65      	cmp	r3, #101	; 0x65
 800f566:	d07a      	beq.n	800f65e <_scanf_float+0x1ee>
 800f568:	d818      	bhi.n	800f59c <_scanf_float+0x12c>
 800f56a:	2b54      	cmp	r3, #84	; 0x54
 800f56c:	d066      	beq.n	800f63c <_scanf_float+0x1cc>
 800f56e:	d811      	bhi.n	800f594 <_scanf_float+0x124>
 800f570:	2b4e      	cmp	r3, #78	; 0x4e
 800f572:	d1b5      	bne.n	800f4e0 <_scanf_float+0x70>
 800f574:	2a00      	cmp	r2, #0
 800f576:	d146      	bne.n	800f606 <_scanf_float+0x196>
 800f578:	f1b9 0f00 	cmp.w	r9, #0
 800f57c:	d145      	bne.n	800f60a <_scanf_float+0x19a>
 800f57e:	6821      	ldr	r1, [r4, #0]
 800f580:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f584:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f588:	d13f      	bne.n	800f60a <_scanf_float+0x19a>
 800f58a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f58e:	6021      	str	r1, [r4, #0]
 800f590:	2201      	movs	r2, #1
 800f592:	e02e      	b.n	800f5f2 <_scanf_float+0x182>
 800f594:	2b59      	cmp	r3, #89	; 0x59
 800f596:	d01e      	beq.n	800f5d6 <_scanf_float+0x166>
 800f598:	2b61      	cmp	r3, #97	; 0x61
 800f59a:	e7de      	b.n	800f55a <_scanf_float+0xea>
 800f59c:	2b6e      	cmp	r3, #110	; 0x6e
 800f59e:	d0e9      	beq.n	800f574 <_scanf_float+0x104>
 800f5a0:	d815      	bhi.n	800f5ce <_scanf_float+0x15e>
 800f5a2:	2b66      	cmp	r3, #102	; 0x66
 800f5a4:	d043      	beq.n	800f62e <_scanf_float+0x1be>
 800f5a6:	2b69      	cmp	r3, #105	; 0x69
 800f5a8:	d19a      	bne.n	800f4e0 <_scanf_float+0x70>
 800f5aa:	f1bb 0f00 	cmp.w	fp, #0
 800f5ae:	d138      	bne.n	800f622 <_scanf_float+0x1b2>
 800f5b0:	f1b9 0f00 	cmp.w	r9, #0
 800f5b4:	d197      	bne.n	800f4e6 <_scanf_float+0x76>
 800f5b6:	6821      	ldr	r1, [r4, #0]
 800f5b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f5bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f5c0:	d195      	bne.n	800f4ee <_scanf_float+0x7e>
 800f5c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f5c6:	6021      	str	r1, [r4, #0]
 800f5c8:	f04f 0b01 	mov.w	fp, #1
 800f5cc:	e011      	b.n	800f5f2 <_scanf_float+0x182>
 800f5ce:	2b74      	cmp	r3, #116	; 0x74
 800f5d0:	d034      	beq.n	800f63c <_scanf_float+0x1cc>
 800f5d2:	2b79      	cmp	r3, #121	; 0x79
 800f5d4:	d184      	bne.n	800f4e0 <_scanf_float+0x70>
 800f5d6:	f1bb 0f07 	cmp.w	fp, #7
 800f5da:	d181      	bne.n	800f4e0 <_scanf_float+0x70>
 800f5dc:	f04f 0b08 	mov.w	fp, #8
 800f5e0:	e007      	b.n	800f5f2 <_scanf_float+0x182>
 800f5e2:	eb12 0f0b 	cmn.w	r2, fp
 800f5e6:	f47f af7b 	bne.w	800f4e0 <_scanf_float+0x70>
 800f5ea:	6821      	ldr	r1, [r4, #0]
 800f5ec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800f5f0:	6021      	str	r1, [r4, #0]
 800f5f2:	702b      	strb	r3, [r5, #0]
 800f5f4:	3501      	adds	r5, #1
 800f5f6:	e79a      	b.n	800f52e <_scanf_float+0xbe>
 800f5f8:	6821      	ldr	r1, [r4, #0]
 800f5fa:	0608      	lsls	r0, r1, #24
 800f5fc:	f57f af70 	bpl.w	800f4e0 <_scanf_float+0x70>
 800f600:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f604:	e7f4      	b.n	800f5f0 <_scanf_float+0x180>
 800f606:	2a02      	cmp	r2, #2
 800f608:	d047      	beq.n	800f69a <_scanf_float+0x22a>
 800f60a:	f1bb 0f01 	cmp.w	fp, #1
 800f60e:	d003      	beq.n	800f618 <_scanf_float+0x1a8>
 800f610:	f1bb 0f04 	cmp.w	fp, #4
 800f614:	f47f af64 	bne.w	800f4e0 <_scanf_float+0x70>
 800f618:	f10b 0b01 	add.w	fp, fp, #1
 800f61c:	fa5f fb8b 	uxtb.w	fp, fp
 800f620:	e7e7      	b.n	800f5f2 <_scanf_float+0x182>
 800f622:	f1bb 0f03 	cmp.w	fp, #3
 800f626:	d0f7      	beq.n	800f618 <_scanf_float+0x1a8>
 800f628:	f1bb 0f05 	cmp.w	fp, #5
 800f62c:	e7f2      	b.n	800f614 <_scanf_float+0x1a4>
 800f62e:	f1bb 0f02 	cmp.w	fp, #2
 800f632:	f47f af55 	bne.w	800f4e0 <_scanf_float+0x70>
 800f636:	f04f 0b03 	mov.w	fp, #3
 800f63a:	e7da      	b.n	800f5f2 <_scanf_float+0x182>
 800f63c:	f1bb 0f06 	cmp.w	fp, #6
 800f640:	f47f af4e 	bne.w	800f4e0 <_scanf_float+0x70>
 800f644:	f04f 0b07 	mov.w	fp, #7
 800f648:	e7d3      	b.n	800f5f2 <_scanf_float+0x182>
 800f64a:	6821      	ldr	r1, [r4, #0]
 800f64c:	0588      	lsls	r0, r1, #22
 800f64e:	f57f af47 	bpl.w	800f4e0 <_scanf_float+0x70>
 800f652:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800f656:	6021      	str	r1, [r4, #0]
 800f658:	f8cd 9008 	str.w	r9, [sp, #8]
 800f65c:	e7c9      	b.n	800f5f2 <_scanf_float+0x182>
 800f65e:	6821      	ldr	r1, [r4, #0]
 800f660:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800f664:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f668:	d006      	beq.n	800f678 <_scanf_float+0x208>
 800f66a:	0548      	lsls	r0, r1, #21
 800f66c:	f57f af38 	bpl.w	800f4e0 <_scanf_float+0x70>
 800f670:	f1b9 0f00 	cmp.w	r9, #0
 800f674:	f43f af3b 	beq.w	800f4ee <_scanf_float+0x7e>
 800f678:	0588      	lsls	r0, r1, #22
 800f67a:	bf58      	it	pl
 800f67c:	9802      	ldrpl	r0, [sp, #8]
 800f67e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f682:	bf58      	it	pl
 800f684:	eba9 0000 	subpl.w	r0, r9, r0
 800f688:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800f68c:	bf58      	it	pl
 800f68e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800f692:	6021      	str	r1, [r4, #0]
 800f694:	f04f 0900 	mov.w	r9, #0
 800f698:	e7ab      	b.n	800f5f2 <_scanf_float+0x182>
 800f69a:	2203      	movs	r2, #3
 800f69c:	e7a9      	b.n	800f5f2 <_scanf_float+0x182>
 800f69e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f6a2:	9205      	str	r2, [sp, #20]
 800f6a4:	4631      	mov	r1, r6
 800f6a6:	4638      	mov	r0, r7
 800f6a8:	4798      	blx	r3
 800f6aa:	9a05      	ldr	r2, [sp, #20]
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	f43f af04 	beq.w	800f4ba <_scanf_float+0x4a>
 800f6b2:	e715      	b.n	800f4e0 <_scanf_float+0x70>
 800f6b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f6b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f6bc:	4632      	mov	r2, r6
 800f6be:	4638      	mov	r0, r7
 800f6c0:	4798      	blx	r3
 800f6c2:	6923      	ldr	r3, [r4, #16]
 800f6c4:	3b01      	subs	r3, #1
 800f6c6:	6123      	str	r3, [r4, #16]
 800f6c8:	e715      	b.n	800f4f6 <_scanf_float+0x86>
 800f6ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f6ce:	2b06      	cmp	r3, #6
 800f6d0:	d80a      	bhi.n	800f6e8 <_scanf_float+0x278>
 800f6d2:	f1bb 0f02 	cmp.w	fp, #2
 800f6d6:	d966      	bls.n	800f7a6 <_scanf_float+0x336>
 800f6d8:	f1ab 0b03 	sub.w	fp, fp, #3
 800f6dc:	fa5f fb8b 	uxtb.w	fp, fp
 800f6e0:	eba5 0b0b 	sub.w	fp, r5, fp
 800f6e4:	455d      	cmp	r5, fp
 800f6e6:	d149      	bne.n	800f77c <_scanf_float+0x30c>
 800f6e8:	6823      	ldr	r3, [r4, #0]
 800f6ea:	05da      	lsls	r2, r3, #23
 800f6ec:	d51f      	bpl.n	800f72e <_scanf_float+0x2be>
 800f6ee:	055b      	lsls	r3, r3, #21
 800f6f0:	d466      	bmi.n	800f7c0 <_scanf_float+0x350>
 800f6f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f6f6:	6923      	ldr	r3, [r4, #16]
 800f6f8:	2965      	cmp	r1, #101	; 0x65
 800f6fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800f6fe:	f105 3bff 	add.w	fp, r5, #4294967295
 800f702:	6123      	str	r3, [r4, #16]
 800f704:	d00d      	beq.n	800f722 <_scanf_float+0x2b2>
 800f706:	2945      	cmp	r1, #69	; 0x45
 800f708:	d00b      	beq.n	800f722 <_scanf_float+0x2b2>
 800f70a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f70e:	4632      	mov	r2, r6
 800f710:	4638      	mov	r0, r7
 800f712:	4798      	blx	r3
 800f714:	6923      	ldr	r3, [r4, #16]
 800f716:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	f1a5 0b02 	sub.w	fp, r5, #2
 800f720:	6123      	str	r3, [r4, #16]
 800f722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f726:	4632      	mov	r2, r6
 800f728:	4638      	mov	r0, r7
 800f72a:	4798      	blx	r3
 800f72c:	465d      	mov	r5, fp
 800f72e:	6826      	ldr	r6, [r4, #0]
 800f730:	f016 0610 	ands.w	r6, r6, #16
 800f734:	d170      	bne.n	800f818 <_scanf_float+0x3a8>
 800f736:	702e      	strb	r6, [r5, #0]
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f73e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f742:	d140      	bne.n	800f7c6 <_scanf_float+0x356>
 800f744:	9b02      	ldr	r3, [sp, #8]
 800f746:	eba9 0303 	sub.w	r3, r9, r3
 800f74a:	425a      	negs	r2, r3
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d147      	bne.n	800f7e0 <_scanf_float+0x370>
 800f750:	2200      	movs	r2, #0
 800f752:	4638      	mov	r0, r7
 800f754:	4641      	mov	r1, r8
 800f756:	f000 fe6b 	bl	8010430 <_strtod_r>
 800f75a:	6820      	ldr	r0, [r4, #0]
 800f75c:	f8da 3000 	ldr.w	r3, [sl]
 800f760:	f010 0f02 	tst.w	r0, #2
 800f764:	f103 0204 	add.w	r2, r3, #4
 800f768:	f8ca 2000 	str.w	r2, [sl]
 800f76c:	d043      	beq.n	800f7f6 <_scanf_float+0x386>
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	ed83 0b00 	vstr	d0, [r3]
 800f774:	68e3      	ldr	r3, [r4, #12]
 800f776:	3301      	adds	r3, #1
 800f778:	60e3      	str	r3, [r4, #12]
 800f77a:	e6c0      	b.n	800f4fe <_scanf_float+0x8e>
 800f77c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f780:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f784:	4632      	mov	r2, r6
 800f786:	4638      	mov	r0, r7
 800f788:	4798      	blx	r3
 800f78a:	6923      	ldr	r3, [r4, #16]
 800f78c:	3b01      	subs	r3, #1
 800f78e:	6123      	str	r3, [r4, #16]
 800f790:	e7a8      	b.n	800f6e4 <_scanf_float+0x274>
 800f792:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f796:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f79a:	4632      	mov	r2, r6
 800f79c:	4638      	mov	r0, r7
 800f79e:	4798      	blx	r3
 800f7a0:	6923      	ldr	r3, [r4, #16]
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	6123      	str	r3, [r4, #16]
 800f7a6:	4545      	cmp	r5, r8
 800f7a8:	d8f3      	bhi.n	800f792 <_scanf_float+0x322>
 800f7aa:	e6a7      	b.n	800f4fc <_scanf_float+0x8c>
 800f7ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f7b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f7b4:	4632      	mov	r2, r6
 800f7b6:	4638      	mov	r0, r7
 800f7b8:	4798      	blx	r3
 800f7ba:	6923      	ldr	r3, [r4, #16]
 800f7bc:	3b01      	subs	r3, #1
 800f7be:	6123      	str	r3, [r4, #16]
 800f7c0:	4545      	cmp	r5, r8
 800f7c2:	d8f3      	bhi.n	800f7ac <_scanf_float+0x33c>
 800f7c4:	e69a      	b.n	800f4fc <_scanf_float+0x8c>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d0c1      	beq.n	800f750 <_scanf_float+0x2e0>
 800f7cc:	9904      	ldr	r1, [sp, #16]
 800f7ce:	230a      	movs	r3, #10
 800f7d0:	4632      	mov	r2, r6
 800f7d2:	3101      	adds	r1, #1
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	f000 feb7 	bl	8010548 <_strtol_r>
 800f7da:	9b03      	ldr	r3, [sp, #12]
 800f7dc:	9d04      	ldr	r5, [sp, #16]
 800f7de:	1ac2      	subs	r2, r0, r3
 800f7e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f7e4:	429d      	cmp	r5, r3
 800f7e6:	bf28      	it	cs
 800f7e8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800f7ec:	490b      	ldr	r1, [pc, #44]	; (800f81c <_scanf_float+0x3ac>)
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	f000 f81c 	bl	800f82c <siprintf>
 800f7f4:	e7ac      	b.n	800f750 <_scanf_float+0x2e0>
 800f7f6:	f010 0004 	ands.w	r0, r0, #4
 800f7fa:	d1b8      	bne.n	800f76e <_scanf_float+0x2fe>
 800f7fc:	eeb4 0b40 	vcmp.f64	d0, d0
 800f800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f804:	681d      	ldr	r5, [r3, #0]
 800f806:	d704      	bvc.n	800f812 <_scanf_float+0x3a2>
 800f808:	f000 f80a 	bl	800f820 <nanf>
 800f80c:	ed85 0a00 	vstr	s0, [r5]
 800f810:	e7b0      	b.n	800f774 <_scanf_float+0x304>
 800f812:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f816:	e7f9      	b.n	800f80c <_scanf_float+0x39c>
 800f818:	2600      	movs	r6, #0
 800f81a:	e670      	b.n	800f4fe <_scanf_float+0x8e>
 800f81c:	08012ad4 	.word	0x08012ad4

0800f820 <nanf>:
 800f820:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f828 <nanf+0x8>
 800f824:	4770      	bx	lr
 800f826:	bf00      	nop
 800f828:	7fc00000 	.word	0x7fc00000

0800f82c <siprintf>:
 800f82c:	b40e      	push	{r1, r2, r3}
 800f82e:	b500      	push	{lr}
 800f830:	b09c      	sub	sp, #112	; 0x70
 800f832:	ab1d      	add	r3, sp, #116	; 0x74
 800f834:	9002      	str	r0, [sp, #8]
 800f836:	9006      	str	r0, [sp, #24]
 800f838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f83c:	4809      	ldr	r0, [pc, #36]	; (800f864 <siprintf+0x38>)
 800f83e:	9107      	str	r1, [sp, #28]
 800f840:	9104      	str	r1, [sp, #16]
 800f842:	4909      	ldr	r1, [pc, #36]	; (800f868 <siprintf+0x3c>)
 800f844:	f853 2b04 	ldr.w	r2, [r3], #4
 800f848:	9105      	str	r1, [sp, #20]
 800f84a:	6800      	ldr	r0, [r0, #0]
 800f84c:	9301      	str	r3, [sp, #4]
 800f84e:	a902      	add	r1, sp, #8
 800f850:	f002 fcd4 	bl	80121fc <_svfiprintf_r>
 800f854:	9b02      	ldr	r3, [sp, #8]
 800f856:	2200      	movs	r2, #0
 800f858:	701a      	strb	r2, [r3, #0]
 800f85a:	b01c      	add	sp, #112	; 0x70
 800f85c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f860:	b003      	add	sp, #12
 800f862:	4770      	bx	lr
 800f864:	20000028 	.word	0x20000028
 800f868:	ffff0208 	.word	0xffff0208

0800f86c <sulp>:
 800f86c:	b570      	push	{r4, r5, r6, lr}
 800f86e:	4604      	mov	r4, r0
 800f870:	460d      	mov	r5, r1
 800f872:	4616      	mov	r6, r2
 800f874:	ec45 4b10 	vmov	d0, r4, r5
 800f878:	f002 fa7c 	bl	8011d74 <__ulp>
 800f87c:	b17e      	cbz	r6, 800f89e <sulp+0x32>
 800f87e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f882:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f886:	2b00      	cmp	r3, #0
 800f888:	dd09      	ble.n	800f89e <sulp+0x32>
 800f88a:	051b      	lsls	r3, r3, #20
 800f88c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800f890:	2000      	movs	r0, #0
 800f892:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800f896:	ec41 0b17 	vmov	d7, r0, r1
 800f89a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f89e:	bd70      	pop	{r4, r5, r6, pc}

0800f8a0 <_strtod_l>:
 800f8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8a4:	ed2d 8b0c 	vpush	{d8-d13}
 800f8a8:	4698      	mov	r8, r3
 800f8aa:	b09d      	sub	sp, #116	; 0x74
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	460e      	mov	r6, r1
 800f8b4:	9214      	str	r2, [sp, #80]	; 0x50
 800f8b6:	9318      	str	r3, [sp, #96]	; 0x60
 800f8b8:	f001 ff5b 	bl	8011772 <__localeconv_l>
 800f8bc:	4681      	mov	r9, r0
 800f8be:	6800      	ldr	r0, [r0, #0]
 800f8c0:	f7f0 fcbe 	bl	8000240 <strlen>
 800f8c4:	f04f 0a00 	mov.w	sl, #0
 800f8c8:	4607      	mov	r7, r0
 800f8ca:	f04f 0b00 	mov.w	fp, #0
 800f8ce:	9617      	str	r6, [sp, #92]	; 0x5c
 800f8d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f8d2:	781a      	ldrb	r2, [r3, #0]
 800f8d4:	2a0d      	cmp	r2, #13
 800f8d6:	d834      	bhi.n	800f942 <_strtod_l+0xa2>
 800f8d8:	2a09      	cmp	r2, #9
 800f8da:	d238      	bcs.n	800f94e <_strtod_l+0xae>
 800f8dc:	2a00      	cmp	r2, #0
 800f8de:	d040      	beq.n	800f962 <_strtod_l+0xc2>
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	930d      	str	r3, [sp, #52]	; 0x34
 800f8e4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800f8e6:	782b      	ldrb	r3, [r5, #0]
 800f8e8:	2b30      	cmp	r3, #48	; 0x30
 800f8ea:	f040 80b3 	bne.w	800fa54 <_strtod_l+0x1b4>
 800f8ee:	786b      	ldrb	r3, [r5, #1]
 800f8f0:	2b58      	cmp	r3, #88	; 0x58
 800f8f2:	d001      	beq.n	800f8f8 <_strtod_l+0x58>
 800f8f4:	2b78      	cmp	r3, #120	; 0x78
 800f8f6:	d169      	bne.n	800f9cc <_strtod_l+0x12c>
 800f8f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8fa:	9301      	str	r3, [sp, #4]
 800f8fc:	ab18      	add	r3, sp, #96	; 0x60
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	f8cd 8008 	str.w	r8, [sp, #8]
 800f904:	ab19      	add	r3, sp, #100	; 0x64
 800f906:	4a8f      	ldr	r2, [pc, #572]	; (800fb44 <_strtod_l+0x2a4>)
 800f908:	a917      	add	r1, sp, #92	; 0x5c
 800f90a:	4620      	mov	r0, r4
 800f90c:	f001 fc57 	bl	80111be <__gethex>
 800f910:	f010 0607 	ands.w	r6, r0, #7
 800f914:	4607      	mov	r7, r0
 800f916:	d005      	beq.n	800f924 <_strtod_l+0x84>
 800f918:	2e06      	cmp	r6, #6
 800f91a:	d12c      	bne.n	800f976 <_strtod_l+0xd6>
 800f91c:	3501      	adds	r5, #1
 800f91e:	2300      	movs	r3, #0
 800f920:	9517      	str	r5, [sp, #92]	; 0x5c
 800f922:	930d      	str	r3, [sp, #52]	; 0x34
 800f924:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f926:	2b00      	cmp	r3, #0
 800f928:	f040 855e 	bne.w	80103e8 <_strtod_l+0xb48>
 800f92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f92e:	b1eb      	cbz	r3, 800f96c <_strtod_l+0xcc>
 800f930:	ec4b ab17 	vmov	d7, sl, fp
 800f934:	eeb1 0b47 	vneg.f64	d0, d7
 800f938:	b01d      	add	sp, #116	; 0x74
 800f93a:	ecbd 8b0c 	vpop	{d8-d13}
 800f93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f942:	2a2b      	cmp	r2, #43	; 0x2b
 800f944:	d015      	beq.n	800f972 <_strtod_l+0xd2>
 800f946:	2a2d      	cmp	r2, #45	; 0x2d
 800f948:	d004      	beq.n	800f954 <_strtod_l+0xb4>
 800f94a:	2a20      	cmp	r2, #32
 800f94c:	d1c8      	bne.n	800f8e0 <_strtod_l+0x40>
 800f94e:	3301      	adds	r3, #1
 800f950:	9317      	str	r3, [sp, #92]	; 0x5c
 800f952:	e7bd      	b.n	800f8d0 <_strtod_l+0x30>
 800f954:	2201      	movs	r2, #1
 800f956:	920d      	str	r2, [sp, #52]	; 0x34
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	9217      	str	r2, [sp, #92]	; 0x5c
 800f95c:	785b      	ldrb	r3, [r3, #1]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1c0      	bne.n	800f8e4 <_strtod_l+0x44>
 800f962:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f964:	9617      	str	r6, [sp, #92]	; 0x5c
 800f966:	2b00      	cmp	r3, #0
 800f968:	f040 853c 	bne.w	80103e4 <_strtod_l+0xb44>
 800f96c:	ec4b ab10 	vmov	d0, sl, fp
 800f970:	e7e2      	b.n	800f938 <_strtod_l+0x98>
 800f972:	2200      	movs	r2, #0
 800f974:	e7ef      	b.n	800f956 <_strtod_l+0xb6>
 800f976:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f978:	b13a      	cbz	r2, 800f98a <_strtod_l+0xea>
 800f97a:	2135      	movs	r1, #53	; 0x35
 800f97c:	a81a      	add	r0, sp, #104	; 0x68
 800f97e:	f002 faf2 	bl	8011f66 <__copybits>
 800f982:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f984:	4620      	mov	r0, r4
 800f986:	f001 ff5e 	bl	8011846 <_Bfree>
 800f98a:	3e01      	subs	r6, #1
 800f98c:	2e04      	cmp	r6, #4
 800f98e:	d806      	bhi.n	800f99e <_strtod_l+0xfe>
 800f990:	e8df f006 	tbb	[pc, r6]
 800f994:	1714030a 	.word	0x1714030a
 800f998:	0a          	.byte	0x0a
 800f999:	00          	.byte	0x00
 800f99a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f99e:	073b      	lsls	r3, r7, #28
 800f9a0:	d5c0      	bpl.n	800f924 <_strtod_l+0x84>
 800f9a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f9a6:	e7bd      	b.n	800f924 <_strtod_l+0x84>
 800f9a8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f9ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f9ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f9b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f9b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f9ba:	e7f0      	b.n	800f99e <_strtod_l+0xfe>
 800f9bc:	f8df b188 	ldr.w	fp, [pc, #392]	; 800fb48 <_strtod_l+0x2a8>
 800f9c0:	e7ed      	b.n	800f99e <_strtod_l+0xfe>
 800f9c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f9c6:	f04f 3aff 	mov.w	sl, #4294967295
 800f9ca:	e7e8      	b.n	800f99e <_strtod_l+0xfe>
 800f9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9ce:	1c5a      	adds	r2, r3, #1
 800f9d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800f9d2:	785b      	ldrb	r3, [r3, #1]
 800f9d4:	2b30      	cmp	r3, #48	; 0x30
 800f9d6:	d0f9      	beq.n	800f9cc <_strtod_l+0x12c>
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d0a3      	beq.n	800f924 <_strtod_l+0x84>
 800f9dc:	2301      	movs	r3, #1
 800f9de:	930a      	str	r3, [sp, #40]	; 0x28
 800f9e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9e2:	930c      	str	r3, [sp, #48]	; 0x30
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	9306      	str	r3, [sp, #24]
 800f9e8:	9308      	str	r3, [sp, #32]
 800f9ea:	461d      	mov	r5, r3
 800f9ec:	220a      	movs	r2, #10
 800f9ee:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f9f0:	f890 8000 	ldrb.w	r8, [r0]
 800f9f4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800f9f8:	b2d9      	uxtb	r1, r3
 800f9fa:	2909      	cmp	r1, #9
 800f9fc:	d92c      	bls.n	800fa58 <_strtod_l+0x1b8>
 800f9fe:	463a      	mov	r2, r7
 800fa00:	f8d9 1000 	ldr.w	r1, [r9]
 800fa04:	f002 fd02 	bl	801240c <strncmp>
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d035      	beq.n	800fa78 <_strtod_l+0x1d8>
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	4642      	mov	r2, r8
 800fa10:	462b      	mov	r3, r5
 800fa12:	4601      	mov	r1, r0
 800fa14:	9004      	str	r0, [sp, #16]
 800fa16:	2a65      	cmp	r2, #101	; 0x65
 800fa18:	d001      	beq.n	800fa1e <_strtod_l+0x17e>
 800fa1a:	2a45      	cmp	r2, #69	; 0x45
 800fa1c:	d117      	bne.n	800fa4e <_strtod_l+0x1ae>
 800fa1e:	b923      	cbnz	r3, 800fa2a <_strtod_l+0x18a>
 800fa20:	b910      	cbnz	r0, 800fa28 <_strtod_l+0x188>
 800fa22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d09c      	beq.n	800f962 <_strtod_l+0xc2>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fa2c:	1c72      	adds	r2, r6, #1
 800fa2e:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa30:	7872      	ldrb	r2, [r6, #1]
 800fa32:	2a2b      	cmp	r2, #43	; 0x2b
 800fa34:	f000 8082 	beq.w	800fb3c <_strtod_l+0x29c>
 800fa38:	2a2d      	cmp	r2, #45	; 0x2d
 800fa3a:	d079      	beq.n	800fb30 <_strtod_l+0x290>
 800fa3c:	f04f 0e00 	mov.w	lr, #0
 800fa40:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800fa44:	f1bc 0f09 	cmp.w	ip, #9
 800fa48:	f240 8086 	bls.w	800fb58 <_strtod_l+0x2b8>
 800fa4c:	9617      	str	r6, [sp, #92]	; 0x5c
 800fa4e:	f04f 0800 	mov.w	r8, #0
 800fa52:	e0a8      	b.n	800fba6 <_strtod_l+0x306>
 800fa54:	2300      	movs	r3, #0
 800fa56:	e7c2      	b.n	800f9de <_strtod_l+0x13e>
 800fa58:	2d08      	cmp	r5, #8
 800fa5a:	bfd5      	itete	le
 800fa5c:	9908      	ldrle	r1, [sp, #32]
 800fa5e:	9906      	ldrgt	r1, [sp, #24]
 800fa60:	fb02 3301 	mlale	r3, r2, r1, r3
 800fa64:	fb02 3301 	mlagt	r3, r2, r1, r3
 800fa68:	f100 0001 	add.w	r0, r0, #1
 800fa6c:	bfd4      	ite	le
 800fa6e:	9308      	strle	r3, [sp, #32]
 800fa70:	9306      	strgt	r3, [sp, #24]
 800fa72:	3501      	adds	r5, #1
 800fa74:	9017      	str	r0, [sp, #92]	; 0x5c
 800fa76:	e7ba      	b.n	800f9ee <_strtod_l+0x14e>
 800fa78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa7a:	19da      	adds	r2, r3, r7
 800fa7c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa7e:	5dda      	ldrb	r2, [r3, r7]
 800fa80:	2d00      	cmp	r5, #0
 800fa82:	d038      	beq.n	800faf6 <_strtod_l+0x256>
 800fa84:	4601      	mov	r1, r0
 800fa86:	462b      	mov	r3, r5
 800fa88:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800fa8c:	2f09      	cmp	r7, #9
 800fa8e:	d913      	bls.n	800fab8 <_strtod_l+0x218>
 800fa90:	2701      	movs	r7, #1
 800fa92:	9704      	str	r7, [sp, #16]
 800fa94:	e7bf      	b.n	800fa16 <_strtod_l+0x176>
 800fa96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	9217      	str	r2, [sp, #92]	; 0x5c
 800fa9c:	785a      	ldrb	r2, [r3, #1]
 800fa9e:	3001      	adds	r0, #1
 800faa0:	2a30      	cmp	r2, #48	; 0x30
 800faa2:	d0f8      	beq.n	800fa96 <_strtod_l+0x1f6>
 800faa4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800faa8:	2b08      	cmp	r3, #8
 800faaa:	f200 84a2 	bhi.w	80103f2 <_strtod_l+0xb52>
 800faae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fab0:	930c      	str	r3, [sp, #48]	; 0x30
 800fab2:	4601      	mov	r1, r0
 800fab4:	2000      	movs	r0, #0
 800fab6:	4603      	mov	r3, r0
 800fab8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800fabc:	f100 0701 	add.w	r7, r0, #1
 800fac0:	d013      	beq.n	800faea <_strtod_l+0x24a>
 800fac2:	4439      	add	r1, r7
 800fac4:	eb00 0e03 	add.w	lr, r0, r3
 800fac8:	461f      	mov	r7, r3
 800faca:	f04f 0c0a 	mov.w	ip, #10
 800face:	45be      	cmp	lr, r7
 800fad0:	d113      	bne.n	800fafa <_strtod_l+0x25a>
 800fad2:	181f      	adds	r7, r3, r0
 800fad4:	2f08      	cmp	r7, #8
 800fad6:	f103 0301 	add.w	r3, r3, #1
 800fada:	4403      	add	r3, r0
 800fadc:	dc1d      	bgt.n	800fb1a <_strtod_l+0x27a>
 800fade:	9a08      	ldr	r2, [sp, #32]
 800fae0:	200a      	movs	r0, #10
 800fae2:	fb00 8202 	mla	r2, r0, r2, r8
 800fae6:	9208      	str	r2, [sp, #32]
 800fae8:	2700      	movs	r7, #0
 800faea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800faec:	1c50      	adds	r0, r2, #1
 800faee:	9017      	str	r0, [sp, #92]	; 0x5c
 800faf0:	7852      	ldrb	r2, [r2, #1]
 800faf2:	4638      	mov	r0, r7
 800faf4:	e7c8      	b.n	800fa88 <_strtod_l+0x1e8>
 800faf6:	4628      	mov	r0, r5
 800faf8:	e7d2      	b.n	800faa0 <_strtod_l+0x200>
 800fafa:	2f08      	cmp	r7, #8
 800fafc:	f107 0701 	add.w	r7, r7, #1
 800fb00:	dc04      	bgt.n	800fb0c <_strtod_l+0x26c>
 800fb02:	9a08      	ldr	r2, [sp, #32]
 800fb04:	fb0c f202 	mul.w	r2, ip, r2
 800fb08:	9208      	str	r2, [sp, #32]
 800fb0a:	e7e0      	b.n	800face <_strtod_l+0x22e>
 800fb0c:	2f10      	cmp	r7, #16
 800fb0e:	bfde      	ittt	le
 800fb10:	9a06      	ldrle	r2, [sp, #24]
 800fb12:	fb0c f202 	mulle.w	r2, ip, r2
 800fb16:	9206      	strle	r2, [sp, #24]
 800fb18:	e7d9      	b.n	800face <_strtod_l+0x22e>
 800fb1a:	2b10      	cmp	r3, #16
 800fb1c:	bfdf      	itttt	le
 800fb1e:	9a06      	ldrle	r2, [sp, #24]
 800fb20:	200a      	movle	r0, #10
 800fb22:	fb00 8202 	mlale	r2, r0, r2, r8
 800fb26:	9206      	strle	r2, [sp, #24]
 800fb28:	e7de      	b.n	800fae8 <_strtod_l+0x248>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	9304      	str	r3, [sp, #16]
 800fb2e:	e777      	b.n	800fa20 <_strtod_l+0x180>
 800fb30:	f04f 0e01 	mov.w	lr, #1
 800fb34:	1cb2      	adds	r2, r6, #2
 800fb36:	9217      	str	r2, [sp, #92]	; 0x5c
 800fb38:	78b2      	ldrb	r2, [r6, #2]
 800fb3a:	e781      	b.n	800fa40 <_strtod_l+0x1a0>
 800fb3c:	f04f 0e00 	mov.w	lr, #0
 800fb40:	e7f8      	b.n	800fb34 <_strtod_l+0x294>
 800fb42:	bf00      	nop
 800fb44:	08012adc 	.word	0x08012adc
 800fb48:	7ff00000 	.word	0x7ff00000
 800fb4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb4e:	f102 0c01 	add.w	ip, r2, #1
 800fb52:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800fb56:	7852      	ldrb	r2, [r2, #1]
 800fb58:	2a30      	cmp	r2, #48	; 0x30
 800fb5a:	d0f7      	beq.n	800fb4c <_strtod_l+0x2ac>
 800fb5c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800fb60:	f1bc 0f08 	cmp.w	ip, #8
 800fb64:	f63f af73 	bhi.w	800fa4e <_strtod_l+0x1ae>
 800fb68:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800fb6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb6e:	920e      	str	r2, [sp, #56]	; 0x38
 800fb70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb72:	f102 0c01 	add.w	ip, r2, #1
 800fb76:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800fb7a:	7852      	ldrb	r2, [r2, #1]
 800fb7c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800fb80:	f1b9 0f09 	cmp.w	r9, #9
 800fb84:	d939      	bls.n	800fbfa <_strtod_l+0x35a>
 800fb86:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800fb88:	ebac 0c07 	sub.w	ip, ip, r7
 800fb8c:	f1bc 0f08 	cmp.w	ip, #8
 800fb90:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800fb94:	dc37      	bgt.n	800fc06 <_strtod_l+0x366>
 800fb96:	45e0      	cmp	r8, ip
 800fb98:	bfa8      	it	ge
 800fb9a:	46e0      	movge	r8, ip
 800fb9c:	f1be 0f00 	cmp.w	lr, #0
 800fba0:	d001      	beq.n	800fba6 <_strtod_l+0x306>
 800fba2:	f1c8 0800 	rsb	r8, r8, #0
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d151      	bne.n	800fc4e <_strtod_l+0x3ae>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	f47f aeba 	bne.w	800f924 <_strtod_l+0x84>
 800fbb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f47f aeb6 	bne.w	800f924 <_strtod_l+0x84>
 800fbb8:	9b04      	ldr	r3, [sp, #16]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f47f aed1 	bne.w	800f962 <_strtod_l+0xc2>
 800fbc0:	2a4e      	cmp	r2, #78	; 0x4e
 800fbc2:	d027      	beq.n	800fc14 <_strtod_l+0x374>
 800fbc4:	dc21      	bgt.n	800fc0a <_strtod_l+0x36a>
 800fbc6:	2a49      	cmp	r2, #73	; 0x49
 800fbc8:	f47f aecb 	bne.w	800f962 <_strtod_l+0xc2>
 800fbcc:	499a      	ldr	r1, [pc, #616]	; (800fe38 <_strtod_l+0x598>)
 800fbce:	a817      	add	r0, sp, #92	; 0x5c
 800fbd0:	f001 fd28 	bl	8011624 <__match>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	f43f aec4 	beq.w	800f962 <_strtod_l+0xc2>
 800fbda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbdc:	4997      	ldr	r1, [pc, #604]	; (800fe3c <_strtod_l+0x59c>)
 800fbde:	3b01      	subs	r3, #1
 800fbe0:	a817      	add	r0, sp, #92	; 0x5c
 800fbe2:	9317      	str	r3, [sp, #92]	; 0x5c
 800fbe4:	f001 fd1e 	bl	8011624 <__match>
 800fbe8:	b910      	cbnz	r0, 800fbf0 <_strtod_l+0x350>
 800fbea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fbec:	3301      	adds	r3, #1
 800fbee:	9317      	str	r3, [sp, #92]	; 0x5c
 800fbf0:	f8df b260 	ldr.w	fp, [pc, #608]	; 800fe54 <_strtod_l+0x5b4>
 800fbf4:	f04f 0a00 	mov.w	sl, #0
 800fbf8:	e694      	b.n	800f924 <_strtod_l+0x84>
 800fbfa:	270a      	movs	r7, #10
 800fbfc:	fb07 2808 	mla	r8, r7, r8, r2
 800fc00:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800fc04:	e7b4      	b.n	800fb70 <_strtod_l+0x2d0>
 800fc06:	46e0      	mov	r8, ip
 800fc08:	e7c8      	b.n	800fb9c <_strtod_l+0x2fc>
 800fc0a:	2a69      	cmp	r2, #105	; 0x69
 800fc0c:	d0de      	beq.n	800fbcc <_strtod_l+0x32c>
 800fc0e:	2a6e      	cmp	r2, #110	; 0x6e
 800fc10:	f47f aea7 	bne.w	800f962 <_strtod_l+0xc2>
 800fc14:	498a      	ldr	r1, [pc, #552]	; (800fe40 <_strtod_l+0x5a0>)
 800fc16:	a817      	add	r0, sp, #92	; 0x5c
 800fc18:	f001 fd04 	bl	8011624 <__match>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	f43f aea0 	beq.w	800f962 <_strtod_l+0xc2>
 800fc22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	2b28      	cmp	r3, #40	; 0x28
 800fc28:	d10e      	bne.n	800fc48 <_strtod_l+0x3a8>
 800fc2a:	aa1a      	add	r2, sp, #104	; 0x68
 800fc2c:	4985      	ldr	r1, [pc, #532]	; (800fe44 <_strtod_l+0x5a4>)
 800fc2e:	a817      	add	r0, sp, #92	; 0x5c
 800fc30:	f001 fd0c 	bl	801164c <__hexnan>
 800fc34:	2805      	cmp	r0, #5
 800fc36:	d107      	bne.n	800fc48 <_strtod_l+0x3a8>
 800fc38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc3a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800fc3e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fc42:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fc46:	e66d      	b.n	800f924 <_strtod_l+0x84>
 800fc48:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800fe58 <_strtod_l+0x5b8>
 800fc4c:	e7d2      	b.n	800fbf4 <_strtod_l+0x354>
 800fc4e:	eddd 7a08 	vldr	s15, [sp, #32]
 800fc52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fc56:	eba8 0201 	sub.w	r2, r8, r1
 800fc5a:	2d00      	cmp	r5, #0
 800fc5c:	bf08      	it	eq
 800fc5e:	461d      	moveq	r5, r3
 800fc60:	2b10      	cmp	r3, #16
 800fc62:	9204      	str	r2, [sp, #16]
 800fc64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fc68:	461a      	mov	r2, r3
 800fc6a:	bfa8      	it	ge
 800fc6c:	2210      	movge	r2, #16
 800fc6e:	2b09      	cmp	r3, #9
 800fc70:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800fc74:	dc14      	bgt.n	800fca0 <_strtod_l+0x400>
 800fc76:	9904      	ldr	r1, [sp, #16]
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	f43f ae53 	beq.w	800f924 <_strtod_l+0x84>
 800fc7e:	9904      	ldr	r1, [sp, #16]
 800fc80:	dd72      	ble.n	800fd68 <_strtod_l+0x4c8>
 800fc82:	2916      	cmp	r1, #22
 800fc84:	dc5a      	bgt.n	800fd3c <_strtod_l+0x49c>
 800fc86:	4970      	ldr	r1, [pc, #448]	; (800fe48 <_strtod_l+0x5a8>)
 800fc88:	9b04      	ldr	r3, [sp, #16]
 800fc8a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fc8e:	ed91 7b00 	vldr	d7, [r1]
 800fc92:	ec4b ab16 	vmov	d6, sl, fp
 800fc96:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fc9a:	ec5b ab17 	vmov	sl, fp, d7
 800fc9e:	e641      	b.n	800f924 <_strtod_l+0x84>
 800fca0:	4969      	ldr	r1, [pc, #420]	; (800fe48 <_strtod_l+0x5a8>)
 800fca2:	eddd 7a06 	vldr	s15, [sp, #24]
 800fca6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800fcaa:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800fcae:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800fcb2:	2b0f      	cmp	r3, #15
 800fcb4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fcb8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800fcbc:	ec5b ab17 	vmov	sl, fp, d7
 800fcc0:	ddd9      	ble.n	800fc76 <_strtod_l+0x3d6>
 800fcc2:	9904      	ldr	r1, [sp, #16]
 800fcc4:	1a9a      	subs	r2, r3, r2
 800fcc6:	440a      	add	r2, r1
 800fcc8:	2a00      	cmp	r2, #0
 800fcca:	f340 8096 	ble.w	800fdfa <_strtod_l+0x55a>
 800fcce:	f012 000f 	ands.w	r0, r2, #15
 800fcd2:	d00a      	beq.n	800fcea <_strtod_l+0x44a>
 800fcd4:	495c      	ldr	r1, [pc, #368]	; (800fe48 <_strtod_l+0x5a8>)
 800fcd6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800fcda:	ed91 7b00 	vldr	d7, [r1]
 800fcde:	ec4b ab16 	vmov	d6, sl, fp
 800fce2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fce6:	ec5b ab17 	vmov	sl, fp, d7
 800fcea:	f032 020f 	bics.w	r2, r2, #15
 800fcee:	d072      	beq.n	800fdd6 <_strtod_l+0x536>
 800fcf0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800fcf4:	dd45      	ble.n	800fd82 <_strtod_l+0x4e2>
 800fcf6:	2500      	movs	r5, #0
 800fcf8:	46a8      	mov	r8, r5
 800fcfa:	9506      	str	r5, [sp, #24]
 800fcfc:	46a9      	mov	r9, r5
 800fcfe:	2322      	movs	r3, #34	; 0x22
 800fd00:	f8df b150 	ldr.w	fp, [pc, #336]	; 800fe54 <_strtod_l+0x5b4>
 800fd04:	6023      	str	r3, [r4, #0]
 800fd06:	f04f 0a00 	mov.w	sl, #0
 800fd0a:	9b06      	ldr	r3, [sp, #24]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f43f ae09 	beq.w	800f924 <_strtod_l+0x84>
 800fd12:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fd14:	4620      	mov	r0, r4
 800fd16:	f001 fd96 	bl	8011846 <_Bfree>
 800fd1a:	4649      	mov	r1, r9
 800fd1c:	4620      	mov	r0, r4
 800fd1e:	f001 fd92 	bl	8011846 <_Bfree>
 800fd22:	4641      	mov	r1, r8
 800fd24:	4620      	mov	r0, r4
 800fd26:	f001 fd8e 	bl	8011846 <_Bfree>
 800fd2a:	9906      	ldr	r1, [sp, #24]
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f001 fd8a 	bl	8011846 <_Bfree>
 800fd32:	4629      	mov	r1, r5
 800fd34:	4620      	mov	r0, r4
 800fd36:	f001 fd86 	bl	8011846 <_Bfree>
 800fd3a:	e5f3      	b.n	800f924 <_strtod_l+0x84>
 800fd3c:	9804      	ldr	r0, [sp, #16]
 800fd3e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800fd42:	4281      	cmp	r1, r0
 800fd44:	dbbd      	blt.n	800fcc2 <_strtod_l+0x422>
 800fd46:	4a40      	ldr	r2, [pc, #256]	; (800fe48 <_strtod_l+0x5a8>)
 800fd48:	f1c3 030f 	rsb	r3, r3, #15
 800fd4c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800fd50:	ed91 7b00 	vldr	d7, [r1]
 800fd54:	ec4b ab16 	vmov	d6, sl, fp
 800fd58:	1ac3      	subs	r3, r0, r3
 800fd5a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800fd5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fd62:	ed92 6b00 	vldr	d6, [r2]
 800fd66:	e796      	b.n	800fc96 <_strtod_l+0x3f6>
 800fd68:	3116      	adds	r1, #22
 800fd6a:	dbaa      	blt.n	800fcc2 <_strtod_l+0x422>
 800fd6c:	4936      	ldr	r1, [pc, #216]	; (800fe48 <_strtod_l+0x5a8>)
 800fd6e:	9b04      	ldr	r3, [sp, #16]
 800fd70:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800fd74:	ed91 7b00 	vldr	d7, [r1]
 800fd78:	ec4b ab16 	vmov	d6, sl, fp
 800fd7c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fd80:	e78b      	b.n	800fc9a <_strtod_l+0x3fa>
 800fd82:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800fd86:	2000      	movs	r0, #0
 800fd88:	4e30      	ldr	r6, [pc, #192]	; (800fe4c <_strtod_l+0x5ac>)
 800fd8a:	1112      	asrs	r2, r2, #4
 800fd8c:	4601      	mov	r1, r0
 800fd8e:	2a01      	cmp	r2, #1
 800fd90:	dc23      	bgt.n	800fdda <_strtod_l+0x53a>
 800fd92:	b108      	cbz	r0, 800fd98 <_strtod_l+0x4f8>
 800fd94:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800fd98:	4a2c      	ldr	r2, [pc, #176]	; (800fe4c <_strtod_l+0x5ac>)
 800fd9a:	482d      	ldr	r0, [pc, #180]	; (800fe50 <_strtod_l+0x5b0>)
 800fd9c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800fda0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fda4:	ed91 7b00 	vldr	d7, [r1]
 800fda8:	ec4b ab16 	vmov	d6, sl, fp
 800fdac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fdb0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fdb4:	9907      	ldr	r1, [sp, #28]
 800fdb6:	4a27      	ldr	r2, [pc, #156]	; (800fe54 <_strtod_l+0x5b4>)
 800fdb8:	400a      	ands	r2, r1
 800fdba:	4282      	cmp	r2, r0
 800fdbc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800fdc0:	d899      	bhi.n	800fcf6 <_strtod_l+0x456>
 800fdc2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800fdc6:	4282      	cmp	r2, r0
 800fdc8:	bf86      	itte	hi
 800fdca:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800fe5c <_strtod_l+0x5bc>
 800fdce:	f04f 3aff 	movhi.w	sl, #4294967295
 800fdd2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800fdd6:	2700      	movs	r7, #0
 800fdd8:	e070      	b.n	800febc <_strtod_l+0x61c>
 800fdda:	07d7      	lsls	r7, r2, #31
 800fddc:	d50a      	bpl.n	800fdf4 <_strtod_l+0x554>
 800fdde:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800fde2:	ed90 7b00 	vldr	d7, [r0]
 800fde6:	ed9d 6b06 	vldr	d6, [sp, #24]
 800fdea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fdee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fdf2:	2001      	movs	r0, #1
 800fdf4:	3101      	adds	r1, #1
 800fdf6:	1052      	asrs	r2, r2, #1
 800fdf8:	e7c9      	b.n	800fd8e <_strtod_l+0x4ee>
 800fdfa:	d0ec      	beq.n	800fdd6 <_strtod_l+0x536>
 800fdfc:	4252      	negs	r2, r2
 800fdfe:	f012 000f 	ands.w	r0, r2, #15
 800fe02:	d00a      	beq.n	800fe1a <_strtod_l+0x57a>
 800fe04:	4910      	ldr	r1, [pc, #64]	; (800fe48 <_strtod_l+0x5a8>)
 800fe06:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800fe0a:	ed91 7b00 	vldr	d7, [r1]
 800fe0e:	ec4b ab16 	vmov	d6, sl, fp
 800fe12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800fe16:	ec5b ab17 	vmov	sl, fp, d7
 800fe1a:	1112      	asrs	r2, r2, #4
 800fe1c:	d0db      	beq.n	800fdd6 <_strtod_l+0x536>
 800fe1e:	2a1f      	cmp	r2, #31
 800fe20:	dd1e      	ble.n	800fe60 <_strtod_l+0x5c0>
 800fe22:	2500      	movs	r5, #0
 800fe24:	46a8      	mov	r8, r5
 800fe26:	9506      	str	r5, [sp, #24]
 800fe28:	46a9      	mov	r9, r5
 800fe2a:	2322      	movs	r3, #34	; 0x22
 800fe2c:	f04f 0a00 	mov.w	sl, #0
 800fe30:	f04f 0b00 	mov.w	fp, #0
 800fe34:	6023      	str	r3, [r4, #0]
 800fe36:	e768      	b.n	800fd0a <_strtod_l+0x46a>
 800fe38:	08012aa5 	.word	0x08012aa5
 800fe3c:	08012b33 	.word	0x08012b33
 800fe40:	08012aad 	.word	0x08012aad
 800fe44:	08012af0 	.word	0x08012af0
 800fe48:	08012b70 	.word	0x08012b70
 800fe4c:	08012b48 	.word	0x08012b48
 800fe50:	7ca00000 	.word	0x7ca00000
 800fe54:	7ff00000 	.word	0x7ff00000
 800fe58:	fff80000 	.word	0xfff80000
 800fe5c:	7fefffff 	.word	0x7fefffff
 800fe60:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800fe64:	f012 0710 	ands.w	r7, r2, #16
 800fe68:	49ab      	ldr	r1, [pc, #684]	; (8010118 <_strtod_l+0x878>)
 800fe6a:	bf18      	it	ne
 800fe6c:	276a      	movne	r7, #106	; 0x6a
 800fe6e:	2000      	movs	r0, #0
 800fe70:	2a00      	cmp	r2, #0
 800fe72:	f300 8113 	bgt.w	801009c <_strtod_l+0x7fc>
 800fe76:	b108      	cbz	r0, 800fe7c <_strtod_l+0x5dc>
 800fe78:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800fe7c:	b1bf      	cbz	r7, 800feae <_strtod_l+0x60e>
 800fe7e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fe82:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800fe86:	2a00      	cmp	r2, #0
 800fe88:	4659      	mov	r1, fp
 800fe8a:	dd10      	ble.n	800feae <_strtod_l+0x60e>
 800fe8c:	2a1f      	cmp	r2, #31
 800fe8e:	f340 8113 	ble.w	80100b8 <_strtod_l+0x818>
 800fe92:	2a34      	cmp	r2, #52	; 0x34
 800fe94:	bfde      	ittt	le
 800fe96:	3a20      	suble	r2, #32
 800fe98:	f04f 30ff 	movle.w	r0, #4294967295
 800fe9c:	fa00 f202 	lslle.w	r2, r0, r2
 800fea0:	f04f 0a00 	mov.w	sl, #0
 800fea4:	bfcc      	ite	gt
 800fea6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800feaa:	ea02 0b01 	andle.w	fp, r2, r1
 800feae:	ec4b ab17 	vmov	d7, sl, fp
 800feb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800feb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feba:	d0b2      	beq.n	800fe22 <_strtod_l+0x582>
 800febc:	9a08      	ldr	r2, [sp, #32]
 800febe:	9200      	str	r2, [sp, #0]
 800fec0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fec2:	462a      	mov	r2, r5
 800fec4:	4620      	mov	r0, r4
 800fec6:	f001 fd10 	bl	80118ea <__s2b>
 800feca:	9006      	str	r0, [sp, #24]
 800fecc:	2800      	cmp	r0, #0
 800fece:	f43f af12 	beq.w	800fcf6 <_strtod_l+0x456>
 800fed2:	9a04      	ldr	r2, [sp, #16]
 800fed4:	9b04      	ldr	r3, [sp, #16]
 800fed6:	2a00      	cmp	r2, #0
 800fed8:	f1c3 0300 	rsb	r3, r3, #0
 800fedc:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8010100 <_strtod_l+0x860>
 800fee0:	bfa8      	it	ge
 800fee2:	2300      	movge	r3, #0
 800fee4:	ed9f ab88 	vldr	d10, [pc, #544]	; 8010108 <_strtod_l+0x868>
 800fee8:	ed9f bb89 	vldr	d11, [pc, #548]	; 8010110 <_strtod_l+0x870>
 800feec:	930e      	str	r3, [sp, #56]	; 0x38
 800feee:	2500      	movs	r5, #0
 800fef0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fef4:	9310      	str	r3, [sp, #64]	; 0x40
 800fef6:	46a8      	mov	r8, r5
 800fef8:	9b06      	ldr	r3, [sp, #24]
 800fefa:	4620      	mov	r0, r4
 800fefc:	6859      	ldr	r1, [r3, #4]
 800fefe:	f001 fc6e 	bl	80117de <_Balloc>
 800ff02:	4681      	mov	r9, r0
 800ff04:	2800      	cmp	r0, #0
 800ff06:	f43f aefa 	beq.w	800fcfe <_strtod_l+0x45e>
 800ff0a:	9b06      	ldr	r3, [sp, #24]
 800ff0c:	691a      	ldr	r2, [r3, #16]
 800ff0e:	3202      	adds	r2, #2
 800ff10:	f103 010c 	add.w	r1, r3, #12
 800ff14:	0092      	lsls	r2, r2, #2
 800ff16:	300c      	adds	r0, #12
 800ff18:	f001 fc56 	bl	80117c8 <memcpy>
 800ff1c:	aa1a      	add	r2, sp, #104	; 0x68
 800ff1e:	a919      	add	r1, sp, #100	; 0x64
 800ff20:	ec4b ab10 	vmov	d0, sl, fp
 800ff24:	4620      	mov	r0, r4
 800ff26:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ff2a:	f001 ff99 	bl	8011e60 <__d2b>
 800ff2e:	9018      	str	r0, [sp, #96]	; 0x60
 800ff30:	2800      	cmp	r0, #0
 800ff32:	f43f aee4 	beq.w	800fcfe <_strtod_l+0x45e>
 800ff36:	2101      	movs	r1, #1
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f001 fd62 	bl	8011a02 <__i2b>
 800ff3e:	4680      	mov	r8, r0
 800ff40:	2800      	cmp	r0, #0
 800ff42:	f43f aedc 	beq.w	800fcfe <_strtod_l+0x45e>
 800ff46:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ff48:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ff4a:	2e00      	cmp	r6, #0
 800ff4c:	bfb1      	iteee	lt
 800ff4e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800ff50:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ff52:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800ff54:	18f3      	addge	r3, r6, r3
 800ff56:	bfba      	itte	lt
 800ff58:	1b98      	sublt	r0, r3, r6
 800ff5a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ff5c:	9308      	strge	r3, [sp, #32]
 800ff5e:	eba6 0607 	sub.w	r6, r6, r7
 800ff62:	bfb8      	it	lt
 800ff64:	9308      	strlt	r3, [sp, #32]
 800ff66:	4416      	add	r6, r2
 800ff68:	4b6c      	ldr	r3, [pc, #432]	; (801011c <_strtod_l+0x87c>)
 800ff6a:	3e01      	subs	r6, #1
 800ff6c:	429e      	cmp	r6, r3
 800ff6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ff72:	f280 80b4 	bge.w	80100de <_strtod_l+0x83e>
 800ff76:	1b9b      	subs	r3, r3, r6
 800ff78:	2b1f      	cmp	r3, #31
 800ff7a:	eba2 0203 	sub.w	r2, r2, r3
 800ff7e:	f04f 0101 	mov.w	r1, #1
 800ff82:	f300 80a0 	bgt.w	80100c6 <_strtod_l+0x826>
 800ff86:	fa01 f303 	lsl.w	r3, r1, r3
 800ff8a:	9311      	str	r3, [sp, #68]	; 0x44
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff90:	9b08      	ldr	r3, [sp, #32]
 800ff92:	4413      	add	r3, r2
 800ff94:	4402      	add	r2, r0
 800ff96:	18be      	adds	r6, r7, r2
 800ff98:	9a08      	ldr	r2, [sp, #32]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	bfa8      	it	ge
 800ff9e:	461a      	movge	r2, r3
 800ffa0:	42b2      	cmp	r2, r6
 800ffa2:	bfa8      	it	ge
 800ffa4:	4632      	movge	r2, r6
 800ffa6:	2a00      	cmp	r2, #0
 800ffa8:	dd04      	ble.n	800ffb4 <_strtod_l+0x714>
 800ffaa:	9908      	ldr	r1, [sp, #32]
 800ffac:	1a9b      	subs	r3, r3, r2
 800ffae:	1ab6      	subs	r6, r6, r2
 800ffb0:	1a8a      	subs	r2, r1, r2
 800ffb2:	9208      	str	r2, [sp, #32]
 800ffb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ffb6:	b1c2      	cbz	r2, 800ffea <_strtod_l+0x74a>
 800ffb8:	4641      	mov	r1, r8
 800ffba:	4620      	mov	r0, r4
 800ffbc:	9315      	str	r3, [sp, #84]	; 0x54
 800ffbe:	f001 fdbf 	bl	8011b40 <__pow5mult>
 800ffc2:	4680      	mov	r8, r0
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	f43f ae9a 	beq.w	800fcfe <_strtod_l+0x45e>
 800ffca:	4601      	mov	r1, r0
 800ffcc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f001 fd20 	bl	8011a14 <__multiply>
 800ffd4:	900c      	str	r0, [sp, #48]	; 0x30
 800ffd6:	2800      	cmp	r0, #0
 800ffd8:	f43f ae91 	beq.w	800fcfe <_strtod_l+0x45e>
 800ffdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ffde:	4620      	mov	r0, r4
 800ffe0:	f001 fc31 	bl	8011846 <_Bfree>
 800ffe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ffe6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffe8:	9218      	str	r2, [sp, #96]	; 0x60
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	dc7c      	bgt.n	80100e8 <_strtod_l+0x848>
 800ffee:	9b04      	ldr	r3, [sp, #16]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	dd08      	ble.n	8010006 <_strtod_l+0x766>
 800fff4:	4649      	mov	r1, r9
 800fff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fff8:	4620      	mov	r0, r4
 800fffa:	f001 fda1 	bl	8011b40 <__pow5mult>
 800fffe:	4681      	mov	r9, r0
 8010000:	2800      	cmp	r0, #0
 8010002:	f43f ae7c 	beq.w	800fcfe <_strtod_l+0x45e>
 8010006:	2e00      	cmp	r6, #0
 8010008:	dd08      	ble.n	801001c <_strtod_l+0x77c>
 801000a:	4649      	mov	r1, r9
 801000c:	4632      	mov	r2, r6
 801000e:	4620      	mov	r0, r4
 8010010:	f001 fde4 	bl	8011bdc <__lshift>
 8010014:	4681      	mov	r9, r0
 8010016:	2800      	cmp	r0, #0
 8010018:	f43f ae71 	beq.w	800fcfe <_strtod_l+0x45e>
 801001c:	9b08      	ldr	r3, [sp, #32]
 801001e:	2b00      	cmp	r3, #0
 8010020:	dd08      	ble.n	8010034 <_strtod_l+0x794>
 8010022:	4641      	mov	r1, r8
 8010024:	461a      	mov	r2, r3
 8010026:	4620      	mov	r0, r4
 8010028:	f001 fdd8 	bl	8011bdc <__lshift>
 801002c:	4680      	mov	r8, r0
 801002e:	2800      	cmp	r0, #0
 8010030:	f43f ae65 	beq.w	800fcfe <_strtod_l+0x45e>
 8010034:	464a      	mov	r2, r9
 8010036:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010038:	4620      	mov	r0, r4
 801003a:	f001 fe3d 	bl	8011cb8 <__mdiff>
 801003e:	4605      	mov	r5, r0
 8010040:	2800      	cmp	r0, #0
 8010042:	f43f ae5c 	beq.w	800fcfe <_strtod_l+0x45e>
 8010046:	68c3      	ldr	r3, [r0, #12]
 8010048:	930c      	str	r3, [sp, #48]	; 0x30
 801004a:	2300      	movs	r3, #0
 801004c:	60c3      	str	r3, [r0, #12]
 801004e:	4641      	mov	r1, r8
 8010050:	f001 fe18 	bl	8011c84 <__mcmp>
 8010054:	2800      	cmp	r0, #0
 8010056:	da63      	bge.n	8010120 <_strtod_l+0x880>
 8010058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801005a:	b9e3      	cbnz	r3, 8010096 <_strtod_l+0x7f6>
 801005c:	f1ba 0f00 	cmp.w	sl, #0
 8010060:	d119      	bne.n	8010096 <_strtod_l+0x7f6>
 8010062:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010066:	b9b3      	cbnz	r3, 8010096 <_strtod_l+0x7f6>
 8010068:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801006c:	0d1b      	lsrs	r3, r3, #20
 801006e:	051b      	lsls	r3, r3, #20
 8010070:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010074:	d90f      	bls.n	8010096 <_strtod_l+0x7f6>
 8010076:	696b      	ldr	r3, [r5, #20]
 8010078:	b913      	cbnz	r3, 8010080 <_strtod_l+0x7e0>
 801007a:	692b      	ldr	r3, [r5, #16]
 801007c:	2b01      	cmp	r3, #1
 801007e:	dd0a      	ble.n	8010096 <_strtod_l+0x7f6>
 8010080:	4629      	mov	r1, r5
 8010082:	2201      	movs	r2, #1
 8010084:	4620      	mov	r0, r4
 8010086:	f001 fda9 	bl	8011bdc <__lshift>
 801008a:	4641      	mov	r1, r8
 801008c:	4605      	mov	r5, r0
 801008e:	f001 fdf9 	bl	8011c84 <__mcmp>
 8010092:	2800      	cmp	r0, #0
 8010094:	dc75      	bgt.n	8010182 <_strtod_l+0x8e2>
 8010096:	2f00      	cmp	r7, #0
 8010098:	d17f      	bne.n	801019a <_strtod_l+0x8fa>
 801009a:	e63a      	b.n	800fd12 <_strtod_l+0x472>
 801009c:	07d6      	lsls	r6, r2, #31
 801009e:	d508      	bpl.n	80100b2 <_strtod_l+0x812>
 80100a0:	ed9d 6b06 	vldr	d6, [sp, #24]
 80100a4:	ed91 7b00 	vldr	d7, [r1]
 80100a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80100ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80100b0:	2001      	movs	r0, #1
 80100b2:	1052      	asrs	r2, r2, #1
 80100b4:	3108      	adds	r1, #8
 80100b6:	e6db      	b.n	800fe70 <_strtod_l+0x5d0>
 80100b8:	f04f 31ff 	mov.w	r1, #4294967295
 80100bc:	fa01 f202 	lsl.w	r2, r1, r2
 80100c0:	ea02 0a0a 	and.w	sl, r2, sl
 80100c4:	e6f3      	b.n	800feae <_strtod_l+0x60e>
 80100c6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80100ca:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80100ce:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80100d2:	36e2      	adds	r6, #226	; 0xe2
 80100d4:	fa01 f306 	lsl.w	r3, r1, r6
 80100d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80100da:	9111      	str	r1, [sp, #68]	; 0x44
 80100dc:	e758      	b.n	800ff90 <_strtod_l+0x6f0>
 80100de:	2300      	movs	r3, #0
 80100e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80100e2:	2301      	movs	r3, #1
 80100e4:	9311      	str	r3, [sp, #68]	; 0x44
 80100e6:	e753      	b.n	800ff90 <_strtod_l+0x6f0>
 80100e8:	461a      	mov	r2, r3
 80100ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80100ec:	4620      	mov	r0, r4
 80100ee:	f001 fd75 	bl	8011bdc <__lshift>
 80100f2:	9018      	str	r0, [sp, #96]	; 0x60
 80100f4:	2800      	cmp	r0, #0
 80100f6:	f47f af7a 	bne.w	800ffee <_strtod_l+0x74e>
 80100fa:	e600      	b.n	800fcfe <_strtod_l+0x45e>
 80100fc:	f3af 8000 	nop.w
 8010100:	94a03595 	.word	0x94a03595
 8010104:	3fdfffff 	.word	0x3fdfffff
 8010108:	35afe535 	.word	0x35afe535
 801010c:	3fe00000 	.word	0x3fe00000
 8010110:	94a03595 	.word	0x94a03595
 8010114:	3fcfffff 	.word	0x3fcfffff
 8010118:	08012b08 	.word	0x08012b08
 801011c:	fffffc02 	.word	0xfffffc02
 8010120:	f8cd b020 	str.w	fp, [sp, #32]
 8010124:	f040 8085 	bne.w	8010232 <_strtod_l+0x992>
 8010128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801012a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801012e:	b322      	cbz	r2, 801017a <_strtod_l+0x8da>
 8010130:	4ab7      	ldr	r2, [pc, #732]	; (8010410 <_strtod_l+0xb70>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d154      	bne.n	80101e0 <_strtod_l+0x940>
 8010136:	4651      	mov	r1, sl
 8010138:	b1e7      	cbz	r7, 8010174 <_strtod_l+0x8d4>
 801013a:	4bb6      	ldr	r3, [pc, #728]	; (8010414 <_strtod_l+0xb74>)
 801013c:	465a      	mov	r2, fp
 801013e:	4013      	ands	r3, r2
 8010140:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010144:	f04f 32ff 	mov.w	r2, #4294967295
 8010148:	d803      	bhi.n	8010152 <_strtod_l+0x8b2>
 801014a:	0d1b      	lsrs	r3, r3, #20
 801014c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010150:	409a      	lsls	r2, r3
 8010152:	4291      	cmp	r1, r2
 8010154:	d144      	bne.n	80101e0 <_strtod_l+0x940>
 8010156:	4bb0      	ldr	r3, [pc, #704]	; (8010418 <_strtod_l+0xb78>)
 8010158:	9a08      	ldr	r2, [sp, #32]
 801015a:	429a      	cmp	r2, r3
 801015c:	d102      	bne.n	8010164 <_strtod_l+0x8c4>
 801015e:	3101      	adds	r1, #1
 8010160:	f43f adcd 	beq.w	800fcfe <_strtod_l+0x45e>
 8010164:	4bab      	ldr	r3, [pc, #684]	; (8010414 <_strtod_l+0xb74>)
 8010166:	9a08      	ldr	r2, [sp, #32]
 8010168:	401a      	ands	r2, r3
 801016a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801016e:	f04f 0a00 	mov.w	sl, #0
 8010172:	e790      	b.n	8010096 <_strtod_l+0x7f6>
 8010174:	f04f 32ff 	mov.w	r2, #4294967295
 8010178:	e7eb      	b.n	8010152 <_strtod_l+0x8b2>
 801017a:	bb8b      	cbnz	r3, 80101e0 <_strtod_l+0x940>
 801017c:	f1ba 0f00 	cmp.w	sl, #0
 8010180:	d12e      	bne.n	80101e0 <_strtod_l+0x940>
 8010182:	465b      	mov	r3, fp
 8010184:	4aa3      	ldr	r2, [pc, #652]	; (8010414 <_strtod_l+0xb74>)
 8010186:	b30f      	cbz	r7, 80101cc <_strtod_l+0x92c>
 8010188:	ea02 010b 	and.w	r1, r2, fp
 801018c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010190:	dc1c      	bgt.n	80101cc <_strtod_l+0x92c>
 8010192:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010196:	f77f ae48 	ble.w	800fe2a <_strtod_l+0x58a>
 801019a:	4aa0      	ldr	r2, [pc, #640]	; (801041c <_strtod_l+0xb7c>)
 801019c:	2300      	movs	r3, #0
 801019e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80101a2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80101a6:	ec4b ab17 	vmov	d7, sl, fp
 80101aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80101ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80101b2:	9b05      	ldr	r3, [sp, #20]
 80101b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f47f adaa 	bne.w	800fd12 <_strtod_l+0x472>
 80101be:	9b04      	ldr	r3, [sp, #16]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	f47f ada6 	bne.w	800fd12 <_strtod_l+0x472>
 80101c6:	2322      	movs	r3, #34	; 0x22
 80101c8:	6023      	str	r3, [r4, #0]
 80101ca:	e5a2      	b.n	800fd12 <_strtod_l+0x472>
 80101cc:	4013      	ands	r3, r2
 80101ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80101d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80101d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80101da:	f04f 3aff 	mov.w	sl, #4294967295
 80101de:	e75a      	b.n	8010096 <_strtod_l+0x7f6>
 80101e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80101e2:	b18b      	cbz	r3, 8010208 <_strtod_l+0x968>
 80101e4:	9a08      	ldr	r2, [sp, #32]
 80101e6:	4213      	tst	r3, r2
 80101e8:	f43f af55 	beq.w	8010096 <_strtod_l+0x7f6>
 80101ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101ee:	463a      	mov	r2, r7
 80101f0:	4650      	mov	r0, sl
 80101f2:	4659      	mov	r1, fp
 80101f4:	b163      	cbz	r3, 8010210 <_strtod_l+0x970>
 80101f6:	f7ff fb39 	bl	800f86c <sulp>
 80101fa:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80101fe:	ee37 7b00 	vadd.f64	d7, d7, d0
 8010202:	ec5b ab17 	vmov	sl, fp, d7
 8010206:	e746      	b.n	8010096 <_strtod_l+0x7f6>
 8010208:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801020a:	ea13 0f0a 	tst.w	r3, sl
 801020e:	e7eb      	b.n	80101e8 <_strtod_l+0x948>
 8010210:	f7ff fb2c 	bl	800f86c <sulp>
 8010214:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8010218:	ee37 7b40 	vsub.f64	d7, d7, d0
 801021c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010220:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010228:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801022c:	f43f adfd 	beq.w	800fe2a <_strtod_l+0x58a>
 8010230:	e731      	b.n	8010096 <_strtod_l+0x7f6>
 8010232:	4641      	mov	r1, r8
 8010234:	4628      	mov	r0, r5
 8010236:	f001 fe62 	bl	8011efe <__ratio>
 801023a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801023e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8010242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010246:	d869      	bhi.n	801031c <_strtod_l+0xa7c>
 8010248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801024a:	2b00      	cmp	r3, #0
 801024c:	d045      	beq.n	80102da <_strtod_l+0xa3a>
 801024e:	4b74      	ldr	r3, [pc, #464]	; (8010420 <_strtod_l+0xb80>)
 8010250:	2200      	movs	r2, #0
 8010252:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8010256:	9808      	ldr	r0, [sp, #32]
 8010258:	496e      	ldr	r1, [pc, #440]	; (8010414 <_strtod_l+0xb74>)
 801025a:	ea00 0601 	and.w	r6, r0, r1
 801025e:	4871      	ldr	r0, [pc, #452]	; (8010424 <_strtod_l+0xb84>)
 8010260:	4286      	cmp	r6, r0
 8010262:	f040 8089 	bne.w	8010378 <_strtod_l+0xad8>
 8010266:	910f      	str	r1, [sp, #60]	; 0x3c
 8010268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801026c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8010270:	9908      	ldr	r1, [sp, #32]
 8010272:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8010276:	ec4b ab10 	vmov	d0, sl, fp
 801027a:	ec43 2b1c 	vmov	d12, r2, r3
 801027e:	f001 fd79 	bl	8011d74 <__ulp>
 8010282:	ec4b ab1d 	vmov	d13, sl, fp
 8010286:	eeac db00 	vfma.f64	d13, d12, d0
 801028a:	ed8d db08 	vstr	d13, [sp, #32]
 801028e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010290:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010292:	4a65      	ldr	r2, [pc, #404]	; (8010428 <_strtod_l+0xb88>)
 8010294:	4019      	ands	r1, r3
 8010296:	4291      	cmp	r1, r2
 8010298:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801029c:	d948      	bls.n	8010330 <_strtod_l+0xa90>
 801029e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80102a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80102a4:	4293      	cmp	r3, r2
 80102a6:	d103      	bne.n	80102b0 <_strtod_l+0xa10>
 80102a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102aa:	3301      	adds	r3, #1
 80102ac:	f43f ad27 	beq.w	800fcfe <_strtod_l+0x45e>
 80102b0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8010418 <_strtod_l+0xb78>
 80102b4:	f04f 3aff 	mov.w	sl, #4294967295
 80102b8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80102ba:	4620      	mov	r0, r4
 80102bc:	f001 fac3 	bl	8011846 <_Bfree>
 80102c0:	4649      	mov	r1, r9
 80102c2:	4620      	mov	r0, r4
 80102c4:	f001 fabf 	bl	8011846 <_Bfree>
 80102c8:	4641      	mov	r1, r8
 80102ca:	4620      	mov	r0, r4
 80102cc:	f001 fabb 	bl	8011846 <_Bfree>
 80102d0:	4629      	mov	r1, r5
 80102d2:	4620      	mov	r0, r4
 80102d4:	f001 fab7 	bl	8011846 <_Bfree>
 80102d8:	e60e      	b.n	800fef8 <_strtod_l+0x658>
 80102da:	f1ba 0f00 	cmp.w	sl, #0
 80102de:	d113      	bne.n	8010308 <_strtod_l+0xa68>
 80102e0:	9b08      	ldr	r3, [sp, #32]
 80102e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102e6:	b9b3      	cbnz	r3, 8010316 <_strtod_l+0xa76>
 80102e8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80102ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80102f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80102f8:	d401      	bmi.n	80102fe <_strtod_l+0xa5e>
 80102fa:	ee20 8b08 	vmul.f64	d8, d0, d8
 80102fe:	eeb1 7b48 	vneg.f64	d7, d8
 8010302:	ec53 2b17 	vmov	r2, r3, d7
 8010306:	e7a6      	b.n	8010256 <_strtod_l+0x9b6>
 8010308:	f1ba 0f01 	cmp.w	sl, #1
 801030c:	d103      	bne.n	8010316 <_strtod_l+0xa76>
 801030e:	9b08      	ldr	r3, [sp, #32]
 8010310:	2b00      	cmp	r3, #0
 8010312:	f43f ad8a 	beq.w	800fe2a <_strtod_l+0x58a>
 8010316:	2200      	movs	r2, #0
 8010318:	4b44      	ldr	r3, [pc, #272]	; (801042c <_strtod_l+0xb8c>)
 801031a:	e79a      	b.n	8010252 <_strtod_l+0x9b2>
 801031c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801031e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8010322:	ee20 8b08 	vmul.f64	d8, d0, d8
 8010326:	2b00      	cmp	r3, #0
 8010328:	d0e9      	beq.n	80102fe <_strtod_l+0xa5e>
 801032a:	ec53 2b18 	vmov	r2, r3, d8
 801032e:	e792      	b.n	8010256 <_strtod_l+0x9b6>
 8010330:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010334:	2f00      	cmp	r7, #0
 8010336:	d1bf      	bne.n	80102b8 <_strtod_l+0xa18>
 8010338:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801033c:	0d1b      	lsrs	r3, r3, #20
 801033e:	051b      	lsls	r3, r3, #20
 8010340:	429e      	cmp	r6, r3
 8010342:	d1b9      	bne.n	80102b8 <_strtod_l+0xa18>
 8010344:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8010348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801034a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801034e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010352:	b92b      	cbnz	r3, 8010360 <_strtod_l+0xac0>
 8010354:	f1ba 0f00 	cmp.w	sl, #0
 8010358:	d102      	bne.n	8010360 <_strtod_l+0xac0>
 801035a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 801035e:	b3d2      	cbz	r2, 80103d6 <_strtod_l+0xb36>
 8010360:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8010364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010368:	f53f acd3 	bmi.w	800fd12 <_strtod_l+0x472>
 801036c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8010370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010374:	dda0      	ble.n	80102b8 <_strtod_l+0xa18>
 8010376:	e4cc      	b.n	800fd12 <_strtod_l+0x472>
 8010378:	b1ef      	cbz	r7, 80103b6 <_strtod_l+0xb16>
 801037a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 801037e:	d81a      	bhi.n	80103b6 <_strtod_l+0xb16>
 8010380:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8010408 <_strtod_l+0xb68>
 8010384:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801038c:	d810      	bhi.n	80103b0 <_strtod_l+0xb10>
 801038e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8010392:	ee17 3a90 	vmov	r3, s15
 8010396:	2b00      	cmp	r3, #0
 8010398:	bf08      	it	eq
 801039a:	2301      	moveq	r3, #1
 801039c:	ee07 3a90 	vmov	s15, r3
 80103a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103a2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80103a6:	b99b      	cbnz	r3, 80103d0 <_strtod_l+0xb30>
 80103a8:	eeb1 7b48 	vneg.f64	d7, d8
 80103ac:	ec53 2b17 	vmov	r2, r3, d7
 80103b0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80103b4:	1b8b      	subs	r3, r1, r6
 80103b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80103ba:	ec43 2b1c 	vmov	d12, r2, r3
 80103be:	f001 fcd9 	bl	8011d74 <__ulp>
 80103c2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80103c6:	eeac 7b00 	vfma.f64	d7, d12, d0
 80103ca:	ec5b ab17 	vmov	sl, fp, d7
 80103ce:	e7b1      	b.n	8010334 <_strtod_l+0xa94>
 80103d0:	ec53 2b18 	vmov	r2, r3, d8
 80103d4:	e7ec      	b.n	80103b0 <_strtod_l+0xb10>
 80103d6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80103da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103de:	f57f af6b 	bpl.w	80102b8 <_strtod_l+0xa18>
 80103e2:	e496      	b.n	800fd12 <_strtod_l+0x472>
 80103e4:	2300      	movs	r3, #0
 80103e6:	930d      	str	r3, [sp, #52]	; 0x34
 80103e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80103ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103ec:	6013      	str	r3, [r2, #0]
 80103ee:	f7ff ba9d 	b.w	800f92c <_strtod_l+0x8c>
 80103f2:	2a65      	cmp	r2, #101	; 0x65
 80103f4:	f04f 0100 	mov.w	r1, #0
 80103f8:	f43f ab97 	beq.w	800fb2a <_strtod_l+0x28a>
 80103fc:	2701      	movs	r7, #1
 80103fe:	460b      	mov	r3, r1
 8010400:	9704      	str	r7, [sp, #16]
 8010402:	f7ff bb0a 	b.w	800fa1a <_strtod_l+0x17a>
 8010406:	bf00      	nop
 8010408:	ffc00000 	.word	0xffc00000
 801040c:	41dfffff 	.word	0x41dfffff
 8010410:	000fffff 	.word	0x000fffff
 8010414:	7ff00000 	.word	0x7ff00000
 8010418:	7fefffff 	.word	0x7fefffff
 801041c:	39500000 	.word	0x39500000
 8010420:	3ff00000 	.word	0x3ff00000
 8010424:	7fe00000 	.word	0x7fe00000
 8010428:	7c9fffff 	.word	0x7c9fffff
 801042c:	bff00000 	.word	0xbff00000

08010430 <_strtod_r>:
 8010430:	4b05      	ldr	r3, [pc, #20]	; (8010448 <_strtod_r+0x18>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	b410      	push	{r4}
 8010436:	6a1b      	ldr	r3, [r3, #32]
 8010438:	4c04      	ldr	r4, [pc, #16]	; (801044c <_strtod_r+0x1c>)
 801043a:	2b00      	cmp	r3, #0
 801043c:	bf08      	it	eq
 801043e:	4623      	moveq	r3, r4
 8010440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010444:	f7ff ba2c 	b.w	800f8a0 <_strtod_l>
 8010448:	20000028 	.word	0x20000028
 801044c:	2000008c 	.word	0x2000008c

08010450 <_strtol_l.isra.0>:
 8010450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010454:	4680      	mov	r8, r0
 8010456:	4689      	mov	r9, r1
 8010458:	4692      	mov	sl, r2
 801045a:	461e      	mov	r6, r3
 801045c:	460f      	mov	r7, r1
 801045e:	463d      	mov	r5, r7
 8010460:	9808      	ldr	r0, [sp, #32]
 8010462:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010466:	f001 f981 	bl	801176c <__locale_ctype_ptr_l>
 801046a:	4420      	add	r0, r4
 801046c:	7843      	ldrb	r3, [r0, #1]
 801046e:	f013 0308 	ands.w	r3, r3, #8
 8010472:	d132      	bne.n	80104da <_strtol_l.isra.0+0x8a>
 8010474:	2c2d      	cmp	r4, #45	; 0x2d
 8010476:	d132      	bne.n	80104de <_strtol_l.isra.0+0x8e>
 8010478:	787c      	ldrb	r4, [r7, #1]
 801047a:	1cbd      	adds	r5, r7, #2
 801047c:	2201      	movs	r2, #1
 801047e:	2e00      	cmp	r6, #0
 8010480:	d05d      	beq.n	801053e <_strtol_l.isra.0+0xee>
 8010482:	2e10      	cmp	r6, #16
 8010484:	d109      	bne.n	801049a <_strtol_l.isra.0+0x4a>
 8010486:	2c30      	cmp	r4, #48	; 0x30
 8010488:	d107      	bne.n	801049a <_strtol_l.isra.0+0x4a>
 801048a:	782b      	ldrb	r3, [r5, #0]
 801048c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010490:	2b58      	cmp	r3, #88	; 0x58
 8010492:	d14f      	bne.n	8010534 <_strtol_l.isra.0+0xe4>
 8010494:	786c      	ldrb	r4, [r5, #1]
 8010496:	2610      	movs	r6, #16
 8010498:	3502      	adds	r5, #2
 801049a:	2a00      	cmp	r2, #0
 801049c:	bf14      	ite	ne
 801049e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80104a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80104a6:	2700      	movs	r7, #0
 80104a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80104ac:	4638      	mov	r0, r7
 80104ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80104b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80104b6:	2b09      	cmp	r3, #9
 80104b8:	d817      	bhi.n	80104ea <_strtol_l.isra.0+0x9a>
 80104ba:	461c      	mov	r4, r3
 80104bc:	42a6      	cmp	r6, r4
 80104be:	dd23      	ble.n	8010508 <_strtol_l.isra.0+0xb8>
 80104c0:	1c7b      	adds	r3, r7, #1
 80104c2:	d007      	beq.n	80104d4 <_strtol_l.isra.0+0x84>
 80104c4:	4584      	cmp	ip, r0
 80104c6:	d31c      	bcc.n	8010502 <_strtol_l.isra.0+0xb2>
 80104c8:	d101      	bne.n	80104ce <_strtol_l.isra.0+0x7e>
 80104ca:	45a6      	cmp	lr, r4
 80104cc:	db19      	blt.n	8010502 <_strtol_l.isra.0+0xb2>
 80104ce:	fb00 4006 	mla	r0, r0, r6, r4
 80104d2:	2701      	movs	r7, #1
 80104d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80104d8:	e7eb      	b.n	80104b2 <_strtol_l.isra.0+0x62>
 80104da:	462f      	mov	r7, r5
 80104dc:	e7bf      	b.n	801045e <_strtol_l.isra.0+0xe>
 80104de:	2c2b      	cmp	r4, #43	; 0x2b
 80104e0:	bf04      	itt	eq
 80104e2:	1cbd      	addeq	r5, r7, #2
 80104e4:	787c      	ldrbeq	r4, [r7, #1]
 80104e6:	461a      	mov	r2, r3
 80104e8:	e7c9      	b.n	801047e <_strtol_l.isra.0+0x2e>
 80104ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80104ee:	2b19      	cmp	r3, #25
 80104f0:	d801      	bhi.n	80104f6 <_strtol_l.isra.0+0xa6>
 80104f2:	3c37      	subs	r4, #55	; 0x37
 80104f4:	e7e2      	b.n	80104bc <_strtol_l.isra.0+0x6c>
 80104f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80104fa:	2b19      	cmp	r3, #25
 80104fc:	d804      	bhi.n	8010508 <_strtol_l.isra.0+0xb8>
 80104fe:	3c57      	subs	r4, #87	; 0x57
 8010500:	e7dc      	b.n	80104bc <_strtol_l.isra.0+0x6c>
 8010502:	f04f 37ff 	mov.w	r7, #4294967295
 8010506:	e7e5      	b.n	80104d4 <_strtol_l.isra.0+0x84>
 8010508:	1c7b      	adds	r3, r7, #1
 801050a:	d108      	bne.n	801051e <_strtol_l.isra.0+0xce>
 801050c:	2322      	movs	r3, #34	; 0x22
 801050e:	f8c8 3000 	str.w	r3, [r8]
 8010512:	4608      	mov	r0, r1
 8010514:	f1ba 0f00 	cmp.w	sl, #0
 8010518:	d107      	bne.n	801052a <_strtol_l.isra.0+0xda>
 801051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801051e:	b102      	cbz	r2, 8010522 <_strtol_l.isra.0+0xd2>
 8010520:	4240      	negs	r0, r0
 8010522:	f1ba 0f00 	cmp.w	sl, #0
 8010526:	d0f8      	beq.n	801051a <_strtol_l.isra.0+0xca>
 8010528:	b10f      	cbz	r7, 801052e <_strtol_l.isra.0+0xde>
 801052a:	f105 39ff 	add.w	r9, r5, #4294967295
 801052e:	f8ca 9000 	str.w	r9, [sl]
 8010532:	e7f2      	b.n	801051a <_strtol_l.isra.0+0xca>
 8010534:	2430      	movs	r4, #48	; 0x30
 8010536:	2e00      	cmp	r6, #0
 8010538:	d1af      	bne.n	801049a <_strtol_l.isra.0+0x4a>
 801053a:	2608      	movs	r6, #8
 801053c:	e7ad      	b.n	801049a <_strtol_l.isra.0+0x4a>
 801053e:	2c30      	cmp	r4, #48	; 0x30
 8010540:	d0a3      	beq.n	801048a <_strtol_l.isra.0+0x3a>
 8010542:	260a      	movs	r6, #10
 8010544:	e7a9      	b.n	801049a <_strtol_l.isra.0+0x4a>
	...

08010548 <_strtol_r>:
 8010548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801054a:	4c06      	ldr	r4, [pc, #24]	; (8010564 <_strtol_r+0x1c>)
 801054c:	4d06      	ldr	r5, [pc, #24]	; (8010568 <_strtol_r+0x20>)
 801054e:	6824      	ldr	r4, [r4, #0]
 8010550:	6a24      	ldr	r4, [r4, #32]
 8010552:	2c00      	cmp	r4, #0
 8010554:	bf08      	it	eq
 8010556:	462c      	moveq	r4, r5
 8010558:	9400      	str	r4, [sp, #0]
 801055a:	f7ff ff79 	bl	8010450 <_strtol_l.isra.0>
 801055e:	b003      	add	sp, #12
 8010560:	bd30      	pop	{r4, r5, pc}
 8010562:	bf00      	nop
 8010564:	20000028 	.word	0x20000028
 8010568:	2000008c 	.word	0x2000008c

0801056c <quorem>:
 801056c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010570:	6903      	ldr	r3, [r0, #16]
 8010572:	690c      	ldr	r4, [r1, #16]
 8010574:	42a3      	cmp	r3, r4
 8010576:	4680      	mov	r8, r0
 8010578:	f2c0 8082 	blt.w	8010680 <quorem+0x114>
 801057c:	3c01      	subs	r4, #1
 801057e:	f101 0714 	add.w	r7, r1, #20
 8010582:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8010586:	f100 0614 	add.w	r6, r0, #20
 801058a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801058e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8010592:	eb06 030c 	add.w	r3, r6, ip
 8010596:	3501      	adds	r5, #1
 8010598:	eb07 090c 	add.w	r9, r7, ip
 801059c:	9301      	str	r3, [sp, #4]
 801059e:	fbb0 f5f5 	udiv	r5, r0, r5
 80105a2:	b395      	cbz	r5, 801060a <quorem+0x9e>
 80105a4:	f04f 0a00 	mov.w	sl, #0
 80105a8:	4638      	mov	r0, r7
 80105aa:	46b6      	mov	lr, r6
 80105ac:	46d3      	mov	fp, sl
 80105ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80105b2:	b293      	uxth	r3, r2
 80105b4:	fb05 a303 	mla	r3, r5, r3, sl
 80105b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80105bc:	b29b      	uxth	r3, r3
 80105be:	ebab 0303 	sub.w	r3, fp, r3
 80105c2:	0c12      	lsrs	r2, r2, #16
 80105c4:	f8de b000 	ldr.w	fp, [lr]
 80105c8:	fb05 a202 	mla	r2, r5, r2, sl
 80105cc:	fa13 f38b 	uxtah	r3, r3, fp
 80105d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80105d4:	fa1f fb82 	uxth.w	fp, r2
 80105d8:	f8de 2000 	ldr.w	r2, [lr]
 80105dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80105e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80105ea:	4581      	cmp	r9, r0
 80105ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80105f0:	f84e 3b04 	str.w	r3, [lr], #4
 80105f4:	d2db      	bcs.n	80105ae <quorem+0x42>
 80105f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80105fa:	b933      	cbnz	r3, 801060a <quorem+0x9e>
 80105fc:	9b01      	ldr	r3, [sp, #4]
 80105fe:	3b04      	subs	r3, #4
 8010600:	429e      	cmp	r6, r3
 8010602:	461a      	mov	r2, r3
 8010604:	d330      	bcc.n	8010668 <quorem+0xfc>
 8010606:	f8c8 4010 	str.w	r4, [r8, #16]
 801060a:	4640      	mov	r0, r8
 801060c:	f001 fb3a 	bl	8011c84 <__mcmp>
 8010610:	2800      	cmp	r0, #0
 8010612:	db25      	blt.n	8010660 <quorem+0xf4>
 8010614:	3501      	adds	r5, #1
 8010616:	4630      	mov	r0, r6
 8010618:	f04f 0c00 	mov.w	ip, #0
 801061c:	f857 2b04 	ldr.w	r2, [r7], #4
 8010620:	f8d0 e000 	ldr.w	lr, [r0]
 8010624:	b293      	uxth	r3, r2
 8010626:	ebac 0303 	sub.w	r3, ip, r3
 801062a:	0c12      	lsrs	r2, r2, #16
 801062c:	fa13 f38e 	uxtah	r3, r3, lr
 8010630:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010634:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010638:	b29b      	uxth	r3, r3
 801063a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801063e:	45b9      	cmp	r9, r7
 8010640:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010644:	f840 3b04 	str.w	r3, [r0], #4
 8010648:	d2e8      	bcs.n	801061c <quorem+0xb0>
 801064a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801064e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010652:	b92a      	cbnz	r2, 8010660 <quorem+0xf4>
 8010654:	3b04      	subs	r3, #4
 8010656:	429e      	cmp	r6, r3
 8010658:	461a      	mov	r2, r3
 801065a:	d30b      	bcc.n	8010674 <quorem+0x108>
 801065c:	f8c8 4010 	str.w	r4, [r8, #16]
 8010660:	4628      	mov	r0, r5
 8010662:	b003      	add	sp, #12
 8010664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010668:	6812      	ldr	r2, [r2, #0]
 801066a:	3b04      	subs	r3, #4
 801066c:	2a00      	cmp	r2, #0
 801066e:	d1ca      	bne.n	8010606 <quorem+0x9a>
 8010670:	3c01      	subs	r4, #1
 8010672:	e7c5      	b.n	8010600 <quorem+0x94>
 8010674:	6812      	ldr	r2, [r2, #0]
 8010676:	3b04      	subs	r3, #4
 8010678:	2a00      	cmp	r2, #0
 801067a:	d1ef      	bne.n	801065c <quorem+0xf0>
 801067c:	3c01      	subs	r4, #1
 801067e:	e7ea      	b.n	8010656 <quorem+0xea>
 8010680:	2000      	movs	r0, #0
 8010682:	e7ee      	b.n	8010662 <quorem+0xf6>
 8010684:	0000      	movs	r0, r0
	...

08010688 <_dtoa_r>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	ec57 6b10 	vmov	r6, r7, d0
 8010690:	b095      	sub	sp, #84	; 0x54
 8010692:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010694:	9108      	str	r1, [sp, #32]
 8010696:	4604      	mov	r4, r0
 8010698:	920a      	str	r2, [sp, #40]	; 0x28
 801069a:	9311      	str	r3, [sp, #68]	; 0x44
 801069c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80106a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80106a4:	b93d      	cbnz	r5, 80106b6 <_dtoa_r+0x2e>
 80106a6:	2010      	movs	r0, #16
 80106a8:	f001 f874 	bl	8011794 <malloc>
 80106ac:	6260      	str	r0, [r4, #36]	; 0x24
 80106ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80106b2:	6005      	str	r5, [r0, #0]
 80106b4:	60c5      	str	r5, [r0, #12]
 80106b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106b8:	6819      	ldr	r1, [r3, #0]
 80106ba:	b151      	cbz	r1, 80106d2 <_dtoa_r+0x4a>
 80106bc:	685a      	ldr	r2, [r3, #4]
 80106be:	604a      	str	r2, [r1, #4]
 80106c0:	2301      	movs	r3, #1
 80106c2:	4093      	lsls	r3, r2
 80106c4:	608b      	str	r3, [r1, #8]
 80106c6:	4620      	mov	r0, r4
 80106c8:	f001 f8bd 	bl	8011846 <_Bfree>
 80106cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80106ce:	2200      	movs	r2, #0
 80106d0:	601a      	str	r2, [r3, #0]
 80106d2:	1e3b      	subs	r3, r7, #0
 80106d4:	bfb9      	ittee	lt
 80106d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80106da:	9303      	strlt	r3, [sp, #12]
 80106dc:	2300      	movge	r3, #0
 80106de:	f8c8 3000 	strge.w	r3, [r8]
 80106e2:	9d03      	ldr	r5, [sp, #12]
 80106e4:	4bac      	ldr	r3, [pc, #688]	; (8010998 <_dtoa_r+0x310>)
 80106e6:	bfbc      	itt	lt
 80106e8:	2201      	movlt	r2, #1
 80106ea:	f8c8 2000 	strlt.w	r2, [r8]
 80106ee:	43ab      	bics	r3, r5
 80106f0:	d11b      	bne.n	801072a <_dtoa_r+0xa2>
 80106f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80106f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80106f8:	6013      	str	r3, [r2, #0]
 80106fa:	9b02      	ldr	r3, [sp, #8]
 80106fc:	b923      	cbnz	r3, 8010708 <_dtoa_r+0x80>
 80106fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010702:	2d00      	cmp	r5, #0
 8010704:	f000 84dd 	beq.w	80110c2 <_dtoa_r+0xa3a>
 8010708:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801070a:	b953      	cbnz	r3, 8010722 <_dtoa_r+0x9a>
 801070c:	4ba3      	ldr	r3, [pc, #652]	; (801099c <_dtoa_r+0x314>)
 801070e:	e020      	b.n	8010752 <_dtoa_r+0xca>
 8010710:	4ba3      	ldr	r3, [pc, #652]	; (80109a0 <_dtoa_r+0x318>)
 8010712:	9304      	str	r3, [sp, #16]
 8010714:	3308      	adds	r3, #8
 8010716:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010718:	6013      	str	r3, [r2, #0]
 801071a:	9804      	ldr	r0, [sp, #16]
 801071c:	b015      	add	sp, #84	; 0x54
 801071e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010722:	4b9e      	ldr	r3, [pc, #632]	; (801099c <_dtoa_r+0x314>)
 8010724:	9304      	str	r3, [sp, #16]
 8010726:	3303      	adds	r3, #3
 8010728:	e7f5      	b.n	8010716 <_dtoa_r+0x8e>
 801072a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801072e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010736:	ed8d 7b04 	vstr	d7, [sp, #16]
 801073a:	d10c      	bne.n	8010756 <_dtoa_r+0xce>
 801073c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801073e:	2301      	movs	r3, #1
 8010740:	6013      	str	r3, [r2, #0]
 8010742:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010744:	2b00      	cmp	r3, #0
 8010746:	f000 84b9 	beq.w	80110bc <_dtoa_r+0xa34>
 801074a:	4b96      	ldr	r3, [pc, #600]	; (80109a4 <_dtoa_r+0x31c>)
 801074c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801074e:	6013      	str	r3, [r2, #0]
 8010750:	3b01      	subs	r3, #1
 8010752:	9304      	str	r3, [sp, #16]
 8010754:	e7e1      	b.n	801071a <_dtoa_r+0x92>
 8010756:	a913      	add	r1, sp, #76	; 0x4c
 8010758:	aa12      	add	r2, sp, #72	; 0x48
 801075a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801075e:	4620      	mov	r0, r4
 8010760:	f001 fb7e 	bl	8011e60 <__d2b>
 8010764:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8010768:	9001      	str	r0, [sp, #4]
 801076a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801076c:	2e00      	cmp	r6, #0
 801076e:	d046      	beq.n	80107fe <_dtoa_r+0x176>
 8010770:	9805      	ldr	r0, [sp, #20]
 8010772:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8010776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801077a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801077e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010782:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8010786:	2700      	movs	r7, #0
 8010788:	ee07 aa90 	vmov	s15, sl
 801078c:	ec43 2b16 	vmov	d6, r2, r3
 8010790:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010794:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8010980 <_dtoa_r+0x2f8>
 8010798:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801079c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80107a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8010988 <_dtoa_r+0x300>
 80107a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80107a8:	eeb0 7b46 	vmov.f64	d7, d6
 80107ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8010990 <_dtoa_r+0x308>
 80107b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80107b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80107b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80107bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c0:	ee16 ba90 	vmov	fp, s13
 80107c4:	d508      	bpl.n	80107d8 <_dtoa_r+0x150>
 80107c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80107ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80107ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107d2:	bf18      	it	ne
 80107d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80107d8:	f1bb 0f16 	cmp.w	fp, #22
 80107dc:	d834      	bhi.n	8010848 <_dtoa_r+0x1c0>
 80107de:	4b72      	ldr	r3, [pc, #456]	; (80109a8 <_dtoa_r+0x320>)
 80107e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80107e4:	ed93 7b00 	vldr	d7, [r3]
 80107e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80107ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80107f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f4:	dd01      	ble.n	80107fa <_dtoa_r+0x172>
 80107f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80107fa:	2300      	movs	r3, #0
 80107fc:	e025      	b.n	801084a <_dtoa_r+0x1c2>
 80107fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010800:	eb01 0a03 	add.w	sl, r1, r3
 8010804:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8010808:	2b20      	cmp	r3, #32
 801080a:	dd17      	ble.n	801083c <_dtoa_r+0x1b4>
 801080c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8010810:	9a02      	ldr	r2, [sp, #8]
 8010812:	409d      	lsls	r5, r3
 8010814:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8010818:	fa22 f303 	lsr.w	r3, r2, r3
 801081c:	432b      	orrs	r3, r5
 801081e:	ee07 3a90 	vmov	s15, r3
 8010822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010826:	f10a 3aff 	add.w	sl, sl, #4294967295
 801082a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801082e:	9805      	ldr	r0, [sp, #20]
 8010830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010834:	2701      	movs	r7, #1
 8010836:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801083a:	e7a5      	b.n	8010788 <_dtoa_r+0x100>
 801083c:	9a02      	ldr	r2, [sp, #8]
 801083e:	f1c3 0320 	rsb	r3, r3, #32
 8010842:	fa02 f303 	lsl.w	r3, r2, r3
 8010846:	e7ea      	b.n	801081e <_dtoa_r+0x196>
 8010848:	2301      	movs	r3, #1
 801084a:	eba1 0a0a 	sub.w	sl, r1, sl
 801084e:	9310      	str	r3, [sp, #64]	; 0x40
 8010850:	f1ba 0301 	subs.w	r3, sl, #1
 8010854:	9307      	str	r3, [sp, #28]
 8010856:	bf43      	ittte	mi
 8010858:	2300      	movmi	r3, #0
 801085a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801085e:	9307      	strmi	r3, [sp, #28]
 8010860:	f04f 0a00 	movpl.w	sl, #0
 8010864:	f1bb 0f00 	cmp.w	fp, #0
 8010868:	db19      	blt.n	801089e <_dtoa_r+0x216>
 801086a:	9b07      	ldr	r3, [sp, #28]
 801086c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8010870:	445b      	add	r3, fp
 8010872:	9307      	str	r3, [sp, #28]
 8010874:	f04f 0800 	mov.w	r8, #0
 8010878:	9b08      	ldr	r3, [sp, #32]
 801087a:	2b09      	cmp	r3, #9
 801087c:	d866      	bhi.n	801094c <_dtoa_r+0x2c4>
 801087e:	2b05      	cmp	r3, #5
 8010880:	bfc4      	itt	gt
 8010882:	3b04      	subgt	r3, #4
 8010884:	9308      	strgt	r3, [sp, #32]
 8010886:	9b08      	ldr	r3, [sp, #32]
 8010888:	f1a3 0302 	sub.w	r3, r3, #2
 801088c:	bfcc      	ite	gt
 801088e:	2500      	movgt	r5, #0
 8010890:	2501      	movle	r5, #1
 8010892:	2b03      	cmp	r3, #3
 8010894:	d866      	bhi.n	8010964 <_dtoa_r+0x2dc>
 8010896:	e8df f003 	tbb	[pc, r3]
 801089a:	5755      	.short	0x5755
 801089c:	4909      	.short	0x4909
 801089e:	2300      	movs	r3, #0
 80108a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80108a4:	f1cb 0800 	rsb	r8, fp, #0
 80108a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80108aa:	e7e5      	b.n	8010878 <_dtoa_r+0x1f0>
 80108ac:	2301      	movs	r3, #1
 80108ae:	9309      	str	r3, [sp, #36]	; 0x24
 80108b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	dd59      	ble.n	801096a <_dtoa_r+0x2e2>
 80108b6:	9306      	str	r3, [sp, #24]
 80108b8:	4699      	mov	r9, r3
 80108ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80108bc:	2200      	movs	r2, #0
 80108be:	6072      	str	r2, [r6, #4]
 80108c0:	2204      	movs	r2, #4
 80108c2:	f102 0014 	add.w	r0, r2, #20
 80108c6:	4298      	cmp	r0, r3
 80108c8:	6871      	ldr	r1, [r6, #4]
 80108ca:	d953      	bls.n	8010974 <_dtoa_r+0x2ec>
 80108cc:	4620      	mov	r0, r4
 80108ce:	f000 ff86 	bl	80117de <_Balloc>
 80108d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80108d4:	6030      	str	r0, [r6, #0]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	9304      	str	r3, [sp, #16]
 80108da:	f1b9 0f0e 	cmp.w	r9, #14
 80108de:	f200 80c2 	bhi.w	8010a66 <_dtoa_r+0x3de>
 80108e2:	2d00      	cmp	r5, #0
 80108e4:	f000 80bf 	beq.w	8010a66 <_dtoa_r+0x3de>
 80108e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108ec:	f1bb 0f00 	cmp.w	fp, #0
 80108f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80108f4:	f340 80e6 	ble.w	8010ac4 <_dtoa_r+0x43c>
 80108f8:	4a2b      	ldr	r2, [pc, #172]	; (80109a8 <_dtoa_r+0x320>)
 80108fa:	f00b 030f 	and.w	r3, fp, #15
 80108fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010902:	ed93 7b00 	vldr	d7, [r3]
 8010906:	ea4f 132b 	mov.w	r3, fp, asr #4
 801090a:	06da      	lsls	r2, r3, #27
 801090c:	f140 80d8 	bpl.w	8010ac0 <_dtoa_r+0x438>
 8010910:	4a26      	ldr	r2, [pc, #152]	; (80109ac <_dtoa_r+0x324>)
 8010912:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8010916:	ed92 6b08 	vldr	d6, [r2, #32]
 801091a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801091e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010922:	f003 030f 	and.w	r3, r3, #15
 8010926:	2203      	movs	r2, #3
 8010928:	4920      	ldr	r1, [pc, #128]	; (80109ac <_dtoa_r+0x324>)
 801092a:	e04a      	b.n	80109c2 <_dtoa_r+0x33a>
 801092c:	2301      	movs	r3, #1
 801092e:	9309      	str	r3, [sp, #36]	; 0x24
 8010930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010932:	445b      	add	r3, fp
 8010934:	f103 0901 	add.w	r9, r3, #1
 8010938:	9306      	str	r3, [sp, #24]
 801093a:	464b      	mov	r3, r9
 801093c:	2b01      	cmp	r3, #1
 801093e:	bfb8      	it	lt
 8010940:	2301      	movlt	r3, #1
 8010942:	e7ba      	b.n	80108ba <_dtoa_r+0x232>
 8010944:	2300      	movs	r3, #0
 8010946:	e7b2      	b.n	80108ae <_dtoa_r+0x226>
 8010948:	2300      	movs	r3, #0
 801094a:	e7f0      	b.n	801092e <_dtoa_r+0x2a6>
 801094c:	2501      	movs	r5, #1
 801094e:	2300      	movs	r3, #0
 8010950:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8010954:	f04f 33ff 	mov.w	r3, #4294967295
 8010958:	9306      	str	r3, [sp, #24]
 801095a:	4699      	mov	r9, r3
 801095c:	2200      	movs	r2, #0
 801095e:	2312      	movs	r3, #18
 8010960:	920a      	str	r2, [sp, #40]	; 0x28
 8010962:	e7aa      	b.n	80108ba <_dtoa_r+0x232>
 8010964:	2301      	movs	r3, #1
 8010966:	9309      	str	r3, [sp, #36]	; 0x24
 8010968:	e7f4      	b.n	8010954 <_dtoa_r+0x2cc>
 801096a:	2301      	movs	r3, #1
 801096c:	9306      	str	r3, [sp, #24]
 801096e:	4699      	mov	r9, r3
 8010970:	461a      	mov	r2, r3
 8010972:	e7f5      	b.n	8010960 <_dtoa_r+0x2d8>
 8010974:	3101      	adds	r1, #1
 8010976:	6071      	str	r1, [r6, #4]
 8010978:	0052      	lsls	r2, r2, #1
 801097a:	e7a2      	b.n	80108c2 <_dtoa_r+0x23a>
 801097c:	f3af 8000 	nop.w
 8010980:	636f4361 	.word	0x636f4361
 8010984:	3fd287a7 	.word	0x3fd287a7
 8010988:	8b60c8b3 	.word	0x8b60c8b3
 801098c:	3fc68a28 	.word	0x3fc68a28
 8010990:	509f79fb 	.word	0x509f79fb
 8010994:	3fd34413 	.word	0x3fd34413
 8010998:	7ff00000 	.word	0x7ff00000
 801099c:	08012b39 	.word	0x08012b39
 80109a0:	08012b30 	.word	0x08012b30
 80109a4:	08012ab1 	.word	0x08012ab1
 80109a8:	08012b70 	.word	0x08012b70
 80109ac:	08012b48 	.word	0x08012b48
 80109b0:	07de      	lsls	r6, r3, #31
 80109b2:	d504      	bpl.n	80109be <_dtoa_r+0x336>
 80109b4:	ed91 6b00 	vldr	d6, [r1]
 80109b8:	3201      	adds	r2, #1
 80109ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80109be:	105b      	asrs	r3, r3, #1
 80109c0:	3108      	adds	r1, #8
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1f4      	bne.n	80109b0 <_dtoa_r+0x328>
 80109c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80109ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80109ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80109d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 80a7 	beq.w	8010b28 <_dtoa_r+0x4a0>
 80109da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80109de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80109e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80109e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109ea:	f140 809d 	bpl.w	8010b28 <_dtoa_r+0x4a0>
 80109ee:	f1b9 0f00 	cmp.w	r9, #0
 80109f2:	f000 8099 	beq.w	8010b28 <_dtoa_r+0x4a0>
 80109f6:	9b06      	ldr	r3, [sp, #24]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	dd30      	ble.n	8010a5e <_dtoa_r+0x3d6>
 80109fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010a00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a08:	9d06      	ldr	r5, [sp, #24]
 8010a0a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8010a0e:	3201      	adds	r2, #1
 8010a10:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010a14:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010a18:	ee07 2a90 	vmov	s15, r2
 8010a1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a20:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010a24:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010a28:	9a03      	ldr	r2, [sp, #12]
 8010a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a2e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8010a32:	2d00      	cmp	r5, #0
 8010a34:	d17b      	bne.n	8010b2e <_dtoa_r+0x4a6>
 8010a36:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010a3a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010a3e:	ec41 0b17 	vmov	d7, r0, r1
 8010a42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4a:	f300 8253 	bgt.w	8010ef4 <_dtoa_r+0x86c>
 8010a4e:	eeb1 7b47 	vneg.f64	d7, d7
 8010a52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a5a:	f100 8249 	bmi.w	8010ef0 <_dtoa_r+0x868>
 8010a5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010a62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010a66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f2c0 8119 	blt.w	8010ca0 <_dtoa_r+0x618>
 8010a6e:	f1bb 0f0e 	cmp.w	fp, #14
 8010a72:	f300 8115 	bgt.w	8010ca0 <_dtoa_r+0x618>
 8010a76:	4bc3      	ldr	r3, [pc, #780]	; (8010d84 <_dtoa_r+0x6fc>)
 8010a78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010a7c:	ed93 6b00 	vldr	d6, [r3]
 8010a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	f280 80ba 	bge.w	8010bfc <_dtoa_r+0x574>
 8010a88:	f1b9 0f00 	cmp.w	r9, #0
 8010a8c:	f300 80b6 	bgt.w	8010bfc <_dtoa_r+0x574>
 8010a90:	f040 822d 	bne.w	8010eee <_dtoa_r+0x866>
 8010a94:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010a98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010aa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa8:	464d      	mov	r5, r9
 8010aaa:	464f      	mov	r7, r9
 8010aac:	f280 8204 	bge.w	8010eb8 <_dtoa_r+0x830>
 8010ab0:	9b04      	ldr	r3, [sp, #16]
 8010ab2:	9a04      	ldr	r2, [sp, #16]
 8010ab4:	1c5e      	adds	r6, r3, #1
 8010ab6:	2331      	movs	r3, #49	; 0x31
 8010ab8:	7013      	strb	r3, [r2, #0]
 8010aba:	f10b 0b01 	add.w	fp, fp, #1
 8010abe:	e1ff      	b.n	8010ec0 <_dtoa_r+0x838>
 8010ac0:	2202      	movs	r2, #2
 8010ac2:	e731      	b.n	8010928 <_dtoa_r+0x2a0>
 8010ac4:	d02e      	beq.n	8010b24 <_dtoa_r+0x49c>
 8010ac6:	f1cb 0300 	rsb	r3, fp, #0
 8010aca:	4aae      	ldr	r2, [pc, #696]	; (8010d84 <_dtoa_r+0x6fc>)
 8010acc:	f003 010f 	and.w	r1, r3, #15
 8010ad0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010ad4:	ed92 7b00 	vldr	d7, [r2]
 8010ad8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8010adc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010ae0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010ae4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8010ae8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010aec:	49a6      	ldr	r1, [pc, #664]	; (8010d88 <_dtoa_r+0x700>)
 8010aee:	111b      	asrs	r3, r3, #4
 8010af0:	2000      	movs	r0, #0
 8010af2:	2202      	movs	r2, #2
 8010af4:	b93b      	cbnz	r3, 8010b06 <_dtoa_r+0x47e>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	f43f af6b 	beq.w	80109d2 <_dtoa_r+0x34a>
 8010afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b04:	e765      	b.n	80109d2 <_dtoa_r+0x34a>
 8010b06:	07dd      	lsls	r5, r3, #31
 8010b08:	d509      	bpl.n	8010b1e <_dtoa_r+0x496>
 8010b0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010b0e:	ed91 7b00 	vldr	d7, [r1]
 8010b12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010b16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010b1a:	3201      	adds	r2, #1
 8010b1c:	2001      	movs	r0, #1
 8010b1e:	105b      	asrs	r3, r3, #1
 8010b20:	3108      	adds	r1, #8
 8010b22:	e7e7      	b.n	8010af4 <_dtoa_r+0x46c>
 8010b24:	2202      	movs	r2, #2
 8010b26:	e754      	b.n	80109d2 <_dtoa_r+0x34a>
 8010b28:	465b      	mov	r3, fp
 8010b2a:	464d      	mov	r5, r9
 8010b2c:	e770      	b.n	8010a10 <_dtoa_r+0x388>
 8010b2e:	4a95      	ldr	r2, [pc, #596]	; (8010d84 <_dtoa_r+0x6fc>)
 8010b30:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8010b34:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b3a:	ec41 0b17 	vmov	d7, r0, r1
 8010b3e:	b35a      	cbz	r2, 8010b98 <_dtoa_r+0x510>
 8010b40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010b44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010b48:	9e04      	ldr	r6, [sp, #16]
 8010b4a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010b4e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010b52:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010b56:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010b5a:	ee14 2a90 	vmov	r2, s9
 8010b5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010b62:	3230      	adds	r2, #48	; 0x30
 8010b64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010b68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b70:	f806 2b01 	strb.w	r2, [r6], #1
 8010b74:	d43b      	bmi.n	8010bee <_dtoa_r+0x566>
 8010b76:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010b7a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b82:	d472      	bmi.n	8010c6a <_dtoa_r+0x5e2>
 8010b84:	9a04      	ldr	r2, [sp, #16]
 8010b86:	1ab2      	subs	r2, r6, r2
 8010b88:	4295      	cmp	r5, r2
 8010b8a:	f77f af68 	ble.w	8010a5e <_dtoa_r+0x3d6>
 8010b8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010b92:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010b96:	e7de      	b.n	8010b56 <_dtoa_r+0x4ce>
 8010b98:	9a04      	ldr	r2, [sp, #16]
 8010b9a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010b9e:	1956      	adds	r6, r2, r5
 8010ba0:	4611      	mov	r1, r2
 8010ba2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010ba6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010baa:	ee14 2a90 	vmov	r2, s9
 8010bae:	3230      	adds	r2, #48	; 0x30
 8010bb0:	f801 2b01 	strb.w	r2, [r1], #1
 8010bb4:	42b1      	cmp	r1, r6
 8010bb6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010bba:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010bbe:	d11a      	bne.n	8010bf6 <_dtoa_r+0x56e>
 8010bc0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010bc4:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010bc8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd0:	dc4b      	bgt.n	8010c6a <_dtoa_r+0x5e2>
 8010bd2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010bd6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bde:	f57f af3e 	bpl.w	8010a5e <_dtoa_r+0x3d6>
 8010be2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010be6:	2a30      	cmp	r2, #48	; 0x30
 8010be8:	f106 31ff 	add.w	r1, r6, #4294967295
 8010bec:	d001      	beq.n	8010bf2 <_dtoa_r+0x56a>
 8010bee:	469b      	mov	fp, r3
 8010bf0:	e02a      	b.n	8010c48 <_dtoa_r+0x5c0>
 8010bf2:	460e      	mov	r6, r1
 8010bf4:	e7f5      	b.n	8010be2 <_dtoa_r+0x55a>
 8010bf6:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010bfa:	e7d4      	b.n	8010ba6 <_dtoa_r+0x51e>
 8010bfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010c00:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010c04:	9e04      	ldr	r6, [sp, #16]
 8010c06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010c0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010c0e:	ee15 3a10 	vmov	r3, s10
 8010c12:	3330      	adds	r3, #48	; 0x30
 8010c14:	f806 3b01 	strb.w	r3, [r6], #1
 8010c18:	9b04      	ldr	r3, [sp, #16]
 8010c1a:	1af3      	subs	r3, r6, r3
 8010c1c:	4599      	cmp	r9, r3
 8010c1e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010c22:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010c26:	d133      	bne.n	8010c90 <_dtoa_r+0x608>
 8010c28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010c2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c34:	dc18      	bgt.n	8010c68 <_dtoa_r+0x5e0>
 8010c36:	eeb4 7b46 	vcmp.f64	d7, d6
 8010c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3e:	d103      	bne.n	8010c48 <_dtoa_r+0x5c0>
 8010c40:	ee15 3a10 	vmov	r3, s10
 8010c44:	07db      	lsls	r3, r3, #31
 8010c46:	d40f      	bmi.n	8010c68 <_dtoa_r+0x5e0>
 8010c48:	9901      	ldr	r1, [sp, #4]
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f000 fdfb 	bl	8011846 <_Bfree>
 8010c50:	2300      	movs	r3, #0
 8010c52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010c54:	7033      	strb	r3, [r6, #0]
 8010c56:	f10b 0301 	add.w	r3, fp, #1
 8010c5a:	6013      	str	r3, [r2, #0]
 8010c5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	f43f ad5b 	beq.w	801071a <_dtoa_r+0x92>
 8010c64:	601e      	str	r6, [r3, #0]
 8010c66:	e558      	b.n	801071a <_dtoa_r+0x92>
 8010c68:	465b      	mov	r3, fp
 8010c6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010c6e:	2939      	cmp	r1, #57	; 0x39
 8010c70:	f106 32ff 	add.w	r2, r6, #4294967295
 8010c74:	d106      	bne.n	8010c84 <_dtoa_r+0x5fc>
 8010c76:	9904      	ldr	r1, [sp, #16]
 8010c78:	4291      	cmp	r1, r2
 8010c7a:	d107      	bne.n	8010c8c <_dtoa_r+0x604>
 8010c7c:	2230      	movs	r2, #48	; 0x30
 8010c7e:	700a      	strb	r2, [r1, #0]
 8010c80:	3301      	adds	r3, #1
 8010c82:	460a      	mov	r2, r1
 8010c84:	7811      	ldrb	r1, [r2, #0]
 8010c86:	3101      	adds	r1, #1
 8010c88:	7011      	strb	r1, [r2, #0]
 8010c8a:	e7b0      	b.n	8010bee <_dtoa_r+0x566>
 8010c8c:	4616      	mov	r6, r2
 8010c8e:	e7ec      	b.n	8010c6a <_dtoa_r+0x5e2>
 8010c90:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9c:	d1b3      	bne.n	8010c06 <_dtoa_r+0x57e>
 8010c9e:	e7d3      	b.n	8010c48 <_dtoa_r+0x5c0>
 8010ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ca2:	2a00      	cmp	r2, #0
 8010ca4:	f000 808d 	beq.w	8010dc2 <_dtoa_r+0x73a>
 8010ca8:	9a08      	ldr	r2, [sp, #32]
 8010caa:	2a01      	cmp	r2, #1
 8010cac:	dc72      	bgt.n	8010d94 <_dtoa_r+0x70c>
 8010cae:	2f00      	cmp	r7, #0
 8010cb0:	d06c      	beq.n	8010d8c <_dtoa_r+0x704>
 8010cb2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010cb6:	4645      	mov	r5, r8
 8010cb8:	4656      	mov	r6, sl
 8010cba:	9a07      	ldr	r2, [sp, #28]
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	441a      	add	r2, r3
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	449a      	add	sl, r3
 8010cc4:	9207      	str	r2, [sp, #28]
 8010cc6:	f000 fe9c 	bl	8011a02 <__i2b>
 8010cca:	4607      	mov	r7, r0
 8010ccc:	2e00      	cmp	r6, #0
 8010cce:	dd0b      	ble.n	8010ce8 <_dtoa_r+0x660>
 8010cd0:	9b07      	ldr	r3, [sp, #28]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	dd08      	ble.n	8010ce8 <_dtoa_r+0x660>
 8010cd6:	42b3      	cmp	r3, r6
 8010cd8:	9a07      	ldr	r2, [sp, #28]
 8010cda:	bfa8      	it	ge
 8010cdc:	4633      	movge	r3, r6
 8010cde:	ebaa 0a03 	sub.w	sl, sl, r3
 8010ce2:	1af6      	subs	r6, r6, r3
 8010ce4:	1ad3      	subs	r3, r2, r3
 8010ce6:	9307      	str	r3, [sp, #28]
 8010ce8:	f1b8 0f00 	cmp.w	r8, #0
 8010cec:	d01d      	beq.n	8010d2a <_dtoa_r+0x6a2>
 8010cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d06a      	beq.n	8010dca <_dtoa_r+0x742>
 8010cf4:	b18d      	cbz	r5, 8010d1a <_dtoa_r+0x692>
 8010cf6:	4639      	mov	r1, r7
 8010cf8:	462a      	mov	r2, r5
 8010cfa:	4620      	mov	r0, r4
 8010cfc:	f000 ff20 	bl	8011b40 <__pow5mult>
 8010d00:	9a01      	ldr	r2, [sp, #4]
 8010d02:	4601      	mov	r1, r0
 8010d04:	4607      	mov	r7, r0
 8010d06:	4620      	mov	r0, r4
 8010d08:	f000 fe84 	bl	8011a14 <__multiply>
 8010d0c:	9901      	ldr	r1, [sp, #4]
 8010d0e:	900c      	str	r0, [sp, #48]	; 0x30
 8010d10:	4620      	mov	r0, r4
 8010d12:	f000 fd98 	bl	8011846 <_Bfree>
 8010d16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	ebb8 0205 	subs.w	r2, r8, r5
 8010d1e:	d004      	beq.n	8010d2a <_dtoa_r+0x6a2>
 8010d20:	9901      	ldr	r1, [sp, #4]
 8010d22:	4620      	mov	r0, r4
 8010d24:	f000 ff0c 	bl	8011b40 <__pow5mult>
 8010d28:	9001      	str	r0, [sp, #4]
 8010d2a:	2101      	movs	r1, #1
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f000 fe68 	bl	8011a02 <__i2b>
 8010d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d34:	4605      	mov	r5, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	f000 81ca 	beq.w	80110d0 <_dtoa_r+0xa48>
 8010d3c:	461a      	mov	r2, r3
 8010d3e:	4601      	mov	r1, r0
 8010d40:	4620      	mov	r0, r4
 8010d42:	f000 fefd 	bl	8011b40 <__pow5mult>
 8010d46:	9b08      	ldr	r3, [sp, #32]
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	4605      	mov	r5, r0
 8010d4c:	dc44      	bgt.n	8010dd8 <_dtoa_r+0x750>
 8010d4e:	9b02      	ldr	r3, [sp, #8]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d13c      	bne.n	8010dce <_dtoa_r+0x746>
 8010d54:	9b03      	ldr	r3, [sp, #12]
 8010d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d137      	bne.n	8010dce <_dtoa_r+0x746>
 8010d5e:	9b03      	ldr	r3, [sp, #12]
 8010d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010d64:	0d1b      	lsrs	r3, r3, #20
 8010d66:	051b      	lsls	r3, r3, #20
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d033      	beq.n	8010dd4 <_dtoa_r+0x74c>
 8010d6c:	9b07      	ldr	r3, [sp, #28]
 8010d6e:	3301      	adds	r3, #1
 8010d70:	f10a 0a01 	add.w	sl, sl, #1
 8010d74:	9307      	str	r3, [sp, #28]
 8010d76:	f04f 0801 	mov.w	r8, #1
 8010d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d7c:	bb73      	cbnz	r3, 8010ddc <_dtoa_r+0x754>
 8010d7e:	2001      	movs	r0, #1
 8010d80:	e034      	b.n	8010dec <_dtoa_r+0x764>
 8010d82:	bf00      	nop
 8010d84:	08012b70 	.word	0x08012b70
 8010d88:	08012b48 	.word	0x08012b48
 8010d8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010d8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010d92:	e790      	b.n	8010cb6 <_dtoa_r+0x62e>
 8010d94:	f109 35ff 	add.w	r5, r9, #4294967295
 8010d98:	45a8      	cmp	r8, r5
 8010d9a:	bfbf      	itttt	lt
 8010d9c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8010d9e:	eba5 0808 	sublt.w	r8, r5, r8
 8010da2:	4443      	addlt	r3, r8
 8010da4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8010da6:	bfb6      	itet	lt
 8010da8:	46a8      	movlt	r8, r5
 8010daa:	eba8 0505 	subge.w	r5, r8, r5
 8010dae:	2500      	movlt	r5, #0
 8010db0:	f1b9 0f00 	cmp.w	r9, #0
 8010db4:	bfb9      	ittee	lt
 8010db6:	ebaa 0609 	sublt.w	r6, sl, r9
 8010dba:	2300      	movlt	r3, #0
 8010dbc:	4656      	movge	r6, sl
 8010dbe:	464b      	movge	r3, r9
 8010dc0:	e77b      	b.n	8010cba <_dtoa_r+0x632>
 8010dc2:	4645      	mov	r5, r8
 8010dc4:	4656      	mov	r6, sl
 8010dc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010dc8:	e780      	b.n	8010ccc <_dtoa_r+0x644>
 8010dca:	4642      	mov	r2, r8
 8010dcc:	e7a8      	b.n	8010d20 <_dtoa_r+0x698>
 8010dce:	f04f 0800 	mov.w	r8, #0
 8010dd2:	e7d2      	b.n	8010d7a <_dtoa_r+0x6f2>
 8010dd4:	4698      	mov	r8, r3
 8010dd6:	e7d0      	b.n	8010d7a <_dtoa_r+0x6f2>
 8010dd8:	f04f 0800 	mov.w	r8, #0
 8010ddc:	692b      	ldr	r3, [r5, #16]
 8010dde:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010de2:	6918      	ldr	r0, [r3, #16]
 8010de4:	f000 fdbf 	bl	8011966 <__hi0bits>
 8010de8:	f1c0 0020 	rsb	r0, r0, #32
 8010dec:	9b07      	ldr	r3, [sp, #28]
 8010dee:	4418      	add	r0, r3
 8010df0:	f010 001f 	ands.w	r0, r0, #31
 8010df4:	d047      	beq.n	8010e86 <_dtoa_r+0x7fe>
 8010df6:	f1c0 0320 	rsb	r3, r0, #32
 8010dfa:	2b04      	cmp	r3, #4
 8010dfc:	dd3b      	ble.n	8010e76 <_dtoa_r+0x7ee>
 8010dfe:	9b07      	ldr	r3, [sp, #28]
 8010e00:	f1c0 001c 	rsb	r0, r0, #28
 8010e04:	4482      	add	sl, r0
 8010e06:	4406      	add	r6, r0
 8010e08:	4403      	add	r3, r0
 8010e0a:	9307      	str	r3, [sp, #28]
 8010e0c:	f1ba 0f00 	cmp.w	sl, #0
 8010e10:	dd05      	ble.n	8010e1e <_dtoa_r+0x796>
 8010e12:	4652      	mov	r2, sl
 8010e14:	9901      	ldr	r1, [sp, #4]
 8010e16:	4620      	mov	r0, r4
 8010e18:	f000 fee0 	bl	8011bdc <__lshift>
 8010e1c:	9001      	str	r0, [sp, #4]
 8010e1e:	9b07      	ldr	r3, [sp, #28]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	dd05      	ble.n	8010e30 <_dtoa_r+0x7a8>
 8010e24:	4629      	mov	r1, r5
 8010e26:	461a      	mov	r2, r3
 8010e28:	4620      	mov	r0, r4
 8010e2a:	f000 fed7 	bl	8011bdc <__lshift>
 8010e2e:	4605      	mov	r5, r0
 8010e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e32:	b353      	cbz	r3, 8010e8a <_dtoa_r+0x802>
 8010e34:	4629      	mov	r1, r5
 8010e36:	9801      	ldr	r0, [sp, #4]
 8010e38:	f000 ff24 	bl	8011c84 <__mcmp>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	da24      	bge.n	8010e8a <_dtoa_r+0x802>
 8010e40:	2300      	movs	r3, #0
 8010e42:	220a      	movs	r2, #10
 8010e44:	9901      	ldr	r1, [sp, #4]
 8010e46:	4620      	mov	r0, r4
 8010e48:	f000 fd14 	bl	8011874 <__multadd>
 8010e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e4e:	9001      	str	r0, [sp, #4]
 8010e50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	f000 8142 	beq.w	80110de <_dtoa_r+0xa56>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	4639      	mov	r1, r7
 8010e5e:	220a      	movs	r2, #10
 8010e60:	4620      	mov	r0, r4
 8010e62:	f000 fd07 	bl	8011874 <__multadd>
 8010e66:	9b06      	ldr	r3, [sp, #24]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	4607      	mov	r7, r0
 8010e6c:	dc4b      	bgt.n	8010f06 <_dtoa_r+0x87e>
 8010e6e:	9b08      	ldr	r3, [sp, #32]
 8010e70:	2b02      	cmp	r3, #2
 8010e72:	dd48      	ble.n	8010f06 <_dtoa_r+0x87e>
 8010e74:	e011      	b.n	8010e9a <_dtoa_r+0x812>
 8010e76:	d0c9      	beq.n	8010e0c <_dtoa_r+0x784>
 8010e78:	9a07      	ldr	r2, [sp, #28]
 8010e7a:	331c      	adds	r3, #28
 8010e7c:	441a      	add	r2, r3
 8010e7e:	449a      	add	sl, r3
 8010e80:	441e      	add	r6, r3
 8010e82:	4613      	mov	r3, r2
 8010e84:	e7c1      	b.n	8010e0a <_dtoa_r+0x782>
 8010e86:	4603      	mov	r3, r0
 8010e88:	e7f6      	b.n	8010e78 <_dtoa_r+0x7f0>
 8010e8a:	f1b9 0f00 	cmp.w	r9, #0
 8010e8e:	dc34      	bgt.n	8010efa <_dtoa_r+0x872>
 8010e90:	9b08      	ldr	r3, [sp, #32]
 8010e92:	2b02      	cmp	r3, #2
 8010e94:	dd31      	ble.n	8010efa <_dtoa_r+0x872>
 8010e96:	f8cd 9018 	str.w	r9, [sp, #24]
 8010e9a:	9b06      	ldr	r3, [sp, #24]
 8010e9c:	b963      	cbnz	r3, 8010eb8 <_dtoa_r+0x830>
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	2205      	movs	r2, #5
 8010ea2:	4620      	mov	r0, r4
 8010ea4:	f000 fce6 	bl	8011874 <__multadd>
 8010ea8:	4601      	mov	r1, r0
 8010eaa:	4605      	mov	r5, r0
 8010eac:	9801      	ldr	r0, [sp, #4]
 8010eae:	f000 fee9 	bl	8011c84 <__mcmp>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	f73f adfc 	bgt.w	8010ab0 <_dtoa_r+0x428>
 8010eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eba:	9e04      	ldr	r6, [sp, #16]
 8010ebc:	ea6f 0b03 	mvn.w	fp, r3
 8010ec0:	f04f 0900 	mov.w	r9, #0
 8010ec4:	4629      	mov	r1, r5
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f000 fcbd 	bl	8011846 <_Bfree>
 8010ecc:	2f00      	cmp	r7, #0
 8010ece:	f43f aebb 	beq.w	8010c48 <_dtoa_r+0x5c0>
 8010ed2:	f1b9 0f00 	cmp.w	r9, #0
 8010ed6:	d005      	beq.n	8010ee4 <_dtoa_r+0x85c>
 8010ed8:	45b9      	cmp	r9, r7
 8010eda:	d003      	beq.n	8010ee4 <_dtoa_r+0x85c>
 8010edc:	4649      	mov	r1, r9
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f000 fcb1 	bl	8011846 <_Bfree>
 8010ee4:	4639      	mov	r1, r7
 8010ee6:	4620      	mov	r0, r4
 8010ee8:	f000 fcad 	bl	8011846 <_Bfree>
 8010eec:	e6ac      	b.n	8010c48 <_dtoa_r+0x5c0>
 8010eee:	2500      	movs	r5, #0
 8010ef0:	462f      	mov	r7, r5
 8010ef2:	e7e1      	b.n	8010eb8 <_dtoa_r+0x830>
 8010ef4:	469b      	mov	fp, r3
 8010ef6:	462f      	mov	r7, r5
 8010ef8:	e5da      	b.n	8010ab0 <_dtoa_r+0x428>
 8010efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010efc:	f8cd 9018 	str.w	r9, [sp, #24]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	f000 80f3 	beq.w	80110ec <_dtoa_r+0xa64>
 8010f06:	2e00      	cmp	r6, #0
 8010f08:	dd05      	ble.n	8010f16 <_dtoa_r+0x88e>
 8010f0a:	4639      	mov	r1, r7
 8010f0c:	4632      	mov	r2, r6
 8010f0e:	4620      	mov	r0, r4
 8010f10:	f000 fe64 	bl	8011bdc <__lshift>
 8010f14:	4607      	mov	r7, r0
 8010f16:	f1b8 0f00 	cmp.w	r8, #0
 8010f1a:	d04c      	beq.n	8010fb6 <_dtoa_r+0x92e>
 8010f1c:	6879      	ldr	r1, [r7, #4]
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f000 fc5d 	bl	80117de <_Balloc>
 8010f24:	693a      	ldr	r2, [r7, #16]
 8010f26:	3202      	adds	r2, #2
 8010f28:	4606      	mov	r6, r0
 8010f2a:	0092      	lsls	r2, r2, #2
 8010f2c:	f107 010c 	add.w	r1, r7, #12
 8010f30:	300c      	adds	r0, #12
 8010f32:	f000 fc49 	bl	80117c8 <memcpy>
 8010f36:	2201      	movs	r2, #1
 8010f38:	4631      	mov	r1, r6
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f000 fe4e 	bl	8011bdc <__lshift>
 8010f40:	9b02      	ldr	r3, [sp, #8]
 8010f42:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010f46:	f003 0301 	and.w	r3, r3, #1
 8010f4a:	46b9      	mov	r9, r7
 8010f4c:	9307      	str	r3, [sp, #28]
 8010f4e:	4607      	mov	r7, r0
 8010f50:	4629      	mov	r1, r5
 8010f52:	9801      	ldr	r0, [sp, #4]
 8010f54:	f7ff fb0a 	bl	801056c <quorem>
 8010f58:	4649      	mov	r1, r9
 8010f5a:	4606      	mov	r6, r0
 8010f5c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010f60:	9801      	ldr	r0, [sp, #4]
 8010f62:	f000 fe8f 	bl	8011c84 <__mcmp>
 8010f66:	463a      	mov	r2, r7
 8010f68:	9002      	str	r0, [sp, #8]
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	4620      	mov	r0, r4
 8010f6e:	f000 fea3 	bl	8011cb8 <__mdiff>
 8010f72:	68c3      	ldr	r3, [r0, #12]
 8010f74:	4602      	mov	r2, r0
 8010f76:	bb03      	cbnz	r3, 8010fba <_dtoa_r+0x932>
 8010f78:	4601      	mov	r1, r0
 8010f7a:	9009      	str	r0, [sp, #36]	; 0x24
 8010f7c:	9801      	ldr	r0, [sp, #4]
 8010f7e:	f000 fe81 	bl	8011c84 <__mcmp>
 8010f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f84:	4603      	mov	r3, r0
 8010f86:	4611      	mov	r1, r2
 8010f88:	4620      	mov	r0, r4
 8010f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f8c:	f000 fc5b 	bl	8011846 <_Bfree>
 8010f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f92:	b9a3      	cbnz	r3, 8010fbe <_dtoa_r+0x936>
 8010f94:	9a08      	ldr	r2, [sp, #32]
 8010f96:	b992      	cbnz	r2, 8010fbe <_dtoa_r+0x936>
 8010f98:	9a07      	ldr	r2, [sp, #28]
 8010f9a:	b982      	cbnz	r2, 8010fbe <_dtoa_r+0x936>
 8010f9c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010fa0:	d029      	beq.n	8010ff6 <_dtoa_r+0x96e>
 8010fa2:	9b02      	ldr	r3, [sp, #8]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	dd01      	ble.n	8010fac <_dtoa_r+0x924>
 8010fa8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8010fac:	f10a 0601 	add.w	r6, sl, #1
 8010fb0:	f88a 8000 	strb.w	r8, [sl]
 8010fb4:	e786      	b.n	8010ec4 <_dtoa_r+0x83c>
 8010fb6:	4638      	mov	r0, r7
 8010fb8:	e7c2      	b.n	8010f40 <_dtoa_r+0x8b8>
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e7e3      	b.n	8010f86 <_dtoa_r+0x8fe>
 8010fbe:	9a02      	ldr	r2, [sp, #8]
 8010fc0:	2a00      	cmp	r2, #0
 8010fc2:	db04      	blt.n	8010fce <_dtoa_r+0x946>
 8010fc4:	d124      	bne.n	8011010 <_dtoa_r+0x988>
 8010fc6:	9a08      	ldr	r2, [sp, #32]
 8010fc8:	bb12      	cbnz	r2, 8011010 <_dtoa_r+0x988>
 8010fca:	9a07      	ldr	r2, [sp, #28]
 8010fcc:	bb02      	cbnz	r2, 8011010 <_dtoa_r+0x988>
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	ddec      	ble.n	8010fac <_dtoa_r+0x924>
 8010fd2:	2201      	movs	r2, #1
 8010fd4:	9901      	ldr	r1, [sp, #4]
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f000 fe00 	bl	8011bdc <__lshift>
 8010fdc:	4629      	mov	r1, r5
 8010fde:	9001      	str	r0, [sp, #4]
 8010fe0:	f000 fe50 	bl	8011c84 <__mcmp>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	dc03      	bgt.n	8010ff0 <_dtoa_r+0x968>
 8010fe8:	d1e0      	bne.n	8010fac <_dtoa_r+0x924>
 8010fea:	f018 0f01 	tst.w	r8, #1
 8010fee:	d0dd      	beq.n	8010fac <_dtoa_r+0x924>
 8010ff0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010ff4:	d1d8      	bne.n	8010fa8 <_dtoa_r+0x920>
 8010ff6:	2339      	movs	r3, #57	; 0x39
 8010ff8:	f10a 0601 	add.w	r6, sl, #1
 8010ffc:	f88a 3000 	strb.w	r3, [sl]
 8011000:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011004:	2b39      	cmp	r3, #57	; 0x39
 8011006:	f106 32ff 	add.w	r2, r6, #4294967295
 801100a:	d04c      	beq.n	80110a6 <_dtoa_r+0xa1e>
 801100c:	3301      	adds	r3, #1
 801100e:	e051      	b.n	80110b4 <_dtoa_r+0xa2c>
 8011010:	2b00      	cmp	r3, #0
 8011012:	f10a 0601 	add.w	r6, sl, #1
 8011016:	dd05      	ble.n	8011024 <_dtoa_r+0x99c>
 8011018:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801101c:	d0eb      	beq.n	8010ff6 <_dtoa_r+0x96e>
 801101e:	f108 0801 	add.w	r8, r8, #1
 8011022:	e7c5      	b.n	8010fb0 <_dtoa_r+0x928>
 8011024:	9b04      	ldr	r3, [sp, #16]
 8011026:	9a06      	ldr	r2, [sp, #24]
 8011028:	f806 8c01 	strb.w	r8, [r6, #-1]
 801102c:	1af3      	subs	r3, r6, r3
 801102e:	4293      	cmp	r3, r2
 8011030:	d021      	beq.n	8011076 <_dtoa_r+0x9ee>
 8011032:	2300      	movs	r3, #0
 8011034:	220a      	movs	r2, #10
 8011036:	9901      	ldr	r1, [sp, #4]
 8011038:	4620      	mov	r0, r4
 801103a:	f000 fc1b 	bl	8011874 <__multadd>
 801103e:	45b9      	cmp	r9, r7
 8011040:	9001      	str	r0, [sp, #4]
 8011042:	f04f 0300 	mov.w	r3, #0
 8011046:	f04f 020a 	mov.w	r2, #10
 801104a:	4649      	mov	r1, r9
 801104c:	4620      	mov	r0, r4
 801104e:	d105      	bne.n	801105c <_dtoa_r+0x9d4>
 8011050:	f000 fc10 	bl	8011874 <__multadd>
 8011054:	4681      	mov	r9, r0
 8011056:	4607      	mov	r7, r0
 8011058:	46b2      	mov	sl, r6
 801105a:	e779      	b.n	8010f50 <_dtoa_r+0x8c8>
 801105c:	f000 fc0a 	bl	8011874 <__multadd>
 8011060:	4639      	mov	r1, r7
 8011062:	4681      	mov	r9, r0
 8011064:	2300      	movs	r3, #0
 8011066:	220a      	movs	r2, #10
 8011068:	4620      	mov	r0, r4
 801106a:	f000 fc03 	bl	8011874 <__multadd>
 801106e:	4607      	mov	r7, r0
 8011070:	e7f2      	b.n	8011058 <_dtoa_r+0x9d0>
 8011072:	f04f 0900 	mov.w	r9, #0
 8011076:	2201      	movs	r2, #1
 8011078:	9901      	ldr	r1, [sp, #4]
 801107a:	4620      	mov	r0, r4
 801107c:	f000 fdae 	bl	8011bdc <__lshift>
 8011080:	4629      	mov	r1, r5
 8011082:	9001      	str	r0, [sp, #4]
 8011084:	f000 fdfe 	bl	8011c84 <__mcmp>
 8011088:	2800      	cmp	r0, #0
 801108a:	dcb9      	bgt.n	8011000 <_dtoa_r+0x978>
 801108c:	d102      	bne.n	8011094 <_dtoa_r+0xa0c>
 801108e:	f018 0f01 	tst.w	r8, #1
 8011092:	d1b5      	bne.n	8011000 <_dtoa_r+0x978>
 8011094:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011098:	2b30      	cmp	r3, #48	; 0x30
 801109a:	f106 32ff 	add.w	r2, r6, #4294967295
 801109e:	f47f af11 	bne.w	8010ec4 <_dtoa_r+0x83c>
 80110a2:	4616      	mov	r6, r2
 80110a4:	e7f6      	b.n	8011094 <_dtoa_r+0xa0c>
 80110a6:	9b04      	ldr	r3, [sp, #16]
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d105      	bne.n	80110b8 <_dtoa_r+0xa30>
 80110ac:	9a04      	ldr	r2, [sp, #16]
 80110ae:	f10b 0b01 	add.w	fp, fp, #1
 80110b2:	2331      	movs	r3, #49	; 0x31
 80110b4:	7013      	strb	r3, [r2, #0]
 80110b6:	e705      	b.n	8010ec4 <_dtoa_r+0x83c>
 80110b8:	4616      	mov	r6, r2
 80110ba:	e7a1      	b.n	8011000 <_dtoa_r+0x978>
 80110bc:	4b16      	ldr	r3, [pc, #88]	; (8011118 <_dtoa_r+0xa90>)
 80110be:	f7ff bb48 	b.w	8010752 <_dtoa_r+0xca>
 80110c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	f47f ab23 	bne.w	8010710 <_dtoa_r+0x88>
 80110ca:	4b14      	ldr	r3, [pc, #80]	; (801111c <_dtoa_r+0xa94>)
 80110cc:	f7ff bb41 	b.w	8010752 <_dtoa_r+0xca>
 80110d0:	9b08      	ldr	r3, [sp, #32]
 80110d2:	2b01      	cmp	r3, #1
 80110d4:	f77f ae3b 	ble.w	8010d4e <_dtoa_r+0x6c6>
 80110d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80110dc:	e64f      	b.n	8010d7e <_dtoa_r+0x6f6>
 80110de:	9b06      	ldr	r3, [sp, #24]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	dc03      	bgt.n	80110ec <_dtoa_r+0xa64>
 80110e4:	9b08      	ldr	r3, [sp, #32]
 80110e6:	2b02      	cmp	r3, #2
 80110e8:	f73f aed7 	bgt.w	8010e9a <_dtoa_r+0x812>
 80110ec:	9e04      	ldr	r6, [sp, #16]
 80110ee:	9801      	ldr	r0, [sp, #4]
 80110f0:	4629      	mov	r1, r5
 80110f2:	f7ff fa3b 	bl	801056c <quorem>
 80110f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80110fa:	f806 8b01 	strb.w	r8, [r6], #1
 80110fe:	9b04      	ldr	r3, [sp, #16]
 8011100:	9a06      	ldr	r2, [sp, #24]
 8011102:	1af3      	subs	r3, r6, r3
 8011104:	429a      	cmp	r2, r3
 8011106:	ddb4      	ble.n	8011072 <_dtoa_r+0x9ea>
 8011108:	2300      	movs	r3, #0
 801110a:	220a      	movs	r2, #10
 801110c:	9901      	ldr	r1, [sp, #4]
 801110e:	4620      	mov	r0, r4
 8011110:	f000 fbb0 	bl	8011874 <__multadd>
 8011114:	9001      	str	r0, [sp, #4]
 8011116:	e7ea      	b.n	80110ee <_dtoa_r+0xa66>
 8011118:	08012ab0 	.word	0x08012ab0
 801111c:	08012b30 	.word	0x08012b30

08011120 <rshift>:
 8011120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011122:	6906      	ldr	r6, [r0, #16]
 8011124:	114b      	asrs	r3, r1, #5
 8011126:	429e      	cmp	r6, r3
 8011128:	f100 0414 	add.w	r4, r0, #20
 801112c:	dd30      	ble.n	8011190 <rshift+0x70>
 801112e:	f011 011f 	ands.w	r1, r1, #31
 8011132:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8011136:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801113a:	d108      	bne.n	801114e <rshift+0x2e>
 801113c:	4621      	mov	r1, r4
 801113e:	42b2      	cmp	r2, r6
 8011140:	460b      	mov	r3, r1
 8011142:	d211      	bcs.n	8011168 <rshift+0x48>
 8011144:	f852 3b04 	ldr.w	r3, [r2], #4
 8011148:	f841 3b04 	str.w	r3, [r1], #4
 801114c:	e7f7      	b.n	801113e <rshift+0x1e>
 801114e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8011152:	f1c1 0c20 	rsb	ip, r1, #32
 8011156:	40cd      	lsrs	r5, r1
 8011158:	3204      	adds	r2, #4
 801115a:	4623      	mov	r3, r4
 801115c:	42b2      	cmp	r2, r6
 801115e:	4617      	mov	r7, r2
 8011160:	d30c      	bcc.n	801117c <rshift+0x5c>
 8011162:	601d      	str	r5, [r3, #0]
 8011164:	b105      	cbz	r5, 8011168 <rshift+0x48>
 8011166:	3304      	adds	r3, #4
 8011168:	1b1a      	subs	r2, r3, r4
 801116a:	42a3      	cmp	r3, r4
 801116c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011170:	bf08      	it	eq
 8011172:	2300      	moveq	r3, #0
 8011174:	6102      	str	r2, [r0, #16]
 8011176:	bf08      	it	eq
 8011178:	6143      	streq	r3, [r0, #20]
 801117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801117c:	683f      	ldr	r7, [r7, #0]
 801117e:	fa07 f70c 	lsl.w	r7, r7, ip
 8011182:	433d      	orrs	r5, r7
 8011184:	f843 5b04 	str.w	r5, [r3], #4
 8011188:	f852 5b04 	ldr.w	r5, [r2], #4
 801118c:	40cd      	lsrs	r5, r1
 801118e:	e7e5      	b.n	801115c <rshift+0x3c>
 8011190:	4623      	mov	r3, r4
 8011192:	e7e9      	b.n	8011168 <rshift+0x48>

08011194 <__hexdig_fun>:
 8011194:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011198:	2b09      	cmp	r3, #9
 801119a:	d802      	bhi.n	80111a2 <__hexdig_fun+0xe>
 801119c:	3820      	subs	r0, #32
 801119e:	b2c0      	uxtb	r0, r0
 80111a0:	4770      	bx	lr
 80111a2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80111a6:	2b05      	cmp	r3, #5
 80111a8:	d801      	bhi.n	80111ae <__hexdig_fun+0x1a>
 80111aa:	3847      	subs	r0, #71	; 0x47
 80111ac:	e7f7      	b.n	801119e <__hexdig_fun+0xa>
 80111ae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80111b2:	2b05      	cmp	r3, #5
 80111b4:	d801      	bhi.n	80111ba <__hexdig_fun+0x26>
 80111b6:	3827      	subs	r0, #39	; 0x27
 80111b8:	e7f1      	b.n	801119e <__hexdig_fun+0xa>
 80111ba:	2000      	movs	r0, #0
 80111bc:	4770      	bx	lr

080111be <__gethex>:
 80111be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c2:	b08b      	sub	sp, #44	; 0x2c
 80111c4:	468a      	mov	sl, r1
 80111c6:	9002      	str	r0, [sp, #8]
 80111c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80111ca:	9306      	str	r3, [sp, #24]
 80111cc:	4690      	mov	r8, r2
 80111ce:	f000 fad0 	bl	8011772 <__localeconv_l>
 80111d2:	6803      	ldr	r3, [r0, #0]
 80111d4:	9303      	str	r3, [sp, #12]
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ef f832 	bl	8000240 <strlen>
 80111dc:	9b03      	ldr	r3, [sp, #12]
 80111de:	9001      	str	r0, [sp, #4]
 80111e0:	4403      	add	r3, r0
 80111e2:	f04f 0b00 	mov.w	fp, #0
 80111e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80111ea:	9307      	str	r3, [sp, #28]
 80111ec:	f8da 3000 	ldr.w	r3, [sl]
 80111f0:	3302      	adds	r3, #2
 80111f2:	461f      	mov	r7, r3
 80111f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80111f8:	2830      	cmp	r0, #48	; 0x30
 80111fa:	d06c      	beq.n	80112d6 <__gethex+0x118>
 80111fc:	f7ff ffca 	bl	8011194 <__hexdig_fun>
 8011200:	4604      	mov	r4, r0
 8011202:	2800      	cmp	r0, #0
 8011204:	d16a      	bne.n	80112dc <__gethex+0x11e>
 8011206:	9a01      	ldr	r2, [sp, #4]
 8011208:	9903      	ldr	r1, [sp, #12]
 801120a:	4638      	mov	r0, r7
 801120c:	f001 f8fe 	bl	801240c <strncmp>
 8011210:	2800      	cmp	r0, #0
 8011212:	d166      	bne.n	80112e2 <__gethex+0x124>
 8011214:	9b01      	ldr	r3, [sp, #4]
 8011216:	5cf8      	ldrb	r0, [r7, r3]
 8011218:	18fe      	adds	r6, r7, r3
 801121a:	f7ff ffbb 	bl	8011194 <__hexdig_fun>
 801121e:	2800      	cmp	r0, #0
 8011220:	d062      	beq.n	80112e8 <__gethex+0x12a>
 8011222:	4633      	mov	r3, r6
 8011224:	7818      	ldrb	r0, [r3, #0]
 8011226:	2830      	cmp	r0, #48	; 0x30
 8011228:	461f      	mov	r7, r3
 801122a:	f103 0301 	add.w	r3, r3, #1
 801122e:	d0f9      	beq.n	8011224 <__gethex+0x66>
 8011230:	f7ff ffb0 	bl	8011194 <__hexdig_fun>
 8011234:	fab0 f580 	clz	r5, r0
 8011238:	096d      	lsrs	r5, r5, #5
 801123a:	4634      	mov	r4, r6
 801123c:	f04f 0b01 	mov.w	fp, #1
 8011240:	463a      	mov	r2, r7
 8011242:	4616      	mov	r6, r2
 8011244:	3201      	adds	r2, #1
 8011246:	7830      	ldrb	r0, [r6, #0]
 8011248:	f7ff ffa4 	bl	8011194 <__hexdig_fun>
 801124c:	2800      	cmp	r0, #0
 801124e:	d1f8      	bne.n	8011242 <__gethex+0x84>
 8011250:	9a01      	ldr	r2, [sp, #4]
 8011252:	9903      	ldr	r1, [sp, #12]
 8011254:	4630      	mov	r0, r6
 8011256:	f001 f8d9 	bl	801240c <strncmp>
 801125a:	b950      	cbnz	r0, 8011272 <__gethex+0xb4>
 801125c:	b954      	cbnz	r4, 8011274 <__gethex+0xb6>
 801125e:	9b01      	ldr	r3, [sp, #4]
 8011260:	18f4      	adds	r4, r6, r3
 8011262:	4622      	mov	r2, r4
 8011264:	4616      	mov	r6, r2
 8011266:	3201      	adds	r2, #1
 8011268:	7830      	ldrb	r0, [r6, #0]
 801126a:	f7ff ff93 	bl	8011194 <__hexdig_fun>
 801126e:	2800      	cmp	r0, #0
 8011270:	d1f8      	bne.n	8011264 <__gethex+0xa6>
 8011272:	b10c      	cbz	r4, 8011278 <__gethex+0xba>
 8011274:	1ba4      	subs	r4, r4, r6
 8011276:	00a4      	lsls	r4, r4, #2
 8011278:	7833      	ldrb	r3, [r6, #0]
 801127a:	2b50      	cmp	r3, #80	; 0x50
 801127c:	d001      	beq.n	8011282 <__gethex+0xc4>
 801127e:	2b70      	cmp	r3, #112	; 0x70
 8011280:	d140      	bne.n	8011304 <__gethex+0x146>
 8011282:	7873      	ldrb	r3, [r6, #1]
 8011284:	2b2b      	cmp	r3, #43	; 0x2b
 8011286:	d031      	beq.n	80112ec <__gethex+0x12e>
 8011288:	2b2d      	cmp	r3, #45	; 0x2d
 801128a:	d033      	beq.n	80112f4 <__gethex+0x136>
 801128c:	1c71      	adds	r1, r6, #1
 801128e:	f04f 0900 	mov.w	r9, #0
 8011292:	7808      	ldrb	r0, [r1, #0]
 8011294:	f7ff ff7e 	bl	8011194 <__hexdig_fun>
 8011298:	1e43      	subs	r3, r0, #1
 801129a:	b2db      	uxtb	r3, r3
 801129c:	2b18      	cmp	r3, #24
 801129e:	d831      	bhi.n	8011304 <__gethex+0x146>
 80112a0:	f1a0 0210 	sub.w	r2, r0, #16
 80112a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80112a8:	f7ff ff74 	bl	8011194 <__hexdig_fun>
 80112ac:	1e43      	subs	r3, r0, #1
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	2b18      	cmp	r3, #24
 80112b2:	d922      	bls.n	80112fa <__gethex+0x13c>
 80112b4:	f1b9 0f00 	cmp.w	r9, #0
 80112b8:	d000      	beq.n	80112bc <__gethex+0xfe>
 80112ba:	4252      	negs	r2, r2
 80112bc:	4414      	add	r4, r2
 80112be:	f8ca 1000 	str.w	r1, [sl]
 80112c2:	b30d      	cbz	r5, 8011308 <__gethex+0x14a>
 80112c4:	f1bb 0f00 	cmp.w	fp, #0
 80112c8:	bf0c      	ite	eq
 80112ca:	2706      	moveq	r7, #6
 80112cc:	2700      	movne	r7, #0
 80112ce:	4638      	mov	r0, r7
 80112d0:	b00b      	add	sp, #44	; 0x2c
 80112d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112d6:	f10b 0b01 	add.w	fp, fp, #1
 80112da:	e78a      	b.n	80111f2 <__gethex+0x34>
 80112dc:	2500      	movs	r5, #0
 80112de:	462c      	mov	r4, r5
 80112e0:	e7ae      	b.n	8011240 <__gethex+0x82>
 80112e2:	463e      	mov	r6, r7
 80112e4:	2501      	movs	r5, #1
 80112e6:	e7c7      	b.n	8011278 <__gethex+0xba>
 80112e8:	4604      	mov	r4, r0
 80112ea:	e7fb      	b.n	80112e4 <__gethex+0x126>
 80112ec:	f04f 0900 	mov.w	r9, #0
 80112f0:	1cb1      	adds	r1, r6, #2
 80112f2:	e7ce      	b.n	8011292 <__gethex+0xd4>
 80112f4:	f04f 0901 	mov.w	r9, #1
 80112f8:	e7fa      	b.n	80112f0 <__gethex+0x132>
 80112fa:	230a      	movs	r3, #10
 80112fc:	fb03 0202 	mla	r2, r3, r2, r0
 8011300:	3a10      	subs	r2, #16
 8011302:	e7cf      	b.n	80112a4 <__gethex+0xe6>
 8011304:	4631      	mov	r1, r6
 8011306:	e7da      	b.n	80112be <__gethex+0x100>
 8011308:	1bf3      	subs	r3, r6, r7
 801130a:	3b01      	subs	r3, #1
 801130c:	4629      	mov	r1, r5
 801130e:	2b07      	cmp	r3, #7
 8011310:	dc49      	bgt.n	80113a6 <__gethex+0x1e8>
 8011312:	9802      	ldr	r0, [sp, #8]
 8011314:	f000 fa63 	bl	80117de <_Balloc>
 8011318:	9b01      	ldr	r3, [sp, #4]
 801131a:	f100 0914 	add.w	r9, r0, #20
 801131e:	f04f 0b00 	mov.w	fp, #0
 8011322:	f1c3 0301 	rsb	r3, r3, #1
 8011326:	4605      	mov	r5, r0
 8011328:	f8cd 9010 	str.w	r9, [sp, #16]
 801132c:	46da      	mov	sl, fp
 801132e:	9308      	str	r3, [sp, #32]
 8011330:	42b7      	cmp	r7, r6
 8011332:	d33b      	bcc.n	80113ac <__gethex+0x1ee>
 8011334:	9804      	ldr	r0, [sp, #16]
 8011336:	f840 ab04 	str.w	sl, [r0], #4
 801133a:	eba0 0009 	sub.w	r0, r0, r9
 801133e:	1080      	asrs	r0, r0, #2
 8011340:	6128      	str	r0, [r5, #16]
 8011342:	0147      	lsls	r7, r0, #5
 8011344:	4650      	mov	r0, sl
 8011346:	f000 fb0e 	bl	8011966 <__hi0bits>
 801134a:	f8d8 6000 	ldr.w	r6, [r8]
 801134e:	1a3f      	subs	r7, r7, r0
 8011350:	42b7      	cmp	r7, r6
 8011352:	dd64      	ble.n	801141e <__gethex+0x260>
 8011354:	1bbf      	subs	r7, r7, r6
 8011356:	4639      	mov	r1, r7
 8011358:	4628      	mov	r0, r5
 801135a:	f000 fe1e 	bl	8011f9a <__any_on>
 801135e:	4682      	mov	sl, r0
 8011360:	b178      	cbz	r0, 8011382 <__gethex+0x1c4>
 8011362:	1e7b      	subs	r3, r7, #1
 8011364:	1159      	asrs	r1, r3, #5
 8011366:	f003 021f 	and.w	r2, r3, #31
 801136a:	f04f 0a01 	mov.w	sl, #1
 801136e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011372:	fa0a f202 	lsl.w	r2, sl, r2
 8011376:	420a      	tst	r2, r1
 8011378:	d003      	beq.n	8011382 <__gethex+0x1c4>
 801137a:	4553      	cmp	r3, sl
 801137c:	dc46      	bgt.n	801140c <__gethex+0x24e>
 801137e:	f04f 0a02 	mov.w	sl, #2
 8011382:	4639      	mov	r1, r7
 8011384:	4628      	mov	r0, r5
 8011386:	f7ff fecb 	bl	8011120 <rshift>
 801138a:	443c      	add	r4, r7
 801138c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011390:	42a3      	cmp	r3, r4
 8011392:	da52      	bge.n	801143a <__gethex+0x27c>
 8011394:	4629      	mov	r1, r5
 8011396:	9802      	ldr	r0, [sp, #8]
 8011398:	f000 fa55 	bl	8011846 <_Bfree>
 801139c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801139e:	2300      	movs	r3, #0
 80113a0:	6013      	str	r3, [r2, #0]
 80113a2:	27a3      	movs	r7, #163	; 0xa3
 80113a4:	e793      	b.n	80112ce <__gethex+0x110>
 80113a6:	3101      	adds	r1, #1
 80113a8:	105b      	asrs	r3, r3, #1
 80113aa:	e7b0      	b.n	801130e <__gethex+0x150>
 80113ac:	1e73      	subs	r3, r6, #1
 80113ae:	9305      	str	r3, [sp, #20]
 80113b0:	9a07      	ldr	r2, [sp, #28]
 80113b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80113b6:	4293      	cmp	r3, r2
 80113b8:	d018      	beq.n	80113ec <__gethex+0x22e>
 80113ba:	f1bb 0f20 	cmp.w	fp, #32
 80113be:	d107      	bne.n	80113d0 <__gethex+0x212>
 80113c0:	9b04      	ldr	r3, [sp, #16]
 80113c2:	f8c3 a000 	str.w	sl, [r3]
 80113c6:	3304      	adds	r3, #4
 80113c8:	f04f 0a00 	mov.w	sl, #0
 80113cc:	9304      	str	r3, [sp, #16]
 80113ce:	46d3      	mov	fp, sl
 80113d0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80113d4:	f7ff fede 	bl	8011194 <__hexdig_fun>
 80113d8:	f000 000f 	and.w	r0, r0, #15
 80113dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80113e0:	ea4a 0a00 	orr.w	sl, sl, r0
 80113e4:	f10b 0b04 	add.w	fp, fp, #4
 80113e8:	9b05      	ldr	r3, [sp, #20]
 80113ea:	e00d      	b.n	8011408 <__gethex+0x24a>
 80113ec:	9b05      	ldr	r3, [sp, #20]
 80113ee:	9a08      	ldr	r2, [sp, #32]
 80113f0:	4413      	add	r3, r2
 80113f2:	42bb      	cmp	r3, r7
 80113f4:	d3e1      	bcc.n	80113ba <__gethex+0x1fc>
 80113f6:	4618      	mov	r0, r3
 80113f8:	9a01      	ldr	r2, [sp, #4]
 80113fa:	9903      	ldr	r1, [sp, #12]
 80113fc:	9309      	str	r3, [sp, #36]	; 0x24
 80113fe:	f001 f805 	bl	801240c <strncmp>
 8011402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011404:	2800      	cmp	r0, #0
 8011406:	d1d8      	bne.n	80113ba <__gethex+0x1fc>
 8011408:	461e      	mov	r6, r3
 801140a:	e791      	b.n	8011330 <__gethex+0x172>
 801140c:	1eb9      	subs	r1, r7, #2
 801140e:	4628      	mov	r0, r5
 8011410:	f000 fdc3 	bl	8011f9a <__any_on>
 8011414:	2800      	cmp	r0, #0
 8011416:	d0b2      	beq.n	801137e <__gethex+0x1c0>
 8011418:	f04f 0a03 	mov.w	sl, #3
 801141c:	e7b1      	b.n	8011382 <__gethex+0x1c4>
 801141e:	da09      	bge.n	8011434 <__gethex+0x276>
 8011420:	1bf7      	subs	r7, r6, r7
 8011422:	4629      	mov	r1, r5
 8011424:	463a      	mov	r2, r7
 8011426:	9802      	ldr	r0, [sp, #8]
 8011428:	f000 fbd8 	bl	8011bdc <__lshift>
 801142c:	1be4      	subs	r4, r4, r7
 801142e:	4605      	mov	r5, r0
 8011430:	f100 0914 	add.w	r9, r0, #20
 8011434:	f04f 0a00 	mov.w	sl, #0
 8011438:	e7a8      	b.n	801138c <__gethex+0x1ce>
 801143a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801143e:	42a0      	cmp	r0, r4
 8011440:	dd6a      	ble.n	8011518 <__gethex+0x35a>
 8011442:	1b04      	subs	r4, r0, r4
 8011444:	42a6      	cmp	r6, r4
 8011446:	dc2e      	bgt.n	80114a6 <__gethex+0x2e8>
 8011448:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801144c:	2b02      	cmp	r3, #2
 801144e:	d022      	beq.n	8011496 <__gethex+0x2d8>
 8011450:	2b03      	cmp	r3, #3
 8011452:	d024      	beq.n	801149e <__gethex+0x2e0>
 8011454:	2b01      	cmp	r3, #1
 8011456:	d115      	bne.n	8011484 <__gethex+0x2c6>
 8011458:	42a6      	cmp	r6, r4
 801145a:	d113      	bne.n	8011484 <__gethex+0x2c6>
 801145c:	2e01      	cmp	r6, #1
 801145e:	dc0b      	bgt.n	8011478 <__gethex+0x2ba>
 8011460:	9a06      	ldr	r2, [sp, #24]
 8011462:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011466:	6013      	str	r3, [r2, #0]
 8011468:	2301      	movs	r3, #1
 801146a:	612b      	str	r3, [r5, #16]
 801146c:	f8c9 3000 	str.w	r3, [r9]
 8011470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011472:	2762      	movs	r7, #98	; 0x62
 8011474:	601d      	str	r5, [r3, #0]
 8011476:	e72a      	b.n	80112ce <__gethex+0x110>
 8011478:	1e71      	subs	r1, r6, #1
 801147a:	4628      	mov	r0, r5
 801147c:	f000 fd8d 	bl	8011f9a <__any_on>
 8011480:	2800      	cmp	r0, #0
 8011482:	d1ed      	bne.n	8011460 <__gethex+0x2a2>
 8011484:	4629      	mov	r1, r5
 8011486:	9802      	ldr	r0, [sp, #8]
 8011488:	f000 f9dd 	bl	8011846 <_Bfree>
 801148c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801148e:	2300      	movs	r3, #0
 8011490:	6013      	str	r3, [r2, #0]
 8011492:	2750      	movs	r7, #80	; 0x50
 8011494:	e71b      	b.n	80112ce <__gethex+0x110>
 8011496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011498:	2b00      	cmp	r3, #0
 801149a:	d0e1      	beq.n	8011460 <__gethex+0x2a2>
 801149c:	e7f2      	b.n	8011484 <__gethex+0x2c6>
 801149e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d1dd      	bne.n	8011460 <__gethex+0x2a2>
 80114a4:	e7ee      	b.n	8011484 <__gethex+0x2c6>
 80114a6:	1e67      	subs	r7, r4, #1
 80114a8:	f1ba 0f00 	cmp.w	sl, #0
 80114ac:	d131      	bne.n	8011512 <__gethex+0x354>
 80114ae:	b127      	cbz	r7, 80114ba <__gethex+0x2fc>
 80114b0:	4639      	mov	r1, r7
 80114b2:	4628      	mov	r0, r5
 80114b4:	f000 fd71 	bl	8011f9a <__any_on>
 80114b8:	4682      	mov	sl, r0
 80114ba:	117a      	asrs	r2, r7, #5
 80114bc:	2301      	movs	r3, #1
 80114be:	f007 071f 	and.w	r7, r7, #31
 80114c2:	fa03 f707 	lsl.w	r7, r3, r7
 80114c6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80114ca:	4621      	mov	r1, r4
 80114cc:	421f      	tst	r7, r3
 80114ce:	4628      	mov	r0, r5
 80114d0:	bf18      	it	ne
 80114d2:	f04a 0a02 	orrne.w	sl, sl, #2
 80114d6:	1b36      	subs	r6, r6, r4
 80114d8:	f7ff fe22 	bl	8011120 <rshift>
 80114dc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80114e0:	2702      	movs	r7, #2
 80114e2:	f1ba 0f00 	cmp.w	sl, #0
 80114e6:	d048      	beq.n	801157a <__gethex+0x3bc>
 80114e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80114ec:	2b02      	cmp	r3, #2
 80114ee:	d015      	beq.n	801151c <__gethex+0x35e>
 80114f0:	2b03      	cmp	r3, #3
 80114f2:	d017      	beq.n	8011524 <__gethex+0x366>
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d109      	bne.n	801150c <__gethex+0x34e>
 80114f8:	f01a 0f02 	tst.w	sl, #2
 80114fc:	d006      	beq.n	801150c <__gethex+0x34e>
 80114fe:	f8d9 3000 	ldr.w	r3, [r9]
 8011502:	ea4a 0a03 	orr.w	sl, sl, r3
 8011506:	f01a 0f01 	tst.w	sl, #1
 801150a:	d10e      	bne.n	801152a <__gethex+0x36c>
 801150c:	f047 0710 	orr.w	r7, r7, #16
 8011510:	e033      	b.n	801157a <__gethex+0x3bc>
 8011512:	f04f 0a01 	mov.w	sl, #1
 8011516:	e7d0      	b.n	80114ba <__gethex+0x2fc>
 8011518:	2701      	movs	r7, #1
 801151a:	e7e2      	b.n	80114e2 <__gethex+0x324>
 801151c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801151e:	f1c3 0301 	rsb	r3, r3, #1
 8011522:	9315      	str	r3, [sp, #84]	; 0x54
 8011524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011526:	2b00      	cmp	r3, #0
 8011528:	d0f0      	beq.n	801150c <__gethex+0x34e>
 801152a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801152e:	f105 0314 	add.w	r3, r5, #20
 8011532:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8011536:	eb03 010a 	add.w	r1, r3, sl
 801153a:	f04f 0c00 	mov.w	ip, #0
 801153e:	4618      	mov	r0, r3
 8011540:	f853 2b04 	ldr.w	r2, [r3], #4
 8011544:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011548:	d01c      	beq.n	8011584 <__gethex+0x3c6>
 801154a:	3201      	adds	r2, #1
 801154c:	6002      	str	r2, [r0, #0]
 801154e:	2f02      	cmp	r7, #2
 8011550:	f105 0314 	add.w	r3, r5, #20
 8011554:	d138      	bne.n	80115c8 <__gethex+0x40a>
 8011556:	f8d8 2000 	ldr.w	r2, [r8]
 801155a:	3a01      	subs	r2, #1
 801155c:	42b2      	cmp	r2, r6
 801155e:	d10a      	bne.n	8011576 <__gethex+0x3b8>
 8011560:	1171      	asrs	r1, r6, #5
 8011562:	2201      	movs	r2, #1
 8011564:	f006 061f 	and.w	r6, r6, #31
 8011568:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801156c:	fa02 f606 	lsl.w	r6, r2, r6
 8011570:	421e      	tst	r6, r3
 8011572:	bf18      	it	ne
 8011574:	4617      	movne	r7, r2
 8011576:	f047 0720 	orr.w	r7, r7, #32
 801157a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801157c:	601d      	str	r5, [r3, #0]
 801157e:	9b06      	ldr	r3, [sp, #24]
 8011580:	601c      	str	r4, [r3, #0]
 8011582:	e6a4      	b.n	80112ce <__gethex+0x110>
 8011584:	4299      	cmp	r1, r3
 8011586:	f843 cc04 	str.w	ip, [r3, #-4]
 801158a:	d8d8      	bhi.n	801153e <__gethex+0x380>
 801158c:	68ab      	ldr	r3, [r5, #8]
 801158e:	4599      	cmp	r9, r3
 8011590:	db12      	blt.n	80115b8 <__gethex+0x3fa>
 8011592:	6869      	ldr	r1, [r5, #4]
 8011594:	9802      	ldr	r0, [sp, #8]
 8011596:	3101      	adds	r1, #1
 8011598:	f000 f921 	bl	80117de <_Balloc>
 801159c:	692a      	ldr	r2, [r5, #16]
 801159e:	3202      	adds	r2, #2
 80115a0:	f105 010c 	add.w	r1, r5, #12
 80115a4:	4683      	mov	fp, r0
 80115a6:	0092      	lsls	r2, r2, #2
 80115a8:	300c      	adds	r0, #12
 80115aa:	f000 f90d 	bl	80117c8 <memcpy>
 80115ae:	4629      	mov	r1, r5
 80115b0:	9802      	ldr	r0, [sp, #8]
 80115b2:	f000 f948 	bl	8011846 <_Bfree>
 80115b6:	465d      	mov	r5, fp
 80115b8:	692b      	ldr	r3, [r5, #16]
 80115ba:	1c5a      	adds	r2, r3, #1
 80115bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80115c0:	612a      	str	r2, [r5, #16]
 80115c2:	2201      	movs	r2, #1
 80115c4:	615a      	str	r2, [r3, #20]
 80115c6:	e7c2      	b.n	801154e <__gethex+0x390>
 80115c8:	692a      	ldr	r2, [r5, #16]
 80115ca:	454a      	cmp	r2, r9
 80115cc:	dd0b      	ble.n	80115e6 <__gethex+0x428>
 80115ce:	2101      	movs	r1, #1
 80115d0:	4628      	mov	r0, r5
 80115d2:	f7ff fda5 	bl	8011120 <rshift>
 80115d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80115da:	3401      	adds	r4, #1
 80115dc:	42a3      	cmp	r3, r4
 80115de:	f6ff aed9 	blt.w	8011394 <__gethex+0x1d6>
 80115e2:	2701      	movs	r7, #1
 80115e4:	e7c7      	b.n	8011576 <__gethex+0x3b8>
 80115e6:	f016 061f 	ands.w	r6, r6, #31
 80115ea:	d0fa      	beq.n	80115e2 <__gethex+0x424>
 80115ec:	449a      	add	sl, r3
 80115ee:	f1c6 0620 	rsb	r6, r6, #32
 80115f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80115f6:	f000 f9b6 	bl	8011966 <__hi0bits>
 80115fa:	42b0      	cmp	r0, r6
 80115fc:	dbe7      	blt.n	80115ce <__gethex+0x410>
 80115fe:	e7f0      	b.n	80115e2 <__gethex+0x424>

08011600 <L_shift>:
 8011600:	f1c2 0208 	rsb	r2, r2, #8
 8011604:	0092      	lsls	r2, r2, #2
 8011606:	b570      	push	{r4, r5, r6, lr}
 8011608:	f1c2 0620 	rsb	r6, r2, #32
 801160c:	6843      	ldr	r3, [r0, #4]
 801160e:	6804      	ldr	r4, [r0, #0]
 8011610:	fa03 f506 	lsl.w	r5, r3, r6
 8011614:	432c      	orrs	r4, r5
 8011616:	40d3      	lsrs	r3, r2
 8011618:	6004      	str	r4, [r0, #0]
 801161a:	f840 3f04 	str.w	r3, [r0, #4]!
 801161e:	4288      	cmp	r0, r1
 8011620:	d3f4      	bcc.n	801160c <L_shift+0xc>
 8011622:	bd70      	pop	{r4, r5, r6, pc}

08011624 <__match>:
 8011624:	b530      	push	{r4, r5, lr}
 8011626:	6803      	ldr	r3, [r0, #0]
 8011628:	3301      	adds	r3, #1
 801162a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801162e:	b914      	cbnz	r4, 8011636 <__match+0x12>
 8011630:	6003      	str	r3, [r0, #0]
 8011632:	2001      	movs	r0, #1
 8011634:	bd30      	pop	{r4, r5, pc}
 8011636:	f813 2b01 	ldrb.w	r2, [r3], #1
 801163a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801163e:	2d19      	cmp	r5, #25
 8011640:	bf98      	it	ls
 8011642:	3220      	addls	r2, #32
 8011644:	42a2      	cmp	r2, r4
 8011646:	d0f0      	beq.n	801162a <__match+0x6>
 8011648:	2000      	movs	r0, #0
 801164a:	e7f3      	b.n	8011634 <__match+0x10>

0801164c <__hexnan>:
 801164c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011650:	680b      	ldr	r3, [r1, #0]
 8011652:	6801      	ldr	r1, [r0, #0]
 8011654:	115f      	asrs	r7, r3, #5
 8011656:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801165a:	f013 031f 	ands.w	r3, r3, #31
 801165e:	b087      	sub	sp, #28
 8011660:	bf18      	it	ne
 8011662:	3704      	addne	r7, #4
 8011664:	2500      	movs	r5, #0
 8011666:	1f3e      	subs	r6, r7, #4
 8011668:	4682      	mov	sl, r0
 801166a:	4690      	mov	r8, r2
 801166c:	9301      	str	r3, [sp, #4]
 801166e:	f847 5c04 	str.w	r5, [r7, #-4]
 8011672:	46b1      	mov	r9, r6
 8011674:	4634      	mov	r4, r6
 8011676:	9502      	str	r5, [sp, #8]
 8011678:	46ab      	mov	fp, r5
 801167a:	784a      	ldrb	r2, [r1, #1]
 801167c:	1c4b      	adds	r3, r1, #1
 801167e:	9303      	str	r3, [sp, #12]
 8011680:	b342      	cbz	r2, 80116d4 <__hexnan+0x88>
 8011682:	4610      	mov	r0, r2
 8011684:	9105      	str	r1, [sp, #20]
 8011686:	9204      	str	r2, [sp, #16]
 8011688:	f7ff fd84 	bl	8011194 <__hexdig_fun>
 801168c:	2800      	cmp	r0, #0
 801168e:	d143      	bne.n	8011718 <__hexnan+0xcc>
 8011690:	9a04      	ldr	r2, [sp, #16]
 8011692:	9905      	ldr	r1, [sp, #20]
 8011694:	2a20      	cmp	r2, #32
 8011696:	d818      	bhi.n	80116ca <__hexnan+0x7e>
 8011698:	9b02      	ldr	r3, [sp, #8]
 801169a:	459b      	cmp	fp, r3
 801169c:	dd13      	ble.n	80116c6 <__hexnan+0x7a>
 801169e:	454c      	cmp	r4, r9
 80116a0:	d206      	bcs.n	80116b0 <__hexnan+0x64>
 80116a2:	2d07      	cmp	r5, #7
 80116a4:	dc04      	bgt.n	80116b0 <__hexnan+0x64>
 80116a6:	462a      	mov	r2, r5
 80116a8:	4649      	mov	r1, r9
 80116aa:	4620      	mov	r0, r4
 80116ac:	f7ff ffa8 	bl	8011600 <L_shift>
 80116b0:	4544      	cmp	r4, r8
 80116b2:	d944      	bls.n	801173e <__hexnan+0xf2>
 80116b4:	2300      	movs	r3, #0
 80116b6:	f1a4 0904 	sub.w	r9, r4, #4
 80116ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80116be:	f8cd b008 	str.w	fp, [sp, #8]
 80116c2:	464c      	mov	r4, r9
 80116c4:	461d      	mov	r5, r3
 80116c6:	9903      	ldr	r1, [sp, #12]
 80116c8:	e7d7      	b.n	801167a <__hexnan+0x2e>
 80116ca:	2a29      	cmp	r2, #41	; 0x29
 80116cc:	d14a      	bne.n	8011764 <__hexnan+0x118>
 80116ce:	3102      	adds	r1, #2
 80116d0:	f8ca 1000 	str.w	r1, [sl]
 80116d4:	f1bb 0f00 	cmp.w	fp, #0
 80116d8:	d044      	beq.n	8011764 <__hexnan+0x118>
 80116da:	454c      	cmp	r4, r9
 80116dc:	d206      	bcs.n	80116ec <__hexnan+0xa0>
 80116de:	2d07      	cmp	r5, #7
 80116e0:	dc04      	bgt.n	80116ec <__hexnan+0xa0>
 80116e2:	462a      	mov	r2, r5
 80116e4:	4649      	mov	r1, r9
 80116e6:	4620      	mov	r0, r4
 80116e8:	f7ff ff8a 	bl	8011600 <L_shift>
 80116ec:	4544      	cmp	r4, r8
 80116ee:	d928      	bls.n	8011742 <__hexnan+0xf6>
 80116f0:	4643      	mov	r3, r8
 80116f2:	f854 2b04 	ldr.w	r2, [r4], #4
 80116f6:	f843 2b04 	str.w	r2, [r3], #4
 80116fa:	42a6      	cmp	r6, r4
 80116fc:	d2f9      	bcs.n	80116f2 <__hexnan+0xa6>
 80116fe:	2200      	movs	r2, #0
 8011700:	f843 2b04 	str.w	r2, [r3], #4
 8011704:	429e      	cmp	r6, r3
 8011706:	d2fb      	bcs.n	8011700 <__hexnan+0xb4>
 8011708:	6833      	ldr	r3, [r6, #0]
 801170a:	b91b      	cbnz	r3, 8011714 <__hexnan+0xc8>
 801170c:	4546      	cmp	r6, r8
 801170e:	d127      	bne.n	8011760 <__hexnan+0x114>
 8011710:	2301      	movs	r3, #1
 8011712:	6033      	str	r3, [r6, #0]
 8011714:	2005      	movs	r0, #5
 8011716:	e026      	b.n	8011766 <__hexnan+0x11a>
 8011718:	3501      	adds	r5, #1
 801171a:	2d08      	cmp	r5, #8
 801171c:	f10b 0b01 	add.w	fp, fp, #1
 8011720:	dd06      	ble.n	8011730 <__hexnan+0xe4>
 8011722:	4544      	cmp	r4, r8
 8011724:	d9cf      	bls.n	80116c6 <__hexnan+0x7a>
 8011726:	2300      	movs	r3, #0
 8011728:	f844 3c04 	str.w	r3, [r4, #-4]
 801172c:	2501      	movs	r5, #1
 801172e:	3c04      	subs	r4, #4
 8011730:	6822      	ldr	r2, [r4, #0]
 8011732:	f000 000f 	and.w	r0, r0, #15
 8011736:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801173a:	6020      	str	r0, [r4, #0]
 801173c:	e7c3      	b.n	80116c6 <__hexnan+0x7a>
 801173e:	2508      	movs	r5, #8
 8011740:	e7c1      	b.n	80116c6 <__hexnan+0x7a>
 8011742:	9b01      	ldr	r3, [sp, #4]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d0df      	beq.n	8011708 <__hexnan+0xbc>
 8011748:	f04f 32ff 	mov.w	r2, #4294967295
 801174c:	f1c3 0320 	rsb	r3, r3, #32
 8011750:	fa22 f303 	lsr.w	r3, r2, r3
 8011754:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011758:	401a      	ands	r2, r3
 801175a:	f847 2c04 	str.w	r2, [r7, #-4]
 801175e:	e7d3      	b.n	8011708 <__hexnan+0xbc>
 8011760:	3e04      	subs	r6, #4
 8011762:	e7d1      	b.n	8011708 <__hexnan+0xbc>
 8011764:	2004      	movs	r0, #4
 8011766:	b007      	add	sp, #28
 8011768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801176c <__locale_ctype_ptr_l>:
 801176c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011770:	4770      	bx	lr

08011772 <__localeconv_l>:
 8011772:	30f0      	adds	r0, #240	; 0xf0
 8011774:	4770      	bx	lr
	...

08011778 <_localeconv_r>:
 8011778:	4b04      	ldr	r3, [pc, #16]	; (801178c <_localeconv_r+0x14>)
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	6a18      	ldr	r0, [r3, #32]
 801177e:	4b04      	ldr	r3, [pc, #16]	; (8011790 <_localeconv_r+0x18>)
 8011780:	2800      	cmp	r0, #0
 8011782:	bf08      	it	eq
 8011784:	4618      	moveq	r0, r3
 8011786:	30f0      	adds	r0, #240	; 0xf0
 8011788:	4770      	bx	lr
 801178a:	bf00      	nop
 801178c:	20000028 	.word	0x20000028
 8011790:	2000008c 	.word	0x2000008c

08011794 <malloc>:
 8011794:	4b02      	ldr	r3, [pc, #8]	; (80117a0 <malloc+0xc>)
 8011796:	4601      	mov	r1, r0
 8011798:	6818      	ldr	r0, [r3, #0]
 801179a:	f000 bc7b 	b.w	8012094 <_malloc_r>
 801179e:	bf00      	nop
 80117a0:	20000028 	.word	0x20000028

080117a4 <__ascii_mbtowc>:
 80117a4:	b082      	sub	sp, #8
 80117a6:	b901      	cbnz	r1, 80117aa <__ascii_mbtowc+0x6>
 80117a8:	a901      	add	r1, sp, #4
 80117aa:	b142      	cbz	r2, 80117be <__ascii_mbtowc+0x1a>
 80117ac:	b14b      	cbz	r3, 80117c2 <__ascii_mbtowc+0x1e>
 80117ae:	7813      	ldrb	r3, [r2, #0]
 80117b0:	600b      	str	r3, [r1, #0]
 80117b2:	7812      	ldrb	r2, [r2, #0]
 80117b4:	1c10      	adds	r0, r2, #0
 80117b6:	bf18      	it	ne
 80117b8:	2001      	movne	r0, #1
 80117ba:	b002      	add	sp, #8
 80117bc:	4770      	bx	lr
 80117be:	4610      	mov	r0, r2
 80117c0:	e7fb      	b.n	80117ba <__ascii_mbtowc+0x16>
 80117c2:	f06f 0001 	mvn.w	r0, #1
 80117c6:	e7f8      	b.n	80117ba <__ascii_mbtowc+0x16>

080117c8 <memcpy>:
 80117c8:	b510      	push	{r4, lr}
 80117ca:	1e43      	subs	r3, r0, #1
 80117cc:	440a      	add	r2, r1
 80117ce:	4291      	cmp	r1, r2
 80117d0:	d100      	bne.n	80117d4 <memcpy+0xc>
 80117d2:	bd10      	pop	{r4, pc}
 80117d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117dc:	e7f7      	b.n	80117ce <memcpy+0x6>

080117de <_Balloc>:
 80117de:	b570      	push	{r4, r5, r6, lr}
 80117e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80117e2:	4604      	mov	r4, r0
 80117e4:	460e      	mov	r6, r1
 80117e6:	b93d      	cbnz	r5, 80117f8 <_Balloc+0x1a>
 80117e8:	2010      	movs	r0, #16
 80117ea:	f7ff ffd3 	bl	8011794 <malloc>
 80117ee:	6260      	str	r0, [r4, #36]	; 0x24
 80117f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80117f4:	6005      	str	r5, [r0, #0]
 80117f6:	60c5      	str	r5, [r0, #12]
 80117f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80117fa:	68eb      	ldr	r3, [r5, #12]
 80117fc:	b183      	cbz	r3, 8011820 <_Balloc+0x42>
 80117fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011806:	b9b8      	cbnz	r0, 8011838 <_Balloc+0x5a>
 8011808:	2101      	movs	r1, #1
 801180a:	fa01 f506 	lsl.w	r5, r1, r6
 801180e:	1d6a      	adds	r2, r5, #5
 8011810:	0092      	lsls	r2, r2, #2
 8011812:	4620      	mov	r0, r4
 8011814:	f000 fbe2 	bl	8011fdc <_calloc_r>
 8011818:	b160      	cbz	r0, 8011834 <_Balloc+0x56>
 801181a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801181e:	e00e      	b.n	801183e <_Balloc+0x60>
 8011820:	2221      	movs	r2, #33	; 0x21
 8011822:	2104      	movs	r1, #4
 8011824:	4620      	mov	r0, r4
 8011826:	f000 fbd9 	bl	8011fdc <_calloc_r>
 801182a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801182c:	60e8      	str	r0, [r5, #12]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d1e4      	bne.n	80117fe <_Balloc+0x20>
 8011834:	2000      	movs	r0, #0
 8011836:	bd70      	pop	{r4, r5, r6, pc}
 8011838:	6802      	ldr	r2, [r0, #0]
 801183a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801183e:	2300      	movs	r3, #0
 8011840:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011844:	e7f7      	b.n	8011836 <_Balloc+0x58>

08011846 <_Bfree>:
 8011846:	b570      	push	{r4, r5, r6, lr}
 8011848:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801184a:	4606      	mov	r6, r0
 801184c:	460d      	mov	r5, r1
 801184e:	b93c      	cbnz	r4, 8011860 <_Bfree+0x1a>
 8011850:	2010      	movs	r0, #16
 8011852:	f7ff ff9f 	bl	8011794 <malloc>
 8011856:	6270      	str	r0, [r6, #36]	; 0x24
 8011858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801185c:	6004      	str	r4, [r0, #0]
 801185e:	60c4      	str	r4, [r0, #12]
 8011860:	b13d      	cbz	r5, 8011872 <_Bfree+0x2c>
 8011862:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8011864:	686a      	ldr	r2, [r5, #4]
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801186c:	6029      	str	r1, [r5, #0]
 801186e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011872:	bd70      	pop	{r4, r5, r6, pc}

08011874 <__multadd>:
 8011874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011878:	690d      	ldr	r5, [r1, #16]
 801187a:	461f      	mov	r7, r3
 801187c:	4606      	mov	r6, r0
 801187e:	460c      	mov	r4, r1
 8011880:	f101 0c14 	add.w	ip, r1, #20
 8011884:	2300      	movs	r3, #0
 8011886:	f8dc 0000 	ldr.w	r0, [ip]
 801188a:	b281      	uxth	r1, r0
 801188c:	fb02 7101 	mla	r1, r2, r1, r7
 8011890:	0c0f      	lsrs	r7, r1, #16
 8011892:	0c00      	lsrs	r0, r0, #16
 8011894:	fb02 7000 	mla	r0, r2, r0, r7
 8011898:	b289      	uxth	r1, r1
 801189a:	3301      	adds	r3, #1
 801189c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80118a0:	429d      	cmp	r5, r3
 80118a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80118a6:	f84c 1b04 	str.w	r1, [ip], #4
 80118aa:	dcec      	bgt.n	8011886 <__multadd+0x12>
 80118ac:	b1d7      	cbz	r7, 80118e4 <__multadd+0x70>
 80118ae:	68a3      	ldr	r3, [r4, #8]
 80118b0:	42ab      	cmp	r3, r5
 80118b2:	dc12      	bgt.n	80118da <__multadd+0x66>
 80118b4:	6861      	ldr	r1, [r4, #4]
 80118b6:	4630      	mov	r0, r6
 80118b8:	3101      	adds	r1, #1
 80118ba:	f7ff ff90 	bl	80117de <_Balloc>
 80118be:	6922      	ldr	r2, [r4, #16]
 80118c0:	3202      	adds	r2, #2
 80118c2:	f104 010c 	add.w	r1, r4, #12
 80118c6:	4680      	mov	r8, r0
 80118c8:	0092      	lsls	r2, r2, #2
 80118ca:	300c      	adds	r0, #12
 80118cc:	f7ff ff7c 	bl	80117c8 <memcpy>
 80118d0:	4621      	mov	r1, r4
 80118d2:	4630      	mov	r0, r6
 80118d4:	f7ff ffb7 	bl	8011846 <_Bfree>
 80118d8:	4644      	mov	r4, r8
 80118da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80118de:	3501      	adds	r5, #1
 80118e0:	615f      	str	r7, [r3, #20]
 80118e2:	6125      	str	r5, [r4, #16]
 80118e4:	4620      	mov	r0, r4
 80118e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080118ea <__s2b>:
 80118ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118ee:	460c      	mov	r4, r1
 80118f0:	4615      	mov	r5, r2
 80118f2:	461f      	mov	r7, r3
 80118f4:	2209      	movs	r2, #9
 80118f6:	3308      	adds	r3, #8
 80118f8:	4606      	mov	r6, r0
 80118fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80118fe:	2100      	movs	r1, #0
 8011900:	2201      	movs	r2, #1
 8011902:	429a      	cmp	r2, r3
 8011904:	db20      	blt.n	8011948 <__s2b+0x5e>
 8011906:	4630      	mov	r0, r6
 8011908:	f7ff ff69 	bl	80117de <_Balloc>
 801190c:	9b08      	ldr	r3, [sp, #32]
 801190e:	6143      	str	r3, [r0, #20]
 8011910:	2d09      	cmp	r5, #9
 8011912:	f04f 0301 	mov.w	r3, #1
 8011916:	6103      	str	r3, [r0, #16]
 8011918:	dd19      	ble.n	801194e <__s2b+0x64>
 801191a:	f104 0809 	add.w	r8, r4, #9
 801191e:	46c1      	mov	r9, r8
 8011920:	442c      	add	r4, r5
 8011922:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011926:	4601      	mov	r1, r0
 8011928:	3b30      	subs	r3, #48	; 0x30
 801192a:	220a      	movs	r2, #10
 801192c:	4630      	mov	r0, r6
 801192e:	f7ff ffa1 	bl	8011874 <__multadd>
 8011932:	45a1      	cmp	r9, r4
 8011934:	d1f5      	bne.n	8011922 <__s2b+0x38>
 8011936:	eb08 0405 	add.w	r4, r8, r5
 801193a:	3c08      	subs	r4, #8
 801193c:	1b2d      	subs	r5, r5, r4
 801193e:	1963      	adds	r3, r4, r5
 8011940:	42bb      	cmp	r3, r7
 8011942:	db07      	blt.n	8011954 <__s2b+0x6a>
 8011944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011948:	0052      	lsls	r2, r2, #1
 801194a:	3101      	adds	r1, #1
 801194c:	e7d9      	b.n	8011902 <__s2b+0x18>
 801194e:	340a      	adds	r4, #10
 8011950:	2509      	movs	r5, #9
 8011952:	e7f3      	b.n	801193c <__s2b+0x52>
 8011954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011958:	4601      	mov	r1, r0
 801195a:	3b30      	subs	r3, #48	; 0x30
 801195c:	220a      	movs	r2, #10
 801195e:	4630      	mov	r0, r6
 8011960:	f7ff ff88 	bl	8011874 <__multadd>
 8011964:	e7eb      	b.n	801193e <__s2b+0x54>

08011966 <__hi0bits>:
 8011966:	0c02      	lsrs	r2, r0, #16
 8011968:	0412      	lsls	r2, r2, #16
 801196a:	4603      	mov	r3, r0
 801196c:	b9b2      	cbnz	r2, 801199c <__hi0bits+0x36>
 801196e:	0403      	lsls	r3, r0, #16
 8011970:	2010      	movs	r0, #16
 8011972:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011976:	bf04      	itt	eq
 8011978:	021b      	lsleq	r3, r3, #8
 801197a:	3008      	addeq	r0, #8
 801197c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011980:	bf04      	itt	eq
 8011982:	011b      	lsleq	r3, r3, #4
 8011984:	3004      	addeq	r0, #4
 8011986:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801198a:	bf04      	itt	eq
 801198c:	009b      	lsleq	r3, r3, #2
 801198e:	3002      	addeq	r0, #2
 8011990:	2b00      	cmp	r3, #0
 8011992:	db06      	blt.n	80119a2 <__hi0bits+0x3c>
 8011994:	005b      	lsls	r3, r3, #1
 8011996:	d503      	bpl.n	80119a0 <__hi0bits+0x3a>
 8011998:	3001      	adds	r0, #1
 801199a:	4770      	bx	lr
 801199c:	2000      	movs	r0, #0
 801199e:	e7e8      	b.n	8011972 <__hi0bits+0xc>
 80119a0:	2020      	movs	r0, #32
 80119a2:	4770      	bx	lr

080119a4 <__lo0bits>:
 80119a4:	6803      	ldr	r3, [r0, #0]
 80119a6:	f013 0207 	ands.w	r2, r3, #7
 80119aa:	4601      	mov	r1, r0
 80119ac:	d00b      	beq.n	80119c6 <__lo0bits+0x22>
 80119ae:	07da      	lsls	r2, r3, #31
 80119b0:	d423      	bmi.n	80119fa <__lo0bits+0x56>
 80119b2:	0798      	lsls	r0, r3, #30
 80119b4:	bf49      	itett	mi
 80119b6:	085b      	lsrmi	r3, r3, #1
 80119b8:	089b      	lsrpl	r3, r3, #2
 80119ba:	2001      	movmi	r0, #1
 80119bc:	600b      	strmi	r3, [r1, #0]
 80119be:	bf5c      	itt	pl
 80119c0:	600b      	strpl	r3, [r1, #0]
 80119c2:	2002      	movpl	r0, #2
 80119c4:	4770      	bx	lr
 80119c6:	b298      	uxth	r0, r3
 80119c8:	b9a8      	cbnz	r0, 80119f6 <__lo0bits+0x52>
 80119ca:	0c1b      	lsrs	r3, r3, #16
 80119cc:	2010      	movs	r0, #16
 80119ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80119d2:	bf04      	itt	eq
 80119d4:	0a1b      	lsreq	r3, r3, #8
 80119d6:	3008      	addeq	r0, #8
 80119d8:	071a      	lsls	r2, r3, #28
 80119da:	bf04      	itt	eq
 80119dc:	091b      	lsreq	r3, r3, #4
 80119de:	3004      	addeq	r0, #4
 80119e0:	079a      	lsls	r2, r3, #30
 80119e2:	bf04      	itt	eq
 80119e4:	089b      	lsreq	r3, r3, #2
 80119e6:	3002      	addeq	r0, #2
 80119e8:	07da      	lsls	r2, r3, #31
 80119ea:	d402      	bmi.n	80119f2 <__lo0bits+0x4e>
 80119ec:	085b      	lsrs	r3, r3, #1
 80119ee:	d006      	beq.n	80119fe <__lo0bits+0x5a>
 80119f0:	3001      	adds	r0, #1
 80119f2:	600b      	str	r3, [r1, #0]
 80119f4:	4770      	bx	lr
 80119f6:	4610      	mov	r0, r2
 80119f8:	e7e9      	b.n	80119ce <__lo0bits+0x2a>
 80119fa:	2000      	movs	r0, #0
 80119fc:	4770      	bx	lr
 80119fe:	2020      	movs	r0, #32
 8011a00:	4770      	bx	lr

08011a02 <__i2b>:
 8011a02:	b510      	push	{r4, lr}
 8011a04:	460c      	mov	r4, r1
 8011a06:	2101      	movs	r1, #1
 8011a08:	f7ff fee9 	bl	80117de <_Balloc>
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	6144      	str	r4, [r0, #20]
 8011a10:	6102      	str	r2, [r0, #16]
 8011a12:	bd10      	pop	{r4, pc}

08011a14 <__multiply>:
 8011a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a18:	4614      	mov	r4, r2
 8011a1a:	690a      	ldr	r2, [r1, #16]
 8011a1c:	6923      	ldr	r3, [r4, #16]
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	bfb8      	it	lt
 8011a22:	460b      	movlt	r3, r1
 8011a24:	4688      	mov	r8, r1
 8011a26:	bfbc      	itt	lt
 8011a28:	46a0      	movlt	r8, r4
 8011a2a:	461c      	movlt	r4, r3
 8011a2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011a30:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011a34:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011a3c:	eb07 0609 	add.w	r6, r7, r9
 8011a40:	42b3      	cmp	r3, r6
 8011a42:	bfb8      	it	lt
 8011a44:	3101      	addlt	r1, #1
 8011a46:	f7ff feca 	bl	80117de <_Balloc>
 8011a4a:	f100 0514 	add.w	r5, r0, #20
 8011a4e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011a52:	462b      	mov	r3, r5
 8011a54:	2200      	movs	r2, #0
 8011a56:	4573      	cmp	r3, lr
 8011a58:	d316      	bcc.n	8011a88 <__multiply+0x74>
 8011a5a:	f104 0214 	add.w	r2, r4, #20
 8011a5e:	f108 0114 	add.w	r1, r8, #20
 8011a62:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8011a66:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011a6a:	9300      	str	r3, [sp, #0]
 8011a6c:	9b00      	ldr	r3, [sp, #0]
 8011a6e:	9201      	str	r2, [sp, #4]
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d80c      	bhi.n	8011a8e <__multiply+0x7a>
 8011a74:	2e00      	cmp	r6, #0
 8011a76:	dd03      	ble.n	8011a80 <__multiply+0x6c>
 8011a78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d05d      	beq.n	8011b3c <__multiply+0x128>
 8011a80:	6106      	str	r6, [r0, #16]
 8011a82:	b003      	add	sp, #12
 8011a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a88:	f843 2b04 	str.w	r2, [r3], #4
 8011a8c:	e7e3      	b.n	8011a56 <__multiply+0x42>
 8011a8e:	f8b2 b000 	ldrh.w	fp, [r2]
 8011a92:	f1bb 0f00 	cmp.w	fp, #0
 8011a96:	d023      	beq.n	8011ae0 <__multiply+0xcc>
 8011a98:	4689      	mov	r9, r1
 8011a9a:	46ac      	mov	ip, r5
 8011a9c:	f04f 0800 	mov.w	r8, #0
 8011aa0:	f859 4b04 	ldr.w	r4, [r9], #4
 8011aa4:	f8dc a000 	ldr.w	sl, [ip]
 8011aa8:	b2a3      	uxth	r3, r4
 8011aaa:	fa1f fa8a 	uxth.w	sl, sl
 8011aae:	fb0b a303 	mla	r3, fp, r3, sl
 8011ab2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011ab6:	f8dc 4000 	ldr.w	r4, [ip]
 8011aba:	4443      	add	r3, r8
 8011abc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011ac0:	fb0b 840a 	mla	r4, fp, sl, r8
 8011ac4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8011ac8:	46e2      	mov	sl, ip
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011ad0:	454f      	cmp	r7, r9
 8011ad2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011ad6:	f84a 3b04 	str.w	r3, [sl], #4
 8011ada:	d82b      	bhi.n	8011b34 <__multiply+0x120>
 8011adc:	f8cc 8004 	str.w	r8, [ip, #4]
 8011ae0:	9b01      	ldr	r3, [sp, #4]
 8011ae2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8011ae6:	3204      	adds	r2, #4
 8011ae8:	f1ba 0f00 	cmp.w	sl, #0
 8011aec:	d020      	beq.n	8011b30 <__multiply+0x11c>
 8011aee:	682b      	ldr	r3, [r5, #0]
 8011af0:	4689      	mov	r9, r1
 8011af2:	46a8      	mov	r8, r5
 8011af4:	f04f 0b00 	mov.w	fp, #0
 8011af8:	f8b9 c000 	ldrh.w	ip, [r9]
 8011afc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011b00:	fb0a 440c 	mla	r4, sl, ip, r4
 8011b04:	445c      	add	r4, fp
 8011b06:	46c4      	mov	ip, r8
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011b0e:	f84c 3b04 	str.w	r3, [ip], #4
 8011b12:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b16:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011b1a:	0c1b      	lsrs	r3, r3, #16
 8011b1c:	fb0a b303 	mla	r3, sl, r3, fp
 8011b20:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8011b24:	454f      	cmp	r7, r9
 8011b26:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011b2a:	d805      	bhi.n	8011b38 <__multiply+0x124>
 8011b2c:	f8c8 3004 	str.w	r3, [r8, #4]
 8011b30:	3504      	adds	r5, #4
 8011b32:	e79b      	b.n	8011a6c <__multiply+0x58>
 8011b34:	46d4      	mov	ip, sl
 8011b36:	e7b3      	b.n	8011aa0 <__multiply+0x8c>
 8011b38:	46e0      	mov	r8, ip
 8011b3a:	e7dd      	b.n	8011af8 <__multiply+0xe4>
 8011b3c:	3e01      	subs	r6, #1
 8011b3e:	e799      	b.n	8011a74 <__multiply+0x60>

08011b40 <__pow5mult>:
 8011b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b44:	4615      	mov	r5, r2
 8011b46:	f012 0203 	ands.w	r2, r2, #3
 8011b4a:	4606      	mov	r6, r0
 8011b4c:	460f      	mov	r7, r1
 8011b4e:	d007      	beq.n	8011b60 <__pow5mult+0x20>
 8011b50:	3a01      	subs	r2, #1
 8011b52:	4c21      	ldr	r4, [pc, #132]	; (8011bd8 <__pow5mult+0x98>)
 8011b54:	2300      	movs	r3, #0
 8011b56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011b5a:	f7ff fe8b 	bl	8011874 <__multadd>
 8011b5e:	4607      	mov	r7, r0
 8011b60:	10ad      	asrs	r5, r5, #2
 8011b62:	d035      	beq.n	8011bd0 <__pow5mult+0x90>
 8011b64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011b66:	b93c      	cbnz	r4, 8011b78 <__pow5mult+0x38>
 8011b68:	2010      	movs	r0, #16
 8011b6a:	f7ff fe13 	bl	8011794 <malloc>
 8011b6e:	6270      	str	r0, [r6, #36]	; 0x24
 8011b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b74:	6004      	str	r4, [r0, #0]
 8011b76:	60c4      	str	r4, [r0, #12]
 8011b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011b80:	b94c      	cbnz	r4, 8011b96 <__pow5mult+0x56>
 8011b82:	f240 2171 	movw	r1, #625	; 0x271
 8011b86:	4630      	mov	r0, r6
 8011b88:	f7ff ff3b 	bl	8011a02 <__i2b>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b92:	4604      	mov	r4, r0
 8011b94:	6003      	str	r3, [r0, #0]
 8011b96:	f04f 0800 	mov.w	r8, #0
 8011b9a:	07eb      	lsls	r3, r5, #31
 8011b9c:	d50a      	bpl.n	8011bb4 <__pow5mult+0x74>
 8011b9e:	4639      	mov	r1, r7
 8011ba0:	4622      	mov	r2, r4
 8011ba2:	4630      	mov	r0, r6
 8011ba4:	f7ff ff36 	bl	8011a14 <__multiply>
 8011ba8:	4639      	mov	r1, r7
 8011baa:	4681      	mov	r9, r0
 8011bac:	4630      	mov	r0, r6
 8011bae:	f7ff fe4a 	bl	8011846 <_Bfree>
 8011bb2:	464f      	mov	r7, r9
 8011bb4:	106d      	asrs	r5, r5, #1
 8011bb6:	d00b      	beq.n	8011bd0 <__pow5mult+0x90>
 8011bb8:	6820      	ldr	r0, [r4, #0]
 8011bba:	b938      	cbnz	r0, 8011bcc <__pow5mult+0x8c>
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	f7ff ff27 	bl	8011a14 <__multiply>
 8011bc6:	6020      	str	r0, [r4, #0]
 8011bc8:	f8c0 8000 	str.w	r8, [r0]
 8011bcc:	4604      	mov	r4, r0
 8011bce:	e7e4      	b.n	8011b9a <__pow5mult+0x5a>
 8011bd0:	4638      	mov	r0, r7
 8011bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd6:	bf00      	nop
 8011bd8:	08012c38 	.word	0x08012c38

08011bdc <__lshift>:
 8011bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011be0:	460c      	mov	r4, r1
 8011be2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011be6:	6923      	ldr	r3, [r4, #16]
 8011be8:	6849      	ldr	r1, [r1, #4]
 8011bea:	eb0a 0903 	add.w	r9, sl, r3
 8011bee:	68a3      	ldr	r3, [r4, #8]
 8011bf0:	4607      	mov	r7, r0
 8011bf2:	4616      	mov	r6, r2
 8011bf4:	f109 0501 	add.w	r5, r9, #1
 8011bf8:	42ab      	cmp	r3, r5
 8011bfa:	db32      	blt.n	8011c62 <__lshift+0x86>
 8011bfc:	4638      	mov	r0, r7
 8011bfe:	f7ff fdee 	bl	80117de <_Balloc>
 8011c02:	2300      	movs	r3, #0
 8011c04:	4680      	mov	r8, r0
 8011c06:	f100 0114 	add.w	r1, r0, #20
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	4553      	cmp	r3, sl
 8011c0e:	db2b      	blt.n	8011c68 <__lshift+0x8c>
 8011c10:	6920      	ldr	r0, [r4, #16]
 8011c12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c16:	f104 0314 	add.w	r3, r4, #20
 8011c1a:	f016 021f 	ands.w	r2, r6, #31
 8011c1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011c26:	d025      	beq.n	8011c74 <__lshift+0x98>
 8011c28:	f1c2 0e20 	rsb	lr, r2, #32
 8011c2c:	2000      	movs	r0, #0
 8011c2e:	681e      	ldr	r6, [r3, #0]
 8011c30:	468a      	mov	sl, r1
 8011c32:	4096      	lsls	r6, r2
 8011c34:	4330      	orrs	r0, r6
 8011c36:	f84a 0b04 	str.w	r0, [sl], #4
 8011c3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8011c3e:	459c      	cmp	ip, r3
 8011c40:	fa20 f00e 	lsr.w	r0, r0, lr
 8011c44:	d814      	bhi.n	8011c70 <__lshift+0x94>
 8011c46:	6048      	str	r0, [r1, #4]
 8011c48:	b108      	cbz	r0, 8011c4e <__lshift+0x72>
 8011c4a:	f109 0502 	add.w	r5, r9, #2
 8011c4e:	3d01      	subs	r5, #1
 8011c50:	4638      	mov	r0, r7
 8011c52:	f8c8 5010 	str.w	r5, [r8, #16]
 8011c56:	4621      	mov	r1, r4
 8011c58:	f7ff fdf5 	bl	8011846 <_Bfree>
 8011c5c:	4640      	mov	r0, r8
 8011c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c62:	3101      	adds	r1, #1
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	e7c7      	b.n	8011bf8 <__lshift+0x1c>
 8011c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	e7cd      	b.n	8011c0c <__lshift+0x30>
 8011c70:	4651      	mov	r1, sl
 8011c72:	e7dc      	b.n	8011c2e <__lshift+0x52>
 8011c74:	3904      	subs	r1, #4
 8011c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8011c7e:	459c      	cmp	ip, r3
 8011c80:	d8f9      	bhi.n	8011c76 <__lshift+0x9a>
 8011c82:	e7e4      	b.n	8011c4e <__lshift+0x72>

08011c84 <__mcmp>:
 8011c84:	6903      	ldr	r3, [r0, #16]
 8011c86:	690a      	ldr	r2, [r1, #16]
 8011c88:	1a9b      	subs	r3, r3, r2
 8011c8a:	b530      	push	{r4, r5, lr}
 8011c8c:	d10c      	bne.n	8011ca8 <__mcmp+0x24>
 8011c8e:	0092      	lsls	r2, r2, #2
 8011c90:	3014      	adds	r0, #20
 8011c92:	3114      	adds	r1, #20
 8011c94:	1884      	adds	r4, r0, r2
 8011c96:	4411      	add	r1, r2
 8011c98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011c9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011ca0:	4295      	cmp	r5, r2
 8011ca2:	d003      	beq.n	8011cac <__mcmp+0x28>
 8011ca4:	d305      	bcc.n	8011cb2 <__mcmp+0x2e>
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	4618      	mov	r0, r3
 8011caa:	bd30      	pop	{r4, r5, pc}
 8011cac:	42a0      	cmp	r0, r4
 8011cae:	d3f3      	bcc.n	8011c98 <__mcmp+0x14>
 8011cb0:	e7fa      	b.n	8011ca8 <__mcmp+0x24>
 8011cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb6:	e7f7      	b.n	8011ca8 <__mcmp+0x24>

08011cb8 <__mdiff>:
 8011cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cbc:	460d      	mov	r5, r1
 8011cbe:	4607      	mov	r7, r0
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	4614      	mov	r4, r2
 8011cc6:	f7ff ffdd 	bl	8011c84 <__mcmp>
 8011cca:	1e06      	subs	r6, r0, #0
 8011ccc:	d108      	bne.n	8011ce0 <__mdiff+0x28>
 8011cce:	4631      	mov	r1, r6
 8011cd0:	4638      	mov	r0, r7
 8011cd2:	f7ff fd84 	bl	80117de <_Balloc>
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce0:	bfa4      	itt	ge
 8011ce2:	4623      	movge	r3, r4
 8011ce4:	462c      	movge	r4, r5
 8011ce6:	4638      	mov	r0, r7
 8011ce8:	6861      	ldr	r1, [r4, #4]
 8011cea:	bfa6      	itte	ge
 8011cec:	461d      	movge	r5, r3
 8011cee:	2600      	movge	r6, #0
 8011cf0:	2601      	movlt	r6, #1
 8011cf2:	f7ff fd74 	bl	80117de <_Balloc>
 8011cf6:	692b      	ldr	r3, [r5, #16]
 8011cf8:	60c6      	str	r6, [r0, #12]
 8011cfa:	6926      	ldr	r6, [r4, #16]
 8011cfc:	f105 0914 	add.w	r9, r5, #20
 8011d00:	f104 0214 	add.w	r2, r4, #20
 8011d04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011d08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011d0c:	f100 0514 	add.w	r5, r0, #20
 8011d10:	f04f 0e00 	mov.w	lr, #0
 8011d14:	f852 ab04 	ldr.w	sl, [r2], #4
 8011d18:	f859 4b04 	ldr.w	r4, [r9], #4
 8011d1c:	fa1e f18a 	uxtah	r1, lr, sl
 8011d20:	b2a3      	uxth	r3, r4
 8011d22:	1ac9      	subs	r1, r1, r3
 8011d24:	0c23      	lsrs	r3, r4, #16
 8011d26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011d2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011d2e:	b289      	uxth	r1, r1
 8011d30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011d34:	45c8      	cmp	r8, r9
 8011d36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011d3a:	4694      	mov	ip, r2
 8011d3c:	f845 3b04 	str.w	r3, [r5], #4
 8011d40:	d8e8      	bhi.n	8011d14 <__mdiff+0x5c>
 8011d42:	45bc      	cmp	ip, r7
 8011d44:	d304      	bcc.n	8011d50 <__mdiff+0x98>
 8011d46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011d4a:	b183      	cbz	r3, 8011d6e <__mdiff+0xb6>
 8011d4c:	6106      	str	r6, [r0, #16]
 8011d4e:	e7c5      	b.n	8011cdc <__mdiff+0x24>
 8011d50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011d54:	fa1e f381 	uxtah	r3, lr, r1
 8011d58:	141a      	asrs	r2, r3, #16
 8011d5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011d5e:	b29b      	uxth	r3, r3
 8011d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011d68:	f845 3b04 	str.w	r3, [r5], #4
 8011d6c:	e7e9      	b.n	8011d42 <__mdiff+0x8a>
 8011d6e:	3e01      	subs	r6, #1
 8011d70:	e7e9      	b.n	8011d46 <__mdiff+0x8e>
	...

08011d74 <__ulp>:
 8011d74:	4b12      	ldr	r3, [pc, #72]	; (8011dc0 <__ulp+0x4c>)
 8011d76:	ee10 2a90 	vmov	r2, s1
 8011d7a:	401a      	ands	r2, r3
 8011d7c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	dd04      	ble.n	8011d8e <__ulp+0x1a>
 8011d84:	2000      	movs	r0, #0
 8011d86:	4619      	mov	r1, r3
 8011d88:	ec41 0b10 	vmov	d0, r0, r1
 8011d8c:	4770      	bx	lr
 8011d8e:	425b      	negs	r3, r3
 8011d90:	151b      	asrs	r3, r3, #20
 8011d92:	2b13      	cmp	r3, #19
 8011d94:	f04f 0000 	mov.w	r0, #0
 8011d98:	f04f 0100 	mov.w	r1, #0
 8011d9c:	dc04      	bgt.n	8011da8 <__ulp+0x34>
 8011d9e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011da2:	fa42 f103 	asr.w	r1, r2, r3
 8011da6:	e7ef      	b.n	8011d88 <__ulp+0x14>
 8011da8:	3b14      	subs	r3, #20
 8011daa:	2b1e      	cmp	r3, #30
 8011dac:	f04f 0201 	mov.w	r2, #1
 8011db0:	bfda      	itte	le
 8011db2:	f1c3 031f 	rsble	r3, r3, #31
 8011db6:	fa02 f303 	lslle.w	r3, r2, r3
 8011dba:	4613      	movgt	r3, r2
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	e7e3      	b.n	8011d88 <__ulp+0x14>
 8011dc0:	7ff00000 	.word	0x7ff00000

08011dc4 <__b2d>:
 8011dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc6:	6905      	ldr	r5, [r0, #16]
 8011dc8:	f100 0714 	add.w	r7, r0, #20
 8011dcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011dd0:	1f2e      	subs	r6, r5, #4
 8011dd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	f7ff fdc5 	bl	8011966 <__hi0bits>
 8011ddc:	f1c0 0320 	rsb	r3, r0, #32
 8011de0:	280a      	cmp	r0, #10
 8011de2:	600b      	str	r3, [r1, #0]
 8011de4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011e5c <__b2d+0x98>
 8011de8:	dc14      	bgt.n	8011e14 <__b2d+0x50>
 8011dea:	f1c0 0e0b 	rsb	lr, r0, #11
 8011dee:	fa24 f10e 	lsr.w	r1, r4, lr
 8011df2:	42b7      	cmp	r7, r6
 8011df4:	ea41 030c 	orr.w	r3, r1, ip
 8011df8:	bf34      	ite	cc
 8011dfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011dfe:	2100      	movcs	r1, #0
 8011e00:	3015      	adds	r0, #21
 8011e02:	fa04 f000 	lsl.w	r0, r4, r0
 8011e06:	fa21 f10e 	lsr.w	r1, r1, lr
 8011e0a:	ea40 0201 	orr.w	r2, r0, r1
 8011e0e:	ec43 2b10 	vmov	d0, r2, r3
 8011e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e14:	42b7      	cmp	r7, r6
 8011e16:	bf3a      	itte	cc
 8011e18:	f1a5 0608 	subcc.w	r6, r5, #8
 8011e1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011e20:	2100      	movcs	r1, #0
 8011e22:	380b      	subs	r0, #11
 8011e24:	d015      	beq.n	8011e52 <__b2d+0x8e>
 8011e26:	4084      	lsls	r4, r0
 8011e28:	f1c0 0520 	rsb	r5, r0, #32
 8011e2c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011e30:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8011e34:	42be      	cmp	r6, r7
 8011e36:	fa21 fc05 	lsr.w	ip, r1, r5
 8011e3a:	ea44 030c 	orr.w	r3, r4, ip
 8011e3e:	bf8c      	ite	hi
 8011e40:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011e44:	2400      	movls	r4, #0
 8011e46:	fa01 f000 	lsl.w	r0, r1, r0
 8011e4a:	40ec      	lsrs	r4, r5
 8011e4c:	ea40 0204 	orr.w	r2, r0, r4
 8011e50:	e7dd      	b.n	8011e0e <__b2d+0x4a>
 8011e52:	ea44 030c 	orr.w	r3, r4, ip
 8011e56:	460a      	mov	r2, r1
 8011e58:	e7d9      	b.n	8011e0e <__b2d+0x4a>
 8011e5a:	bf00      	nop
 8011e5c:	3ff00000 	.word	0x3ff00000

08011e60 <__d2b>:
 8011e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011e64:	460e      	mov	r6, r1
 8011e66:	2101      	movs	r1, #1
 8011e68:	ec59 8b10 	vmov	r8, r9, d0
 8011e6c:	4615      	mov	r5, r2
 8011e6e:	f7ff fcb6 	bl	80117de <_Balloc>
 8011e72:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011e76:	4607      	mov	r7, r0
 8011e78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011e7c:	bb34      	cbnz	r4, 8011ecc <__d2b+0x6c>
 8011e7e:	9301      	str	r3, [sp, #4]
 8011e80:	f1b8 0300 	subs.w	r3, r8, #0
 8011e84:	d027      	beq.n	8011ed6 <__d2b+0x76>
 8011e86:	a802      	add	r0, sp, #8
 8011e88:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011e8c:	f7ff fd8a 	bl	80119a4 <__lo0bits>
 8011e90:	9900      	ldr	r1, [sp, #0]
 8011e92:	b1f0      	cbz	r0, 8011ed2 <__d2b+0x72>
 8011e94:	9a01      	ldr	r2, [sp, #4]
 8011e96:	f1c0 0320 	rsb	r3, r0, #32
 8011e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8011e9e:	430b      	orrs	r3, r1
 8011ea0:	40c2      	lsrs	r2, r0
 8011ea2:	617b      	str	r3, [r7, #20]
 8011ea4:	9201      	str	r2, [sp, #4]
 8011ea6:	9b01      	ldr	r3, [sp, #4]
 8011ea8:	61bb      	str	r3, [r7, #24]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	bf14      	ite	ne
 8011eae:	2102      	movne	r1, #2
 8011eb0:	2101      	moveq	r1, #1
 8011eb2:	6139      	str	r1, [r7, #16]
 8011eb4:	b1c4      	cbz	r4, 8011ee8 <__d2b+0x88>
 8011eb6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011eba:	4404      	add	r4, r0
 8011ebc:	6034      	str	r4, [r6, #0]
 8011ebe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011ec2:	6028      	str	r0, [r5, #0]
 8011ec4:	4638      	mov	r0, r7
 8011ec6:	b003      	add	sp, #12
 8011ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ed0:	e7d5      	b.n	8011e7e <__d2b+0x1e>
 8011ed2:	6179      	str	r1, [r7, #20]
 8011ed4:	e7e7      	b.n	8011ea6 <__d2b+0x46>
 8011ed6:	a801      	add	r0, sp, #4
 8011ed8:	f7ff fd64 	bl	80119a4 <__lo0bits>
 8011edc:	9b01      	ldr	r3, [sp, #4]
 8011ede:	617b      	str	r3, [r7, #20]
 8011ee0:	2101      	movs	r1, #1
 8011ee2:	6139      	str	r1, [r7, #16]
 8011ee4:	3020      	adds	r0, #32
 8011ee6:	e7e5      	b.n	8011eb4 <__d2b+0x54>
 8011ee8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011eec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ef0:	6030      	str	r0, [r6, #0]
 8011ef2:	6918      	ldr	r0, [r3, #16]
 8011ef4:	f7ff fd37 	bl	8011966 <__hi0bits>
 8011ef8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011efc:	e7e1      	b.n	8011ec2 <__d2b+0x62>

08011efe <__ratio>:
 8011efe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f02:	4688      	mov	r8, r1
 8011f04:	4669      	mov	r1, sp
 8011f06:	4681      	mov	r9, r0
 8011f08:	f7ff ff5c 	bl	8011dc4 <__b2d>
 8011f0c:	a901      	add	r1, sp, #4
 8011f0e:	4640      	mov	r0, r8
 8011f10:	ec57 6b10 	vmov	r6, r7, d0
 8011f14:	ee10 4a10 	vmov	r4, s0
 8011f18:	f7ff ff54 	bl	8011dc4 <__b2d>
 8011f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011f24:	eba3 0c02 	sub.w	ip, r3, r2
 8011f28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011f2c:	1a9b      	subs	r3, r3, r2
 8011f2e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011f32:	ec51 0b10 	vmov	r0, r1, d0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	ee10 aa10 	vmov	sl, s0
 8011f3c:	bfce      	itee	gt
 8011f3e:	463a      	movgt	r2, r7
 8011f40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011f44:	460a      	movle	r2, r1
 8011f46:	463d      	mov	r5, r7
 8011f48:	468b      	mov	fp, r1
 8011f4a:	bfcc      	ite	gt
 8011f4c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011f50:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011f54:	ec45 4b17 	vmov	d7, r4, r5
 8011f58:	ec4b ab16 	vmov	d6, sl, fp
 8011f5c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8011f60:	b003      	add	sp, #12
 8011f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011f66 <__copybits>:
 8011f66:	3901      	subs	r1, #1
 8011f68:	b510      	push	{r4, lr}
 8011f6a:	1149      	asrs	r1, r1, #5
 8011f6c:	6914      	ldr	r4, [r2, #16]
 8011f6e:	3101      	adds	r1, #1
 8011f70:	f102 0314 	add.w	r3, r2, #20
 8011f74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011f78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011f7c:	42a3      	cmp	r3, r4
 8011f7e:	4602      	mov	r2, r0
 8011f80:	d303      	bcc.n	8011f8a <__copybits+0x24>
 8011f82:	2300      	movs	r3, #0
 8011f84:	428a      	cmp	r2, r1
 8011f86:	d305      	bcc.n	8011f94 <__copybits+0x2e>
 8011f88:	bd10      	pop	{r4, pc}
 8011f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f8e:	f840 2b04 	str.w	r2, [r0], #4
 8011f92:	e7f3      	b.n	8011f7c <__copybits+0x16>
 8011f94:	f842 3b04 	str.w	r3, [r2], #4
 8011f98:	e7f4      	b.n	8011f84 <__copybits+0x1e>

08011f9a <__any_on>:
 8011f9a:	f100 0214 	add.w	r2, r0, #20
 8011f9e:	6900      	ldr	r0, [r0, #16]
 8011fa0:	114b      	asrs	r3, r1, #5
 8011fa2:	4298      	cmp	r0, r3
 8011fa4:	b510      	push	{r4, lr}
 8011fa6:	db11      	blt.n	8011fcc <__any_on+0x32>
 8011fa8:	dd0a      	ble.n	8011fc0 <__any_on+0x26>
 8011faa:	f011 011f 	ands.w	r1, r1, #31
 8011fae:	d007      	beq.n	8011fc0 <__any_on+0x26>
 8011fb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011fb4:	fa24 f001 	lsr.w	r0, r4, r1
 8011fb8:	fa00 f101 	lsl.w	r1, r0, r1
 8011fbc:	428c      	cmp	r4, r1
 8011fbe:	d10b      	bne.n	8011fd8 <__any_on+0x3e>
 8011fc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011fc4:	4293      	cmp	r3, r2
 8011fc6:	d803      	bhi.n	8011fd0 <__any_on+0x36>
 8011fc8:	2000      	movs	r0, #0
 8011fca:	bd10      	pop	{r4, pc}
 8011fcc:	4603      	mov	r3, r0
 8011fce:	e7f7      	b.n	8011fc0 <__any_on+0x26>
 8011fd0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011fd4:	2900      	cmp	r1, #0
 8011fd6:	d0f5      	beq.n	8011fc4 <__any_on+0x2a>
 8011fd8:	2001      	movs	r0, #1
 8011fda:	e7f6      	b.n	8011fca <__any_on+0x30>

08011fdc <_calloc_r>:
 8011fdc:	b538      	push	{r3, r4, r5, lr}
 8011fde:	fb02 f401 	mul.w	r4, r2, r1
 8011fe2:	4621      	mov	r1, r4
 8011fe4:	f000 f856 	bl	8012094 <_malloc_r>
 8011fe8:	4605      	mov	r5, r0
 8011fea:	b118      	cbz	r0, 8011ff4 <_calloc_r+0x18>
 8011fec:	4622      	mov	r2, r4
 8011fee:	2100      	movs	r1, #0
 8011ff0:	f7fc fdfc 	bl	800ebec <memset>
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	bd38      	pop	{r3, r4, r5, pc}

08011ff8 <_free_r>:
 8011ff8:	b538      	push	{r3, r4, r5, lr}
 8011ffa:	4605      	mov	r5, r0
 8011ffc:	2900      	cmp	r1, #0
 8011ffe:	d045      	beq.n	801208c <_free_r+0x94>
 8012000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012004:	1f0c      	subs	r4, r1, #4
 8012006:	2b00      	cmp	r3, #0
 8012008:	bfb8      	it	lt
 801200a:	18e4      	addlt	r4, r4, r3
 801200c:	f000 fa36 	bl	801247c <__malloc_lock>
 8012010:	4a1f      	ldr	r2, [pc, #124]	; (8012090 <_free_r+0x98>)
 8012012:	6813      	ldr	r3, [r2, #0]
 8012014:	4610      	mov	r0, r2
 8012016:	b933      	cbnz	r3, 8012026 <_free_r+0x2e>
 8012018:	6063      	str	r3, [r4, #4]
 801201a:	6014      	str	r4, [r2, #0]
 801201c:	4628      	mov	r0, r5
 801201e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012022:	f000 ba2c 	b.w	801247e <__malloc_unlock>
 8012026:	42a3      	cmp	r3, r4
 8012028:	d90c      	bls.n	8012044 <_free_r+0x4c>
 801202a:	6821      	ldr	r1, [r4, #0]
 801202c:	1862      	adds	r2, r4, r1
 801202e:	4293      	cmp	r3, r2
 8012030:	bf04      	itt	eq
 8012032:	681a      	ldreq	r2, [r3, #0]
 8012034:	685b      	ldreq	r3, [r3, #4]
 8012036:	6063      	str	r3, [r4, #4]
 8012038:	bf04      	itt	eq
 801203a:	1852      	addeq	r2, r2, r1
 801203c:	6022      	streq	r2, [r4, #0]
 801203e:	6004      	str	r4, [r0, #0]
 8012040:	e7ec      	b.n	801201c <_free_r+0x24>
 8012042:	4613      	mov	r3, r2
 8012044:	685a      	ldr	r2, [r3, #4]
 8012046:	b10a      	cbz	r2, 801204c <_free_r+0x54>
 8012048:	42a2      	cmp	r2, r4
 801204a:	d9fa      	bls.n	8012042 <_free_r+0x4a>
 801204c:	6819      	ldr	r1, [r3, #0]
 801204e:	1858      	adds	r0, r3, r1
 8012050:	42a0      	cmp	r0, r4
 8012052:	d10b      	bne.n	801206c <_free_r+0x74>
 8012054:	6820      	ldr	r0, [r4, #0]
 8012056:	4401      	add	r1, r0
 8012058:	1858      	adds	r0, r3, r1
 801205a:	4282      	cmp	r2, r0
 801205c:	6019      	str	r1, [r3, #0]
 801205e:	d1dd      	bne.n	801201c <_free_r+0x24>
 8012060:	6810      	ldr	r0, [r2, #0]
 8012062:	6852      	ldr	r2, [r2, #4]
 8012064:	605a      	str	r2, [r3, #4]
 8012066:	4401      	add	r1, r0
 8012068:	6019      	str	r1, [r3, #0]
 801206a:	e7d7      	b.n	801201c <_free_r+0x24>
 801206c:	d902      	bls.n	8012074 <_free_r+0x7c>
 801206e:	230c      	movs	r3, #12
 8012070:	602b      	str	r3, [r5, #0]
 8012072:	e7d3      	b.n	801201c <_free_r+0x24>
 8012074:	6820      	ldr	r0, [r4, #0]
 8012076:	1821      	adds	r1, r4, r0
 8012078:	428a      	cmp	r2, r1
 801207a:	bf04      	itt	eq
 801207c:	6811      	ldreq	r1, [r2, #0]
 801207e:	6852      	ldreq	r2, [r2, #4]
 8012080:	6062      	str	r2, [r4, #4]
 8012082:	bf04      	itt	eq
 8012084:	1809      	addeq	r1, r1, r0
 8012086:	6021      	streq	r1, [r4, #0]
 8012088:	605c      	str	r4, [r3, #4]
 801208a:	e7c7      	b.n	801201c <_free_r+0x24>
 801208c:	bd38      	pop	{r3, r4, r5, pc}
 801208e:	bf00      	nop
 8012090:	20000d64 	.word	0x20000d64

08012094 <_malloc_r>:
 8012094:	b570      	push	{r4, r5, r6, lr}
 8012096:	1ccd      	adds	r5, r1, #3
 8012098:	f025 0503 	bic.w	r5, r5, #3
 801209c:	3508      	adds	r5, #8
 801209e:	2d0c      	cmp	r5, #12
 80120a0:	bf38      	it	cc
 80120a2:	250c      	movcc	r5, #12
 80120a4:	2d00      	cmp	r5, #0
 80120a6:	4606      	mov	r6, r0
 80120a8:	db01      	blt.n	80120ae <_malloc_r+0x1a>
 80120aa:	42a9      	cmp	r1, r5
 80120ac:	d903      	bls.n	80120b6 <_malloc_r+0x22>
 80120ae:	230c      	movs	r3, #12
 80120b0:	6033      	str	r3, [r6, #0]
 80120b2:	2000      	movs	r0, #0
 80120b4:	bd70      	pop	{r4, r5, r6, pc}
 80120b6:	f000 f9e1 	bl	801247c <__malloc_lock>
 80120ba:	4a21      	ldr	r2, [pc, #132]	; (8012140 <_malloc_r+0xac>)
 80120bc:	6814      	ldr	r4, [r2, #0]
 80120be:	4621      	mov	r1, r4
 80120c0:	b991      	cbnz	r1, 80120e8 <_malloc_r+0x54>
 80120c2:	4c20      	ldr	r4, [pc, #128]	; (8012144 <_malloc_r+0xb0>)
 80120c4:	6823      	ldr	r3, [r4, #0]
 80120c6:	b91b      	cbnz	r3, 80120d0 <_malloc_r+0x3c>
 80120c8:	4630      	mov	r0, r6
 80120ca:	f000 f98f 	bl	80123ec <_sbrk_r>
 80120ce:	6020      	str	r0, [r4, #0]
 80120d0:	4629      	mov	r1, r5
 80120d2:	4630      	mov	r0, r6
 80120d4:	f000 f98a 	bl	80123ec <_sbrk_r>
 80120d8:	1c43      	adds	r3, r0, #1
 80120da:	d124      	bne.n	8012126 <_malloc_r+0x92>
 80120dc:	230c      	movs	r3, #12
 80120de:	6033      	str	r3, [r6, #0]
 80120e0:	4630      	mov	r0, r6
 80120e2:	f000 f9cc 	bl	801247e <__malloc_unlock>
 80120e6:	e7e4      	b.n	80120b2 <_malloc_r+0x1e>
 80120e8:	680b      	ldr	r3, [r1, #0]
 80120ea:	1b5b      	subs	r3, r3, r5
 80120ec:	d418      	bmi.n	8012120 <_malloc_r+0x8c>
 80120ee:	2b0b      	cmp	r3, #11
 80120f0:	d90f      	bls.n	8012112 <_malloc_r+0x7e>
 80120f2:	600b      	str	r3, [r1, #0]
 80120f4:	50cd      	str	r5, [r1, r3]
 80120f6:	18cc      	adds	r4, r1, r3
 80120f8:	4630      	mov	r0, r6
 80120fa:	f000 f9c0 	bl	801247e <__malloc_unlock>
 80120fe:	f104 000b 	add.w	r0, r4, #11
 8012102:	1d23      	adds	r3, r4, #4
 8012104:	f020 0007 	bic.w	r0, r0, #7
 8012108:	1ac3      	subs	r3, r0, r3
 801210a:	d0d3      	beq.n	80120b4 <_malloc_r+0x20>
 801210c:	425a      	negs	r2, r3
 801210e:	50e2      	str	r2, [r4, r3]
 8012110:	e7d0      	b.n	80120b4 <_malloc_r+0x20>
 8012112:	428c      	cmp	r4, r1
 8012114:	684b      	ldr	r3, [r1, #4]
 8012116:	bf16      	itet	ne
 8012118:	6063      	strne	r3, [r4, #4]
 801211a:	6013      	streq	r3, [r2, #0]
 801211c:	460c      	movne	r4, r1
 801211e:	e7eb      	b.n	80120f8 <_malloc_r+0x64>
 8012120:	460c      	mov	r4, r1
 8012122:	6849      	ldr	r1, [r1, #4]
 8012124:	e7cc      	b.n	80120c0 <_malloc_r+0x2c>
 8012126:	1cc4      	adds	r4, r0, #3
 8012128:	f024 0403 	bic.w	r4, r4, #3
 801212c:	42a0      	cmp	r0, r4
 801212e:	d005      	beq.n	801213c <_malloc_r+0xa8>
 8012130:	1a21      	subs	r1, r4, r0
 8012132:	4630      	mov	r0, r6
 8012134:	f000 f95a 	bl	80123ec <_sbrk_r>
 8012138:	3001      	adds	r0, #1
 801213a:	d0cf      	beq.n	80120dc <_malloc_r+0x48>
 801213c:	6025      	str	r5, [r4, #0]
 801213e:	e7db      	b.n	80120f8 <_malloc_r+0x64>
 8012140:	20000d64 	.word	0x20000d64
 8012144:	20000d68 	.word	0x20000d68

08012148 <__ssputs_r>:
 8012148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801214c:	688e      	ldr	r6, [r1, #8]
 801214e:	429e      	cmp	r6, r3
 8012150:	4682      	mov	sl, r0
 8012152:	460c      	mov	r4, r1
 8012154:	4690      	mov	r8, r2
 8012156:	4699      	mov	r9, r3
 8012158:	d837      	bhi.n	80121ca <__ssputs_r+0x82>
 801215a:	898a      	ldrh	r2, [r1, #12]
 801215c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012160:	d031      	beq.n	80121c6 <__ssputs_r+0x7e>
 8012162:	6825      	ldr	r5, [r4, #0]
 8012164:	6909      	ldr	r1, [r1, #16]
 8012166:	1a6f      	subs	r7, r5, r1
 8012168:	6965      	ldr	r5, [r4, #20]
 801216a:	2302      	movs	r3, #2
 801216c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012170:	fb95 f5f3 	sdiv	r5, r5, r3
 8012174:	f109 0301 	add.w	r3, r9, #1
 8012178:	443b      	add	r3, r7
 801217a:	429d      	cmp	r5, r3
 801217c:	bf38      	it	cc
 801217e:	461d      	movcc	r5, r3
 8012180:	0553      	lsls	r3, r2, #21
 8012182:	d530      	bpl.n	80121e6 <__ssputs_r+0x9e>
 8012184:	4629      	mov	r1, r5
 8012186:	f7ff ff85 	bl	8012094 <_malloc_r>
 801218a:	4606      	mov	r6, r0
 801218c:	b950      	cbnz	r0, 80121a4 <__ssputs_r+0x5c>
 801218e:	230c      	movs	r3, #12
 8012190:	f8ca 3000 	str.w	r3, [sl]
 8012194:	89a3      	ldrh	r3, [r4, #12]
 8012196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801219a:	81a3      	strh	r3, [r4, #12]
 801219c:	f04f 30ff 	mov.w	r0, #4294967295
 80121a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121a4:	463a      	mov	r2, r7
 80121a6:	6921      	ldr	r1, [r4, #16]
 80121a8:	f7ff fb0e 	bl	80117c8 <memcpy>
 80121ac:	89a3      	ldrh	r3, [r4, #12]
 80121ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80121b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121b6:	81a3      	strh	r3, [r4, #12]
 80121b8:	6126      	str	r6, [r4, #16]
 80121ba:	6165      	str	r5, [r4, #20]
 80121bc:	443e      	add	r6, r7
 80121be:	1bed      	subs	r5, r5, r7
 80121c0:	6026      	str	r6, [r4, #0]
 80121c2:	60a5      	str	r5, [r4, #8]
 80121c4:	464e      	mov	r6, r9
 80121c6:	454e      	cmp	r6, r9
 80121c8:	d900      	bls.n	80121cc <__ssputs_r+0x84>
 80121ca:	464e      	mov	r6, r9
 80121cc:	4632      	mov	r2, r6
 80121ce:	4641      	mov	r1, r8
 80121d0:	6820      	ldr	r0, [r4, #0]
 80121d2:	f000 f93a 	bl	801244a <memmove>
 80121d6:	68a3      	ldr	r3, [r4, #8]
 80121d8:	1b9b      	subs	r3, r3, r6
 80121da:	60a3      	str	r3, [r4, #8]
 80121dc:	6823      	ldr	r3, [r4, #0]
 80121de:	441e      	add	r6, r3
 80121e0:	6026      	str	r6, [r4, #0]
 80121e2:	2000      	movs	r0, #0
 80121e4:	e7dc      	b.n	80121a0 <__ssputs_r+0x58>
 80121e6:	462a      	mov	r2, r5
 80121e8:	f000 f94a 	bl	8012480 <_realloc_r>
 80121ec:	4606      	mov	r6, r0
 80121ee:	2800      	cmp	r0, #0
 80121f0:	d1e2      	bne.n	80121b8 <__ssputs_r+0x70>
 80121f2:	6921      	ldr	r1, [r4, #16]
 80121f4:	4650      	mov	r0, sl
 80121f6:	f7ff feff 	bl	8011ff8 <_free_r>
 80121fa:	e7c8      	b.n	801218e <__ssputs_r+0x46>

080121fc <_svfiprintf_r>:
 80121fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012200:	461d      	mov	r5, r3
 8012202:	898b      	ldrh	r3, [r1, #12]
 8012204:	061f      	lsls	r7, r3, #24
 8012206:	b09d      	sub	sp, #116	; 0x74
 8012208:	4680      	mov	r8, r0
 801220a:	460c      	mov	r4, r1
 801220c:	4616      	mov	r6, r2
 801220e:	d50f      	bpl.n	8012230 <_svfiprintf_r+0x34>
 8012210:	690b      	ldr	r3, [r1, #16]
 8012212:	b96b      	cbnz	r3, 8012230 <_svfiprintf_r+0x34>
 8012214:	2140      	movs	r1, #64	; 0x40
 8012216:	f7ff ff3d 	bl	8012094 <_malloc_r>
 801221a:	6020      	str	r0, [r4, #0]
 801221c:	6120      	str	r0, [r4, #16]
 801221e:	b928      	cbnz	r0, 801222c <_svfiprintf_r+0x30>
 8012220:	230c      	movs	r3, #12
 8012222:	f8c8 3000 	str.w	r3, [r8]
 8012226:	f04f 30ff 	mov.w	r0, #4294967295
 801222a:	e0c8      	b.n	80123be <_svfiprintf_r+0x1c2>
 801222c:	2340      	movs	r3, #64	; 0x40
 801222e:	6163      	str	r3, [r4, #20]
 8012230:	2300      	movs	r3, #0
 8012232:	9309      	str	r3, [sp, #36]	; 0x24
 8012234:	2320      	movs	r3, #32
 8012236:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801223a:	2330      	movs	r3, #48	; 0x30
 801223c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012240:	9503      	str	r5, [sp, #12]
 8012242:	f04f 0b01 	mov.w	fp, #1
 8012246:	4637      	mov	r7, r6
 8012248:	463d      	mov	r5, r7
 801224a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801224e:	b10b      	cbz	r3, 8012254 <_svfiprintf_r+0x58>
 8012250:	2b25      	cmp	r3, #37	; 0x25
 8012252:	d13e      	bne.n	80122d2 <_svfiprintf_r+0xd6>
 8012254:	ebb7 0a06 	subs.w	sl, r7, r6
 8012258:	d00b      	beq.n	8012272 <_svfiprintf_r+0x76>
 801225a:	4653      	mov	r3, sl
 801225c:	4632      	mov	r2, r6
 801225e:	4621      	mov	r1, r4
 8012260:	4640      	mov	r0, r8
 8012262:	f7ff ff71 	bl	8012148 <__ssputs_r>
 8012266:	3001      	adds	r0, #1
 8012268:	f000 80a4 	beq.w	80123b4 <_svfiprintf_r+0x1b8>
 801226c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801226e:	4453      	add	r3, sl
 8012270:	9309      	str	r3, [sp, #36]	; 0x24
 8012272:	783b      	ldrb	r3, [r7, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	f000 809d 	beq.w	80123b4 <_svfiprintf_r+0x1b8>
 801227a:	2300      	movs	r3, #0
 801227c:	f04f 32ff 	mov.w	r2, #4294967295
 8012280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012284:	9304      	str	r3, [sp, #16]
 8012286:	9307      	str	r3, [sp, #28]
 8012288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801228c:	931a      	str	r3, [sp, #104]	; 0x68
 801228e:	462f      	mov	r7, r5
 8012290:	2205      	movs	r2, #5
 8012292:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012296:	4850      	ldr	r0, [pc, #320]	; (80123d8 <_svfiprintf_r+0x1dc>)
 8012298:	f7ed ffda 	bl	8000250 <memchr>
 801229c:	9b04      	ldr	r3, [sp, #16]
 801229e:	b9d0      	cbnz	r0, 80122d6 <_svfiprintf_r+0xda>
 80122a0:	06d9      	lsls	r1, r3, #27
 80122a2:	bf44      	itt	mi
 80122a4:	2220      	movmi	r2, #32
 80122a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80122aa:	071a      	lsls	r2, r3, #28
 80122ac:	bf44      	itt	mi
 80122ae:	222b      	movmi	r2, #43	; 0x2b
 80122b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80122b4:	782a      	ldrb	r2, [r5, #0]
 80122b6:	2a2a      	cmp	r2, #42	; 0x2a
 80122b8:	d015      	beq.n	80122e6 <_svfiprintf_r+0xea>
 80122ba:	9a07      	ldr	r2, [sp, #28]
 80122bc:	462f      	mov	r7, r5
 80122be:	2000      	movs	r0, #0
 80122c0:	250a      	movs	r5, #10
 80122c2:	4639      	mov	r1, r7
 80122c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122c8:	3b30      	subs	r3, #48	; 0x30
 80122ca:	2b09      	cmp	r3, #9
 80122cc:	d94d      	bls.n	801236a <_svfiprintf_r+0x16e>
 80122ce:	b1b8      	cbz	r0, 8012300 <_svfiprintf_r+0x104>
 80122d0:	e00f      	b.n	80122f2 <_svfiprintf_r+0xf6>
 80122d2:	462f      	mov	r7, r5
 80122d4:	e7b8      	b.n	8012248 <_svfiprintf_r+0x4c>
 80122d6:	4a40      	ldr	r2, [pc, #256]	; (80123d8 <_svfiprintf_r+0x1dc>)
 80122d8:	1a80      	subs	r0, r0, r2
 80122da:	fa0b f000 	lsl.w	r0, fp, r0
 80122de:	4318      	orrs	r0, r3
 80122e0:	9004      	str	r0, [sp, #16]
 80122e2:	463d      	mov	r5, r7
 80122e4:	e7d3      	b.n	801228e <_svfiprintf_r+0x92>
 80122e6:	9a03      	ldr	r2, [sp, #12]
 80122e8:	1d11      	adds	r1, r2, #4
 80122ea:	6812      	ldr	r2, [r2, #0]
 80122ec:	9103      	str	r1, [sp, #12]
 80122ee:	2a00      	cmp	r2, #0
 80122f0:	db01      	blt.n	80122f6 <_svfiprintf_r+0xfa>
 80122f2:	9207      	str	r2, [sp, #28]
 80122f4:	e004      	b.n	8012300 <_svfiprintf_r+0x104>
 80122f6:	4252      	negs	r2, r2
 80122f8:	f043 0302 	orr.w	r3, r3, #2
 80122fc:	9207      	str	r2, [sp, #28]
 80122fe:	9304      	str	r3, [sp, #16]
 8012300:	783b      	ldrb	r3, [r7, #0]
 8012302:	2b2e      	cmp	r3, #46	; 0x2e
 8012304:	d10c      	bne.n	8012320 <_svfiprintf_r+0x124>
 8012306:	787b      	ldrb	r3, [r7, #1]
 8012308:	2b2a      	cmp	r3, #42	; 0x2a
 801230a:	d133      	bne.n	8012374 <_svfiprintf_r+0x178>
 801230c:	9b03      	ldr	r3, [sp, #12]
 801230e:	1d1a      	adds	r2, r3, #4
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	9203      	str	r2, [sp, #12]
 8012314:	2b00      	cmp	r3, #0
 8012316:	bfb8      	it	lt
 8012318:	f04f 33ff 	movlt.w	r3, #4294967295
 801231c:	3702      	adds	r7, #2
 801231e:	9305      	str	r3, [sp, #20]
 8012320:	4d2e      	ldr	r5, [pc, #184]	; (80123dc <_svfiprintf_r+0x1e0>)
 8012322:	7839      	ldrb	r1, [r7, #0]
 8012324:	2203      	movs	r2, #3
 8012326:	4628      	mov	r0, r5
 8012328:	f7ed ff92 	bl	8000250 <memchr>
 801232c:	b138      	cbz	r0, 801233e <_svfiprintf_r+0x142>
 801232e:	2340      	movs	r3, #64	; 0x40
 8012330:	1b40      	subs	r0, r0, r5
 8012332:	fa03 f000 	lsl.w	r0, r3, r0
 8012336:	9b04      	ldr	r3, [sp, #16]
 8012338:	4303      	orrs	r3, r0
 801233a:	3701      	adds	r7, #1
 801233c:	9304      	str	r3, [sp, #16]
 801233e:	7839      	ldrb	r1, [r7, #0]
 8012340:	4827      	ldr	r0, [pc, #156]	; (80123e0 <_svfiprintf_r+0x1e4>)
 8012342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012346:	2206      	movs	r2, #6
 8012348:	1c7e      	adds	r6, r7, #1
 801234a:	f7ed ff81 	bl	8000250 <memchr>
 801234e:	2800      	cmp	r0, #0
 8012350:	d038      	beq.n	80123c4 <_svfiprintf_r+0x1c8>
 8012352:	4b24      	ldr	r3, [pc, #144]	; (80123e4 <_svfiprintf_r+0x1e8>)
 8012354:	bb13      	cbnz	r3, 801239c <_svfiprintf_r+0x1a0>
 8012356:	9b03      	ldr	r3, [sp, #12]
 8012358:	3307      	adds	r3, #7
 801235a:	f023 0307 	bic.w	r3, r3, #7
 801235e:	3308      	adds	r3, #8
 8012360:	9303      	str	r3, [sp, #12]
 8012362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012364:	444b      	add	r3, r9
 8012366:	9309      	str	r3, [sp, #36]	; 0x24
 8012368:	e76d      	b.n	8012246 <_svfiprintf_r+0x4a>
 801236a:	fb05 3202 	mla	r2, r5, r2, r3
 801236e:	2001      	movs	r0, #1
 8012370:	460f      	mov	r7, r1
 8012372:	e7a6      	b.n	80122c2 <_svfiprintf_r+0xc6>
 8012374:	2300      	movs	r3, #0
 8012376:	3701      	adds	r7, #1
 8012378:	9305      	str	r3, [sp, #20]
 801237a:	4619      	mov	r1, r3
 801237c:	250a      	movs	r5, #10
 801237e:	4638      	mov	r0, r7
 8012380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012384:	3a30      	subs	r2, #48	; 0x30
 8012386:	2a09      	cmp	r2, #9
 8012388:	d903      	bls.n	8012392 <_svfiprintf_r+0x196>
 801238a:	2b00      	cmp	r3, #0
 801238c:	d0c8      	beq.n	8012320 <_svfiprintf_r+0x124>
 801238e:	9105      	str	r1, [sp, #20]
 8012390:	e7c6      	b.n	8012320 <_svfiprintf_r+0x124>
 8012392:	fb05 2101 	mla	r1, r5, r1, r2
 8012396:	2301      	movs	r3, #1
 8012398:	4607      	mov	r7, r0
 801239a:	e7f0      	b.n	801237e <_svfiprintf_r+0x182>
 801239c:	ab03      	add	r3, sp, #12
 801239e:	9300      	str	r3, [sp, #0]
 80123a0:	4622      	mov	r2, r4
 80123a2:	4b11      	ldr	r3, [pc, #68]	; (80123e8 <_svfiprintf_r+0x1ec>)
 80123a4:	a904      	add	r1, sp, #16
 80123a6:	4640      	mov	r0, r8
 80123a8:	f7fc fcae 	bl	800ed08 <_printf_float>
 80123ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80123b0:	4681      	mov	r9, r0
 80123b2:	d1d6      	bne.n	8012362 <_svfiprintf_r+0x166>
 80123b4:	89a3      	ldrh	r3, [r4, #12]
 80123b6:	065b      	lsls	r3, r3, #25
 80123b8:	f53f af35 	bmi.w	8012226 <_svfiprintf_r+0x2a>
 80123bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123be:	b01d      	add	sp, #116	; 0x74
 80123c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c4:	ab03      	add	r3, sp, #12
 80123c6:	9300      	str	r3, [sp, #0]
 80123c8:	4622      	mov	r2, r4
 80123ca:	4b07      	ldr	r3, [pc, #28]	; (80123e8 <_svfiprintf_r+0x1ec>)
 80123cc:	a904      	add	r1, sp, #16
 80123ce:	4640      	mov	r0, r8
 80123d0:	f7fc ff3c 	bl	800f24c <_printf_i>
 80123d4:	e7ea      	b.n	80123ac <_svfiprintf_r+0x1b0>
 80123d6:	bf00      	nop
 80123d8:	08012c44 	.word	0x08012c44
 80123dc:	08012c4a 	.word	0x08012c4a
 80123e0:	08012c4e 	.word	0x08012c4e
 80123e4:	0800ed09 	.word	0x0800ed09
 80123e8:	08012149 	.word	0x08012149

080123ec <_sbrk_r>:
 80123ec:	b538      	push	{r3, r4, r5, lr}
 80123ee:	4c06      	ldr	r4, [pc, #24]	; (8012408 <_sbrk_r+0x1c>)
 80123f0:	2300      	movs	r3, #0
 80123f2:	4605      	mov	r5, r0
 80123f4:	4608      	mov	r0, r1
 80123f6:	6023      	str	r3, [r4, #0]
 80123f8:	f7f1 f8e6 	bl	80035c8 <_sbrk>
 80123fc:	1c43      	adds	r3, r0, #1
 80123fe:	d102      	bne.n	8012406 <_sbrk_r+0x1a>
 8012400:	6823      	ldr	r3, [r4, #0]
 8012402:	b103      	cbz	r3, 8012406 <_sbrk_r+0x1a>
 8012404:	602b      	str	r3, [r5, #0]
 8012406:	bd38      	pop	{r3, r4, r5, pc}
 8012408:	20004314 	.word	0x20004314

0801240c <strncmp>:
 801240c:	b510      	push	{r4, lr}
 801240e:	b16a      	cbz	r2, 801242c <strncmp+0x20>
 8012410:	3901      	subs	r1, #1
 8012412:	1884      	adds	r4, r0, r2
 8012414:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012418:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801241c:	4293      	cmp	r3, r2
 801241e:	d103      	bne.n	8012428 <strncmp+0x1c>
 8012420:	42a0      	cmp	r0, r4
 8012422:	d001      	beq.n	8012428 <strncmp+0x1c>
 8012424:	2b00      	cmp	r3, #0
 8012426:	d1f5      	bne.n	8012414 <strncmp+0x8>
 8012428:	1a98      	subs	r0, r3, r2
 801242a:	bd10      	pop	{r4, pc}
 801242c:	4610      	mov	r0, r2
 801242e:	e7fc      	b.n	801242a <strncmp+0x1e>

08012430 <__ascii_wctomb>:
 8012430:	b149      	cbz	r1, 8012446 <__ascii_wctomb+0x16>
 8012432:	2aff      	cmp	r2, #255	; 0xff
 8012434:	bf85      	ittet	hi
 8012436:	238a      	movhi	r3, #138	; 0x8a
 8012438:	6003      	strhi	r3, [r0, #0]
 801243a:	700a      	strbls	r2, [r1, #0]
 801243c:	f04f 30ff 	movhi.w	r0, #4294967295
 8012440:	bf98      	it	ls
 8012442:	2001      	movls	r0, #1
 8012444:	4770      	bx	lr
 8012446:	4608      	mov	r0, r1
 8012448:	4770      	bx	lr

0801244a <memmove>:
 801244a:	4288      	cmp	r0, r1
 801244c:	b510      	push	{r4, lr}
 801244e:	eb01 0302 	add.w	r3, r1, r2
 8012452:	d807      	bhi.n	8012464 <memmove+0x1a>
 8012454:	1e42      	subs	r2, r0, #1
 8012456:	4299      	cmp	r1, r3
 8012458:	d00a      	beq.n	8012470 <memmove+0x26>
 801245a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801245e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012462:	e7f8      	b.n	8012456 <memmove+0xc>
 8012464:	4283      	cmp	r3, r0
 8012466:	d9f5      	bls.n	8012454 <memmove+0xa>
 8012468:	1881      	adds	r1, r0, r2
 801246a:	1ad2      	subs	r2, r2, r3
 801246c:	42d3      	cmn	r3, r2
 801246e:	d100      	bne.n	8012472 <memmove+0x28>
 8012470:	bd10      	pop	{r4, pc}
 8012472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012476:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801247a:	e7f7      	b.n	801246c <memmove+0x22>

0801247c <__malloc_lock>:
 801247c:	4770      	bx	lr

0801247e <__malloc_unlock>:
 801247e:	4770      	bx	lr

08012480 <_realloc_r>:
 8012480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012482:	4607      	mov	r7, r0
 8012484:	4614      	mov	r4, r2
 8012486:	460e      	mov	r6, r1
 8012488:	b921      	cbnz	r1, 8012494 <_realloc_r+0x14>
 801248a:	4611      	mov	r1, r2
 801248c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012490:	f7ff be00 	b.w	8012094 <_malloc_r>
 8012494:	b922      	cbnz	r2, 80124a0 <_realloc_r+0x20>
 8012496:	f7ff fdaf 	bl	8011ff8 <_free_r>
 801249a:	4625      	mov	r5, r4
 801249c:	4628      	mov	r0, r5
 801249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124a0:	f000 f814 	bl	80124cc <_malloc_usable_size_r>
 80124a4:	42a0      	cmp	r0, r4
 80124a6:	d20f      	bcs.n	80124c8 <_realloc_r+0x48>
 80124a8:	4621      	mov	r1, r4
 80124aa:	4638      	mov	r0, r7
 80124ac:	f7ff fdf2 	bl	8012094 <_malloc_r>
 80124b0:	4605      	mov	r5, r0
 80124b2:	2800      	cmp	r0, #0
 80124b4:	d0f2      	beq.n	801249c <_realloc_r+0x1c>
 80124b6:	4631      	mov	r1, r6
 80124b8:	4622      	mov	r2, r4
 80124ba:	f7ff f985 	bl	80117c8 <memcpy>
 80124be:	4631      	mov	r1, r6
 80124c0:	4638      	mov	r0, r7
 80124c2:	f7ff fd99 	bl	8011ff8 <_free_r>
 80124c6:	e7e9      	b.n	801249c <_realloc_r+0x1c>
 80124c8:	4635      	mov	r5, r6
 80124ca:	e7e7      	b.n	801249c <_realloc_r+0x1c>

080124cc <_malloc_usable_size_r>:
 80124cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124d0:	1f18      	subs	r0, r3, #4
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	bfbc      	itt	lt
 80124d6:	580b      	ldrlt	r3, [r1, r0]
 80124d8:	18c0      	addlt	r0, r0, r3
 80124da:	4770      	bx	lr

080124dc <_init>:
 80124dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124de:	bf00      	nop
 80124e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124e2:	bc08      	pop	{r3}
 80124e4:	469e      	mov	lr, r3
 80124e6:	4770      	bx	lr

080124e8 <_fini>:
 80124e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ea:	bf00      	nop
 80124ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124ee:	bc08      	pop	{r3}
 80124f0:	469e      	mov	lr, r3
 80124f2:	4770      	bx	lr
