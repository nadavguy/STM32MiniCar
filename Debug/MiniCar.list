
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014188  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  08014388  08014388  00024388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d48  08014d48  0003023c  2**0
                  CONTENTS
  4 .ARM          00000008  08014d48  08014d48  00024d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014d50  08014d50  0003023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d50  08014d50  00024d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014d54  08014d54  00024d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08014d58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053dc  20000240  08014f94  00030240  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000561c  08014f94  0003561c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004162f  00000000  00000000  0003026a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005967  00000000  00000000  00071899  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002988  00000000  00000000  00077200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000026f0  00000000  00000000  00079b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000325d9  00000000  00000000  0007c278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022866  00000000  00000000  000ae851  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125cef  00000000  00000000  000d10b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f6da6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bee0  00000000  00000000  001f6e24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000240 	.word	0x20000240
 800021c:	00000000 	.word	0x00000000
 8000220:	08014370 	.word	0x08014370

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000244 	.word	0x20000244
 800023c:	08014370 	.word	0x08014370

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <start_pwm1>:
uint32_t Frequency = 0;
uint8_t Is_First_Captured = 0;  // 0- not captured, 1- captured
bool NewDiffAvailable = false;

void start_pwm1(int onTimemSec)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = onTimemSec * 4 / 10;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4a08      	ldr	r2, [pc, #32]	; (8000640 <start_pwm1+0x30>)
 800061e:	fb82 1203 	smull	r1, r2, r2, r3
 8000622:	1092      	asrs	r2, r2, #2
 8000624:	17db      	asrs	r3, r3, #31
 8000626:	1ad2      	subs	r2, r2, r3
 8000628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <start_pwm1+0x34>)
 8000632:	f009 fd75 	bl	800a120 <HAL_TIM_PWM_Start>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	66666667 	.word	0x66666667
 8000644:	20005464 	.word	0x20005464

08000648 <set_pwm1>:

void set_pwm1(int onTimemSec)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = onTimemSec * 4 / 10;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <set_pwm1+0x2c>)
 8000656:	fb82 1203 	smull	r1, r2, r2, r3
 800065a:	1092      	asrs	r2, r2, #2
 800065c:	17db      	asrs	r3, r3, #31
 800065e:	1ad2      	subs	r2, r2, r3
 8000660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000664:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	66666667 	.word	0x66666667

08000678 <start_pwm2>:
{
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}

void start_pwm2(int PercentOn)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    TIM1->CCR4 = PercentOn;
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <start_pwm2+0x20>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000686:	210c      	movs	r1, #12
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <start_pwm2+0x24>)
 800068a:	f009 fd49 	bl	800a120 <HAL_TIM_PWM_Start>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40010000 	.word	0x40010000
 800069c:	20005340 	.word	0x20005340

080006a0 <start_pwm3>:
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
}


void start_pwm3(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80006a4:	2100      	movs	r1, #0
 80006a6:	4802      	ldr	r0, [pc, #8]	; (80006b0 <start_pwm3+0x10>)
 80006a8:	f009 fdaa 	bl	800a200 <HAL_TIM_IC_Start_IT>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20005340 	.word	0x20005340

080006b4 <HAL_TIM_IC_CaptureCallback>:
{
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if interrput source is channel 1
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7f1b      	ldrb	r3, [r3, #28]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d144      	bne.n	800074e <HAL_TIM_IC_CaptureCallback+0x9a>
	{
		if (Is_First_Captured==0)  // is the first value captured ?
 80006c4:	4b24      	ldr	r3, [pc, #144]	; (8000758 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10a      	bne.n	80006e2 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture the first value
 80006cc:	2100      	movs	r1, #0
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f00a f8d8 	bl	800a884 <HAL_TIM_ReadCapturedValue>
 80006d4:	4602      	mov	r2, r0
 80006d6:	4b21      	ldr	r3, [pc, #132]	; (800075c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80006d8:	601a      	str	r2, [r3, #0]
			Is_First_Captured =1;  // set the first value captured as true
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
			Frequency = HAL_RCC_GetSysClockFreq()/(htim->Instance->ARR * (htim->Instance->PSC + 1));  // calculate frequency
			Is_First_Captured = 0;  // reset the first captured

		}
	}
}
 80006e0:	e035      	b.n	800074e <HAL_TIM_IC_CaptureCallback+0x9a>
		else if (Is_First_Captured)  // if the first is captured
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d031      	beq.n	800074e <HAL_TIM_IC_CaptureCallback+0x9a>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);//HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // capture second value
 80006ea:	2100      	movs	r1, #0
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f00a f8c9 	bl	800a884 <HAL_TIM_ReadCapturedValue>
 80006f2:	4602      	mov	r2, r0
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <HAL_TIM_IC_CaptureCallback+0xac>)
 80006f6:	601a      	str	r2, [r3, #0]
			if (IC_Value2 > IC_Value1)
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <HAL_TIM_IC_CaptureCallback+0xac>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <HAL_TIM_IC_CaptureCallback+0xa8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	429a      	cmp	r2, r3
 8000702:	d904      	bls.n	800070e <HAL_TIM_IC_CaptureCallback+0x5a>
				Difference = IC_Value1;   // calculate the difference
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a16      	ldr	r2, [pc, #88]	; (8000764 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e00c      	b.n	8000728 <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Value2 < IC_Value1)
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	429a      	cmp	r2, r3
 8000718:	d204      	bcs.n	8000724 <HAL_TIM_IC_CaptureCallback+0x70>
				Difference = IC_Value2;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_TIM_IC_CaptureCallback+0xac>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	e001      	b.n	8000728 <HAL_TIM_IC_CaptureCallback+0x74>
				Error_Handler();
 8000724:	f003 f852 	bl	80037cc <Error_Handler>
			Frequency = HAL_RCC_GetSysClockFreq()/(htim->Instance->ARR * (htim->Instance->PSC + 1));  // calculate frequency
 8000728:	f007 fe9c 	bl	8008464 <HAL_RCC_GetSysClockFreq>
 800072c:	4601      	mov	r1, r0
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	6812      	ldr	r2, [r2, #0]
 8000738:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800073a:	3201      	adds	r2, #1
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	fbb1 f3f3 	udiv	r3, r1, r3
 8000744:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000746:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0;  // reset the first captured
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000026c 	.word	0x2000026c
 800075c:	2000025c 	.word	0x2000025c
 8000760:	20000260 	.word	0x20000260
 8000764:	20000264 	.word	0x20000264
 8000768:	20000268 	.word	0x20000268
 800076c:	00000000 	.word	0x00000000

08000770 <CheckButton>:
uint32_t ButtonPressCycleStart = 0;
uint32_t ButtonPressDurationmSec[5] = {0};
uint8_t ButtonCycle = 0;

void CheckButton(void)
{
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af02      	add	r7, sp, #8
	PA0PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000776:	2101      	movs	r1, #1
 8000778:	4885      	ldr	r0, [pc, #532]	; (8000990 <CheckButton+0x220>)
 800077a:	f005 fb6f 	bl	8005e5c <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b84      	ldr	r3, [pc, #528]	; (8000994 <CheckButton+0x224>)
 8000784:	701a      	strb	r2, [r3, #0]
	if (PA0PinState == GPIO_PIN_RESET)
 8000786:	4b83      	ldr	r3, [pc, #524]	; (8000994 <CheckButton+0x224>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d106      	bne.n	800079c <CheckButton+0x2c>
	{
//		SetRGB(0, 250, 250);
		ButtonIsHigh = false;
 800078e:	4b82      	ldr	r3, [pc, #520]	; (8000998 <CheckButton+0x228>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
		ButtonIsLow = true;
 8000794:	4b81      	ldr	r3, [pc, #516]	; (800099c <CheckButton+0x22c>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
		if (ButtonCycle == 0)
		{
			ButtonPressCycleStart = HAL_GetTick();
		}
	}
}
 800079a:	e0ef      	b.n	800097c <CheckButton+0x20c>
		if (ButtonIsLow)
 800079c:	4b7f      	ldr	r3, [pc, #508]	; (800099c <CheckButton+0x22c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d047      	beq.n	8000834 <CheckButton+0xc4>
			if (ButtonCycle < 5)
 80007a4:	4b7e      	ldr	r3, [pc, #504]	; (80009a0 <CheckButton+0x230>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d818      	bhi.n	80007de <CheckButton+0x6e>
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80007ac:	f003 feb8 	bl	8004520 <HAL_GetTick>
 80007b0:	4602      	mov	r2, r0
						- ButtonPressStart) / 100) * 100;
 80007b2:	4b7c      	ldr	r3, [pc, #496]	; (80009a4 <CheckButton+0x234>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	4a7b      	ldr	r2, [pc, #492]	; (80009a8 <CheckButton+0x238>)
 80007ba:	fba2 2303 	umull	r2, r3, r2, r3
 80007be:	095b      	lsrs	r3, r3, #5
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80007c0:	4a77      	ldr	r2, [pc, #476]	; (80009a0 <CheckButton+0x230>)
 80007c2:	7812      	ldrb	r2, [r2, #0]
 80007c4:	4611      	mov	r1, r2
						- ButtonPressStart) / 100) * 100;
 80007c6:	2264      	movs	r2, #100	; 0x64
 80007c8:	fb02 f303 	mul.w	r3, r2, r3
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80007cc:	4a77      	ldr	r2, [pc, #476]	; (80009ac <CheckButton+0x23c>)
 80007ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				ButtonCycle++;
 80007d2:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <CheckButton+0x230>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b71      	ldr	r3, [pc, #452]	; (80009a0 <CheckButton+0x230>)
 80007dc:	701a      	strb	r2, [r3, #0]
			if (ButtonCycle >= 5)
 80007de:	4b70      	ldr	r3, [pc, #448]	; (80009a0 <CheckButton+0x230>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d907      	bls.n	80007f6 <CheckButton+0x86>
				ButtonCycle = 0;
 80007e6:	4b6e      	ldr	r3, [pc, #440]	; (80009a0 <CheckButton+0x230>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
				memset(ButtonPressDurationmSec, 0, 20);
 80007ec:	2214      	movs	r2, #20
 80007ee:	2100      	movs	r1, #0
 80007f0:	486e      	ldr	r0, [pc, #440]	; (80009ac <CheckButton+0x23c>)
 80007f2:	f010 f938 	bl	8010a66 <memset>
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 80007f6:	f002 ffab 	bl	8003750 <CurrentTime>
 80007fa:	ec55 4b10 	vmov	r4, r5, d0
					CurrentTime(), (HAL_GetTick() - ButtonPressStart) / 1000.0);
 80007fe:	f003 fe8f 	bl	8004520 <HAL_GetTick>
 8000802:	4602      	mov	r2, r0
 8000804:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <CheckButton+0x234>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	1ad3      	subs	r3, r2, r3
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 800080a:	ee07 3a90 	vmov	s15, r3
 800080e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000812:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000988 <CheckButton+0x218>
 8000816:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800081a:	ed8d 7b00 	vstr	d7, [sp]
 800081e:	4622      	mov	r2, r4
 8000820:	462b      	mov	r3, r5
 8000822:	4963      	ldr	r1, [pc, #396]	; (80009b0 <CheckButton+0x240>)
 8000824:	4863      	ldr	r0, [pc, #396]	; (80009b4 <CheckButton+0x244>)
 8000826:	f010 ff3d 	bl	80116a4 <siprintf>
			Print(false, true, true);
 800082a:	2201      	movs	r2, #1
 800082c:	2101      	movs	r1, #1
 800082e:	2000      	movs	r0, #0
 8000830:	f001 ff18 	bl	8002664 <Print>
		if (HAL_GetTick() - ButtonPressCycleStart > 3000)
 8000834:	f003 fe74 	bl	8004520 <HAL_GetTick>
 8000838:	4602      	mov	r2, r0
 800083a:	4b5f      	ldr	r3, [pc, #380]	; (80009b8 <CheckButton+0x248>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000844:	4293      	cmp	r3, r2
 8000846:	f240 8085 	bls.w	8000954 <CheckButton+0x1e4>
			if (ButtonPressDurationmSec[0] >= 2000)
 800084a:	4b58      	ldr	r3, [pc, #352]	; (80009ac <CheckButton+0x23c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000852:	d311      	bcc.n	8000878 <CheckButton+0x108>
				sprintf(USBTXArray, "%6.3f, Do this\r\n", CurrentTime());
 8000854:	f002 ff7c 	bl	8003750 <CurrentTime>
 8000858:	ec54 3b10 	vmov	r3, r4, d0
 800085c:	461a      	mov	r2, r3
 800085e:	4623      	mov	r3, r4
 8000860:	4956      	ldr	r1, [pc, #344]	; (80009bc <CheckButton+0x24c>)
 8000862:	4854      	ldr	r0, [pc, #336]	; (80009b4 <CheckButton+0x244>)
 8000864:	f010 ff1e 	bl	80116a4 <siprintf>
				Print(false, true, true);
 8000868:	2201      	movs	r2, #1
 800086a:	2101      	movs	r1, #1
 800086c:	2000      	movs	r0, #0
 800086e:	f001 fef9 	bl	8002664 <Print>
				HAL_PWR_EnterSTANDBYMode();
 8000872:	f006 fb5d 	bl	8006f30 <HAL_PWR_EnterSTANDBYMode>
 8000876:	e065      	b.n	8000944 <CheckButton+0x1d4>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 8000878:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <CheckButton+0x23c>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000880:	d314      	bcc.n	80008ac <CheckButton+0x13c>
					&& (ButtonPressDurationmSec[1] >= 1000))
 8000882:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <CheckButton+0x23c>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800088a:	d30f      	bcc.n	80008ac <CheckButton+0x13c>
				sprintf(USBTXArray, "%6.3f, Do that\r\n", CurrentTime());
 800088c:	f002 ff60 	bl	8003750 <CurrentTime>
 8000890:	ec54 3b10 	vmov	r3, r4, d0
 8000894:	461a      	mov	r2, r3
 8000896:	4623      	mov	r3, r4
 8000898:	4949      	ldr	r1, [pc, #292]	; (80009c0 <CheckButton+0x250>)
 800089a:	4846      	ldr	r0, [pc, #280]	; (80009b4 <CheckButton+0x244>)
 800089c:	f010 ff02 	bl	80116a4 <siprintf>
				Print(false, true, true);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	2000      	movs	r0, #0
 80008a6:	f001 fedd 	bl	8002664 <Print>
 80008aa:	e04b      	b.n	8000944 <CheckButton+0x1d4>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 80008ac:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <CheckButton+0x23c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008b4:	d313      	bcc.n	80008de <CheckButton+0x16e>
					&& (ButtonPressDurationmSec[1] == 0))
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <CheckButton+0x23c>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10f      	bne.n	80008de <CheckButton+0x16e>
				sprintf(USBTXArray, "%6.3f, Do that Single Press\r\n",
 80008be:	f002 ff47 	bl	8003750 <CurrentTime>
 80008c2:	ec54 3b10 	vmov	r3, r4, d0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4623      	mov	r3, r4
 80008ca:	493e      	ldr	r1, [pc, #248]	; (80009c4 <CheckButton+0x254>)
 80008cc:	4839      	ldr	r0, [pc, #228]	; (80009b4 <CheckButton+0x244>)
 80008ce:	f010 fee9 	bl	80116a4 <siprintf>
				Print(false, true, true);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2101      	movs	r1, #1
 80008d6:	2000      	movs	r0, #0
 80008d8:	f001 fec4 	bl	8002664 <Print>
 80008dc:	e032      	b.n	8000944 <CheckButton+0x1d4>
			else if ((ButtonPressDurationmSec[0] >= 500)
 80008de:	4b33      	ldr	r3, [pc, #204]	; (80009ac <CheckButton+0x23c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008e6:	d314      	bcc.n	8000912 <CheckButton+0x1a2>
					&& (ButtonPressDurationmSec[1] >= 1000))
 80008e8:	4b30      	ldr	r3, [pc, #192]	; (80009ac <CheckButton+0x23c>)
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008f0:	d30f      	bcc.n	8000912 <CheckButton+0x1a2>
				sprintf(USBTXArray, "%6.3f, Or maybe this\r\n", CurrentTime());
 80008f2:	f002 ff2d 	bl	8003750 <CurrentTime>
 80008f6:	ec54 3b10 	vmov	r3, r4, d0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4623      	mov	r3, r4
 80008fe:	4932      	ldr	r1, [pc, #200]	; (80009c8 <CheckButton+0x258>)
 8000900:	482c      	ldr	r0, [pc, #176]	; (80009b4 <CheckButton+0x244>)
 8000902:	f010 fecf 	bl	80116a4 <siprintf>
				Print(false, true, true);
 8000906:	2201      	movs	r2, #1
 8000908:	2101      	movs	r1, #1
 800090a:	2000      	movs	r0, #0
 800090c:	f001 feaa 	bl	8002664 <Print>
 8000910:	e018      	b.n	8000944 <CheckButton+0x1d4>
			else if ((ButtonPressDurationmSec[0] >= 500)
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <CheckButton+0x23c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800091a:	d313      	bcc.n	8000944 <CheckButton+0x1d4>
					&& (ButtonPressDurationmSec[1] >= 500))
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <CheckButton+0x23c>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000924:	d30e      	bcc.n	8000944 <CheckButton+0x1d4>
				sprintf(USBTXArray, "%6.3f, Or maybe that\r\n", CurrentTime());
 8000926:	f002 ff13 	bl	8003750 <CurrentTime>
 800092a:	ec54 3b10 	vmov	r3, r4, d0
 800092e:	461a      	mov	r2, r3
 8000930:	4623      	mov	r3, r4
 8000932:	4926      	ldr	r1, [pc, #152]	; (80009cc <CheckButton+0x25c>)
 8000934:	481f      	ldr	r0, [pc, #124]	; (80009b4 <CheckButton+0x244>)
 8000936:	f010 feb5 	bl	80116a4 <siprintf>
				Print(false, true, true);
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	2000      	movs	r0, #0
 8000940:	f001 fe90 	bl	8002664 <Print>
			ButtonCycle = 0;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <CheckButton+0x230>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
			memset(ButtonPressDurationmSec, 0, 20);
 800094a:	2214      	movs	r2, #20
 800094c:	2100      	movs	r1, #0
 800094e:	4817      	ldr	r0, [pc, #92]	; (80009ac <CheckButton+0x23c>)
 8000950:	f010 f889 	bl	8010a66 <memset>
		ButtonIsHigh = true;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <CheckButton+0x228>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
		ButtonIsLow = false;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <CheckButton+0x22c>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
		ButtonPressStart = HAL_GetTick();
 8000960:	f003 fdde 	bl	8004520 <HAL_GetTick>
 8000964:	4602      	mov	r2, r0
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <CheckButton+0x234>)
 8000968:	601a      	str	r2, [r3, #0]
		if (ButtonCycle == 0)
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <CheckButton+0x230>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d104      	bne.n	800097c <CheckButton+0x20c>
			ButtonPressCycleStart = HAL_GetTick();
 8000972:	f003 fdd5 	bl	8004520 <HAL_GetTick>
 8000976:	4602      	mov	r2, r0
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <CheckButton+0x248>)
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bdb0      	pop	{r4, r5, r7, pc}
 8000982:	bf00      	nop
 8000984:	f3af 8000 	nop.w
 8000988:	00000000 	.word	0x00000000
 800098c:	408f4000 	.word	0x408f4000
 8000990:	40020000 	.word	0x40020000
 8000994:	20001e78 	.word	0x20001e78
 8000998:	2000026d 	.word	0x2000026d
 800099c:	2000026e 	.word	0x2000026e
 80009a0:	2000028c 	.word	0x2000028c
 80009a4:	20000270 	.word	0x20000270
 80009a8:	51eb851f 	.word	0x51eb851f
 80009ac:	20000278 	.word	0x20000278
 80009b0:	08014388 	.word	0x08014388
 80009b4:	200007e8 	.word	0x200007e8
 80009b8:	20000274 	.word	0x20000274
 80009bc:	080143b0 	.word	0x080143b0
 80009c0:	080143c4 	.word	0x080143c4
 80009c4:	080143d8 	.word	0x080143d8
 80009c8:	080143f8 	.word	0x080143f8
 80009cc:	08014410 	.word	0x08014410

080009d0 <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <QSPI_Init+0x1c>)
 80009d6:	f000 fb26 	bl	8001026 <QSPI_DummyCyclesCfg>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e000      	b.n	80009e6 <QSPI_Init+0x16>
  }
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200055a0 	.word	0x200055a0

080009f0 <QSPI_Erase_Sector4K>:
  * @brief  Erases the specified sector of the QSPI memory.
  * @param  SectorAddress: Block address to erase
  * @retval QSPI memory status
  */
uint8_t QSPI_Erase_Sector4K(uint32_t SectorAddress)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b092      	sub	sp, #72	; 0x48
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  uint8_t reg1[6];

  if (QSPI_WriteEnable() != HAL_OK)
 80009f8:	f000 f90e 	bl	8000c18 <QSPI_WriteEnable>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <QSPI_Erase_Sector4K+0x16>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e030      	b.n	8000a68 <QSPI_Erase_Sector4K+0x78>
  }

  /* Initialize the erase command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x20; //SUBSECTOR_ERASE_4_BYTE_ADDR_CMD;
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS; //QSPI_ADDRESS_32_BITS;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	61fb      	str	r3, [r7, #28]
  s_command.Address = SectorAddress;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_NONE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a30:	2300      	movs	r3, #0
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a34:	2300      	movs	r3, #0
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <QSPI_Erase_Sector4K+0x80>)
 8000a44:	f006 fd12 	bl	800746c <HAL_QSPI_Command>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <QSPI_Erase_Sector4K+0x62>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00a      	b.n	8000a68 <QSPI_Erase_Sector4K+0x78>
  }

  // -------------------------------------------------------------------------------------

  //  if (QSPI_AutoPolling_Erase_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)  {    return HAL_ERROR;  }
  if (QSPI_AutoPolling_Write_in_progress(&hqspi, QSPI_SUBSECTOR_ERASE_MAX_TIME) != HAL_OK)
 8000a52:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a56:	4806      	ldr	r0, [pc, #24]	; (8000a70 <QSPI_Erase_Sector4K+0x80>)
 8000a58:	f000 f96a 	bl	8000d30 <QSPI_AutoPolling_Write_in_progress>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <QSPI_Erase_Sector4K+0x76>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <QSPI_Erase_Sector4K+0x78>
  }

  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3748      	adds	r7, #72	; 0x48
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200055a0 	.word	0x200055a0

08000a74 <QSPI_Write>:
  * @param  WriteAddr: Write start address
  * @param  Size: Size of data to write
  * @retval QSPI memory status
  */
uint8_t QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b096      	sub	sp, #88	; 0x58
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint32_t end_addr = 0, current_size = 0, current_addr = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a84:	2300      	movs	r3, #0
 8000a86:	657b      	str	r3, [r7, #84]	; 0x54
 8000a88:	2300      	movs	r3, #0
 8000a8a:	653b      	str	r3, [r7, #80]	; 0x50
  pData = pData - 1;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
  /* Calculation of the size between the write address and the end of the page */
  current_addr = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000a96:	e003      	b.n	8000aa0 <QSPI_Write+0x2c>
  {
    current_addr += QSPI_PAGE_SIZE;
 8000a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a9e:	653b      	str	r3, [r7, #80]	; 0x50
  while (current_addr <= WriteAddr)
 8000aa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d9f7      	bls.n	8000a98 <QSPI_Write+0x24>
  }
  current_size = current_addr - WriteAddr;
 8000aa8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8000ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d901      	bls.n	8000abc <QSPI_Write+0x48>
  {
    current_size = Size;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	657b      	str	r3, [r7, #84]	; 0x54
  }
  //  wr_time1 = systick_count_up;
  /* Initialize the address variables */
  current_addr = WriteAddr;
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
  end_addr = WriteAddr + Size;
 8000ac0:	68ba      	ldr	r2, [r7, #8]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* Initialize the program command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.Instruction = 0x02; // simple page programm //QPI_PAGE_PROG_4_BYTE_ADDR_CMD;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	617b      	str	r3, [r7, #20]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	623b      	str	r3, [r7, #32]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DummyCycles = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000af0:	2300      	movs	r3, #0
 8000af2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Perform the write page by page */
  do
  {
    /* Enable write operations */
    if (QSPI_WriteEnable() != HAL_OK)
 8000af8:	f000 f88e 	bl	8000c18 <QSPI_WriteEnable>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <QSPI_Write+0x92>
    {
      return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e03f      	b.n	8000b86 <QSPI_Write+0x112>
    }

    /* Configure the command */
    s_command.Address = current_addr;
 8000b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b08:	61bb      	str	r3, [r7, #24]
    s_command.NbData = current_size;
 8000b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b16:	4619      	mov	r1, r3
 8000b18:	481d      	ldr	r0, [pc, #116]	; (8000b90 <QSPI_Write+0x11c>)
 8000b1a:	f006 fca7 	bl	800746c <HAL_QSPI_Command>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <QSPI_Write+0xb4>
    {
      return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e02e      	b.n	8000b86 <QSPI_Write+0x112>
    }

    /* Transmission of the data */
    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b2c:	68f9      	ldr	r1, [r7, #12]
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <QSPI_Write+0x11c>)
 8000b30:	f006 fcfa 	bl	8007528 <HAL_QSPI_Transmit>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <QSPI_Write+0xca>
    {
      return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e023      	b.n	8000b86 <QSPI_Write+0x112>
    }

    if (QSPI_AutoPolling_Write_in_progress(&hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <QSPI_Write+0x11c>)
 8000b44:	f000 f8f4 	bl	8000d30 <QSPI_AutoPolling_Write_in_progress>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <QSPI_Write+0xde>
    {
      return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e019      	b.n	8000b86 <QSPI_Write+0x112>
    }

    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8000b52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b56:	4413      	add	r3, r2
 8000b58:	653b      	str	r3, [r7, #80]	; 0x50
    pData += current_size;
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + QSPI_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : QSPI_PAGE_SIZE;
 8000b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d203      	bcs.n	8000b76 <QSPI_Write+0x102>
 8000b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	e001      	b.n	8000b7a <QSPI_Write+0x106>
 8000b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7a:	657b      	str	r3, [r7, #84]	; 0x54
  } while (current_addr < end_addr);
 8000b7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d3b9      	bcc.n	8000af8 <QSPI_Write+0x84>

  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3758      	adds	r7, #88	; 0x58
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200055a0 	.word	0x200055a0

08000b94 <QSPI_Read>:
  * @param  ReadAddr: Read start address
  * @param  Size: Size of data to read
  * @retval QSPI memory status
  */
uint8_t QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b092      	sub	sp, #72	; 0x48
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the read command */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x03; // simple data read // QPI_READ_4_BYTE_ADDR_CMD; //
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb4:	61fb      	str	r3, [r7, #28]
  s_command.Address = ReadAddr;
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = QSPI_DUMMY_CYCLES_READ;
 8000bc4:	2308      	movs	r3, #8
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = Size;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000be0:	4619      	mov	r1, r3
 8000be2:	480c      	ldr	r0, [pc, #48]	; (8000c14 <QSPI_Read+0x80>)
 8000be4:	f006 fc42 	bl	800746c <HAL_QSPI_Command>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <QSPI_Read+0x5e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00b      	b.n	8000c0a <QSPI_Read+0x76>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf6:	68f9      	ldr	r1, [r7, #12]
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <QSPI_Read+0x80>)
 8000bfa:	f006 fd27 	bl	800764c <HAL_QSPI_Receive>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <QSPI_Read+0x74>
  {
    return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e000      	b.n	8000c0a <QSPI_Read+0x76>
  }

  return HAL_OK;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3748      	adds	r7, #72	; 0x48
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200055a0 	.word	0x200055a0

08000c18 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b094      	sub	sp, #80	; 0x50
 8000c1c:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 8000c24:	2306      	movs	r3, #6
 8000c26:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c40:	2300      	movs	r3, #0
 8000c42:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c44:	f107 0318 	add.w	r3, r7, #24
 8000c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4816      	ldr	r0, [pc, #88]	; (8000ca8 <QSPI_WriteEnable+0x90>)
 8000c50:	f006 fc0c 	bl	800746c <HAL_QSPI_Command>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e01f      	b.n	8000c9e <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 8000c62:	2302      	movs	r3, #2
 8000c64:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c76:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 8000c78:	2305      	movs	r3, #5
 8000c7a:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c80:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c82:	463a      	mov	r2, r7
 8000c84:	f107 0118 	add.w	r1, r7, #24
 8000c88:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c8c:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <QSPI_WriteEnable+0x90>)
 8000c8e:	f006 fd7a 	bl	8007786 <HAL_QSPI_AutoPolling>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	e000      	b.n	8000c9e <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3750      	adds	r7, #80	; 0x50
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200055a0 	.word	0x200055a0

08000cac <QSPI_READMD>:

uint8_t QSPI_READMD(uint8_t *Mid, uint8_t *Did)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b098      	sub	sp, #96	; 0x60
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cba:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x90; // ok
 8000cbc:	2390      	movs	r3, #144	; 0x90
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 5;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cea:	4619      	mov	r1, r3
 8000cec:	480f      	ldr	r0, [pc, #60]	; (8000d2c <QSPI_READMD+0x80>)
 8000cee:	f006 fbbd 	bl	800746c <HAL_QSPI_Command>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <QSPI_READMD+0x50>
  {
    return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e013      	b.n	8000d24 <QSPI_READMD+0x78>
  }


 uint8_t reg2[6] = {0};
 8000cfc:	f107 0308 	add.w	r3, r7, #8
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	809a      	strh	r2, [r3, #4]
 HAL_QSPI_Receive(&hqspi, &(reg2), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <QSPI_READMD+0x80>)
 8000d12:	f006 fc9b 	bl	800764c <HAL_QSPI_Receive>
 *Mid = reg2[3];
 8000d16:	7afa      	ldrb	r2, [r7, #11]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	701a      	strb	r2, [r3, #0]
 *Did = reg2[4];
 8000d1c:	7b3a      	ldrb	r2, [r7, #12]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	701a      	strb	r2, [r3, #0]
//  HAL_QSPI_Receive(&hqspi, &(reg2[2]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[3]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[4]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
//  HAL_QSPI_Receive(&hqspi, &(reg2[5]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE);

  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3760      	adds	r7, #96	; 0x60
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200055a0 	.word	0x200055a0

08000d30 <QSPI_AutoPolling_Write_in_progress>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
uint8_t QSPI_AutoPolling_Write_in_progress(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b096      	sub	sp, #88	; 0x58
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000d40:	2305      	movs	r3, #5
 8000d42:	623b      	str	r3, [r7, #32]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d50:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d56:	2300      	movs	r3, #0
 8000d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
  //  s_config.Mask            = QSPI_SR_WIP;
  s_config.Mask = QSPI_SR_WIP; /*!< Write in progress */
 8000d66:	2301      	movs	r3, #1
 8000d68:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
  s_config.Interval = 1; //0x10;
 8000d72:	2301      	movs	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d7a:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8000d7c:	f107 0208 	add.w	r2, r7, #8
 8000d80:	f107 0120 	add.w	r1, r7, #32
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f006 fcfd 	bl	8007786 <HAL_QSPI_AutoPolling>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <QSPI_AutoPolling_Write_in_progress+0x66>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <QSPI_AutoPolling_Write_in_progress+0x68>
  }

  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3758      	adds	r7, #88	; 0x58
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <QSPI_Read_Status_registers>:
  return HAL_OK;
}

// Read Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Read_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b098      	sub	sp, #96	; 0x60
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
  uint8_t reg1[6];
  uint8_t reg2[6];
  uint8_t reg3[6];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000dae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x05;
 8000db4:	2305      	movs	r3, #5
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de2:	4619      	mov	r1, r3
 8000de4:	68f8      	ldr	r0, [r7, #12]
 8000de6:	f006 fb41 	bl	800746c <HAL_QSPI_Command>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <QSPI_Read_Status_registers+0x54>
  {
    return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e079      	b.n	8000ee8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000df4:	f107 0320 	add.w	r3, r7, #32
 8000df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f006 fc24 	bl	800764c <HAL_QSPI_Receive>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <QSPI_Read_Status_registers+0x6e>
  {
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e06c      	b.n	8000ee8 <QSPI_Read_Status_registers+0x148>
  }
  *R1 = reg1[0];
 8000e0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e1c:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x35;
 8000e1e:	2335      	movs	r3, #53	; 0x35
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e40:	2300      	movs	r3, #0
 8000e42:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	68f8      	ldr	r0, [r7, #12]
 8000e50:	f006 fb0c 	bl	800746c <HAL_QSPI_Command>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <QSPI_Read_Status_registers+0xbe>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e044      	b.n	8000ee8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e5e:	f107 0318 	add.w	r3, r7, #24
 8000e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e66:	4619      	mov	r1, r3
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f006 fbef 	bl	800764c <HAL_QSPI_Receive>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <QSPI_Read_Status_registers+0xd8>
  {
    return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e037      	b.n	8000ee8 <QSPI_Read_Status_registers+0x148>
  }
  *R2 = reg2[0];
 8000e78:	7e3b      	ldrb	r3, [r7, #24]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	801a      	strh	r2, [r3, #0]
  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e84:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.Instruction = 0x15;
 8000e86:	2315      	movs	r3, #21
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DummyCycles = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.NbData = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	657b      	str	r3, [r7, #84]	; 0x54
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	65bb      	str	r3, [r7, #88]	; 0x58
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	65fb      	str	r3, [r7, #92]	; 0x5c

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f006 fad8 	bl	800746c <HAL_QSPI_Command>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <QSPI_Read_Status_registers+0x126>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e010      	b.n	8000ee8 <QSPI_Read_Status_registers+0x148>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)reg3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ece:	4619      	mov	r1, r3
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f006 fbbb 	bl	800764c <HAL_QSPI_Receive>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <QSPI_Read_Status_registers+0x140>
  {
    return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e003      	b.n	8000ee8 <QSPI_Read_Status_registers+0x148>
  }
  *R3 = reg3[0];
 8000ee0:	7c3b      	ldrb	r3, [r7, #16]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	801a      	strh	r2, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3760      	adds	r7, #96	; 0x60
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <QSPI_Reset_Status_registers>:

// Reset Status Register-1 (05h), Status Register-2 (35h) & Status Register-3 (15h)
uint8_t QSPI_Reset_Status_registers(QSPI_HandleTypeDef *hqspi, uint16_t *R1, uint16_t *R2, uint16_t *R3)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b092      	sub	sp, #72	; 0x48
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	603b      	str	r3, [r7, #0]
  QSPI_CommandTypeDef s_command;

  QSPI_WriteEnable();
 8000efe:	f7ff fe8b 	bl	8000c18 <QSPI_WriteEnable>

  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x01;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f26:	2300      	movs	r3, #0
 8000f28:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f36:	4619      	mov	r1, r3
 8000f38:	68f8      	ldr	r0, [r7, #12]
 8000f3a:	f006 fa97 	bl	800746c <HAL_QSPI_Command>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <QSPI_Reset_Status_registers+0x58>
  {
    return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e06a      	b.n	800101e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R1, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f006 faea 	bl	8007528 <HAL_QSPI_Transmit>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <QSPI_Reset_Status_registers+0x6e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e05f      	b.n	800101e <QSPI_Reset_Status_registers+0x12e>
  }

  QSPI_WriteEnable();
 8000f5e:	f7ff fe5b 	bl	8000c18 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x31;
 8000f68:	2331      	movs	r3, #49	; 0x31
 8000f6a:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000f74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f86:	2300      	movs	r3, #0
 8000f88:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f96:	4619      	mov	r1, r3
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f006 fa67 	bl	800746c <HAL_QSPI_Command>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <QSPI_Reset_Status_registers+0xb8>
  {
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e03a      	b.n	800101e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R2, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f006 faba 	bl	8007528 <HAL_QSPI_Transmit>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <QSPI_Reset_Status_registers+0xce>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e02f      	b.n	800101e <QSPI_Reset_Status_registers+0x12e>
  }

  QSPI_WriteEnable();
 8000fbe:	f7ff fe2b 	bl	8000c18 <QSPI_WriteEnable>

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 8000fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = 0x11;
 8000fc8:	2311      	movs	r3, #17
 8000fca:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8000fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000fea:	2300      	movs	r3, #0
 8000fec:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f006 fa37 	bl	800746c <HAL_QSPI_Command>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <QSPI_Reset_Status_registers+0x118>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e00a      	b.n	800101e <QSPI_Reset_Status_registers+0x12e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)R3, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001008:	f241 3288 	movw	r2, #5000	; 0x1388
 800100c:	6839      	ldr	r1, [r7, #0]
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f006 fa8a 	bl	8007528 <HAL_QSPI_Transmit>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <QSPI_Reset_Status_registers+0x12e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e7ff      	b.n	800101e <QSPI_Reset_Status_registers+0x12e>
  }
}
 800101e:	4618      	mov	r0, r3
 8001020:	3748      	adds	r7, #72	; 0x48
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b094      	sub	sp, #80	; 0x50
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800102e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 8001034:	2305      	movs	r3, #5
 8001036:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 8001040:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 800104a:	2301      	movs	r3, #1
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001052:	2300      	movs	r3, #0
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001056:	2300      	movs	r3, #0
 8001058:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f006 fa01 	bl	800746c <HAL_QSPI_Command>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e08f      	b.n	8001194 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	f241 3288 	movw	r2, #5000	; 0x1388
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f006 fae4 	bl	800764c <HAL_QSPI_Receive>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e082      	b.n	8001194 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800108e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 8001094:	2315      	movs	r3, #21
 8001096:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 80010a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80010b2:	2300      	movs	r3, #0
 80010b4:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80010b6:	2300      	movs	r3, #0
 80010b8:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f006 f9d1 	bl	800746c <HAL_QSPI_Command>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e05f      	b.n	8001194 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	3301      	adds	r3, #1
 80010da:	f241 3288 	movw	r2, #5000	; 0x1388
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f006 fab3 	bl	800764c <HAL_QSPI_Receive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e051      	b.n	8001194 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 80010f0:	f7ff fd92 	bl	8000c18 <QSPI_WriteEnable>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e04a      	b.n	8001194 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80010fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001104:	2301      	movs	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8001110:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 800111a:	2302      	movs	r3, #2
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001122:	2300      	movs	r3, #0
 8001124:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001126:	2300      	movs	r3, #0
 8001128:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 800112a:	7b7b      	ldrb	r3, [r7, #13]
 800112c:	b25b      	sxtb	r3, r3
 800112e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001132:	b25a      	sxtb	r2, r3
 8001134:	23c0      	movs	r3, #192	; 0xc0
 8001136:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	2308      	movs	r3, #8
 800114c:	408b      	lsls	r3, r1
 800114e:	b25b      	sxtb	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b25b      	sxtb	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001160:	4619      	mov	r1, r3
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f006 f982 	bl	800746c <HAL_QSPI_Command>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e010      	b.n	8001194 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	f241 3288 	movw	r2, #5000	; 0x1388
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f006 f9d3 	bl	8007528 <HAL_QSPI_Transmit>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e003      	b.n	8001194 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 800118c:	2028      	movs	r0, #40	; 0x28
 800118e:	f003 f9d3 	bl	8004538 <HAL_Delay>

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3750      	adds	r7, #80	; 0x50
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <led_init>:

#include "main.h"
#include "PushButton.h"

void led_init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 80011a0:	2104      	movs	r1, #4
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <led_init+0x20>)
 80011a4:	f008 ffbc 	bl	800a120 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 80011a8:	2100      	movs	r1, #0
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <led_init+0x20>)
 80011ac:	f008 ffb8 	bl	800a120 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 80011b0:	210c      	movs	r1, #12
 80011b2:	4802      	ldr	r0, [pc, #8]	; (80011bc <led_init+0x20>)
 80011b4:	f008 ffb4 	bl	800a120 <HAL_TIM_PWM_Start>
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200050e8 	.word	0x200050e8

080011c0 <SetRGB>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //Blue LED
}

// Input: 0 to 250
void SetRGB(int Red, int Green, int Blue)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
	//  SetRGB(250, 0, 0); // Red
	//  SetRGB(0, 250, 0); // Green
	//  SetRGB(0, 0, 250); // Blue
	//  SetRGB(250, 250, 0);// Yellow
	TIM4->CCR2 = Red * 8000 / 250;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80011d2:	fb02 f303 	mul.w	r3, r2, r3
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <SetRGB+0x68>)
 80011d8:	fb82 1203 	smull	r1, r2, r2, r3
 80011dc:	1112      	asrs	r2, r2, #4
 80011de:	17db      	asrs	r3, r3, #31
 80011e0:	1ad2      	subs	r2, r2, r3
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <SetRGB+0x6c>)
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = Green * 8000 / 250;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80011ec:	fb02 f303 	mul.w	r3, r2, r3
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <SetRGB+0x68>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	1112      	asrs	r2, r2, #4
 80011f8:	17db      	asrs	r3, r3, #31
 80011fa:	1ad2      	subs	r2, r2, r3
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <SetRGB+0x6c>)
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR4 = Blue * 8000 / 250;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <SetRGB+0x68>)
 800120c:	fb82 1203 	smull	r1, r2, r2, r3
 8001210:	1112      	asrs	r2, r2, #4
 8001212:	17db      	asrs	r3, r3, #31
 8001214:	1ad2      	subs	r2, r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <SetRGB+0x6c>)
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	10624dd3 	.word	0x10624dd3
 800122c:	40000800 	.word	0x40000800

08001230 <ShowStateLED>:

void ShowStateLED(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	if (ButtonIsLow)
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <ShowStateLED+0x88>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <ShowStateLED+0x18>
	{
		SetRGB(0, 250, 250); // Cyan
 800123c:	22fa      	movs	r2, #250	; 0xfa
 800123e:	21fa      	movs	r1, #250	; 0xfa
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ffbd 	bl	80011c0 <SetRGB>
		else
		{
			SetRGB(250, 0, 0);
		}
	}
}
 8001246:	e02e      	b.n	80012a6 <ShowStateLED+0x76>
		if (vBat > 4.0)
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <ShowStateLED+0x8c>)
 800124a:	ed93 7b00 	vldr	d7, [r3]
 800124e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001252:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd05      	ble.n	8001268 <ShowStateLED+0x38>
			SetRGB(0, 250, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	21fa      	movs	r1, #250	; 0xfa
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ffad 	bl	80011c0 <SetRGB>
}
 8001266:	e01e      	b.n	80012a6 <ShowStateLED+0x76>
		else if ( (vBat > 3.7) && (vBat <= 4.0) )
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <ShowStateLED+0x8c>)
 800126a:	ed93 7b00 	vldr	d7, [r3]
 800126e:	ed9f 6b10 	vldr	d6, [pc, #64]	; 80012b0 <ShowStateLED+0x80>
 8001272:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	dd0f      	ble.n	800129c <ShowStateLED+0x6c>
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <ShowStateLED+0x8c>)
 800127e:	ed93 7b00 	vldr	d7, [r3]
 8001282:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001286:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d805      	bhi.n	800129c <ShowStateLED+0x6c>
			SetRGB(250, 250, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	21fa      	movs	r1, #250	; 0xfa
 8001294:	20fa      	movs	r0, #250	; 0xfa
 8001296:	f7ff ff93 	bl	80011c0 <SetRGB>
}
 800129a:	e004      	b.n	80012a6 <ShowStateLED+0x76>
			SetRGB(250, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	20fa      	movs	r0, #250	; 0xfa
 80012a2:	f7ff ff8d 	bl	80011c0 <SetRGB>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	f3af 8000 	nop.w
 80012b0:	9999999a 	.word	0x9999999a
 80012b4:	400d9999 	.word	0x400d9999
 80012b8:	2000026e 	.word	0x2000026e
 80012bc:	20001c08 	.word	0x20001c08

080012c0 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80012c8:	23ff      	movs	r3, #255	; 0xff
 80012ca:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 80012d0:	2300      	movs	r3, #0
 80012d2:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 80012d4:	2300      	movs	r3, #0
 80012d6:	723b      	strb	r3, [r7, #8]
 80012d8:	2300      	movs	r3, #0
 80012da:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 80012dc:	4a58      	ldr	r2, [pc, #352]	; (8001440 <bno055_init+0x180>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80012e2:	4b57      	ldr	r3, [pc, #348]	; (8001440 <bno055_init+0x180>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	68dc      	ldr	r4, [r3, #12]
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <bno055_init+0x180>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	7a58      	ldrb	r0, [r3, #9]
 80012ee:	f107 020d 	add.w	r2, r7, #13
 80012f2:	2301      	movs	r3, #1
 80012f4:	2107      	movs	r1, #7
 80012f6:	47a0      	blx	r4
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80012fc:	4b50      	ldr	r3, [pc, #320]	; (8001440 <bno055_init+0x180>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	691c      	ldr	r4, [r3, #16]
 8001302:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <bno055_init+0x180>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	7a58      	ldrb	r0, [r3, #9]
 8001308:	f107 020e 	add.w	r2, r7, #14
 800130c:	2301      	movs	r3, #1
 800130e:	2100      	movs	r1, #0
 8001310:	47a0      	blx	r4
 8001312:	4603      	mov	r3, r0
 8001314:	b2da      	uxtb	r2, r3
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	4413      	add	r3, r2
 800131a:	b2db      	uxtb	r3, r3
 800131c:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 800131e:	4b48      	ldr	r3, [pc, #288]	; (8001440 <bno055_init+0x180>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	7bba      	ldrb	r2, [r7, #14]
 8001324:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001326:	4b46      	ldr	r3, [pc, #280]	; (8001440 <bno055_init+0x180>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691c      	ldr	r4, [r3, #16]
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <bno055_init+0x180>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	7a58      	ldrb	r0, [r3, #9]
 8001332:	f107 020e 	add.w	r2, r7, #14
 8001336:	2301      	movs	r3, #1
 8001338:	2101      	movs	r1, #1
 800133a:	47a0      	blx	r4
 800133c:	4603      	mov	r3, r0
 800133e:	b2da      	uxtb	r2, r3
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	4413      	add	r3, r2
 8001344:	b2db      	uxtb	r3, r3
 8001346:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8001348:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <bno055_init+0x180>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	7bba      	ldrb	r2, [r7, #14]
 800134e:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001350:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <bno055_init+0x180>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	691c      	ldr	r4, [r3, #16]
 8001356:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <bno055_init+0x180>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	7a58      	ldrb	r0, [r3, #9]
 800135c:	f107 020e 	add.w	r2, r7, #14
 8001360:	2301      	movs	r3, #1
 8001362:	2102      	movs	r1, #2
 8001364:	47a0      	blx	r4
 8001366:	4603      	mov	r3, r0
 8001368:	b2da      	uxtb	r2, r3
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	4413      	add	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8001372:	4b33      	ldr	r3, [pc, #204]	; (8001440 <bno055_init+0x180>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	7bba      	ldrb	r2, [r7, #14]
 8001378:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800137a:	4b31      	ldr	r3, [pc, #196]	; (8001440 <bno055_init+0x180>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691c      	ldr	r4, [r3, #16]
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <bno055_init+0x180>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	7a58      	ldrb	r0, [r3, #9]
 8001386:	f107 020e 	add.w	r2, r7, #14
 800138a:	2301      	movs	r3, #1
 800138c:	2103      	movs	r1, #3
 800138e:	47a0      	blx	r4
 8001390:	4603      	mov	r3, r0
 8001392:	b2da      	uxtb	r2, r3
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	4413      	add	r3, r2
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 800139c:	4b28      	ldr	r3, [pc, #160]	; (8001440 <bno055_init+0x180>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	7bba      	ldrb	r2, [r7, #14]
 80013a2:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <bno055_init+0x180>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	691c      	ldr	r4, [r3, #16]
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <bno055_init+0x180>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	7a58      	ldrb	r0, [r3, #9]
 80013b0:	f107 020e 	add.w	r2, r7, #14
 80013b4:	2301      	movs	r3, #1
 80013b6:	2106      	movs	r1, #6
 80013b8:	47a0      	blx	r4
 80013ba:	4603      	mov	r3, r0
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	4413      	add	r3, r2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <bno055_init+0x180>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80013ce:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <bno055_init+0x180>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	691c      	ldr	r4, [r3, #16]
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <bno055_init+0x180>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	7a58      	ldrb	r0, [r3, #9]
 80013da:	f107 0208 	add.w	r2, r7, #8
 80013de:	2302      	movs	r3, #2
 80013e0:	2104      	movs	r1, #4
 80013e2:	47a0      	blx	r4
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	4413      	add	r3, r2
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 80013f0:	7a3b      	ldrb	r3, [r7, #8]
 80013f2:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 80013f4:	7a7b      	ldrb	r3, [r7, #9]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	b299      	uxth	r1, r3
 80013fc:	7a3b      	ldrb	r3, [r7, #8]
 80013fe:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <bno055_init+0x180>)
 8001402:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8001404:	430a      	orrs	r2, r1
 8001406:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8001408:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <bno055_init+0x180>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	691c      	ldr	r4, [r3, #16]
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <bno055_init+0x180>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	7a58      	ldrb	r0, [r3, #9]
 8001416:	f107 020e 	add.w	r2, r7, #14
 800141a:	2301      	movs	r3, #1
 800141c:	2107      	movs	r1, #7
 800141e:	47a0      	blx	r4
 8001420:	4603      	mov	r3, r0
 8001422:	b2da      	uxtb	r2, r3
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	4413      	add	r3, r2
 8001428:	b2db      	uxtb	r3, r3
 800142a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <bno055_init+0x180>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	7bba      	ldrb	r2, [r7, #14]
 8001432:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8001434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	20000290 	.word	0x20000290

08001444 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
 8001450:	4613      	mov	r3, r2
 8001452:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001454:	23ff      	movs	r3, #255	; 0xff
 8001456:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <bno055_write_register+0x48>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001460:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001464:	e00d      	b.n	8001482 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <bno055_write_register+0x48>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68dc      	ldr	r4, [r3, #12]
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <bno055_write_register+0x48>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	7a58      	ldrb	r0, [r3, #9]
 8001472:	79bb      	ldrb	r3, [r7, #6]
 8001474:	79f9      	ldrb	r1, [r7, #7]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	47a0      	blx	r4
 800147a:	4603      	mov	r3, r0
 800147c:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	20000290 	.word	0x20000290

08001490 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800149a:	23ff      	movs	r3, #255	; 0xff
 800149c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800149e:	2300      	movs	r3, #0
 80014a0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <bno055_write_page_id+0x8c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 80014aa:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80014ae:	e030      	b.n	8001512 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <bno055_write_page_id+0x8c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691c      	ldr	r4, [r3, #16]
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <bno055_write_page_id+0x8c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	7a58      	ldrb	r0, [r3, #9]
 80014bc:	f107 020e 	add.w	r2, r7, #14
 80014c0:	2301      	movs	r3, #1
 80014c2:	2107      	movs	r1, #7
 80014c4:	47a0      	blx	r4
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d11b      	bne.n	800150a <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <bno055_write_page_id+0x8c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68dc      	ldr	r4, [r3, #12]
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <bno055_write_page_id+0x8c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	7a58      	ldrb	r0, [r3, #9]
 80014e2:	f107 020e 	add.w	r2, r7, #14
 80014e6:	2301      	movs	r3, #1
 80014e8:	2107      	movs	r1, #7
 80014ea:	47a0      	blx	r4
 80014ec:	4603      	mov	r3, r0
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	4413      	add	r3, r2
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <bno055_write_page_id+0x8c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	711a      	strb	r2, [r3, #4]
 8001508:	e001      	b.n	800150e <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800150a:	23ff      	movs	r3, #255	; 0xff
 800150c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	bf00      	nop
 800151c:	20000290 	.word	0x20000290

08001520 <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8001536:	23ff      	movs	r3, #255	; 0xff
 8001538:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 800153a:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <bno055_read_euler_hrp+0xd0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <bno055_read_euler_hrp+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001542:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001546:	e04e      	b.n	80015e6 <bno055_read_euler_hrp+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <bno055_read_euler_hrp+0xd0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	791b      	ldrb	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <bno055_read_euler_hrp+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff9c 	bl	8001490 <bno055_write_page_id>
 8001558:	4603      	mov	r3, r0
 800155a:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800155c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <bno055_read_euler_hrp+0x4e>
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <bno055_read_euler_hrp+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	791b      	ldrb	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d137      	bne.n	80015de <bno055_read_euler_hrp+0xbe>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <bno055_read_euler_hrp+0xd0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	691c      	ldr	r4, [r3, #16]
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <bno055_read_euler_hrp+0xd0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	7a58      	ldrb	r0, [r3, #9]
 800157a:	f107 0208 	add.w	r2, r7, #8
 800157e:	2306      	movs	r3, #6
 8001580:	211a      	movs	r1, #26
 8001582:	47a0      	blx	r4
 8001584:	4603      	mov	r3, r0
 8001586:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 8001588:	7a3b      	ldrb	r3, [r7, #8]
 800158a:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 800158c:	7a7b      	ldrb	r3, [r7, #9]
 800158e:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8001590:	7a7b      	ldrb	r3, [r7, #9]
 8001592:	b25b      	sxtb	r3, r3
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 800159c:	4313      	orrs	r3, r2
 800159e:	b21a      	sxth	r2, r3
            euler->h =
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 80015a4:	7abb      	ldrb	r3, [r7, #10]
 80015a6:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 80015a8:	7afb      	ldrb	r3, [r7, #11]
 80015aa:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 80015b4:	7abb      	ldrb	r3, [r7, #10]
 80015b6:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21a      	sxth	r2, r3
            euler->r =
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 80015c0:	7b3b      	ldrb	r3, [r7, #12]
 80015c2:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 80015c4:	7b7b      	ldrb	r3, [r7, #13]
 80015c6:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80015c8:	7b7b      	ldrb	r3, [r7, #13]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 80015d0:	7b3b      	ldrb	r3, [r7, #12]
 80015d2:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21a      	sxth	r2, r3
            euler->p =
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	809a      	strh	r2, [r3, #4]
 80015dc:	e001      	b.n	80015e2 <bno055_read_euler_hrp+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80015de:	23ff      	movs	r3, #255	; 0xff
 80015e0:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000290 	.word	0x20000290

080015f4 <bno055_convert_double_euler_hpr_deg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_euler_hpr_deg(struct bno055_euler_double_t *euler_hpr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80015fc:	23ff      	movs	r3, #255	; 0xff
 80015fe:	75fb      	strb	r3, [r7, #23]
    struct bno055_euler_t reg_euler = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8001600:	2300      	movs	r3, #0
 8001602:	823b      	strh	r3, [r7, #16]
 8001604:	2300      	movs	r3, #0
 8001606:	827b      	strh	r3, [r7, #18]
 8001608:	2300      	movs	r3, #0
 800160a:	82bb      	strh	r3, [r7, #20]
    u8 euler_unit_u8 = BNO055_INIT_VALUE;
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]

    /* Read the current Euler unit and set the
     * unit as degree if the unit is in radians */
    com_rslt = bno055_get_euler_unit(&euler_unit_u8);
 8001610:	f107 030f 	add.w	r3, r7, #15
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f855 	bl	80016c4 <bno055_get_euler_unit>
 800161a:	4603      	mov	r3, r0
 800161c:	75fb      	strb	r3, [r7, #23]
    if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <bno055_convert_double_euler_hpr_deg+0x42>
    {
        com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 8001624:	2000      	movs	r0, #0
 8001626:	f000 f891 	bl	800174c <bno055_set_euler_unit>
 800162a:	4603      	mov	r3, r0
 800162c:	b2da      	uxtb	r2, r3
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	4413      	add	r3, r2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 8001636:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d139      	bne.n	80016b2 <bno055_convert_double_euler_hpr_deg+0xbe>
    {
        /* Read Euler raw h data*/
        com_rslt += bno055_read_euler_hrp(&reg_euler);
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff6c 	bl	8001520 <bno055_read_euler_hrp>
 8001648:	4603      	mov	r3, r0
 800164a:	b2da      	uxtb	r2, r3
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	4413      	add	r3, r2
 8001650:	b2db      	uxtb	r3, r3
 8001652:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8001654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d127      	bne.n	80016ac <bno055_convert_double_euler_hpr_deg+0xb8>
        {
            /* Convert raw Euler hrp to degree*/
            euler_hpr->h = (double)(reg_euler.h / BNO055_EULER_DIV_DEG);
 800165c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001668:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 800166c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	ed83 7b00 	vstr	d7, [r3]
            euler_hpr->p = (double)(reg_euler.p / BNO055_EULER_DIV_DEG);
 8001676:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001682:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001686:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	ed83 7b04 	vstr	d7, [r3, #16]
            euler_hpr->r = (double)(reg_euler.r / BNO055_EULER_DIV_DEG);
 8001690:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800169c:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 80016a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	ed83 7b02 	vstr	d7, [r3, #8]
 80016aa:	e004      	b.n	80016b6 <bno055_convert_double_euler_hpr_deg+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80016ac:	23ff      	movs	r3, #255	; 0xff
 80016ae:	75fb      	strb	r3, [r7, #23]
 80016b0:	e001      	b.n	80016b6 <bno055_convert_double_euler_hpr_deg+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 80016b2:	23ff      	movs	r3, #255	; 0xff
 80016b4:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 80016b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3718      	adds	r7, #24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <bno055_get_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_euler_unit(u8 *euler_unit_u8)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80016cc:	23ff      	movs	r3, #255	; 0xff
 80016ce:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80016d4:	23ff      	movs	r3, #255	; 0xff
 80016d6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <bno055_get_euler_unit+0x84>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <bno055_get_euler_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 80016e0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80016e4:	e02c      	b.n	8001740 <bno055_get_euler_unit+0x7c>
    }
    else
    {
        /*condition check for page, Euler unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80016e6:	4b18      	ldr	r3, [pc, #96]	; (8001748 <bno055_get_euler_unit+0x84>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	791b      	ldrb	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <bno055_get_euler_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80016f0:	2000      	movs	r0, #0
 80016f2:	f7ff fecd 	bl	8001490 <bno055_write_page_id>
 80016f6:	4603      	mov	r3, r0
 80016f8:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80016fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <bno055_get_euler_unit+0x48>
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <bno055_get_euler_unit+0x84>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	791b      	ldrb	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d115      	bne.n	8001738 <bno055_get_euler_unit+0x74>
        {
            /* Read the Euler unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800170c:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <bno055_get_euler_unit+0x84>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691c      	ldr	r4, [r3, #16]
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <bno055_get_euler_unit+0x84>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	7a58      	ldrb	r0, [r3, #9]
 8001718:	f107 020d 	add.w	r2, r7, #13
 800171c:	2301      	movs	r3, #1
 800171e:	213b      	movs	r1, #59	; 0x3b
 8001720:	47a0      	blx	r4
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *euler_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_EULER_UNIT);
 8001726:	7b7b      	ldrb	r3, [r7, #13]
 8001728:	109b      	asrs	r3, r3, #2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	701a      	strb	r2, [r3, #0]
 8001736:	e001      	b.n	800173c <bno055_get_euler_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	bd90      	pop	{r4, r7, pc}
 8001748:	20000290 	.word	0x20000290

0800174c <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001756:	23ff      	movs	r3, #255	; 0xff
 8001758:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800175a:	2300      	movs	r3, #0
 800175c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800175e:	2300      	movs	r3, #0
 8001760:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001762:	23ff      	movs	r3, #255	; 0xff
 8001764:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <bno055_set_euler_unit+0xf4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d102      	bne.n	8001774 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 800176e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001772:	e060      	b.n	8001836 <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f863 	bl	8001844 <bno055_get_operation_mode>
 800177e:	4603      	mov	r3, r0
 8001780:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001782:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d144      	bne.n	8001814 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800178a:	7b3b      	ldrb	r3, [r7, #12]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001790:	2000      	movs	r0, #0
 8001792:	f000 f899 	bl	80018c8 <bno055_set_operation_mode>
 8001796:	4603      	mov	r3, r0
 8001798:	b2da      	uxtb	r2, r3
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	4413      	add	r3, r2
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 80017a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d131      	bne.n	800180e <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <bno055_set_euler_unit+0xf4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	691c      	ldr	r4, [r3, #16]
 80017b0:	4b23      	ldr	r3, [pc, #140]	; (8001840 <bno055_set_euler_unit+0xf4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	7a58      	ldrb	r0, [r3, #9]
 80017b6:	f107 020d 	add.w	r2, r7, #13
 80017ba:	2301      	movs	r3, #1
 80017bc:	213b      	movs	r1, #59	; 0x3b
 80017be:	47a0      	blx	r4
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80017c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d125      	bne.n	8001818 <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 80017cc:	7b7b      	ldrb	r3, [r7, #13]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	f023 0304 	bic.w	r3, r3, #4
 80017d4:	b25a      	sxtb	r2, r3
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	b25b      	sxtb	r3, r3
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	4313      	orrs	r3, r2
 80017e4:	b25b      	sxtb	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <bno055_set_euler_unit+0xf4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68dc      	ldr	r4, [r3, #12]
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <bno055_set_euler_unit+0xf4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	7a58      	ldrb	r0, [r3, #9]
 80017f6:	f107 020d 	add.w	r2, r7, #13
 80017fa:	2301      	movs	r3, #1
 80017fc:	213b      	movs	r1, #59	; 0x3b
 80017fe:	47a0      	blx	r4
 8001800:	4603      	mov	r3, r0
 8001802:	b2da      	uxtb	r2, r3
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	4413      	add	r3, r2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e004      	b.n	8001818 <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 800180e:	23ff      	movs	r3, #255	; 0xff
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e001      	b.n	8001818 <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001814:	23ff      	movs	r3, #255	; 0xff
 8001816:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001818:	7b3b      	ldrb	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800181e:	7b3b      	ldrb	r3, [r7, #12]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f851 	bl	80018c8 <bno055_set_operation_mode>
 8001826:	4603      	mov	r3, r0
 8001828:	b2da      	uxtb	r2, r3
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	4413      	add	r3, r2
 800182e:	b2db      	uxtb	r3, r3
 8001830:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001832:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}
 800183e:	bf00      	nop
 8001840:	20000290 	.word	0x20000290

08001844 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800184c:	23ff      	movs	r3, #255	; 0xff
 800184e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001850:	2300      	movs	r3, #0
 8001852:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001854:	23ff      	movs	r3, #255	; 0xff
 8001856:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <bno055_get_operation_mode+0x80>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001860:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001864:	e02a      	b.n	80018bc <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001866:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <bno055_get_operation_mode+0x80>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fe0d 	bl	8001490 <bno055_write_page_id>
 8001876:	4603      	mov	r3, r0
 8001878:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800187a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <bno055_get_operation_mode+0x48>
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <bno055_get_operation_mode+0x80>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	791b      	ldrb	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d113      	bne.n	80018b4 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <bno055_get_operation_mode+0x80>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	691c      	ldr	r4, [r3, #16]
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <bno055_get_operation_mode+0x80>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	7a58      	ldrb	r0, [r3, #9]
 8001898:	f107 020d 	add.w	r2, r7, #13
 800189c:	2301      	movs	r3, #1
 800189e:	213d      	movs	r1, #61	; 0x3d
 80018a0:	47a0      	blx	r4
 80018a2:	4603      	mov	r3, r0
 80018a4:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 80018a6:	7b7b      	ldrb	r3, [r7, #13]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	701a      	strb	r2, [r3, #0]
 80018b2:	e001      	b.n	80018b8 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80018b4:	23ff      	movs	r3, #255	; 0xff
 80018b6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80018b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	20000290 	.word	0x20000290

080018c8 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80018d2:	23ff      	movs	r3, #255	; 0xff
 80018d4:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80018da:	2300      	movs	r3, #0
 80018dc:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80018de:	23ff      	movs	r3, #255	; 0xff
 80018e0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80018e2:	4b5c      	ldr	r3, [pc, #368]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80018ea:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80018ee:	e0ac      	b.n	8001a4a <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ffa5 	bl	8001844 <bno055_get_operation_mode>
 80018fa:	4603      	mov	r3, r0
 80018fc:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80018fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f040 809d 	bne.w	8001a42 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 8001908:	7b3b      	ldrb	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d137      	bne.n	800197e <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800190e:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	691c      	ldr	r4, [r3, #16]
 8001914:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	7a58      	ldrb	r0, [r3, #9]
 800191a:	f107 020d 	add.w	r2, r7, #13
 800191e:	2301      	movs	r3, #1
 8001920:	213d      	movs	r1, #61	; 0x3d
 8001922:	47a0      	blx	r4
 8001924:	4603      	mov	r3, r0
 8001926:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 808a 	bne.w	8001a46 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001932:	7b7b      	ldrb	r3, [r7, #13]
 8001934:	b25b      	sxtb	r3, r3
 8001936:	f023 030f 	bic.w	r3, r3, #15
 800193a:	b25a      	sxtb	r2, r3
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	b25b      	sxtb	r3, r3
 8001946:	4313      	orrs	r3, r2
 8001948:	b25b      	sxtb	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68dc      	ldr	r4, [r3, #12]
 8001954:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	7a58      	ldrb	r0, [r3, #9]
 800195a:	f107 020d 	add.w	r2, r7, #13
 800195e:	2301      	movs	r3, #1
 8001960:	213d      	movs	r1, #61	; 0x3d
 8001962:	47a0      	blx	r4
 8001964:	4603      	mov	r3, r0
 8001966:	b2da      	uxtb	r2, r3
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	4413      	add	r3, r2
 800196c:	b2db      	uxtb	r3, r3
 800196e:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f44f 7016 	mov.w	r0, #600	; 0x258
 800197a:	4798      	blx	r3
 800197c:	e063      	b.n	8001a46 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800197e:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691c      	ldr	r4, [r3, #16]
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	7a58      	ldrb	r0, [r3, #9]
 800198a:	f107 020d 	add.w	r2, r7, #13
 800198e:	2301      	movs	r3, #1
 8001990:	213d      	movs	r1, #61	; 0x3d
 8001992:	47a0      	blx	r4
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d116      	bne.n	80019ce <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	f023 030f 	bic.w	r3, r3, #15
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 80019aa:	f107 030d 	add.w	r3, r7, #13
 80019ae:	2201      	movs	r2, #1
 80019b0:	4619      	mov	r1, r3
 80019b2:	203d      	movs	r0, #61	; 0x3d
 80019b4:	f7ff fd46 	bl	8001444 <bno055_write_register>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b2da      	uxtb	r2, r3
                    com_rslt +=
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	4413      	add	r3, r2
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2014      	movs	r0, #20
 80019cc:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d038      	beq.n	8001a46 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691c      	ldr	r4, [r3, #16]
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	7a58      	ldrb	r0, [r3, #9]
 80019e0:	f107 020d 	add.w	r2, r7, #13
 80019e4:	2301      	movs	r3, #1
 80019e6:	213d      	movs	r1, #61	; 0x3d
 80019e8:	47a0      	blx	r4
 80019ea:	4603      	mov	r3, r0
 80019ec:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d127      	bne.n	8001a46 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80019f6:	7b7b      	ldrb	r3, [r7, #13]
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f023 030f 	bic.w	r3, r3, #15
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68dc      	ldr	r4, [r3, #12]
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	7a58      	ldrb	r0, [r3, #9]
 8001a1e:	f107 020d 	add.w	r2, r7, #13
 8001a22:	2301      	movs	r3, #1
 8001a24:	213d      	movs	r1, #61	; 0x3d
 8001a26:	47a0      	blx	r4
 8001a28:	4603      	mov	r3, r0
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	4413      	add	r3, r2
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <bno055_set_operation_mode+0x18c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001a3e:	4798      	blx	r3
 8001a40:	e001      	b.n	8001a46 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001a42:	23ff      	movs	r3, #255	; 0xff
 8001a44:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd90      	pop	{r4, r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000290 	.word	0x20000290

08001a58 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001a62:	23ff      	movs	r3, #255	; 0xff
 8001a64:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001a6e:	23ff      	movs	r3, #255	; 0xff
 8001a70:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <bno055_set_power_mode+0xf0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 8001a7a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001a7e:	e05f      	b.n	8001b40 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fedd 	bl	8001844 <bno055_get_operation_mode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d143      	bne.n	8001b1e <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001a96:	7b3b      	ldrb	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff ff13 	bl	80018c8 <bno055_set_operation_mode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	7bbb      	ldrb	r3, [r7, #14]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d130      	bne.n	8001b18 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <bno055_set_power_mode+0xf0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691c      	ldr	r4, [r3, #16]
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <bno055_set_power_mode+0xf0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	7a58      	ldrb	r0, [r3, #9]
 8001ac2:	f107 020d 	add.w	r2, r7, #13
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	213e      	movs	r1, #62	; 0x3e
 8001aca:	47a0      	blx	r4
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d124      	bne.n	8001b22 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 8001ad8:	7b7b      	ldrb	r3, [r7, #13]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	f023 0303 	bic.w	r3, r3, #3
 8001ae0:	b25a      	sxtb	r2, r3
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	b25b      	sxtb	r3, r3
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <bno055_set_power_mode+0xf0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68dc      	ldr	r4, [r3, #12]
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <bno055_set_power_mode+0xf0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	7a58      	ldrb	r0, [r3, #9]
 8001b00:	f107 020d 	add.w	r2, r7, #13
 8001b04:	2301      	movs	r3, #1
 8001b06:	213e      	movs	r1, #62	; 0x3e
 8001b08:	47a0      	blx	r4
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	4413      	add	r3, r2
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	73fb      	strb	r3, [r7, #15]
 8001b16:	e004      	b.n	8001b22 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001b18:	23ff      	movs	r3, #255	; 0xff
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e001      	b.n	8001b22 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001b1e:	23ff      	movs	r3, #255	; 0xff
 8001b20:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d009      	beq.n	8001b3c <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001b28:	7b3b      	ldrb	r3, [r7, #12]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fecc 	bl	80018c8 <bno055_set_operation_mode>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	4413      	add	r3, r2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}
 8001b48:	20000290 	.word	0x20000290

08001b4c <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <I2C_routine+0x28>)
 8001b52:	4a09      	ldr	r2, [pc, #36]	; (8001b78 <I2C_routine+0x2c>)
 8001b54:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 8001b56:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <I2C_routine+0x28>)
 8001b58:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <I2C_routine+0x30>)
 8001b5a:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <I2C_routine+0x28>)
 8001b5e:	4a08      	ldr	r2, [pc, #32]	; (8001b80 <I2C_routine+0x34>)
 8001b60:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <I2C_routine+0x28>)
 8001b64:	2229      	movs	r2, #41	; 0x29
 8001b66:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	20001e7c 	.word	0x20001e7c
 8001b78:	08001b85 	.word	0x08001b85
 8001b7c:	08001bfd 	.word	0x08001bfd
 8001b80:	08001c8d 	.word	0x08001c8d

08001b84 <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	603a      	str	r2, [r7, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	460b      	mov	r3, r1
 8001b94:	71bb      	strb	r3, [r7, #6]
 8001b96:	4613      	mov	r3, r2
 8001b98:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001ba2:	79bb      	ldrb	r3, [r7, #6]
 8001ba4:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
 8001baa:	e00d      	b.n	8001bc8 <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 8001bac:	7dfb      	ldrb	r3, [r7, #23]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	441a      	add	r2, r3
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	7812      	ldrb	r2, [r2, #0]
 8001bb8:	f107 0118 	add.w	r1, r7, #24
 8001bbc:	440b      	add	r3, r1
 8001bbe:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	75fb      	strb	r3, [r7, #23]
 8001bc8:	7dfa      	ldrb	r2, [r7, #23]
 8001bca:	797b      	ldrb	r3, [r7, #5]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d3ed      	bcc.n	8001bac <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 8001bd0:	797b      	ldrb	r3, [r7, #5]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b299      	uxth	r1, r3
 8001bd8:	f107 0208 	add.w	r2, r7, #8
 8001bdc:	230a      	movs	r3, #10
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	460b      	mov	r3, r1
 8001be2:	2152      	movs	r1, #82	; 0x52
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <BNO055_I2C_bus_write+0x74>)
 8001be6:	f004 f9fb 	bl	8005fe0 <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	b25b      	sxtb	r3, r3
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20005128 	.word	0x20005128

08001bfc <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	603a      	str	r2, [r7, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	71bb      	strb	r3, [r7, #6]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 8001c16:	f107 0308 	add.w	r3, r7, #8
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75fb      	strb	r3, [r7, #23]
 8001c2c:	e00c      	b.n	8001c48 <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 8001c2e:	7dfa      	ldrb	r2, [r7, #23]
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	440b      	add	r3, r1
 8001c36:	f107 0118 	add.w	r1, r7, #24
 8001c3a:	440a      	add	r2, r1
 8001c3c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001c40:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	3301      	adds	r3, #1
 8001c46:	75fb      	strb	r3, [r7, #23]
 8001c48:	7dfa      	ldrb	r2, [r7, #23]
 8001c4a:	797b      	ldrb	r3, [r7, #5]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d3ee      	bcc.n	8001c2e <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 8001c50:	797b      	ldrb	r3, [r7, #5]
 8001c52:	b299      	uxth	r1, r3
 8001c54:	f107 0208 	add.w	r2, r7, #8
 8001c58:	230a      	movs	r3, #10
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	2152      	movs	r1, #82	; 0x52
 8001c60:	4809      	ldr	r0, [pc, #36]	; (8001c88 <BNO055_I2C_bus_read+0x8c>)
 8001c62:	f004 f9bd 	bl	8005fe0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 8001c66:	797b      	ldrb	r3, [r7, #5]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	230a      	movs	r3, #10
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	2152      	movs	r1, #82	; 0x52
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <BNO055_I2C_bus_read+0x8c>)
 8001c76:	f004 faa7 	bl	80061c8 <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	b25b      	sxtb	r3, r3
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20005128 	.word	0x20005128

08001c8c <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f002 fc4f 	bl	8004538 <HAL_Delay>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <BNOInit>:

void BNOInit(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	I2C_routine();
 8001ca8:	f7ff ff50 	bl	8001b4c <I2C_routine>
	comres = bno055_init(&bno055);
 8001cac:	4810      	ldr	r0, [pc, #64]	; (8001cf0 <BNOInit+0x4c>)
 8001cae:	f7ff fb07 	bl	80012c0 <bno055_init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <BNOInit+0x50>)
 8001cb8:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 8001cba:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <BNOInit+0x54>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <BNOInit+0x54>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fec7 	bl	8001a58 <bno055_set_power_mode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <BNOInit+0x50>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <BNOInit+0x50>)
 8001cd6:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 8001cd8:	200c      	movs	r0, #12
 8001cda:	f7ff fdf5 	bl	80018c8 <bno055_set_operation_mode>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <BNOInit+0x50>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a02      	ldr	r2, [pc, #8]	; (8001cf4 <BNOInit+0x50>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20001e7c 	.word	0x20001e7c
 8001cf4:	20000040 	.word	0x20000040
 8001cf8:	20001be8 	.word	0x20001be8

08001cfc <readBNOAnglesDeg>:

void readBNOAnglesDeg(void)
{
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
//	comres += bno055_convert_double_euler_h_deg(&d_euler_data_h);
//	comres += bno055_convert_double_euler_r_deg(&d_euler_data_r);
//	comres += bno055_convert_double_euler_p_deg(&d_euler_data_p);
	comres += bno055_convert_double_euler_hpr_deg(&d_euler_hpr);
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <readBNOAnglesDeg+0x40>)
 8001d02:	f7ff fc77 	bl	80015f4 <bno055_convert_double_euler_hpr_deg>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <readBNOAnglesDeg+0x44>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <readBNOAnglesDeg+0x44>)
 8001d12:	6013      	str	r3, [r2, #0]
	Roll = d_euler_hpr.p;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <readBNOAnglesDeg+0x40>)
 8001d16:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <readBNOAnglesDeg+0x48>)
 8001d1c:	e9c2 3400 	strd	r3, r4, [r2]
	Pitch = d_euler_hpr.r;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <readBNOAnglesDeg+0x40>)
 8001d22:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <readBNOAnglesDeg+0x4c>)
 8001d28:	e9c2 3400 	strd	r3, r4, [r2]
	Yaw = d_euler_hpr.h;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <readBNOAnglesDeg+0x40>)
 8001d2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d32:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <readBNOAnglesDeg+0x50>)
 8001d34:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001d38:	bf00      	nop
 8001d3a:	bd98      	pop	{r3, r4, r7, pc}
 8001d3c:	20005588 	.word	0x20005588
 8001d40:	20000040 	.word	0x20000040
 8001d44:	20001bf0 	.word	0x20001bf0
 8001d48:	20001bf8 	.word	0x20001bf8
 8001d4c:	20001c00 	.word	0x20001c00

08001d50 <MS56XXReset>:
int64_t OFF = 0;
int64_t SNES = 0;
int32_t P = 0;

void MS56XXReset(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2110      	movs	r1, #16
 8001d58:	480d      	ldr	r0, [pc, #52]	; (8001d90 <MS56XXReset+0x40>)
 8001d5a:	f004 f897 	bl	8005e8c <HAL_GPIO_WritePin>
	SPITX[0] = 0x1E;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <MS56XXReset+0x44>)
 8001d60:	221e      	movs	r2, #30
 8001d62:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	2201      	movs	r2, #1
 8001d6a:	490a      	ldr	r1, [pc, #40]	; (8001d94 <MS56XXReset+0x44>)
 8001d6c:	480a      	ldr	r0, [pc, #40]	; (8001d98 <MS56XXReset+0x48>)
 8001d6e:	f007 fb87 	bl	8009480 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001d72:	bf00      	nop
 8001d74:	4808      	ldr	r0, [pc, #32]	; (8001d98 <MS56XXReset+0x48>)
 8001d76:	f008 f824 	bl	8009dc2 <HAL_SPI_GetState>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d0f9      	beq.n	8001d74 <MS56XXReset+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2110      	movs	r1, #16
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <MS56XXReset+0x40>)
 8001d86:	f004 f881 	bl	8005e8c <HAL_GPIO_WritePin>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020000 	.word	0x40020000
 8001d94:	20000294 	.word	0x20000294
 8001d98:	20005400 	.word	0x20005400

08001d9c <MS56XXReadProm>:

uint16_t MS56XXReadProm(uint8_t address)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = address;
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <MS56XXReadProm+0x78>)
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2110      	movs	r1, #16
 8001db0:	4819      	ldr	r0, [pc, #100]	; (8001e18 <MS56XXReadProm+0x7c>)
 8001db2:	f004 f86b 	bl	8005e8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4915      	ldr	r1, [pc, #84]	; (8001e14 <MS56XXReadProm+0x78>)
 8001dbe:	4817      	ldr	r0, [pc, #92]	; (8001e1c <MS56XXReadProm+0x80>)
 8001dc0:	f007 fb5e 	bl	8009480 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001dc4:	bf00      	nop
 8001dc6:	4815      	ldr	r0, [pc, #84]	; (8001e1c <MS56XXReadProm+0x80>)
 8001dc8:	f007 fffb 	bl	8009dc2 <HAL_SPI_GetState>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d0f9      	beq.n	8001dc6 <MS56XXReadProm+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[0], 1, HAL_MAX_DELAY);
 8001dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	4911      	ldr	r1, [pc, #68]	; (8001e20 <MS56XXReadProm+0x84>)
 8001dda:	4810      	ldr	r0, [pc, #64]	; (8001e1c <MS56XXReadProm+0x80>)
 8001ddc:	f007 fcb6 	bl	800974c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[1], 1, HAL_MAX_DELAY);
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
 8001de4:	2201      	movs	r2, #1
 8001de6:	490f      	ldr	r1, [pc, #60]	; (8001e24 <MS56XXReadProm+0x88>)
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <MS56XXReadProm+0x80>)
 8001dea:	f007 fcaf 	bl	800974c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	2110      	movs	r1, #16
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <MS56XXReadProm+0x7c>)
 8001df4:	f004 f84a 	bl	8005e8c <HAL_GPIO_WritePin>
	return (SPIRX2Byte[0]<<8) + SPIRX2Byte[1];
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <MS56XXReadProm+0x84>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <MS56XXReadProm+0x84>)
 8001e04:	785b      	ldrb	r3, [r3, #1]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	b29b      	uxth	r3, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000294 	.word	0x20000294
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	20005400 	.word	0x20005400
 8001e20:	20000298 	.word	0x20000298
 8001e24:	20000299 	.word	0x20000299

08001e28 <MS56XXInit>:

void MS56XXInit(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	MS56XXReset();
 8001e2c:	f7ff ff90 	bl	8001d50 <MS56XXReset>
	HAL_Delay(50);
 8001e30:	2032      	movs	r0, #50	; 0x32
 8001e32:	f002 fb81 	bl	8004538 <HAL_Delay>
	MS56XXReadProm(0xA0);
 8001e36:	20a0      	movs	r0, #160	; 0xa0
 8001e38:	f7ff ffb0 	bl	8001d9c <MS56XXReadProm>
	Coeff1 = MS56XXReadProm(0xA2);
 8001e3c:	20a2      	movs	r0, #162	; 0xa2
 8001e3e:	f7ff ffad 	bl	8001d9c <MS56XXReadProm>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <MS56XXInit+0xb0>)
 8001e48:	801a      	strh	r2, [r3, #0]
	Coeff2 = MS56XXReadProm(0xA4);
 8001e4a:	20a4      	movs	r0, #164	; 0xa4
 8001e4c:	f7ff ffa6 	bl	8001d9c <MS56XXReadProm>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <MS56XXInit+0xb4>)
 8001e56:	801a      	strh	r2, [r3, #0]
	Coeff3 = MS56XXReadProm(0xA6);
 8001e58:	20a6      	movs	r0, #166	; 0xa6
 8001e5a:	f7ff ff9f 	bl	8001d9c <MS56XXReadProm>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <MS56XXInit+0xb8>)
 8001e64:	801a      	strh	r2, [r3, #0]
	Coeff4 = MS56XXReadProm(0xA8);
 8001e66:	20a8      	movs	r0, #168	; 0xa8
 8001e68:	f7ff ff98 	bl	8001d9c <MS56XXReadProm>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MS56XXInit+0xbc>)
 8001e72:	801a      	strh	r2, [r3, #0]
	Coeff5 = MS56XXReadProm(0xAA);
 8001e74:	20aa      	movs	r0, #170	; 0xaa
 8001e76:	f7ff ff91 	bl	8001d9c <MS56XXReadProm>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MS56XXInit+0xc0>)
 8001e80:	801a      	strh	r2, [r3, #0]
	Coeff6 = MS56XXReadProm(0xAC);
 8001e82:	20ac      	movs	r0, #172	; 0xac
 8001e84:	f7ff ff8a 	bl	8001d9c <MS56XXReadProm>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <MS56XXInit+0xc4>)
 8001e8e:	801a      	strh	r2, [r3, #0]
	MSCRC = MS56XXReadProm(0xAE);
 8001e90:	20ae      	movs	r0, #174	; 0xae
 8001e92:	f7ff ff83 	bl	8001d9c <MS56XXReadProm>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <MS56XXInit+0xc8>)
 8001e9c:	801a      	strh	r2, [r3, #0]

	MS56XXSendCmd(0x58);
 8001e9e:	2058      	movs	r0, #88	; 0x58
 8001ea0:	f000 f82c 	bl	8001efc <MS56XXSendCmd>
	HAL_Delay(9);
 8001ea4:	2009      	movs	r0, #9
 8001ea6:	f002 fb47 	bl	8004538 <HAL_Delay>
	RawTemp = MS56XXRead3Bytes(0);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f000 f856 	bl	8001f5c <MS56XXRead3Bytes>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <MS56XXInit+0xcc>)
 8001eb4:	601a      	str	r2, [r3, #0]

	MS56XXSendCmd(0x48);
 8001eb6:	2048      	movs	r0, #72	; 0x48
 8001eb8:	f000 f820 	bl	8001efc <MS56XXSendCmd>
	HAL_Delay(9);
 8001ebc:	2009      	movs	r0, #9
 8001ebe:	f002 fb3b 	bl	8004538 <HAL_Delay>
	RawPressure = MS56XXRead3Bytes(0);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f84a 	bl	8001f5c <MS56XXRead3Bytes>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <MS56XXInit+0xd0>)
 8001ecc:	601a      	str	r2, [r3, #0]
	GetAltitudeAndTemp();
 8001ece:	f000 f899 	bl	8002004 <GetAltitudeAndTemp>
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200002a0 	.word	0x200002a0
 8001edc:	200002a2 	.word	0x200002a2
 8001ee0:	200002a4 	.word	0x200002a4
 8001ee4:	200002a6 	.word	0x200002a6
 8001ee8:	200002a8 	.word	0x200002a8
 8001eec:	200002aa 	.word	0x200002aa
 8001ef0:	200002ac 	.word	0x200002ac
 8001ef4:	200002c0 	.word	0x200002c0
 8001ef8:	200002c4 	.word	0x200002c4

08001efc <MS56XXSendCmd>:

void MS56XXSendCmd(uint8_t Cmd)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2110      	movs	r1, #16
 8001f0a:	4810      	ldr	r0, [pc, #64]	; (8001f4c <MS56XXSendCmd+0x50>)
 8001f0c:	f003 ffbe 	bl	8005e8c <HAL_GPIO_WritePin>
	SPITX[0] = Cmd;
 8001f10:	4a0f      	ldr	r2, [pc, #60]	; (8001f50 <MS56XXSendCmd+0x54>)
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <MS56XXSendCmd+0x54>)
 8001f1e:	480d      	ldr	r0, [pc, #52]	; (8001f54 <MS56XXSendCmd+0x58>)
 8001f20:	f007 faae 	bl	8009480 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001f24:	bf00      	nop
 8001f26:	480b      	ldr	r0, [pc, #44]	; (8001f54 <MS56XXSendCmd+0x58>)
 8001f28:	f007 ff4b 	bl	8009dc2 <HAL_SPI_GetState>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d0f9      	beq.n	8001f26 <MS56XXSendCmd+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001f32:	2201      	movs	r2, #1
 8001f34:	2110      	movs	r1, #16
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MS56XXSendCmd+0x50>)
 8001f38:	f003 ffa8 	bl	8005e8c <HAL_GPIO_WritePin>
	isCmdSet = true;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MS56XXSendCmd+0x5c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	20000294 	.word	0x20000294
 8001f54:	20005400 	.word	0x20005400
 8001f58:	200002ae 	.word	0x200002ae

08001f5c <MS56XXRead3Bytes>:

uint32_t MS56XXRead3Bytes(uint8_t address)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = 0x00;
 8001f66:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <MS56XXRead3Bytes+0x8c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2110      	movs	r1, #16
 8001f70:	481e      	ldr	r0, [pc, #120]	; (8001fec <MS56XXRead3Bytes+0x90>)
 8001f72:	f003 ff8b 	bl	8005e8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <MS56XXRead3Bytes+0x8c>)
 8001f7e:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <MS56XXRead3Bytes+0x94>)
 8001f80:	f007 fa7e 	bl	8009480 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001f84:	bf00      	nop
 8001f86:	481a      	ldr	r0, [pc, #104]	; (8001ff0 <MS56XXRead3Bytes+0x94>)
 8001f88:	f007 ff1b 	bl	8009dc2 <HAL_SPI_GetState>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d0f9      	beq.n	8001f86 <MS56XXRead3Bytes+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[0], 1, HAL_MAX_DELAY);
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	2201      	movs	r2, #1
 8001f98:	4916      	ldr	r1, [pc, #88]	; (8001ff4 <MS56XXRead3Bytes+0x98>)
 8001f9a:	4815      	ldr	r0, [pc, #84]	; (8001ff0 <MS56XXRead3Bytes+0x94>)
 8001f9c:	f007 fbd6 	bl	800974c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[1], 1, HAL_MAX_DELAY);
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	4914      	ldr	r1, [pc, #80]	; (8001ff8 <MS56XXRead3Bytes+0x9c>)
 8001fa8:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <MS56XXRead3Bytes+0x94>)
 8001faa:	f007 fbcf 	bl	800974c <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[2], 1, HAL_MAX_DELAY);
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	4911      	ldr	r1, [pc, #68]	; (8001ffc <MS56XXRead3Bytes+0xa0>)
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <MS56XXRead3Bytes+0x94>)
 8001fb8:	f007 fbc8 	bl	800974c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	480a      	ldr	r0, [pc, #40]	; (8001fec <MS56XXRead3Bytes+0x90>)
 8001fc2:	f003 ff63 	bl	8005e8c <HAL_GPIO_WritePin>
	isCmdSet = false;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MS56XXRead3Bytes+0xa4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
	return (SPIRX3Byte[0] << 16) + (SPIRX3Byte[1] << 8 ) + (SPIRX3Byte[0]);
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MS56XXRead3Bytes+0x98>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	041a      	lsls	r2, r3, #16
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <MS56XXRead3Bytes+0x98>)
 8001fd4:	785b      	ldrb	r3, [r3, #1]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	4413      	add	r3, r2
 8001fda:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <MS56XXRead3Bytes+0x98>)
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	4413      	add	r3, r2
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000294 	.word	0x20000294
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	20005400 	.word	0x20005400
 8001ff4:	2000029c 	.word	0x2000029c
 8001ff8:	2000029d 	.word	0x2000029d
 8001ffc:	2000029e 	.word	0x2000029e
 8002000:	200002ae 	.word	0x200002ae

08002004 <GetAltitudeAndTemp>:

uint16_t GetAltitudeAndTemp(void)
{
 8002004:	b4f0      	push	{r4, r5, r6, r7}
 8002006:	af00      	add	r7, sp, #0
	dT = RawTemp - Coeff5 * 256;
 8002008:	4b47      	ldr	r3, [pc, #284]	; (8002128 <GetAltitudeAndTemp+0x124>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a47      	ldr	r2, [pc, #284]	; (800212c <GetAltitudeAndTemp+0x128>)
 800200e:	8812      	ldrh	r2, [r2, #0]
 8002010:	0212      	lsls	r2, r2, #8
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	461a      	mov	r2, r3
 8002016:	4b46      	ldr	r3, [pc, #280]	; (8002130 <GetAltitudeAndTemp+0x12c>)
 8002018:	601a      	str	r2, [r3, #0]
	TEMP = 2000 + dT * Coeff6 / 8388608;
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <GetAltitudeAndTemp+0x130>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <GetAltitudeAndTemp+0x12c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	fb03 f302 	mul.w	r3, r3, r2
 8002028:	2b00      	cmp	r3, #0
 800202a:	da02      	bge.n	8002032 <GetAltitudeAndTemp+0x2e>
 800202c:	4a42      	ldr	r2, [pc, #264]	; (8002138 <GetAltitudeAndTemp+0x134>)
 800202e:	441a      	add	r2, r3
 8002030:	4613      	mov	r3, r2
 8002032:	15db      	asrs	r3, r3, #23
 8002034:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002038:	4a40      	ldr	r2, [pc, #256]	; (800213c <GetAltitudeAndTemp+0x138>)
 800203a:	6013      	str	r3, [r2, #0]
	OFF = Coeff2 * 131072 + Coeff4 * dT / 64;
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <GetAltitudeAndTemp+0x13c>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	045a      	lsls	r2, r3, #17
 8002042:	4b40      	ldr	r3, [pc, #256]	; (8002144 <GetAltitudeAndTemp+0x140>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	4619      	mov	r1, r3
 8002048:	4b39      	ldr	r3, [pc, #228]	; (8002130 <GetAltitudeAndTemp+0x12c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fb03 f301 	mul.w	r3, r3, r1
 8002050:	2b00      	cmp	r3, #0
 8002052:	da00      	bge.n	8002056 <GetAltitudeAndTemp+0x52>
 8002054:	333f      	adds	r3, #63	; 0x3f
 8002056:	119b      	asrs	r3, r3, #6
 8002058:	4413      	add	r3, r2
 800205a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800205e:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <GetAltitudeAndTemp+0x144>)
 8002060:	e9c2 3400 	strd	r3, r4, [r2]
	SNES = Coeff1 * 32768 + (Coeff3 * dT) / 127;
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <GetAltitudeAndTemp+0x148>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	03da      	lsls	r2, r3, #15
 800206a:	4b39      	ldr	r3, [pc, #228]	; (8002150 <GetAltitudeAndTemp+0x14c>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	4b2f      	ldr	r3, [pc, #188]	; (8002130 <GetAltitudeAndTemp+0x12c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fb03 f301 	mul.w	r3, r3, r1
 8002078:	4936      	ldr	r1, [pc, #216]	; (8002154 <GetAltitudeAndTemp+0x150>)
 800207a:	fb81 0103 	smull	r0, r1, r1, r3
 800207e:	4419      	add	r1, r3
 8002080:	1189      	asrs	r1, r1, #6
 8002082:	17db      	asrs	r3, r3, #31
 8002084:	1acb      	subs	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800208c:	4a32      	ldr	r2, [pc, #200]	; (8002158 <GetAltitudeAndTemp+0x154>)
 800208e:	e9c2 3400 	strd	r3, r4, [r2]
	P = ((RawPressure * SNES) / 2097152 - OFF) / 32768;
 8002092:	4b32      	ldr	r3, [pc, #200]	; (800215c <GetAltitudeAndTemp+0x158>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <GetAltitudeAndTemp+0x154>)
 800209e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020a2:	fb03 f502 	mul.w	r5, r3, r2
 80020a6:	fb01 f004 	mul.w	r0, r1, r4
 80020aa:	4428      	add	r0, r5
 80020ac:	fba1 3403 	umull	r3, r4, r1, r3
 80020b0:	1902      	adds	r2, r0, r4
 80020b2:	4614      	mov	r4, r2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f174 0200 	sbcs.w	r2, r4, #0
 80020ba:	da05      	bge.n	80020c8 <GetAltitudeAndTemp+0xc4>
 80020bc:	4928      	ldr	r1, [pc, #160]	; (8002160 <GetAltitudeAndTemp+0x15c>)
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	185b      	adds	r3, r3, r1
 80020c4:	eb44 0402 	adc.w	r4, r4, r2
 80020c8:	f04f 0100 	mov.w	r1, #0
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	0d59      	lsrs	r1, r3, #21
 80020d2:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 80020d6:	1562      	asrs	r2, r4, #21
 80020d8:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <GetAltitudeAndTemp+0x144>)
 80020da:	e9d3 5600 	ldrd	r5, r6, [r3]
 80020de:	460b      	mov	r3, r1
 80020e0:	4614      	mov	r4, r2
 80020e2:	1b5b      	subs	r3, r3, r5
 80020e4:	eb64 0406 	sbc.w	r4, r4, r6
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f174 0200 	sbcs.w	r2, r4, #0
 80020ee:	da06      	bge.n	80020fe <GetAltitudeAndTemp+0xfa>
 80020f0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	185b      	adds	r3, r3, r1
 80020fa:	eb44 0402 	adc.w	r4, r4, r2
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	0bd9      	lsrs	r1, r3, #15
 8002108:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 800210c:	13e2      	asrs	r2, r4, #15
 800210e:	460b      	mov	r3, r1
 8002110:	4614      	mov	r4, r2
 8002112:	461a      	mov	r2, r3
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <GetAltitudeAndTemp+0x160>)
 8002116:	601a      	str	r2, [r3, #0]
	return P;
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <GetAltitudeAndTemp+0x160>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	bcf0      	pop	{r4, r5, r6, r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	200002c0 	.word	0x200002c0
 800212c:	200002a8 	.word	0x200002a8
 8002130:	200002c8 	.word	0x200002c8
 8002134:	200002aa 	.word	0x200002aa
 8002138:	007fffff 	.word	0x007fffff
 800213c:	200002cc 	.word	0x200002cc
 8002140:	200002a2 	.word	0x200002a2
 8002144:	200002a6 	.word	0x200002a6
 8002148:	200002d0 	.word	0x200002d0
 800214c:	200002a0 	.word	0x200002a0
 8002150:	200002a4 	.word	0x200002a4
 8002154:	81020409 	.word	0x81020409
 8002158:	200002d8 	.word	0x200002d8
 800215c:	200002c4 	.word	0x200002c4
 8002160:	001fffff 	.word	0x001fffff
 8002164:	200002e0 	.word	0x200002e0

08002168 <MS56XXCyclicRead>:

void MS56XXCyclicRead(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	if ( (HAL_GetTick() - LastTempMeasurement) > 1000 )
 800216c:	f002 f9d8 	bl	8004520 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	4b39      	ldr	r3, [pc, #228]	; (8002258 <MS56XXCyclicRead+0xf0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800217c:	d917      	bls.n	80021ae <MS56XXCyclicRead+0x46>
	{
		if (!isCmdSet)
 800217e:	4b37      	ldr	r3, [pc, #220]	; (800225c <MS56XXCyclicRead+0xf4>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	f083 0301 	eor.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <MS56XXCyclicRead+0x46>
		{
			MS56XXSendCmd(0x58);
 800218c:	2058      	movs	r0, #88	; 0x58
 800218e:	f7ff feb5 	bl	8001efc <MS56XXSendCmd>
			isCmdSet = true;
 8002192:	4b32      	ldr	r3, [pc, #200]	; (800225c <MS56XXCyclicRead+0xf4>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <MS56XXCyclicRead+0xf8>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = false;
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <MS56XXCyclicRead+0xfc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 80021a4:	f002 f9bc 	bl	8004520 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b2f      	ldr	r3, [pc, #188]	; (8002268 <MS56XXCyclicRead+0x100>)
 80021ac:	601a      	str	r2, [r3, #0]
		}
	}

	if ((HAL_GetTick() - LastPressureMeasurement) > 20)
 80021ae:	f002 f9b7 	bl	8004520 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b2d      	ldr	r3, [pc, #180]	; (800226c <MS56XXCyclicRead+0x104>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b14      	cmp	r3, #20
 80021bc:	d917      	bls.n	80021ee <MS56XXCyclicRead+0x86>
	{
		if (!isCmdSet)
 80021be:	4b27      	ldr	r3, [pc, #156]	; (800225c <MS56XXCyclicRead+0xf4>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	f083 0301 	eor.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d010      	beq.n	80021ee <MS56XXCyclicRead+0x86>
		{
			MS56XXSendCmd(0x48);
 80021cc:	2048      	movs	r0, #72	; 0x48
 80021ce:	f7ff fe95 	bl	8001efc <MS56XXSendCmd>
			isCmdSet = true;
 80021d2:	4b22      	ldr	r3, [pc, #136]	; (800225c <MS56XXCyclicRead+0xf4>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <MS56XXCyclicRead+0xf8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = true;
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <MS56XXCyclicRead+0xfc>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 80021e4:	f002 f99c 	bl	8004520 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <MS56XXCyclicRead+0x100>)
 80021ec:	601a      	str	r2, [r3, #0]
		}
	}

	if ( (HAL_GetTick() - LastCommandSent) > 9 )
 80021ee:	f002 f997 	bl	8004520 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <MS56XXCyclicRead+0x100>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b09      	cmp	r3, #9
 80021fc:	d929      	bls.n	8002252 <MS56XXCyclicRead+0xea>
	{
		if (isCmdSet)
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <MS56XXCyclicRead+0xf4>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d025      	beq.n	8002252 <MS56XXCyclicRead+0xea>
		{
			if (!isPressureLastCmd)
 8002206:	4b17      	ldr	r3, [pc, #92]	; (8002264 <MS56XXCyclicRead+0xfc>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	f083 0301 	eor.w	r3, r3, #1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <MS56XXCyclicRead+0xc4>
			{
				RawTemp = MS56XXRead3Bytes(0);
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff fea1 	bl	8001f5c <MS56XXRead3Bytes>
 800221a:	4602      	mov	r2, r0
 800221c:	4b14      	ldr	r3, [pc, #80]	; (8002270 <MS56XXCyclicRead+0x108>)
 800221e:	601a      	str	r2, [r3, #0]
				LastTempMeasurement = HAL_GetTick();
 8002220:	f002 f97e 	bl	8004520 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MS56XXCyclicRead+0xf0>)
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e00a      	b.n	8002242 <MS56XXCyclicRead+0xda>
			}
			else
			{
				RawPressure = MS56XXRead3Bytes(0);
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff fe95 	bl	8001f5c <MS56XXRead3Bytes>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <MS56XXCyclicRead+0x10c>)
 8002236:	601a      	str	r2, [r3, #0]
				LastPressureMeasurement = HAL_GetTick();
 8002238:	f002 f972 	bl	8004520 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MS56XXCyclicRead+0x104>)
 8002240:	601a      	str	r2, [r3, #0]
			}
			isCmdSet = false;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <MS56XXCyclicRead+0xf4>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
			GetAltitudeAndTemp();
 8002248:	f7ff fedc 	bl	8002004 <GetAltitudeAndTemp>
			isNewMS56XXDataAvailable = true;
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <MS56XXCyclicRead+0xf8>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200002b4 	.word	0x200002b4
 800225c:	200002ae 	.word	0x200002ae
 8002260:	200002b0 	.word	0x200002b0
 8002264:	200002af 	.word	0x200002af
 8002268:	200002bc 	.word	0x200002bc
 800226c:	200002b8 	.word	0x200002b8
 8002270:	200002c0 	.word	0x200002c0
 8002274:	200002c4 	.word	0x200002c4

08002278 <func_dir>:
FILINFO fno;
DIR dp;
uint16_t DisplayedCharIndex = 0;

void func_dir(void)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
	int br = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
	FS_ret2 = f_opendir (&dp, "\\");
 8002282:	491c      	ldr	r1, [pc, #112]	; (80022f4 <func_dir+0x7c>)
 8002284:	481c      	ldr	r0, [pc, #112]	; (80022f8 <func_dir+0x80>)
 8002286:	f00d fd05 	bl	800fc94 <f_opendir>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <func_dir+0x84>)
 8002290:	701a      	strb	r2, [r3, #0]
	do
	{

		//		FS_ret2 = f_findnext(&dp,&fno);
		FS_ret2 = f_readdir(&dp, &fno);
 8002292:	491b      	ldr	r1, [pc, #108]	; (8002300 <func_dir+0x88>)
 8002294:	4818      	ldr	r0, [pc, #96]	; (80022f8 <func_dir+0x80>)
 8002296:	f00d fd70 	bl	800fd7a <f_readdir>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <func_dir+0x84>)
 80022a0:	701a      	strb	r2, [r3, #0]
		if (fno.fname[0] != 0)
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <func_dir+0x88>)
 80022a4:	7d9b      	ldrb	r3, [r3, #22]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00c      	beq.n	80022c4 <func_dir+0x4c>
		{
//			memcpy(USBTXArray,fno.fname, sizeof(fno.fname));
			sprintf(USBTXArray, "file: %s, size: %d\r\n",fno.fname, fno.fsize);
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <func_dir+0x88>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <func_dir+0x8c>)
 80022b0:	4915      	ldr	r1, [pc, #84]	; (8002308 <func_dir+0x90>)
 80022b2:	4816      	ldr	r0, [pc, #88]	; (800230c <func_dir+0x94>)
 80022b4:	f00f f9f6 	bl	80116a4 <siprintf>
			Print(false, false, true);
 80022b8:	2201      	movs	r2, #1
 80022ba:	2100      	movs	r1, #0
 80022bc:	2000      	movs	r0, #0
 80022be:	f000 f9d1 	bl	8002664 <Print>
 80022c2:	e00e      	b.n	80022e2 <func_dir+0x6a>
		}
		else
		{
			sprintf(USBTXArray,"%6.3f, EOD\r\n",CurrentTime());
 80022c4:	f001 fa44 	bl	8003750 <CurrentTime>
 80022c8:	ec54 3b10 	vmov	r3, r4, d0
 80022cc:	461a      	mov	r2, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	490f      	ldr	r1, [pc, #60]	; (8002310 <func_dir+0x98>)
 80022d2:	480e      	ldr	r0, [pc, #56]	; (800230c <func_dir+0x94>)
 80022d4:	f00f f9e6 	bl	80116a4 <siprintf>
			Print(false, false, true);
 80022d8:	2201      	movs	r2, #1
 80022da:	2100      	movs	r1, #0
 80022dc:	2000      	movs	r0, #0
 80022de:	f000 f9c1 	bl	8002664 <Print>
		}
		//		memset(FileReadBuffer,0,sizeof(FileReadBuffer));

	} while (fno.fname[0] != 0);
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <func_dir+0x88>)
 80022e4:	7d9b      	ldrb	r3, [r3, #22]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1d3      	bne.n	8002292 <func_dir+0x1a>
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	08014428 	.word	0x08014428
 80022f8:	20001fb0 	.word	0x20001fb0
 80022fc:	20001fac 	.word	0x20001fac
 8002300:	20001e94 	.word	0x20001e94
 8002304:	20001eaa 	.word	0x20001eaa
 8002308:	0801442c 	.word	0x0801442c
 800230c:	200007e8 	.word	0x200007e8
 8002310:	08014444 	.word	0x08014444

08002314 <func_imp>:
void func_imp(void)
{
 8002314:	b598      	push	{r3, r4, r7, lr}
 8002316:	af00      	add	r7, sp, #0
	sprintf(USBTXArray, "%6.3f, import command received\r\n",CurrentTime());
 8002318:	f001 fa1a 	bl	8003750 <CurrentTime>
 800231c:	ec54 3b10 	vmov	r3, r4, d0
 8002320:	461a      	mov	r2, r3
 8002322:	4623      	mov	r3, r4
 8002324:	4905      	ldr	r1, [pc, #20]	; (800233c <func_imp+0x28>)
 8002326:	4806      	ldr	r0, [pc, #24]	; (8002340 <func_imp+0x2c>)
 8002328:	f00f f9bc 	bl	80116a4 <siprintf>
	Print(false, true, true);
 800232c:	2201      	movs	r2, #1
 800232e:	2101      	movs	r1, #1
 8002330:	2000      	movs	r0, #0
 8002332:	f000 f997 	bl	8002664 <Print>
}
 8002336:	bf00      	nop
 8002338:	bd98      	pop	{r3, r4, r7, pc}
 800233a:	bf00      	nop
 800233c:	08014454 	.word	0x08014454
 8002340:	200007e8 	.word	0x200007e8

08002344 <func_read>:

void func_read(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
	FS_ret2 = f_close(&USERFile);
 800234a:	4821      	ldr	r0, [pc, #132]	; (80023d0 <func_read+0x8c>)
 800234c:	f00d fc78 	bl	800fc40 <f_close>
 8002350:	4603      	mov	r3, r0
 8002352:	461a      	mov	r2, r3
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <func_read+0x90>)
 8002356:	701a      	strb	r2, [r3, #0]
	do
	{
		HAL_Delay(1);
 8002358:	2001      	movs	r0, #1
 800235a:	f002 f8ed 	bl	8004538 <HAL_Delay>
		FS_ret2 = f_open(&USERFile, "Index.txt", FA_READ);
 800235e:	2201      	movs	r2, #1
 8002360:	491d      	ldr	r1, [pc, #116]	; (80023d8 <func_read+0x94>)
 8002362:	481b      	ldr	r0, [pc, #108]	; (80023d0 <func_read+0x8c>)
 8002364:	f00c ff7c 	bl	800f260 <f_open>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <func_read+0x90>)
 800236e:	701a      	strb	r2, [r3, #0]
	} while ( (FS_ret2 != FR_OK) );
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <func_read+0x90>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ef      	bne.n	8002358 <func_read+0x14>

	unsigned int br = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
	do
	{
		FS_ret2 = f_read(&USERFile, &FileReadBuffer, sizeof(FileReadBuffer), &br);
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002382:	4916      	ldr	r1, [pc, #88]	; (80023dc <func_read+0x98>)
 8002384:	4812      	ldr	r0, [pc, #72]	; (80023d0 <func_read+0x8c>)
 8002386:	f00d f929 	bl	800f5dc <f_read>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <func_read+0x90>)
 8002390:	701a      	strb	r2, [r3, #0]
		memcpy(&USBTXArray,FileReadBuffer, br);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	461a      	mov	r2, r3
 8002396:	4911      	ldr	r1, [pc, #68]	; (80023dc <func_read+0x98>)
 8002398:	4811      	ldr	r0, [pc, #68]	; (80023e0 <func_read+0x9c>)
 800239a:	f00e fb59 	bl	8010a50 <memcpy>
		Print(false, false, true);
 800239e:	2201      	movs	r2, #1
 80023a0:	2100      	movs	r1, #0
 80023a2:	2000      	movs	r0, #0
 80023a4:	f000 f95e 	bl	8002664 <Print>
		memset(&FileReadBuffer,0,sizeof(FileReadBuffer));
 80023a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ac:	2100      	movs	r1, #0
 80023ae:	480b      	ldr	r0, [pc, #44]	; (80023dc <func_read+0x98>)
 80023b0:	f00e fb59 	bl	8010a66 <memset>
	} while (br != 0);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1e0      	bne.n	800237c <func_read+0x38>
	FS_ret2 = f_close(&USERFile);
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <func_read+0x8c>)
 80023bc:	f00d fc40 	bl	800fc40 <f_close>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <func_read+0x90>)
 80023c6:	701a      	strb	r2, [r3, #0]
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20001ff0 	.word	0x20001ff0
 80023d4:	20001fac 	.word	0x20001fac
 80023d8:	08014478 	.word	0x08014478
 80023dc:	200017e8 	.word	0x200017e8
 80023e0:	200007e8 	.word	0x200007e8

080023e4 <func_write>:

void func_write(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	do
	{
		HAL_Delay(1);
 80023e8:	2001      	movs	r0, #1
 80023ea:	f002 f8a5 	bl	8004538 <HAL_Delay>
		FS_ret2 = f_open(&USERFile, "Index.txt", FA_OPEN_APPEND | FA_WRITE);
 80023ee:	2232      	movs	r2, #50	; 0x32
 80023f0:	4908      	ldr	r1, [pc, #32]	; (8002414 <func_write+0x30>)
 80023f2:	4809      	ldr	r0, [pc, #36]	; (8002418 <func_write+0x34>)
 80023f4:	f00c ff34 	bl	800f260 <f_open>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <func_write+0x38>)
 80023fe:	701a      	strb	r2, [r3, #0]
	} while ( (FS_ret2 != FR_OK) );
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <func_write+0x38>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ef      	bne.n	80023e8 <func_write+0x4>
	ActiveLog = true;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <func_write+0x3c>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	08014478 	.word	0x08014478
 8002418:	20001ff0 	.word	0x20001ff0
 800241c:	20001fac 	.word	0x20001fac
 8002420:	20001c10 	.word	0x20001c10

08002424 <func_close>:

void func_close(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	ActiveLog = false;
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <func_close+0x1c>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
//	FS_ret2 = f_sync(&USERFile);
	FS_ret2 = f_close(&USERFile);
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <func_close+0x20>)
 8002430:	f00d fc06 	bl	800fc40 <f_close>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <func_close+0x24>)
 800243a:	701a      	strb	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20001c10 	.word	0x20001c10
 8002444:	20001ff0 	.word	0x20001ff0
 8002448:	20001fac 	.word	0x20001fac

0800244c <func_flush>:

void func_flush(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	FS_ret2 = f_sync(&USERFile);
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <func_flush+0x18>)
 8002452:	f00d fb77 	bl	800fb44 <f_sync>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	4b03      	ldr	r3, [pc, #12]	; (8002468 <func_flush+0x1c>)
 800245c:	701a      	strb	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20001ff0 	.word	0x20001ff0
 8002468:	20001fac 	.word	0x20001fac

0800246c <func_fmt>:

void func_fmt(void)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8002472:	b083      	sub	sp, #12
 8002474:	af02      	add	r7, sp, #8
	uint8_t buffer[_MAX_SS];
	FS_ret2 = f_mkfs("\\", FM_FAT, 0, buffer, sizeof(buffer));
 8002476:	463a      	mov	r2, r7
 8002478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	4613      	mov	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	2101      	movs	r1, #1
 8002484:	4824      	ldr	r0, [pc, #144]	; (8002518 <func_fmt+0xac>)
 8002486:	f00d fd6b 	bl	800ff60 <f_mkfs>
 800248a:	4603      	mov	r3, r0
 800248c:	461a      	mov	r2, r3
 800248e:	4b23      	ldr	r3, [pc, #140]	; (800251c <func_fmt+0xb0>)
 8002490:	701a      	strb	r2, [r3, #0]
	sprintf(USBTXArray, "%6.3f, Disk Formated\r\n",CurrentTime());
 8002492:	f001 f95d 	bl	8003750 <CurrentTime>
 8002496:	ec54 3b10 	vmov	r3, r4, d0
 800249a:	461a      	mov	r2, r3
 800249c:	4623      	mov	r3, r4
 800249e:	4920      	ldr	r1, [pc, #128]	; (8002520 <func_fmt+0xb4>)
 80024a0:	4820      	ldr	r0, [pc, #128]	; (8002524 <func_fmt+0xb8>)
 80024a2:	f00f f8ff 	bl	80116a4 <siprintf>
	Print(false, false, true);
 80024a6:	2201      	movs	r2, #1
 80024a8:	2100      	movs	r1, #0
 80024aa:	2000      	movs	r0, #0
 80024ac:	f000 f8da 	bl	8002664 <Print>
	FS_ret2 = f_open(&USERFile, "Index.txt", FA_CREATE_ALWAYS);
 80024b0:	2208      	movs	r2, #8
 80024b2:	491d      	ldr	r1, [pc, #116]	; (8002528 <func_fmt+0xbc>)
 80024b4:	481d      	ldr	r0, [pc, #116]	; (800252c <func_fmt+0xc0>)
 80024b6:	f00c fed3 	bl	800f260 <f_open>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <func_fmt+0xb0>)
 80024c0:	701a      	strb	r2, [r3, #0]
	sprintf(USBTXArray, "%6.3f, Created Index file\r\n",CurrentTime());
 80024c2:	f001 f945 	bl	8003750 <CurrentTime>
 80024c6:	ec54 3b10 	vmov	r3, r4, d0
 80024ca:	461a      	mov	r2, r3
 80024cc:	4623      	mov	r3, r4
 80024ce:	4918      	ldr	r1, [pc, #96]	; (8002530 <func_fmt+0xc4>)
 80024d0:	4814      	ldr	r0, [pc, #80]	; (8002524 <func_fmt+0xb8>)
 80024d2:	f00f f8e7 	bl	80116a4 <siprintf>
	Print(false, false, true);
 80024d6:	2201      	movs	r2, #1
 80024d8:	2100      	movs	r1, #0
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 f8c2 	bl	8002664 <Print>
	FS_ret2 = f_close(&USERFile);
 80024e0:	4812      	ldr	r0, [pc, #72]	; (800252c <func_fmt+0xc0>)
 80024e2:	f00d fbad 	bl	800fc40 <f_close>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <func_fmt+0xb0>)
 80024ec:	701a      	strb	r2, [r3, #0]
	sprintf(USBTXArray, "%6.3f, Closed file\r\n",CurrentTime());
 80024ee:	f001 f92f 	bl	8003750 <CurrentTime>
 80024f2:	ec54 3b10 	vmov	r3, r4, d0
 80024f6:	461a      	mov	r2, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	490e      	ldr	r1, [pc, #56]	; (8002534 <func_fmt+0xc8>)
 80024fc:	4809      	ldr	r0, [pc, #36]	; (8002524 <func_fmt+0xb8>)
 80024fe:	f00f f8d1 	bl	80116a4 <siprintf>
	Print(false, false, true);
 8002502:	2201      	movs	r2, #1
 8002504:	2100      	movs	r1, #0
 8002506:	2000      	movs	r0, #0
 8002508:	f000 f8ac 	bl	8002664 <Print>
}
 800250c:	bf00      	nop
 800250e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8002512:	3704      	adds	r7, #4
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	08014428 	.word	0x08014428
 800251c:	20001fac 	.word	0x20001fac
 8002520:	08014484 	.word	0x08014484
 8002524:	200007e8 	.word	0x200007e8
 8002528:	08014478 	.word	0x08014478
 800252c:	20001ff0 	.word	0x20001ff0
 8002530:	0801449c 	.word	0x0801449c
 8002534:	080144b8 	.word	0x080144b8

08002538 <func_debug>:

void func_debug(void)
{
 8002538:	b598      	push	{r3, r4, r7, lr}
 800253a:	af00      	add	r7, sp, #0
	isDebugMode = !isDebugMode;
 800253c:	4b17      	ldr	r3, [pc, #92]	; (800259c <func_debug+0x64>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f083 0301 	eor.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <func_debug+0x64>)
 8002558:	701a      	strb	r2, [r3, #0]
	if (isDebugMode)
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <func_debug+0x64>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <func_debug+0x40>
	{
		sprintf(USBTXArray, "%6.3f, Debug mode active\r\n",CurrentTime());
 8002562:	f001 f8f5 	bl	8003750 <CurrentTime>
 8002566:	ec54 3b10 	vmov	r3, r4, d0
 800256a:	461a      	mov	r2, r3
 800256c:	4623      	mov	r3, r4
 800256e:	490c      	ldr	r1, [pc, #48]	; (80025a0 <func_debug+0x68>)
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <func_debug+0x6c>)
 8002572:	f00f f897 	bl	80116a4 <siprintf>
 8002576:	e009      	b.n	800258c <func_debug+0x54>
	}
	else
	{
		sprintf(USBTXArray, "%6.3f, Debug mode deactivated\r\n",CurrentTime());
 8002578:	f001 f8ea 	bl	8003750 <CurrentTime>
 800257c:	ec54 3b10 	vmov	r3, r4, d0
 8002580:	461a      	mov	r2, r3
 8002582:	4623      	mov	r3, r4
 8002584:	4908      	ldr	r1, [pc, #32]	; (80025a8 <func_debug+0x70>)
 8002586:	4807      	ldr	r0, [pc, #28]	; (80025a4 <func_debug+0x6c>)
 8002588:	f00f f88c 	bl	80116a4 <siprintf>
	}
	Print(false, false, true);
 800258c:	2201      	movs	r2, #1
 800258e:	2100      	movs	r1, #0
 8002590:	2000      	movs	r0, #0
 8002592:	f000 f867 	bl	8002664 <Print>
}
 8002596:	bf00      	nop
 8002598:	bd98      	pop	{r3, r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	20001c11 	.word	0x20001c11
 80025a0:	080144d0 	.word	0x080144d0
 80025a4:	200007e8 	.word	0x200007e8
 80025a8:	080144ec 	.word	0x080144ec

080025ac <SearchString>:

int32_t SearchString(char *pSrc, char *StringToLookFor)
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	uint32_t LocalCounter = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
	bool StringFound = false;
 80025ba:	2300      	movs	r3, #0
 80025bc:	72fb      	strb	r3, [r7, #11]

	if (strlen(pSrc) > strlen(StringToLookFor))
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fd fe48 	bl	8000254 <strlen>
 80025c4:	4604      	mov	r4, r0
 80025c6:	6838      	ldr	r0, [r7, #0]
 80025c8:	f7fd fe44 	bl	8000254 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	429c      	cmp	r4, r3
 80025d0:	d942      	bls.n	8002658 <SearchString+0xac>
	{
		for (int i = 0 ; i <= strlen(pSrc) - strlen(StringToLookFor); i++ )
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e031      	b.n	800263c <SearchString+0x90>
		{
			if (StringFound)
 80025d8:	7afb      	ldrb	r3, [r7, #11]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d13b      	bne.n	8002656 <SearchString+0xaa>
			{
				break;
			}
			for (int j = 0; j < strlen(StringToLookFor); j++)
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	e021      	b.n	8002628 <SearchString+0x7c>
			{
				if (StringToLookFor[j] == pSrc[j+i])
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	68f9      	ldr	r1, [r7, #12]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	440b      	add	r3, r1
 80025f2:	4619      	mov	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	440b      	add	r3, r1
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d10a      	bne.n	8002614 <SearchString+0x68>
				{
					LocalCounter++;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
				else
				{
					LocalCounter = 0;
					break;
				}
				if (strlen(StringToLookFor) == LocalCounter)
 8002604:	6838      	ldr	r0, [r7, #0]
 8002606:	f7fd fe25 	bl	8000254 <strlen>
 800260a:	4602      	mov	r2, r0
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	4293      	cmp	r3, r2
 8002610:	d107      	bne.n	8002622 <SearchString+0x76>
 8002612:	e002      	b.n	800261a <SearchString+0x6e>
					LocalCounter = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
					break;
 8002618:	e00d      	b.n	8002636 <SearchString+0x8a>
				{
					StringFound = true;
 800261a:	2301      	movs	r3, #1
 800261c:	72fb      	strb	r3, [r7, #11]
					return i;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	e01c      	b.n	800265c <SearchString+0xb0>
			for (int j = 0; j < strlen(StringToLookFor); j++)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3301      	adds	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	6838      	ldr	r0, [r7, #0]
 800262a:	f7fd fe13 	bl	8000254 <strlen>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	429a      	cmp	r2, r3
 8002634:	d8d6      	bhi.n	80025e4 <SearchString+0x38>
		for (int i = 0 ; i <= strlen(pSrc) - strlen(StringToLookFor); i++ )
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3301      	adds	r3, #1
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fd fe09 	bl	8000254 <strlen>
 8002642:	4604      	mov	r4, r0
 8002644:	6838      	ldr	r0, [r7, #0]
 8002646:	f7fd fe05 	bl	8000254 <strlen>
 800264a:	4603      	mov	r3, r0
 800264c:	1ae2      	subs	r2, r4, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d2c1      	bcs.n	80025d8 <SearchString+0x2c>
 8002654:	e000      	b.n	8002658 <SearchString+0xac>
				break;
 8002656:	bf00      	nop
					continue;
				}
			}
		}
	}
	return -1;
 8002658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd90      	pop	{r4, r7, pc}

08002664 <Print>:
		{ "fmt", func_fmt }
};


void Print(bool AddNewLine, bool SendToLog, bool SendToScreen)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
 800266e:	460b      	mov	r3, r1
 8002670:	71bb      	strb	r3, [r7, #6]
 8002672:	4613      	mov	r3, r2
 8002674:	717b      	strb	r3, [r7, #5]
	if (AddNewLine)
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <Print+0x30>
	{
		strcat(&USBTXArray,"\r\n");
 800267c:	481d      	ldr	r0, [pc, #116]	; (80026f4 <Print+0x90>)
 800267e:	f7fd fde9 	bl	8000254 <strlen>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <Print+0x90>)
 8002688:	4413      	add	r3, r2
 800268a:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <Print+0x94>)
 800268c:	8811      	ldrh	r1, [r2, #0]
 800268e:	7892      	ldrb	r2, [r2, #2]
 8002690:	8019      	strh	r1, [r3, #0]
 8002692:	709a      	strb	r2, [r3, #2]
	}
	if (SendToScreen)
 8002694:	797b      	ldrb	r3, [r7, #5]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <Print+0x4c>
	{
		HAL_UART_Transmit(&huart2, USBTXArray, strlen(USBTXArray),HAL_MAX_DELAY); // HAL_UART_Transmit(&huart2, USBTXArray, 1024,3); TIM2->CCR1
 800269a:	4816      	ldr	r0, [pc, #88]	; (80026f4 <Print+0x90>)
 800269c:	f7fd fdda 	bl	8000254 <strlen>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	4912      	ldr	r1, [pc, #72]	; (80026f4 <Print+0x90>)
 80026aa:	4814      	ldr	r0, [pc, #80]	; (80026fc <Print+0x98>)
 80026ac:	f008 ff1c 	bl	800b4e8 <HAL_UART_Transmit>
	}
	if (ActiveLog)
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <Print+0x9c>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00f      	beq.n	80026d8 <Print+0x74>
	{
		BytesWritten = 0;
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <Print+0xa0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
		FS_ret2 = f_write(&USERFile, USBTXArray, strlen(USBTXArray), &BytesWritten);
 80026be:	480d      	ldr	r0, [pc, #52]	; (80026f4 <Print+0x90>)
 80026c0:	f7fd fdc8 	bl	8000254 <strlen>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <Print+0xa0>)
 80026c8:	490a      	ldr	r1, [pc, #40]	; (80026f4 <Print+0x90>)
 80026ca:	480f      	ldr	r0, [pc, #60]	; (8002708 <Print+0xa4>)
 80026cc:	f00d f8c5 	bl	800f85a <f_write>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b0d      	ldr	r3, [pc, #52]	; (800270c <Print+0xa8>)
 80026d6:	701a      	strb	r2, [r3, #0]
//		f_puts(USBTXArray, &USERFile);
	}
	memset(&USBTXArray,0, strlen(USBTXArray));
 80026d8:	4806      	ldr	r0, [pc, #24]	; (80026f4 <Print+0x90>)
 80026da:	f7fd fdbb 	bl	8000254 <strlen>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	2100      	movs	r1, #0
 80026e4:	4803      	ldr	r0, [pc, #12]	; (80026f4 <Print+0x90>)
 80026e6:	f00e f9be 	bl	8010a66 <memset>

}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200007e8 	.word	0x200007e8
 80026f8:	08014540 	.word	0x08014540
 80026fc:	200054a4 	.word	0x200054a4
 8002700:	20001c10 	.word	0x20001c10
 8002704:	20001c24 	.word	0x20001c24
 8002708:	20001ff0 	.word	0x20001ff0
 800270c:	20001fac 	.word	0x20001fac

08002710 <funcTable>:

uint8_t funcTable( char* token )
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	for( stringcase* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <funcTable+0x44>)
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e010      	b.n	8002740 <funcTable+0x30>
	{
		if( 0 == strcmp( pCase->string, token ) )
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fd8b 	bl	8000240 <strcmp>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <funcTable+0x2a>
		{
			(*pCase->func)();
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4798      	blx	r3
			return 1;
 8002736:	2301      	movs	r3, #1
 8002738:	e007      	b.n	800274a <funcTable+0x3a>
	for( stringcase* pCase = cases; pCase != cases + sizeof( cases ) / sizeof( cases[0] ); pCase++ )
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3308      	adds	r3, #8
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4a05      	ldr	r2, [pc, #20]	; (8002758 <funcTable+0x48>)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4293      	cmp	r3, r2
 8002746:	d1ea      	bne.n	800271e <funcTable+0xe>
			break;
		}
	}
	return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000000 	.word	0x20000000
 8002758:	20000040 	.word	0x20000040

0800275c <getCMD>:

void getCMD(void)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, USBRXArray, 64);
 8002762:	2240      	movs	r2, #64	; 0x40
 8002764:	493f      	ldr	r1, [pc, #252]	; (8002864 <getCMD+0x108>)
 8002766:	4840      	ldr	r0, [pc, #256]	; (8002868 <getCMD+0x10c>)
 8002768:	f008 ff50 	bl	800b60c <HAL_UART_Receive_DMA>
	HAL_UART_DMAPause(&huart2);
 800276c:	483e      	ldr	r0, [pc, #248]	; (8002868 <getCMD+0x10c>)
 800276e:	f008 ffd1 	bl	800b714 <HAL_UART_DMAPause>

	int LocalCounter = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
	uint8_t LocalRet = 2;
 8002776:	2302      	movs	r3, #2
 8002778:	75fb      	strb	r3, [r7, #23]

	for (int i = 0; i<64;i++)
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
 800277e:	e01f      	b.n	80027c0 <getCMD+0x64>
	{
		if (USBRXArray[i] == 0)
 8002780:	4a38      	ldr	r2, [pc, #224]	; (8002864 <getCMD+0x108>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4413      	add	r3, r2
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d113      	bne.n	80027b4 <getCMD+0x58>
		{
			memcpy(&USBRXArray[i],&USBRXArray[i + 1],63-i);
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4a35      	ldr	r2, [pc, #212]	; (8002864 <getCMD+0x108>)
 8002790:	1898      	adds	r0, r3, r2
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	3301      	adds	r3, #1
 8002796:	4a33      	ldr	r2, [pc, #204]	; (8002864 <getCMD+0x108>)
 8002798:	1899      	adds	r1, r3, r2
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80027a0:	461a      	mov	r2, r3
 80027a2:	f00e f955 	bl	8010a50 <memcpy>
			UART5RXArray[63 - i] = 0;
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80027ac:	4a2f      	ldr	r2, [pc, #188]	; (800286c <getCMD+0x110>)
 80027ae:	2100      	movs	r1, #0
 80027b0:	54d1      	strb	r1, [r2, r3]
 80027b2:	e002      	b.n	80027ba <getCMD+0x5e>
		}
		else
		{
			LocalCounter++;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	3301      	adds	r3, #1
 80027b8:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i<64;i++)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	3301      	adds	r3, #1
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b3f      	cmp	r3, #63	; 0x3f
 80027c4:	dddc      	ble.n	8002780 <getCMD+0x24>
//		}
//	}



	int32_t NewLineIndex = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
	NewLineIndex = SearchString(USBRXArray,"\r\n");
 80027ca:	4929      	ldr	r1, [pc, #164]	; (8002870 <getCMD+0x114>)
 80027cc:	4825      	ldr	r0, [pc, #148]	; (8002864 <getCMD+0x108>)
 80027ce:	f7ff feed 	bl	80025ac <SearchString>
 80027d2:	6138      	str	r0, [r7, #16]
	if ((strlen(USBRXArray) > 0) && (NewLineIndex > 0) )
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <getCMD+0x108>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d02f      	beq.n	800283c <getCMD+0xe0>
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	dd2c      	ble.n	800283c <getCMD+0xe0>
	{

		char LocalCMD[10] = {0};
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	811a      	strh	r2, [r3, #8]
		strncpy(&LocalCMD,&USBRXArray,NewLineIndex);
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	491c      	ldr	r1, [pc, #112]	; (8002864 <getCMD+0x108>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f00e ff76 	bl	80116e4 <strncpy>

//		Print(true, false, true);
		LocalRet = funcTable(LocalCMD);
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff88 	bl	8002710 <funcTable>
 8002800:	4603      	mov	r3, r0
 8002802:	75fb      	strb	r3, [r7, #23]
		if (!LocalRet)
 8002804:	7dfb      	ldrb	r3, [r7, #23]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10e      	bne.n	8002828 <getCMD+0xcc>
		{
			sprintf(USBTXArray, "%6.3f, failed to execute command\r\n",CurrentTime());
 800280a:	f000 ffa1 	bl	8003750 <CurrentTime>
 800280e:	ec54 3b10 	vmov	r3, r4, d0
 8002812:	461a      	mov	r2, r3
 8002814:	4623      	mov	r3, r4
 8002816:	4917      	ldr	r1, [pc, #92]	; (8002874 <getCMD+0x118>)
 8002818:	4817      	ldr	r0, [pc, #92]	; (8002878 <getCMD+0x11c>)
 800281a:	f00e ff43 	bl	80116a4 <siprintf>
			Print(false, true, true);
 800281e:	2201      	movs	r2, #1
 8002820:	2101      	movs	r1, #1
 8002822:	2000      	movs	r0, #0
 8002824:	f7ff ff1e 	bl	8002664 <Print>
		}
		memset(&USBRXArray,0,sizeof(USBRXArray));
 8002828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800282c:	2100      	movs	r1, #0
 800282e:	480d      	ldr	r0, [pc, #52]	; (8002864 <getCMD+0x108>)
 8002830:	f00e f919 	bl	8010a66 <memset>
		DisplayedCharIndex = 0;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <getCMD+0x120>)
 8002836:	2200      	movs	r2, #0
 8002838:	801a      	strh	r2, [r3, #0]
	{
 800283a:	e00b      	b.n	8002854 <getCMD+0xf8>

	}
	else if ((strlen(USBRXArray) > 0) && (NewLineIndex == 0))
 800283c:	4b09      	ldr	r3, [pc, #36]	; (8002864 <getCMD+0x108>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <getCMD+0xf8>
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <getCMD+0xf8>
	{
//		memcpy(&USBRXArray[0],&USBRXArray[2],2);
		memset(&USBRXArray,0,2);
 800284a:	2202      	movs	r2, #2
 800284c:	2100      	movs	r1, #0
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <getCMD+0x108>)
 8002850:	f00e f909 	bl	8010a66 <memset>
	}
	HAL_UART_DMAResume(&huart2);
 8002854:	4804      	ldr	r0, [pc, #16]	; (8002868 <getCMD+0x10c>)
 8002856:	f008 ffb1 	bl	800b7bc <HAL_UART_DMAResume>
	//
}
 800285a:	bf00      	nop
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	bf00      	nop
 8002864:	200002e8 	.word	0x200002e8
 8002868:	200054a4 	.word	0x200054a4
 800286c:	200006e8 	.word	0x200006e8
 8002870:	08014540 	.word	0x08014540
 8002874:	08014544 	.word	0x08014544
 8002878:	200007e8 	.word	0x200007e8
 800287c:	200002e4 	.word	0x200002e4

08002880 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
FATFS SDFatFS;
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8002884:	4904      	ldr	r1, [pc, #16]	; (8002898 <MX_FATFS_Init+0x18>)
 8002886:	4805      	ldr	r0, [pc, #20]	; (800289c <MX_FATFS_Init+0x1c>)
 8002888:	f00d ffe2 	bl	8010850 <FATFS_LinkDriver>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <MX_FATFS_Init+0x20>)
 8002892:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20001fe8 	.word	0x20001fe8
 800289c:	20000050 	.word	0x20000050
 80028a0:	20001fec 	.word	0x20001fec

080028a4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80028a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	0000      	movs	r0, r0
	...

080028b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 80028be:	b085      	sub	sp, #20
 80028c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028c2:	f001 fddc 	bl	800447e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028c6:	f000 f9e5 	bl	8002c94 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028ca:	f000 fe55 	bl	8003578 <MX_GPIO_Init>
  MX_DMA_Init();
 80028ce:	f000 fe2d 	bl	800352c <MX_DMA_Init>
  MX_TIM4_Init();
 80028d2:	f000 fd21 	bl	8003318 <MX_TIM4_Init>
  MX_TIM1_Init();
 80028d6:	f000 fc05 	bl	80030e4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80028da:	f000 fdf3 	bl	80034c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80028de:	f000 fad3 	bl	8002e88 <MX_I2C1_Init>
  MX_FATFS_Init();
 80028e2:	f7ff ffcd 	bl	8002880 <MX_FATFS_Init>
  MX_QUADSPI_Init();
 80028e6:	f000 fb0f 	bl	8002f08 <MX_QUADSPI_Init>
  MX_SDMMC1_MMC_Init();
 80028ea:	f000 fb97 	bl	800301c <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 80028ee:	f000 fbbb 	bl	8003068 <MX_SPI1_Init>
  MX_ADC1_Init();
 80028f2:	f000 fa77 	bl	8002de4 <MX_ADC1_Init>
  MX_RTC_Init();
 80028f6:	f000 fb33 	bl	8002f60 <MX_RTC_Init>
  MX_TIM2_Init();
 80028fa:	f000 fcb1 	bl	8003260 <MX_TIM2_Init>
  MX_UART5_Init();
 80028fe:	f000 fdad 	bl	800345c <MX_UART5_Init>
  MX_UART4_Init();
 8002902:	f000 fd7b 	bl	80033fc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim1); // PWM Generation Servos
 8002906:	48c0      	ldr	r0, [pc, #768]	; (8002c08 <main+0x350>)
 8002908:	f007 fbde 	bl	800a0c8 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Init(&htim4); // LED
 800290c:	48bf      	ldr	r0, [pc, #764]	; (8002c0c <main+0x354>)
 800290e:	f007 fbdb 	bl	800a0c8 <HAL_TIM_PWM_Init>
  HAL_ADC_Start(&hadc1);    // Battery
 8002912:	48bf      	ldr	r0, [pc, #764]	; (8002c10 <main+0x358>)
 8002914:	f001 fe76 	bl	8004604 <HAL_ADC_Start>
  //
  //	MS56XXInit();

  //	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET); 	// QSPI CS Low
  //	HAL_Delay(15);
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); // QSPI WP High
 8002918:	2201      	movs	r2, #1
 800291a:	2104      	movs	r1, #4
 800291c:	48bd      	ldr	r0, [pc, #756]	; (8002c14 <main+0x35c>)
 800291e:	f003 fab5 	bl	8005e8c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002922:	2001      	movs	r0, #1
 8002924:	f001 fe08 	bl	8004538 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // QSPI RST High
 8002928:	2200      	movs	r2, #0
 800292a:	2102      	movs	r1, #2
 800292c:	48ba      	ldr	r0, [pc, #744]	; (8002c18 <main+0x360>)
 800292e:	f003 faad 	bl	8005e8c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8002932:	2001      	movs	r0, #1
 8002934:	f001 fe00 	bl	8004538 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // QSPI RST High
 8002938:	2201      	movs	r2, #1
 800293a:	2102      	movs	r1, #2
 800293c:	48b6      	ldr	r0, [pc, #728]	; (8002c18 <main+0x360>)
 800293e:	f003 faa5 	bl	8005e8c <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8002942:	2002      	movs	r0, #2
 8002944:	f001 fdf8 	bl	8004538 <HAL_Delay>

  QSPI_Init();
 8002948:	f7fe f842 	bl	80009d0 <QSPI_Init>
//  Flash example
  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 800294c:	4bb3      	ldr	r3, [pc, #716]	; (8002c1c <main+0x364>)
 800294e:	4ab4      	ldr	r2, [pc, #720]	; (8002c20 <main+0x368>)
 8002950:	49b4      	ldr	r1, [pc, #720]	; (8002c24 <main+0x36c>)
 8002952:	48b5      	ldr	r0, [pc, #724]	; (8002c28 <main+0x370>)
 8002954:	f7fe fa24 	bl	8000da0 <QSPI_Read_Status_registers>
  RR2 = 0x22;
 8002958:	4bb1      	ldr	r3, [pc, #708]	; (8002c20 <main+0x368>)
 800295a:	2222      	movs	r2, #34	; 0x22
 800295c:	801a      	strh	r2, [r3, #0]
  RR3 = 0x60;
 800295e:	4baf      	ldr	r3, [pc, #700]	; (8002c1c <main+0x364>)
 8002960:	2260      	movs	r2, #96	; 0x60
 8002962:	801a      	strh	r2, [r3, #0]
  QSPI_Reset_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 8002964:	4bad      	ldr	r3, [pc, #692]	; (8002c1c <main+0x364>)
 8002966:	4aae      	ldr	r2, [pc, #696]	; (8002c20 <main+0x368>)
 8002968:	49ae      	ldr	r1, [pc, #696]	; (8002c24 <main+0x36c>)
 800296a:	48af      	ldr	r0, [pc, #700]	; (8002c28 <main+0x370>)
 800296c:	f7fe fac0 	bl	8000ef0 <QSPI_Reset_Status_registers>
  HAL_Delay(40);
 8002970:	2028      	movs	r0, #40	; 0x28
 8002972:	f001 fde1 	bl	8004538 <HAL_Delay>
  QSPI_READMD(&MID, &DID);
 8002976:	49ad      	ldr	r1, [pc, #692]	; (8002c2c <main+0x374>)
 8002978:	48ad      	ldr	r0, [pc, #692]	; (8002c30 <main+0x378>)
 800297a:	f7fe f997 	bl	8000cac <QSPI_READMD>

  QSPI_Read_Status_registers(&hqspi, &RR1, &RR2, &RR3);
 800297e:	4ba7      	ldr	r3, [pc, #668]	; (8002c1c <main+0x364>)
 8002980:	4aa7      	ldr	r2, [pc, #668]	; (8002c20 <main+0x368>)
 8002982:	49a8      	ldr	r1, [pc, #672]	; (8002c24 <main+0x36c>)
 8002984:	48a8      	ldr	r0, [pc, #672]	; (8002c28 <main+0x370>)
 8002986:	f7fe fa0b 	bl	8000da0 <QSPI_Read_Status_registers>
  do
  {
    HAL_Delay(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f001 fdd4 	bl	8004538 <HAL_Delay>
    FS_ret2 = f_mount(&USERFatFS, "\\", 0);
 8002990:	2200      	movs	r2, #0
 8002992:	49a8      	ldr	r1, [pc, #672]	; (8002c34 <main+0x37c>)
 8002994:	48a8      	ldr	r0, [pc, #672]	; (8002c38 <main+0x380>)
 8002996:	f00c fc1d 	bl	800f1d4 <f_mount>
 800299a:	4603      	mov	r3, r0
 800299c:	461a      	mov	r2, r3
 800299e:	4ba7      	ldr	r3, [pc, #668]	; (8002c3c <main+0x384>)
 80029a0:	701a      	strb	r2, [r3, #0]
  } while (FS_ret2 != FR_OK);
 80029a2:	4ba6      	ldr	r3, [pc, #664]	; (8002c3c <main+0x384>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1ef      	bne.n	800298a <main+0xd2>

  DWORD free_clusters, free_sectors, total_sectors;

  FATFS *getFreeFs;
  uint8_t buffer[_MAX_SS];
  FS_ret2 = f_getfree("\\", &free_clusters, &getFreeFs);
 80029aa:	f241 0204 	movw	r2, #4100	; 0x1004
 80029ae:	443a      	add	r2, r7
 80029b0:	f241 0308 	movw	r3, #4104	; 0x1008
 80029b4:	443b      	add	r3, r7
 80029b6:	4619      	mov	r1, r3
 80029b8:	489e      	ldr	r0, [pc, #632]	; (8002c34 <main+0x37c>)
 80029ba:	f00d fa1b 	bl	800fdf4 <f_getfree>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b9e      	ldr	r3, [pc, #632]	; (8002c3c <main+0x384>)
 80029c4:	701a      	strb	r2, [r3, #0]
  if (FS_ret2 != FR_OK)
 80029c6:	4b9d      	ldr	r3, [pc, #628]	; (8002c3c <main+0x384>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <main+0x138>
  {
    FS_ret2 = f_mkfs("\\", FM_FAT, 0, buffer, sizeof(buffer));
 80029ce:	4b9c      	ldr	r3, [pc, #624]	; (8002c40 <main+0x388>)
 80029d0:	f241 0248 	movw	r2, #4168	; 0x1048
 80029d4:	443a      	add	r2, r7
 80029d6:	4413      	add	r3, r2
 80029d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029dc:	9200      	str	r2, [sp, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	2101      	movs	r1, #1
 80029e2:	4894      	ldr	r0, [pc, #592]	; (8002c34 <main+0x37c>)
 80029e4:	f00d fabc 	bl	800ff60 <f_mkfs>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	4b93      	ldr	r3, [pc, #588]	; (8002c3c <main+0x384>)
 80029ee:	701a      	strb	r2, [r3, #0]
  }

  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80029f0:	f241 0304 	movw	r3, #4100	; 0x1004
 80029f4:	443b      	add	r3, r7
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	3b02      	subs	r3, #2
 80029fc:	f241 0204 	movw	r2, #4100	; 0x1004
 8002a00:	443a      	add	r2, r7
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	8952      	ldrh	r2, [r2, #10]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	f241 0244 	movw	r2, #4164	; 0x1044
 8002a0e:	443a      	add	r2, r7
 8002a10:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 8002a12:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a16:	443b      	add	r3, r7
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	895b      	ldrh	r3, [r3, #10]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f241 0308 	movw	r3, #4104	; 0x1008
 8002a22:	443b      	add	r3, r7
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	fb03 f302 	mul.w	r3, r3, r2
 8002a2a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002a2e:	6013      	str	r3, [r2, #0]

  vBat = measureBattery();
 8002a30:	f000 fea6 	bl	8003780 <measureBattery>
 8002a34:	eeb0 7b40 	vmov.f64	d7, d0
 8002a38:	4b82      	ldr	r3, [pc, #520]	; (8002c44 <main+0x38c>)
 8002a3a:	ed83 7b00 	vstr	d7, [r3]
  MS56XXInit();
 8002a3e:	f7ff f9f3 	bl	8001e28 <MS56XXInit>
  BNOInit();
 8002a42:	f7ff f92f 	bl	8001ca4 <BNOInit>
  led_init();
 8002a46:	f7fe fba9 	bl	800119c <led_init>
  SetRGB(0, 250, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	21fa      	movs	r1, #250	; 0xfa
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fe fbb6 	bl	80011c0 <SetRGB>
//  Write Data to terminal - Example
//  ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);

//  HAL_UART_Receive_DMA(&huart5, UART5RXArray, 150);
//  NumberOfByteRet = CheckDataFromUART();
  LastBLERead = HAL_GetTick();
 8002a54:	f001 fd64 	bl	8004520 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b7b      	ldr	r3, [pc, #492]	; (8002c48 <main+0x390>)
 8002a5c:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 8002a5e:	2064      	movs	r0, #100	; 0x64
 8002a60:	f001 fd6a 	bl	8004538 <HAL_Delay>
//  *(volatile uint32_t *)0xbadcafe;

  start_pwm1(PWMValue); // Control Servo
 8002a64:	4b79      	ldr	r3, [pc, #484]	; (8002c4c <main+0x394>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fdd1 	bl	8000610 <start_pwm1>
  start_pwm2(FinalPower * 80);   // Control Car Motor
 8002a6e:	4b78      	ldr	r3, [pc, #480]	; (8002c50 <main+0x398>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	461a      	mov	r2, r3
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fdfb 	bl	8000678 <start_pwm2>
  start_pwm3();
 8002a82:	f7fd fe0d 	bl	80006a0 <start_pwm3>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readBNOAnglesDeg();
 8002a86:	f7ff f939 	bl	8001cfc <readBNOAnglesDeg>
//	  }
//	  sprintf(USBTXArray, "%6.3f, Roll: %6.3f, Pitch: %6.3f, Yaw: %6.3f\r\n",
//			  CurrentTime(), Roll, Pitch, Yaw);
//	  SendToScreen();

	  MS56XXCyclicRead();
 8002a8a:	f7ff fb6d 	bl	8002168 <MS56XXCyclicRead>
	  if (isNewMS56XXDataAvailable)
 8002a8e:	4b71      	ldr	r3, [pc, #452]	; (8002c54 <main+0x39c>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <main+0x212>
	  {
		  sprintf(USBTXArray, "%6.3f, Pressure: %d, Temp: %d\r\n",
 8002a96:	f000 fe5b 	bl	8003750 <CurrentTime>
 8002a9a:	ec51 0b10 	vmov	r0, r1, d0
 8002a9e:	4b6e      	ldr	r3, [pc, #440]	; (8002c58 <main+0x3a0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <main+0x3a4>)
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	9201      	str	r2, [sp, #4]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	496c      	ldr	r1, [pc, #432]	; (8002c60 <main+0x3a8>)
 8002ab0:	486c      	ldr	r0, [pc, #432]	; (8002c64 <main+0x3ac>)
 8002ab2:	f00e fdf7 	bl	80116a4 <siprintf>
				  CurrentTime(), P, TEMP);
		  Print(false, true, isDebugMode);
 8002ab6:	4b6c      	ldr	r3, [pc, #432]	; (8002c68 <main+0x3b0>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	2101      	movs	r1, #1
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7ff fdd0 	bl	8002664 <Print>
		  isNewMS56XXDataAvailable = false;
 8002ac4:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <main+0x39c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
	  }

    CheckButton();
 8002aca:	f7fd fe51 	bl	8000770 <CheckButton>
//	  HAL_RTCEx_GetTimeStamp(&hrtc, &ReadTime, &LocalDate, FORMAT_BIN);

//	  MeasuredRPM = RPMMeasurement();
//    LastRPMCycle++;
//    sprintf(UART5TXArray, "%d\r\n",LastRPMCycle);
    if (HAL_GetTick() - LastTerminalRead >= 100)
 8002ace:	f001 fd27 	bl	8004520 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b65      	ldr	r3, [pc, #404]	; (8002c6c <main+0x3b4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b63      	cmp	r3, #99	; 0x63
 8002adc:	d906      	bls.n	8002aec <main+0x234>
    {
        getCMD();
 8002ade:	f7ff fe3d 	bl	800275c <getCMD>
        LastTerminalRead = HAL_GetTick();
 8002ae2:	f001 fd1d 	bl	8004520 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b60      	ldr	r3, [pc, #384]	; (8002c6c <main+0x3b4>)
 8002aea:	601a      	str	r2, [r3, #0]
//    	//			  sprintf(USBTXArray,"%6.3f, Angle: %d, Power: %d ret: %d \r\n",CurrentTime(), CurrentAngle, CurrentPower, ret);
//    	//			  SendToScreen(false);
//    	sprintf(USBTXArray,"%6.3f, FAngle: %d, FPower: %d ret: %d \r\n",CurrentTime(), FinalAngle, FinalPower, ret);
//    	SendToScreen(false);
//    }
    PWMValue = 1000 * ((2 - 1) * (double)FinalAngle / (135.0 - 45.0) + 0.5);
 8002aec:	4b60      	ldr	r3, [pc, #384]	; (8002c70 <main+0x3b8>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8002af8:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8002bf8 <main+0x340>
 8002afc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b00:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002b04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b08:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8002c00 <main+0x348>
 8002b0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002b14:	ee17 2a90 	vmov	r2, s15
 8002b18:	4b4c      	ldr	r3, [pc, #304]	; (8002c4c <main+0x394>)
 8002b1a:	601a      	str	r2, [r3, #0]
    set_pwm1(PWMValue);
 8002b1c:	4b4b      	ldr	r3, [pc, #300]	; (8002c4c <main+0x394>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fd91 	bl	8000648 <set_pwm1>
    start_pwm2(FinalPower * 80);   // Control Car Motor
 8002b26:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <main+0x398>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fd9f 	bl	8000678 <start_pwm2>

    if (HAL_GetTick() - LastRPMCycle >= 1000)
 8002b3a:	f001 fcf1 	bl	8004520 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b4c      	ldr	r3, [pc, #304]	; (8002c74 <main+0x3bc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4a:	d315      	bcc.n	8002b78 <main+0x2c0>
    {
    	LastRPMCycle = HAL_GetTick();
 8002b4c:	f001 fce8 	bl	8004520 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b48      	ldr	r3, [pc, #288]	; (8002c74 <main+0x3bc>)
 8002b54:	601a      	str	r2, [r3, #0]
    	sprintf(USBTXArray, "%6.3f, \r\n",CurrentTime());
 8002b56:	f000 fdfb 	bl	8003750 <CurrentTime>
 8002b5a:	ec54 3b10 	vmov	r3, r4, d0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	4945      	ldr	r1, [pc, #276]	; (8002c78 <main+0x3c0>)
 8002b64:	483f      	ldr	r0, [pc, #252]	; (8002c64 <main+0x3ac>)
 8002b66:	f00e fd9d 	bl	80116a4 <siprintf>
    	Print(false, true, isDebugMode);
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <main+0x3b0>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2101      	movs	r1, #1
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7ff fd76 	bl	8002664 <Print>
//    	FS_ret2 = f_sync(&USERFile);
    }

    if (HAL_GetTick() - LastBatteryMeasurement > 5 * 60 * 1000)
 8002b78:	f001 fcd2 	bl	8004520 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <main+0x3c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	4a3e      	ldr	r2, [pc, #248]	; (8002c80 <main+0x3c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d90b      	bls.n	8002ba2 <main+0x2ea>
    {
    	LastBatteryMeasurement = HAL_GetTick();
 8002b8a:	f001 fcc9 	bl	8004520 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <main+0x3c4>)
 8002b92:	601a      	str	r2, [r3, #0]
    	vBat = measureBattery();
 8002b94:	f000 fdf4 	bl	8003780 <measureBattery>
 8002b98:	eeb0 7b40 	vmov.f64	d7, d0
 8002b9c:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <main+0x38c>)
 8002b9e:	ed83 7b00 	vstr	d7, [r3]
    }
    ShowStateLED();
 8002ba2:	f7fe fb45 	bl	8001230 <ShowStateLED>
    if (HAL_GetTick() - LastDiffPrint > 100)
 8002ba6:	f001 fcbb 	bl	8004520 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b35      	ldr	r3, [pc, #212]	; (8002c84 <main+0x3cc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	f67f af67 	bls.w	8002a86 <main+0x1ce>
    {
    	sprintf(USBTXArray, "%6.3f, Difference: %d [mSec], Frequency: %d [Hz] \r\n",CurrentTime(), Difference * 10 / 4, Frequency);
 8002bb8:	f000 fdca 	bl	8003750 <CurrentTime>
 8002bbc:	ec51 0b10 	vmov	r0, r1, d0
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <main+0x3d0>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	4a2f      	ldr	r2, [pc, #188]	; (8002c8c <main+0x3d4>)
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	9201      	str	r2, [sp, #4]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	492d      	ldr	r1, [pc, #180]	; (8002c90 <main+0x3d8>)
 8002bdc:	4821      	ldr	r0, [pc, #132]	; (8002c64 <main+0x3ac>)
 8002bde:	f00e fd61 	bl	80116a4 <siprintf>
    	Print(false, false, true);
 8002be2:	2201      	movs	r2, #1
 8002be4:	2100      	movs	r1, #0
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7ff fd3c 	bl	8002664 <Print>
    	LastDiffPrint = HAL_GetTick();
 8002bec:	f001 fc98 	bl	8004520 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <main+0x3cc>)
 8002bf4:	601a      	str	r2, [r3, #0]
	  readBNOAnglesDeg();
 8002bf6:	e746      	b.n	8002a86 <main+0x1ce>
 8002bf8:	00000000 	.word	0x00000000
 8002bfc:	40568000 	.word	0x40568000
 8002c00:	00000000 	.word	0x00000000
 8002c04:	408f4000 	.word	0x408f4000
 8002c08:	20005340 	.word	0x20005340
 8002c0c:	200050e8 	.word	0x200050e8
 8002c10:	200052c0 	.word	0x200052c0
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40020000 	.word	0x40020000
 8002c1c:	20001c16 	.word	0x20001c16
 8002c20:	20001c14 	.word	0x20001c14
 8002c24:	20001c12 	.word	0x20001c12
 8002c28:	200055a0 	.word	0x200055a0
 8002c2c:	20001c35 	.word	0x20001c35
 8002c30:	20001c34 	.word	0x20001c34
 8002c34:	08014568 	.word	0x08014568
 8002c38:	20004054 	.word	0x20004054
 8002c3c:	20001fac 	.word	0x20001fac
 8002c40:	ffffefbc 	.word	0xffffefbc
 8002c44:	20001c08 	.word	0x20001c08
 8002c48:	20001c1c 	.word	0x20001c1c
 8002c4c:	20001c30 	.word	0x20001c30
 8002c50:	20001c36 	.word	0x20001c36
 8002c54:	200002b0 	.word	0x200002b0
 8002c58:	200002e0 	.word	0x200002e0
 8002c5c:	200002cc 	.word	0x200002cc
 8002c60:	0801456c 	.word	0x0801456c
 8002c64:	200007e8 	.word	0x200007e8
 8002c68:	20001c11 	.word	0x20001c11
 8002c6c:	20001c20 	.word	0x20001c20
 8002c70:	20000044 	.word	0x20000044
 8002c74:	20001c18 	.word	0x20001c18
 8002c78:	0801458c 	.word	0x0801458c
 8002c7c:	20001c28 	.word	0x20001c28
 8002c80:	000493e0 	.word	0x000493e0
 8002c84:	20001c2c 	.word	0x20001c2c
 8002c88:	20000264 	.word	0x20000264
 8002c8c:	20000268 	.word	0x20000268
 8002c90:	08014598 	.word	0x08014598

08002c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b0b8      	sub	sp, #224	; 0xe0
 8002c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002c9e:	2234      	movs	r2, #52	; 0x34
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f00d fedf 	bl	8010a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb8:	f107 0308 	add.w	r3, r7, #8
 8002cbc:	2290      	movs	r2, #144	; 0x90
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f00d fed0 	bl	8010a66 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002cc6:	f004 f923 	bl	8006f10 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <SystemClock_Config+0x140>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a41      	ldr	r2, [pc, #260]	; (8002dd4 <SystemClock_Config+0x140>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <SystemClock_Config+0x140>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce2:	4b3d      	ldr	r3, [pc, #244]	; (8002dd8 <SystemClock_Config+0x144>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a3c      	ldr	r2, [pc, #240]	; (8002dd8 <SystemClock_Config+0x144>)
 8002ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <SystemClock_Config+0x144>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002d16:	2319      	movs	r3, #25
 8002d18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002d1c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d24:	2302      	movs	r3, #2
 8002d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002d2a:	2309      	movs	r3, #9
 8002d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d34:	4618      	mov	r0, r3
 8002d36:	f004 ffeb 	bl	8007d10 <HAL_RCC_OscConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002d40:	f000 fd44 	bl	80037cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d44:	f004 f90c 	bl	8006f60 <HAL_PWREx_EnableOverDrive>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002d4e:	f000 fd3d 	bl	80037cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d52:	230f      	movs	r3, #15
 8002d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002d74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d78:	2107      	movs	r1, #7
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f005 fa76 	bl	800826c <HAL_RCC_ClockConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002d86:	f000 fd21 	bl	80037cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <SystemClock_Config+0x148>)
 8002d8c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002d8e:	4b14      	ldr	r3, [pc, #80]	; (8002de0 <SystemClock_Config+0x14c>)
 8002d90:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002d96:	2300      	movs	r3, #0
 8002d98:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8002dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db2:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db4:	f107 0308 	add.w	r3, r7, #8
 8002db8:	4618      	mov	r0, r3
 8002dba:	f005 fc55 	bl	8008668 <HAL_RCCEx_PeriphCLKConfig>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8002dc4:	f000 fd02 	bl	80037cc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002dc8:	f005 fb3c 	bl	8008444 <HAL_RCC_EnableCSS>
}
 8002dcc:	bf00      	nop
 8002dce:	37e0      	adds	r7, #224	; 0xe0
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	00a046b0 	.word	0x00a046b0
 8002de0:	00190300 	.word	0x00190300

08002de4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dea:	463b      	mov	r3, r7
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002df6:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <MX_ADC1_Init+0x9c>)
 8002dfa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002dfc:	4b1f      	ldr	r3, [pc, #124]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002dfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <MX_ADC1_Init+0xa0>)
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002e30:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e44:	480d      	ldr	r0, [pc, #52]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e46:	f001 fb99 	bl	800457c <HAL_ADC_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002e50:	f000 fcbc 	bl	80037cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002e54:	230d      	movs	r3, #13
 8002e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e60:	463b      	mov	r3, r7
 8002e62:	4619      	mov	r1, r3
 8002e64:	4805      	ldr	r0, [pc, #20]	; (8002e7c <MX_ADC1_Init+0x98>)
 8002e66:	f001 fdf9 	bl	8004a5c <HAL_ADC_ConfigChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002e70:	f000 fcac 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200052c0 	.word	0x200052c0
 8002e80:	40012000 	.word	0x40012000
 8002e84:	0f000001 	.word	0x0f000001

08002e88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <MX_I2C1_Init+0x74>)
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	; (8002f00 <MX_I2C1_Init+0x78>)
 8002e90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8002e92:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <MX_I2C1_Init+0x74>)
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <MX_I2C1_Init+0x7c>)
 8002e96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 8002e98:	4b18      	ldr	r3, [pc, #96]	; (8002efc <MX_I2C1_Init+0x74>)
 8002e9a:	2252      	movs	r2, #82	; 0x52
 8002e9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e9e:	4b17      	ldr	r3, [pc, #92]	; (8002efc <MX_I2C1_Init+0x74>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <MX_I2C1_Init+0x74>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <MX_I2C1_Init+0x74>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <MX_I2C1_Init+0x74>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <MX_I2C1_Init+0x74>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <MX_I2C1_Init+0x74>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ec2:	480e      	ldr	r0, [pc, #56]	; (8002efc <MX_I2C1_Init+0x74>)
 8002ec4:	f002 fffc 	bl	8005ec0 <HAL_I2C_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ece:	f000 fc7d 	bl	80037cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4809      	ldr	r0, [pc, #36]	; (8002efc <MX_I2C1_Init+0x74>)
 8002ed6:	f003 fc67 	bl	80067a8 <HAL_I2CEx_ConfigAnalogFilter>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ee0:	f000 fc74 	bl	80037cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4805      	ldr	r0, [pc, #20]	; (8002efc <MX_I2C1_Init+0x74>)
 8002ee8:	f003 fca9 	bl	800683e <HAL_I2CEx_ConfigDigitalFilter>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ef2:	f000 fc6b 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20005128 	.word	0x20005128
 8002f00:	40005400 	.word	0x40005400
 8002f04:	6000030d 	.word	0x6000030d

08002f08 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <MX_QUADSPI_Init+0x54>)
 8002f10:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f20:	2210      	movs	r2, #16
 8002f22:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f26:	2217      	movs	r2, #23
 8002f28:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002f42:	4805      	ldr	r0, [pc, #20]	; (8002f58 <MX_QUADSPI_Init+0x50>)
 8002f44:	f004 f85c 	bl	8007000 <HAL_QSPI_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002f4e:	f000 fc3d 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200055a0 	.word	0x200055a0
 8002f5c:	a0001000 	.word	0xa0001000

08002f60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b088      	sub	sp, #32
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f66:	f107 0308 	add.w	r3, r7, #8
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	611a      	str	r2, [r3, #16]
 8002f76:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8002f78:	2300      	movs	r3, #0
 8002f7a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <MX_RTC_Init+0xb4>)
 8002f7e:	4a26      	ldr	r2, [pc, #152]	; (8003018 <MX_RTC_Init+0xb8>)
 8002f80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <MX_RTC_Init+0xb4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 99;
 8002f88:	4b22      	ldr	r3, [pc, #136]	; (8003014 <MX_RTC_Init+0xb4>)
 8002f8a:	2263      	movs	r2, #99	; 0x63
 8002f8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 9999;
 8002f8e:	4b21      	ldr	r3, [pc, #132]	; (8003014 <MX_RTC_Init+0xb4>)
 8002f90:	f242 720f 	movw	r2, #9999	; 0x270f
 8002f94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f96:	4b1f      	ldr	r3, [pc, #124]	; (8003014 <MX_RTC_Init+0xb4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <MX_RTC_Init+0xb4>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <MX_RTC_Init+0xb4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002fa8:	481a      	ldr	r0, [pc, #104]	; (8003014 <MX_RTC_Init+0xb4>)
 8002faa:	f005 ff83 	bl	8008eb4 <HAL_RTC_Init>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002fb4:	f000 fc0a 	bl	80037cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	480f      	ldr	r0, [pc, #60]	; (8003014 <MX_RTC_Init+0xb4>)
 8002fd6:	f005 ffe9 	bl	8008fac <HAL_RTC_SetTime>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002fe0:	f000 fbf4 	bl	80037cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8002fec:	2301      	movs	r3, #1
 8002fee:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 20;
 8002ff0:	2314      	movs	r3, #20
 8002ff2:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4806      	ldr	r0, [pc, #24]	; (8003014 <MX_RTC_Init+0xb4>)
 8002ffc:	f006 f894 	bl	8009128 <HAL_RTC_SetDate>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003006:	f000 fbe1 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800300a:	bf00      	nop
 800300c:	3720      	adds	r7, #32
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20005308 	.word	0x20005308
 8003018:	40002800 	.word	0x40002800

0800301c <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <MX_SDMMC1_MMC_Init+0x44>)
 8003022:	4a10      	ldr	r2, [pc, #64]	; (8003064 <MX_SDMMC1_MMC_Init+0x48>)
 8003024:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <MX_SDMMC1_MMC_Init+0x44>)
 8003028:	2200      	movs	r2, #0
 800302a:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800302c:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <MX_SDMMC1_MMC_Init+0x44>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003032:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <MX_SDMMC1_MMC_Init+0x44>)
 8003034:	2200      	movs	r2, #0
 8003036:	60da      	str	r2, [r3, #12]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003038:	4b09      	ldr	r3, [pc, #36]	; (8003060 <MX_SDMMC1_MMC_Init+0x44>)
 800303a:	2200      	movs	r2, #0
 800303c:	611a      	str	r2, [r3, #16]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800303e:	4b08      	ldr	r3, [pc, #32]	; (8003060 <MX_SDMMC1_MMC_Init+0x44>)
 8003040:	2200      	movs	r2, #0
 8003042:	615a      	str	r2, [r3, #20]
  hmmc1.Init.ClockDiv = 0;
 8003044:	4b06      	ldr	r3, [pc, #24]	; (8003060 <MX_SDMMC1_MMC_Init+0x44>)
 8003046:	2200      	movs	r2, #0
 8003048:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 800304a:	4805      	ldr	r0, [pc, #20]	; (8003060 <MX_SDMMC1_MMC_Init+0x44>)
 800304c:	f003 fc43 	bl	80068d6 <HAL_MMC_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_SDMMC1_MMC_Init+0x3e>
  {
    Error_Handler();
 8003056:	f000 fbb9 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20005174 	.word	0x20005174
 8003064:	40012c00 	.word	0x40012c00

08003068 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800306c:	4b1b      	ldr	r3, [pc, #108]	; (80030dc <MX_SPI1_Init+0x74>)
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <MX_SPI1_Init+0x78>)
 8003070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003072:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <MX_SPI1_Init+0x74>)
 8003074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800307a:	4b18      	ldr	r3, [pc, #96]	; (80030dc <MX_SPI1_Init+0x74>)
 800307c:	2200      	movs	r2, #0
 800307e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <MX_SPI1_Init+0x74>)
 8003082:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003086:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <MX_SPI1_Init+0x74>)
 800308a:	2200      	movs	r2, #0
 800308c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <MX_SPI1_Init+0x74>)
 8003090:	2200      	movs	r2, #0
 8003092:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <MX_SPI1_Init+0x74>)
 8003096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800309a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <MX_SPI1_Init+0x74>)
 800309e:	2220      	movs	r2, #32
 80030a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <MX_SPI1_Init+0x74>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <MX_SPI1_Init+0x74>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ae:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <MX_SPI1_Init+0x74>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <MX_SPI1_Init+0x74>)
 80030b6:	2207      	movs	r2, #7
 80030b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <MX_SPI1_Init+0x74>)
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80030c0:	4b06      	ldr	r3, [pc, #24]	; (80030dc <MX_SPI1_Init+0x74>)
 80030c2:	2208      	movs	r2, #8
 80030c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030c6:	4805      	ldr	r0, [pc, #20]	; (80030dc <MX_SPI1_Init+0x74>)
 80030c8:	f006 f948 	bl	800935c <HAL_SPI_Init>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80030d2:	f000 fb7b 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20005400 	.word	0x20005400
 80030e0:	40013000 	.word	0x40013000

080030e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b09a      	sub	sp, #104	; 0x68
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003104:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	611a      	str	r2, [r3, #16]
 8003114:	615a      	str	r2, [r3, #20]
 8003116:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	222c      	movs	r2, #44	; 0x2c
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f00d fca1 	bl	8010a66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003124:	4b4c      	ldr	r3, [pc, #304]	; (8003258 <MX_TIM1_Init+0x174>)
 8003126:	4a4d      	ldr	r2, [pc, #308]	; (800325c <MX_TIM1_Init+0x178>)
 8003128:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 800312a:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <MX_TIM1_Init+0x174>)
 800312c:	f240 221b 	movw	r2, #539	; 0x21b
 8003130:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003132:	4b49      	ldr	r3, [pc, #292]	; (8003258 <MX_TIM1_Init+0x174>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <MX_TIM1_Init+0x174>)
 800313a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800313e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003140:	4b45      	ldr	r3, [pc, #276]	; (8003258 <MX_TIM1_Init+0x174>)
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003146:	4b44      	ldr	r3, [pc, #272]	; (8003258 <MX_TIM1_Init+0x174>)
 8003148:	2200      	movs	r2, #0
 800314a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800314c:	4b42      	ldr	r3, [pc, #264]	; (8003258 <MX_TIM1_Init+0x174>)
 800314e:	2280      	movs	r2, #128	; 0x80
 8003150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003152:	4841      	ldr	r0, [pc, #260]	; (8003258 <MX_TIM1_Init+0x174>)
 8003154:	f007 f828 	bl	800a1a8 <HAL_TIM_IC_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800315e:	f000 fb35 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003162:	483d      	ldr	r0, [pc, #244]	; (8003258 <MX_TIM1_Init+0x174>)
 8003164:	f006 ffb0 	bl	800a0c8 <HAL_TIM_PWM_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800316e:	f000 fb2d 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003176:	2300      	movs	r3, #0
 8003178:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800317e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003182:	4619      	mov	r1, r3
 8003184:	4834      	ldr	r0, [pc, #208]	; (8003258 <MX_TIM1_Init+0x174>)
 8003186:	f008 f837 	bl	800b1f8 <HAL_TIMEx_MasterConfigSynchronization>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8003190:	f000 fb1c 	bl	80037cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003194:	230a      	movs	r3, #10
 8003196:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003198:	2301      	movs	r3, #1
 800319a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800319c:	2300      	movs	r3, #0
 800319e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80031a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031a8:	2200      	movs	r2, #0
 80031aa:	4619      	mov	r1, r3
 80031ac:	482a      	ldr	r0, [pc, #168]	; (8003258 <MX_TIM1_Init+0x174>)
 80031ae:	f007 f9b4 	bl	800a51a <HAL_TIM_IC_ConfigChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80031b8:	f000 fb08 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80031bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80031c0:	2208      	movs	r2, #8
 80031c2:	4619      	mov	r1, r3
 80031c4:	4824      	ldr	r0, [pc, #144]	; (8003258 <MX_TIM1_Init+0x174>)
 80031c6:	f007 f9a8 	bl	800a51a <HAL_TIM_IC_ConfigChannel>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80031d0:	f000 fafc 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031d4:	2360      	movs	r3, #96	; 0x60
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 600;
 80031d8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80031dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031de:	2300      	movs	r3, #0
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031f2:	220c      	movs	r2, #12
 80031f4:	4619      	mov	r1, r3
 80031f6:	4818      	ldr	r0, [pc, #96]	; (8003258 <MX_TIM1_Init+0x174>)
 80031f8:	f007 fa2c 	bl	800a654 <HAL_TIM_PWM_ConfigChannel>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8003202:	f000 fae3 	bl	80037cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800321a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800321e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003232:	2300      	movs	r3, #0
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4807      	ldr	r0, [pc, #28]	; (8003258 <MX_TIM1_Init+0x174>)
 800323c:	f008 f86a 	bl	800b314 <HAL_TIMEx_ConfigBreakDeadTime>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_TIM1_Init+0x166>
  {
    Error_Handler();
 8003246:	f000 fac1 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800324a:	4803      	ldr	r0, [pc, #12]	; (8003258 <MX_TIM1_Init+0x174>)
 800324c:	f000 fd64 	bl	8003d18 <HAL_TIM_MspPostInit>

}
 8003250:	bf00      	nop
 8003252:	3768      	adds	r7, #104	; 0x68
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20005340 	.word	0x20005340
 800325c:	40010000 	.word	0x40010000

08003260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08a      	sub	sp, #40	; 0x28
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003266:	f107 031c 	add.w	r3, r7, #28
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003272:	463b      	mov	r3, r7
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
 8003280:	615a      	str	r2, [r3, #20]
 8003282:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <MX_TIM2_Init+0xb4>)
 8003286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800328a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 539;
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <MX_TIM2_Init+0xb4>)
 800328e:	f240 221b 	movw	r2, #539	; 0x21b
 8003292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003294:	4b1f      	ldr	r3, [pc, #124]	; (8003314 <MX_TIM2_Init+0xb4>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <MX_TIM2_Init+0xb4>)
 800329c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80032a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <MX_TIM2_Init+0xb4>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <MX_TIM2_Init+0xb4>)
 80032aa:	2280      	movs	r2, #128	; 0x80
 80032ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032ae:	4819      	ldr	r0, [pc, #100]	; (8003314 <MX_TIM2_Init+0xb4>)
 80032b0:	f006 ff0a 	bl	800a0c8 <HAL_TIM_PWM_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80032ba:	f000 fa87 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c6:	f107 031c 	add.w	r3, r7, #28
 80032ca:	4619      	mov	r1, r3
 80032cc:	4811      	ldr	r0, [pc, #68]	; (8003314 <MX_TIM2_Init+0xb4>)
 80032ce:	f007 ff93 	bl	800b1f8 <HAL_TIMEx_MasterConfigSynchronization>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80032d8:	f000 fa78 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032dc:	2360      	movs	r3, #96	; 0x60
 80032de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 600;
 80032e0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80032e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032ee:	463b      	mov	r3, r7
 80032f0:	2200      	movs	r2, #0
 80032f2:	4619      	mov	r1, r3
 80032f4:	4807      	ldr	r0, [pc, #28]	; (8003314 <MX_TIM2_Init+0xb4>)
 80032f6:	f007 f9ad 	bl	800a654 <HAL_TIM_PWM_ConfigChannel>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8003300:	f000 fa64 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003304:	4803      	ldr	r0, [pc, #12]	; (8003314 <MX_TIM2_Init+0xb4>)
 8003306:	f000 fd07 	bl	8003d18 <HAL_TIM_MspPostInit>

}
 800330a:	bf00      	nop
 800330c:	3728      	adds	r7, #40	; 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20005464 	.word	0x20005464

08003318 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331e:	f107 031c 	add.w	r3, r7, #28
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800332a:	463b      	mov	r3, r7
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
 8003338:	615a      	str	r2, [r3, #20]
 800333a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <MX_TIM4_Init+0xdc>)
 800333e:	4a2e      	ldr	r2, [pc, #184]	; (80033f8 <MX_TIM4_Init+0xe0>)
 8003340:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <MX_TIM4_Init+0xdc>)
 8003344:	f240 221b 	movw	r2, #539	; 0x21b
 8003348:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <MX_TIM4_Init+0xdc>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <MX_TIM4_Init+0xdc>)
 8003352:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003356:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003358:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <MX_TIM4_Init+0xdc>)
 800335a:	2200      	movs	r2, #0
 800335c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800335e:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <MX_TIM4_Init+0xdc>)
 8003360:	2280      	movs	r2, #128	; 0x80
 8003362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003364:	4823      	ldr	r0, [pc, #140]	; (80033f4 <MX_TIM4_Init+0xdc>)
 8003366:	f006 feaf 	bl	800a0c8 <HAL_TIM_PWM_Init>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003370:	f000 fa2c 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003378:	2300      	movs	r3, #0
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	4619      	mov	r1, r3
 8003382:	481c      	ldr	r0, [pc, #112]	; (80033f4 <MX_TIM4_Init+0xdc>)
 8003384:	f007 ff38 	bl	800b1f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 800338e:	f000 fa1d 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003392:	2360      	movs	r3, #96	; 0x60
 8003394:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033a2:	463b      	mov	r3, r7
 80033a4:	2200      	movs	r2, #0
 80033a6:	4619      	mov	r1, r3
 80033a8:	4812      	ldr	r0, [pc, #72]	; (80033f4 <MX_TIM4_Init+0xdc>)
 80033aa:	f007 f953 	bl	800a654 <HAL_TIM_PWM_ConfigChannel>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80033b4:	f000 fa0a 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033b8:	463b      	mov	r3, r7
 80033ba:	2204      	movs	r2, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	480d      	ldr	r0, [pc, #52]	; (80033f4 <MX_TIM4_Init+0xdc>)
 80033c0:	f007 f948 	bl	800a654 <HAL_TIM_PWM_ConfigChannel>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80033ca:	f000 f9ff 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80033ce:	463b      	mov	r3, r7
 80033d0:	220c      	movs	r2, #12
 80033d2:	4619      	mov	r1, r3
 80033d4:	4807      	ldr	r0, [pc, #28]	; (80033f4 <MX_TIM4_Init+0xdc>)
 80033d6:	f007 f93d 	bl	800a654 <HAL_TIM_PWM_ConfigChannel>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 80033e0:	f000 f9f4 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80033e4:	4803      	ldr	r0, [pc, #12]	; (80033f4 <MX_TIM4_Init+0xdc>)
 80033e6:	f000 fc97 	bl	8003d18 <HAL_TIM_MspPostInit>

}
 80033ea:	bf00      	nop
 80033ec:	3728      	adds	r7, #40	; 0x28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200050e8 	.word	0x200050e8
 80033f8:	40000800 	.word	0x40000800

080033fc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <MX_UART4_Init+0x58>)
 8003402:	4a15      	ldr	r2, [pc, #84]	; (8003458 <MX_UART4_Init+0x5c>)
 8003404:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <MX_UART4_Init+0x58>)
 8003408:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800340c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800340e:	4b11      	ldr	r3, [pc, #68]	; (8003454 <MX_UART4_Init+0x58>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8003414:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <MX_UART4_Init+0x58>)
 8003416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800341a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <MX_UART4_Init+0x58>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003422:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <MX_UART4_Init+0x58>)
 8003424:	220c      	movs	r2, #12
 8003426:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <MX_UART4_Init+0x58>)
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <MX_UART4_Init+0x58>)
 8003430:	2200      	movs	r2, #0
 8003432:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <MX_UART4_Init+0x58>)
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <MX_UART4_Init+0x58>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003440:	4804      	ldr	r0, [pc, #16]	; (8003454 <MX_UART4_Init+0x58>)
 8003442:	f008 f803 	bl	800b44c <HAL_UART_Init>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <MX_UART4_Init+0x54>
  {
    Error_Handler();
 800344c:	f000 f9be 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003450:	bf00      	nop
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20005380 	.word	0x20005380
 8003458:	40004c00 	.word	0x40004c00

0800345c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <MX_UART5_Init+0x60>)
 8003462:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <MX_UART5_Init+0x64>)
 8003464:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <MX_UART5_Init+0x60>)
 8003468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800346c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800346e:	4b13      	ldr	r3, [pc, #76]	; (80034bc <MX_UART5_Init+0x60>)
 8003470:	2200      	movs	r2, #0
 8003472:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <MX_UART5_Init+0x60>)
 8003476:	2200      	movs	r2, #0
 8003478:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <MX_UART5_Init+0x60>)
 800347c:	2200      	movs	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <MX_UART5_Init+0x60>)
 8003482:	220c      	movs	r2, #12
 8003484:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <MX_UART5_Init+0x60>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_8;
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <MX_UART5_Init+0x60>)
 800348e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003492:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <MX_UART5_Init+0x60>)
 8003496:	2200      	movs	r2, #0
 8003498:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <MX_UART5_Init+0x60>)
 800349c:	2210      	movs	r2, #16
 800349e:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80034a0:	4b06      	ldr	r3, [pc, #24]	; (80034bc <MX_UART5_Init+0x60>)
 80034a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80034a8:	4804      	ldr	r0, [pc, #16]	; (80034bc <MX_UART5_Init+0x60>)
 80034aa:	f007 ffcf 	bl	800b44c <HAL_UART_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_UART5_Init+0x5c>
  {
    Error_Handler();
 80034b4:	f000 f98a 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20005238 	.word	0x20005238
 80034c0:	40005000 	.word	0x40005000

080034c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034c8:	4b16      	ldr	r3, [pc, #88]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034ca:	4a17      	ldr	r2, [pc, #92]	; (8003528 <MX_USART2_UART_Init+0x64>)
 80034cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80034d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034d6:	4b13      	ldr	r3, [pc, #76]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034d8:	2200      	movs	r2, #0
 80034da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034e2:	4b10      	ldr	r3, [pc, #64]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034ea:	220c      	movs	r2, #12
 80034ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <MX_USART2_UART_Init+0x60>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003500:	4b08      	ldr	r3, [pc, #32]	; (8003524 <MX_USART2_UART_Init+0x60>)
 8003502:	2210      	movs	r2, #16
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003506:	4b07      	ldr	r3, [pc, #28]	; (8003524 <MX_USART2_UART_Init+0x60>)
 8003508:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800350e:	4805      	ldr	r0, [pc, #20]	; (8003524 <MX_USART2_UART_Init+0x60>)
 8003510:	f007 ff9c 	bl	800b44c <HAL_UART_Init>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800351a:	f000 f957 	bl	80037cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	200054a4 	.word	0x200054a4
 8003528:	40004400 	.word	0x40004400

0800352c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <MX_DMA_Init+0x48>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a0f      	ldr	r2, [pc, #60]	; (8003574 <MX_DMA_Init+0x48>)
 8003538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <MX_DMA_Init+0x48>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	2100      	movs	r1, #0
 800354e:	200b      	movs	r0, #11
 8003550:	f001 fdad 	bl	80050ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003554:	200b      	movs	r0, #11
 8003556:	f001 fdc6 	bl	80050e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	2010      	movs	r0, #16
 8003560:	f001 fda5 	bl	80050ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003564:	2010      	movs	r0, #16
 8003566:	f001 fdbe 	bl	80050e6 <HAL_NVIC_EnableIRQ>

}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800

08003578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08c      	sub	sp, #48	; 0x30
 800357c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357e:	f107 031c 	add.w	r3, r7, #28
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800358e:	4b69      	ldr	r3, [pc, #420]	; (8003734 <MX_GPIO_Init+0x1bc>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a68      	ldr	r2, [pc, #416]	; (8003734 <MX_GPIO_Init+0x1bc>)
 8003594:	f043 0310 	orr.w	r3, r3, #16
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b66      	ldr	r3, [pc, #408]	; (8003734 <MX_GPIO_Init+0x1bc>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	61bb      	str	r3, [r7, #24]
 80035a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a6:	4b63      	ldr	r3, [pc, #396]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a62      	ldr	r2, [pc, #392]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b60      	ldr	r3, [pc, #384]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035be:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a5c      	ldr	r2, [pc, #368]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	4b57      	ldr	r3, [pc, #348]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a56      	ldr	r2, [pc, #344]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b54      	ldr	r3, [pc, #336]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	4b51      	ldr	r3, [pc, #324]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a50      	ldr	r2, [pc, #320]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035f4:	f043 0302 	orr.w	r3, r3, #2
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b4e      	ldr	r3, [pc, #312]	; (8003734 <MX_GPIO_Init+0x1bc>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003606:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <MX_GPIO_Init+0x1bc>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <MX_GPIO_Init+0x1bc>)
 800360c:	f043 0308 	orr.w	r3, r3, #8
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b48      	ldr	r3, [pc, #288]	; (8003734 <MX_GPIO_Init+0x1bc>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_WP_GPIO_Port, Flash_WP_Pin, GPIO_PIN_SET);
 800361e:	2201      	movs	r2, #1
 8003620:	2104      	movs	r1, #4
 8003622:	4845      	ldr	r0, [pc, #276]	; (8003738 <MX_GPIO_Init+0x1c0>)
 8003624:	f002 fc32 	bl	8005e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Flash_Reset_GPIO_Port, Flash_Reset_Pin, GPIO_PIN_SET);
 8003628:	2201      	movs	r2, #1
 800362a:	2102      	movs	r1, #2
 800362c:	4843      	ldr	r0, [pc, #268]	; (800373c <MX_GPIO_Init+0x1c4>)
 800362e:	f002 fc2d 	bl	8005e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS5611_CS_GPIO_Port, MS5611_CS_Pin, GPIO_PIN_RESET);
 8003632:	2200      	movs	r2, #0
 8003634:	2110      	movs	r1, #16
 8003636:	4841      	ldr	r0, [pc, #260]	; (800373c <MX_GPIO_Init+0x1c4>)
 8003638:	f002 fc28 	bl	8005e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Flash_WP_Pin */
  GPIO_InitStruct.Pin = Flash_WP_Pin;
 800363c:	2304      	movs	r3, #4
 800363e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003640:	2301      	movs	r3, #1
 8003642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003644:	2301      	movs	r3, #1
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_WP_GPIO_Port, &GPIO_InitStruct);
 800364c:	f107 031c 	add.w	r3, r7, #28
 8003650:	4619      	mov	r1, r3
 8003652:	4839      	ldr	r0, [pc, #228]	; (8003738 <MX_GPIO_Init+0x1c0>)
 8003654:	f002 fa58 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE3 PE4 PE5 PE6
                           PE9 PE10 PE11 PE12
                           PE13 PE14 PE15 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003658:	f64f 637b 	movw	r3, #65147	; 0xfe7b
 800365c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800365e:	2303      	movs	r3, #3
 8003660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003662:	2300      	movs	r3, #0
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003666:	f107 031c 	add.w	r3, r7, #28
 800366a:	4619      	mov	r1, r3
 800366c:	4832      	ldr	r0, [pc, #200]	; (8003738 <MX_GPIO_Init+0x1c0>)
 800366e:	f002 fa4b 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC4
                           PC5 PC6 PC7 PC9
                           PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003672:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8003676:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003678:	2303      	movs	r3, #3
 800367a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003680:	f107 031c 	add.w	r3, r7, #28
 8003684:	4619      	mov	r1, r3
 8003686:	482e      	ldr	r0, [pc, #184]	; (8003740 <MX_GPIO_Init+0x1c8>)
 8003688:	f002 fa3e 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800368c:	2301      	movs	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003690:	2300      	movs	r3, #0
 8003692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003694:	2301      	movs	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003698:	f107 031c 	add.w	r3, r7, #28
 800369c:	4619      	mov	r1, r3
 800369e:	4827      	ldr	r0, [pc, #156]	; (800373c <MX_GPIO_Init+0x1c4>)
 80036a0:	f002 fa32 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_Reset_Pin */
  GPIO_InitStruct.Pin = Flash_Reset_Pin;
 80036a4:	2302      	movs	r3, #2
 80036a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a8:	2301      	movs	r3, #1
 80036aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ac:	2301      	movs	r3, #1
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_Reset_GPIO_Port, &GPIO_InitStruct);
 80036b4:	f107 031c 	add.w	r3, r7, #28
 80036b8:	4619      	mov	r1, r3
 80036ba:	4820      	ldr	r0, [pc, #128]	; (800373c <MX_GPIO_Init+0x1c4>)
 80036bc:	f002 fa24 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MS5611_CS_Pin */
  GPIO_InitStruct.Pin = MS5611_CS_Pin;
 80036c0:	2310      	movs	r3, #16
 80036c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c4:	2301      	movs	r3, #1
 80036c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MS5611_CS_GPIO_Port, &GPIO_InitStruct);
 80036d0:	f107 031c 	add.w	r3, r7, #28
 80036d4:	4619      	mov	r1, r3
 80036d6:	4819      	ldr	r0, [pc, #100]	; (800373c <MX_GPIO_Init+0x1c4>)
 80036d8:	f002 fa16 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_12
 80036dc:	f249 23c0 	movw	r3, #37568	; 0x92c0
 80036e0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036e2:	2303      	movs	r3, #3
 80036e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ea:	f107 031c 	add.w	r3, r7, #28
 80036ee:	4619      	mov	r1, r3
 80036f0:	4812      	ldr	r0, [pc, #72]	; (800373c <MX_GPIO_Init+0x1c4>)
 80036f2:	f002 fa09 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80036f6:	f64f 4303 	movw	r3, #64515	; 0xfc03
 80036fa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036fc:	2303      	movs	r3, #3
 80036fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003700:	2300      	movs	r3, #0
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003704:	f107 031c 	add.w	r3, r7, #28
 8003708:	4619      	mov	r1, r3
 800370a:	480e      	ldr	r0, [pc, #56]	; (8003744 <MX_GPIO_Init+0x1cc>)
 800370c:	f002 f9fc 	bl	8005b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PD3 PD4 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003710:	f644 73f8 	movw	r3, #20472	; 0x4ff8
 8003714:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003716:	2303      	movs	r3, #3
 8003718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371a:	2300      	movs	r3, #0
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800371e:	f107 031c 	add.w	r3, r7, #28
 8003722:	4619      	mov	r1, r3
 8003724:	4808      	ldr	r0, [pc, #32]	; (8003748 <MX_GPIO_Init+0x1d0>)
 8003726:	f002 f9ef 	bl	8005b08 <HAL_GPIO_Init>

}
 800372a:	bf00      	nop
 800372c:	3730      	adds	r7, #48	; 0x30
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40021000 	.word	0x40021000
 800373c:	40020000 	.word	0x40020000
 8003740:	40020800 	.word	0x40020800
 8003744:	40020400 	.word	0x40020400
 8003748:	40020c00 	.word	0x40020c00
 800374c:	00000000 	.word	0x00000000

08003750 <CurrentTime>:

/* USER CODE BEGIN 4 */
double CurrentTime(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  return HAL_GetTick() / 1000.0;
 8003754:	f000 fee4 	bl	8004520 <HAL_GetTick>
 8003758:	ee07 0a90 	vmov	s15, r0
 800375c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003760:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8003778 <CurrentTime+0x28>
 8003764:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8003768:	eeb0 7b45 	vmov.f64	d7, d5
}
 800376c:	eeb0 0b47 	vmov.f64	d0, d7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	f3af 8000 	nop.w
 8003778:	00000000 	.word	0x00000000
 800377c:	408f4000 	.word	0x408f4000

08003780 <measureBattery>:

double measureBattery()
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
  uint32_t D = HAL_ADC_GetValue(&hadc1);
 8003786:	4810      	ldr	r0, [pc, #64]	; (80037c8 <measureBattery+0x48>)
 8003788:	f001 f93d 	bl	8004a06 <HAL_ADC_GetValue>
 800378c:	6078      	str	r0, [r7, #4]
  return 2 * 3.3 * D / 4096.0;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003798:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80037b8 <measureBattery+0x38>
 800379c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80037a0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80037c0 <measureBattery+0x40>
 80037a4:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80037a8:	eeb0 7b45 	vmov.f64	d7, d5
}
 80037ac:	eeb0 0b47 	vmov.f64	d0, d7
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	66666666 	.word	0x66666666
 80037bc:	401a6666 	.word	0x401a6666
 80037c0:	00000000 	.word	0x00000000
 80037c4:	40b00000 	.word	0x40b00000
 80037c8:	200052c0 	.word	0x200052c0

080037cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <HAL_MspInit+0x50>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a11      	ldr	r2, [pc, #68]	; (800382c <HAL_MspInit+0x50>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	4b0f      	ldr	r3, [pc, #60]	; (800382c <HAL_MspInit+0x50>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <HAL_MspInit+0x50>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4a0b      	ldr	r2, [pc, #44]	; (800382c <HAL_MspInit+0x50>)
 8003800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003804:	6453      	str	r3, [r2, #68]	; 0x44
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_MspInit+0x50>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8003812:	2200      	movs	r2, #0
 8003814:	2100      	movs	r1, #0
 8003816:	2004      	movs	r0, #4
 8003818:	f001 fc49 	bl	80050ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800381c:	2004      	movs	r0, #4
 800381e:	f001 fc62 	bl	80050e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003822:	bf00      	nop
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a19      	ldr	r2, [pc, #100]	; (80038b4 <HAL_ADC_MspInit+0x84>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d12b      	bne.n	80038aa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_ADC_MspInit+0x88>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <HAL_ADC_MspInit+0x88>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385c:	6453      	str	r3, [r2, #68]	; 0x44
 800385e:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_ADC_MspInit+0x88>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <HAL_ADC_MspInit+0x88>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a12      	ldr	r2, [pc, #72]	; (80038b8 <HAL_ADC_MspInit+0x88>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <HAL_ADC_MspInit+0x88>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003882:	2308      	movs	r3, #8
 8003884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003886:	2303      	movs	r3, #3
 8003888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800388e:	f107 0314 	add.w	r3, r7, #20
 8003892:	4619      	mov	r1, r3
 8003894:	4809      	ldr	r0, [pc, #36]	; (80038bc <HAL_ADC_MspInit+0x8c>)
 8003896:	f002 f937 	bl	8005b08 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2100      	movs	r1, #0
 800389e:	2012      	movs	r0, #18
 80038a0:	f001 fc05 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80038a4:	2012      	movs	r0, #18
 80038a6:	f001 fc1e 	bl	80050e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038aa:	bf00      	nop
 80038ac:	3728      	adds	r7, #40	; 0x28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40012000 	.word	0x40012000
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40020800 	.word	0x40020800

080038c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1b      	ldr	r2, [pc, #108]	; (800394c <HAL_I2C_MspInit+0x8c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d12f      	bne.n	8003942 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e2:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <HAL_I2C_MspInit+0x90>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <HAL_I2C_MspInit+0x90>)
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <HAL_I2C_MspInit+0x90>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BNO_SCL_Pin|BNO_SDA_Pin;
 80038fa:	23c0      	movs	r3, #192	; 0xc0
 80038fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038fe:	2312      	movs	r3, #18
 8003900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003902:	2301      	movs	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003906:	2303      	movs	r3, #3
 8003908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800390a:	2304      	movs	r3, #4
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	4619      	mov	r1, r3
 8003914:	480f      	ldr	r0, [pc, #60]	; (8003954 <HAL_I2C_MspInit+0x94>)
 8003916:	f002 f8f7 	bl	8005b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_I2C_MspInit+0x90>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <HAL_I2C_MspInit+0x90>)
 8003920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_I2C_MspInit+0x90>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2100      	movs	r1, #0
 8003936:	201f      	movs	r0, #31
 8003938:	f001 fbb9 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800393c:	201f      	movs	r0, #31
 800393e:	f001 fbd2 	bl	80050e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003942:	bf00      	nop
 8003944:	3728      	adds	r7, #40	; 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40005400 	.word	0x40005400
 8003950:	40023800 	.word	0x40023800
 8003954:	40020400 	.word	0x40020400

08003958 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	; 0x30
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a38      	ldr	r2, [pc, #224]	; (8003a58 <HAL_QSPI_MspInit+0x100>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d169      	bne.n	8003a4e <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800397a:	4b38      	ldr	r3, [pc, #224]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	4a37      	ldr	r2, [pc, #220]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	6393      	str	r3, [r2, #56]	; 0x38
 8003986:	4b35      	ldr	r3, [pc, #212]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003992:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a31      	ldr	r2, [pc, #196]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 80039b0:	f043 0310 	orr.w	r3, r3, #16
 80039b4:	6313      	str	r3, [r2, #48]	; 0x30
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c2:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	4a25      	ldr	r2, [pc, #148]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 80039c8:	f043 0304 	orr.w	r3, r3, #4
 80039cc:	6313      	str	r3, [r2, #48]	; 0x30
 80039ce:	4b23      	ldr	r3, [pc, #140]	; (8003a5c <HAL_QSPI_MspInit+0x104>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PE7     ------> QUADSPI_BK2_IO0
    PE8     ------> QUADSPI_BK2_IO1
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039da:	2304      	movs	r3, #4
 80039dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039de:	2302      	movs	r3, #2
 80039e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e2:	2300      	movs	r3, #0
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e6:	2303      	movs	r3, #3
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80039ea:	2309      	movs	r3, #9
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039ee:	f107 031c 	add.w	r3, r7, #28
 80039f2:	4619      	mov	r1, r3
 80039f4:	481a      	ldr	r0, [pc, #104]	; (8003a60 <HAL_QSPI_MspInit+0x108>)
 80039f6:	f002 f887 	bl	8005b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80039fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80039fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a00:	2302      	movs	r3, #2
 8003a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003a0c:	230a      	movs	r3, #10
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	4619      	mov	r1, r3
 8003a16:	4813      	ldr	r0, [pc, #76]	; (8003a64 <HAL_QSPI_MspInit+0x10c>)
 8003a18:	f002 f876 	bl	8005b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a22:	2302      	movs	r3, #2
 8003a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a2e:	2309      	movs	r3, #9
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a32:	f107 031c 	add.w	r3, r7, #28
 8003a36:	4619      	mov	r1, r3
 8003a38:	480b      	ldr	r0, [pc, #44]	; (8003a68 <HAL_QSPI_MspInit+0x110>)
 8003a3a:	f002 f865 	bl	8005b08 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	205c      	movs	r0, #92	; 0x5c
 8003a44:	f001 fb33 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8003a48:	205c      	movs	r0, #92	; 0x5c
 8003a4a:	f001 fb4c 	bl	80050e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003a4e:	bf00      	nop
 8003a50:	3730      	adds	r7, #48	; 0x30
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	a0001000 	.word	0xa0001000
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020400 	.word	0x40020400
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40020800 	.word	0x40020800

08003a6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <HAL_RTC_MspInit+0x2c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d105      	bne.n	8003a8a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_RTC_MspInit+0x30>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	4a06      	ldr	r2, [pc, #24]	; (8003a9c <HAL_RTC_MspInit+0x30>)
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a88:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40002800 	.word	0x40002800
 8003a9c:	40023800 	.word	0x40023800

08003aa0 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <HAL_MMC_MspInit+0xb4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d144      	bne.n	8003b4c <HAL_MMC_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	4a24      	ldr	r2, [pc, #144]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003acc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae6:	4b1c      	ldr	r3, [pc, #112]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af2:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003af8:	f043 0308 	orr.w	r3, r3, #8
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_MMC_MspInit+0xb8>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003b0a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b10:	2302      	movs	r3, #2
 8003b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	4619      	mov	r1, r3
 8003b26:	480d      	ldr	r0, [pc, #52]	; (8003b5c <HAL_MMC_MspInit+0xbc>)
 8003b28:	f001 ffee 	bl	8005b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b2c:	2304      	movs	r3, #4
 8003b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4619      	mov	r1, r3
 8003b46:	4806      	ldr	r0, [pc, #24]	; (8003b60 <HAL_MMC_MspInit+0xc0>)
 8003b48:	f001 ffde 	bl	8005b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003b4c:	bf00      	nop
 8003b4e:	3728      	adds	r7, #40	; 0x28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	40012c00 	.word	0x40012c00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40020800 	.word	0x40020800
 8003b60:	40020c00 	.word	0x40020c00

08003b64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <HAL_SPI_MspInit+0x7c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d127      	bne.n	8003bd6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b86:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_SPI_MspInit+0x80>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	4a16      	ldr	r2, [pc, #88]	; (8003be4 <HAL_SPI_MspInit+0x80>)
 8003b8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b90:	6453      	str	r3, [r2, #68]	; 0x44
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <HAL_SPI_MspInit+0x80>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <HAL_SPI_MspInit+0x80>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <HAL_SPI_MspInit+0x80>)
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_SPI_MspInit+0x80>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003bb6:	2338      	movs	r3, #56	; 0x38
 8003bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bc6:	2305      	movs	r3, #5
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	4619      	mov	r1, r3
 8003bd0:	4805      	ldr	r0, [pc, #20]	; (8003be8 <HAL_SPI_MspInit+0x84>)
 8003bd2:	f001 ff99 	bl	8005b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003bd6:	bf00      	nop
 8003bd8:	3728      	adds	r7, #40	; 0x28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40013000 	.word	0x40013000
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40020400 	.word	0x40020400

08003bec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0314 	add.w	r3, r7, #20
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a27      	ldr	r2, [pc, #156]	; (8003ca8 <HAL_TIM_IC_MspInit+0xbc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d148      	bne.n	8003ca0 <HAL_TIM_IC_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c0e:	4b27      	ldr	r3, [pc, #156]	; (8003cac <HAL_TIM_IC_MspInit+0xc0>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	4a26      	ldr	r2, [pc, #152]	; (8003cac <HAL_TIM_IC_MspInit+0xc0>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6453      	str	r3, [r2, #68]	; 0x44
 8003c1a:	4b24      	ldr	r3, [pc, #144]	; (8003cac <HAL_TIM_IC_MspInit+0xc0>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b21      	ldr	r3, [pc, #132]	; (8003cac <HAL_TIM_IC_MspInit+0xc0>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a20      	ldr	r2, [pc, #128]	; (8003cac <HAL_TIM_IC_MspInit+0xc0>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <HAL_TIM_IC_MspInit+0xc0>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 8003c3e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4815      	ldr	r0, [pc, #84]	; (8003cb0 <HAL_TIM_IC_MspInit+0xc4>)
 8003c5c:	f001 ff54 	bl	8005b08 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003c60:	2200      	movs	r2, #0
 8003c62:	2100      	movs	r1, #0
 8003c64:	2018      	movs	r0, #24
 8003c66:	f001 fa22 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003c6a:	2018      	movs	r0, #24
 8003c6c:	f001 fa3b 	bl	80050e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c70:	2200      	movs	r2, #0
 8003c72:	2100      	movs	r1, #0
 8003c74:	2019      	movs	r0, #25
 8003c76:	f001 fa1a 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c7a:	2019      	movs	r0, #25
 8003c7c:	f001 fa33 	bl	80050e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003c80:	2200      	movs	r2, #0
 8003c82:	2100      	movs	r1, #0
 8003c84:	201a      	movs	r0, #26
 8003c86:	f001 fa12 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003c8a:	201a      	movs	r0, #26
 8003c8c:	f001 fa2b 	bl	80050e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	201b      	movs	r0, #27
 8003c96:	f001 fa0a 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003c9a:	201b      	movs	r0, #27
 8003c9c:	f001 fa23 	bl	80050e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ca0:	bf00      	nop
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40010000 	.word	0x40010000
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40020000 	.word	0x40020000

08003cb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_TIM_PWM_MspInit+0x5c>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	4a11      	ldr	r2, [pc, #68]	; (8003d10 <HAL_TIM_PWM_MspInit+0x5c>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <HAL_TIM_PWM_MspInit+0x5c>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003cde:	e010      	b.n	8003d02 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <HAL_TIM_PWM_MspInit+0x60>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d10b      	bne.n	8003d02 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_TIM_PWM_MspInit+0x5c>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4a08      	ldr	r2, [pc, #32]	; (8003d10 <HAL_TIM_PWM_MspInit+0x5c>)
 8003cf0:	f043 0304 	orr.w	r3, r3, #4
 8003cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_TIM_PWM_MspInit+0x5c>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	68bb      	ldr	r3, [r7, #8]
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40000800 	.word	0x40000800

08003d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a34      	ldr	r2, [pc, #208]	; (8003e08 <HAL_TIM_MspPostInit+0xf0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d11d      	bne.n	8003d76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3a:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	4a33      	ldr	r2, [pc, #204]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	6313      	str	r3, [r2, #48]	; 0x30
 8003d46:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM2_J1_P4_Pin;
 8003d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d60:	2300      	movs	r3, #0
 8003d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM2_J1_P4_GPIO_Port, &GPIO_InitStruct);
 8003d68:	f107 0314 	add.w	r3, r7, #20
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4828      	ldr	r0, [pc, #160]	; (8003e10 <HAL_TIM_MspPostInit+0xf8>)
 8003d70:	f001 feca 	bl	8005b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d74:	e043      	b.n	8003dfe <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7e:	d11c      	bne.n	8003dba <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_J1_P1_Pin;
 8003d98:	2320      	movs	r3, #32
 8003d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da0:	2300      	movs	r3, #0
 8003da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da4:	2300      	movs	r3, #0
 8003da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003da8:	2301      	movs	r3, #1
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_J1_P1_GPIO_Port, &GPIO_InitStruct);
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4619      	mov	r1, r3
 8003db2:	4817      	ldr	r0, [pc, #92]	; (8003e10 <HAL_TIM_MspPostInit+0xf8>)
 8003db4:	f001 fea8 	bl	8005b08 <HAL_GPIO_Init>
}
 8003db8:	e021      	b.n	8003dfe <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <HAL_TIM_MspPostInit+0xfc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d11c      	bne.n	8003dfe <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003dca:	f043 0308 	orr.w	r3, r3, #8
 8003dce:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd0:	4b0e      	ldr	r3, [pc, #56]	; (8003e0c <HAL_TIM_MspPostInit+0xf4>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8003ddc:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dee:	2302      	movs	r3, #2
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003df2:	f107 0314 	add.w	r3, r7, #20
 8003df6:	4619      	mov	r1, r3
 8003df8:	4807      	ldr	r0, [pc, #28]	; (8003e18 <HAL_TIM_MspPostInit+0x100>)
 8003dfa:	f001 fe85 	bl	8005b08 <HAL_GPIO_Init>
}
 8003dfe:	bf00      	nop
 8003e00:	3728      	adds	r7, #40	; 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40020000 	.word	0x40020000
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40020c00 	.word	0x40020c00

08003e1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08e      	sub	sp, #56	; 0x38
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a7b      	ldr	r2, [pc, #492]	; (8004028 <HAL_UART_MspInit+0x20c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d130      	bne.n	8003ea0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e3e:	4b7b      	ldr	r3, [pc, #492]	; (800402c <HAL_UART_MspInit+0x210>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a7a      	ldr	r2, [pc, #488]	; (800402c <HAL_UART_MspInit+0x210>)
 8003e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b78      	ldr	r3, [pc, #480]	; (800402c <HAL_UART_MspInit+0x210>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e56:	4b75      	ldr	r3, [pc, #468]	; (800402c <HAL_UART_MspInit+0x210>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4a74      	ldr	r2, [pc, #464]	; (800402c <HAL_UART_MspInit+0x210>)
 8003e5c:	f043 0308 	orr.w	r3, r3, #8
 8003e60:	6313      	str	r3, [r2, #48]	; 0x30
 8003e62:	4b72      	ldr	r3, [pc, #456]	; (800402c <HAL_UART_MspInit+0x210>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = UART4_RX_J9_P3_Pin|UART4_TX_J9_P1_Pin;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e72:	2302      	movs	r3, #2
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e86:	4619      	mov	r1, r3
 8003e88:	4869      	ldr	r0, [pc, #420]	; (8004030 <HAL_UART_MspInit+0x214>)
 8003e8a:	f001 fe3d 	bl	8005b08 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2100      	movs	r1, #0
 8003e92:	2034      	movs	r0, #52	; 0x34
 8003e94:	f001 f90b 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003e98:	2034      	movs	r0, #52	; 0x34
 8003e9a:	f001 f924 	bl	80050e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e9e:	e0bf      	b.n	8004020 <HAL_UART_MspInit+0x204>
  else if(huart->Instance==UART5)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a63      	ldr	r2, [pc, #396]	; (8004034 <HAL_UART_MspInit+0x218>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d15f      	bne.n	8003f6a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003eaa:	4b60      	ldr	r3, [pc, #384]	; (800402c <HAL_UART_MspInit+0x210>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a5f      	ldr	r2, [pc, #380]	; (800402c <HAL_UART_MspInit+0x210>)
 8003eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b5d      	ldr	r3, [pc, #372]	; (800402c <HAL_UART_MspInit+0x210>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec2:	4b5a      	ldr	r3, [pc, #360]	; (800402c <HAL_UART_MspInit+0x210>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a59      	ldr	r2, [pc, #356]	; (800402c <HAL_UART_MspInit+0x210>)
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b57      	ldr	r3, [pc, #348]	; (800402c <HAL_UART_MspInit+0x210>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8003eec:	2307      	movs	r3, #7
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4850      	ldr	r0, [pc, #320]	; (8004038 <HAL_UART_MspInit+0x21c>)
 8003ef8:	f001 fe06 	bl	8005b08 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003efc:	4b4f      	ldr	r3, [pc, #316]	; (800403c <HAL_UART_MspInit+0x220>)
 8003efe:	4a50      	ldr	r2, [pc, #320]	; (8004040 <HAL_UART_MspInit+0x224>)
 8003f00:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003f02:	4b4e      	ldr	r3, [pc, #312]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f08:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f0a:	4b4c      	ldr	r3, [pc, #304]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f10:	4b4a      	ldr	r3, [pc, #296]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f16:	4b49      	ldr	r3, [pc, #292]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f1c:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f24:	4b45      	ldr	r3, [pc, #276]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003f2a:	4b44      	ldr	r3, [pc, #272]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f30:	4b42      	ldr	r3, [pc, #264]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f36:	4b41      	ldr	r3, [pc, #260]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003f3c:	483f      	ldr	r0, [pc, #252]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f3e:	f001 f8ed 	bl	800511c <HAL_DMA_Init>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d001      	beq.n	8003f4c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003f48:	f7ff fc40 	bl	80037cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a3b      	ldr	r2, [pc, #236]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f50:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <HAL_UART_MspInit+0x220>)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	2035      	movs	r0, #53	; 0x35
 8003f5e:	f001 f8a6 	bl	80050ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003f62:	2035      	movs	r0, #53	; 0x35
 8003f64:	f001 f8bf 	bl	80050e6 <HAL_NVIC_EnableIRQ>
}
 8003f68:	e05a      	b.n	8004020 <HAL_UART_MspInit+0x204>
  else if(huart->Instance==USART2)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a35      	ldr	r2, [pc, #212]	; (8004044 <HAL_UART_MspInit+0x228>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d155      	bne.n	8004020 <HAL_UART_MspInit+0x204>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f74:	4b2d      	ldr	r3, [pc, #180]	; (800402c <HAL_UART_MspInit+0x210>)
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	4a2c      	ldr	r2, [pc, #176]	; (800402c <HAL_UART_MspInit+0x210>)
 8003f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_UART_MspInit+0x210>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_UART_MspInit+0x210>)
 8003f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <HAL_UART_MspInit+0x210>)
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	6313      	str	r3, [r2, #48]	; 0x30
 8003f98:	4b24      	ldr	r3, [pc, #144]	; (800402c <HAL_UART_MspInit+0x210>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8003fa4:	230c      	movs	r3, #12
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fb4:	2307      	movs	r3, #7
 8003fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4822      	ldr	r0, [pc, #136]	; (8004048 <HAL_UART_MspInit+0x22c>)
 8003fc0:	f001 fda2 	bl	8005b08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003fc4:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_UART_MspInit+0x230>)
 8003fc6:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_UART_MspInit+0x234>)
 8003fc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_UART_MspInit+0x230>)
 8003fcc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fd0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fd2:	4b1e      	ldr	r3, [pc, #120]	; (800404c <HAL_UART_MspInit+0x230>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	; (800404c <HAL_UART_MspInit+0x230>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_UART_MspInit+0x230>)
 8003fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_UART_MspInit+0x230>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <HAL_UART_MspInit+0x230>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <HAL_UART_MspInit+0x230>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <HAL_UART_MspInit+0x230>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ffe:	4b13      	ldr	r3, [pc, #76]	; (800404c <HAL_UART_MspInit+0x230>)
 8004000:	2200      	movs	r2, #0
 8004002:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004004:	4811      	ldr	r0, [pc, #68]	; (800404c <HAL_UART_MspInit+0x230>)
 8004006:	f001 f889 	bl	800511c <HAL_DMA_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8004010:	f7ff fbdc 	bl	80037cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a0d      	ldr	r2, [pc, #52]	; (800404c <HAL_UART_MspInit+0x230>)
 8004018:	66da      	str	r2, [r3, #108]	; 0x6c
 800401a:	4a0c      	ldr	r2, [pc, #48]	; (800404c <HAL_UART_MspInit+0x230>)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004020:	bf00      	nop
 8004022:	3738      	adds	r7, #56	; 0x38
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40004c00 	.word	0x40004c00
 800402c:	40023800 	.word	0x40023800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40005000 	.word	0x40005000
 8004038:	40020400 	.word	0x40020400
 800403c:	20005524 	.word	0x20005524
 8004040:	40026010 	.word	0x40026010
 8004044:	40004400 	.word	0x40004400
 8004048:	40020000 	.word	0x40020000
 800404c:	20005088 	.word	0x20005088
 8004050:	40026088 	.word	0x40026088

08004054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004058:	f004 faea 	bl	8008630 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}

08004060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	SetRGB(250, 250, 250);
 8004066:	22fa      	movs	r2, #250	; 0xfa
 8004068:	21fa      	movs	r1, #250	; 0xfa
 800406a:	20fa      	movs	r0, #250	; 0xfa
 800406c:	f7fd f8a8 	bl	80011c0 <SetRGB>
//	HAL_Delay(5000);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  for (int i = 0 ; i < 3000; i++)
 8004070:	2300      	movs	r3, #0
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	e002      	b.n	800407c <HardFault_Handler+0x1c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3301      	adds	r3, #1
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004082:	4293      	cmp	r3, r2
 8004084:	ddf7      	ble.n	8004076 <HardFault_Handler+0x16>
	  {

	  }
	  getCMD();
 8004086:	f7fe fb69 	bl	800275c <getCMD>
  {
 800408a:	e7f1      	b.n	8004070 <HardFault_Handler+0x10>

0800408c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	SetRGB(250, 250, 0);
 8004090:	2200      	movs	r2, #0
 8004092:	21fa      	movs	r1, #250	; 0xfa
 8004094:	20fa      	movs	r0, #250	; 0xfa
 8004096:	f7fd f893 	bl	80011c0 <SetRGB>
	HAL_Delay(5000);
 800409a:	f241 3088 	movw	r0, #5000	; 0x1388
 800409e:	f000 fa4b 	bl	8004538 <HAL_Delay>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a2:	e7fe      	b.n	80040a2 <MemManage_Handler+0x16>

080040a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	SetRGB(250, 250, 0);
 80040a8:	2200      	movs	r2, #0
 80040aa:	21fa      	movs	r1, #250	; 0xfa
 80040ac:	20fa      	movs	r0, #250	; 0xfa
 80040ae:	f7fd f887 	bl	80011c0 <SetRGB>
	HAL_Delay(5000);
 80040b2:	f241 3088 	movw	r0, #5000	; 0x1388
 80040b6:	f000 fa3f 	bl	8004538 <HAL_Delay>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ba:	e7fe      	b.n	80040ba <BusFault_Handler+0x16>

080040bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	SetRGB(250, 250, 0);
 80040c0:	2200      	movs	r2, #0
 80040c2:	21fa      	movs	r1, #250	; 0xfa
 80040c4:	20fa      	movs	r0, #250	; 0xfa
 80040c6:	f7fd f87b 	bl	80011c0 <SetRGB>
	HAL_Delay(5000);
 80040ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80040ce:	f000 fa33 	bl	8004538 <HAL_Delay>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040d2:	e7fe      	b.n	80040d2 <UsageFault_Handler+0x16>

080040d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004102:	f000 f9f9 	bl	80044f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004106:	bf00      	nop
 8004108:	bd80      	pop	{r7, pc}

0800410a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800410e:	f001 fb9d 	bl	800584c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800411c:	4802      	ldr	r0, [pc, #8]	; (8004128 <DMA1_Stream0_IRQHandler+0x10>)
 800411e:	f001 f92d 	bl	800537c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20005524 	.word	0x20005524

0800412c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <DMA1_Stream5_IRQHandler+0x10>)
 8004132:	f001 f923 	bl	800537c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20005088 	.word	0x20005088

08004140 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <ADC_IRQHandler+0x10>)
 8004146:	f000 fb1d 	bl	8004784 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200052c0 	.word	0x200052c0

08004154 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004158:	4802      	ldr	r0, [pc, #8]	; (8004164 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800415a:	f006 f8bf 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20005340 	.word	0x20005340

08004168 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800416c:	4802      	ldr	r0, [pc, #8]	; (8004178 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800416e:	f006 f8b5 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20005340 	.word	0x20005340

0800417c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004180:	4802      	ldr	r0, [pc, #8]	; (800418c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004182:	f006 f8ab 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20005340 	.word	0x20005340

08004190 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004196:	4804      	ldr	r0, [pc, #16]	; (80041a8 <TIM1_CC_IRQHandler+0x18>)
 8004198:	f006 f8a0 	bl	800a2dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */
//  TIM1->CCR1 = 0;
int a= 1;
 800419c:	2301      	movs	r3, #1
 800419e:	607b      	str	r3, [r7, #4]
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20005340 	.word	0x20005340

080041ac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <I2C1_EV_IRQHandler+0x10>)
 80041b2:	f002 f8ff 	bl	80063b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20005128 	.word	0x20005128

080041c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80041c4:	4802      	ldr	r0, [pc, #8]	; (80041d0 <UART4_IRQHandler+0x10>)
 80041c6:	f007 fb3f 	bl	800b848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80041ca:	bf00      	nop
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	20005380 	.word	0x20005380

080041d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80041d8:	4802      	ldr	r0, [pc, #8]	; (80041e4 <UART5_IRQHandler+0x10>)
 80041da:	f007 fb35 	bl	800b848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20005238 	.word	0x20005238

080041e8 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80041ec:	4802      	ldr	r0, [pc, #8]	; (80041f8 <QUADSPI_IRQHandler+0x10>)
 80041ee:	f002 ff83 	bl	80070f8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200055a0 	.word	0x200055a0

080041fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <_sbrk+0x50>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <_sbrk+0x16>
		heap_end = &end;
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <_sbrk+0x50>)
 800420e:	4a10      	ldr	r2, [pc, #64]	; (8004250 <_sbrk+0x54>)
 8004210:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <_sbrk+0x50>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <_sbrk+0x50>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	466a      	mov	r2, sp
 8004222:	4293      	cmp	r3, r2
 8004224:	d907      	bls.n	8004236 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004226:	f00c fbe9 	bl	80109fc <__errno>
 800422a:	4602      	mov	r2, r0
 800422c:	230c      	movs	r3, #12
 800422e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
 8004234:	e006      	b.n	8004244 <_sbrk+0x48>
	}

	heap_end += incr;
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <_sbrk+0x50>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	4a03      	ldr	r2, [pc, #12]	; (800424c <_sbrk+0x50>)
 8004240:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20001c38 	.word	0x20001c38
 8004250:	20005620 	.word	0x20005620

08004254 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <SystemInit+0x28>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	4a07      	ldr	r2, [pc, #28]	; (800427c <SystemInit+0x28>)
 8004260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <SystemInit+0x28>)
 800426a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800426e:	609a      	str	r2, [r3, #8]
#endif
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = 0; //STA_NOINIT;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <USER_initialize+0x24>)
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
//	{       Stat &= ~STA_NOINIT;
//	}
//	else
//	{      // printf("DISK IO INIT ERROR \n");
//	}
    return Stat;
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <USER_initialize+0x24>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000004c 	.word	0x2000004c

080042a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
//      {
//        return HAL_ERROR;
//      }
//  }

  Stat = STA_NOINIT;
 80042b2:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <USER_status+0x34>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]
  Stat &= ~STA_NOINIT;
 80042b8:	4b08      	ldr	r3, [pc, #32]	; (80042dc <USER_status+0x34>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <USER_status+0x34>)
 80042c6:	701a      	strb	r2, [r3, #0]
  	return Stat;
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <USER_status+0x34>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	2000004c 	.word	0x2000004c

080042e0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	4603      	mov	r3, r0
 80042ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    	uint32_t SecAdd = sector * SECTOR_SIZE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	031b      	lsls	r3, r3, #12
 80042f4:	617b      	str	r3, [r7, #20]
	uint32_t Size = count * SECTOR_SIZE;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	031b      	lsls	r3, r3, #12
 80042fa:	613b      	str	r3, [r7, #16]
//uint8_t QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)        
	if(QSPI_Read((uint8_t*)buff, (uint32_t)SecAdd, (uint32_t) Size ) ==  HAL_OK)
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	6979      	ldr	r1, [r7, #20]
 8004300:	68b8      	ldr	r0, [r7, #8]
 8004302:	f7fc fc47 	bl	8000b94 <QSPI_Read>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <USER_read+0x30>
	{       return RES_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <USER_read+0x32>
	}
	else
	{       //printf("DISK Read Error \n");
		return RES_ERROR;
 8004310:	2301      	movs	r3, #1
	}
  /* USER CODE END READ */
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	DSector = sector;
 800432c:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <USER_write+0x7c>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6013      	str	r3, [r2, #0]
	SecAdd = sector * SECTOR_SIZE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	4a19      	ldr	r2, [pc, #100]	; (800439c <USER_write+0x80>)
 8004338:	6013      	str	r3, [r2, #0]
	Size = count * SECTOR_SIZE;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <USER_write+0x84>)
 8004340:	6013      	str	r3, [r2, #0]
	for(uint16_t i = 0; i< count; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	82fb      	strh	r3, [r7, #22]
 8004346:	e010      	b.n	800436a <USER_write+0x4e>
	{       if(QSPI_Erase_Sector4K(SecAdd + (i * SECTOR_SIZE)) != HAL_OK)
 8004348:	8afb      	ldrh	r3, [r7, #22]
 800434a:	031b      	lsls	r3, r3, #12
 800434c:	461a      	mov	r2, r3
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <USER_write+0x80>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4413      	add	r3, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f7fc fb4b 	bl	80009f0 <QSPI_Erase_Sector4K>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <USER_write+0x48>
		{	// printf("DISK IO ERASE FAIL \n");
			return RES_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e014      	b.n	800438e <USER_write+0x72>
	for(uint16_t i = 0; i< count; i++)
 8004364:	8afb      	ldrh	r3, [r7, #22]
 8004366:	3301      	adds	r3, #1
 8004368:	82fb      	strh	r3, [r7, #22]
 800436a:	8afb      	ldrh	r3, [r7, #22]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d8ea      	bhi.n	8004348 <USER_write+0x2c>
		}
	}
     
	if(QSPI_Write((uint8_t *)buff, SecAdd, Size) != HAL_OK)
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <USER_write+0x80>)
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <USER_write+0x84>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68b8      	ldr	r0, [r7, #8]
 800437e:	f7fc fb79 	bl	8000a74 <QSPI_Write>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <USER_write+0x70>
	{       // printf("DISK IO WRITE FAIL \n");
		return RES_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <USER_write+0x72>
	}
  /* USER CODE HERE */
    return RES_OK;
 800438c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200055f4 	.word	0x200055f4
 800439c:	200055ec 	.word	0x200055ec
 80043a0:	200055f0 	.word	0x200055f0

080043a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	603a      	str	r2, [r7, #0]
 80043ae:	71fb      	strb	r3, [r7, #7]
 80043b0:	460b      	mov	r3, r1
 80043b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80043b8:	4b1b      	ldr	r3, [pc, #108]	; (8004428 <USER_ioctl+0x84>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <USER_ioctl+0x26>
 80043c6:	2303      	movs	r3, #3
 80043c8:	e027      	b.n	800441a <USER_ioctl+0x76>
  
  switch (cmd)
 80043ca:	79bb      	ldrb	r3, [r7, #6]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d821      	bhi.n	8004414 <USER_ioctl+0x70>
 80043d0:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <USER_ioctl+0x34>)
 80043d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d6:	bf00      	nop
 80043d8:	080043e9 	.word	0x080043e9
 80043dc:	080043ef 	.word	0x080043ef
 80043e0:	080043fd 	.word	0x080043fd
 80043e4:	0800440b 	.word	0x0800440b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
    break;
 80043ec:	e014      	b.n	8004418 <USER_ioctl+0x74>
  
  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    *(DWORD*)buff = 4096; //SDRAM_DEVICE_SIZE / BLOCK_SIZE;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043f4:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	73fb      	strb	r3, [r7, #15]
    break;
 80043fa:	e00d      	b.n	8004418 <USER_ioctl+0x74>
  
  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    *(WORD*)buff = SECTOR_SIZE;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004402:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]
    break;
 8004408:	e006      	b.n	8004418 <USER_ioctl+0x74>
  
  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    *(DWORD*)buff = SECTOR_SIZE;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004410:	601a      	str	r2, [r3, #0]
    break;
 8004412:	e001      	b.n	8004418 <USER_ioctl+0x74>
  
  default:
    res = RES_PARERR;
 8004414:	2304      	movs	r3, #4
 8004416:	73fb      	strb	r3, [r7, #15]
  }
	return res;
 8004418:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	2000004c 	.word	0x2000004c

0800442c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800442c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004464 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004430:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004432:	e003      	b.n	800443c <LoopCopyDataInit>

08004434 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004434:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004436:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004438:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800443a:	3104      	adds	r1, #4

0800443c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800443c:	480b      	ldr	r0, [pc, #44]	; (800446c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004440:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004442:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004444:	d3f6      	bcc.n	8004434 <CopyDataInit>
  ldr  r2, =_sbss
 8004446:	4a0b      	ldr	r2, [pc, #44]	; (8004474 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004448:	e002      	b.n	8004450 <LoopFillZerobss>

0800444a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800444a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800444c:	f842 3b04 	str.w	r3, [r2], #4

08004450 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004452:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004454:	d3f9      	bcc.n	800444a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004456:	f7ff fefd 	bl	8004254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800445a:	f00c fad5 	bl	8010a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800445e:	f7fe fa2b 	bl	80028b8 <main>
  bx  lr    
 8004462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004464:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004468:	08014d58 	.word	0x08014d58
  ldr  r0, =_sdata
 800446c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004470:	2000023c 	.word	0x2000023c
  ldr  r2, =_sbss
 8004474:	20000240 	.word	0x20000240
  ldr  r3, = _ebss
 8004478:	2000561c 	.word	0x2000561c

0800447c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800447c:	e7fe      	b.n	800447c <CAN1_RX0_IRQHandler>

0800447e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004482:	2003      	movs	r0, #3
 8004484:	f000 fe08 	bl	8005098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004488:	2000      	movs	r0, #0
 800448a:	f000 f805 	bl	8004498 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800448e:	f7ff f9a5 	bl	80037dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044a0:	4b12      	ldr	r3, [pc, #72]	; (80044ec <HAL_InitTick+0x54>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_InitTick+0x58>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4619      	mov	r1, r3
 80044aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fe23 	bl	8005102 <HAL_SYSTICK_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e00e      	b.n	80044e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b0f      	cmp	r3, #15
 80044ca:	d80a      	bhi.n	80044e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044cc:	2200      	movs	r2, #0
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	f04f 30ff 	mov.w	r0, #4294967295
 80044d4:	f000 fdeb 	bl	80050ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044d8:	4a06      	ldr	r2, [pc, #24]	; (80044f4 <HAL_InitTick+0x5c>)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	e000      	b.n	80044e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3708      	adds	r7, #8
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000048 	.word	0x20000048
 80044f0:	20000068 	.word	0x20000068
 80044f4:	20000064 	.word	0x20000064

080044f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <HAL_IncTick+0x20>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	461a      	mov	r2, r3
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_IncTick+0x24>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4413      	add	r3, r2
 8004508:	4a04      	ldr	r2, [pc, #16]	; (800451c <HAL_IncTick+0x24>)
 800450a:	6013      	str	r3, [r2, #0]
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000068 	.word	0x20000068
 800451c:	200055f8 	.word	0x200055f8

08004520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return uwTick;
 8004524:	4b03      	ldr	r3, [pc, #12]	; (8004534 <HAL_GetTick+0x14>)
 8004526:	681b      	ldr	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	200055f8 	.word	0x200055f8

08004538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004540:	f7ff ffee 	bl	8004520 <HAL_GetTick>
 8004544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d005      	beq.n	800455e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_Delay+0x40>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	4413      	add	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800455e:	bf00      	nop
 8004560:	f7ff ffde 	bl	8004520 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	429a      	cmp	r2, r3
 800456e:	d8f7      	bhi.n	8004560 <HAL_Delay+0x28>
  {
  }
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000068 	.word	0x20000068

0800457c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e031      	b.n	80045f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff f948 	bl	8003830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d116      	bne.n	80045e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	4b10      	ldr	r3, [pc, #64]	; (8004600 <HAL_ADC_Init+0x84>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	f043 0202 	orr.w	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fb90 	bl	8004cf0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f023 0303 	bic.w	r3, r3, #3
 80045de:	f043 0201 	orr.w	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40
 80045e6:	e001      	b.n	80045ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	ffffeefd 	.word	0xffffeefd

08004604 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_ADC_Start+0x1a>
 800461a:	2302      	movs	r3, #2
 800461c:	e0a0      	b.n	8004760 <HAL_ADC_Start+0x15c>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d018      	beq.n	8004666 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004644:	4b49      	ldr	r3, [pc, #292]	; (800476c <HAL_ADC_Start+0x168>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a49      	ldr	r2, [pc, #292]	; (8004770 <HAL_ADC_Start+0x16c>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	0c9a      	lsrs	r2, r3, #18
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004658:	e002      	b.n	8004660 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b01      	subs	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f9      	bne.n	800465a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d174      	bne.n	800475e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004678:	4b3e      	ldr	r3, [pc, #248]	; (8004774 <HAL_ADC_Start+0x170>)
 800467a:	4013      	ands	r3, r2
 800467c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800469a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ae:	d106      	bne.n	80046be <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	f023 0206 	bic.w	r2, r3, #6
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	645a      	str	r2, [r3, #68]	; 0x44
 80046bc:	e002      	b.n	80046c4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80046d6:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_ADC_Start+0x174>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d136      	bne.n	800475e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	e02d      	b.n	800475e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1d      	ldr	r2, [pc, #116]	; (800477c <HAL_ADC_Start+0x178>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d10e      	bne.n	800472a <HAL_ADC_Start+0x126>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d107      	bne.n	800472a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004728:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_ADC_Start+0x174>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	d113      	bne.n	800475e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a11      	ldr	r2, [pc, #68]	; (8004780 <HAL_ADC_Start+0x17c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10e      	bne.n	800475e <HAL_ADC_Start+0x15a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800475c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	20000048 	.word	0x20000048
 8004770:	431bde83 	.word	0x431bde83
 8004774:	fffff8fe 	.word	0xfffff8fe
 8004778:	40012300 	.word	0x40012300
 800477c:	40012000 	.word	0x40012000
 8004780:	40012200 	.word	0x40012200

08004784 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b20      	cmp	r3, #32
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d049      	beq.n	800485a <HAL_ADC_IRQHandler+0xd6>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d046      	beq.n	800485a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d12b      	bne.n	800484a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d127      	bne.n	800484a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004804:	2b00      	cmp	r3, #0
 8004806:	d006      	beq.n	8004816 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004812:	2b00      	cmp	r3, #0
 8004814:	d119      	bne.n	800484a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0220 	bic.w	r2, r2, #32
 8004824:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f8e8 	bl	8004a20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0212 	mvn.w	r2, #18
 8004858:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b04      	cmp	r3, #4
 8004866:	bf0c      	ite	eq
 8004868:	2301      	moveq	r3, #1
 800486a:	2300      	movne	r3, #0
 800486c:	b2db      	uxtb	r3, r3
 800486e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d057      	beq.n	800493c <HAL_ADC_IRQHandler+0x1b8>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d054      	beq.n	800493c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b00      	cmp	r3, #0
 800489c:	d105      	bne.n	80048aa <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d139      	bne.n	800492c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d006      	beq.n	80048d4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d12b      	bne.n	800492c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d124      	bne.n	800492c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d11d      	bne.n	800492c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d119      	bne.n	800492c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004906:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004924:	f043 0201 	orr.w	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fad9 	bl	8004ee4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 020c 	mvn.w	r2, #12
 800493a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b01      	cmp	r3, #1
 8004948:	bf0c      	ite	eq
 800494a:	2301      	moveq	r3, #1
 800494c:	2300      	movne	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495c:	2b40      	cmp	r3, #64	; 0x40
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d017      	beq.n	800499e <HAL_ADC_IRQHandler+0x21a>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d014      	beq.n	800499e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	2b01      	cmp	r3, #1
 8004980:	d10d      	bne.n	800499e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f850 	bl	8004a34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0201 	mvn.w	r2, #1
 800499c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d015      	beq.n	80049fe <HAL_ADC_IRQHandler+0x27a>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d012      	beq.n	80049fe <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	f043 0202 	orr.w	r2, r3, #2
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0220 	mvn.w	r2, #32
 80049ec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f82a 	bl	8004a48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0220 	mvn.w	r2, #32
 80049fc:	601a      	str	r2, [r3, #0]
  }
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x1c>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e12a      	b.n	8004cce <HAL_ADC_ConfigChannel+0x272>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b09      	cmp	r3, #9
 8004a86:	d93a      	bls.n	8004afe <HAL_ADC_ConfigChannel+0xa2>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a90:	d035      	beq.n	8004afe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68d9      	ldr	r1, [r3, #12]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3b1e      	subs	r3, #30
 8004aa8:	2207      	movs	r2, #7
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43da      	mvns	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	400a      	ands	r2, r1
 8004ab6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a87      	ldr	r2, [pc, #540]	; (8004cdc <HAL_ADC_ConfigChannel+0x280>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d10a      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68d9      	ldr	r1, [r3, #12]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	061a      	lsls	r2, r3, #24
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ad6:	e035      	b.n	8004b44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68d9      	ldr	r1, [r3, #12]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	4618      	mov	r0, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4403      	add	r3, r0
 8004af0:	3b1e      	subs	r3, #30
 8004af2:	409a      	lsls	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004afc:	e022      	b.n	8004b44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6919      	ldr	r1, [r3, #16]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	2207      	movs	r2, #7
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43da      	mvns	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	400a      	ands	r2, r1
 8004b20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6919      	ldr	r1, [r3, #16]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4618      	mov	r0, r3
 8004b34:	4603      	mov	r3, r0
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4403      	add	r3, r0
 8004b3a:	409a      	lsls	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b06      	cmp	r3, #6
 8004b4a:	d824      	bhi.n	8004b96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3b05      	subs	r3, #5
 8004b5e:	221f      	movs	r2, #31
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43da      	mvns	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	3b05      	subs	r3, #5
 8004b88:	fa00 f203 	lsl.w	r2, r0, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	635a      	str	r2, [r3, #52]	; 0x34
 8004b94:	e04c      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d824      	bhi.n	8004be8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	3b23      	subs	r3, #35	; 0x23
 8004bb0:	221f      	movs	r2, #31
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43da      	mvns	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	4618      	mov	r0, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3b23      	subs	r3, #35	; 0x23
 8004bda:	fa00 f203 	lsl.w	r2, r0, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	631a      	str	r2, [r3, #48]	; 0x30
 8004be6:	e023      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3b41      	subs	r3, #65	; 0x41
 8004bfa:	221f      	movs	r2, #31
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43da      	mvns	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	400a      	ands	r2, r1
 8004c08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4618      	mov	r0, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	3b41      	subs	r3, #65	; 0x41
 8004c24:	fa00 f203 	lsl.w	r2, r0, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2a      	ldr	r2, [pc, #168]	; (8004ce0 <HAL_ADC_ConfigChannel+0x284>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d10a      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x1f4>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c42:	d105      	bne.n	8004c50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a26      	ldr	r2, [pc, #152]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004c4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <HAL_ADC_ConfigChannel+0x284>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d109      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x212>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b12      	cmp	r3, #18
 8004c60:	d105      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004c62:	4b20      	ldr	r3, [pc, #128]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_ADC_ConfigChannel+0x284>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d125      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x268>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <HAL_ADC_ConfigChannel+0x280>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <HAL_ADC_ConfigChannel+0x22e>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b11      	cmp	r3, #17
 8004c88:	d11c      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <HAL_ADC_ConfigChannel+0x288>)
 8004c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	; (8004cdc <HAL_ADC_ConfigChannel+0x280>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d111      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004ca0:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <HAL_ADC_ConfigChannel+0x28c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a11      	ldr	r2, [pc, #68]	; (8004cec <HAL_ADC_ConfigChannel+0x290>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	0c9a      	lsrs	r2, r3, #18
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004cb6:	e002      	b.n	8004cbe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f9      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	10000012 	.word	0x10000012
 8004ce0:	40012000 	.word	0x40012000
 8004ce4:	40012300 	.word	0x40012300
 8004ce8:	20000048 	.word	0x20000048
 8004cec:	431bde83 	.word	0x431bde83

08004cf0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004cf8:	4b78      	ldr	r3, [pc, #480]	; (8004edc <ADC_Init+0x1ec>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a77      	ldr	r2, [pc, #476]	; (8004edc <ADC_Init+0x1ec>)
 8004cfe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d02:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004d04:	4b75      	ldr	r3, [pc, #468]	; (8004edc <ADC_Init+0x1ec>)
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4973      	ldr	r1, [pc, #460]	; (8004edc <ADC_Init+0x1ec>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	021a      	lsls	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6859      	ldr	r1, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6899      	ldr	r1, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	4a58      	ldr	r2, [pc, #352]	; (8004ee0 <ADC_Init+0x1f0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d022      	beq.n	8004dca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6899      	ldr	r1, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6899      	ldr	r1, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	e00f      	b.n	8004dea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004de8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0202 	bic.w	r2, r2, #2
 8004df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6899      	ldr	r1, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	005a      	lsls	r2, r3, #1
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d01b      	beq.n	8004e50 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	3b01      	subs	r3, #1
 8004e44:	035a      	lsls	r2, r3, #13
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	e007      	b.n	8004e60 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	051a      	lsls	r2, r3, #20
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6899      	ldr	r1, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ea2:	025a      	lsls	r2, r3, #9
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6899      	ldr	r1, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	029a      	lsls	r2, r3, #10
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	609a      	str	r2, [r3, #8]
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40012300 	.word	0x40012300
 8004ee0:	0f000001 	.word	0x0f000001

08004ee4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <__NVIC_SetPriorityGrouping+0x40>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f14:	4013      	ands	r3, r2
 8004f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <__NVIC_SetPriorityGrouping+0x44>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f26:	4a04      	ldr	r2, [pc, #16]	; (8004f38 <__NVIC_SetPriorityGrouping+0x40>)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	60d3      	str	r3, [r2, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00
 8004f3c:	05fa0000 	.word	0x05fa0000

08004f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <__NVIC_GetPriorityGrouping+0x18>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	0a1b      	lsrs	r3, r3, #8
 8004f4a:	f003 0307 	and.w	r3, r3, #7
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000ed00 	.word	0xe000ed00

08004f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	db0b      	blt.n	8004f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	f003 021f 	and.w	r2, r3, #31
 8004f74:	4907      	ldr	r1, [pc, #28]	; (8004f94 <__NVIC_EnableIRQ+0x38>)
 8004f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	e000e100 	.word	0xe000e100

08004f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	6039      	str	r1, [r7, #0]
 8004fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	db0a      	blt.n	8004fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	490c      	ldr	r1, [pc, #48]	; (8004fe4 <__NVIC_SetPriority+0x4c>)
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	0112      	lsls	r2, r2, #4
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	440b      	add	r3, r1
 8004fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fc0:	e00a      	b.n	8004fd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	4908      	ldr	r1, [pc, #32]	; (8004fe8 <__NVIC_SetPriority+0x50>)
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	f003 030f 	and.w	r3, r3, #15
 8004fce:	3b04      	subs	r3, #4
 8004fd0:	0112      	lsls	r2, r2, #4
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	761a      	strb	r2, [r3, #24]
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr
 8004fe4:	e000e100 	.word	0xe000e100
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b089      	sub	sp, #36	; 0x24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f1c3 0307 	rsb	r3, r3, #7
 8005006:	2b04      	cmp	r3, #4
 8005008:	bf28      	it	cs
 800500a:	2304      	movcs	r3, #4
 800500c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3304      	adds	r3, #4
 8005012:	2b06      	cmp	r3, #6
 8005014:	d902      	bls.n	800501c <NVIC_EncodePriority+0x30>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	3b03      	subs	r3, #3
 800501a:	e000      	b.n	800501e <NVIC_EncodePriority+0x32>
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005020:	f04f 32ff 	mov.w	r2, #4294967295
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	43da      	mvns	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	401a      	ands	r2, r3
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005034:	f04f 31ff 	mov.w	r1, #4294967295
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	43d9      	mvns	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005044:	4313      	orrs	r3, r2
         );
}
 8005046:	4618      	mov	r0, r3
 8005048:	3724      	adds	r7, #36	; 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3b01      	subs	r3, #1
 8005060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005064:	d301      	bcc.n	800506a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005066:	2301      	movs	r3, #1
 8005068:	e00f      	b.n	800508a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800506a:	4a0a      	ldr	r2, [pc, #40]	; (8005094 <SysTick_Config+0x40>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3b01      	subs	r3, #1
 8005070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005072:	210f      	movs	r1, #15
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	f7ff ff8e 	bl	8004f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <SysTick_Config+0x40>)
 800507e:	2200      	movs	r2, #0
 8005080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005082:	4b04      	ldr	r3, [pc, #16]	; (8005094 <SysTick_Config+0x40>)
 8005084:	2207      	movs	r2, #7
 8005086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	e000e010 	.word	0xe000e010

08005098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff29 	bl	8004ef8 <__NVIC_SetPriorityGrouping>
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b086      	sub	sp, #24
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	4603      	mov	r3, r0
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050c0:	f7ff ff3e 	bl	8004f40 <__NVIC_GetPriorityGrouping>
 80050c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	6978      	ldr	r0, [r7, #20]
 80050cc:	f7ff ff8e 	bl	8004fec <NVIC_EncodePriority>
 80050d0:	4602      	mov	r2, r0
 80050d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff ff5d 	bl	8004f98 <__NVIC_SetPriority>
}
 80050de:	bf00      	nop
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	4603      	mov	r3, r0
 80050ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff ff31 	bl	8004f5c <__NVIC_EnableIRQ>
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff ffa2 	bl	8005054 <SysTick_Config>
 8005110:	4603      	mov	r3, r0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005128:	f7ff f9fa 	bl	8004520 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e099      	b.n	800526c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005158:	e00f      	b.n	800517a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800515a:	f7ff f9e1 	bl	8004520 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b05      	cmp	r3, #5
 8005166:	d908      	bls.n	800517a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2203      	movs	r2, #3
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e078      	b.n	800526c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e8      	bne.n	800515a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4b38      	ldr	r3, [pc, #224]	; (8005274 <HAL_DMA_Init+0x158>)
 8005194:	4013      	ands	r3, r2
 8005196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d107      	bne.n	80051e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	4313      	orrs	r3, r2
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b04      	cmp	r3, #4
 800520c:	d117      	bne.n	800523e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4313      	orrs	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00e      	beq.n	800523e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fa99 	bl	8005758 <DMA_CheckFifoParam>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800523a:	2301      	movs	r3, #1
 800523c:	e016      	b.n	800526c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa50 	bl	80056ec <DMA_CalcBaseAndBitshift>
 800524c:	4603      	mov	r3, r0
 800524e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005254:	223f      	movs	r2, #63	; 0x3f
 8005256:	409a      	lsls	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	e010803f 	.word	0xe010803f

08005278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_DMA_Start_IT+0x26>
 800529a:	2302      	movs	r3, #2
 800529c:	e048      	b.n	8005330 <HAL_DMA_Start_IT+0xb8>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d137      	bne.n	8005322 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f9e2 	bl	8005690 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	223f      	movs	r2, #63	; 0x3f
 80052d2:	409a      	lsls	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0216 	orr.w	r2, r2, #22
 80052e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052f6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0208 	orr.w	r2, r2, #8
 800530e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e005      	b.n	800532e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800532a:	2302      	movs	r3, #2
 800532c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800532e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3718      	adds	r7, #24
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d004      	beq.n	8005356 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e00c      	b.n	8005370 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2205      	movs	r2, #5
 800535a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005388:	4b92      	ldr	r3, [pc, #584]	; (80055d4 <HAL_DMA_IRQHandler+0x258>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a92      	ldr	r2, [pc, #584]	; (80055d8 <HAL_DMA_IRQHandler+0x25c>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	0a9b      	lsrs	r3, r3, #10
 8005394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a6:	2208      	movs	r2, #8
 80053a8:	409a      	lsls	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d01a      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d013      	beq.n	80053e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d4:	2208      	movs	r2, #8
 80053d6:	409a      	lsls	r2, r3
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	f043 0201 	orr.w	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	2201      	movs	r2, #1
 80053ee:	409a      	lsls	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d012      	beq.n	800541e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	2201      	movs	r2, #1
 800540c:	409a      	lsls	r2, r3
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005416:	f043 0202 	orr.w	r2, r3, #2
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	2204      	movs	r2, #4
 8005424:	409a      	lsls	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d012      	beq.n	8005454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	2204      	movs	r2, #4
 8005442:	409a      	lsls	r2, r3
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	f043 0204 	orr.w	r2, r3, #4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005458:	2210      	movs	r2, #16
 800545a:	409a      	lsls	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4013      	ands	r3, r2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d043      	beq.n	80054ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d03c      	beq.n	80054ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005476:	2210      	movs	r2, #16
 8005478:	409a      	lsls	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d018      	beq.n	80054be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d108      	bne.n	80054ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d024      	beq.n	80054ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
 80054aa:	e01f      	b.n	80054ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01b      	beq.n	80054ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	4798      	blx	r3
 80054bc:	e016      	b.n	80054ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d107      	bne.n	80054dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0208 	bic.w	r2, r2, #8
 80054da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	2220      	movs	r2, #32
 80054f2:	409a      	lsls	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4013      	ands	r3, r2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 808e 	beq.w	800561a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0310 	and.w	r3, r3, #16
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8086 	beq.w	800561a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	2220      	movs	r2, #32
 8005514:	409a      	lsls	r2, r3
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b05      	cmp	r3, #5
 8005524:	d136      	bne.n	8005594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0216 	bic.w	r2, r2, #22
 8005534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695a      	ldr	r2, [r3, #20]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	d103      	bne.n	8005556 <HAL_DMA_IRQHandler+0x1da>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0208 	bic.w	r2, r2, #8
 8005564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556a:	223f      	movs	r2, #63	; 0x3f
 800556c:	409a      	lsls	r2, r3
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005586:	2b00      	cmp	r3, #0
 8005588:	d07d      	beq.n	8005686 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
        }
        return;
 8005592:	e078      	b.n	8005686 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01c      	beq.n	80055dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d108      	bne.n	80055c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d030      	beq.n	800561a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4798      	blx	r3
 80055c0:	e02b      	b.n	800561a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d027      	beq.n	800561a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	4798      	blx	r3
 80055d2:	e022      	b.n	800561a <HAL_DMA_IRQHandler+0x29e>
 80055d4:	20000048 	.word	0x20000048
 80055d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10f      	bne.n	800560a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0210 	bic.w	r2, r2, #16
 80055f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561e:	2b00      	cmp	r3, #0
 8005620:	d032      	beq.n	8005688 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d022      	beq.n	8005674 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2205      	movs	r2, #5
 8005632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	3301      	adds	r3, #1
 800564a:	60bb      	str	r3, [r7, #8]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	429a      	cmp	r2, r3
 8005650:	d307      	bcc.n	8005662 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f2      	bne.n	8005646 <HAL_DMA_IRQHandler+0x2ca>
 8005660:	e000      	b.n	8005664 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005662:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	4798      	blx	r3
 8005684:	e000      	b.n	8005688 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005686:	bf00      	nop
    }
  }
}
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop

08005690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d108      	bne.n	80056d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056ce:	e007      	b.n	80056e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]
}
 80056e0:	bf00      	nop
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	3b10      	subs	r3, #16
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <DMA_CalcBaseAndBitshift+0x60>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	091b      	lsrs	r3, r3, #4
 8005704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <DMA_CalcBaseAndBitshift+0x64>)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4413      	add	r3, r2
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d908      	bls.n	800572c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <DMA_CalcBaseAndBitshift+0x68>)
 8005722:	4013      	ands	r3, r2
 8005724:	1d1a      	adds	r2, r3, #4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	659a      	str	r2, [r3, #88]	; 0x58
 800572a:	e006      	b.n	800573a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	461a      	mov	r2, r3
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <DMA_CalcBaseAndBitshift+0x68>)
 8005734:	4013      	ands	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	aaaaaaab 	.word	0xaaaaaaab
 8005750:	0801462c 	.word	0x0801462c
 8005754:	fffffc00 	.word	0xfffffc00

08005758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005760:	2300      	movs	r3, #0
 8005762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d11f      	bne.n	80057b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b03      	cmp	r3, #3
 8005776:	d855      	bhi.n	8005824 <DMA_CheckFifoParam+0xcc>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <DMA_CheckFifoParam+0x28>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	08005791 	.word	0x08005791
 8005784:	080057a3 	.word	0x080057a3
 8005788:	08005791 	.word	0x08005791
 800578c:	08005825 	.word	0x08005825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d045      	beq.n	8005828 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a0:	e042      	b.n	8005828 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057aa:	d13f      	bne.n	800582c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057b0:	e03c      	b.n	800582c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ba:	d121      	bne.n	8005800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d836      	bhi.n	8005830 <DMA_CheckFifoParam+0xd8>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <DMA_CheckFifoParam+0x70>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057d9 	.word	0x080057d9
 80057cc:	080057df 	.word	0x080057df
 80057d0:	080057d9 	.word	0x080057d9
 80057d4:	080057f1 	.word	0x080057f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	73fb      	strb	r3, [r7, #15]
      break;
 80057dc:	e02f      	b.n	800583e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d024      	beq.n	8005834 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ee:	e021      	b.n	8005834 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057f8:	d11e      	bne.n	8005838 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057fe:	e01b      	b.n	8005838 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b02      	cmp	r3, #2
 8005804:	d902      	bls.n	800580c <DMA_CheckFifoParam+0xb4>
 8005806:	2b03      	cmp	r3, #3
 8005808:	d003      	beq.n	8005812 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800580a:	e018      	b.n	800583e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
      break;
 8005810:	e015      	b.n	800583e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	73fb      	strb	r3, [r7, #15]
      break;
 8005822:	e00b      	b.n	800583c <DMA_CheckFifoParam+0xe4>
      break;
 8005824:	bf00      	nop
 8005826:	e00a      	b.n	800583e <DMA_CheckFifoParam+0xe6>
      break;
 8005828:	bf00      	nop
 800582a:	e008      	b.n	800583e <DMA_CheckFifoParam+0xe6>
      break;
 800582c:	bf00      	nop
 800582e:	e006      	b.n	800583e <DMA_CheckFifoParam+0xe6>
      break;
 8005830:	bf00      	nop
 8005832:	e004      	b.n	800583e <DMA_CheckFifoParam+0xe6>
      break;
 8005834:	bf00      	nop
 8005836:	e002      	b.n	800583e <DMA_CheckFifoParam+0xe6>
      break;   
 8005838:	bf00      	nop
 800583a:	e000      	b.n	800583e <DMA_CheckFifoParam+0xe6>
      break;
 800583c:	bf00      	nop
    }
  } 
  
  return status; 
 800583e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 8005856:	4b52      	ldr	r3, [pc, #328]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	4a51      	ldr	r2, [pc, #324]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8005862:	4b4f      	ldr	r3, [pc, #316]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	4a4e      	ldr	r2, [pc, #312]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005868:	f023 0302 	bic.w	r3, r3, #2
 800586c:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 800586e:	4b4c      	ldr	r3, [pc, #304]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	4a4b      	ldr	r2, [pc, #300]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005874:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005878:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 800587a:	4b49      	ldr	r3, [pc, #292]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	4948      	ldr	r1, [pc, #288]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005880:	4b48      	ldr	r3, [pc, #288]	; (80059a4 <HAL_FLASH_IRQHandler+0x158>)
 8005882:	4013      	ands	r3, r2
 8005884:	610b      	str	r3, [r1, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005886:	4b46      	ldr	r3, [pc, #280]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d046      	beq.n	8005920 <HAL_FLASH_IRQHandler+0xd4>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005892:	4b43      	ldr	r3, [pc, #268]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005894:	2201      	movs	r2, #1
 8005896:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8005898:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d02e      	beq.n	8005900 <HAL_FLASH_IRQHandler+0xb4>
 80058a2:	2b03      	cmp	r3, #3
 80058a4:	d033      	beq.n	800590e <HAL_FLASH_IRQHandler+0xc2>
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d000      	beq.n	80058ac <HAL_FLASH_IRQHandler+0x60>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 80058aa:	e03a      	b.n	8005922 <HAL_FLASH_IRQHandler+0xd6>
        pFlash.NbSectorsToErase--;
 80058ac:	4b3e      	ldr	r3, [pc, #248]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058b4:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 80058b6:	4b3c      	ldr	r3, [pc, #240]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d013      	beq.n	80058e6 <HAL_FLASH_IRQHandler+0x9a>
          temp = pFlash.Sector;
 80058be:	4b3a      	ldr	r3, [pc, #232]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f871 	bl	80059ac <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 80058ca:	4b37      	ldr	r3, [pc, #220]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	4a35      	ldr	r2, [pc, #212]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058d2:	60d3      	str	r3, [r2, #12]
 80058d4:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 80058d6:	4b34      	ldr	r3, [pc, #208]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058d8:	7a1b      	ldrb	r3, [r3, #8]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	4619      	mov	r1, r3
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8c2 	bl	8005a68 <FLASH_Erase_Sector>
        break;
 80058e4:	e01d      	b.n	8005922 <HAL_FLASH_IRQHandler+0xd6>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ea:	607b      	str	r3, [r7, #4]
 80058ec:	4a2e      	ldr	r2, [pc, #184]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f85a 	bl	80059ac <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80058f8:	4b2b      	ldr	r3, [pc, #172]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
        break;
 80058fe:	e010      	b.n	8005922 <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(0);
 8005900:	2000      	movs	r0, #0
 8005902:	f000 f853 	bl	80059ac <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005906:	4b28      	ldr	r3, [pc, #160]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 8005908:	2200      	movs	r2, #0
 800590a:	701a      	strb	r2, [r3, #0]
        break;
 800590c:	e009      	b.n	8005922 <HAL_FLASH_IRQHandler+0xd6>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800590e:	4b26      	ldr	r3, [pc, #152]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 f84a 	bl	80059ac <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005918:	4b23      	ldr	r3, [pc, #140]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 800591a:	2200      	movs	r2, #0
 800591c:	701a      	strb	r2, [r3, #0]
        break;
 800591e:	e000      	b.n	8005922 <HAL_FLASH_IRQHandler+0xd6>
    }
  }
 8005920:	bf00      	nop
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8005922:	4b1f      	ldr	r3, [pc, #124]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d020      	beq.n	8005970 <HAL_FLASH_IRQHandler+0x124>
  {
    switch (pFlash.ProcedureOnGoing)
 800592e:	4b1e      	ldr	r3, [pc, #120]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b02      	cmp	r3, #2
 8005936:	d00c      	beq.n	8005952 <HAL_FLASH_IRQHandler+0x106>
 8005938:	2b03      	cmp	r3, #3
 800593a:	d00d      	beq.n	8005958 <HAL_FLASH_IRQHandler+0x10c>
 800593c:	2b01      	cmp	r3, #1
 800593e:	d000      	beq.n	8005942 <HAL_FLASH_IRQHandler+0xf6>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 8005940:	e00e      	b.n	8005960 <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Sector;
 8005942:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 8005948:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 800594a:	f04f 32ff 	mov.w	r2, #4294967295
 800594e:	60da      	str	r2, [r3, #12]
        break;
 8005950:	e006      	b.n	8005960 <HAL_FLASH_IRQHandler+0x114>
        temp = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	607b      	str	r3, [r7, #4]
        break;
 8005956:	e003      	b.n	8005960 <HAL_FLASH_IRQHandler+0x114>
        temp = pFlash.Address;
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	607b      	str	r3, [r7, #4]
        break;
 800595e:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005960:	f000 f838 	bl	80059d4 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f82b 	bl	80059c0 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800596a:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005970:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10e      	bne.n	8005998 <HAL_FLASH_IRQHandler+0x14c>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005984:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005986:	4b06      	ldr	r3, [pc, #24]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	4a05      	ldr	r2, [pc, #20]	; (80059a0 <HAL_FLASH_IRQHandler+0x154>)
 800598c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005990:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005992:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <HAL_FLASH_IRQHandler+0x15c>)
 8005994:	2200      	movs	r2, #0
 8005996:	751a      	strb	r2, [r3, #20]
  }
  
}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40023c00 	.word	0x40023c00
 80059a4:	ffff7ffb 	.word	0xffff7ffb
 80059a8:	200055fc 	.word	0x200055fc

080059ac <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80059d8:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <FLASH_SetErrorCode+0x8c>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d005      	beq.n	80059f0 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80059e4:	4b1f      	ldr	r3, [pc, #124]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f043 0320 	orr.w	r3, r3, #32
 80059ec:	4a1d      	ldr	r2, [pc, #116]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 80059ee:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80059f0:	4b1b      	ldr	r3, [pc, #108]	; (8005a60 <FLASH_SetErrorCode+0x8c>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0310 	and.w	r3, r3, #16
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f043 0310 	orr.w	r3, r3, #16
 8005a04:	4a17      	ldr	r2, [pc, #92]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 8005a06:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005a08:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <FLASH_SetErrorCode+0x8c>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005a14:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f043 0308 	orr.w	r3, r3, #8
 8005a1c:	4a11      	ldr	r2, [pc, #68]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 8005a1e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005a20:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <FLASH_SetErrorCode+0x8c>)
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	f043 0304 	orr.w	r3, r3, #4
 8005a34:	4a0b      	ldr	r2, [pc, #44]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 8005a36:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8005a38:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <FLASH_SetErrorCode+0x8c>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8005a44:	4b07      	ldr	r3, [pc, #28]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	4a05      	ldr	r2, [pc, #20]	; (8005a64 <FLASH_SetErrorCode+0x90>)
 8005a4e:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005a50:	4b03      	ldr	r3, [pc, #12]	; (8005a60 <FLASH_SetErrorCode+0x8c>)
 8005a52:	22f2      	movs	r2, #242	; 0xf2
 8005a54:	60da      	str	r2, [r3, #12]
}
 8005a56:	bf00      	nop
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40023c00 	.word	0x40023c00
 8005a64:	200055fc 	.word	0x200055fc

08005a68 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e010      	b.n	8005aa6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d103      	bne.n	8005a92 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a8e:	60fb      	str	r3, [r7, #12]
 8005a90:	e009      	b.n	8005aa6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d103      	bne.n	8005aa0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e002      	b.n	8005aa6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005aa0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005aa4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b0b      	cmp	r3, #11
 8005aaa:	d902      	bls.n	8005ab2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8005ab2:	4b14      	ldr	r3, [pc, #80]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005abc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005abe:	4b11      	ldr	r3, [pc, #68]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005ac0:	691a      	ldr	r2, [r3, #16]
 8005ac2:	4910      	ldr	r1, [pc, #64]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005aca:	4b0e      	ldr	r3, [pc, #56]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	4a0d      	ldr	r2, [pc, #52]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005ad0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ad4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005ad8:	691a      	ldr	r2, [r3, #16]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005ae2:	f043 0302 	orr.w	r3, r3, #2
 8005ae6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	4a05      	ldr	r2, [pc, #20]	; (8005b04 <FLASH_Erase_Sector+0x9c>)
 8005aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8005af4:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005af8:	bf00      	nop
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	40023c00 	.word	0x40023c00

08005b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b089      	sub	sp, #36	; 0x24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005b16:	2300      	movs	r3, #0
 8005b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b22:	2300      	movs	r3, #0
 8005b24:	61fb      	str	r3, [r7, #28]
 8005b26:	e175      	b.n	8005e14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b28:	2201      	movs	r2, #1
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	f040 8164 	bne.w	8005e0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d00b      	beq.n	8005b66 <HAL_GPIO_Init+0x5e>
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d007      	beq.n	8005b66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b5a:	2b11      	cmp	r3, #17
 8005b5c:	d003      	beq.n	8005b66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b12      	cmp	r3, #18
 8005b64:	d130      	bne.n	8005bc8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	2203      	movs	r2, #3
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 0201 	and.w	r2, r3, #1
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d003      	beq.n	8005c08 <HAL_GPIO_Init+0x100>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b12      	cmp	r3, #18
 8005c06:	d123      	bne.n	8005c50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	08da      	lsrs	r2, r3, #3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3208      	adds	r2, #8
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	220f      	movs	r2, #15
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	08da      	lsrs	r2, r3, #3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3208      	adds	r2, #8
 8005c4a:	69b9      	ldr	r1, [r7, #24]
 8005c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	4013      	ands	r3, r2
 8005c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f003 0203 	and.w	r2, r3, #3
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	fa02 f303 	lsl.w	r3, r2, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 80be 	beq.w	8005e0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c92:	4b65      	ldr	r3, [pc, #404]	; (8005e28 <HAL_GPIO_Init+0x320>)
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	4a64      	ldr	r2, [pc, #400]	; (8005e28 <HAL_GPIO_Init+0x320>)
 8005c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c9e:	4b62      	ldr	r3, [pc, #392]	; (8005e28 <HAL_GPIO_Init+0x320>)
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005caa:	4a60      	ldr	r2, [pc, #384]	; (8005e2c <HAL_GPIO_Init+0x324>)
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	089b      	lsrs	r3, r3, #2
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	220f      	movs	r2, #15
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	43db      	mvns	r3, r3
 8005cc8:	69ba      	ldr	r2, [r7, #24]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a57      	ldr	r2, [pc, #348]	; (8005e30 <HAL_GPIO_Init+0x328>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d037      	beq.n	8005d46 <HAL_GPIO_Init+0x23e>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a56      	ldr	r2, [pc, #344]	; (8005e34 <HAL_GPIO_Init+0x32c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d031      	beq.n	8005d42 <HAL_GPIO_Init+0x23a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a55      	ldr	r2, [pc, #340]	; (8005e38 <HAL_GPIO_Init+0x330>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d02b      	beq.n	8005d3e <HAL_GPIO_Init+0x236>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a54      	ldr	r2, [pc, #336]	; (8005e3c <HAL_GPIO_Init+0x334>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d025      	beq.n	8005d3a <HAL_GPIO_Init+0x232>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a53      	ldr	r2, [pc, #332]	; (8005e40 <HAL_GPIO_Init+0x338>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01f      	beq.n	8005d36 <HAL_GPIO_Init+0x22e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a52      	ldr	r2, [pc, #328]	; (8005e44 <HAL_GPIO_Init+0x33c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d019      	beq.n	8005d32 <HAL_GPIO_Init+0x22a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a51      	ldr	r2, [pc, #324]	; (8005e48 <HAL_GPIO_Init+0x340>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_GPIO_Init+0x226>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a50      	ldr	r2, [pc, #320]	; (8005e4c <HAL_GPIO_Init+0x344>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00d      	beq.n	8005d2a <HAL_GPIO_Init+0x222>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a4f      	ldr	r2, [pc, #316]	; (8005e50 <HAL_GPIO_Init+0x348>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <HAL_GPIO_Init+0x21e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a4e      	ldr	r2, [pc, #312]	; (8005e54 <HAL_GPIO_Init+0x34c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d101      	bne.n	8005d22 <HAL_GPIO_Init+0x21a>
 8005d1e:	2309      	movs	r3, #9
 8005d20:	e012      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d22:	230a      	movs	r3, #10
 8005d24:	e010      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d26:	2308      	movs	r3, #8
 8005d28:	e00e      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d2a:	2307      	movs	r3, #7
 8005d2c:	e00c      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d2e:	2306      	movs	r3, #6
 8005d30:	e00a      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d32:	2305      	movs	r3, #5
 8005d34:	e008      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d36:	2304      	movs	r3, #4
 8005d38:	e006      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e004      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e002      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <HAL_GPIO_Init+0x240>
 8005d46:	2300      	movs	r3, #0
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	f002 0203 	and.w	r2, r2, #3
 8005d4e:	0092      	lsls	r2, r2, #2
 8005d50:	4093      	lsls	r3, r2
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005d58:	4934      	ldr	r1, [pc, #208]	; (8005e2c <HAL_GPIO_Init+0x324>)
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	089b      	lsrs	r3, r3, #2
 8005d5e:	3302      	adds	r3, #2
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d66:	4b3c      	ldr	r3, [pc, #240]	; (8005e58 <HAL_GPIO_Init+0x350>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d8a:	4a33      	ldr	r2, [pc, #204]	; (8005e58 <HAL_GPIO_Init+0x350>)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005d90:	4b31      	ldr	r3, [pc, #196]	; (8005e58 <HAL_GPIO_Init+0x350>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <HAL_GPIO_Init+0x350>)
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dba:	4b27      	ldr	r3, [pc, #156]	; (8005e58 <HAL_GPIO_Init+0x350>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dde:	4a1e      	ldr	r2, [pc, #120]	; (8005e58 <HAL_GPIO_Init+0x350>)
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005de4:	4b1c      	ldr	r3, [pc, #112]	; (8005e58 <HAL_GPIO_Init+0x350>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	43db      	mvns	r3, r3
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4013      	ands	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e08:	4a13      	ldr	r2, [pc, #76]	; (8005e58 <HAL_GPIO_Init+0x350>)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	3301      	adds	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	2b0f      	cmp	r3, #15
 8005e18:	f67f ae86 	bls.w	8005b28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005e1c:	bf00      	nop
 8005e1e:	3724      	adds	r7, #36	; 0x24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr
 8005e28:	40023800 	.word	0x40023800
 8005e2c:	40013800 	.word	0x40013800
 8005e30:	40020000 	.word	0x40020000
 8005e34:	40020400 	.word	0x40020400
 8005e38:	40020800 	.word	0x40020800
 8005e3c:	40020c00 	.word	0x40020c00
 8005e40:	40021000 	.word	0x40021000
 8005e44:	40021400 	.word	0x40021400
 8005e48:	40021800 	.word	0x40021800
 8005e4c:	40021c00 	.word	0x40021c00
 8005e50:	40022000 	.word	0x40022000
 8005e54:	40022400 	.word	0x40022400
 8005e58:	40013c00 	.word	0x40013c00

08005e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	887b      	ldrh	r3, [r7, #2]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e74:	2301      	movs	r3, #1
 8005e76:	73fb      	strb	r3, [r7, #15]
 8005e78:	e001      	b.n	8005e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e9c:	787b      	ldrb	r3, [r7, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ea2:	887a      	ldrh	r2, [r7, #2]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ea8:	e003      	b.n	8005eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005eaa:	887b      	ldrh	r3, [r7, #2]
 8005eac:	041a      	lsls	r2, r3, #16
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	619a      	str	r2, [r3, #24]
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e07f      	b.n	8005fd2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fd fcea 	bl	80038c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2224      	movs	r2, #36	; 0x24
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0201 	bic.w	r2, r2, #1
 8005f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d107      	bne.n	8005f3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689a      	ldr	r2, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	e006      	b.n	8005f48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d104      	bne.n	8005f5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6859      	ldr	r1, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <HAL_I2C_Init+0x11c>)
 8005f66:	430b      	orrs	r3, r1
 8005f68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	ea42 0103 	orr.w	r1, r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	021a      	lsls	r2, r3, #8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69d9      	ldr	r1, [r3, #28]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1a      	ldr	r2, [r3, #32]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	02008000 	.word	0x02008000

08005fe0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b088      	sub	sp, #32
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	461a      	mov	r2, r3
 8005fec:	460b      	mov	r3, r1
 8005fee:	817b      	strh	r3, [r7, #10]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	f040 80da 	bne.w	80061b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_I2C_Master_Transmit+0x30>
 800600c:	2302      	movs	r3, #2
 800600e:	e0d3      	b.n	80061b8 <HAL_I2C_Master_Transmit+0x1d8>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006018:	f7fe fa82 	bl	8004520 <HAL_GetTick>
 800601c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	2319      	movs	r3, #25
 8006024:	2201      	movs	r2, #1
 8006026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fa00 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e0be      	b.n	80061b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2221      	movs	r2, #33	; 0x21
 800603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2210      	movs	r2, #16
 8006046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	893a      	ldrh	r2, [r7, #8]
 800605a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006066:	b29b      	uxth	r3, r3
 8006068:	2bff      	cmp	r3, #255	; 0xff
 800606a:	d90e      	bls.n	800608a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	22ff      	movs	r2, #255	; 0xff
 8006070:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006076:	b2da      	uxtb	r2, r3
 8006078:	8979      	ldrh	r1, [r7, #10]
 800607a:	4b51      	ldr	r3, [pc, #324]	; (80061c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 fb62 	bl	800674c <I2C_TransferConfig>
 8006088:	e06c      	b.n	8006164 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608e:	b29a      	uxth	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006098:	b2da      	uxtb	r2, r3
 800609a:	8979      	ldrh	r1, [r7, #10]
 800609c:	4b48      	ldr	r3, [pc, #288]	; (80061c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fb51 	bl	800674c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80060aa:	e05b      	b.n	8006164 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	6a39      	ldr	r1, [r7, #32]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 f9fd 	bl	80064b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e07b      	b.n	80061b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d034      	beq.n	8006164 <HAL_I2C_Master_Transmit+0x184>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d130      	bne.n	8006164 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	2200      	movs	r2, #0
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f98f 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e04d      	b.n	80061b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006120:	b29b      	uxth	r3, r3
 8006122:	2bff      	cmp	r3, #255	; 0xff
 8006124:	d90e      	bls.n	8006144 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	22ff      	movs	r2, #255	; 0xff
 800612a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006130:	b2da      	uxtb	r2, r3
 8006132:	8979      	ldrh	r1, [r7, #10]
 8006134:	2300      	movs	r3, #0
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fb05 	bl	800674c <I2C_TransferConfig>
 8006142:	e00f      	b.n	8006164 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006152:	b2da      	uxtb	r2, r3
 8006154:	8979      	ldrh	r1, [r7, #10]
 8006156:	2300      	movs	r3, #0
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 faf4 	bl	800674c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d19e      	bne.n	80060ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	6a39      	ldr	r1, [r7, #32]
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f9dc 	bl	8006530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e01a      	b.n	80061b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2220      	movs	r2, #32
 8006188:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6859      	ldr	r1, [r3, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8006196:	400b      	ands	r3, r1
 8006198:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2220      	movs	r2, #32
 800619e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e000      	b.n	80061b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80061b6:	2302      	movs	r3, #2
  }
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3718      	adds	r7, #24
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	80002000 	.word	0x80002000
 80061c4:	fe00e800 	.word	0xfe00e800

080061c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	607a      	str	r2, [r7, #4]
 80061d2:	461a      	mov	r2, r3
 80061d4:	460b      	mov	r3, r1
 80061d6:	817b      	strh	r3, [r7, #10]
 80061d8:	4613      	mov	r3, r2
 80061da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	f040 80db 	bne.w	80063a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d101      	bne.n	80061f8 <HAL_I2C_Master_Receive+0x30>
 80061f4:	2302      	movs	r3, #2
 80061f6:	e0d4      	b.n	80063a2 <HAL_I2C_Master_Receive+0x1da>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006200:	f7fe f98e 	bl	8004520 <HAL_GetTick>
 8006204:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2319      	movs	r3, #25
 800620c:	2201      	movs	r2, #1
 800620e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f90c 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e0bf      	b.n	80063a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2222      	movs	r2, #34	; 0x22
 8006226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2210      	movs	r2, #16
 800622e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	893a      	ldrh	r2, [r7, #8]
 8006242:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624e:	b29b      	uxth	r3, r3
 8006250:	2bff      	cmp	r3, #255	; 0xff
 8006252:	d90e      	bls.n	8006272 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	22ff      	movs	r2, #255	; 0xff
 8006258:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625e:	b2da      	uxtb	r2, r3
 8006260:	8979      	ldrh	r1, [r7, #10]
 8006262:	4b52      	ldr	r3, [pc, #328]	; (80063ac <HAL_I2C_Master_Receive+0x1e4>)
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fa6e 	bl	800674c <I2C_TransferConfig>
 8006270:	e06d      	b.n	800634e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006280:	b2da      	uxtb	r2, r3
 8006282:	8979      	ldrh	r1, [r7, #10]
 8006284:	4b49      	ldr	r3, [pc, #292]	; (80063ac <HAL_I2C_Master_Receive+0x1e4>)
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 fa5d 	bl	800674c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8006292:	e05c      	b.n	800634e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	6a39      	ldr	r1, [r7, #32]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f985 	bl	80065a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e07c      	b.n	80063a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062de:	b29b      	uxth	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d034      	beq.n	800634e <HAL_I2C_Master_Receive+0x186>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d130      	bne.n	800634e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	2200      	movs	r2, #0
 80062f4:	2180      	movs	r1, #128	; 0x80
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 f89a 	bl	8006430 <I2C_WaitOnFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e04d      	b.n	80063a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	2bff      	cmp	r3, #255	; 0xff
 800630e:	d90e      	bls.n	800632e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	22ff      	movs	r2, #255	; 0xff
 8006314:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631a:	b2da      	uxtb	r2, r3
 800631c:	8979      	ldrh	r1, [r7, #10]
 800631e:	2300      	movs	r3, #0
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 fa10 	bl	800674c <I2C_TransferConfig>
 800632c:	e00f      	b.n	800634e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633c:	b2da      	uxtb	r2, r3
 800633e:	8979      	ldrh	r1, [r7, #10]
 8006340:	2300      	movs	r3, #0
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f9ff 	bl	800674c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d19d      	bne.n	8006294 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	6a39      	ldr	r1, [r7, #32]
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f8e7 	bl	8006530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e01a      	b.n	80063a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2220      	movs	r2, #32
 8006372:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6859      	ldr	r1, [r3, #4]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <HAL_I2C_Master_Receive+0x1e8>)
 8006380:	400b      	ands	r3, r1
 8006382:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2220      	movs	r2, #32
 8006388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	e000      	b.n	80063a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80063a0:	2302      	movs	r3, #2
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	80002400 	.word	0x80002400
 80063b0:	fe00e800 	.word	0xfe00e800

080063b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
  }
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d103      	bne.n	8006406 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2200      	movs	r2, #0
 8006404:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d007      	beq.n	8006424 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	619a      	str	r2, [r3, #24]
  }
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006440:	e022      	b.n	8006488 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d01e      	beq.n	8006488 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644a:	f7fe f869 	bl	8004520 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d302      	bcc.n	8006460 <I2C_WaitOnFlagUntilTimeout+0x30>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d113      	bne.n	8006488 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006464:	f043 0220 	orr.w	r2, r3, #32
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e00f      	b.n	80064a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	699a      	ldr	r2, [r3, #24]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4013      	ands	r3, r2
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	bf0c      	ite	eq
 8006498:	2301      	moveq	r3, #1
 800649a:	2300      	movne	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d0cd      	beq.n	8006442 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064bc:	e02c      	b.n	8006518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f8dc 	bl	8006680 <I2C_IsAcknowledgeFailed>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e02a      	b.n	8006528 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d01e      	beq.n	8006518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064da:	f7fe f821 	bl	8004520 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d113      	bne.n	8006518 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f4:	f043 0220 	orr.w	r2, r3, #32
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e007      	b.n	8006528 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b02      	cmp	r3, #2
 8006524:	d1cb      	bne.n	80064be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800653c:	e028      	b.n	8006590 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 f89c 	bl	8006680 <I2C_IsAcknowledgeFailed>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e026      	b.n	80065a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006552:	f7fd ffe5 	bl	8004520 <HAL_GetTick>
 8006556:	4602      	mov	r2, r0
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	429a      	cmp	r2, r3
 8006560:	d302      	bcc.n	8006568 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d113      	bne.n	8006590 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656c:	f043 0220 	orr.w	r2, r3, #32
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2220      	movs	r2, #32
 8006578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e007      	b.n	80065a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b20      	cmp	r3, #32
 800659c:	d1cf      	bne.n	800653e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065b4:	e055      	b.n	8006662 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f860 	bl	8006680 <I2C_IsAcknowledgeFailed>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e053      	b.n	8006672 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d129      	bne.n	800662c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b04      	cmp	r3, #4
 80065e4:	d105      	bne.n	80065f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e03f      	b.n	8006672 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2220      	movs	r2, #32
 80065f8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6859      	ldr	r1, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006606:	400b      	ands	r3, r1
 8006608:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e022      	b.n	8006672 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662c:	f7fd ff78 	bl	8004520 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d302      	bcc.n	8006642 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10f      	bne.n	8006662 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2220      	movs	r2, #32
 8006652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e007      	b.n	8006672 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b04      	cmp	r3, #4
 800666e:	d1a2      	bne.n	80065b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	fe00e800 	.word	0xfe00e800

08006680 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b10      	cmp	r3, #16
 8006698:	d151      	bne.n	800673e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800669a:	e022      	b.n	80066e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d01e      	beq.n	80066e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a4:	f7fd ff3c 	bl	8004520 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d302      	bcc.n	80066ba <I2C_IsAcknowledgeFailed+0x3a>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d113      	bne.n	80066e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066be:	f043 0220 	orr.w	r2, r3, #32
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e02e      	b.n	8006740 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d1d5      	bne.n	800669c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2210      	movs	r2, #16
 80066f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2220      	movs	r2, #32
 80066fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff fe71 	bl	80063e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6859      	ldr	r1, [r3, #4]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <I2C_IsAcknowledgeFailed+0xc8>)
 8006712:	400b      	ands	r3, r1
 8006714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e000      	b.n	8006740 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	fe00e800 	.word	0xfe00e800

0800674c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	460b      	mov	r3, r1
 8006758:	817b      	strh	r3, [r7, #10]
 800675a:	4613      	mov	r3, r2
 800675c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	0d5b      	lsrs	r3, r3, #21
 8006768:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800676c:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <I2C_TransferConfig+0x58>)
 800676e:	430b      	orrs	r3, r1
 8006770:	43db      	mvns	r3, r3
 8006772:	ea02 0103 	and.w	r1, r2, r3
 8006776:	897b      	ldrh	r3, [r7, #10]
 8006778:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800677c:	7a7b      	ldrb	r3, [r7, #9]
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	431a      	orrs	r2, r3
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	431a      	orrs	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006796:	bf00      	nop
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	03ff63ff 	.word	0x03ff63ff

080067a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d138      	bne.n	8006830 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e032      	b.n	8006832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2224      	movs	r2, #36	; 0x24
 80067d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0201 	bic.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6819      	ldr	r1, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	e000      	b.n	8006832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006830:	2302      	movs	r3, #2
  }
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b20      	cmp	r3, #32
 8006852:	d139      	bne.n	80068c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800685e:	2302      	movs	r3, #2
 8006860:	e033      	b.n	80068ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2224      	movs	r2, #36	; 0x24
 800686e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006890:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4313      	orrs	r3, r2
 800689a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	e000      	b.n	80068ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
  }
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e022      	b.n	800692e <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fd f8d0 	bl	8003aa0 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2203      	movs	r2, #3
 8006904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f814 	bl	8006936 <HAL_MMC_InitCard>
 800690e:	4603      	mov	r3, r0
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e00a      	b.n	800692e <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8006936:	b5b0      	push	{r4, r5, r7, lr}
 8006938:	b08e      	sub	sp, #56	; 0x38
 800693a:	af04      	add	r7, sp, #16
 800693c:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006942:	2300      	movs	r3, #0
 8006944:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800694e:	2300      	movs	r3, #0
 8006950:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006952:	2376      	movs	r3, #118	; 0x76
 8006954:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hmmc->Instance, Init);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681d      	ldr	r5, [r3, #0]
 800695a:	466c      	mov	r4, sp
 800695c:	f107 0314 	add.w	r3, r7, #20
 8006960:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006968:	f107 0308 	add.w	r3, r7, #8
 800696c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800696e:	4628      	mov	r0, r5
 8006970:	f005 fdce 	bl	800c510 <SDMMC_Init>
 8006974:	4603      	mov	r3, r0
 8006976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 800697a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800697e:	2b01      	cmp	r3, #1
 8006980:	d101      	bne.n	8006986 <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e044      	b.n	8006a10 <HAL_MMC_InitCard+0xda>
  }

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006994:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hmmc->Instance);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f005 fde4 	bl	800c568 <SDMMC_PowerState_ON>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 80069a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_MMC_InitCard+0x7c>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e02e      	b.n	8006a10 <HAL_MMC_InitCard+0xda>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069c0:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa54 	bl	8006e70 <MMC_PowerON>
 80069c8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <HAL_MMC_InitCard+0xb2>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e013      	b.n	8006a10 <HAL_MMC_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f980 	bl	8006cee <MMC_InitCard>
 80069ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00b      	beq.n	8006a0e <HAL_MMC_InitCard+0xd8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	431a      	orrs	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <HAL_MMC_InitCard+0xda>
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3728      	adds	r7, #40	; 0x28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bdb0      	pop	{r4, r5, r7, pc}

08006a18 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a26:	0f9b      	lsrs	r3, r3, #30
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a32:	0e9b      	lsrs	r3, r3, #26
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	f003 030f 	and.w	r3, r3, #15
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a44:	0e1b      	lsrs	r3, r3, #24
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a56:	0c1b      	lsrs	r3, r3, #16
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a78:	0d1b      	lsrs	r3, r3, #20
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a84:	0c1b      	lsrs	r3, r3, #16
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a96:	0bdb      	lsrs	r3, r3, #15
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa8:	0b9b      	lsrs	r3, r3, #14
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aba:	0b5b      	lsrs	r3, r3, #13
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006acc:	0b1b      	lsrs	r3, r3, #12
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	2200      	movs	r2, #0
 8006ade:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006aea:	4013      	ands	r3, r2
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006af0:	0f92      	lsrs	r2, r2, #30
 8006af2:	431a      	orrs	r2, r3
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006afc:	0edb      	lsrs	r3, r3, #27
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b0e:	0e1b      	lsrs	r3, r3, #24
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b20:	0d5b      	lsrs	r3, r3, #21
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b32:	0c9b      	lsrs	r3, r3, #18
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b44:	0bdb      	lsrs	r3, r3, #15
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	761a      	strb	r2, [r3, #24]

  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	7e1b      	ldrb	r3, [r3, #24]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	3302      	adds	r3, #2
 8006b68:	2201      	movs	r2, #1
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b72:	fb02 f203 	mul.w	r2, r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	7a1b      	ldrb	r3, [r3, #8]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	f003 030f 	and.w	r3, r3, #15
 8006b84:	2201      	movs	r2, #1
 8006b86:	409a      	lsls	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	655a      	str	r2, [r3, #84]	; 0x54

  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006b94:	0a52      	lsrs	r2, r2, #9
 8006b96:	fb02 f203 	mul.w	r2, r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ba4:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006baa:	0b9b      	lsrs	r3, r3, #14
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bbc:	09db      	lsrs	r3, r3, #7
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bde:	0fdb      	lsrs	r3, r3, #31
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bea:	0f5b      	lsrs	r3, r3, #29
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 0303 	and.w	r3, r3, #3
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfc:	0e9b      	lsrs	r3, r3, #26
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0e:	0d9b      	lsrs	r3, r3, #22
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c20:	0d5b      	lsrs	r3, r3, #21
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c50:	0bdb      	lsrs	r3, r3, #15
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c64:	0b9b      	lsrs	r3, r3, #14
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	b2da      	uxtb	r2, r3
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c78:	0b5b      	lsrs	r3, r3, #13
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c8c:	0b1b      	lsrs	r3, r3, #12
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca0:	0a9b      	lsrs	r3, r3, #10
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	f003 0303 	and.w	r3, r3, #3
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cc8:	085b      	lsrs	r3, r3, #1
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8006cee:	b5b0      	push	{r4, r5, r7, lr}
 8006cf0:	b094      	sub	sp, #80	; 0x50
 8006cf2:	af04      	add	r7, sp, #16
 8006cf4:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f005 fc41 	bl	800c586 <SDMMC_GetPowerState>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8006d0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006d0e:	e0aa      	b.n	8006e66 <MMC_InitCard+0x178>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f005 fcd0 	bl	800c6ba <SDMMC_CmdSendCID>
 8006d1a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <MMC_InitCard+0x38>
  {
    return errorstate;
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	e09f      	b.n	8006e66 <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f005 fc70 	bl	800c612 <SDMMC_GetResponse>
 8006d32:	4602      	mov	r2, r0
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2104      	movs	r1, #4
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f005 fc67 	bl	800c612 <SDMMC_GetResponse>
 8006d44:	4602      	mov	r2, r0
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2108      	movs	r1, #8
 8006d50:	4618      	mov	r0, r3
 8006d52:	f005 fc5e 	bl	800c612 <SDMMC_GetResponse>
 8006d56:	4602      	mov	r2, r0
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	210c      	movs	r1, #12
 8006d62:	4618      	mov	r0, r3
 8006d64:	f005 fc55 	bl	800c612 <SDMMC_GetResponse>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f107 020e 	add.w	r2, r7, #14
 8006d76:	4611      	mov	r1, r2
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f005 fcdb 	bl	800c734 <SDMMC_CmdSetRelAdd>
 8006d7e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <MMC_InitCard+0x9c>
  {
    return errorstate;
 8006d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d88:	e06d      	b.n	8006e66 <MMC_InitCard+0x178>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8006d8a:	89fb      	ldrh	r3, [r7, #14]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	f005 fca9 	bl	800c6f6 <SDMMC_CmdSendCSD>
 8006da4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <MMC_InitCard+0xc2>
  {
    return errorstate;
 8006dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dae:	e05a      	b.n	8006e66 <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2100      	movs	r1, #0
 8006db6:	4618      	mov	r0, r3
 8006db8:	f005 fc2b 	bl	800c612 <SDMMC_GetResponse>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2104      	movs	r1, #4
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f005 fc22 	bl	800c612 <SDMMC_GetResponse>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2108      	movs	r1, #8
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f005 fc19 	bl	800c612 <SDMMC_GetResponse>
 8006de0:	4602      	mov	r2, r0
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	210c      	movs	r1, #12
 8006dec:	4618      	mov	r0, r3
 8006dee:	f005 fc10 	bl	800c612 <SDMMC_GetResponse>
 8006df2:	4602      	mov	r2, r0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2104      	movs	r1, #4
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f005 fc07 	bl	800c612 <SDMMC_GetResponse>
 8006e04:	4603      	mov	r3, r0
 8006e06:	0d1a      	lsrs	r2, r3, #20
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8006e0c:	f107 0310 	add.w	r3, r7, #16
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fe00 	bl	8006a18 <HAL_MMC_GetCardCSD>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <MMC_InitCard+0x136>
  {
    return hmmc->ErrorCode;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	e020      	b.n	8006e66 <MMC_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6819      	ldr	r1, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e2c:	041b      	lsls	r3, r3, #16
 8006e2e:	f04f 0400 	mov.w	r4, #0
 8006e32:	461a      	mov	r2, r3
 8006e34:	4623      	mov	r3, r4
 8006e36:	4608      	mov	r0, r1
 8006e38:	f005 fbfe 	bl	800c638 <SDMMC_CmdSelDesel>
 8006e3c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <MMC_InitCard+0x15a>
  {
    return errorstate;
 8006e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e46:	e00e      	b.n	8006e66 <MMC_InitCard+0x178>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hmmc->Instance, hmmc->Init);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681d      	ldr	r5, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	466c      	mov	r4, sp
 8006e50:	f103 0210 	add.w	r2, r3, #16
 8006e54:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e5e:	4628      	mov	r0, r5
 8006e60:	f005 fb56 	bl	800c510 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3740      	adds	r7, #64	; 0x40
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e70 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	2300      	movs	r3, #0
 8006e82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f005 fbf8 	bl	800c67e <SDMMC_CmdGoIdleState>
 8006e8e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d027      	beq.n	8006ee6 <MMC_PowerON+0x76>
  {
    return errorstate;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	e034      	b.n	8006f04 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	60ba      	str	r2, [r7, #8]
 8006ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d102      	bne.n	8006eae <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8006ea8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eac:	e02a      	b.n	8006f04 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4916      	ldr	r1, [pc, #88]	; (8006f0c <MMC_PowerON+0x9c>)
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f005 fc5e 	bl	800c776 <SDMMC_CmdOpCondition>
 8006eba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8006ec2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ec6:	e01d      	b.n	8006f04 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f005 fb9f 	bl	800c612 <SDMMC_GetResponse>
 8006ed4:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	0fdb      	lsrs	r3, r3, #31
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d101      	bne.n	8006ee2 <MMC_PowerON+0x72>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <MMC_PowerON+0x74>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0d6      	beq.n	8006e9a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	0e1b      	lsrs	r3, r3, #24
 8006ef0:	2bc0      	cmp	r3, #192	; 0xc0
 8006ef2:	d103      	bne.n	8006efc <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	645a      	str	r2, [r3, #68]	; 0x44
 8006efa:	e002      	b.n	8006f02 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	c0ff8000 	.word	0xc0ff8000

08006f10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f10:	b480      	push	{r7}
 8006f12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a04      	ldr	r2, [pc, #16]	; (8006f2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f1e:	6013      	str	r3, [r2, #0]
}
 8006f20:	bf00      	nop
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40007000 	.word	0x40007000

08006f30 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pins if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  PWR->CR1 |= PWR_CR1_PDDS;
 8006f34:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a07      	ldr	r2, [pc, #28]	; (8006f58 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8006f3a:	f043 0302 	orr.w	r3, r3, #2
 8006f3e:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8006f40:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	4a05      	ldr	r2, [pc, #20]	; (8006f5c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006f46:	f043 0304 	orr.w	r3, r3, #4
 8006f4a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8006f4c:	bf30      	wfi
}
 8006f4e:	bf00      	nop
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	40007000 	.word	0x40007000
 8006f5c:	e000ed00 	.word	0xe000ed00

08006f60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f6a:	4b23      	ldr	r3, [pc, #140]	; (8006ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	4a22      	ldr	r2, [pc, #136]	; (8006ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f74:	6413      	str	r3, [r2, #64]	; 0x40
 8006f76:	4b20      	ldr	r3, [pc, #128]	; (8006ff8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f82:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f8c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f8e:	f7fd fac7 	bl	8004520 <HAL_GetTick>
 8006f92:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f94:	e009      	b.n	8006faa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f96:	f7fd fac3 	bl	8004520 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fa4:	d901      	bls.n	8006faa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e022      	b.n	8006ff0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006faa:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb6:	d1ee      	bne.n	8006f96 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006fb8:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a0f      	ldr	r2, [pc, #60]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fc4:	f7fd faac 	bl	8004520 <HAL_GetTick>
 8006fc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fca:	e009      	b.n	8006fe0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fcc:	f7fd faa8 	bl	8004520 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fda:	d901      	bls.n	8006fe0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e007      	b.n	8006ff0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fe0:	4b06      	ldr	r3, [pc, #24]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fec:	d1ee      	bne.n	8006fcc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40023800 	.word	0x40023800
 8006ffc:	40007000 	.word	0x40007000

08007000 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af02      	add	r7, sp, #8
 8007006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007008:	f7fd fa8a 	bl	8004520 <HAL_GetTick>
 800700c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e067      	b.n	80070e8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7fc fc93 	bl	8003958 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007032:	f241 3188 	movw	r1, #5000	; 0x1388
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fc6c 	bl	8007914 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	3b01      	subs	r3, #1
 800704c:	021a      	lsls	r2, r3, #8
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800705a:	9300      	str	r3, [sp, #0]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	2120      	movs	r1, #32
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fc97 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 8007068:	4603      	mov	r3, r0
 800706a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800706c:	7afb      	ldrb	r3, [r7, #11]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d135      	bne.n	80070de <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	4b1d      	ldr	r3, [pc, #116]	; (80070f0 <HAL_QSPI_Init+0xf0>)
 800707a:	4013      	ands	r3, r2
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6852      	ldr	r2, [r2, #4]
 8007080:	0611      	lsls	r1, r2, #24
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	68d2      	ldr	r2, [r2, #12]
 8007086:	4311      	orrs	r1, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	69d2      	ldr	r2, [r2, #28]
 800708c:	4311      	orrs	r1, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6a12      	ldr	r2, [r2, #32]
 8007092:	4311      	orrs	r1, r2
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6812      	ldr	r2, [r2, #0]
 8007098:	430b      	orrs	r3, r1
 800709a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	4b14      	ldr	r3, [pc, #80]	; (80070f4 <HAL_QSPI_Init+0xf4>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	6912      	ldr	r2, [r2, #16]
 80070aa:	0411      	lsls	r1, r2, #16
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6952      	ldr	r2, [r2, #20]
 80070b0:	4311      	orrs	r1, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6992      	ldr	r2, [r2, #24]
 80070b6:	4311      	orrs	r1, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	430b      	orrs	r3, r1
 80070be:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80070e6:	7afb      	ldrb	r3, [r7, #11]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	00ffff2f 	.word	0x00ffff2f
 80070f4:	ffe0f8fe 	.word	0xffe0f8fe

080070f8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d064      	beq.n	80071e4 <HAL_QSPI_IRQHandler+0xec>
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d05f      	beq.n	80071e4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3320      	adds	r3, #32
 800712a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b12      	cmp	r3, #18
 8007136:	d125      	bne.n	8007184 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8007138:	e01c      	b.n	8007174 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00f      	beq.n	8007162 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	781a      	ldrb	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	1e5a      	subs	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007160:	e008      	b.n	8007174 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007170:	601a      	str	r2, [r3, #0]
          break;
 8007172:	e033      	b.n	80071dc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0304 	and.w	r3, r3, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1db      	bne.n	800713a <HAL_QSPI_IRQHandler+0x42>
 8007182:	e02b      	b.n	80071dc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b22      	cmp	r3, #34	; 0x22
 800718e:	d125      	bne.n	80071dc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8007190:	e01d      	b.n	80071ce <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	d010      	beq.n	80071bc <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	b2d2      	uxtb	r2, r2
 80071a4:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	1e5a      	subs	r2, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
 80071ba:	e008      	b.n	80071ce <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071ca:	601a      	str	r2, [r3, #0]
          break;
 80071cc:	e006      	b.n	80071dc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1da      	bne.n	8007192 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fb7b 	bl	80078d8 <HAL_QSPI_FifoThresholdCallback>
 80071e2:	e13c      	b.n	800745e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 80b0 	beq.w	8007350 <HAL_QSPI_IRQHandler+0x258>
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 80aa 	beq.w	8007350 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2202      	movs	r2, #2
 8007202:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8007212:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b12      	cmp	r3, #18
 800721e:	d120      	bne.n	8007262 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0304 	and.w	r3, r3, #4
 800722a:	2b00      	cmp	r3, #0
 800722c:	d011      	beq.n	8007252 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0204 	bic.w	r2, r2, #4
 800723c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0201 	bic.w	r2, r2, #1
 8007250:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fb32 	bl	80078c4 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007260:	e0fa      	b.n	8007458 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b22      	cmp	r3, #34	; 0x22
 800726c:	d143      	bne.n	80072f6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d012      	beq.n	80072a2 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0204 	bic.w	r2, r2, #4
 800728a:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0201 	bic.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	e021      	b.n	80072e6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3320      	adds	r3, #32
 80072a8:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80072aa:	e013      	b.n	80072d4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d017      	beq.n	80072e4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	7812      	ldrb	r2, [r2, #0]
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	1e5a      	subs	r2, r3, #1
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e4      	bne.n	80072ac <HAL_QSPI_IRQHandler+0x1b4>
 80072e2:	e000      	b.n	80072e6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 80072e4:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fade 	bl	80078b0 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80072f4:	e0b0      	b.n	8007458 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d107      	bne.n	8007312 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fac6 	bl	800789c <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007310:	e0a2      	b.n	8007458 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b08      	cmp	r3, #8
 800731c:	f040 809c 	bne.w	8007458 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695a      	ldr	r2, [r3, #20]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800732e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733c:	2b00      	cmp	r3, #0
 800733e:	d103      	bne.n	8007348 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 faa1 	bl	8007888 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007346:	e087      	b.n	8007458 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa93 	bl	8007874 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800734e:	e083      	b.n	8007458 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f003 0308 	and.w	r3, r3, #8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01f      	beq.n	800739a <HAL_QSPI_IRQHandler+0x2a2>
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01a      	beq.n	800739a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2208      	movs	r2, #8
 800736a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8007388:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 faaa 	bl	80078ec <HAL_QSPI_StatusMatchCallback>
 8007398:	e061      	b.n	800745e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d047      	beq.n	8007434 <HAL_QSPI_IRQHandler+0x33c>
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d042      	beq.n	8007434 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2201      	movs	r2, #1
 80073b4:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80073c4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	f043 0202 	orr.w	r2, r3, #2
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d021      	beq.n	8007424 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0204 	bic.w	r2, r2, #4
 80073ee:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	4a1c      	ldr	r2, [pc, #112]	; (8007468 <HAL_QSPI_IRQHandler+0x370>)
 80073f6:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fd ff9b 	bl	8005338 <HAL_DMA_Abort_IT>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d029      	beq.n	800745c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740c:	f043 0204 	orr.w	r2, r3, #4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fa29 	bl	8007874 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007422:	e01b      	b.n	800745c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fa21 	bl	8007874 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8007432:	e013      	b.n	800745c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00f      	beq.n	800745e <HAL_QSPI_IRQHandler+0x366>
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2210      	movs	r2, #16
 800744e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fa55 	bl	8007900 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8007456:	e002      	b.n	800745e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8007458:	bf00      	nop
 800745a:	e000      	b.n	800745e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800745c:	bf00      	nop
}
 800745e:	bf00      	nop
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	08007931 	.word	0x08007931

0800746c <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007478:	f7fd f852 	bl	8004520 <HAL_GetTick>
 800747c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_QSPI_Command+0x22>
 800748a:	2302      	movs	r3, #2
 800748c:	e048      	b.n	8007520 <HAL_QSPI_Command+0xb4>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d137      	bne.n	8007512 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	2200      	movs	r2, #0
 80074b8:	2120      	movs	r1, #32
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fa6b 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d125      	bne.n	8007516 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80074ca:	2200      	movs	r2, #0
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fa98 	bl	8007a04 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d115      	bne.n	8007508 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2201      	movs	r2, #1
 80074e4:	2102      	movs	r1, #2
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 fa55 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10f      	bne.n	8007516 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2202      	movs	r2, #2
 80074fc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007506:	e006      	b.n	8007516 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007510:	e001      	b.n	8007516 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8007512:	2302      	movs	r3, #2
 8007514:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800751e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3718      	adds	r7, #24
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b08a      	sub	sp, #40	; 0x28
 800752c:	af02      	add	r7, sp, #8
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8007538:	f7fc fff2 	bl	8004520 <HAL_GetTick>
 800753c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3320      	adds	r3, #32
 8007544:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_QSPI_Transmit+0x2e>
 8007552:	2302      	movs	r3, #2
 8007554:	e076      	b.n	8007644 <HAL_QSPI_Transmit+0x11c>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b01      	cmp	r3, #1
 8007568:	d165      	bne.n	8007636 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d056      	beq.n	8007624 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2212      	movs	r2, #18
 800757a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	695a      	ldr	r2, [r3, #20]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80075aa:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80075ac:	e01b      	b.n	80075e6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2201      	movs	r2, #1
 80075b6:	2104      	movs	r1, #4
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f9ec 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80075c2:	7ffb      	ldrb	r3, [r7, #31]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d113      	bne.n	80075f0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	1e5a      	subs	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1df      	bne.n	80075ae <HAL_QSPI_Transmit+0x86>
 80075ee:	e000      	b.n	80075f2 <HAL_QSPI_Transmit+0xca>
          break;
 80075f0:	bf00      	nop
      }

      if (status == HAL_OK)
 80075f2:	7ffb      	ldrb	r3, [r7, #31]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d110      	bne.n	800761a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2201      	movs	r2, #1
 8007600:	2102      	movs	r1, #2
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 f9c7 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800760c:	7ffb      	ldrb	r3, [r7, #31]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2202      	movs	r2, #2
 8007618:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007622:	e00a      	b.n	800763a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	f043 0208 	orr.w	r2, r3, #8
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	77fb      	strb	r3, [r7, #31]
 8007634:	e001      	b.n	800763a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007636:	2302      	movs	r3, #2
 8007638:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8007642:	7ffb      	ldrb	r3, [r7, #31]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	; 0x28
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007658:	2300      	movs	r3, #0
 800765a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800765c:	f7fc ff60 	bl	8004520 <HAL_GetTick>
 8007660:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3320      	adds	r3, #32
 8007670:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_QSPI_Receive+0x36>
 800767e:	2302      	movs	r3, #2
 8007680:	e07d      	b.n	800777e <HAL_QSPI_Receive+0x132>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b01      	cmp	r3, #1
 8007694:	d16c      	bne.n	8007770 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d05d      	beq.n	800775e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2222      	movs	r2, #34	; 0x22
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80076da:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 80076e4:	e01c      	b.n	8007720 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2201      	movs	r2, #1
 80076ee:	2106      	movs	r1, #6
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f950 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80076fa:	7ffb      	ldrb	r3, [r7, #31]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d114      	bne.n	800772a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	b2d2      	uxtb	r2, r2
 800770a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	1e5a      	subs	r2, r3, #1
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1de      	bne.n	80076e6 <HAL_QSPI_Receive+0x9a>
 8007728:	e000      	b.n	800772c <HAL_QSPI_Receive+0xe0>
          break;
 800772a:	bf00      	nop
      }

      if (status == HAL_OK)
 800772c:	7ffb      	ldrb	r3, [r7, #31]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d110      	bne.n	8007754 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	2201      	movs	r2, #1
 800773a:	2102      	movs	r1, #2
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f92a 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8007746:	7ffb      	ldrb	r3, [r7, #31]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2202      	movs	r2, #2
 8007752:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800775c:	e00a      	b.n	8007774 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007762:	f043 0208 	orr.w	r2, r3, #8
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	77fb      	strb	r3, [r7, #31]
 800776e:	e001      	b.n	8007774 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8007770:	2302      	movs	r3, #2
 8007772:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800777c:	7ffb      	ldrb	r3, [r7, #31]
}
 800777e:	4618      	mov	r0, r3
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af02      	add	r7, sp, #8
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007794:	f7fc fec4 	bl	8004520 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_QSPI_AutoPolling+0x24>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e060      	b.n	800786c <HAL_QSPI_AutoPolling+0xe6>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d14f      	bne.n	800785e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2242      	movs	r2, #66	; 0x42
 80077c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	2200      	movs	r2, #0
 80077d4:	2120      	movs	r1, #32
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 f8dd 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d13d      	bne.n	8007862 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6852      	ldr	r2, [r2, #4]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	6892      	ldr	r2, [r2, #8]
 8007802:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	431a      	orrs	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800781c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8007826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f8e9 	bl	8007a04 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	2201      	movs	r2, #1
 800783a:	2108      	movs	r1, #8
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 f8aa 	bl	8007996 <QSPI_WaitFlagStateUntilTimeout>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2208      	movs	r2, #8
 8007852:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800785c:	e001      	b.n	8007862 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800785e:	2302      	movs	r3, #2
 8007860:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b08      	cmp	r3, #8
 8007954:	d114      	bne.n	8007980 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2202      	movs	r2, #2
 800795c:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800796c:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0202 	orr.w	r2, r2, #2
 800797c:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800797e:	e006      	b.n	800798e <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff ff73 	bl	8007874 <HAL_QSPI_ErrorCallback>
}
 800798e:	bf00      	nop
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b084      	sub	sp, #16
 800799a:	af00      	add	r7, sp, #0
 800799c:	60f8      	str	r0, [r7, #12]
 800799e:	60b9      	str	r1, [r7, #8]
 80079a0:	603b      	str	r3, [r7, #0]
 80079a2:	4613      	mov	r3, r2
 80079a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80079a6:	e01a      	b.n	80079de <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ae:	d016      	beq.n	80079de <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b0:	f7fc fdb6 	bl	8004520 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d302      	bcc.n	80079c6 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10b      	bne.n	80079de <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2204      	movs	r2, #4
 80079ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	f043 0201 	orr.w	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e00e      	b.n	80079fc <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4013      	ands	r3, r2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	bf14      	ite	ne
 80079ec:	2301      	movne	r3, #1
 80079ee:	2300      	moveq	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d1d6      	bne.n	80079a8 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <QSPI_Config+0x28>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a1e:	d005      	beq.n	8007a2c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3a01      	subs	r2, #1
 8007a2a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80b9 	beq.w	8007ba8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d05f      	beq.n	8007afe <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	6892      	ldr	r2, [r2, #8]
 8007a46:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d031      	beq.n	8007ab4 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	049b      	lsls	r3, r3, #18
 8007a6c:	431a      	orrs	r2, r3
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	431a      	orrs	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	ea42 0103 	orr.w	r1, r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007aa4:	f000 812e 	beq.w	8007d04 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	6852      	ldr	r2, [r2, #4]
 8007ab0:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007ab2:	e127      	b.n	8007d04 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	431a      	orrs	r2, r3
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	049b      	lsls	r3, r3, #18
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	431a      	orrs	r2, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	431a      	orrs	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	ea42 0103 	orr.w	r1, r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	615a      	str	r2, [r3, #20]
}
 8007afc:	e102      	b.n	8007d04 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02e      	beq.n	8007b64 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	431a      	orrs	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	695b      	ldr	r3, [r3, #20]
 8007b20:	049b      	lsls	r3, r3, #18
 8007b22:	431a      	orrs	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	69db      	ldr	r3, [r3, #28]
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	ea42 0103 	orr.w	r1, r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007b54:	f000 80d6 	beq.w	8007d04 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	6852      	ldr	r2, [r2, #4]
 8007b60:	619a      	str	r2, [r3, #24]
}
 8007b62:	e0cf      	b.n	8007d04 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	431a      	orrs	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	049b      	lsls	r3, r3, #18
 8007b80:	431a      	orrs	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	431a      	orrs	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	ea42 0103 	orr.w	r1, r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	615a      	str	r2, [r3, #20]
}
 8007ba6:	e0ad      	b.n	8007d04 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d058      	beq.n	8007c62 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	6892      	ldr	r2, [r2, #8]
 8007bb8:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d02d      	beq.n	8007c1e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd0:	431a      	orrs	r2, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	049b      	lsls	r3, r3, #18
 8007bde:	431a      	orrs	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	431a      	orrs	r2, r3
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	ea42 0103 	orr.w	r1, r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007c10:	d078      	beq.n	8007d04 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	619a      	str	r2, [r3, #24]
}
 8007c1c:	e072      	b.n	8007d04 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c26:	431a      	orrs	r2, r3
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	431a      	orrs	r2, r3
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	049b      	lsls	r3, r3, #18
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	69db      	ldr	r3, [r3, #28]
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	ea42 0103 	orr.w	r1, r2, r3
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	615a      	str	r2, [r3, #20]
}
 8007c60:	e050      	b.n	8007d04 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d02a      	beq.n	8007cc0 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	431a      	orrs	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	049b      	lsls	r3, r3, #18
 8007c86:	431a      	orrs	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	6a1b      	ldr	r3, [r3, #32]
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	431a      	orrs	r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	ea42 0103 	orr.w	r1, r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007cb2:	d027      	beq.n	8007d04 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	6852      	ldr	r2, [r2, #4]
 8007cbc:	619a      	str	r2, [r3, #24]
}
 8007cbe:	e021      	b.n	8007d04 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01d      	beq.n	8007d04 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	049b      	lsls	r3, r3, #18
 8007ce4:	431a      	orrs	r2, r3
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	69db      	ldr	r3, [r3, #28]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	ea42 0103 	orr.w	r1, r2, r3
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	615a      	str	r2, [r3, #20]
}
 8007d04:	bf00      	nop
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e29b      	b.n	800825e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8087 	beq.w	8007e42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d34:	4b96      	ldr	r3, [pc, #600]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 030c 	and.w	r3, r3, #12
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d00c      	beq.n	8007d5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007d40:	4b93      	ldr	r3, [pc, #588]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 030c 	and.w	r3, r3, #12
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d112      	bne.n	8007d72 <HAL_RCC_OscConfig+0x62>
 8007d4c:	4b90      	ldr	r3, [pc, #576]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d58:	d10b      	bne.n	8007d72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d5a:	4b8d      	ldr	r3, [pc, #564]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d06c      	beq.n	8007e40 <HAL_RCC_OscConfig+0x130>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d168      	bne.n	8007e40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e275      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d7a:	d106      	bne.n	8007d8a <HAL_RCC_OscConfig+0x7a>
 8007d7c:	4b84      	ldr	r3, [pc, #528]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a83      	ldr	r2, [pc, #524]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	e02e      	b.n	8007de8 <HAL_RCC_OscConfig+0xd8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10c      	bne.n	8007dac <HAL_RCC_OscConfig+0x9c>
 8007d92:	4b7f      	ldr	r3, [pc, #508]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a7e      	ldr	r2, [pc, #504]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	4b7c      	ldr	r3, [pc, #496]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a7b      	ldr	r2, [pc, #492]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007da8:	6013      	str	r3, [r2, #0]
 8007daa:	e01d      	b.n	8007de8 <HAL_RCC_OscConfig+0xd8>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007db4:	d10c      	bne.n	8007dd0 <HAL_RCC_OscConfig+0xc0>
 8007db6:	4b76      	ldr	r3, [pc, #472]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a75      	ldr	r2, [pc, #468]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	4b73      	ldr	r3, [pc, #460]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a72      	ldr	r2, [pc, #456]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dcc:	6013      	str	r3, [r2, #0]
 8007dce:	e00b      	b.n	8007de8 <HAL_RCC_OscConfig+0xd8>
 8007dd0:	4b6f      	ldr	r3, [pc, #444]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a6e      	ldr	r2, [pc, #440]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dda:	6013      	str	r3, [r2, #0]
 8007ddc:	4b6c      	ldr	r3, [pc, #432]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a6b      	ldr	r2, [pc, #428]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d013      	beq.n	8007e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df0:	f7fc fb96 	bl	8004520 <HAL_GetTick>
 8007df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df6:	e008      	b.n	8007e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007df8:	f7fc fb92 	bl	8004520 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	2b64      	cmp	r3, #100	; 0x64
 8007e04:	d901      	bls.n	8007e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e229      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e0a:	4b61      	ldr	r3, [pc, #388]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0f0      	beq.n	8007df8 <HAL_RCC_OscConfig+0xe8>
 8007e16:	e014      	b.n	8007e42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e18:	f7fc fb82 	bl	8004520 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e20:	f7fc fb7e 	bl	8004520 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b64      	cmp	r3, #100	; 0x64
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e215      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007e32:	4b57      	ldr	r3, [pc, #348]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f0      	bne.n	8007e20 <HAL_RCC_OscConfig+0x110>
 8007e3e:	e000      	b.n	8007e42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d069      	beq.n	8007f22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e4e:	4b50      	ldr	r3, [pc, #320]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	f003 030c 	and.w	r3, r3, #12
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e5a:	4b4d      	ldr	r3, [pc, #308]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 030c 	and.w	r3, r3, #12
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d11c      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x190>
 8007e66:	4b4a      	ldr	r3, [pc, #296]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d116      	bne.n	8007ea0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e72:	4b47      	ldr	r3, [pc, #284]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0302 	and.w	r3, r3, #2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d005      	beq.n	8007e8a <HAL_RCC_OscConfig+0x17a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d001      	beq.n	8007e8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e1e9      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e8a:	4b41      	ldr	r3, [pc, #260]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	493d      	ldr	r1, [pc, #244]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e9e:	e040      	b.n	8007f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d023      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ea8:	4b39      	ldr	r3, [pc, #228]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a38      	ldr	r2, [pc, #224]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007eae:	f043 0301 	orr.w	r3, r3, #1
 8007eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb4:	f7fc fb34 	bl	8004520 <HAL_GetTick>
 8007eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ebc:	f7fc fb30 	bl	8004520 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e1c7      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ece:	4b30      	ldr	r3, [pc, #192]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d0f0      	beq.n	8007ebc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eda:	4b2d      	ldr	r3, [pc, #180]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	4929      	ldr	r1, [pc, #164]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	600b      	str	r3, [r1, #0]
 8007eee:	e018      	b.n	8007f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ef0:	4b27      	ldr	r3, [pc, #156]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a26      	ldr	r2, [pc, #152]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007ef6:	f023 0301 	bic.w	r3, r3, #1
 8007efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efc:	f7fc fb10 	bl	8004520 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f04:	f7fc fb0c 	bl	8004520 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e1a3      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007f16:	4b1e      	ldr	r3, [pc, #120]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f0      	bne.n	8007f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d038      	beq.n	8007fa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d019      	beq.n	8007f6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f36:	4b16      	ldr	r3, [pc, #88]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f3a:	4a15      	ldr	r2, [pc, #84]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007f3c:	f043 0301 	orr.w	r3, r3, #1
 8007f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f42:	f7fc faed 	bl	8004520 <HAL_GetTick>
 8007f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f4a:	f7fc fae9 	bl	8004520 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e180      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f5c:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0f0      	beq.n	8007f4a <HAL_RCC_OscConfig+0x23a>
 8007f68:	e01a      	b.n	8007fa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6e:	4a08      	ldr	r2, [pc, #32]	; (8007f90 <HAL_RCC_OscConfig+0x280>)
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f76:	f7fc fad3 	bl	8004520 <HAL_GetTick>
 8007f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f7c:	e00a      	b.n	8007f94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f7e:	f7fc facf 	bl	8004520 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d903      	bls.n	8007f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e166      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
 8007f90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f94:	4b92      	ldr	r3, [pc, #584]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8007f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f98:	f003 0302 	and.w	r3, r3, #2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1ee      	bne.n	8007f7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 80a4 	beq.w	80080f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fae:	4b8c      	ldr	r3, [pc, #560]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10d      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fba:	4b89      	ldr	r3, [pc, #548]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	4a88      	ldr	r2, [pc, #544]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8007fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8007fc6:	4b86      	ldr	r3, [pc, #536]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fce:	60bb      	str	r3, [r7, #8]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fd6:	4b83      	ldr	r3, [pc, #524]	; (80081e4 <HAL_RCC_OscConfig+0x4d4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d118      	bne.n	8008014 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007fe2:	4b80      	ldr	r3, [pc, #512]	; (80081e4 <HAL_RCC_OscConfig+0x4d4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a7f      	ldr	r2, [pc, #508]	; (80081e4 <HAL_RCC_OscConfig+0x4d4>)
 8007fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fee:	f7fc fa97 	bl	8004520 <HAL_GetTick>
 8007ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ff4:	e008      	b.n	8008008 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff6:	f7fc fa93 	bl	8004520 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	2b64      	cmp	r3, #100	; 0x64
 8008002:	d901      	bls.n	8008008 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008004:	2303      	movs	r3, #3
 8008006:	e12a      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008008:	4b76      	ldr	r3, [pc, #472]	; (80081e4 <HAL_RCC_OscConfig+0x4d4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0f0      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d106      	bne.n	800802a <HAL_RCC_OscConfig+0x31a>
 800801c:	4b70      	ldr	r3, [pc, #448]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 800801e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008020:	4a6f      	ldr	r2, [pc, #444]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	6713      	str	r3, [r2, #112]	; 0x70
 8008028:	e02d      	b.n	8008086 <HAL_RCC_OscConfig+0x376>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10c      	bne.n	800804c <HAL_RCC_OscConfig+0x33c>
 8008032:	4b6b      	ldr	r3, [pc, #428]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008036:	4a6a      	ldr	r2, [pc, #424]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	6713      	str	r3, [r2, #112]	; 0x70
 800803e:	4b68      	ldr	r3, [pc, #416]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008042:	4a67      	ldr	r2, [pc, #412]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008044:	f023 0304 	bic.w	r3, r3, #4
 8008048:	6713      	str	r3, [r2, #112]	; 0x70
 800804a:	e01c      	b.n	8008086 <HAL_RCC_OscConfig+0x376>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	2b05      	cmp	r3, #5
 8008052:	d10c      	bne.n	800806e <HAL_RCC_OscConfig+0x35e>
 8008054:	4b62      	ldr	r3, [pc, #392]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008058:	4a61      	ldr	r2, [pc, #388]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 800805a:	f043 0304 	orr.w	r3, r3, #4
 800805e:	6713      	str	r3, [r2, #112]	; 0x70
 8008060:	4b5f      	ldr	r3, [pc, #380]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	4a5e      	ldr	r2, [pc, #376]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	6713      	str	r3, [r2, #112]	; 0x70
 800806c:	e00b      	b.n	8008086 <HAL_RCC_OscConfig+0x376>
 800806e:	4b5c      	ldr	r3, [pc, #368]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008072:	4a5b      	ldr	r2, [pc, #364]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008074:	f023 0301 	bic.w	r3, r3, #1
 8008078:	6713      	str	r3, [r2, #112]	; 0x70
 800807a:	4b59      	ldr	r3, [pc, #356]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 800807c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807e:	4a58      	ldr	r2, [pc, #352]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008080:	f023 0304 	bic.w	r3, r3, #4
 8008084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d015      	beq.n	80080ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808e:	f7fc fa47 	bl	8004520 <HAL_GetTick>
 8008092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008094:	e00a      	b.n	80080ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008096:	f7fc fa43 	bl	8004520 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e0d8      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ac:	4b4c      	ldr	r3, [pc, #304]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 80080ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d0ee      	beq.n	8008096 <HAL_RCC_OscConfig+0x386>
 80080b8:	e014      	b.n	80080e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ba:	f7fc fa31 	bl	8004520 <HAL_GetTick>
 80080be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080c0:	e00a      	b.n	80080d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080c2:	f7fc fa2d 	bl	8004520 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d901      	bls.n	80080d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e0c2      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80080d8:	4b41      	ldr	r3, [pc, #260]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1ee      	bne.n	80080c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d105      	bne.n	80080f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ea:	4b3d      	ldr	r3, [pc, #244]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	4a3c      	ldr	r2, [pc, #240]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 80080f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80ae 	beq.w	800825c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008100:	4b37      	ldr	r3, [pc, #220]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 030c 	and.w	r3, r3, #12
 8008108:	2b08      	cmp	r3, #8
 800810a:	d06d      	beq.n	80081e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d14b      	bne.n	80081ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008114:	4b32      	ldr	r3, [pc, #200]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a31      	ldr	r2, [pc, #196]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 800811a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800811e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008120:	f7fc f9fe 	bl	8004520 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008128:	f7fc f9fa 	bl	8004520 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b02      	cmp	r3, #2
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e091      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800813a:	4b29      	ldr	r3, [pc, #164]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1f0      	bne.n	8008128 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69da      	ldr	r2, [r3, #28]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	431a      	orrs	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	019b      	lsls	r3, r3, #6
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	3b01      	subs	r3, #1
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	061b      	lsls	r3, r3, #24
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008170:	071b      	lsls	r3, r3, #28
 8008172:	491b      	ldr	r1, [pc, #108]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 8008174:	4313      	orrs	r3, r2
 8008176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008178:	4b19      	ldr	r3, [pc, #100]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a18      	ldr	r2, [pc, #96]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 800817e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008184:	f7fc f9cc 	bl	8004520 <HAL_GetTick>
 8008188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800818c:	f7fc f9c8 	bl	8004520 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e05f      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800819e:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f0      	beq.n	800818c <HAL_RCC_OscConfig+0x47c>
 80081aa:	e057      	b.n	800825c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a0b      	ldr	r2, [pc, #44]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 80081b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7fc f9b2 	bl	8004520 <HAL_GetTick>
 80081bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081c0:	f7fc f9ae 	bl	8004520 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e045      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081d2:	4b03      	ldr	r3, [pc, #12]	; (80081e0 <HAL_RCC_OscConfig+0x4d0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f0      	bne.n	80081c0 <HAL_RCC_OscConfig+0x4b0>
 80081de:	e03d      	b.n	800825c <HAL_RCC_OscConfig+0x54c>
 80081e0:	40023800 	.word	0x40023800
 80081e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80081e8:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <HAL_RCC_OscConfig+0x558>)
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d030      	beq.n	8008258 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008200:	429a      	cmp	r2, r3
 8008202:	d129      	bne.n	8008258 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800820e:	429a      	cmp	r2, r3
 8008210:	d122      	bne.n	8008258 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008218:	4013      	ands	r3, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800821e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008220:	4293      	cmp	r3, r2
 8008222:	d119      	bne.n	8008258 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	3b01      	subs	r3, #1
 8008232:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008234:	429a      	cmp	r2, r3
 8008236:	d10f      	bne.n	8008258 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008242:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008244:	429a      	cmp	r2, r3
 8008246:	d107      	bne.n	8008258 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008254:	429a      	cmp	r2, r3
 8008256:	d001      	beq.n	800825c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008258:	2301      	movs	r3, #1
 800825a:	e000      	b.n	800825e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	40023800 	.word	0x40023800

0800826c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0d0      	b.n	8008426 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008284:	4b6a      	ldr	r3, [pc, #424]	; (8008430 <HAL_RCC_ClockConfig+0x1c4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 030f 	and.w	r3, r3, #15
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d910      	bls.n	80082b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008292:	4b67      	ldr	r3, [pc, #412]	; (8008430 <HAL_RCC_ClockConfig+0x1c4>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f023 020f 	bic.w	r2, r3, #15
 800829a:	4965      	ldr	r1, [pc, #404]	; (8008430 <HAL_RCC_ClockConfig+0x1c4>)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	4313      	orrs	r3, r2
 80082a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082a2:	4b63      	ldr	r3, [pc, #396]	; (8008430 <HAL_RCC_ClockConfig+0x1c4>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d001      	beq.n	80082b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e0b8      	b.n	8008426 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d020      	beq.n	8008302 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d005      	beq.n	80082d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082cc:	4b59      	ldr	r3, [pc, #356]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	4a58      	ldr	r2, [pc, #352]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80082d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082e4:	4b53      	ldr	r3, [pc, #332]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	4a52      	ldr	r2, [pc, #328]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80082ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082f0:	4b50      	ldr	r3, [pc, #320]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	494d      	ldr	r1, [pc, #308]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d040      	beq.n	8008390 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d107      	bne.n	8008326 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008316:	4b47      	ldr	r3, [pc, #284]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d115      	bne.n	800834e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e07f      	b.n	8008426 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d107      	bne.n	800833e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800832e:	4b41      	ldr	r3, [pc, #260]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e073      	b.n	8008426 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800833e:	4b3d      	ldr	r3, [pc, #244]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e06b      	b.n	8008426 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800834e:	4b39      	ldr	r3, [pc, #228]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f023 0203 	bic.w	r2, r3, #3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4936      	ldr	r1, [pc, #216]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 800835c:	4313      	orrs	r3, r2
 800835e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008360:	f7fc f8de 	bl	8004520 <HAL_GetTick>
 8008364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008366:	e00a      	b.n	800837e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008368:	f7fc f8da 	bl	8004520 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	f241 3288 	movw	r2, #5000	; 0x1388
 8008376:	4293      	cmp	r3, r2
 8008378:	d901      	bls.n	800837e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e053      	b.n	8008426 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800837e:	4b2d      	ldr	r3, [pc, #180]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 020c 	and.w	r2, r3, #12
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	429a      	cmp	r2, r3
 800838e:	d1eb      	bne.n	8008368 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008390:	4b27      	ldr	r3, [pc, #156]	; (8008430 <HAL_RCC_ClockConfig+0x1c4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d210      	bcs.n	80083c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <HAL_RCC_ClockConfig+0x1c4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f023 020f 	bic.w	r2, r3, #15
 80083a6:	4922      	ldr	r1, [pc, #136]	; (8008430 <HAL_RCC_ClockConfig+0x1c4>)
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ae:	4b20      	ldr	r3, [pc, #128]	; (8008430 <HAL_RCC_ClockConfig+0x1c4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d001      	beq.n	80083c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e032      	b.n	8008426 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d008      	beq.n	80083de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083cc:	4b19      	ldr	r3, [pc, #100]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	4916      	ldr	r1, [pc, #88]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0308 	and.w	r3, r3, #8
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d009      	beq.n	80083fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80083ea:	4b12      	ldr	r3, [pc, #72]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	490e      	ldr	r1, [pc, #56]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80083fe:	f000 f831 	bl	8008464 <HAL_RCC_GetSysClockFreq>
 8008402:	4601      	mov	r1, r0
 8008404:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <HAL_RCC_ClockConfig+0x1c8>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	091b      	lsrs	r3, r3, #4
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	4a0a      	ldr	r2, [pc, #40]	; (8008438 <HAL_RCC_ClockConfig+0x1cc>)
 8008410:	5cd3      	ldrb	r3, [r2, r3]
 8008412:	fa21 f303 	lsr.w	r3, r1, r3
 8008416:	4a09      	ldr	r2, [pc, #36]	; (800843c <HAL_RCC_ClockConfig+0x1d0>)
 8008418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800841a:	4b09      	ldr	r3, [pc, #36]	; (8008440 <HAL_RCC_ClockConfig+0x1d4>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f7fc f83a 	bl	8004498 <HAL_InitTick>

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	40023c00 	.word	0x40023c00
 8008434:	40023800 	.word	0x40023800
 8008438:	08014614 	.word	0x08014614
 800843c:	20000048 	.word	0x20000048
 8008440:	20000064 	.word	0x20000064

08008444 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <HAL_RCC_EnableCSS+0x1c>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a04      	ldr	r2, [pc, #16]	; (8008460 <HAL_RCC_EnableCSS+0x1c>)
 800844e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008452:	6013      	str	r3, [r2, #0]
}
 8008454:	bf00      	nop
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40023800 	.word	0x40023800

08008464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	607b      	str	r3, [r7, #4]
 800846e:	2300      	movs	r3, #0
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	2300      	movs	r3, #0
 8008474:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800847a:	4b50      	ldr	r3, [pc, #320]	; (80085bc <HAL_RCC_GetSysClockFreq+0x158>)
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f003 030c 	and.w	r3, r3, #12
 8008482:	2b04      	cmp	r3, #4
 8008484:	d007      	beq.n	8008496 <HAL_RCC_GetSysClockFreq+0x32>
 8008486:	2b08      	cmp	r3, #8
 8008488:	d008      	beq.n	800849c <HAL_RCC_GetSysClockFreq+0x38>
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 808d 	bne.w	80085aa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008490:	4b4b      	ldr	r3, [pc, #300]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008492:	60bb      	str	r3, [r7, #8]
      break;
 8008494:	e08c      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008496:	4b4b      	ldr	r3, [pc, #300]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8008498:	60bb      	str	r3, [r7, #8]
      break;
 800849a:	e089      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800849c:	4b47      	ldr	r3, [pc, #284]	; (80085bc <HAL_RCC_GetSysClockFreq+0x158>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80084a6:	4b45      	ldr	r3, [pc, #276]	; (80085bc <HAL_RCC_GetSysClockFreq+0x158>)
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d023      	beq.n	80084fa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084b2:	4b42      	ldr	r3, [pc, #264]	; (80085bc <HAL_RCC_GetSysClockFreq+0x158>)
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	099b      	lsrs	r3, r3, #6
 80084b8:	f04f 0400 	mov.w	r4, #0
 80084bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	ea03 0501 	and.w	r5, r3, r1
 80084c8:	ea04 0602 	and.w	r6, r4, r2
 80084cc:	4a3d      	ldr	r2, [pc, #244]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80084ce:	fb02 f106 	mul.w	r1, r2, r6
 80084d2:	2200      	movs	r2, #0
 80084d4:	fb02 f205 	mul.w	r2, r2, r5
 80084d8:	440a      	add	r2, r1
 80084da:	493a      	ldr	r1, [pc, #232]	; (80085c4 <HAL_RCC_GetSysClockFreq+0x160>)
 80084dc:	fba5 0101 	umull	r0, r1, r5, r1
 80084e0:	1853      	adds	r3, r2, r1
 80084e2:	4619      	mov	r1, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f04f 0400 	mov.w	r4, #0
 80084ea:	461a      	mov	r2, r3
 80084ec:	4623      	mov	r3, r4
 80084ee:	f7f7 ff0f 	bl	8000310 <__aeabi_uldivmod>
 80084f2:	4603      	mov	r3, r0
 80084f4:	460c      	mov	r4, r1
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	e049      	b.n	800858e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084fa:	4b30      	ldr	r3, [pc, #192]	; (80085bc <HAL_RCC_GetSysClockFreq+0x158>)
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	099b      	lsrs	r3, r3, #6
 8008500:	f04f 0400 	mov.w	r4, #0
 8008504:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008508:	f04f 0200 	mov.w	r2, #0
 800850c:	ea03 0501 	and.w	r5, r3, r1
 8008510:	ea04 0602 	and.w	r6, r4, r2
 8008514:	4629      	mov	r1, r5
 8008516:	4632      	mov	r2, r6
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	f04f 0400 	mov.w	r4, #0
 8008520:	0154      	lsls	r4, r2, #5
 8008522:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008526:	014b      	lsls	r3, r1, #5
 8008528:	4619      	mov	r1, r3
 800852a:	4622      	mov	r2, r4
 800852c:	1b49      	subs	r1, r1, r5
 800852e:	eb62 0206 	sbc.w	r2, r2, r6
 8008532:	f04f 0300 	mov.w	r3, #0
 8008536:	f04f 0400 	mov.w	r4, #0
 800853a:	0194      	lsls	r4, r2, #6
 800853c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008540:	018b      	lsls	r3, r1, #6
 8008542:	1a5b      	subs	r3, r3, r1
 8008544:	eb64 0402 	sbc.w	r4, r4, r2
 8008548:	f04f 0100 	mov.w	r1, #0
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	00e2      	lsls	r2, r4, #3
 8008552:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008556:	00d9      	lsls	r1, r3, #3
 8008558:	460b      	mov	r3, r1
 800855a:	4614      	mov	r4, r2
 800855c:	195b      	adds	r3, r3, r5
 800855e:	eb44 0406 	adc.w	r4, r4, r6
 8008562:	f04f 0100 	mov.w	r1, #0
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	02a2      	lsls	r2, r4, #10
 800856c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008570:	0299      	lsls	r1, r3, #10
 8008572:	460b      	mov	r3, r1
 8008574:	4614      	mov	r4, r2
 8008576:	4618      	mov	r0, r3
 8008578:	4621      	mov	r1, r4
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f04f 0400 	mov.w	r4, #0
 8008580:	461a      	mov	r2, r3
 8008582:	4623      	mov	r3, r4
 8008584:	f7f7 fec4 	bl	8000310 <__aeabi_uldivmod>
 8008588:	4603      	mov	r3, r0
 800858a:	460c      	mov	r4, r1
 800858c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800858e:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <HAL_RCC_GetSysClockFreq+0x158>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	0c1b      	lsrs	r3, r3, #16
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	3301      	adds	r3, #1
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a6:	60bb      	str	r3, [r7, #8]
      break;
 80085a8:	e002      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80085ac:	60bb      	str	r3, [r7, #8]
      break;
 80085ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80085b0:	68bb      	ldr	r3, [r7, #8]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085ba:	bf00      	nop
 80085bc:	40023800 	.word	0x40023800
 80085c0:	00f42400 	.word	0x00f42400
 80085c4:	017d7840 	.word	0x017d7840

080085c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085c8:	b480      	push	{r7}
 80085ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085cc:	4b03      	ldr	r3, [pc, #12]	; (80085dc <HAL_RCC_GetHCLKFreq+0x14>)
 80085ce:	681b      	ldr	r3, [r3, #0]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000048 	.word	0x20000048

080085e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80085e4:	f7ff fff0 	bl	80085c8 <HAL_RCC_GetHCLKFreq>
 80085e8:	4601      	mov	r1, r0
 80085ea:	4b05      	ldr	r3, [pc, #20]	; (8008600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	0a9b      	lsrs	r3, r3, #10
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	4a03      	ldr	r2, [pc, #12]	; (8008604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085f6:	5cd3      	ldrb	r3, [r2, r3]
 80085f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	40023800 	.word	0x40023800
 8008604:	08014624 	.word	0x08014624

08008608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800860c:	f7ff ffdc 	bl	80085c8 <HAL_RCC_GetHCLKFreq>
 8008610:	4601      	mov	r1, r0
 8008612:	4b05      	ldr	r3, [pc, #20]	; (8008628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	0b5b      	lsrs	r3, r3, #13
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	4a03      	ldr	r2, [pc, #12]	; (800862c <HAL_RCC_GetPCLK2Freq+0x24>)
 800861e:	5cd3      	ldrb	r3, [r2, r3]
 8008620:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008624:	4618      	mov	r0, r3
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40023800 	.word	0x40023800
 800862c:	08014624 	.word	0x08014624

08008630 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8008634:	4b06      	ldr	r3, [pc, #24]	; (8008650 <HAL_RCC_NMI_IRQHandler+0x20>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863c:	2b80      	cmp	r3, #128	; 0x80
 800863e:	d104      	bne.n	800864a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8008640:	f000 f80a 	bl	8008658 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8008644:	4b03      	ldr	r3, [pc, #12]	; (8008654 <HAL_RCC_NMI_IRQHandler+0x24>)
 8008646:	2280      	movs	r2, #128	; 0x80
 8008648:	701a      	strb	r2, [r3, #0]
  }
}
 800864a:	bf00      	nop
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	40023800 	.word	0x40023800
 8008654:	4002380e 	.word	0x4002380e

08008658 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
	...

08008668 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800867c:	2300      	movs	r3, #0
 800867e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008680:	2300      	movs	r3, #0
 8008682:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0301 	and.w	r3, r3, #1
 800868c:	2b00      	cmp	r3, #0
 800868e:	d012      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008690:	4b69      	ldr	r3, [pc, #420]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	4a68      	ldr	r2, [pc, #416]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008696:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800869a:	6093      	str	r3, [r2, #8]
 800869c:	4b66      	ldr	r3, [pc, #408]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a4:	4964      	ldr	r1, [pc, #400]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80086b2:	2301      	movs	r3, #1
 80086b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d017      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086c2:	4b5d      	ldr	r3, [pc, #372]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d0:	4959      	ldr	r1, [pc, #356]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e0:	d101      	bne.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80086e2:	2301      	movs	r3, #1
 80086e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80086ee:	2301      	movs	r3, #1
 80086f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d017      	beq.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80086fe:	4b4e      	ldr	r3, [pc, #312]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008704:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	494a      	ldr	r1, [pc, #296]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800871c:	d101      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800871e:	2301      	movs	r3, #1
 8008720:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800872a:	2301      	movs	r3, #1
 800872c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800873a:	2301      	movs	r3, #1
 800873c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0320 	and.w	r3, r3, #32
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 808b 	beq.w	8008862 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800874c:	4b3a      	ldr	r3, [pc, #232]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	4a39      	ldr	r2, [pc, #228]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008756:	6413      	str	r3, [r2, #64]	; 0x40
 8008758:	4b37      	ldr	r3, [pc, #220]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800875a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008760:	60bb      	str	r3, [r7, #8]
 8008762:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008764:	4b35      	ldr	r3, [pc, #212]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a34      	ldr	r2, [pc, #208]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800876a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800876e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008770:	f7fb fed6 	bl	8004520 <HAL_GetTick>
 8008774:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008776:	e008      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008778:	f7fb fed2 	bl	8004520 <HAL_GetTick>
 800877c:	4602      	mov	r2, r0
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	2b64      	cmp	r3, #100	; 0x64
 8008784:	d901      	bls.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e38d      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800878a:	4b2c      	ldr	r3, [pc, #176]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0f0      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008796:	4b28      	ldr	r3, [pc, #160]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800879e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d035      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d02e      	beq.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087b4:	4b20      	ldr	r3, [pc, #128]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80087be:	4b1e      	ldr	r3, [pc, #120]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	4a1d      	ldr	r2, [pc, #116]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80087ca:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ce:	4a1a      	ldr	r2, [pc, #104]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80087dc:	4b16      	ldr	r3, [pc, #88]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80087de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d114      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e8:	f7fb fe9a 	bl	8004520 <HAL_GetTick>
 80087ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087ee:	e00a      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80087f0:	f7fb fe96 	bl	8004520 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80087fe:	4293      	cmp	r3, r2
 8008800:	d901      	bls.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008802:	2303      	movs	r3, #3
 8008804:	e34f      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008806:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d0ee      	beq.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800881a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800881e:	d111      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008820:	4b05      	ldr	r3, [pc, #20]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800882c:	4b04      	ldr	r3, [pc, #16]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800882e:	400b      	ands	r3, r1
 8008830:	4901      	ldr	r1, [pc, #4]	; (8008838 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008832:	4313      	orrs	r3, r2
 8008834:	608b      	str	r3, [r1, #8]
 8008836:	e00b      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008838:	40023800 	.word	0x40023800
 800883c:	40007000 	.word	0x40007000
 8008840:	0ffffcff 	.word	0x0ffffcff
 8008844:	4bb3      	ldr	r3, [pc, #716]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	4ab2      	ldr	r2, [pc, #712]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800884a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800884e:	6093      	str	r3, [r2, #8]
 8008850:	4bb0      	ldr	r3, [pc, #704]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800885c:	49ad      	ldr	r1, [pc, #692]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800885e:	4313      	orrs	r3, r2
 8008860:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	2b00      	cmp	r3, #0
 800886c:	d010      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800886e:	4ba9      	ldr	r3, [pc, #676]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008874:	4aa7      	ldr	r2, [pc, #668]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800887a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800887e:	4ba5      	ldr	r3, [pc, #660]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008880:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	49a2      	ldr	r1, [pc, #648]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800888a:	4313      	orrs	r3, r2
 800888c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800889c:	4b9d      	ldr	r3, [pc, #628]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800889e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088aa:	499a      	ldr	r1, [pc, #616]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00a      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088be:	4b95      	ldr	r3, [pc, #596]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088cc:	4991      	ldr	r1, [pc, #580]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80088e0:	4b8c      	ldr	r3, [pc, #560]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ee:	4989      	ldr	r1, [pc, #548]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008902:	4b84      	ldr	r3, [pc, #528]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008908:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008910:	4980      	ldr	r1, [pc, #512]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008912:	4313      	orrs	r3, r2
 8008914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008924:	4b7b      	ldr	r3, [pc, #492]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892a:	f023 0203 	bic.w	r2, r3, #3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008932:	4978      	ldr	r1, [pc, #480]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008934:	4313      	orrs	r3, r2
 8008936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008946:	4b73      	ldr	r3, [pc, #460]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800894c:	f023 020c 	bic.w	r2, r3, #12
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008954:	496f      	ldr	r1, [pc, #444]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008956:	4313      	orrs	r3, r2
 8008958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00a      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008968:	4b6a      	ldr	r3, [pc, #424]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800896a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800896e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008976:	4967      	ldr	r1, [pc, #412]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008978:	4313      	orrs	r3, r2
 800897a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800898a:	4b62      	ldr	r3, [pc, #392]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800898c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008990:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008998:	495e      	ldr	r1, [pc, #376]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800899a:	4313      	orrs	r3, r2
 800899c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80089ac:	4b59      	ldr	r3, [pc, #356]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ba:	4956      	ldr	r1, [pc, #344]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00a      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80089ce:	4b51      	ldr	r3, [pc, #324]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089dc:	494d      	ldr	r1, [pc, #308]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d00a      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80089f0:	4b48      	ldr	r3, [pc, #288]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80089f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089fe:	4945      	ldr	r1, [pc, #276]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008a12:	4b40      	ldr	r3, [pc, #256]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a20:	493c      	ldr	r1, [pc, #240]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00a      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a34:	4b37      	ldr	r3, [pc, #220]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a42:	4934      	ldr	r1, [pc, #208]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a44:	4313      	orrs	r3, r2
 8008a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d011      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008a56:	4b2f      	ldr	r3, [pc, #188]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a64:	492b      	ldr	r1, [pc, #172]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a66:	4313      	orrs	r3, r2
 8008a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a74:	d101      	bne.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008a76:	2301      	movs	r3, #1
 8008a78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008a86:	2301      	movs	r3, #1
 8008a88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a96:	4b1f      	ldr	r3, [pc, #124]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa4:	491b      	ldr	r1, [pc, #108]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008ab8:	4b16      	ldr	r3, [pc, #88]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008abe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ac8:	4912      	ldr	r1, [pc, #72]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00b      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008adc:	4b0d      	ldr	r3, [pc, #52]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aec:	4909      	ldr	r1, [pc, #36]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00f      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b00:	4b04      	ldr	r3, [pc, #16]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8008b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b10:	e002      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8008b12:	bf00      	nop
 8008b14:	40023800 	.word	0x40023800
 8008b18:	4985      	ldr	r1, [pc, #532]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008b2c:	4b80      	ldr	r3, [pc, #512]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b3c:	497c      	ldr	r1, [pc, #496]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d005      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b52:	f040 80d6 	bne.w	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008b56:	4b76      	ldr	r3, [pc, #472]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a75      	ldr	r2, [pc, #468]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b62:	f7fb fcdd 	bl	8004520 <HAL_GetTick>
 8008b66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b68:	e008      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b6a:	f7fb fcd9 	bl	8004520 <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	2b64      	cmp	r3, #100	; 0x64
 8008b76:	d901      	bls.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e194      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b7c:	4b6c      	ldr	r3, [pc, #432]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1f0      	bne.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d021      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11d      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008b9c:	4b64      	ldr	r3, [pc, #400]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba2:	0c1b      	lsrs	r3, r3, #16
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008baa:	4b61      	ldr	r3, [pc, #388]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb0:	0e1b      	lsrs	r3, r3, #24
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	019a      	lsls	r2, r3, #6
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	041b      	lsls	r3, r3, #16
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	061b      	lsls	r3, r3, #24
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	071b      	lsls	r3, r3, #28
 8008bd0:	4957      	ldr	r1, [pc, #348]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d004      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x586>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bec:	d00a      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d02e      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c02:	d129      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008c04:	4b4a      	ldr	r3, [pc, #296]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c0a:	0c1b      	lsrs	r3, r3, #16
 8008c0c:	f003 0303 	and.w	r3, r3, #3
 8008c10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c12:	4b47      	ldr	r3, [pc, #284]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c18:	0f1b      	lsrs	r3, r3, #28
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	019a      	lsls	r2, r3, #6
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	041b      	lsls	r3, r3, #16
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	061b      	lsls	r3, r3, #24
 8008c32:	431a      	orrs	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	071b      	lsls	r3, r3, #28
 8008c38:	493d      	ldr	r1, [pc, #244]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008c40:	4b3b      	ldr	r3, [pc, #236]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c46:	f023 021f 	bic.w	r2, r3, #31
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	4937      	ldr	r1, [pc, #220]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c52:	4313      	orrs	r3, r2
 8008c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01d      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008c64:	4b32      	ldr	r3, [pc, #200]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c6a:	0e1b      	lsrs	r3, r3, #24
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c72:	4b2f      	ldr	r3, [pc, #188]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c78:	0f1b      	lsrs	r3, r3, #28
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	019a      	lsls	r2, r3, #6
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	041b      	lsls	r3, r3, #16
 8008c8c:	431a      	orrs	r2, r3
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	061b      	lsls	r3, r3, #24
 8008c92:	431a      	orrs	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	071b      	lsls	r3, r3, #28
 8008c98:	4925      	ldr	r1, [pc, #148]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d011      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	019a      	lsls	r2, r3, #6
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	041b      	lsls	r3, r3, #16
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	071b      	lsls	r3, r3, #28
 8008cc8:	4919      	ldr	r1, [pc, #100]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008cd0:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cdc:	f7fb fc20 	bl	8004520 <HAL_GetTick>
 8008ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008ce4:	f7fb fc1c 	bl	8004520 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b64      	cmp	r3, #100	; 0x64
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e0d7      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008cf6:	4b0e      	ldr	r3, [pc, #56]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d0f0      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	f040 80cd 	bne.w	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008d0a:	4b09      	ldr	r3, [pc, #36]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a08      	ldr	r2, [pc, #32]	; (8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8008d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d16:	f7fb fc03 	bl	8004520 <HAL_GetTick>
 8008d1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d1c:	e00a      	b.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008d1e:	f7fb fbff 	bl	8004520 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b64      	cmp	r3, #100	; 0x64
 8008d2a:	d903      	bls.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e0ba      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8008d30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d34:	4b5e      	ldr	r3, [pc, #376]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d40:	d0ed      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d02e      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d12a      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008d6a:	4b51      	ldr	r3, [pc, #324]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d70:	0c1b      	lsrs	r3, r3, #16
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008d78:	4b4d      	ldr	r3, [pc, #308]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	0f1b      	lsrs	r3, r3, #28
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	019a      	lsls	r2, r3, #6
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	041b      	lsls	r3, r3, #16
 8008d90:	431a      	orrs	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	061b      	lsls	r3, r3, #24
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	071b      	lsls	r3, r3, #28
 8008d9e:	4944      	ldr	r1, [pc, #272]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008da0:	4313      	orrs	r3, r2
 8008da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008da6:	4b42      	ldr	r3, [pc, #264]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	3b01      	subs	r3, #1
 8008db6:	021b      	lsls	r3, r3, #8
 8008db8:	493d      	ldr	r1, [pc, #244]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d022      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dd4:	d11d      	bne.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008dd6:	4b36      	ldr	r3, [pc, #216]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ddc:	0e1b      	lsrs	r3, r3, #24
 8008dde:	f003 030f 	and.w	r3, r3, #15
 8008de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008de4:	4b32      	ldr	r3, [pc, #200]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dea:	0f1b      	lsrs	r3, r3, #28
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	019a      	lsls	r2, r3, #6
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	041b      	lsls	r3, r3, #16
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	061b      	lsls	r3, r3, #24
 8008e04:	431a      	orrs	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	071b      	lsls	r3, r3, #28
 8008e0a:	4929      	ldr	r1, [pc, #164]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d028      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e1e:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e24:	0e1b      	lsrs	r3, r3, #24
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008e2c:	4b20      	ldr	r3, [pc, #128]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e32:	0c1b      	lsrs	r3, r3, #16
 8008e34:	f003 0303 	and.w	r3, r3, #3
 8008e38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	019a      	lsls	r2, r3, #6
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	041b      	lsls	r3, r3, #16
 8008e44:	431a      	orrs	r2, r3
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	061b      	lsls	r3, r3, #24
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	071b      	lsls	r3, r3, #28
 8008e52:	4917      	ldr	r1, [pc, #92]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008e5a:	4b15      	ldr	r3, [pc, #84]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e68:	4911      	ldr	r1, [pc, #68]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008e70:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a0e      	ldr	r2, [pc, #56]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e7c:	f7fb fb50 	bl	8004520 <HAL_GetTick>
 8008e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e82:	e008      	b.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e84:	f7fb fb4c 	bl	8004520 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b64      	cmp	r3, #100	; 0x64
 8008e90:	d901      	bls.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e007      	b.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008e96:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea2:	d1ef      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3720      	adds	r7, #32
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	40023800 	.word	0x40023800

08008eb4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e06b      	b.n	8008f9e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	7f5b      	ldrb	r3, [r3, #29]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d105      	bne.n	8008edc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7fa fdc8 	bl	8003a6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	22ca      	movs	r2, #202	; 0xca
 8008ee8:	625a      	str	r2, [r3, #36]	; 0x24
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2253      	movs	r2, #83	; 0x53
 8008ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f9e8 	bl	80092c8 <RTC_EnterInitMode>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	22ff      	movs	r2, #255	; 0xff
 8008f04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2204      	movs	r2, #4
 8008f0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e046      	b.n	8008f9e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6899      	ldr	r1, [r3, #8]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	4b23      	ldr	r3, [pc, #140]	; (8008fa8 <HAL_RTC_Init+0xf4>)
 8008f1c:	400b      	ands	r3, r1
 8008f1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6899      	ldr	r1, [r3, #8]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	68d2      	ldr	r2, [r2, #12]
 8008f46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6919      	ldr	r1, [r3, #16]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	041a      	lsls	r2, r3, #16
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f6a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0208 	bic.w	r2, r2, #8
 8008f7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	699a      	ldr	r2, [r3, #24]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	22ff      	movs	r2, #255	; 0xff
 8008f94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
  }
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	ff8fffbf 	.word	0xff8fffbf

08008fac <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	7f1b      	ldrb	r3, [r3, #28]
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d101      	bne.n	8008fc8 <HAL_RTC_SetTime+0x1c>
 8008fc4:	2302      	movs	r3, #2
 8008fc6:	e0a8      	b.n	800911a <HAL_RTC_SetTime+0x16e>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2202      	movs	r2, #2
 8008fd2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d126      	bne.n	8009028 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d102      	bne.n	8008fee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	2200      	movs	r2, #0
 8008fec:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 f994 	bl	8009320 <RTC_ByteToBcd2>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	4618      	mov	r0, r3
 8009002:	f000 f98d 	bl	8009320 <RTC_ByteToBcd2>
 8009006:	4603      	mov	r3, r0
 8009008:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800900a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	789b      	ldrb	r3, [r3, #2]
 8009010:	4618      	mov	r0, r3
 8009012:	f000 f985 	bl	8009320 <RTC_ByteToBcd2>
 8009016:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009018:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	7b1b      	ldrb	r3, [r3, #12]
 8009020:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009022:	4313      	orrs	r3, r2
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	e018      	b.n	800905a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2200      	movs	r2, #0
 800903a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009048:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800904e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	7b1b      	ldrb	r3, [r3, #12]
 8009054:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009056:	4313      	orrs	r3, r2
 8009058:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	22ca      	movs	r2, #202	; 0xca
 8009060:	625a      	str	r2, [r3, #36]	; 0x24
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2253      	movs	r2, #83	; 0x53
 8009068:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f92c 	bl	80092c8 <RTC_EnterInitMode>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d00b      	beq.n	800908e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	22ff      	movs	r2, #255	; 0xff
 800907c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2204      	movs	r2, #4
 8009082:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e045      	b.n	800911a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	6979      	ldr	r1, [r7, #20]
 8009094:	4b23      	ldr	r3, [pc, #140]	; (8009124 <HAL_RTC_SetTime+0x178>)
 8009096:	400b      	ands	r3, r1
 8009098:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6899      	ldr	r1, [r3, #8]
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	691a      	ldr	r2, [r3, #16]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	431a      	orrs	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090d0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f003 0320 	and.w	r3, r3, #32
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d111      	bne.n	8009104 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 f8c9 	bl	8009278 <HAL_RTC_WaitForSynchro>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	22ff      	movs	r2, #255	; 0xff
 80090f2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2204      	movs	r2, #4
 80090f8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e00a      	b.n	800911a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	22ff      	movs	r2, #255	; 0xff
 800910a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2201      	movs	r2, #1
 8009110:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009118:	2300      	movs	r3, #0
  }
}
 800911a:	4618      	mov	r0, r3
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	bd90      	pop	{r4, r7, pc}
 8009122:	bf00      	nop
 8009124:	007f7f7f 	.word	0x007f7f7f

08009128 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009128:	b590      	push	{r4, r7, lr}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	7f1b      	ldrb	r3, [r3, #28]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d101      	bne.n	8009144 <HAL_RTC_SetDate+0x1c>
 8009140:	2302      	movs	r3, #2
 8009142:	e092      	b.n	800926a <HAL_RTC_SetDate+0x142>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2201      	movs	r2, #1
 8009148:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2202      	movs	r2, #2
 800914e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10e      	bne.n	8009174 <HAL_RTC_SetDate+0x4c>
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	785b      	ldrb	r3, [r3, #1]
 800915a:	f003 0310 	and.w	r3, r3, #16
 800915e:	2b00      	cmp	r3, #0
 8009160:	d008      	beq.n	8009174 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	f023 0310 	bic.w	r3, r3, #16
 800916a:	b2db      	uxtb	r3, r3
 800916c:	330a      	adds	r3, #10
 800916e:	b2da      	uxtb	r2, r3
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d11c      	bne.n	80091b4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	78db      	ldrb	r3, [r3, #3]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 f8ce 	bl	8009320 <RTC_ByteToBcd2>
 8009184:	4603      	mov	r3, r0
 8009186:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f8c7 	bl	8009320 <RTC_ByteToBcd2>
 8009192:	4603      	mov	r3, r0
 8009194:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009196:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	789b      	ldrb	r3, [r3, #2]
 800919c:	4618      	mov	r0, r3
 800919e:	f000 f8bf 	bl	8009320 <RTC_ByteToBcd2>
 80091a2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80091a4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80091ae:	4313      	orrs	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	e00e      	b.n	80091d2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	78db      	ldrb	r3, [r3, #3]
 80091b8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80091c0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80091c6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80091ce:	4313      	orrs	r3, r2
 80091d0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	22ca      	movs	r2, #202	; 0xca
 80091d8:	625a      	str	r2, [r3, #36]	; 0x24
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2253      	movs	r2, #83	; 0x53
 80091e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f870 	bl	80092c8 <RTC_EnterInitMode>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00b      	beq.n	8009206 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	22ff      	movs	r2, #255	; 0xff
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2204      	movs	r2, #4
 80091fa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e031      	b.n	800926a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	6979      	ldr	r1, [r7, #20]
 800920c:	4b19      	ldr	r3, [pc, #100]	; (8009274 <HAL_RTC_SetDate+0x14c>)
 800920e:	400b      	ands	r3, r1
 8009210:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009220:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f003 0320 	and.w	r3, r3, #32
 800922c:	2b00      	cmp	r3, #0
 800922e:	d111      	bne.n	8009254 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f821 	bl	8009278 <HAL_RTC_WaitForSynchro>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	22ff      	movs	r2, #255	; 0xff
 8009242:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2204      	movs	r2, #4
 8009248:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e00a      	b.n	800926a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	22ff      	movs	r2, #255	; 0xff
 800925a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2200      	movs	r2, #0
 8009266:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009268:	2300      	movs	r3, #0
  }
}
 800926a:	4618      	mov	r0, r3
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd90      	pop	{r4, r7, pc}
 8009272:	bf00      	nop
 8009274:	00ffff3f 	.word	0x00ffff3f

08009278 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009292:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009294:	f7fb f944 	bl	8004520 <HAL_GetTick>
 8009298:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800929a:	e009      	b.n	80092b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800929c:	f7fb f940 	bl	8004520 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092aa:	d901      	bls.n	80092b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e007      	b.n	80092c0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d0ee      	beq.n	800929c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3710      	adds	r7, #16
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d119      	bne.n	8009316 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f04f 32ff 	mov.w	r2, #4294967295
 80092ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092ec:	f7fb f918 	bl	8004520 <HAL_GetTick>
 80092f0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80092f2:	e009      	b.n	8009308 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80092f4:	f7fb f914 	bl	8004520 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009302:	d901      	bls.n	8009308 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e007      	b.n	8009318 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0ee      	beq.n	80092f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800932a:	2300      	movs	r3, #0
 800932c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800932e:	e005      	b.n	800933c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3301      	adds	r3, #1
 8009334:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009336:	79fb      	ldrb	r3, [r7, #7]
 8009338:	3b0a      	subs	r3, #10
 800933a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	2b09      	cmp	r3, #9
 8009340:	d8f6      	bhi.n	8009330 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	b2db      	uxtb	r3, r3
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	b2da      	uxtb	r2, r3
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	4313      	orrs	r3, r2
 800934e:	b2db      	uxtb	r3, r3
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e084      	b.n	8009478 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d106      	bne.n	800938e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7fa fbeb 	bl	8003b64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2202      	movs	r2, #2
 8009392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093ae:	d902      	bls.n	80093b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e002      	b.n	80093bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80093b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80093c4:	d007      	beq.n	80093d6 <HAL_SPI_Init+0x7a>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093ce:	d002      	beq.n	80093d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10b      	bne.n	80093f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093e6:	d903      	bls.n	80093f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	631a      	str	r2, [r3, #48]	; 0x30
 80093ee:	e002      	b.n	80093f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685a      	ldr	r2, [r3, #4]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	431a      	orrs	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	431a      	orrs	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	431a      	orrs	r2, r3
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009414:	431a      	orrs	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	431a      	orrs	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a1b      	ldr	r3, [r3, #32]
 8009420:	ea42 0103 	orr.w	r1, r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	430a      	orrs	r2, r1
 800942e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	0c1b      	lsrs	r3, r3, #16
 8009436:	f003 0204 	and.w	r2, r3, #4
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	431a      	orrs	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009444:	431a      	orrs	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	ea42 0103 	orr.w	r1, r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	430a      	orrs	r2, r1
 8009456:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	69da      	ldr	r2, [r3, #28]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009466:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b088      	sub	sp, #32
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	603b      	str	r3, [r7, #0]
 800948c:	4613      	mov	r3, r2
 800948e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d101      	bne.n	80094a2 <HAL_SPI_Transmit+0x22>
 800949e:	2302      	movs	r3, #2
 80094a0:	e150      	b.n	8009744 <HAL_SPI_Transmit+0x2c4>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094aa:	f7fb f839 	bl	8004520 <HAL_GetTick>
 80094ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80094b0:	88fb      	ldrh	r3, [r7, #6]
 80094b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d002      	beq.n	80094c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80094c0:	2302      	movs	r3, #2
 80094c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094c4:	e135      	b.n	8009732 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d002      	beq.n	80094d2 <HAL_SPI_Transmit+0x52>
 80094cc:	88fb      	ldrh	r3, [r7, #6]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d102      	bne.n	80094d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094d6:	e12c      	b.n	8009732 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2203      	movs	r2, #3
 80094dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	88fa      	ldrh	r2, [r7, #6]
 80094f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	88fa      	ldrh	r2, [r7, #6]
 80094f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009522:	d107      	bne.n	8009534 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009532:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953e:	2b40      	cmp	r3, #64	; 0x40
 8009540:	d007      	beq.n	8009552 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009550:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800955a:	d94b      	bls.n	80095f4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d002      	beq.n	800956a <HAL_SPI_Transmit+0xea>
 8009564:	8afb      	ldrh	r3, [r7, #22]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d13e      	bne.n	80095e8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956e:	881a      	ldrh	r2, [r3, #0]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957a:	1c9a      	adds	r2, r3, #2
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009584:	b29b      	uxth	r3, r3
 8009586:	3b01      	subs	r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800958e:	e02b      	b.n	80095e8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f003 0302 	and.w	r3, r3, #2
 800959a:	2b02      	cmp	r3, #2
 800959c:	d112      	bne.n	80095c4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	881a      	ldrh	r2, [r3, #0]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ae:	1c9a      	adds	r2, r3, #2
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80095c2:	e011      	b.n	80095e8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095c4:	f7fa ffac 	bl	8004520 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	683a      	ldr	r2, [r7, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d803      	bhi.n	80095dc <HAL_SPI_Transmit+0x15c>
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095da:	d102      	bne.n	80095e2 <HAL_SPI_Transmit+0x162>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d102      	bne.n	80095e8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095e6:	e0a4      	b.n	8009732 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1ce      	bne.n	8009590 <HAL_SPI_Transmit+0x110>
 80095f2:	e07c      	b.n	80096ee <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <HAL_SPI_Transmit+0x182>
 80095fc:	8afb      	ldrh	r3, [r7, #22]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d170      	bne.n	80096e4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009606:	b29b      	uxth	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	d912      	bls.n	8009632 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009610:	881a      	ldrh	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961c:	1c9a      	adds	r2, r3, #2
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009626:	b29b      	uxth	r3, r3
 8009628:	3b02      	subs	r3, #2
 800962a:	b29a      	uxth	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009630:	e058      	b.n	80096e4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	330c      	adds	r3, #12
 800963c:	7812      	ldrb	r2, [r2, #0]
 800963e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800964e:	b29b      	uxth	r3, r3
 8009650:	3b01      	subs	r3, #1
 8009652:	b29a      	uxth	r2, r3
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009658:	e044      	b.n	80096e4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0302 	and.w	r3, r3, #2
 8009664:	2b02      	cmp	r3, #2
 8009666:	d12b      	bne.n	80096c0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800966c:	b29b      	uxth	r3, r3
 800966e:	2b01      	cmp	r3, #1
 8009670:	d912      	bls.n	8009698 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	881a      	ldrh	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009682:	1c9a      	adds	r2, r3, #2
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800968c:	b29b      	uxth	r3, r3
 800968e:	3b02      	subs	r3, #2
 8009690:	b29a      	uxth	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009696:	e025      	b.n	80096e4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	330c      	adds	r3, #12
 80096a2:	7812      	ldrb	r2, [r2, #0]
 80096a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	3b01      	subs	r3, #1
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096be:	e011      	b.n	80096e4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096c0:	f7fa ff2e 	bl	8004520 <HAL_GetTick>
 80096c4:	4602      	mov	r2, r0
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d803      	bhi.n	80096d8 <HAL_SPI_Transmit+0x258>
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d6:	d102      	bne.n	80096de <HAL_SPI_Transmit+0x25e>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096e2:	e026      	b.n	8009732 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d1b5      	bne.n	800965a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096ee:	69ba      	ldr	r2, [r7, #24]
 80096f0:	6839      	ldr	r1, [r7, #0]
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f000 fca2 	bl	800a03c <SPI_EndRxTxTransaction>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2220      	movs	r2, #32
 8009702:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10a      	bne.n	8009722 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800970c:	2300      	movs	r3, #0
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	613b      	str	r3, [r7, #16]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	613b      	str	r3, [r7, #16]
 8009720:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009726:	2b00      	cmp	r3, #0
 8009728:	d002      	beq.n	8009730 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	77fb      	strb	r3, [r7, #31]
 800972e:	e000      	b.n	8009732 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8009730:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009742:	7ffb      	ldrb	r3, [r7, #31]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3720      	adds	r7, #32
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af02      	add	r7, sp, #8
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	4613      	mov	r3, r2
 800975a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009768:	d112      	bne.n	8009790 <HAL_SPI_Receive+0x44>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10e      	bne.n	8009790 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2204      	movs	r2, #4
 8009776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800977a:	88fa      	ldrh	r2, [r7, #6]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	68b9      	ldr	r1, [r7, #8]
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 f908 	bl	800999c <HAL_SPI_TransmitReceive>
 800978c:	4603      	mov	r3, r0
 800978e:	e101      	b.n	8009994 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009796:	2b01      	cmp	r3, #1
 8009798:	d101      	bne.n	800979e <HAL_SPI_Receive+0x52>
 800979a:	2302      	movs	r3, #2
 800979c:	e0fa      	b.n	8009994 <HAL_SPI_Receive+0x248>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097a6:	f7fa febb 	bl	8004520 <HAL_GetTick>
 80097aa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d002      	beq.n	80097be <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80097b8:	2302      	movs	r3, #2
 80097ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097bc:	e0e1      	b.n	8009982 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d002      	beq.n	80097ca <HAL_SPI_Receive+0x7e>
 80097c4:	88fb      	ldrh	r3, [r7, #6]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80097ce:	e0d8      	b.n	8009982 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2204      	movs	r2, #4
 80097d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	88fa      	ldrh	r2, [r7, #6]
 80097e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	88fa      	ldrh	r2, [r7, #6]
 80097f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800981a:	d908      	bls.n	800982e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800982a:	605a      	str	r2, [r3, #4]
 800982c:	e007      	b.n	800983e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800983c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009846:	d107      	bne.n	8009858 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009856:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009862:	2b40      	cmp	r3, #64	; 0x40
 8009864:	d007      	beq.n	8009876 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009874:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800987e:	d867      	bhi.n	8009950 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009880:	e030      	b.n	80098e4 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b01      	cmp	r3, #1
 800988e:	d117      	bne.n	80098c0 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f103 020c 	add.w	r2, r3, #12
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989c:	7812      	ldrb	r2, [r2, #0]
 800989e:	b2d2      	uxtb	r2, r2
 80098a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a6:	1c5a      	adds	r2, r3, #1
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	3b01      	subs	r3, #1
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80098be:	e011      	b.n	80098e4 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098c0:	f7fa fe2e 	bl	8004520 <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d803      	bhi.n	80098d8 <HAL_SPI_Receive+0x18c>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d6:	d102      	bne.n	80098de <HAL_SPI_Receive+0x192>
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d102      	bne.n	80098e4 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80098e2:	e04e      	b.n	8009982 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1c8      	bne.n	8009882 <HAL_SPI_Receive+0x136>
 80098f0:	e034      	b.n	800995c <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d115      	bne.n	800992c <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990a:	b292      	uxth	r2, r2
 800990c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009912:	1c9a      	adds	r2, r3, #2
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800991e:	b29b      	uxth	r3, r3
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800992a:	e011      	b.n	8009950 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800992c:	f7fa fdf8 	bl	8004520 <HAL_GetTick>
 8009930:	4602      	mov	r2, r0
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d803      	bhi.n	8009944 <HAL_SPI_Receive+0x1f8>
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009942:	d102      	bne.n	800994a <HAL_SPI_Receive+0x1fe>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d102      	bne.n	8009950 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800994e:	e018      	b.n	8009982 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009956:	b29b      	uxth	r3, r3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1ca      	bne.n	80098f2 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	6839      	ldr	r1, [r7, #0]
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 fb13 	bl	8009f8c <SPI_EndRxTransaction>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2220      	movs	r2, #32
 8009970:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009976:	2b00      	cmp	r3, #0
 8009978:	d002      	beq.n	8009980 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	75fb      	strb	r3, [r7, #23]
 800997e:	e000      	b.n	8009982 <HAL_SPI_Receive+0x236>
  }

error :
 8009980:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b08a      	sub	sp, #40	; 0x28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	607a      	str	r2, [r7, #4]
 80099a8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80099aa:	2301      	movs	r3, #1
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80099ae:	2300      	movs	r3, #0
 80099b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <HAL_SPI_TransmitReceive+0x26>
 80099be:	2302      	movs	r3, #2
 80099c0:	e1fb      	b.n	8009dba <HAL_SPI_TransmitReceive+0x41e>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099ca:	f7fa fda9 	bl	8004520 <HAL_GetTick>
 80099ce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80099d6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80099de:	887b      	ldrh	r3, [r7, #2]
 80099e0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80099e2:	887b      	ldrh	r3, [r7, #2]
 80099e4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099e6:	7efb      	ldrb	r3, [r7, #27]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d00e      	beq.n	8009a0a <HAL_SPI_TransmitReceive+0x6e>
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f2:	d106      	bne.n	8009a02 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <HAL_SPI_TransmitReceive+0x66>
 80099fc:	7efb      	ldrb	r3, [r7, #27]
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d003      	beq.n	8009a0a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009a02:	2302      	movs	r3, #2
 8009a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009a08:	e1cd      	b.n	8009da6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x80>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <HAL_SPI_TransmitReceive+0x80>
 8009a16:	887b      	ldrh	r3, [r7, #2]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d103      	bne.n	8009a24 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009a22:	e1c0      	b.n	8009da6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b04      	cmp	r3, #4
 8009a2e:	d003      	beq.n	8009a38 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2205      	movs	r2, #5
 8009a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	887a      	ldrh	r2, [r7, #2]
 8009a48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	887a      	ldrh	r2, [r7, #2]
 8009a50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	887a      	ldrh	r2, [r7, #2]
 8009a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	887a      	ldrh	r2, [r7, #2]
 8009a64:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a7a:	d802      	bhi.n	8009a82 <HAL_SPI_TransmitReceive+0xe6>
 8009a7c:	8a3b      	ldrh	r3, [r7, #16]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d908      	bls.n	8009a94 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a90:	605a      	str	r2, [r3, #4]
 8009a92:	e007      	b.n	8009aa4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009aa2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aae:	2b40      	cmp	r3, #64	; 0x40
 8009ab0:	d007      	beq.n	8009ac2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ac0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009aca:	d97c      	bls.n	8009bc6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <HAL_SPI_TransmitReceive+0x13e>
 8009ad4:	8a7b      	ldrh	r3, [r7, #18]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d169      	bne.n	8009bae <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	881a      	ldrh	r2, [r3, #0]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	1c9a      	adds	r2, r3, #2
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	b29a      	uxth	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009afe:	e056      	b.n	8009bae <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b02      	cmp	r3, #2
 8009b0c:	d11b      	bne.n	8009b46 <HAL_SPI_TransmitReceive+0x1aa>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d016      	beq.n	8009b46 <HAL_SPI_TransmitReceive+0x1aa>
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d113      	bne.n	8009b46 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b22:	881a      	ldrh	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	1c9a      	adds	r2, r3, #2
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f003 0301 	and.w	r3, r3, #1
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d11c      	bne.n	8009b8e <HAL_SPI_TransmitReceive+0x1f2>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d016      	beq.n	8009b8e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68da      	ldr	r2, [r3, #12]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6a:	b292      	uxth	r2, r2
 8009b6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	1c9a      	adds	r2, r3, #2
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	3b01      	subs	r3, #1
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b8e:	f7fa fcc7 	bl	8004520 <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d807      	bhi.n	8009bae <HAL_SPI_TransmitReceive+0x212>
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba4:	d003      	beq.n	8009bae <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009bac:	e0fb      	b.n	8009da6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1a3      	bne.n	8009b00 <HAL_SPI_TransmitReceive+0x164>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d19d      	bne.n	8009b00 <HAL_SPI_TransmitReceive+0x164>
 8009bc4:	e0df      	b.n	8009d86 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_SPI_TransmitReceive+0x23a>
 8009bce:	8a7b      	ldrh	r3, [r7, #18]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	f040 80cb 	bne.w	8009d6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d912      	bls.n	8009c06 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be4:	881a      	ldrh	r2, [r3, #0]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	1c9a      	adds	r2, r3, #2
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	3b02      	subs	r3, #2
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c04:	e0b2      	b.n	8009d6c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	330c      	adds	r3, #12
 8009c10:	7812      	ldrb	r2, [r2, #0]
 8009c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	3b01      	subs	r3, #1
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c2c:	e09e      	b.n	8009d6c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	f003 0302 	and.w	r3, r3, #2
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d134      	bne.n	8009ca6 <HAL_SPI_TransmitReceive+0x30a>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d02f      	beq.n	8009ca6 <HAL_SPI_TransmitReceive+0x30a>
 8009c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d12c      	bne.n	8009ca6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d912      	bls.n	8009c7c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	881a      	ldrh	r2, [r3, #0]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c66:	1c9a      	adds	r2, r3, #2
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	3b02      	subs	r3, #2
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009c7a:	e012      	b.n	8009ca2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	330c      	adds	r3, #12
 8009c86:	7812      	ldrb	r2, [r2, #0]
 8009c88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f003 0301 	and.w	r3, r3, #1
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d148      	bne.n	8009d46 <HAL_SPI_TransmitReceive+0x3aa>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d042      	beq.n	8009d46 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d923      	bls.n	8009d14 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68da      	ldr	r2, [r3, #12]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	b292      	uxth	r2, r2
 8009cd8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	1c9a      	adds	r2, r3, #2
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	3b02      	subs	r3, #2
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009cfc:	b29b      	uxth	r3, r3
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d81f      	bhi.n	8009d42 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d10:	605a      	str	r2, [r3, #4]
 8009d12:	e016      	b.n	8009d42 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f103 020c 	add.w	r2, r3, #12
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d20:	7812      	ldrb	r2, [r2, #0]
 8009d22:	b2d2      	uxtb	r2, r2
 8009d24:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d42:	2301      	movs	r3, #1
 8009d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d46:	f7fa fbeb 	bl	8004520 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d803      	bhi.n	8009d5e <HAL_SPI_TransmitReceive+0x3c2>
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5c:	d102      	bne.n	8009d64 <HAL_SPI_TransmitReceive+0x3c8>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d103      	bne.n	8009d6c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009d6a:	e01c      	b.n	8009da6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f47f af5b 	bne.w	8009c2e <HAL_SPI_TransmitReceive+0x292>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f47f af54 	bne.w	8009c2e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d86:	69fa      	ldr	r2, [r7, #28]
 8009d88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 f956 	bl	800a03c <SPI_EndRxTxTransaction>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d006      	beq.n	8009da4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	661a      	str	r2, [r3, #96]	; 0x60
 8009da2:	e000      	b.n	8009da6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009da4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009db6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3728      	adds	r7, #40	; 0x28
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009dd0:	b2db      	uxtb	r3, r3
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	603b      	str	r3, [r7, #0]
 8009dea:	4613      	mov	r3, r2
 8009dec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dee:	e04c      	b.n	8009e8a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df6:	d048      	beq.n	8009e8a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009df8:	f7fa fb92 	bl	8004520 <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d902      	bls.n	8009e0e <SPI_WaitFlagStateUntilTimeout+0x30>
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d13d      	bne.n	8009e8a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e26:	d111      	bne.n	8009e4c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e30:	d004      	beq.n	8009e3c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e3a:	d107      	bne.n	8009e4c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e54:	d10f      	bne.n	8009e76 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e64:	601a      	str	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e00f      	b.n	8009eaa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	4013      	ands	r3, r2
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	bf0c      	ite	eq
 8009e9a:	2301      	moveq	r3, #1
 8009e9c:	2300      	movne	r3, #0
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	79fb      	ldrb	r3, [r7, #7]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d1a3      	bne.n	8009df0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3710      	adds	r7, #16
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}

08009eb2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b084      	sub	sp, #16
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	60f8      	str	r0, [r7, #12]
 8009eba:	60b9      	str	r1, [r7, #8]
 8009ebc:	607a      	str	r2, [r7, #4]
 8009ebe:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009ec0:	e057      	b.n	8009f72 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ec8:	d106      	bne.n	8009ed8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d103      	bne.n	8009ed8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ede:	d048      	beq.n	8009f72 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009ee0:	f7fa fb1e 	bl	8004520 <HAL_GetTick>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	683a      	ldr	r2, [r7, #0]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d902      	bls.n	8009ef6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d13d      	bne.n	8009f72 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009f04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f0e:	d111      	bne.n	8009f34 <SPI_WaitFifoStateUntilTimeout+0x82>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f18:	d004      	beq.n	8009f24 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f22:	d107      	bne.n	8009f34 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f3c:	d10f      	bne.n	8009f5e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e008      	b.n	8009f84 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689a      	ldr	r2, [r3, #8]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d19f      	bne.n	8009ec2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fa0:	d111      	bne.n	8009fc6 <SPI_EndRxTransaction+0x3a>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009faa:	d004      	beq.n	8009fb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb4:	d107      	bne.n	8009fc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fc4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2180      	movs	r1, #128	; 0x80
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff ff04 	bl	8009dde <SPI_WaitFlagStateUntilTimeout>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d007      	beq.n	8009fec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fe0:	f043 0220 	orr.w	r2, r3, #32
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	e023      	b.n	800a034 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ff4:	d11d      	bne.n	800a032 <SPI_EndRxTransaction+0xa6>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ffe:	d004      	beq.n	800a00a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a008:	d113      	bne.n	800a032 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2200      	movs	r2, #0
 800a012:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7ff ff4b 	bl	8009eb2 <SPI_WaitFifoStateUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a026:	f043 0220 	orr.w	r2, r3, #32
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e000      	b.n	800a034 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af02      	add	r7, sp, #8
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2200      	movs	r2, #0
 800a050:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7ff ff2c 	bl	8009eb2 <SPI_WaitFifoStateUntilTimeout>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d007      	beq.n	800a070 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a064:	f043 0220 	orr.w	r2, r3, #32
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a06c:	2303      	movs	r3, #3
 800a06e:	e027      	b.n	800a0c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2200      	movs	r2, #0
 800a078:	2180      	movs	r1, #128	; 0x80
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff feaf 	bl	8009dde <SPI_WaitFlagStateUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d007      	beq.n	800a096 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a08a:	f043 0220 	orr.w	r2, r3, #32
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a092:	2303      	movs	r3, #3
 800a094:	e014      	b.n	800a0c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	f7ff ff05 	bl	8009eb2 <SPI_WaitFifoStateUntilTimeout>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d007      	beq.n	800a0be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b2:	f043 0220 	orr.w	r2, r3, #32
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e000      	b.n	800a0c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3710      	adds	r7, #16
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e01d      	b.n	800a116 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d106      	bne.n	800a0f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7f9 fde0 	bl	8003cb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2202      	movs	r2, #2
 800a0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	3304      	adds	r3, #4
 800a104:	4619      	mov	r1, r3
 800a106:	4610      	mov	r0, r2
 800a108:	f000 fc28 	bl	800a95c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2201      	movs	r2, #1
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	4618      	mov	r0, r3
 800a134:	f001 f83a 	bl	800b1ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a17      	ldr	r2, [pc, #92]	; (800a19c <HAL_TIM_PWM_Start+0x7c>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d004      	beq.n	800a14c <HAL_TIM_PWM_Start+0x2c>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a16      	ldr	r2, [pc, #88]	; (800a1a0 <HAL_TIM_PWM_Start+0x80>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d101      	bne.n	800a150 <HAL_TIM_PWM_Start+0x30>
 800a14c:	2301      	movs	r3, #1
 800a14e:	e000      	b.n	800a152 <HAL_TIM_PWM_Start+0x32>
 800a150:	2300      	movs	r3, #0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d007      	beq.n	800a166 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a164:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <HAL_TIM_PWM_Start+0x84>)
 800a16e:	4013      	ands	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2b06      	cmp	r3, #6
 800a176:	d00b      	beq.n	800a190 <HAL_TIM_PWM_Start+0x70>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a17e:	d007      	beq.n	800a190 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f042 0201 	orr.w	r2, r2, #1
 800a18e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	40010000 	.word	0x40010000
 800a1a0:	40010400 	.word	0x40010400
 800a1a4:	00010007 	.word	0x00010007

0800a1a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d101      	bne.n	800a1ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e01d      	b.n	800a1f6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7f9 fd0c 	bl	8003bec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	3304      	adds	r3, #4
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	f000 fbb8 	bl	800a95c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b0c      	cmp	r3, #12
 800a20e:	d841      	bhi.n	800a294 <HAL_TIM_IC_Start_IT+0x94>
 800a210:	a201      	add	r2, pc, #4	; (adr r2, 800a218 <HAL_TIM_IC_Start_IT+0x18>)
 800a212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a216:	bf00      	nop
 800a218:	0800a24d 	.word	0x0800a24d
 800a21c:	0800a295 	.word	0x0800a295
 800a220:	0800a295 	.word	0x0800a295
 800a224:	0800a295 	.word	0x0800a295
 800a228:	0800a25f 	.word	0x0800a25f
 800a22c:	0800a295 	.word	0x0800a295
 800a230:	0800a295 	.word	0x0800a295
 800a234:	0800a295 	.word	0x0800a295
 800a238:	0800a271 	.word	0x0800a271
 800a23c:	0800a295 	.word	0x0800a295
 800a240:	0800a295 	.word	0x0800a295
 800a244:	0800a295 	.word	0x0800a295
 800a248:	0800a283 	.word	0x0800a283
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f042 0202 	orr.w	r2, r2, #2
 800a25a:	60da      	str	r2, [r3, #12]
      break;
 800a25c:	e01b      	b.n	800a296 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68da      	ldr	r2, [r3, #12]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f042 0204 	orr.w	r2, r2, #4
 800a26c:	60da      	str	r2, [r3, #12]
      break;
 800a26e:	e012      	b.n	800a296 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f042 0208 	orr.w	r2, r2, #8
 800a27e:	60da      	str	r2, [r3, #12]
      break;
 800a280:	e009      	b.n	800a296 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68da      	ldr	r2, [r3, #12]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f042 0210 	orr.w	r2, r2, #16
 800a290:	60da      	str	r2, [r3, #12]
      break;
 800a292:	e000      	b.n	800a296 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800a294:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2201      	movs	r2, #1
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 ff84 	bl	800b1ac <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	689a      	ldr	r2, [r3, #8]
 800a2aa:	4b0b      	ldr	r3, [pc, #44]	; (800a2d8 <HAL_TIM_IC_Start_IT+0xd8>)
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b06      	cmp	r3, #6
 800a2b4:	d00b      	beq.n	800a2ce <HAL_TIM_IC_Start_IT+0xce>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2bc:	d007      	beq.n	800a2ce <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f042 0201 	orr.w	r2, r2, #1
 800a2cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	00010007 	.word	0x00010007

0800a2dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d122      	bne.n	800a338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f003 0302 	and.w	r3, r3, #2
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d11b      	bne.n	800a338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f06f 0202 	mvn.w	r2, #2
 800a308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7f6 f9c8 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 800a324:	e005      	b.n	800a332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fafa 	bl	800a920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fb01 	bl	800a934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	f003 0304 	and.w	r3, r3, #4
 800a342:	2b04      	cmp	r3, #4
 800a344:	d122      	bne.n	800a38c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68db      	ldr	r3, [r3, #12]
 800a34c:	f003 0304 	and.w	r3, r3, #4
 800a350:	2b04      	cmp	r3, #4
 800a352:	d11b      	bne.n	800a38c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f06f 0204 	mvn.w	r2, #4
 800a35c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	699b      	ldr	r3, [r3, #24]
 800a36a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d003      	beq.n	800a37a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f7f6 f99e 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 800a378:	e005      	b.n	800a386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fad0 	bl	800a920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fad7 	bl	800a934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	f003 0308 	and.w	r3, r3, #8
 800a396:	2b08      	cmp	r3, #8
 800a398:	d122      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68db      	ldr	r3, [r3, #12]
 800a3a0:	f003 0308 	and.w	r3, r3, #8
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d11b      	bne.n	800a3e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f06f 0208 	mvn.w	r2, #8
 800a3b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2204      	movs	r2, #4
 800a3b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	f003 0303 	and.w	r3, r3, #3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7f6 f974 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 800a3cc:	e005      	b.n	800a3da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 faa6 	bl	800a920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 faad 	bl	800a934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	f003 0310 	and.w	r3, r3, #16
 800a3ea:	2b10      	cmp	r3, #16
 800a3ec:	d122      	bne.n	800a434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f003 0310 	and.w	r3, r3, #16
 800a3f8:	2b10      	cmp	r3, #16
 800a3fa:	d11b      	bne.n	800a434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f06f 0210 	mvn.w	r2, #16
 800a404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2208      	movs	r2, #8
 800a40a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	69db      	ldr	r3, [r3, #28]
 800a412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f7f6 f94a 	bl	80006b4 <HAL_TIM_IC_CaptureCallback>
 800a420:	e005      	b.n	800a42e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fa7c 	bl	800a920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fa83 	bl	800a934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d10e      	bne.n	800a460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d107      	bne.n	800a460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f06f 0201 	mvn.w	r2, #1
 800a458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa56 	bl	800a90c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a46a:	2b80      	cmp	r3, #128	; 0x80
 800a46c:	d10e      	bne.n	800a48c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a478:	2b80      	cmp	r3, #128	; 0x80
 800a47a:	d107      	bne.n	800a48c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 ffcc 	bl	800b424 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a49a:	d10e      	bne.n	800a4ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4a6:	2b80      	cmp	r3, #128	; 0x80
 800a4a8:	d107      	bne.n	800a4ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 ffbf 	bl	800b438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c4:	2b40      	cmp	r3, #64	; 0x40
 800a4c6:	d10e      	bne.n	800a4e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d2:	2b40      	cmp	r3, #64	; 0x40
 800a4d4:	d107      	bne.n	800a4e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a4de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fa31 	bl	800a948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	f003 0320 	and.w	r3, r3, #32
 800a4f0:	2b20      	cmp	r3, #32
 800a4f2:	d10e      	bne.n	800a512 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b20      	cmp	r3, #32
 800a500:	d107      	bne.n	800a512 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f06f 0220 	mvn.w	r2, #32
 800a50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 ff7f 	bl	800b410 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b084      	sub	sp, #16
 800a51e:	af00      	add	r7, sp, #0
 800a520:	60f8      	str	r0, [r7, #12]
 800a522:	60b9      	str	r1, [r7, #8]
 800a524:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d101      	bne.n	800a534 <HAL_TIM_IC_ConfigChannel+0x1a>
 800a530:	2302      	movs	r3, #2
 800a532:	e08a      	b.n	800a64a <HAL_TIM_IC_ConfigChannel+0x130>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d11b      	bne.n	800a582 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6818      	ldr	r0, [r3, #0]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	6819      	ldr	r1, [r3, #0]
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	685a      	ldr	r2, [r3, #4]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	f000 fcfd 	bl	800af58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	699a      	ldr	r2, [r3, #24]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 020c 	bic.w	r2, r2, #12
 800a56c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6999      	ldr	r1, [r3, #24]
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	430a      	orrs	r2, r1
 800a57e:	619a      	str	r2, [r3, #24]
 800a580:	e05a      	b.n	800a638 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b04      	cmp	r3, #4
 800a586:	d11c      	bne.n	800a5c2 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	6819      	ldr	r1, [r3, #0]
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	f000 fd52 	bl	800b040 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699a      	ldr	r2, [r3, #24]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a5aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6999      	ldr	r1, [r3, #24]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	021a      	lsls	r2, r3, #8
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	619a      	str	r2, [r3, #24]
 800a5c0:	e03a      	b.n	800a638 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2b08      	cmp	r3, #8
 800a5c6:	d11b      	bne.n	800a600 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6818      	ldr	r0, [r3, #0]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	6819      	ldr	r1, [r3, #0]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	685a      	ldr	r2, [r3, #4]
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	f000 fd6f 	bl	800b0ba <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	69da      	ldr	r2, [r3, #28]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f022 020c 	bic.w	r2, r2, #12
 800a5ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69d9      	ldr	r1, [r3, #28]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	689a      	ldr	r2, [r3, #8]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	61da      	str	r2, [r3, #28]
 800a5fe:	e01b      	b.n	800a638 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	6819      	ldr	r1, [r3, #0]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	f000 fd8f 	bl	800b132 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69da      	ldr	r2, [r3, #28]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a622:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	69d9      	ldr	r1, [r3, #28]
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	021a      	lsls	r2, r3, #8
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	430a      	orrs	r2, r1
 800a636:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	60f8      	str	r0, [r7, #12]
 800a65c:	60b9      	str	r1, [r7, #8]
 800a65e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a666:	2b01      	cmp	r3, #1
 800a668:	d101      	bne.n	800a66e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a66a:	2302      	movs	r3, #2
 800a66c:	e105      	b.n	800a87a <HAL_TIM_PWM_ConfigChannel+0x226>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2201      	movs	r2, #1
 800a672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2202      	movs	r2, #2
 800a67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b14      	cmp	r3, #20
 800a682:	f200 80f0 	bhi.w	800a866 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a686:	a201      	add	r2, pc, #4	; (adr r2, 800a68c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a6e1 	.word	0x0800a6e1
 800a690:	0800a867 	.word	0x0800a867
 800a694:	0800a867 	.word	0x0800a867
 800a698:	0800a867 	.word	0x0800a867
 800a69c:	0800a721 	.word	0x0800a721
 800a6a0:	0800a867 	.word	0x0800a867
 800a6a4:	0800a867 	.word	0x0800a867
 800a6a8:	0800a867 	.word	0x0800a867
 800a6ac:	0800a763 	.word	0x0800a763
 800a6b0:	0800a867 	.word	0x0800a867
 800a6b4:	0800a867 	.word	0x0800a867
 800a6b8:	0800a867 	.word	0x0800a867
 800a6bc:	0800a7a3 	.word	0x0800a7a3
 800a6c0:	0800a867 	.word	0x0800a867
 800a6c4:	0800a867 	.word	0x0800a867
 800a6c8:	0800a867 	.word	0x0800a867
 800a6cc:	0800a7e5 	.word	0x0800a7e5
 800a6d0:	0800a867 	.word	0x0800a867
 800a6d4:	0800a867 	.word	0x0800a867
 800a6d8:	0800a867 	.word	0x0800a867
 800a6dc:	0800a825 	.word	0x0800a825
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68b9      	ldr	r1, [r7, #8]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f9d8 	bl	800aa9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	699a      	ldr	r2, [r3, #24]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f042 0208 	orr.w	r2, r2, #8
 800a6fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	699a      	ldr	r2, [r3, #24]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f022 0204 	bic.w	r2, r2, #4
 800a70a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6999      	ldr	r1, [r3, #24]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	691a      	ldr	r2, [r3, #16]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	619a      	str	r2, [r3, #24]
      break;
 800a71e:	e0a3      	b.n	800a868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68b9      	ldr	r1, [r7, #8]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fa2a 	bl	800ab80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	699a      	ldr	r2, [r3, #24]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a73a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	699a      	ldr	r2, [r3, #24]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a74a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	6999      	ldr	r1, [r3, #24]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	021a      	lsls	r2, r3, #8
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	430a      	orrs	r2, r1
 800a75e:	619a      	str	r2, [r3, #24]
      break;
 800a760:	e082      	b.n	800a868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fa81 	bl	800ac70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	69da      	ldr	r2, [r3, #28]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f042 0208 	orr.w	r2, r2, #8
 800a77c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	69da      	ldr	r2, [r3, #28]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f022 0204 	bic.w	r2, r2, #4
 800a78c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69d9      	ldr	r1, [r3, #28]
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	430a      	orrs	r2, r1
 800a79e:	61da      	str	r2, [r3, #28]
      break;
 800a7a0:	e062      	b.n	800a868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f000 fad7 	bl	800ad5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69da      	ldr	r2, [r3, #28]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69d9      	ldr	r1, [r3, #28]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	021a      	lsls	r2, r3, #8
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	430a      	orrs	r2, r1
 800a7e0:	61da      	str	r2, [r3, #28]
      break;
 800a7e2:	e041      	b.n	800a868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	68b9      	ldr	r1, [r7, #8]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 fb0e 	bl	800ae0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0208 	orr.w	r2, r2, #8
 800a7fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f022 0204 	bic.w	r2, r2, #4
 800a80e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	691a      	ldr	r2, [r3, #16]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	430a      	orrs	r2, r1
 800a820:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a822:	e021      	b.n	800a868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68b9      	ldr	r1, [r7, #8]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fb40 	bl	800aeb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a83e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a84e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	021a      	lsls	r2, r3, #8
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	430a      	orrs	r2, r1
 800a862:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a864:	e000      	b.n	800a868 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a866:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop

0800a884 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2b0c      	cmp	r3, #12
 800a896:	d831      	bhi.n	800a8fc <HAL_TIM_ReadCapturedValue+0x78>
 800a898:	a201      	add	r2, pc, #4	; (adr r2, 800a8a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800a89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a8d5 	.word	0x0800a8d5
 800a8a4:	0800a8fd 	.word	0x0800a8fd
 800a8a8:	0800a8fd 	.word	0x0800a8fd
 800a8ac:	0800a8fd 	.word	0x0800a8fd
 800a8b0:	0800a8df 	.word	0x0800a8df
 800a8b4:	0800a8fd 	.word	0x0800a8fd
 800a8b8:	0800a8fd 	.word	0x0800a8fd
 800a8bc:	0800a8fd 	.word	0x0800a8fd
 800a8c0:	0800a8e9 	.word	0x0800a8e9
 800a8c4:	0800a8fd 	.word	0x0800a8fd
 800a8c8:	0800a8fd 	.word	0x0800a8fd
 800a8cc:	0800a8fd 	.word	0x0800a8fd
 800a8d0:	0800a8f3 	.word	0x0800a8f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8da:	60fb      	str	r3, [r7, #12]

      break;
 800a8dc:	e00f      	b.n	800a8fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	60fb      	str	r3, [r7, #12]

      break;
 800a8e6:	e00a      	b.n	800a8fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ee:	60fb      	str	r3, [r7, #12]

      break;
 800a8f0:	e005      	b.n	800a8fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f8:	60fb      	str	r3, [r7, #12]

      break;
 800a8fa:	e000      	b.n	800a8fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800a8fc:	bf00      	nop
  }

  return tmpreg;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a928:	bf00      	nop
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a40      	ldr	r2, [pc, #256]	; (800aa70 <TIM_Base_SetConfig+0x114>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d013      	beq.n	800a99c <TIM_Base_SetConfig+0x40>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a97a:	d00f      	beq.n	800a99c <TIM_Base_SetConfig+0x40>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a3d      	ldr	r2, [pc, #244]	; (800aa74 <TIM_Base_SetConfig+0x118>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d00b      	beq.n	800a99c <TIM_Base_SetConfig+0x40>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a3c      	ldr	r2, [pc, #240]	; (800aa78 <TIM_Base_SetConfig+0x11c>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d007      	beq.n	800a99c <TIM_Base_SetConfig+0x40>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a3b      	ldr	r2, [pc, #236]	; (800aa7c <TIM_Base_SetConfig+0x120>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d003      	beq.n	800a99c <TIM_Base_SetConfig+0x40>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a3a      	ldr	r2, [pc, #232]	; (800aa80 <TIM_Base_SetConfig+0x124>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d108      	bne.n	800a9ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4a2f      	ldr	r2, [pc, #188]	; (800aa70 <TIM_Base_SetConfig+0x114>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d02b      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9bc:	d027      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a2c      	ldr	r2, [pc, #176]	; (800aa74 <TIM_Base_SetConfig+0x118>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d023      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a2b      	ldr	r2, [pc, #172]	; (800aa78 <TIM_Base_SetConfig+0x11c>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d01f      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a2a      	ldr	r2, [pc, #168]	; (800aa7c <TIM_Base_SetConfig+0x120>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d01b      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a29      	ldr	r2, [pc, #164]	; (800aa80 <TIM_Base_SetConfig+0x124>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d017      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a28      	ldr	r2, [pc, #160]	; (800aa84 <TIM_Base_SetConfig+0x128>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d013      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a27      	ldr	r2, [pc, #156]	; (800aa88 <TIM_Base_SetConfig+0x12c>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d00f      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a26      	ldr	r2, [pc, #152]	; (800aa8c <TIM_Base_SetConfig+0x130>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d00b      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a25      	ldr	r2, [pc, #148]	; (800aa90 <TIM_Base_SetConfig+0x134>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d007      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a24      	ldr	r2, [pc, #144]	; (800aa94 <TIM_Base_SetConfig+0x138>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d003      	beq.n	800aa0e <TIM_Base_SetConfig+0xb2>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a23      	ldr	r2, [pc, #140]	; (800aa98 <TIM_Base_SetConfig+0x13c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d108      	bne.n	800aa20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	689a      	ldr	r2, [r3, #8]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	4a0a      	ldr	r2, [pc, #40]	; (800aa70 <TIM_Base_SetConfig+0x114>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d003      	beq.n	800aa54 <TIM_Base_SetConfig+0xf8>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a0c      	ldr	r2, [pc, #48]	; (800aa80 <TIM_Base_SetConfig+0x124>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d103      	bne.n	800aa5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	691a      	ldr	r2, [r3, #16]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	615a      	str	r2, [r3, #20]
}
 800aa62:	bf00      	nop
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	40010000 	.word	0x40010000
 800aa74:	40000400 	.word	0x40000400
 800aa78:	40000800 	.word	0x40000800
 800aa7c:	40000c00 	.word	0x40000c00
 800aa80:	40010400 	.word	0x40010400
 800aa84:	40014000 	.word	0x40014000
 800aa88:	40014400 	.word	0x40014400
 800aa8c:	40014800 	.word	0x40014800
 800aa90:	40001800 	.word	0x40001800
 800aa94:	40001c00 	.word	0x40001c00
 800aa98:	40002000 	.word	0x40002000

0800aa9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	f023 0201 	bic.w	r2, r3, #1
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a1b      	ldr	r3, [r3, #32]
 800aab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4b2b      	ldr	r3, [pc, #172]	; (800ab74 <TIM_OC1_SetConfig+0xd8>)
 800aac8:	4013      	ands	r3, r2
 800aaca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f023 0303 	bic.w	r3, r3, #3
 800aad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	4313      	orrs	r3, r2
 800aadc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f023 0302 	bic.w	r3, r3, #2
 800aae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	697a      	ldr	r2, [r7, #20]
 800aaec:	4313      	orrs	r3, r2
 800aaee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	4a21      	ldr	r2, [pc, #132]	; (800ab78 <TIM_OC1_SetConfig+0xdc>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d003      	beq.n	800ab00 <TIM_OC1_SetConfig+0x64>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4a20      	ldr	r2, [pc, #128]	; (800ab7c <TIM_OC1_SetConfig+0xe0>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d10c      	bne.n	800ab1a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	f023 0308 	bic.w	r3, r3, #8
 800ab06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f023 0304 	bic.w	r3, r3, #4
 800ab18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a16      	ldr	r2, [pc, #88]	; (800ab78 <TIM_OC1_SetConfig+0xdc>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d003      	beq.n	800ab2a <TIM_OC1_SetConfig+0x8e>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a15      	ldr	r2, [pc, #84]	; (800ab7c <TIM_OC1_SetConfig+0xe0>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d111      	bne.n	800ab4e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	693a      	ldr	r2, [r7, #16]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	693a      	ldr	r2, [r7, #16]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	685a      	ldr	r2, [r3, #4]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	621a      	str	r2, [r3, #32]
}
 800ab68:	bf00      	nop
 800ab6a:	371c      	adds	r7, #28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	fffeff8f 	.word	0xfffeff8f
 800ab78:	40010000 	.word	0x40010000
 800ab7c:	40010400 	.word	0x40010400

0800ab80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	f023 0210 	bic.w	r2, r3, #16
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4b2e      	ldr	r3, [pc, #184]	; (800ac64 <TIM_OC2_SetConfig+0xe4>)
 800abac:	4013      	ands	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	f023 0320 	bic.w	r3, r3, #32
 800abca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	4a23      	ldr	r2, [pc, #140]	; (800ac68 <TIM_OC2_SetConfig+0xe8>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d003      	beq.n	800abe8 <TIM_OC2_SetConfig+0x68>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4a22      	ldr	r2, [pc, #136]	; (800ac6c <TIM_OC2_SetConfig+0xec>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d10d      	bne.n	800ac04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a18      	ldr	r2, [pc, #96]	; (800ac68 <TIM_OC2_SetConfig+0xe8>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d003      	beq.n	800ac14 <TIM_OC2_SetConfig+0x94>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a17      	ldr	r2, [pc, #92]	; (800ac6c <TIM_OC2_SetConfig+0xec>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d113      	bne.n	800ac3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	685a      	ldr	r2, [r3, #4]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	621a      	str	r2, [r3, #32]
}
 800ac56:	bf00      	nop
 800ac58:	371c      	adds	r7, #28
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	feff8fff 	.word	0xfeff8fff
 800ac68:	40010000 	.word	0x40010000
 800ac6c:	40010400 	.word	0x40010400

0800ac70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6a1b      	ldr	r3, [r3, #32]
 800ac7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a1b      	ldr	r3, [r3, #32]
 800ac8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	69db      	ldr	r3, [r3, #28]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4b2d      	ldr	r3, [pc, #180]	; (800ad50 <TIM_OC3_SetConfig+0xe0>)
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 0303 	bic.w	r3, r3, #3
 800aca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	4313      	orrs	r3, r2
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	021b      	lsls	r3, r3, #8
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a22      	ldr	r2, [pc, #136]	; (800ad54 <TIM_OC3_SetConfig+0xe4>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d003      	beq.n	800acd6 <TIM_OC3_SetConfig+0x66>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a21      	ldr	r2, [pc, #132]	; (800ad58 <TIM_OC3_SetConfig+0xe8>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d10d      	bne.n	800acf2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	021b      	lsls	r3, r3, #8
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800acf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a17      	ldr	r2, [pc, #92]	; (800ad54 <TIM_OC3_SetConfig+0xe4>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d003      	beq.n	800ad02 <TIM_OC3_SetConfig+0x92>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a16      	ldr	r2, [pc, #88]	; (800ad58 <TIM_OC3_SetConfig+0xe8>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d113      	bne.n	800ad2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	011b      	lsls	r3, r3, #4
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	011b      	lsls	r3, r3, #4
 800ad24:	693a      	ldr	r2, [r7, #16]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	685a      	ldr	r2, [r3, #4]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	621a      	str	r2, [r3, #32]
}
 800ad44:	bf00      	nop
 800ad46:	371c      	adds	r7, #28
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	fffeff8f 	.word	0xfffeff8f
 800ad54:	40010000 	.word	0x40010000
 800ad58:	40010400 	.word	0x40010400

0800ad5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	4b1e      	ldr	r3, [pc, #120]	; (800ae00 <TIM_OC4_SetConfig+0xa4>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	021b      	lsls	r3, r3, #8
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ada6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	031b      	lsls	r3, r3, #12
 800adae:	693a      	ldr	r2, [r7, #16]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a13      	ldr	r2, [pc, #76]	; (800ae04 <TIM_OC4_SetConfig+0xa8>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_OC4_SetConfig+0x68>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a12      	ldr	r2, [pc, #72]	; (800ae08 <TIM_OC4_SetConfig+0xac>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d109      	bne.n	800add8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800adca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	695b      	ldr	r3, [r3, #20]
 800add0:	019b      	lsls	r3, r3, #6
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	4313      	orrs	r3, r2
 800add6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	693a      	ldr	r2, [r7, #16]
 800adf0:	621a      	str	r2, [r3, #32]
}
 800adf2:	bf00      	nop
 800adf4:	371c      	adds	r7, #28
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	feff8fff 	.word	0xfeff8fff
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40010400 	.word	0x40010400

0800ae0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	4b1b      	ldr	r3, [pc, #108]	; (800aea4 <TIM_OC5_SetConfig+0x98>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ae4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	041b      	lsls	r3, r3, #16
 800ae54:	693a      	ldr	r2, [r7, #16]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4a12      	ldr	r2, [pc, #72]	; (800aea8 <TIM_OC5_SetConfig+0x9c>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d003      	beq.n	800ae6a <TIM_OC5_SetConfig+0x5e>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a11      	ldr	r2, [pc, #68]	; (800aeac <TIM_OC5_SetConfig+0xa0>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d109      	bne.n	800ae7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	695b      	ldr	r3, [r3, #20]
 800ae76:	021b      	lsls	r3, r3, #8
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	621a      	str	r2, [r3, #32]
}
 800ae98:	bf00      	nop
 800ae9a:	371c      	adds	r7, #28
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr
 800aea4:	fffeff8f 	.word	0xfffeff8f
 800aea8:	40010000 	.word	0x40010000
 800aeac:	40010400 	.word	0x40010400

0800aeb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	4b1c      	ldr	r3, [pc, #112]	; (800af4c <TIM_OC6_SetConfig+0x9c>)
 800aedc:	4013      	ands	r3, r2
 800aede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	021b      	lsls	r3, r3, #8
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	051b      	lsls	r3, r3, #20
 800aefa:	693a      	ldr	r2, [r7, #16]
 800aefc:	4313      	orrs	r3, r2
 800aefe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a13      	ldr	r2, [pc, #76]	; (800af50 <TIM_OC6_SetConfig+0xa0>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d003      	beq.n	800af10 <TIM_OC6_SetConfig+0x60>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a12      	ldr	r2, [pc, #72]	; (800af54 <TIM_OC6_SetConfig+0xa4>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d109      	bne.n	800af24 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	029b      	lsls	r3, r3, #10
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	4313      	orrs	r3, r2
 800af22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	685a      	ldr	r2, [r3, #4]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	693a      	ldr	r2, [r7, #16]
 800af3c:	621a      	str	r2, [r3, #32]
}
 800af3e:	bf00      	nop
 800af40:	371c      	adds	r7, #28
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	feff8fff 	.word	0xfeff8fff
 800af50:	40010000 	.word	0x40010000
 800af54:	40010400 	.word	0x40010400

0800af58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800af58:	b480      	push	{r7}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	f023 0201 	bic.w	r2, r3, #1
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6a1b      	ldr	r3, [r3, #32]
 800af7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	4a28      	ldr	r2, [pc, #160]	; (800b024 <TIM_TI1_SetConfig+0xcc>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d01b      	beq.n	800afbe <TIM_TI1_SetConfig+0x66>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af8c:	d017      	beq.n	800afbe <TIM_TI1_SetConfig+0x66>
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	4a25      	ldr	r2, [pc, #148]	; (800b028 <TIM_TI1_SetConfig+0xd0>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d013      	beq.n	800afbe <TIM_TI1_SetConfig+0x66>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	4a24      	ldr	r2, [pc, #144]	; (800b02c <TIM_TI1_SetConfig+0xd4>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d00f      	beq.n	800afbe <TIM_TI1_SetConfig+0x66>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4a23      	ldr	r2, [pc, #140]	; (800b030 <TIM_TI1_SetConfig+0xd8>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d00b      	beq.n	800afbe <TIM_TI1_SetConfig+0x66>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	4a22      	ldr	r2, [pc, #136]	; (800b034 <TIM_TI1_SetConfig+0xdc>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d007      	beq.n	800afbe <TIM_TI1_SetConfig+0x66>
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	4a21      	ldr	r2, [pc, #132]	; (800b038 <TIM_TI1_SetConfig+0xe0>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d003      	beq.n	800afbe <TIM_TI1_SetConfig+0x66>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	4a20      	ldr	r2, [pc, #128]	; (800b03c <TIM_TI1_SetConfig+0xe4>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d101      	bne.n	800afc2 <TIM_TI1_SetConfig+0x6a>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e000      	b.n	800afc4 <TIM_TI1_SetConfig+0x6c>
 800afc2:	2300      	movs	r3, #0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d008      	beq.n	800afda <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f023 0303 	bic.w	r3, r3, #3
 800afce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	617b      	str	r3, [r7, #20]
 800afd8:	e003      	b.n	800afe2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f043 0301 	orr.w	r3, r3, #1
 800afe0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afe8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	011b      	lsls	r3, r3, #4
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f023 030a 	bic.w	r3, r3, #10
 800affc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f003 030a 	and.w	r3, r3, #10
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	4313      	orrs	r3, r2
 800b008:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	621a      	str	r2, [r3, #32]
}
 800b016:	bf00      	nop
 800b018:	371c      	adds	r7, #28
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	40010000 	.word	0x40010000
 800b028:	40000400 	.word	0x40000400
 800b02c:	40000800 	.word	0x40000800
 800b030:	40000c00 	.word	0x40000c00
 800b034:	40010400 	.word	0x40010400
 800b038:	40014000 	.word	0x40014000
 800b03c:	40001800 	.word	0x40001800

0800b040 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b040:	b480      	push	{r7}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	f023 0210 	bic.w	r2, r3, #16
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6a1b      	ldr	r3, [r3, #32]
 800b064:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b06c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	021b      	lsls	r3, r3, #8
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	4313      	orrs	r3, r2
 800b076:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b07e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	031b      	lsls	r3, r3, #12
 800b084:	b29b      	uxth	r3, r3
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	4313      	orrs	r3, r2
 800b08a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b092:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	011b      	lsls	r3, r3, #4
 800b098:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	621a      	str	r2, [r3, #32]
}
 800b0ae:	bf00      	nop
 800b0b0:	371c      	adds	r7, #28
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b087      	sub	sp, #28
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	60f8      	str	r0, [r7, #12]
 800b0c2:	60b9      	str	r1, [r7, #8]
 800b0c4:	607a      	str	r2, [r7, #4]
 800b0c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a1b      	ldr	r3, [r3, #32]
 800b0cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	69db      	ldr	r3, [r3, #28]
 800b0d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	f023 0303 	bic.w	r3, r3, #3
 800b0e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	697a      	ldr	r2, [r7, #20]
 800b100:	4313      	orrs	r3, r2
 800b102:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b10a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	4313      	orrs	r3, r2
 800b118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	693a      	ldr	r2, [r7, #16]
 800b124:	621a      	str	r2, [r3, #32]
}
 800b126:	bf00      	nop
 800b128:	371c      	adds	r7, #28
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b132:	b480      	push	{r7}
 800b134:	b087      	sub	sp, #28
 800b136:	af00      	add	r7, sp, #0
 800b138:	60f8      	str	r0, [r7, #12]
 800b13a:	60b9      	str	r1, [r7, #8]
 800b13c:	607a      	str	r2, [r7, #4]
 800b13e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6a1b      	ldr	r3, [r3, #32]
 800b144:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	69db      	ldr	r3, [r3, #28]
 800b150:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6a1b      	ldr	r3, [r3, #32]
 800b156:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b15e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	021b      	lsls	r3, r3, #8
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	4313      	orrs	r3, r2
 800b168:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b170:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	031b      	lsls	r3, r3, #12
 800b176:	b29b      	uxth	r3, r3
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b184:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	031b      	lsls	r3, r3, #12
 800b18a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	4313      	orrs	r3, r2
 800b192:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	697a      	ldr	r2, [r7, #20]
 800b198:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	693a      	ldr	r2, [r7, #16]
 800b19e:	621a      	str	r2, [r3, #32]
}
 800b1a0:	bf00      	nop
 800b1a2:	371c      	adds	r7, #28
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b087      	sub	sp, #28
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f003 031f 	and.w	r3, r3, #31
 800b1be:	2201      	movs	r2, #1
 800b1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6a1a      	ldr	r2, [r3, #32]
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	43db      	mvns	r3, r3
 800b1ce:	401a      	ands	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6a1a      	ldr	r2, [r3, #32]
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	f003 031f 	and.w	r3, r3, #31
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	621a      	str	r2, [r3, #32]
}
 800b1ea:	bf00      	nop
 800b1ec:	371c      	adds	r7, #28
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d101      	bne.n	800b210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b20c:	2302      	movs	r3, #2
 800b20e:	e06d      	b.n	800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2202      	movs	r2, #2
 800b21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a30      	ldr	r2, [pc, #192]	; (800b2f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d004      	beq.n	800b244 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a2f      	ldr	r2, [pc, #188]	; (800b2fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d108      	bne.n	800b256 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b24a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	4313      	orrs	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a20      	ldr	r2, [pc, #128]	; (800b2f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d022      	beq.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b282:	d01d      	beq.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a1d      	ldr	r2, [pc, #116]	; (800b300 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d018      	beq.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a1c      	ldr	r2, [pc, #112]	; (800b304 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d013      	beq.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a1a      	ldr	r2, [pc, #104]	; (800b308 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d00e      	beq.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4a15      	ldr	r2, [pc, #84]	; (800b2fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d009      	beq.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a16      	ldr	r2, [pc, #88]	; (800b30c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d004      	beq.n	800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a15      	ldr	r2, [pc, #84]	; (800b310 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d10c      	bne.n	800b2da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	40010000 	.word	0x40010000
 800b2fc:	40010400 	.word	0x40010400
 800b300:	40000400 	.word	0x40000400
 800b304:	40000800 	.word	0x40000800
 800b308:	40000c00 	.word	0x40000c00
 800b30c:	40014000 	.word	0x40014000
 800b310:	40001800 	.word	0x40001800

0800b314 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d101      	bne.n	800b330 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b32c:	2302      	movs	r3, #2
 800b32e:	e065      	b.n	800b3fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	4313      	orrs	r3, r2
 800b344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	4313      	orrs	r3, r2
 800b352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	4313      	orrs	r3, r2
 800b38a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	699b      	ldr	r3, [r3, #24]
 800b3a4:	041b      	lsls	r3, r3, #16
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a16      	ldr	r2, [pc, #88]	; (800b408 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d004      	beq.n	800b3be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a14      	ldr	r2, [pc, #80]	; (800b40c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d115      	bne.n	800b3ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c8:	051b      	lsls	r3, r3, #20
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	69db      	ldr	r3, [r3, #28]
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	40010000 	.word	0x40010000
 800b40c:	40010400 	.word	0x40010400

0800b410 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b42c:	bf00      	nop
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e040      	b.n	800b4e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b462:	2b00      	cmp	r3, #0
 800b464:	d106      	bne.n	800b474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7f8 fcd4 	bl	8003e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2224      	movs	r2, #36	; 0x24
 800b478:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f022 0201 	bic.w	r2, r2, #1
 800b488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fb54 	bl	800bb38 <UART_SetConfig>
 800b490:	4603      	mov	r3, r0
 800b492:	2b01      	cmp	r3, #1
 800b494:	d101      	bne.n	800b49a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e022      	b.n	800b4e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d002      	beq.n	800b4a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fdf2 	bl	800c08c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685a      	ldr	r2, [r3, #4]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b4b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	689a      	ldr	r2, [r3, #8]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b4c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f042 0201 	orr.w	r2, r2, #1
 800b4d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fe79 	bl	800c1d0 <UART_CheckIdleState>
 800b4de:	4603      	mov	r3, r0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b08a      	sub	sp, #40	; 0x28
 800b4ec:	af02      	add	r7, sp, #8
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	603b      	str	r3, [r7, #0]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4fc:	2b20      	cmp	r3, #32
 800b4fe:	d17f      	bne.n	800b600 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d002      	beq.n	800b50c <HAL_UART_Transmit+0x24>
 800b506:	88fb      	ldrh	r3, [r7, #6]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e078      	b.n	800b602 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b516:	2b01      	cmp	r3, #1
 800b518:	d101      	bne.n	800b51e <HAL_UART_Transmit+0x36>
 800b51a:	2302      	movs	r3, #2
 800b51c:	e071      	b.n	800b602 <HAL_UART_Transmit+0x11a>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2221      	movs	r2, #33	; 0x21
 800b530:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b532:	f7f8 fff5 	bl	8004520 <HAL_GetTick>
 800b536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	88fa      	ldrh	r2, [r7, #6]
 800b53c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	88fa      	ldrh	r2, [r7, #6]
 800b544:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b550:	d108      	bne.n	800b564 <HAL_UART_Transmit+0x7c>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d104      	bne.n	800b564 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b55a:	2300      	movs	r3, #0
 800b55c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	e003      	b.n	800b56c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b568:	2300      	movs	r3, #0
 800b56a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b574:	e02c      	b.n	800b5d0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	9300      	str	r3, [sp, #0]
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2200      	movs	r2, #0
 800b57e:	2180      	movs	r1, #128	; 0x80
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 fe6a 	bl	800c25a <UART_WaitOnFlagUntilTimeout>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d001      	beq.n	800b590 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e038      	b.n	800b602 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	881b      	ldrh	r3, [r3, #0]
 800b59a:	461a      	mov	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b5a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b5a6:	69bb      	ldr	r3, [r7, #24]
 800b5a8:	3302      	adds	r3, #2
 800b5aa:	61bb      	str	r3, [r7, #24]
 800b5ac:	e007      	b.n	800b5be <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b5b8:	69fb      	ldr	r3, [r7, #28]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1cc      	bne.n	800b576 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2140      	movs	r1, #64	; 0x40
 800b5e6:	68f8      	ldr	r0, [r7, #12]
 800b5e8:	f000 fe37 	bl	800c25a <UART_WaitOnFlagUntilTimeout>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e005      	b.n	800b602 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2220      	movs	r2, #32
 800b5fa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	e000      	b.n	800b602 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b600:	2302      	movs	r3, #2
  }
}
 800b602:	4618      	mov	r0, r3
 800b604:	3720      	adds	r7, #32
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
	...

0800b60c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b61e:	2b20      	cmp	r3, #32
 800b620:	d16c      	bne.n	800b6fc <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <HAL_UART_Receive_DMA+0x22>
 800b628:	88fb      	ldrh	r3, [r7, #6]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e065      	b.n	800b6fe <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d101      	bne.n	800b640 <HAL_UART_Receive_DMA+0x34>
 800b63c:	2302      	movs	r3, #2
 800b63e:	e05e      	b.n	800b6fe <HAL_UART_Receive_DMA+0xf2>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	88fa      	ldrh	r2, [r7, #6]
 800b652:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2222      	movs	r2, #34	; 0x22
 800b660:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b666:	2b00      	cmp	r3, #0
 800b668:	d02a      	beq.n	800b6c0 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b66e:	4a26      	ldr	r2, [pc, #152]	; (800b708 <HAL_UART_Receive_DMA+0xfc>)
 800b670:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b676:	4a25      	ldr	r2, [pc, #148]	; (800b70c <HAL_UART_Receive_DMA+0x100>)
 800b678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b67e:	4a24      	ldr	r2, [pc, #144]	; (800b710 <HAL_UART_Receive_DMA+0x104>)
 800b680:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b686:	2200      	movs	r2, #0
 800b688:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	3324      	adds	r3, #36	; 0x24
 800b694:	4619      	mov	r1, r3
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b69a:	461a      	mov	r2, r3
 800b69c:	88fb      	ldrh	r3, [r7, #6]
 800b69e:	f7f9 fdeb 	bl	8005278 <HAL_DMA_Start_IT>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	2210      	movs	r2, #16
 800b6ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2220      	movs	r2, #32
 800b6ba:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e01e      	b.n	800b6fe <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6d6:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	689a      	ldr	r2, [r3, #8]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f042 0201 	orr.w	r2, r2, #1
 800b6e6:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	689a      	ldr	r2, [r3, #8]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6f6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	e000      	b.n	800b6fe <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800b6fc:	2302      	movs	r3, #2
  }
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	0800c3bb 	.word	0x0800c3bb
 800b70c:	0800c41f 	.word	0x0800c41f
 800b710:	0800c43b 	.word	0x0800c43b

0800b714 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b720:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b726:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d101      	bne.n	800b736 <HAL_UART_DMAPause+0x22>
 800b732:	2302      	movs	r3, #2
 800b734:	e03c      	b.n	800b7b0 <HAL_UART_DMAPause+0x9c>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	689b      	ldr	r3, [r3, #8]
 800b744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b748:	2b80      	cmp	r3, #128	; 0x80
 800b74a:	d10a      	bne.n	800b762 <HAL_UART_DMAPause+0x4e>
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b21      	cmp	r3, #33	; 0x21
 800b750:	d107      	bne.n	800b762 <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689a      	ldr	r2, [r3, #8]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b760:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b76c:	2b40      	cmp	r3, #64	; 0x40
 800b76e:	d11a      	bne.n	800b7a6 <HAL_UART_DMAPause+0x92>
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2b22      	cmp	r3, #34	; 0x22
 800b774:	d117      	bne.n	800b7a6 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b784:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	689a      	ldr	r2, [r3, #8]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f022 0201 	bic.w	r2, r2, #1
 800b794:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7a4:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d101      	bne.n	800b7d2 <HAL_UART_DMAResume+0x16>
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	e034      	b.n	800b83c <HAL_UART_DMAResume+0x80>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7de:	2b21      	cmp	r3, #33	; 0x21
 800b7e0:	d107      	bne.n	800b7f2 <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	689a      	ldr	r2, [r3, #8]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b7f0:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7f6:	2b22      	cmp	r3, #34	; 0x22
 800b7f8:	d11b      	bne.n	800b832 <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2208      	movs	r2, #8
 800b800:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b810:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	689a      	ldr	r2, [r3, #8]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f042 0201 	orr.w	r2, r2, #1
 800b820:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	689a      	ldr	r2, [r3, #8]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b830:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	69db      	ldr	r3, [r3, #28]
 800b856:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	689b      	ldr	r3, [r3, #8]
 800b866:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b868:	69fa      	ldr	r2, [r7, #28]
 800b86a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b86e:	4013      	ands	r3, r2
 800b870:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d113      	bne.n	800b8a0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	f003 0320 	and.w	r3, r3, #32
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00e      	beq.n	800b8a0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	f003 0320 	and.w	r3, r3, #32
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d009      	beq.n	800b8a0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b890:	2b00      	cmp	r3, #0
 800b892:	f000 8114 	beq.w	800babe <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	4798      	blx	r3
      }
      return;
 800b89e:	e10e      	b.n	800babe <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f000 80d6 	beq.w	800ba54 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f003 0301 	and.w	r3, r3, #1
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d105      	bne.n	800b8be <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f000 80cb 	beq.w	800ba54 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <HAL_UART_IRQHandler+0x9e>
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d009      	beq.n	800b8e6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8de:	f043 0201 	orr.w	r2, r3, #1
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	f003 0302 	and.w	r3, r3, #2
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00e      	beq.n	800b90e <HAL_UART_IRQHandler+0xc6>
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d009      	beq.n	800b90e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2202      	movs	r2, #2
 800b900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b906:	f043 0204 	orr.w	r2, r3, #4
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	f003 0304 	and.w	r3, r3, #4
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00e      	beq.n	800b936 <HAL_UART_IRQHandler+0xee>
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d009      	beq.n	800b936 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2204      	movs	r2, #4
 800b928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b92e:	f043 0202 	orr.w	r2, r3, #2
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	f003 0308 	and.w	r3, r3, #8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d013      	beq.n	800b968 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	f003 0320 	and.w	r3, r3, #32
 800b946:	2b00      	cmp	r3, #0
 800b948:	d104      	bne.n	800b954 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2208      	movs	r2, #8
 800b95a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b960:	f043 0208 	orr.w	r2, r3, #8
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d00f      	beq.n	800b992 <HAL_UART_IRQHandler+0x14a>
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d00a      	beq.n	800b992 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b98a:	f043 0220 	orr.w	r2, r3, #32
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 8093 	beq.w	800bac2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	f003 0320 	and.w	r3, r3, #32
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00c      	beq.n	800b9c0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	f003 0320 	and.w	r3, r3, #32
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d007      	beq.n	800b9c0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d0:	2b40      	cmp	r3, #64	; 0x40
 800b9d2:	d004      	beq.n	800b9de <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d031      	beq.n	800ba42 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 fccb 	bl	800c37a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ee:	2b40      	cmp	r3, #64	; 0x40
 800b9f0:	d123      	bne.n	800ba3a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689a      	ldr	r2, [r3, #8]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba00:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d013      	beq.n	800ba32 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba0e:	4a30      	ldr	r2, [pc, #192]	; (800bad0 <HAL_UART_IRQHandler+0x288>)
 800ba10:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7f9 fc8e 	bl	8005338 <HAL_DMA_Abort_IT>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d016      	beq.n	800ba50 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba30:	e00e      	b.n	800ba50 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f86c 	bl	800bb10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba38:	e00a      	b.n	800ba50 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f868 	bl	800bb10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba40:	e006      	b.n	800ba50 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f864 	bl	800bb10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800ba4e:	e038      	b.n	800bac2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba50:	bf00      	nop
    return;
 800ba52:	e036      	b.n	800bac2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00d      	beq.n	800ba7a <HAL_UART_IRQHandler+0x232>
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d008      	beq.n	800ba7a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ba70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 f856 	bl	800bb24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba78:	e026      	b.n	800bac8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00d      	beq.n	800baa0 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d008      	beq.n	800baa0 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d017      	beq.n	800bac6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	4798      	blx	r3
    }
    return;
 800ba9e:	e012      	b.n	800bac6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00e      	beq.n	800bac8 <HAL_UART_IRQHandler+0x280>
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d009      	beq.n	800bac8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fd12 	bl	800c4de <UART_EndTransmit_IT>
    return;
 800baba:	bf00      	nop
 800babc:	e004      	b.n	800bac8 <HAL_UART_IRQHandler+0x280>
      return;
 800babe:	bf00      	nop
 800bac0:	e002      	b.n	800bac8 <HAL_UART_IRQHandler+0x280>
    return;
 800bac2:	bf00      	nop
 800bac4:	e000      	b.n	800bac8 <HAL_UART_IRQHandler+0x280>
    return;
 800bac6:	bf00      	nop
  }

}
 800bac8:	3720      	adds	r7, #32
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	0800c4b3 	.word	0x0800c4b3

0800bad4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb04:	bf00      	nop
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bb40:	2300      	movs	r3, #0
 800bb42:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bb44:	2300      	movs	r3, #0
 800bb46:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691b      	ldr	r3, [r3, #16]
 800bb50:	431a      	orrs	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	431a      	orrs	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	69db      	ldr	r3, [r3, #28]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4bb1      	ldr	r3, [pc, #708]	; (800be2c <UART_SetConfig+0x2f4>)
 800bb68:	4013      	ands	r3, r2
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	6812      	ldr	r2, [r2, #0]
 800bb6e:	6939      	ldr	r1, [r7, #16]
 800bb70:	430b      	orrs	r3, r1
 800bb72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68da      	ldr	r2, [r3, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	699b      	ldr	r3, [r3, #24]
 800bb8e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	430a      	orrs	r2, r1
 800bbac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4a9f      	ldr	r2, [pc, #636]	; (800be30 <UART_SetConfig+0x2f8>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d121      	bne.n	800bbfc <UART_SetConfig+0xc4>
 800bbb8:	4b9e      	ldr	r3, [pc, #632]	; (800be34 <UART_SetConfig+0x2fc>)
 800bbba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbbe:	f003 0303 	and.w	r3, r3, #3
 800bbc2:	2b03      	cmp	r3, #3
 800bbc4:	d816      	bhi.n	800bbf4 <UART_SetConfig+0xbc>
 800bbc6:	a201      	add	r2, pc, #4	; (adr r2, 800bbcc <UART_SetConfig+0x94>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bbdd 	.word	0x0800bbdd
 800bbd0:	0800bbe9 	.word	0x0800bbe9
 800bbd4:	0800bbe3 	.word	0x0800bbe3
 800bbd8:	0800bbef 	.word	0x0800bbef
 800bbdc:	2301      	movs	r3, #1
 800bbde:	77fb      	strb	r3, [r7, #31]
 800bbe0:	e151      	b.n	800be86 <UART_SetConfig+0x34e>
 800bbe2:	2302      	movs	r3, #2
 800bbe4:	77fb      	strb	r3, [r7, #31]
 800bbe6:	e14e      	b.n	800be86 <UART_SetConfig+0x34e>
 800bbe8:	2304      	movs	r3, #4
 800bbea:	77fb      	strb	r3, [r7, #31]
 800bbec:	e14b      	b.n	800be86 <UART_SetConfig+0x34e>
 800bbee:	2308      	movs	r3, #8
 800bbf0:	77fb      	strb	r3, [r7, #31]
 800bbf2:	e148      	b.n	800be86 <UART_SetConfig+0x34e>
 800bbf4:	2310      	movs	r3, #16
 800bbf6:	77fb      	strb	r3, [r7, #31]
 800bbf8:	bf00      	nop
 800bbfa:	e144      	b.n	800be86 <UART_SetConfig+0x34e>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a8d      	ldr	r2, [pc, #564]	; (800be38 <UART_SetConfig+0x300>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d134      	bne.n	800bc70 <UART_SetConfig+0x138>
 800bc06:	4b8b      	ldr	r3, [pc, #556]	; (800be34 <UART_SetConfig+0x2fc>)
 800bc08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc0c:	f003 030c 	and.w	r3, r3, #12
 800bc10:	2b0c      	cmp	r3, #12
 800bc12:	d829      	bhi.n	800bc68 <UART_SetConfig+0x130>
 800bc14:	a201      	add	r2, pc, #4	; (adr r2, 800bc1c <UART_SetConfig+0xe4>)
 800bc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1a:	bf00      	nop
 800bc1c:	0800bc51 	.word	0x0800bc51
 800bc20:	0800bc69 	.word	0x0800bc69
 800bc24:	0800bc69 	.word	0x0800bc69
 800bc28:	0800bc69 	.word	0x0800bc69
 800bc2c:	0800bc5d 	.word	0x0800bc5d
 800bc30:	0800bc69 	.word	0x0800bc69
 800bc34:	0800bc69 	.word	0x0800bc69
 800bc38:	0800bc69 	.word	0x0800bc69
 800bc3c:	0800bc57 	.word	0x0800bc57
 800bc40:	0800bc69 	.word	0x0800bc69
 800bc44:	0800bc69 	.word	0x0800bc69
 800bc48:	0800bc69 	.word	0x0800bc69
 800bc4c:	0800bc63 	.word	0x0800bc63
 800bc50:	2300      	movs	r3, #0
 800bc52:	77fb      	strb	r3, [r7, #31]
 800bc54:	e117      	b.n	800be86 <UART_SetConfig+0x34e>
 800bc56:	2302      	movs	r3, #2
 800bc58:	77fb      	strb	r3, [r7, #31]
 800bc5a:	e114      	b.n	800be86 <UART_SetConfig+0x34e>
 800bc5c:	2304      	movs	r3, #4
 800bc5e:	77fb      	strb	r3, [r7, #31]
 800bc60:	e111      	b.n	800be86 <UART_SetConfig+0x34e>
 800bc62:	2308      	movs	r3, #8
 800bc64:	77fb      	strb	r3, [r7, #31]
 800bc66:	e10e      	b.n	800be86 <UART_SetConfig+0x34e>
 800bc68:	2310      	movs	r3, #16
 800bc6a:	77fb      	strb	r3, [r7, #31]
 800bc6c:	bf00      	nop
 800bc6e:	e10a      	b.n	800be86 <UART_SetConfig+0x34e>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a71      	ldr	r2, [pc, #452]	; (800be3c <UART_SetConfig+0x304>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d120      	bne.n	800bcbc <UART_SetConfig+0x184>
 800bc7a:	4b6e      	ldr	r3, [pc, #440]	; (800be34 <UART_SetConfig+0x2fc>)
 800bc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bc84:	2b10      	cmp	r3, #16
 800bc86:	d00f      	beq.n	800bca8 <UART_SetConfig+0x170>
 800bc88:	2b10      	cmp	r3, #16
 800bc8a:	d802      	bhi.n	800bc92 <UART_SetConfig+0x15a>
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <UART_SetConfig+0x164>
 800bc90:	e010      	b.n	800bcb4 <UART_SetConfig+0x17c>
 800bc92:	2b20      	cmp	r3, #32
 800bc94:	d005      	beq.n	800bca2 <UART_SetConfig+0x16a>
 800bc96:	2b30      	cmp	r3, #48	; 0x30
 800bc98:	d009      	beq.n	800bcae <UART_SetConfig+0x176>
 800bc9a:	e00b      	b.n	800bcb4 <UART_SetConfig+0x17c>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	77fb      	strb	r3, [r7, #31]
 800bca0:	e0f1      	b.n	800be86 <UART_SetConfig+0x34e>
 800bca2:	2302      	movs	r3, #2
 800bca4:	77fb      	strb	r3, [r7, #31]
 800bca6:	e0ee      	b.n	800be86 <UART_SetConfig+0x34e>
 800bca8:	2304      	movs	r3, #4
 800bcaa:	77fb      	strb	r3, [r7, #31]
 800bcac:	e0eb      	b.n	800be86 <UART_SetConfig+0x34e>
 800bcae:	2308      	movs	r3, #8
 800bcb0:	77fb      	strb	r3, [r7, #31]
 800bcb2:	e0e8      	b.n	800be86 <UART_SetConfig+0x34e>
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	77fb      	strb	r3, [r7, #31]
 800bcb8:	bf00      	nop
 800bcba:	e0e4      	b.n	800be86 <UART_SetConfig+0x34e>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a5f      	ldr	r2, [pc, #380]	; (800be40 <UART_SetConfig+0x308>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d120      	bne.n	800bd08 <UART_SetConfig+0x1d0>
 800bcc6:	4b5b      	ldr	r3, [pc, #364]	; (800be34 <UART_SetConfig+0x2fc>)
 800bcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bccc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bcd0:	2b40      	cmp	r3, #64	; 0x40
 800bcd2:	d00f      	beq.n	800bcf4 <UART_SetConfig+0x1bc>
 800bcd4:	2b40      	cmp	r3, #64	; 0x40
 800bcd6:	d802      	bhi.n	800bcde <UART_SetConfig+0x1a6>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <UART_SetConfig+0x1b0>
 800bcdc:	e010      	b.n	800bd00 <UART_SetConfig+0x1c8>
 800bcde:	2b80      	cmp	r3, #128	; 0x80
 800bce0:	d005      	beq.n	800bcee <UART_SetConfig+0x1b6>
 800bce2:	2bc0      	cmp	r3, #192	; 0xc0
 800bce4:	d009      	beq.n	800bcfa <UART_SetConfig+0x1c2>
 800bce6:	e00b      	b.n	800bd00 <UART_SetConfig+0x1c8>
 800bce8:	2300      	movs	r3, #0
 800bcea:	77fb      	strb	r3, [r7, #31]
 800bcec:	e0cb      	b.n	800be86 <UART_SetConfig+0x34e>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	77fb      	strb	r3, [r7, #31]
 800bcf2:	e0c8      	b.n	800be86 <UART_SetConfig+0x34e>
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	77fb      	strb	r3, [r7, #31]
 800bcf8:	e0c5      	b.n	800be86 <UART_SetConfig+0x34e>
 800bcfa:	2308      	movs	r3, #8
 800bcfc:	77fb      	strb	r3, [r7, #31]
 800bcfe:	e0c2      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd00:	2310      	movs	r3, #16
 800bd02:	77fb      	strb	r3, [r7, #31]
 800bd04:	bf00      	nop
 800bd06:	e0be      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a4d      	ldr	r2, [pc, #308]	; (800be44 <UART_SetConfig+0x30c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d124      	bne.n	800bd5c <UART_SetConfig+0x224>
 800bd12:	4b48      	ldr	r3, [pc, #288]	; (800be34 <UART_SetConfig+0x2fc>)
 800bd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd20:	d012      	beq.n	800bd48 <UART_SetConfig+0x210>
 800bd22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd26:	d802      	bhi.n	800bd2e <UART_SetConfig+0x1f6>
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d007      	beq.n	800bd3c <UART_SetConfig+0x204>
 800bd2c:	e012      	b.n	800bd54 <UART_SetConfig+0x21c>
 800bd2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd32:	d006      	beq.n	800bd42 <UART_SetConfig+0x20a>
 800bd34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd38:	d009      	beq.n	800bd4e <UART_SetConfig+0x216>
 800bd3a:	e00b      	b.n	800bd54 <UART_SetConfig+0x21c>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	77fb      	strb	r3, [r7, #31]
 800bd40:	e0a1      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd42:	2302      	movs	r3, #2
 800bd44:	77fb      	strb	r3, [r7, #31]
 800bd46:	e09e      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd48:	2304      	movs	r3, #4
 800bd4a:	77fb      	strb	r3, [r7, #31]
 800bd4c:	e09b      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd4e:	2308      	movs	r3, #8
 800bd50:	77fb      	strb	r3, [r7, #31]
 800bd52:	e098      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd54:	2310      	movs	r3, #16
 800bd56:	77fb      	strb	r3, [r7, #31]
 800bd58:	bf00      	nop
 800bd5a:	e094      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a39      	ldr	r2, [pc, #228]	; (800be48 <UART_SetConfig+0x310>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d124      	bne.n	800bdb0 <UART_SetConfig+0x278>
 800bd66:	4b33      	ldr	r3, [pc, #204]	; (800be34 <UART_SetConfig+0x2fc>)
 800bd68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd74:	d012      	beq.n	800bd9c <UART_SetConfig+0x264>
 800bd76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd7a:	d802      	bhi.n	800bd82 <UART_SetConfig+0x24a>
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d007      	beq.n	800bd90 <UART_SetConfig+0x258>
 800bd80:	e012      	b.n	800bda8 <UART_SetConfig+0x270>
 800bd82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd86:	d006      	beq.n	800bd96 <UART_SetConfig+0x25e>
 800bd88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bd8c:	d009      	beq.n	800bda2 <UART_SetConfig+0x26a>
 800bd8e:	e00b      	b.n	800bda8 <UART_SetConfig+0x270>
 800bd90:	2301      	movs	r3, #1
 800bd92:	77fb      	strb	r3, [r7, #31]
 800bd94:	e077      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd96:	2302      	movs	r3, #2
 800bd98:	77fb      	strb	r3, [r7, #31]
 800bd9a:	e074      	b.n	800be86 <UART_SetConfig+0x34e>
 800bd9c:	2304      	movs	r3, #4
 800bd9e:	77fb      	strb	r3, [r7, #31]
 800bda0:	e071      	b.n	800be86 <UART_SetConfig+0x34e>
 800bda2:	2308      	movs	r3, #8
 800bda4:	77fb      	strb	r3, [r7, #31]
 800bda6:	e06e      	b.n	800be86 <UART_SetConfig+0x34e>
 800bda8:	2310      	movs	r3, #16
 800bdaa:	77fb      	strb	r3, [r7, #31]
 800bdac:	bf00      	nop
 800bdae:	e06a      	b.n	800be86 <UART_SetConfig+0x34e>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a25      	ldr	r2, [pc, #148]	; (800be4c <UART_SetConfig+0x314>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d124      	bne.n	800be04 <UART_SetConfig+0x2cc>
 800bdba:	4b1e      	ldr	r3, [pc, #120]	; (800be34 <UART_SetConfig+0x2fc>)
 800bdbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdc0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bdc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdc8:	d012      	beq.n	800bdf0 <UART_SetConfig+0x2b8>
 800bdca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdce:	d802      	bhi.n	800bdd6 <UART_SetConfig+0x29e>
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d007      	beq.n	800bde4 <UART_SetConfig+0x2ac>
 800bdd4:	e012      	b.n	800bdfc <UART_SetConfig+0x2c4>
 800bdd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdda:	d006      	beq.n	800bdea <UART_SetConfig+0x2b2>
 800bddc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bde0:	d009      	beq.n	800bdf6 <UART_SetConfig+0x2be>
 800bde2:	e00b      	b.n	800bdfc <UART_SetConfig+0x2c4>
 800bde4:	2300      	movs	r3, #0
 800bde6:	77fb      	strb	r3, [r7, #31]
 800bde8:	e04d      	b.n	800be86 <UART_SetConfig+0x34e>
 800bdea:	2302      	movs	r3, #2
 800bdec:	77fb      	strb	r3, [r7, #31]
 800bdee:	e04a      	b.n	800be86 <UART_SetConfig+0x34e>
 800bdf0:	2304      	movs	r3, #4
 800bdf2:	77fb      	strb	r3, [r7, #31]
 800bdf4:	e047      	b.n	800be86 <UART_SetConfig+0x34e>
 800bdf6:	2308      	movs	r3, #8
 800bdf8:	77fb      	strb	r3, [r7, #31]
 800bdfa:	e044      	b.n	800be86 <UART_SetConfig+0x34e>
 800bdfc:	2310      	movs	r3, #16
 800bdfe:	77fb      	strb	r3, [r7, #31]
 800be00:	bf00      	nop
 800be02:	e040      	b.n	800be86 <UART_SetConfig+0x34e>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a11      	ldr	r2, [pc, #68]	; (800be50 <UART_SetConfig+0x318>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d139      	bne.n	800be82 <UART_SetConfig+0x34a>
 800be0e:	4b09      	ldr	r3, [pc, #36]	; (800be34 <UART_SetConfig+0x2fc>)
 800be10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800be18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be1c:	d027      	beq.n	800be6e <UART_SetConfig+0x336>
 800be1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be22:	d817      	bhi.n	800be54 <UART_SetConfig+0x31c>
 800be24:	2b00      	cmp	r3, #0
 800be26:	d01c      	beq.n	800be62 <UART_SetConfig+0x32a>
 800be28:	e027      	b.n	800be7a <UART_SetConfig+0x342>
 800be2a:	bf00      	nop
 800be2c:	efff69f3 	.word	0xefff69f3
 800be30:	40011000 	.word	0x40011000
 800be34:	40023800 	.word	0x40023800
 800be38:	40004400 	.word	0x40004400
 800be3c:	40004800 	.word	0x40004800
 800be40:	40004c00 	.word	0x40004c00
 800be44:	40005000 	.word	0x40005000
 800be48:	40011400 	.word	0x40011400
 800be4c:	40007800 	.word	0x40007800
 800be50:	40007c00 	.word	0x40007c00
 800be54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be58:	d006      	beq.n	800be68 <UART_SetConfig+0x330>
 800be5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800be5e:	d009      	beq.n	800be74 <UART_SetConfig+0x33c>
 800be60:	e00b      	b.n	800be7a <UART_SetConfig+0x342>
 800be62:	2300      	movs	r3, #0
 800be64:	77fb      	strb	r3, [r7, #31]
 800be66:	e00e      	b.n	800be86 <UART_SetConfig+0x34e>
 800be68:	2302      	movs	r3, #2
 800be6a:	77fb      	strb	r3, [r7, #31]
 800be6c:	e00b      	b.n	800be86 <UART_SetConfig+0x34e>
 800be6e:	2304      	movs	r3, #4
 800be70:	77fb      	strb	r3, [r7, #31]
 800be72:	e008      	b.n	800be86 <UART_SetConfig+0x34e>
 800be74:	2308      	movs	r3, #8
 800be76:	77fb      	strb	r3, [r7, #31]
 800be78:	e005      	b.n	800be86 <UART_SetConfig+0x34e>
 800be7a:	2310      	movs	r3, #16
 800be7c:	77fb      	strb	r3, [r7, #31]
 800be7e:	bf00      	nop
 800be80:	e001      	b.n	800be86 <UART_SetConfig+0x34e>
 800be82:	2310      	movs	r3, #16
 800be84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be8e:	d17f      	bne.n	800bf90 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800be90:	7ffb      	ldrb	r3, [r7, #31]
 800be92:	2b08      	cmp	r3, #8
 800be94:	d85c      	bhi.n	800bf50 <UART_SetConfig+0x418>
 800be96:	a201      	add	r2, pc, #4	; (adr r2, 800be9c <UART_SetConfig+0x364>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800bec1 	.word	0x0800bec1
 800bea0:	0800bee1 	.word	0x0800bee1
 800bea4:	0800bf01 	.word	0x0800bf01
 800bea8:	0800bf51 	.word	0x0800bf51
 800beac:	0800bf19 	.word	0x0800bf19
 800beb0:	0800bf51 	.word	0x0800bf51
 800beb4:	0800bf51 	.word	0x0800bf51
 800beb8:	0800bf51 	.word	0x0800bf51
 800bebc:	0800bf39 	.word	0x0800bf39
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bec0:	f7fc fb8e 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 800bec4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	005a      	lsls	r2, r3, #1
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	085b      	lsrs	r3, r3, #1
 800bed0:	441a      	add	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beda:	b29b      	uxth	r3, r3
 800bedc:	61bb      	str	r3, [r7, #24]
        break;
 800bede:	e03a      	b.n	800bf56 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bee0:	f7fc fb92 	bl	8008608 <HAL_RCC_GetPCLK2Freq>
 800bee4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	005a      	lsls	r2, r3, #1
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	085b      	lsrs	r3, r3, #1
 800bef0:	441a      	add	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800befa:	b29b      	uxth	r3, r3
 800befc:	61bb      	str	r3, [r7, #24]
        break;
 800befe:	e02a      	b.n	800bf56 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	085a      	lsrs	r2, r3, #1
 800bf06:	4b5f      	ldr	r3, [pc, #380]	; (800c084 <UART_SetConfig+0x54c>)
 800bf08:	4413      	add	r3, r2
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	6852      	ldr	r2, [r2, #4]
 800bf0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	61bb      	str	r3, [r7, #24]
        break;
 800bf16:	e01e      	b.n	800bf56 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf18:	f7fc faa4 	bl	8008464 <HAL_RCC_GetSysClockFreq>
 800bf1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	005a      	lsls	r2, r3, #1
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	085b      	lsrs	r3, r3, #1
 800bf28:	441a      	add	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	61bb      	str	r3, [r7, #24]
        break;
 800bf36:	e00e      	b.n	800bf56 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	085b      	lsrs	r3, r3, #1
 800bf3e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	61bb      	str	r3, [r7, #24]
        break;
 800bf4e:	e002      	b.n	800bf56 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800bf50:	2301      	movs	r3, #1
 800bf52:	75fb      	strb	r3, [r7, #23]
        break;
 800bf54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	2b0f      	cmp	r3, #15
 800bf5a:	d916      	bls.n	800bf8a <UART_SetConfig+0x452>
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf62:	d212      	bcs.n	800bf8a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	f023 030f 	bic.w	r3, r3, #15
 800bf6c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	085b      	lsrs	r3, r3, #1
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	f003 0307 	and.w	r3, r3, #7
 800bf78:	b29a      	uxth	r2, r3
 800bf7a:	897b      	ldrh	r3, [r7, #10]
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	897a      	ldrh	r2, [r7, #10]
 800bf86:	60da      	str	r2, [r3, #12]
 800bf88:	e070      	b.n	800c06c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	75fb      	strb	r3, [r7, #23]
 800bf8e:	e06d      	b.n	800c06c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800bf90:	7ffb      	ldrb	r3, [r7, #31]
 800bf92:	2b08      	cmp	r3, #8
 800bf94:	d859      	bhi.n	800c04a <UART_SetConfig+0x512>
 800bf96:	a201      	add	r2, pc, #4	; (adr r2, 800bf9c <UART_SetConfig+0x464>)
 800bf98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9c:	0800bfc1 	.word	0x0800bfc1
 800bfa0:	0800bfdf 	.word	0x0800bfdf
 800bfa4:	0800bffd 	.word	0x0800bffd
 800bfa8:	0800c04b 	.word	0x0800c04b
 800bfac:	0800c015 	.word	0x0800c015
 800bfb0:	0800c04b 	.word	0x0800c04b
 800bfb4:	0800c04b 	.word	0x0800c04b
 800bfb8:	0800c04b 	.word	0x0800c04b
 800bfbc:	0800c033 	.word	0x0800c033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bfc0:	f7fc fb0e 	bl	80085e0 <HAL_RCC_GetPCLK1Freq>
 800bfc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	085a      	lsrs	r2, r3, #1
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	441a      	add	r2, r3
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	61bb      	str	r3, [r7, #24]
        break;
 800bfdc:	e038      	b.n	800c050 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfde:	f7fc fb13 	bl	8008608 <HAL_RCC_GetPCLK2Freq>
 800bfe2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	085a      	lsrs	r2, r3, #1
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	441a      	add	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	61bb      	str	r3, [r7, #24]
        break;
 800bffa:	e029      	b.n	800c050 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	085a      	lsrs	r2, r3, #1
 800c002:	4b21      	ldr	r3, [pc, #132]	; (800c088 <UART_SetConfig+0x550>)
 800c004:	4413      	add	r3, r2
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	6852      	ldr	r2, [r2, #4]
 800c00a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c00e:	b29b      	uxth	r3, r3
 800c010:	61bb      	str	r3, [r7, #24]
        break;
 800c012:	e01d      	b.n	800c050 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c014:	f7fc fa26 	bl	8008464 <HAL_RCC_GetSysClockFreq>
 800c018:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	085a      	lsrs	r2, r3, #1
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	441a      	add	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	fbb2 f3f3 	udiv	r3, r2, r3
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	61bb      	str	r3, [r7, #24]
        break;
 800c030:	e00e      	b.n	800c050 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	085b      	lsrs	r3, r3, #1
 800c038:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	fbb2 f3f3 	udiv	r3, r2, r3
 800c044:	b29b      	uxth	r3, r3
 800c046:	61bb      	str	r3, [r7, #24]
        break;
 800c048:	e002      	b.n	800c050 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	75fb      	strb	r3, [r7, #23]
        break;
 800c04e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	2b0f      	cmp	r3, #15
 800c054:	d908      	bls.n	800c068 <UART_SetConfig+0x530>
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c05c:	d204      	bcs.n	800c068 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	60da      	str	r2, [r3, #12]
 800c066:	e001      	b.n	800c06c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c078:	7dfb      	ldrb	r3, [r7, #23]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3720      	adds	r7, #32
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	01e84800 	.word	0x01e84800
 800c088:	00f42400 	.word	0x00f42400

0800c08c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c098:	f003 0301 	and.w	r3, r3, #1
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00a      	beq.n	800c0b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ba:	f003 0302 	and.w	r3, r3, #2
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00a      	beq.n	800c0d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0dc:	f003 0304 	and.w	r3, r3, #4
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00a      	beq.n	800c0fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0fe:	f003 0308 	and.w	r3, r3, #8
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00a      	beq.n	800c11c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	430a      	orrs	r2, r1
 800c11a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c120:	f003 0310 	and.w	r3, r3, #16
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00a      	beq.n	800c13e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	430a      	orrs	r2, r1
 800c13c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c142:	f003 0320 	and.w	r3, r3, #32
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	689b      	ldr	r3, [r3, #8]
 800c150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	430a      	orrs	r2, r1
 800c15e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01a      	beq.n	800c1a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	430a      	orrs	r2, r1
 800c180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c18a:	d10a      	bne.n	800c1a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00a      	beq.n	800c1c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	430a      	orrs	r2, r1
 800c1c2:	605a      	str	r2, [r3, #4]
  }
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af02      	add	r7, sp, #8
 800c1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c1de:	f7f8 f99f 	bl	8004520 <HAL_GetTick>
 800c1e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 0308 	and.w	r3, r3, #8
 800c1ee:	2b08      	cmp	r3, #8
 800c1f0:	d10e      	bne.n	800c210 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f82a 	bl	800c25a <UART_WaitOnFlagUntilTimeout>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c20c:	2303      	movs	r3, #3
 800c20e:	e020      	b.n	800c252 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f003 0304 	and.w	r3, r3, #4
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	d10e      	bne.n	800c23c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c21e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 f814 	bl	800c25a <UART_WaitOnFlagUntilTimeout>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e00a      	b.n	800c252 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2220      	movs	r2, #32
 800c246:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c25a:	b580      	push	{r7, lr}
 800c25c:	b084      	sub	sp, #16
 800c25e:	af00      	add	r7, sp, #0
 800c260:	60f8      	str	r0, [r7, #12]
 800c262:	60b9      	str	r1, [r7, #8]
 800c264:	603b      	str	r3, [r7, #0]
 800c266:	4613      	mov	r3, r2
 800c268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c26a:	e05d      	b.n	800c328 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c272:	d059      	beq.n	800c328 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c274:	f7f8 f954 	bl	8004520 <HAL_GetTick>
 800c278:	4602      	mov	r2, r0
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	69ba      	ldr	r2, [r7, #24]
 800c280:	429a      	cmp	r2, r3
 800c282:	d302      	bcc.n	800c28a <UART_WaitOnFlagUntilTimeout+0x30>
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d11b      	bne.n	800c2c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c298:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689a      	ldr	r2, [r3, #8]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f022 0201 	bic.w	r2, r2, #1
 800c2a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2220      	movs	r2, #32
 800c2ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2220      	movs	r2, #32
 800c2b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e042      	b.n	800c348 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0304 	and.w	r3, r3, #4
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d02b      	beq.n	800c328 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2de:	d123      	bne.n	800c328 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2e8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c2f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	689a      	ldr	r2, [r3, #8]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f022 0201 	bic.w	r2, r2, #1
 800c308:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2220      	movs	r2, #32
 800c30e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2220      	movs	r2, #32
 800c314:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	2220      	movs	r2, #32
 800c31a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2200      	movs	r2, #0
 800c320:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c324:	2303      	movs	r3, #3
 800c326:	e00f      	b.n	800c348 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	69da      	ldr	r2, [r3, #28]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	4013      	ands	r3, r2
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	429a      	cmp	r2, r3
 800c336:	bf0c      	ite	eq
 800c338:	2301      	moveq	r3, #1
 800c33a:	2300      	movne	r3, #0
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	461a      	mov	r2, r3
 800c340:	79fb      	ldrb	r3, [r7, #7]
 800c342:	429a      	cmp	r2, r3
 800c344:	d092      	beq.n	800c26c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c366:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2220      	movs	r2, #32
 800c36c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c36e:	bf00      	nop
 800c370:	370c      	adds	r7, #12
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b083      	sub	sp, #12
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c390:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f022 0201 	bic.w	r2, r2, #1
 800c3a0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2220      	movs	r2, #32
 800c3a6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c3ae:	bf00      	nop
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	69db      	ldr	r3, [r3, #28]
 800c3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3d0:	d01e      	beq.n	800c410 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c3e8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	689a      	ldr	r2, [r3, #8]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f022 0201 	bic.w	r2, r2, #1
 800c3f8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	689a      	ldr	r2, [r3, #8]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c408:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2220      	movs	r2, #32
 800c40e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c410:	68f8      	ldr	r0, [r7, #12]
 800c412:	f7ff fb69 	bl	800bae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c416:	bf00      	nop
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7ff fb65 	bl	800bafc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c432:	bf00      	nop
 800c434:	3710      	adds	r7, #16
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b086      	sub	sp, #24
 800c43e:	af00      	add	r7, sp, #0
 800c440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c446:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c44c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c452:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c45e:	2b80      	cmp	r3, #128	; 0x80
 800c460:	d109      	bne.n	800c476 <UART_DMAError+0x3c>
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	2b21      	cmp	r3, #33	; 0x21
 800c466:	d106      	bne.n	800c476 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800c470:	6978      	ldr	r0, [r7, #20]
 800c472:	f7ff ff6d 	bl	800c350 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c480:	2b40      	cmp	r3, #64	; 0x40
 800c482:	d109      	bne.n	800c498 <UART_DMAError+0x5e>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2b22      	cmp	r3, #34	; 0x22
 800c488:	d106      	bne.n	800c498 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800c492:	6978      	ldr	r0, [r7, #20]
 800c494:	f7ff ff71 	bl	800c37a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c49c:	f043 0210 	orr.w	r2, r3, #16
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4a4:	6978      	ldr	r0, [r7, #20]
 800c4a6:	f7ff fb33 	bl	800bb10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4aa:	bf00      	nop
 800c4ac:	3718      	adds	r7, #24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b084      	sub	sp, #16
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	f7ff fb1d 	bl	800bb10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4d6:	bf00      	nop
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b082      	sub	sp, #8
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4f4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2220      	movs	r2, #32
 800c4fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7ff fae6 	bl	800bad4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c510:	b084      	sub	sp, #16
 800c512:	b480      	push	{r7}
 800c514:	b085      	sub	sp, #20
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	f107 001c 	add.w	r0, r7, #28
 800c51e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c526:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c528:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c52a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c52e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c532:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c536:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c53a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	4313      	orrs	r3, r2
 800c540:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	685a      	ldr	r2, [r3, #4]
 800c546:	4b07      	ldr	r3, [pc, #28]	; (800c564 <SDMMC_Init+0x54>)
 800c548:	4013      	ands	r3, r2
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	431a      	orrs	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	b004      	add	sp, #16
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	ffff8100 	.word	0xffff8100

0800c568 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2203      	movs	r2, #3
 800c574:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c576:	2002      	movs	r0, #2
 800c578:	f7f7 ffde 	bl	8004538 <HAL_Delay>
  
  return HAL_OK;
 800c57c:	2300      	movs	r3, #0
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c586:	b480      	push	{r7}
 800c588:	b083      	sub	sp, #12
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0303 	and.w	r3, r3, #3
}
 800c596:	4618      	mov	r0, r3
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
	...

0800c5a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b085      	sub	sp, #20
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c5c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c5c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c5ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68da      	ldr	r2, [r3, #12]
 800c5da:	4b06      	ldr	r3, [pc, #24]	; (800c5f4 <SDMMC_SendCommand+0x50>)
 800c5dc:	4013      	ands	r3, r2
 800c5de:	68fa      	ldr	r2, [r7, #12]
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c5e6:	2300      	movs	r3, #0
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3714      	adds	r7, #20
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr
 800c5f4:	fffff000 	.word	0xfffff000

0800c5f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	691b      	ldr	r3, [r3, #16]
 800c604:	b2db      	uxtb	r3, r3
}
 800c606:	4618      	mov	r0, r3
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c612:	b480      	push	{r7}
 800c614:	b085      	sub	sp, #20
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3314      	adds	r3, #20
 800c620:	461a      	mov	r2, r3
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	4413      	add	r3, r2
 800c626:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
}  
 800c62c:	4618      	mov	r0, r3
 800c62e:	3714      	adds	r7, #20
 800c630:	46bd      	mov	sp, r7
 800c632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c636:	4770      	bx	lr

0800c638 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	; 0x28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c648:	2307      	movs	r3, #7
 800c64a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c64c:	2340      	movs	r3, #64	; 0x40
 800c64e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c650:	2300      	movs	r3, #0
 800c652:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c658:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c65a:	f107 0310 	add.w	r3, r7, #16
 800c65e:	4619      	mov	r1, r3
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7ff ff9f 	bl	800c5a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c666:	f241 3288 	movw	r2, #5000	; 0x1388
 800c66a:	2107      	movs	r1, #7
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f000 f8c9 	bl	800c804 <SDMMC_GetCmdResp1>
 800c672:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c676:	4618      	mov	r0, r3
 800c678:	3728      	adds	r7, #40	; 0x28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b088      	sub	sp, #32
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c686:	2300      	movs	r3, #0
 800c688:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c68a:	2300      	movs	r3, #0
 800c68c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c68e:	2300      	movs	r3, #0
 800c690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c692:	2300      	movs	r3, #0
 800c694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c69a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c69c:	f107 0308 	add.w	r3, r7, #8
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff ff7e 	bl	800c5a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 f883 	bl	800c7b4 <SDMMC_GetCmdError>
 800c6ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3720      	adds	r7, #32
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b088      	sub	sp, #32
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c6ca:	23c0      	movs	r3, #192	; 0xc0
 800c6cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6d8:	f107 0308 	add.w	r3, r7, #8
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f7ff ff60 	bl	800c5a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f979 	bl	800c9dc <SDMMC_GetCmdResp2>
 800c6ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6ec:	69fb      	ldr	r3, [r7, #28]
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3720      	adds	r7, #32
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b088      	sub	sp, #32
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c704:	2309      	movs	r3, #9
 800c706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c708:	23c0      	movs	r3, #192	; 0xc0
 800c70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c70c:	2300      	movs	r3, #0
 800c70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c716:	f107 0308 	add.w	r3, r7, #8
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff ff41 	bl	800c5a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f95a 	bl	800c9dc <SDMMC_GetCmdResp2>
 800c728:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c72a:	69fb      	ldr	r3, [r7, #28]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3720      	adds	r7, #32
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b088      	sub	sp, #32
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c73e:	2300      	movs	r3, #0
 800c740:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c742:	2303      	movs	r3, #3
 800c744:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c746:	2340      	movs	r3, #64	; 0x40
 800c748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c74a:	2300      	movs	r3, #0
 800c74c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c74e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c752:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c754:	f107 0308 	add.w	r3, r7, #8
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff ff22 	bl	800c5a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c760:	683a      	ldr	r2, [r7, #0]
 800c762:	2103      	movs	r1, #3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f000 f9b9 	bl	800cadc <SDMMC_GetCmdResp6>
 800c76a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c76c:	69fb      	ldr	r3, [r7, #28]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3720      	adds	r7, #32
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b088      	sub	sp, #32
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
 800c77e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800c784:	2301      	movs	r3, #1
 800c786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c788:	2340      	movs	r3, #64	; 0x40
 800c78a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c78c:	2300      	movs	r3, #0
 800c78e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c794:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c796:	f107 0308 	add.w	r3, r7, #8
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff ff01 	bl	800c5a4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f960 	bl	800ca68 <SDMMC_GetCmdResp3>
 800c7a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7aa:	69fb      	ldr	r3, [r7, #28]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3720      	adds	r7, #32
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c7b4:	b490      	push	{r4, r7}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c7bc:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <SDMMC_GetCmdError+0x48>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a0f      	ldr	r2, [pc, #60]	; (800c800 <SDMMC_GetCmdError+0x4c>)
 800c7c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7c6:	0a5b      	lsrs	r3, r3, #9
 800c7c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c7d0:	4623      	mov	r3, r4
 800c7d2:	1e5c      	subs	r4, r3, #1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d102      	bne.n	800c7de <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c7dc:	e009      	b.n	800c7f2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d0f2      	beq.n	800c7d0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	22c5      	movs	r2, #197	; 0xc5
 800c7ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bc90      	pop	{r4, r7}
 800c7fa:	4770      	bx	lr
 800c7fc:	20000048 	.word	0x20000048
 800c800:	10624dd3 	.word	0x10624dd3

0800c804 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c804:	b590      	push	{r4, r7, lr}
 800c806:	b087      	sub	sp, #28
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	460b      	mov	r3, r1
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c812:	4b6f      	ldr	r3, [pc, #444]	; (800c9d0 <SDMMC_GetCmdResp1+0x1cc>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a6f      	ldr	r2, [pc, #444]	; (800c9d4 <SDMMC_GetCmdResp1+0x1d0>)
 800c818:	fba2 2303 	umull	r2, r3, r2, r3
 800c81c:	0a5b      	lsrs	r3, r3, #9
 800c81e:	687a      	ldr	r2, [r7, #4]
 800c820:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c824:	4623      	mov	r3, r4
 800c826:	1e5c      	subs	r4, r3, #1
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c82c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c830:	e0c9      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c836:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d0f0      	beq.n	800c824 <SDMMC_GetCmdResp1+0x20>
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1eb      	bne.n	800c824 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c850:	f003 0304 	and.w	r3, r3, #4
 800c854:	2b00      	cmp	r3, #0
 800c856:	d004      	beq.n	800c862 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2204      	movs	r2, #4
 800c85c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c85e:	2304      	movs	r3, #4
 800c860:	e0b1      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c866:	f003 0301 	and.w	r3, r3, #1
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d004      	beq.n	800c878 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2201      	movs	r2, #1
 800c872:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c874:	2301      	movs	r3, #1
 800c876:	e0a6      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	22c5      	movs	r2, #197	; 0xc5
 800c87c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f7ff feba 	bl	800c5f8 <SDMMC_GetCommandResponse>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	7afb      	ldrb	r3, [r7, #11]
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d001      	beq.n	800c892 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c88e:	2301      	movs	r3, #1
 800c890:	e099      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c892:	2100      	movs	r1, #0
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f7ff febc 	bl	800c612 <SDMMC_GetResponse>
 800c89a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	4b4e      	ldr	r3, [pc, #312]	; (800c9d8 <SDMMC_GetCmdResp1+0x1d4>)
 800c8a0:	4013      	ands	r3, r2
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d101      	bne.n	800c8aa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e08d      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	da02      	bge.n	800c8b6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c8b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c8b4:	e087      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d001      	beq.n	800c8c4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c8c0:	2340      	movs	r3, #64	; 0x40
 800c8c2:	e080      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c8ce:	2380      	movs	r3, #128	; 0x80
 800c8d0:	e079      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c8dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c8e0:	e071      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d002      	beq.n	800c8f2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c8ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8f0:	e069      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c8fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c900:	e061      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c90c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c910:	e059      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c91c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c920:	e051      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d002      	beq.n	800c932 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c92c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c930:	e049      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c93c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c940:	e041      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c94c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c950:	e039      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c95c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c960:	e031      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c96c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c970:	e029      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c97c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c980:	e021      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d002      	beq.n	800c992 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c98c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c990:	e019      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c99c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c9a0:	e011      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c9ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c9b0:	e009      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	f003 0308 	and.w	r3, r3, #8
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c9bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c9c0:	e001      	b.n	800c9c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c9c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	371c      	adds	r7, #28
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd90      	pop	{r4, r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20000048 	.word	0x20000048
 800c9d4:	10624dd3 	.word	0x10624dd3
 800c9d8:	fdffe008 	.word	0xfdffe008

0800c9dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c9dc:	b490      	push	{r4, r7}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9e4:	4b1e      	ldr	r3, [pc, #120]	; (800ca60 <SDMMC_GetCmdResp2+0x84>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	4a1e      	ldr	r2, [pc, #120]	; (800ca64 <SDMMC_GetCmdResp2+0x88>)
 800c9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ee:	0a5b      	lsrs	r3, r3, #9
 800c9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c9f8:	4623      	mov	r3, r4
 800c9fa:	1e5c      	subs	r4, r3, #1
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca04:	e026      	b.n	800ca54 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca0a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d0f0      	beq.n	800c9f8 <SDMMC_GetCmdResp2+0x1c>
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d1eb      	bne.n	800c9f8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca24:	f003 0304 	and.w	r3, r3, #4
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d004      	beq.n	800ca36 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2204      	movs	r2, #4
 800ca30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca32:	2304      	movs	r3, #4
 800ca34:	e00e      	b.n	800ca54 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2201      	movs	r2, #1
 800ca46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e003      	b.n	800ca54 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	22c5      	movs	r2, #197	; 0xc5
 800ca50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca52:	2300      	movs	r3, #0
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3710      	adds	r7, #16
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bc90      	pop	{r4, r7}
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	20000048 	.word	0x20000048
 800ca64:	10624dd3 	.word	0x10624dd3

0800ca68 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ca68:	b490      	push	{r4, r7}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca70:	4b18      	ldr	r3, [pc, #96]	; (800cad4 <SDMMC_GetCmdResp3+0x6c>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a18      	ldr	r2, [pc, #96]	; (800cad8 <SDMMC_GetCmdResp3+0x70>)
 800ca76:	fba2 2303 	umull	r2, r3, r2, r3
 800ca7a:	0a5b      	lsrs	r3, r3, #9
 800ca7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca84:	4623      	mov	r3, r4
 800ca86:	1e5c      	subs	r4, r3, #1
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d102      	bne.n	800ca92 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca90:	e01b      	b.n	800caca <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d0f0      	beq.n	800ca84 <SDMMC_GetCmdResp3+0x1c>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1eb      	bne.n	800ca84 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cab0:	f003 0304 	and.w	r3, r3, #4
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d004      	beq.n	800cac2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2204      	movs	r2, #4
 800cabc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cabe:	2304      	movs	r3, #4
 800cac0:	e003      	b.n	800caca <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	22c5      	movs	r2, #197	; 0xc5
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bc90      	pop	{r4, r7}
 800cad2:	4770      	bx	lr
 800cad4:	20000048 	.word	0x20000048
 800cad8:	10624dd3 	.word	0x10624dd3

0800cadc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cadc:	b590      	push	{r4, r7, lr}
 800cade:	b087      	sub	sp, #28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	460b      	mov	r3, r1
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800caea:	4b34      	ldr	r3, [pc, #208]	; (800cbbc <SDMMC_GetCmdResp6+0xe0>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a34      	ldr	r2, [pc, #208]	; (800cbc0 <SDMMC_GetCmdResp6+0xe4>)
 800caf0:	fba2 2303 	umull	r2, r3, r2, r3
 800caf4:	0a5b      	lsrs	r3, r3, #9
 800caf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cafa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cafe:	4623      	mov	r3, r4
 800cb00:	1e5c      	subs	r4, r3, #1
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d102      	bne.n	800cb0c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb0a:	e052      	b.n	800cbb2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb10:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d0f0      	beq.n	800cafe <SDMMC_GetCmdResp6+0x22>
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1eb      	bne.n	800cafe <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb2a:	f003 0304 	and.w	r3, r3, #4
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d004      	beq.n	800cb3c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2204      	movs	r2, #4
 800cb36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb38:	2304      	movs	r3, #4
 800cb3a:	e03a      	b.n	800cbb2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d004      	beq.n	800cb52 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e02f      	b.n	800cbb2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7ff fd50 	bl	800c5f8 <SDMMC_GetCommandResponse>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	7afb      	ldrb	r3, [r7, #11]
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d001      	beq.n	800cb66 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e025      	b.n	800cbb2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	22c5      	movs	r2, #197	; 0xc5
 800cb6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff fd4f 	bl	800c612 <SDMMC_GetResponse>
 800cb74:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d106      	bne.n	800cb8e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	0c1b      	lsrs	r3, r3, #16
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	e011      	b.n	800cbb2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cb9c:	e009      	b.n	800cbb2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbac:	e001      	b.n	800cbb2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cbae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	371c      	adds	r7, #28
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd90      	pop	{r4, r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000048 	.word	0x20000048
 800cbc0:	10624dd3 	.word	0x10624dd3

0800cbc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	4603      	mov	r3, r0
 800cbcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cbce:	79fb      	ldrb	r3, [r7, #7]
 800cbd0:	4a08      	ldr	r2, [pc, #32]	; (800cbf4 <disk_status+0x30>)
 800cbd2:	009b      	lsls	r3, r3, #2
 800cbd4:	4413      	add	r3, r2
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	79fa      	ldrb	r2, [r7, #7]
 800cbdc:	4905      	ldr	r1, [pc, #20]	; (800cbf4 <disk_status+0x30>)
 800cbde:	440a      	add	r2, r1
 800cbe0:	7a12      	ldrb	r2, [r2, #8]
 800cbe2:	4610      	mov	r0, r2
 800cbe4:	4798      	blx	r3
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	20001e64 	.word	0x20001e64

0800cbf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cc06:	79fb      	ldrb	r3, [r7, #7]
 800cc08:	4a0d      	ldr	r2, [pc, #52]	; (800cc40 <disk_initialize+0x48>)
 800cc0a:	5cd3      	ldrb	r3, [r2, r3]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d111      	bne.n	800cc34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	4a0b      	ldr	r2, [pc, #44]	; (800cc40 <disk_initialize+0x48>)
 800cc14:	2101      	movs	r1, #1
 800cc16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	4a09      	ldr	r2, [pc, #36]	; (800cc40 <disk_initialize+0x48>)
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	79fa      	ldrb	r2, [r7, #7]
 800cc26:	4906      	ldr	r1, [pc, #24]	; (800cc40 <disk_initialize+0x48>)
 800cc28:	440a      	add	r2, r1
 800cc2a:	7a12      	ldrb	r2, [r2, #8]
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	4798      	blx	r3
 800cc30:	4603      	mov	r3, r0
 800cc32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	20001e64 	.word	0x20001e64

0800cc44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cc44:	b590      	push	{r4, r7, lr}
 800cc46:	b087      	sub	sp, #28
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	607a      	str	r2, [r7, #4]
 800cc4e:	603b      	str	r3, [r7, #0]
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	4a0a      	ldr	r2, [pc, #40]	; (800cc80 <disk_read+0x3c>)
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4413      	add	r3, r2
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	689c      	ldr	r4, [r3, #8]
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4a07      	ldr	r2, [pc, #28]	; (800cc80 <disk_read+0x3c>)
 800cc64:	4413      	add	r3, r2
 800cc66:	7a18      	ldrb	r0, [r3, #8]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	47a0      	blx	r4
 800cc70:	4603      	mov	r3, r0
 800cc72:	75fb      	strb	r3, [r7, #23]
  return res;
 800cc74:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	371c      	adds	r7, #28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd90      	pop	{r4, r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20001e64 	.word	0x20001e64

0800cc84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cc84:	b590      	push	{r4, r7, lr}
 800cc86:	b087      	sub	sp, #28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60b9      	str	r1, [r7, #8]
 800cc8c:	607a      	str	r2, [r7, #4]
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	4603      	mov	r3, r0
 800cc92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
 800cc96:	4a0a      	ldr	r2, [pc, #40]	; (800ccc0 <disk_write+0x3c>)
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4413      	add	r3, r2
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	68dc      	ldr	r4, [r3, #12]
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	4a07      	ldr	r2, [pc, #28]	; (800ccc0 <disk_write+0x3c>)
 800cca4:	4413      	add	r3, r2
 800cca6:	7a18      	ldrb	r0, [r3, #8]
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	47a0      	blx	r4
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	75fb      	strb	r3, [r7, #23]
  return res;
 800ccb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	371c      	adds	r7, #28
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd90      	pop	{r4, r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	20001e64 	.word	0x20001e64

0800ccc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	4603      	mov	r3, r0
 800cccc:	603a      	str	r2, [r7, #0]
 800ccce:	71fb      	strb	r3, [r7, #7]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	4a09      	ldr	r2, [pc, #36]	; (800ccfc <disk_ioctl+0x38>)
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	4413      	add	r3, r2
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	79fa      	ldrb	r2, [r7, #7]
 800cce2:	4906      	ldr	r1, [pc, #24]	; (800ccfc <disk_ioctl+0x38>)
 800cce4:	440a      	add	r2, r1
 800cce6:	7a10      	ldrb	r0, [r2, #8]
 800cce8:	79b9      	ldrb	r1, [r7, #6]
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	4798      	blx	r3
 800ccee:	4603      	mov	r3, r0
 800ccf0:	73fb      	strb	r3, [r7, #15]
  return res;
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3710      	adds	r7, #16
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	bd80      	pop	{r7, pc}
 800ccfc:	20001e64 	.word	0x20001e64

0800cd00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cd00:	b480      	push	{r7}
 800cd02:	b085      	sub	sp, #20
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cd10:	89fb      	ldrh	r3, [r7, #14]
 800cd12:	021b      	lsls	r3, r3, #8
 800cd14:	b21a      	sxth	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	b21b      	sxth	r3, r3
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	b21b      	sxth	r3, r3
 800cd20:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cd22:	89fb      	ldrh	r3, [r7, #14]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr

0800cd30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	3303      	adds	r3, #3
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	021b      	lsls	r3, r3, #8
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	3202      	adds	r2, #2
 800cd48:	7812      	ldrb	r2, [r2, #0]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	021b      	lsls	r3, r3, #8
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	3201      	adds	r2, #1
 800cd56:	7812      	ldrb	r2, [r2, #0]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	021b      	lsls	r3, r3, #8
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	7812      	ldrb	r2, [r2, #0]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	60fb      	str	r3, [r7, #12]
	return rv;
 800cd68:	68fb      	ldr	r3, [r7, #12]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cd76:	b480      	push	{r7}
 800cd78:	b083      	sub	sp, #12
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	460b      	mov	r3, r1
 800cd80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	1c5a      	adds	r2, r3, #1
 800cd86:	607a      	str	r2, [r7, #4]
 800cd88:	887a      	ldrh	r2, [r7, #2]
 800cd8a:	b2d2      	uxtb	r2, r2
 800cd8c:	701a      	strb	r2, [r3, #0]
 800cd8e:	887b      	ldrh	r3, [r7, #2]
 800cd90:	0a1b      	lsrs	r3, r3, #8
 800cd92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	1c5a      	adds	r2, r3, #1
 800cd98:	607a      	str	r2, [r7, #4]
 800cd9a:	887a      	ldrh	r2, [r7, #2]
 800cd9c:	b2d2      	uxtb	r2, r2
 800cd9e:	701a      	strb	r2, [r3, #0]
}
 800cda0:	bf00      	nop
 800cda2:	370c      	adds	r7, #12
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	1c5a      	adds	r2, r3, #1
 800cdba:	607a      	str	r2, [r7, #4]
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	b2d2      	uxtb	r2, r2
 800cdc0:	701a      	strb	r2, [r3, #0]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	1c5a      	adds	r2, r3, #1
 800cdcc:	607a      	str	r2, [r7, #4]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	b2d2      	uxtb	r2, r2
 800cdd2:	701a      	strb	r2, [r3, #0]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	0a1b      	lsrs	r3, r3, #8
 800cdd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	1c5a      	adds	r2, r3, #1
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	b2d2      	uxtb	r2, r2
 800cde4:	701a      	strb	r2, [r3, #0]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	0a1b      	lsrs	r3, r3, #8
 800cdea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	607a      	str	r2, [r7, #4]
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	b2d2      	uxtb	r2, r2
 800cdf6:	701a      	strb	r2, [r3, #0]
}
 800cdf8:	bf00      	nop
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ce04:	b480      	push	{r7}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00d      	beq.n	800ce3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ce1e:	693a      	ldr	r2, [r7, #16]
 800ce20:	1c53      	adds	r3, r2, #1
 800ce22:	613b      	str	r3, [r7, #16]
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	1c59      	adds	r1, r3, #1
 800ce28:	6179      	str	r1, [r7, #20]
 800ce2a:	7812      	ldrb	r2, [r2, #0]
 800ce2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	607b      	str	r3, [r7, #4]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1f1      	bne.n	800ce1e <mem_cpy+0x1a>
	}
}
 800ce3a:	bf00      	nop
 800ce3c:	371c      	adds	r7, #28
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ce46:	b480      	push	{r7}
 800ce48:	b087      	sub	sp, #28
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	60f8      	str	r0, [r7, #12]
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	617a      	str	r2, [r7, #20]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3b01      	subs	r3, #1
 800ce66:	607b      	str	r3, [r7, #4]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d1f3      	bne.n	800ce56 <mem_set+0x10>
}
 800ce6e:	bf00      	nop
 800ce70:	371c      	adds	r7, #28
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ce7a:	b480      	push	{r7}
 800ce7c:	b089      	sub	sp, #36	; 0x24
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	60f8      	str	r0, [r7, #12]
 800ce82:	60b9      	str	r1, [r7, #8]
 800ce84:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	61fb      	str	r3, [r7, #28]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	1c5a      	adds	r2, r3, #1
 800ce96:	61fa      	str	r2, [r7, #28]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	1c5a      	adds	r2, r3, #1
 800cea0:	61ba      	str	r2, [r7, #24]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	1acb      	subs	r3, r1, r3
 800cea6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	607b      	str	r3, [r7, #4]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d002      	beq.n	800ceba <mem_cmp+0x40>
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d0eb      	beq.n	800ce92 <mem_cmp+0x18>

	return r;
 800ceba:	697b      	ldr	r3, [r7, #20]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3724      	adds	r7, #36	; 0x24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ced2:	e002      	b.n	800ceda <chk_chr+0x12>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	3301      	adds	r3, #1
 800ced8:	607b      	str	r3, [r7, #4]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d005      	beq.n	800ceee <chk_chr+0x26>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	461a      	mov	r2, r3
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d1f2      	bne.n	800ced4 <chk_chr+0xc>
	return *str;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	781b      	ldrb	r3, [r3, #0]
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	370c      	adds	r7, #12
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
	...

0800cf00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	60bb      	str	r3, [r7, #8]
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	60fb      	str	r3, [r7, #12]
 800cf12:	e029      	b.n	800cf68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cf14:	4a27      	ldr	r2, [pc, #156]	; (800cfb4 <chk_lock+0xb4>)
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	011b      	lsls	r3, r3, #4
 800cf1a:	4413      	add	r3, r2
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d01d      	beq.n	800cf5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf22:	4a24      	ldr	r2, [pc, #144]	; (800cfb4 <chk_lock+0xb4>)
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	011b      	lsls	r3, r3, #4
 800cf28:	4413      	add	r3, r2
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d116      	bne.n	800cf62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cf34:	4a1f      	ldr	r2, [pc, #124]	; (800cfb4 <chk_lock+0xb4>)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	011b      	lsls	r3, r3, #4
 800cf3a:	4413      	add	r3, r2
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d10c      	bne.n	800cf62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf48:	4a1a      	ldr	r2, [pc, #104]	; (800cfb4 <chk_lock+0xb4>)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	011b      	lsls	r3, r3, #4
 800cf4e:	4413      	add	r3, r2
 800cf50:	3308      	adds	r3, #8
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d102      	bne.n	800cf62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cf5c:	e007      	b.n	800cf6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	3301      	adds	r3, #1
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d9d2      	bls.n	800cf14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d109      	bne.n	800cf88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d102      	bne.n	800cf80 <chk_lock+0x80>
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d101      	bne.n	800cf84 <chk_lock+0x84>
 800cf80:	2300      	movs	r3, #0
 800cf82:	e010      	b.n	800cfa6 <chk_lock+0xa6>
 800cf84:	2312      	movs	r3, #18
 800cf86:	e00e      	b.n	800cfa6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d108      	bne.n	800cfa0 <chk_lock+0xa0>
 800cf8e:	4a09      	ldr	r2, [pc, #36]	; (800cfb4 <chk_lock+0xb4>)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	011b      	lsls	r3, r3, #4
 800cf94:	4413      	add	r3, r2
 800cf96:	330c      	adds	r3, #12
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf9e:	d101      	bne.n	800cfa4 <chk_lock+0xa4>
 800cfa0:	2310      	movs	r3, #16
 800cfa2:	e000      	b.n	800cfa6 <chk_lock+0xa6>
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3714      	adds	r7, #20
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr
 800cfb2:	bf00      	nop
 800cfb4:	20001c44 	.word	0x20001c44

0800cfb8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	607b      	str	r3, [r7, #4]
 800cfc2:	e002      	b.n	800cfca <enq_lock+0x12>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	607b      	str	r3, [r7, #4]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d806      	bhi.n	800cfde <enq_lock+0x26>
 800cfd0:	4a09      	ldr	r2, [pc, #36]	; (800cff8 <enq_lock+0x40>)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	011b      	lsls	r3, r3, #4
 800cfd6:	4413      	add	r3, r2
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1f2      	bne.n	800cfc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	bf14      	ite	ne
 800cfe4:	2301      	movne	r3, #1
 800cfe6:	2300      	moveq	r3, #0
 800cfe8:	b2db      	uxtb	r3, r3
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	370c      	adds	r7, #12
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	20001c44 	.word	0x20001c44

0800cffc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b085      	sub	sp, #20
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d006:	2300      	movs	r3, #0
 800d008:	60fb      	str	r3, [r7, #12]
 800d00a:	e01f      	b.n	800d04c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d00c:	4a41      	ldr	r2, [pc, #260]	; (800d114 <inc_lock+0x118>)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	011b      	lsls	r3, r3, #4
 800d012:	4413      	add	r3, r2
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d113      	bne.n	800d046 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d01e:	4a3d      	ldr	r2, [pc, #244]	; (800d114 <inc_lock+0x118>)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	011b      	lsls	r3, r3, #4
 800d024:	4413      	add	r3, r2
 800d026:	3304      	adds	r3, #4
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d02e:	429a      	cmp	r2, r3
 800d030:	d109      	bne.n	800d046 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d032:	4a38      	ldr	r2, [pc, #224]	; (800d114 <inc_lock+0x118>)
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	011b      	lsls	r3, r3, #4
 800d038:	4413      	add	r3, r2
 800d03a:	3308      	adds	r3, #8
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d042:	429a      	cmp	r2, r3
 800d044:	d006      	beq.n	800d054 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3301      	adds	r3, #1
 800d04a:	60fb      	str	r3, [r7, #12]
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d9dc      	bls.n	800d00c <inc_lock+0x10>
 800d052:	e000      	b.n	800d056 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d054:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b02      	cmp	r3, #2
 800d05a:	d132      	bne.n	800d0c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d05c:	2300      	movs	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e002      	b.n	800d068 <inc_lock+0x6c>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	3301      	adds	r3, #1
 800d066:	60fb      	str	r3, [r7, #12]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2b01      	cmp	r3, #1
 800d06c:	d806      	bhi.n	800d07c <inc_lock+0x80>
 800d06e:	4a29      	ldr	r2, [pc, #164]	; (800d114 <inc_lock+0x118>)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d1f2      	bne.n	800d062 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d101      	bne.n	800d086 <inc_lock+0x8a>
 800d082:	2300      	movs	r3, #0
 800d084:	e040      	b.n	800d108 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	4922      	ldr	r1, [pc, #136]	; (800d114 <inc_lock+0x118>)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	011b      	lsls	r3, r3, #4
 800d090:	440b      	add	r3, r1
 800d092:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	491e      	ldr	r1, [pc, #120]	; (800d114 <inc_lock+0x118>)
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	011b      	lsls	r3, r3, #4
 800d09e:	440b      	add	r3, r1
 800d0a0:	3304      	adds	r3, #4
 800d0a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	695a      	ldr	r2, [r3, #20]
 800d0a8:	491a      	ldr	r1, [pc, #104]	; (800d114 <inc_lock+0x118>)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	011b      	lsls	r3, r3, #4
 800d0ae:	440b      	add	r3, r1
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d0b4:	4a17      	ldr	r2, [pc, #92]	; (800d114 <inc_lock+0x118>)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	011b      	lsls	r3, r3, #4
 800d0ba:	4413      	add	r3, r2
 800d0bc:	330c      	adds	r3, #12
 800d0be:	2200      	movs	r2, #0
 800d0c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d009      	beq.n	800d0dc <inc_lock+0xe0>
 800d0c8:	4a12      	ldr	r2, [pc, #72]	; (800d114 <inc_lock+0x118>)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	011b      	lsls	r3, r3, #4
 800d0ce:	4413      	add	r3, r2
 800d0d0:	330c      	adds	r3, #12
 800d0d2:	881b      	ldrh	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d001      	beq.n	800d0dc <inc_lock+0xe0>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	e015      	b.n	800d108 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d108      	bne.n	800d0f4 <inc_lock+0xf8>
 800d0e2:	4a0c      	ldr	r2, [pc, #48]	; (800d114 <inc_lock+0x118>)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	011b      	lsls	r3, r3, #4
 800d0e8:	4413      	add	r3, r2
 800d0ea:	330c      	adds	r3, #12
 800d0ec:	881b      	ldrh	r3, [r3, #0]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	e001      	b.n	800d0f8 <inc_lock+0xfc>
 800d0f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0f8:	4906      	ldr	r1, [pc, #24]	; (800d114 <inc_lock+0x118>)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	011b      	lsls	r3, r3, #4
 800d0fe:	440b      	add	r3, r1
 800d100:	330c      	adds	r3, #12
 800d102:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	3301      	adds	r3, #1
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	20001c44 	.word	0x20001c44

0800d118 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d118:	b480      	push	{r7}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	3b01      	subs	r3, #1
 800d124:	607b      	str	r3, [r7, #4]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d825      	bhi.n	800d178 <dec_lock+0x60>
		n = Files[i].ctr;
 800d12c:	4a17      	ldr	r2, [pc, #92]	; (800d18c <dec_lock+0x74>)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	011b      	lsls	r3, r3, #4
 800d132:	4413      	add	r3, r2
 800d134:	330c      	adds	r3, #12
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d13a:	89fb      	ldrh	r3, [r7, #14]
 800d13c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d140:	d101      	bne.n	800d146 <dec_lock+0x2e>
 800d142:	2300      	movs	r3, #0
 800d144:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d146:	89fb      	ldrh	r3, [r7, #14]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <dec_lock+0x3a>
 800d14c:	89fb      	ldrh	r3, [r7, #14]
 800d14e:	3b01      	subs	r3, #1
 800d150:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d152:	4a0e      	ldr	r2, [pc, #56]	; (800d18c <dec_lock+0x74>)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	011b      	lsls	r3, r3, #4
 800d158:	4413      	add	r3, r2
 800d15a:	330c      	adds	r3, #12
 800d15c:	89fa      	ldrh	r2, [r7, #14]
 800d15e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d160:	89fb      	ldrh	r3, [r7, #14]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d105      	bne.n	800d172 <dec_lock+0x5a>
 800d166:	4a09      	ldr	r2, [pc, #36]	; (800d18c <dec_lock+0x74>)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	011b      	lsls	r3, r3, #4
 800d16c:	4413      	add	r3, r2
 800d16e:	2200      	movs	r2, #0
 800d170:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	737b      	strb	r3, [r7, #13]
 800d176:	e001      	b.n	800d17c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d178:	2302      	movs	r3, #2
 800d17a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d17c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	20001c44 	.word	0x20001c44

0800d190 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d198:	2300      	movs	r3, #0
 800d19a:	60fb      	str	r3, [r7, #12]
 800d19c:	e010      	b.n	800d1c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d19e:	4a0d      	ldr	r2, [pc, #52]	; (800d1d4 <clear_lock+0x44>)
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	011b      	lsls	r3, r3, #4
 800d1a4:	4413      	add	r3, r2
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	687a      	ldr	r2, [r7, #4]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d105      	bne.n	800d1ba <clear_lock+0x2a>
 800d1ae:	4a09      	ldr	r2, [pc, #36]	; (800d1d4 <clear_lock+0x44>)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	011b      	lsls	r3, r3, #4
 800d1b4:	4413      	add	r3, r2
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	60fb      	str	r3, [r7, #12]
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d9eb      	bls.n	800d19e <clear_lock+0xe>
	}
}
 800d1c6:	bf00      	nop
 800d1c8:	3714      	adds	r7, #20
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	20001c44 	.word	0x20001c44

0800d1d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	78db      	ldrb	r3, [r3, #3]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d034      	beq.n	800d256 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	7858      	ldrb	r0, [r3, #1]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	697a      	ldr	r2, [r7, #20]
 800d200:	f7ff fd40 	bl	800cc84 <disk_write>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d002      	beq.n	800d210 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	73fb      	strb	r3, [r7, #15]
 800d20e:	e022      	b.n	800d256 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	1ad2      	subs	r2, r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	69db      	ldr	r3, [r3, #28]
 800d222:	429a      	cmp	r2, r3
 800d224:	d217      	bcs.n	800d256 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	789b      	ldrb	r3, [r3, #2]
 800d22a:	613b      	str	r3, [r7, #16]
 800d22c:	e010      	b.n	800d250 <sync_window+0x78>
					wsect += fs->fsize;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	69db      	ldr	r3, [r3, #28]
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	4413      	add	r3, r2
 800d236:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	7858      	ldrb	r0, [r3, #1]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d242:	2301      	movs	r3, #1
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	f7ff fd1d 	bl	800cc84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	3b01      	subs	r3, #1
 800d24e:	613b      	str	r3, [r7, #16]
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d8eb      	bhi.n	800d22e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d256:	7bfb      	ldrb	r3, [r7, #15]
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3718      	adds	r7, #24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	d01b      	beq.n	800d2b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7ff ffad 	bl	800d1d8 <sync_window>
 800d27e:	4603      	mov	r3, r0
 800d280:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d282:	7bfb      	ldrb	r3, [r7, #15]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d113      	bne.n	800d2b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	7858      	ldrb	r0, [r3, #1]
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d292:	2301      	movs	r3, #1
 800d294:	683a      	ldr	r2, [r7, #0]
 800d296:	f7ff fcd5 	bl	800cc44 <disk_read>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d004      	beq.n	800d2aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	683a      	ldr	r2, [r7, #0]
 800d2ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
	...

0800d2bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f7ff ff87 	bl	800d1d8 <sync_window>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d2ce:	7bfb      	ldrb	r3, [r7, #15]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d158      	bne.n	800d386 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b03      	cmp	r3, #3
 800d2da:	d148      	bne.n	800d36e <sync_fs+0xb2>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	791b      	ldrb	r3, [r3, #4]
 800d2e0:	2b01      	cmp	r3, #1
 800d2e2:	d144      	bne.n	800d36e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	3334      	adds	r3, #52	; 0x34
 800d2e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7ff fda9 	bl	800ce46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	3334      	adds	r3, #52	; 0x34
 800d2f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2fc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d300:	4618      	mov	r0, r3
 800d302:	f7ff fd38 	bl	800cd76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	3334      	adds	r3, #52	; 0x34
 800d30a:	4921      	ldr	r1, [pc, #132]	; (800d390 <sync_fs+0xd4>)
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff fd4d 	bl	800cdac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3334      	adds	r3, #52	; 0x34
 800d316:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d31a:	491e      	ldr	r1, [pc, #120]	; (800d394 <sync_fs+0xd8>)
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff fd45 	bl	800cdac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	3334      	adds	r3, #52	; 0x34
 800d326:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	4619      	mov	r1, r3
 800d330:	4610      	mov	r0, r2
 800d332:	f7ff fd3b 	bl	800cdac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	3334      	adds	r3, #52	; 0x34
 800d33a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	4619      	mov	r1, r3
 800d344:	4610      	mov	r0, r2
 800d346:	f7ff fd31 	bl	800cdac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6a1b      	ldr	r3, [r3, #32]
 800d34e:	1c5a      	adds	r2, r3, #1
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	7858      	ldrb	r0, [r3, #1]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d362:	2301      	movs	r3, #1
 800d364:	f7ff fc8e 	bl	800cc84 <disk_write>
			fs->fsi_flag = 0;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2200      	movs	r2, #0
 800d36c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	785b      	ldrb	r3, [r3, #1]
 800d372:	2200      	movs	r2, #0
 800d374:	2100      	movs	r1, #0
 800d376:	4618      	mov	r0, r3
 800d378:	f7ff fca4 	bl	800ccc4 <disk_ioctl>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <sync_fs+0xca>
 800d382:	2301      	movs	r3, #1
 800d384:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d386:	7bfb      	ldrb	r3, [r7, #15]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	41615252 	.word	0x41615252
 800d394:	61417272 	.word	0x61417272

0800d398 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	3b02      	subs	r3, #2
 800d3a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	3b02      	subs	r3, #2
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d301      	bcc.n	800d3b8 <clust2sect+0x20>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	e008      	b.n	800d3ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	895b      	ldrh	r3, [r3, #10]
 800d3bc:	461a      	mov	r2, r3
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	fb03 f202 	mul.w	r2, r3, r2
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c8:	4413      	add	r3, r2
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	370c      	adds	r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b086      	sub	sp, #24
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d904      	bls.n	800d3f6 <get_fat+0x20>
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	699b      	ldr	r3, [r3, #24]
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d302      	bcc.n	800d3fc <get_fat+0x26>
		val = 1;	/* Internal error */
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	617b      	str	r3, [r7, #20]
 800d3fa:	e08e      	b.n	800d51a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d400:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	2b02      	cmp	r3, #2
 800d408:	d045      	beq.n	800d496 <get_fat+0xc0>
 800d40a:	2b03      	cmp	r3, #3
 800d40c:	d05e      	beq.n	800d4cc <get_fat+0xf6>
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d179      	bne.n	800d506 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	60fb      	str	r3, [r7, #12]
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	085b      	lsrs	r3, r3, #1
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	4413      	add	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	0b1b      	lsrs	r3, r3, #12
 800d428:	4413      	add	r3, r2
 800d42a:	4619      	mov	r1, r3
 800d42c:	6938      	ldr	r0, [r7, #16]
 800d42e:	f7ff ff17 	bl	800d260 <move_window>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d169      	bne.n	800d50c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	1c5a      	adds	r2, r3, #1
 800d43c:	60fa      	str	r2, [r7, #12]
 800d43e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d442:	693a      	ldr	r2, [r7, #16]
 800d444:	4413      	add	r3, r2
 800d446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d44a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	0b1b      	lsrs	r3, r3, #12
 800d454:	4413      	add	r3, r2
 800d456:	4619      	mov	r1, r3
 800d458:	6938      	ldr	r0, [r7, #16]
 800d45a:	f7ff ff01 	bl	800d260 <move_window>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d155      	bne.n	800d510 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	4413      	add	r3, r2
 800d46e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d472:	021b      	lsls	r3, r3, #8
 800d474:	461a      	mov	r2, r3
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	4313      	orrs	r3, r2
 800d47a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	2b00      	cmp	r3, #0
 800d484:	d002      	beq.n	800d48c <get_fat+0xb6>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	091b      	lsrs	r3, r3, #4
 800d48a:	e002      	b.n	800d492 <get_fat+0xbc>
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d492:	617b      	str	r3, [r7, #20]
			break;
 800d494:	e041      	b.n	800d51a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	0adb      	lsrs	r3, r3, #11
 800d49e:	4413      	add	r3, r2
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6938      	ldr	r0, [r7, #16]
 800d4a4:	f7ff fedc 	bl	800d260 <move_window>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d132      	bne.n	800d514 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	0059      	lsls	r1, r3, #1
 800d4b8:	f640 73fe 	movw	r3, #4094	; 0xffe
 800d4bc:	400b      	ands	r3, r1
 800d4be:	4413      	add	r3, r2
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7ff fc1d 	bl	800cd00 <ld_word>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	617b      	str	r3, [r7, #20]
			break;
 800d4ca:	e026      	b.n	800d51a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	0a9b      	lsrs	r3, r3, #10
 800d4d4:	4413      	add	r3, r2
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6938      	ldr	r0, [r7, #16]
 800d4da:	f7ff fec1 	bl	800d260 <move_window>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d119      	bne.n	800d518 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	0099      	lsls	r1, r3, #2
 800d4ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d4f2:	400b      	ands	r3, r1
 800d4f4:	4413      	add	r3, r2
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7ff fc1a 	bl	800cd30 <ld_dword>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d502:	617b      	str	r3, [r7, #20]
			break;
 800d504:	e009      	b.n	800d51a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d506:	2301      	movs	r3, #1
 800d508:	617b      	str	r3, [r7, #20]
 800d50a:	e006      	b.n	800d51a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d50c:	bf00      	nop
 800d50e:	e004      	b.n	800d51a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d510:	bf00      	nop
 800d512:	e002      	b.n	800d51a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d514:	bf00      	nop
 800d516:	e000      	b.n	800d51a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d518:	bf00      	nop
		}
	}

	return val;
 800d51a:	697b      	ldr	r3, [r7, #20]
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3718      	adds	r7, #24
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d524:	b590      	push	{r4, r7, lr}
 800d526:	b089      	sub	sp, #36	; 0x24
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d530:	2302      	movs	r3, #2
 800d532:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	2b01      	cmp	r3, #1
 800d538:	f240 80d9 	bls.w	800d6ee <put_fat+0x1ca>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	429a      	cmp	r2, r3
 800d544:	f080 80d3 	bcs.w	800d6ee <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	781b      	ldrb	r3, [r3, #0]
 800d54c:	2b02      	cmp	r3, #2
 800d54e:	d073      	beq.n	800d638 <put_fat+0x114>
 800d550:	2b03      	cmp	r3, #3
 800d552:	f000 8092 	beq.w	800d67a <put_fat+0x156>
 800d556:	2b01      	cmp	r3, #1
 800d558:	f040 80c9 	bne.w	800d6ee <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	61bb      	str	r3, [r7, #24]
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	085b      	lsrs	r3, r3, #1
 800d564:	69ba      	ldr	r2, [r7, #24]
 800d566:	4413      	add	r3, r2
 800d568:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	0b1b      	lsrs	r3, r3, #12
 800d572:	4413      	add	r3, r2
 800d574:	4619      	mov	r1, r3
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f7ff fe72 	bl	800d260 <move_window>
 800d57c:	4603      	mov	r3, r0
 800d57e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d580:	7ffb      	ldrb	r3, [r7, #31]
 800d582:	2b00      	cmp	r3, #0
 800d584:	f040 80ac 	bne.w	800d6e0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	1c59      	adds	r1, r3, #1
 800d592:	61b9      	str	r1, [r7, #24]
 800d594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d598:	4413      	add	r3, r2
 800d59a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	f003 0301 	and.w	r3, r3, #1
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00d      	beq.n	800d5c2 <put_fat+0x9e>
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	b25b      	sxtb	r3, r3
 800d5ac:	f003 030f 	and.w	r3, r3, #15
 800d5b0:	b25a      	sxtb	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	011b      	lsls	r3, r3, #4
 800d5b8:	b25b      	sxtb	r3, r3
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	e001      	b.n	800d5c6 <put_fat+0xa2>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	697a      	ldr	r2, [r7, #20]
 800d5c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	0b1b      	lsrs	r3, r3, #12
 800d5d8:	4413      	add	r3, r2
 800d5da:	4619      	mov	r1, r3
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f7ff fe3f 	bl	800d260 <move_window>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d5e6:	7ffb      	ldrb	r3, [r7, #31]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d17b      	bne.n	800d6e4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d5f8:	4413      	add	r3, r2
 800d5fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <put_fat+0xea>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	091b      	lsrs	r3, r3, #4
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	e00e      	b.n	800d62c <put_fat+0x108>
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	b25b      	sxtb	r3, r3
 800d614:	f023 030f 	bic.w	r3, r3, #15
 800d618:	b25a      	sxtb	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	0a1b      	lsrs	r3, r3, #8
 800d61e:	b25b      	sxtb	r3, r3
 800d620:	f003 030f 	and.w	r3, r3, #15
 800d624:	b25b      	sxtb	r3, r3
 800d626:	4313      	orrs	r3, r2
 800d628:	b25b      	sxtb	r3, r3
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	697a      	ldr	r2, [r7, #20]
 800d62e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2201      	movs	r2, #1
 800d634:	70da      	strb	r2, [r3, #3]
			break;
 800d636:	e05a      	b.n	800d6ee <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	0adb      	lsrs	r3, r3, #11
 800d640:	4413      	add	r3, r2
 800d642:	4619      	mov	r1, r3
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f7ff fe0b 	bl	800d260 <move_window>
 800d64a:	4603      	mov	r3, r0
 800d64c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d64e:	7ffb      	ldrb	r3, [r7, #31]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d149      	bne.n	800d6e8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	0059      	lsls	r1, r3, #1
 800d65e:	f640 73fe 	movw	r3, #4094	; 0xffe
 800d662:	400b      	ands	r3, r1
 800d664:	4413      	add	r3, r2
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	b292      	uxth	r2, r2
 800d66a:	4611      	mov	r1, r2
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7ff fb82 	bl	800cd76 <st_word>
			fs->wflag = 1;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2201      	movs	r2, #1
 800d676:	70da      	strb	r2, [r3, #3]
			break;
 800d678:	e039      	b.n	800d6ee <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	0a9b      	lsrs	r3, r3, #10
 800d682:	4413      	add	r3, r2
 800d684:	4619      	mov	r1, r3
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f7ff fdea 	bl	800d260 <move_window>
 800d68c:	4603      	mov	r3, r0
 800d68e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d690:	7ffb      	ldrb	r3, [r7, #31]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d12a      	bne.n	800d6ec <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	0099      	lsls	r1, r3, #2
 800d6a6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d6aa:	400b      	ands	r3, r1
 800d6ac:	4413      	add	r3, r2
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7ff fb3e 	bl	800cd30 <ld_dword>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d6ba:	4323      	orrs	r3, r4
 800d6bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	0099      	lsls	r1, r3, #2
 800d6c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d6cc:	400b      	ands	r3, r1
 800d6ce:	4413      	add	r3, r2
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff fb6a 	bl	800cdac <st_dword>
			fs->wflag = 1;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	70da      	strb	r2, [r3, #3]
			break;
 800d6de:	e006      	b.n	800d6ee <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6e0:	bf00      	nop
 800d6e2:	e004      	b.n	800d6ee <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6e4:	bf00      	nop
 800d6e6:	e002      	b.n	800d6ee <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6e8:	bf00      	nop
 800d6ea:	e000      	b.n	800d6ee <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d6ec:	bf00      	nop
		}
	}
	return res;
 800d6ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3724      	adds	r7, #36	; 0x24
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd90      	pop	{r4, r7, pc}

0800d6f8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b088      	sub	sp, #32
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d704:	2300      	movs	r3, #0
 800d706:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d904      	bls.n	800d71e <remove_chain+0x26>
 800d714:	69bb      	ldr	r3, [r7, #24]
 800d716:	699b      	ldr	r3, [r3, #24]
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d301      	bcc.n	800d722 <remove_chain+0x2a>
 800d71e:	2302      	movs	r3, #2
 800d720:	e04b      	b.n	800d7ba <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d00c      	beq.n	800d742 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d728:	f04f 32ff 	mov.w	r2, #4294967295
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	69b8      	ldr	r0, [r7, #24]
 800d730:	f7ff fef8 	bl	800d524 <put_fat>
 800d734:	4603      	mov	r3, r0
 800d736:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d738:	7ffb      	ldrb	r3, [r7, #31]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <remove_chain+0x4a>
 800d73e:	7ffb      	ldrb	r3, [r7, #31]
 800d740:	e03b      	b.n	800d7ba <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d742:	68b9      	ldr	r1, [r7, #8]
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f7ff fe46 	bl	800d3d6 <get_fat>
 800d74a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d74c:	697b      	ldr	r3, [r7, #20]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d031      	beq.n	800d7b6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d101      	bne.n	800d75c <remove_chain+0x64>
 800d758:	2302      	movs	r3, #2
 800d75a:	e02e      	b.n	800d7ba <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d762:	d101      	bne.n	800d768 <remove_chain+0x70>
 800d764:	2301      	movs	r3, #1
 800d766:	e028      	b.n	800d7ba <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d768:	2200      	movs	r2, #0
 800d76a:	68b9      	ldr	r1, [r7, #8]
 800d76c:	69b8      	ldr	r0, [r7, #24]
 800d76e:	f7ff fed9 	bl	800d524 <put_fat>
 800d772:	4603      	mov	r3, r0
 800d774:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d776:	7ffb      	ldrb	r3, [r7, #31]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d001      	beq.n	800d780 <remove_chain+0x88>
 800d77c:	7ffb      	ldrb	r3, [r7, #31]
 800d77e:	e01c      	b.n	800d7ba <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	695a      	ldr	r2, [r3, #20]
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	699b      	ldr	r3, [r3, #24]
 800d788:	3b02      	subs	r3, #2
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d20b      	bcs.n	800d7a6 <remove_chain+0xae>
			fs->free_clst++;
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	695b      	ldr	r3, [r3, #20]
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	69bb      	ldr	r3, [r7, #24]
 800d796:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	791b      	ldrb	r3, [r3, #4]
 800d79c:	f043 0301 	orr.w	r3, r3, #1
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	699b      	ldr	r3, [r3, #24]
 800d7ae:	68ba      	ldr	r2, [r7, #8]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d3c6      	bcc.n	800d742 <remove_chain+0x4a>
 800d7b4:	e000      	b.n	800d7b8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d7b6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3720      	adds	r7, #32
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b088      	sub	sp, #32
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
 800d7ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d10d      	bne.n	800d7f4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	691b      	ldr	r3, [r3, #16]
 800d7dc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d7de:	69bb      	ldr	r3, [r7, #24]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d004      	beq.n	800d7ee <create_chain+0x2c>
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	699b      	ldr	r3, [r3, #24]
 800d7e8:	69ba      	ldr	r2, [r7, #24]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d31b      	bcc.n	800d826 <create_chain+0x64>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	61bb      	str	r3, [r7, #24]
 800d7f2:	e018      	b.n	800d826 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7ff fded 	bl	800d3d6 <get_fat>
 800d7fc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d801      	bhi.n	800d808 <create_chain+0x46>
 800d804:	2301      	movs	r3, #1
 800d806:	e070      	b.n	800d8ea <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d80e:	d101      	bne.n	800d814 <create_chain+0x52>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	e06a      	b.n	800d8ea <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d201      	bcs.n	800d822 <create_chain+0x60>
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	e063      	b.n	800d8ea <create_chain+0x128>
		scl = clst;
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	3301      	adds	r3, #1
 800d82e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	699b      	ldr	r3, [r3, #24]
 800d834:	69fa      	ldr	r2, [r7, #28]
 800d836:	429a      	cmp	r2, r3
 800d838:	d307      	bcc.n	800d84a <create_chain+0x88>
				ncl = 2;
 800d83a:	2302      	movs	r3, #2
 800d83c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d83e:	69fa      	ldr	r2, [r7, #28]
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	429a      	cmp	r2, r3
 800d844:	d901      	bls.n	800d84a <create_chain+0x88>
 800d846:	2300      	movs	r3, #0
 800d848:	e04f      	b.n	800d8ea <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d84a:	69f9      	ldr	r1, [r7, #28]
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f7ff fdc2 	bl	800d3d6 <get_fat>
 800d852:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d00e      	beq.n	800d878 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d003      	beq.n	800d868 <create_chain+0xa6>
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d866:	d101      	bne.n	800d86c <create_chain+0xaa>
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	e03e      	b.n	800d8ea <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d86c:	69fa      	ldr	r2, [r7, #28]
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	429a      	cmp	r2, r3
 800d872:	d1da      	bne.n	800d82a <create_chain+0x68>
 800d874:	2300      	movs	r3, #0
 800d876:	e038      	b.n	800d8ea <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d878:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d87a:	f04f 32ff 	mov.w	r2, #4294967295
 800d87e:	69f9      	ldr	r1, [r7, #28]
 800d880:	6938      	ldr	r0, [r7, #16]
 800d882:	f7ff fe4f 	bl	800d524 <put_fat>
 800d886:	4603      	mov	r3, r0
 800d888:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d88a:	7dfb      	ldrb	r3, [r7, #23]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d109      	bne.n	800d8a4 <create_chain+0xe2>
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d006      	beq.n	800d8a4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d896:	69fa      	ldr	r2, [r7, #28]
 800d898:	6839      	ldr	r1, [r7, #0]
 800d89a:	6938      	ldr	r0, [r7, #16]
 800d89c:	f7ff fe42 	bl	800d524 <put_fat>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d8a4:	7dfb      	ldrb	r3, [r7, #23]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d116      	bne.n	800d8d8 <create_chain+0x116>
		fs->last_clst = ncl;
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	69fa      	ldr	r2, [r7, #28]
 800d8ae:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	695a      	ldr	r2, [r3, #20]
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	699b      	ldr	r3, [r3, #24]
 800d8b8:	3b02      	subs	r3, #2
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d804      	bhi.n	800d8c8 <create_chain+0x106>
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	695b      	ldr	r3, [r3, #20]
 800d8c2:	1e5a      	subs	r2, r3, #1
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	791b      	ldrb	r3, [r3, #4]
 800d8cc:	f043 0301 	orr.w	r3, r3, #1
 800d8d0:	b2da      	uxtb	r2, r3
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	711a      	strb	r2, [r3, #4]
 800d8d6:	e007      	b.n	800d8e8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d8d8:	7dfb      	ldrb	r3, [r7, #23]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d102      	bne.n	800d8e4 <create_chain+0x122>
 800d8de:	f04f 33ff 	mov.w	r3, #4294967295
 800d8e2:	e000      	b.n	800d8e6 <create_chain+0x124>
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d8e8:	69fb      	ldr	r3, [r7, #28]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3720      	adds	r7, #32
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b087      	sub	sp, #28
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d906:	3304      	adds	r3, #4
 800d908:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	0b1b      	lsrs	r3, r3, #12
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	8952      	ldrh	r2, [r2, #10]
 800d912:	fbb3 f3f2 	udiv	r3, r3, r2
 800d916:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	1d1a      	adds	r2, r3, #4
 800d91c:	613a      	str	r2, [r7, #16]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d101      	bne.n	800d92c <clmt_clust+0x3a>
 800d928:	2300      	movs	r3, #0
 800d92a:	e010      	b.n	800d94e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	429a      	cmp	r2, r3
 800d932:	d307      	bcc.n	800d944 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d934:	697a      	ldr	r2, [r7, #20]
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	617b      	str	r3, [r7, #20]
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	3304      	adds	r3, #4
 800d940:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d942:	e7e9      	b.n	800d918 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d944:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	4413      	add	r3, r2
}
 800d94e:	4618      	mov	r0, r3
 800d950:	371c      	adds	r7, #28
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b086      	sub	sp, #24
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d970:	d204      	bcs.n	800d97c <dir_sdi+0x22>
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	f003 031f 	and.w	r3, r3, #31
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d97c:	2302      	movs	r3, #2
 800d97e:	e063      	b.n	800da48 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	683a      	ldr	r2, [r7, #0]
 800d984:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d106      	bne.n	800d9a0 <dir_sdi+0x46>
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	781b      	ldrb	r3, [r3, #0]
 800d996:	2b02      	cmp	r3, #2
 800d998:	d902      	bls.n	800d9a0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10c      	bne.n	800d9c0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	095b      	lsrs	r3, r3, #5
 800d9aa:	693a      	ldr	r2, [r7, #16]
 800d9ac:	8912      	ldrh	r2, [r2, #8]
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d301      	bcc.n	800d9b6 <dir_sdi+0x5c>
 800d9b2:	2302      	movs	r3, #2
 800d9b4:	e048      	b.n	800da48 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	61da      	str	r2, [r3, #28]
 800d9be:	e029      	b.n	800da14 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	895b      	ldrh	r3, [r3, #10]
 800d9c4:	031b      	lsls	r3, r3, #12
 800d9c6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9c8:	e019      	b.n	800d9fe <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6979      	ldr	r1, [r7, #20]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff fd01 	bl	800d3d6 <get_fat>
 800d9d4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9dc:	d101      	bne.n	800d9e2 <dir_sdi+0x88>
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e032      	b.n	800da48 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d904      	bls.n	800d9f2 <dir_sdi+0x98>
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	699b      	ldr	r3, [r3, #24]
 800d9ec:	697a      	ldr	r2, [r7, #20]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d301      	bcc.n	800d9f6 <dir_sdi+0x9c>
 800d9f2:	2302      	movs	r3, #2
 800d9f4:	e028      	b.n	800da48 <dir_sdi+0xee>
			ofs -= csz;
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d9fe:	683a      	ldr	r2, [r7, #0]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	429a      	cmp	r2, r3
 800da04:	d2e1      	bcs.n	800d9ca <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800da06:	6979      	ldr	r1, [r7, #20]
 800da08:	6938      	ldr	r0, [r7, #16]
 800da0a:	f7ff fcc5 	bl	800d398 <clust2sect>
 800da0e:	4602      	mov	r2, r0
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	697a      	ldr	r2, [r7, #20]
 800da18:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	69db      	ldr	r3, [r3, #28]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d101      	bne.n	800da26 <dir_sdi+0xcc>
 800da22:	2302      	movs	r3, #2
 800da24:	e010      	b.n	800da48 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	69da      	ldr	r2, [r3, #28]
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	0b1b      	lsrs	r3, r3, #12
 800da2e:	441a      	add	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da40:	441a      	add	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da46:	2300      	movs	r3, #0
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3718      	adds	r7, #24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd80      	pop	{r7, pc}

0800da50 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	695b      	ldr	r3, [r3, #20]
 800da64:	3320      	adds	r3, #32
 800da66:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	69db      	ldr	r3, [r3, #28]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d003      	beq.n	800da78 <dir_next+0x28>
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800da76:	d301      	bcc.n	800da7c <dir_next+0x2c>
 800da78:	2304      	movs	r3, #4
 800da7a:	e0aa      	b.n	800dbd2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da82:	2b00      	cmp	r3, #0
 800da84:	f040 8098 	bne.w	800dbb8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	69db      	ldr	r3, [r3, #28]
 800da8c:	1c5a      	adds	r2, r3, #1
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	699b      	ldr	r3, [r3, #24]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10b      	bne.n	800dab2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	095b      	lsrs	r3, r3, #5
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	8912      	ldrh	r2, [r2, #8]
 800daa2:	4293      	cmp	r3, r2
 800daa4:	f0c0 8088 	bcc.w	800dbb8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	61da      	str	r2, [r3, #28]
 800daae:	2304      	movs	r3, #4
 800dab0:	e08f      	b.n	800dbd2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	0b1b      	lsrs	r3, r3, #12
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	8952      	ldrh	r2, [r2, #10]
 800daba:	3a01      	subs	r2, #1
 800dabc:	4013      	ands	r3, r2
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d17a      	bne.n	800dbb8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	699b      	ldr	r3, [r3, #24]
 800dac8:	4619      	mov	r1, r3
 800daca:	4610      	mov	r0, r2
 800dacc:	f7ff fc83 	bl	800d3d6 <get_fat>
 800dad0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d801      	bhi.n	800dadc <dir_next+0x8c>
 800dad8:	2302      	movs	r3, #2
 800dada:	e07a      	b.n	800dbd2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae2:	d101      	bne.n	800dae8 <dir_next+0x98>
 800dae4:	2301      	movs	r3, #1
 800dae6:	e074      	b.n	800dbd2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	699b      	ldr	r3, [r3, #24]
 800daec:	697a      	ldr	r2, [r7, #20]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d358      	bcc.n	800dba4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d104      	bne.n	800db02 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	61da      	str	r2, [r3, #28]
 800dafe:	2304      	movs	r3, #4
 800db00:	e067      	b.n	800dbd2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800db02:	687a      	ldr	r2, [r7, #4]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	699b      	ldr	r3, [r3, #24]
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f7ff fe59 	bl	800d7c2 <create_chain>
 800db10:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d101      	bne.n	800db1c <dir_next+0xcc>
 800db18:	2307      	movs	r3, #7
 800db1a:	e05a      	b.n	800dbd2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d101      	bne.n	800db26 <dir_next+0xd6>
 800db22:	2302      	movs	r3, #2
 800db24:	e055      	b.n	800dbd2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db2c:	d101      	bne.n	800db32 <dir_next+0xe2>
 800db2e:	2301      	movs	r3, #1
 800db30:	e04f      	b.n	800dbd2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db32:	68f8      	ldr	r0, [r7, #12]
 800db34:	f7ff fb50 	bl	800d1d8 <sync_window>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <dir_next+0xf2>
 800db3e:	2301      	movs	r3, #1
 800db40:	e047      	b.n	800dbd2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3334      	adds	r3, #52	; 0x34
 800db46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800db4a:	2100      	movs	r1, #0
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff f97a 	bl	800ce46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db52:	2300      	movs	r3, #0
 800db54:	613b      	str	r3, [r7, #16]
 800db56:	6979      	ldr	r1, [r7, #20]
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f7ff fc1d 	bl	800d398 <clust2sect>
 800db5e:	4602      	mov	r2, r0
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	631a      	str	r2, [r3, #48]	; 0x30
 800db64:	e012      	b.n	800db8c <dir_next+0x13c>
						fs->wflag = 1;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2201      	movs	r2, #1
 800db6a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f7ff fb33 	bl	800d1d8 <sync_window>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d001      	beq.n	800db7c <dir_next+0x12c>
 800db78:	2301      	movs	r3, #1
 800db7a:	e02a      	b.n	800dbd2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	3301      	adds	r3, #1
 800db80:	613b      	str	r3, [r7, #16]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db86:	1c5a      	adds	r2, r3, #1
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	631a      	str	r2, [r3, #48]	; 0x30
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	895b      	ldrh	r3, [r3, #10]
 800db90:	461a      	mov	r2, r3
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	4293      	cmp	r3, r2
 800db96:	d3e6      	bcc.n	800db66 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	1ad2      	subs	r2, r2, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	697a      	ldr	r2, [r7, #20]
 800dba8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800dbaa:	6979      	ldr	r1, [r7, #20]
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f7ff fbf3 	bl	800d398 <clust2sect>
 800dbb2:	4602      	mov	r2, r0
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbca:	441a      	add	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dbd0:	2300      	movs	r3, #0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3718      	adds	r7, #24
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b086      	sub	sp, #24
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
 800dbe2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dbea:	2100      	movs	r1, #0
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7ff feb4 	bl	800d95a <dir_sdi>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbf6:	7dfb      	ldrb	r3, [r7, #23]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d12b      	bne.n	800dc54 <dir_alloc+0x7a>
		n = 0;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	69db      	ldr	r3, [r3, #28]
 800dc04:	4619      	mov	r1, r3
 800dc06:	68f8      	ldr	r0, [r7, #12]
 800dc08:	f7ff fb2a 	bl	800d260 <move_window>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc10:	7dfb      	ldrb	r3, [r7, #23]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d11d      	bne.n	800dc52 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6a1b      	ldr	r3, [r3, #32]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	2be5      	cmp	r3, #229	; 0xe5
 800dc1e:	d004      	beq.n	800dc2a <dir_alloc+0x50>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6a1b      	ldr	r3, [r3, #32]
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d107      	bne.n	800dc3a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	613b      	str	r3, [r7, #16]
 800dc30:	693a      	ldr	r2, [r7, #16]
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d102      	bne.n	800dc3e <dir_alloc+0x64>
 800dc38:	e00c      	b.n	800dc54 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc3e:	2101      	movs	r1, #1
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f7ff ff05 	bl	800da50 <dir_next>
 800dc46:	4603      	mov	r3, r0
 800dc48:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc4a:	7dfb      	ldrb	r3, [r7, #23]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d0d7      	beq.n	800dc00 <dir_alloc+0x26>
 800dc50:	e000      	b.n	800dc54 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dc52:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc54:	7dfb      	ldrb	r3, [r7, #23]
 800dc56:	2b04      	cmp	r3, #4
 800dc58:	d101      	bne.n	800dc5e <dir_alloc+0x84>
 800dc5a:	2307      	movs	r3, #7
 800dc5c:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b084      	sub	sp, #16
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	331a      	adds	r3, #26
 800dc76:	4618      	mov	r0, r3
 800dc78:	f7ff f842 	bl	800cd00 <ld_word>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b03      	cmp	r3, #3
 800dc86:	d109      	bne.n	800dc9c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	3314      	adds	r3, #20
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7ff f837 	bl	800cd00 <ld_word>
 800dc92:	4603      	mov	r3, r0
 800dc94:	041b      	lsls	r3, r3, #16
 800dc96:	68fa      	ldr	r2, [r7, #12]
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b084      	sub	sp, #16
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	60f8      	str	r0, [r7, #12]
 800dcae:	60b9      	str	r1, [r7, #8]
 800dcb0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	331a      	adds	r3, #26
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	b292      	uxth	r2, r2
 800dcba:	4611      	mov	r1, r2
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff f85a 	bl	800cd76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d109      	bne.n	800dcde <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	f103 0214 	add.w	r2, r3, #20
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	0c1b      	lsrs	r3, r3, #16
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	4610      	mov	r0, r2
 800dcda:	f7ff f84c 	bl	800cd76 <st_word>
	}
}
 800dcde:	bf00      	nop
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dce8:	b590      	push	{r4, r7, lr}
 800dcea:	b087      	sub	sp, #28
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	331a      	adds	r3, #26
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff f802 	bl	800cd00 <ld_word>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d001      	beq.n	800dd06 <cmp_lfn+0x1e>
 800dd02:	2300      	movs	r3, #0
 800dd04:	e059      	b.n	800ddba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd0e:	1e5a      	subs	r2, r3, #1
 800dd10:	4613      	mov	r3, r2
 800dd12:	005b      	lsls	r3, r3, #1
 800dd14:	4413      	add	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	81fb      	strh	r3, [r7, #14]
 800dd20:	2300      	movs	r3, #0
 800dd22:	613b      	str	r3, [r7, #16]
 800dd24:	e033      	b.n	800dd8e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dd26:	4a27      	ldr	r2, [pc, #156]	; (800ddc4 <cmp_lfn+0xdc>)
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	4413      	add	r3, r2
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	4413      	add	r3, r2
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fe ffe3 	bl	800cd00 <ld_word>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dd3e:	89fb      	ldrh	r3, [r7, #14]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d01a      	beq.n	800dd7a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	2bfe      	cmp	r3, #254	; 0xfe
 800dd48:	d812      	bhi.n	800dd70 <cmp_lfn+0x88>
 800dd4a:	89bb      	ldrh	r3, [r7, #12]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f002 fdcb 	bl	80108e8 <ff_wtoupper>
 800dd52:	4603      	mov	r3, r0
 800dd54:	461c      	mov	r4, r3
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	1c5a      	adds	r2, r3, #1
 800dd5a:	617a      	str	r2, [r7, #20]
 800dd5c:	005b      	lsls	r3, r3, #1
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	4413      	add	r3, r2
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f002 fdbf 	bl	80108e8 <ff_wtoupper>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	d001      	beq.n	800dd74 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dd70:	2300      	movs	r3, #0
 800dd72:	e022      	b.n	800ddba <cmp_lfn+0xd2>
			}
			wc = uc;
 800dd74:	89bb      	ldrh	r3, [r7, #12]
 800dd76:	81fb      	strh	r3, [r7, #14]
 800dd78:	e006      	b.n	800dd88 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd7a:	89bb      	ldrh	r3, [r7, #12]
 800dd7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d001      	beq.n	800dd88 <cmp_lfn+0xa0>
 800dd84:	2300      	movs	r3, #0
 800dd86:	e018      	b.n	800ddba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	613b      	str	r3, [r7, #16]
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2b0c      	cmp	r3, #12
 800dd92:	d9c8      	bls.n	800dd26 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00b      	beq.n	800ddb8 <cmp_lfn+0xd0>
 800dda0:	89fb      	ldrh	r3, [r7, #14]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d008      	beq.n	800ddb8 <cmp_lfn+0xd0>
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	005b      	lsls	r3, r3, #1
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	4413      	add	r3, r2
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d001      	beq.n	800ddb8 <cmp_lfn+0xd0>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	e000      	b.n	800ddba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ddb8:	2301      	movs	r3, #1
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	371c      	adds	r7, #28
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd90      	pop	{r4, r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	080146b4 	.word	0x080146b4

0800ddc8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b086      	sub	sp, #24
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	331a      	adds	r3, #26
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fe ff92 	bl	800cd00 <ld_word>
 800dddc:	4603      	mov	r3, r0
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d001      	beq.n	800dde6 <pick_lfn+0x1e>
 800dde2:	2300      	movs	r3, #0
 800dde4:	e04d      	b.n	800de82 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddee:	1e5a      	subs	r2, r3, #1
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	005b      	lsls	r3, r3, #1
 800ddf4:	4413      	add	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	81fb      	strh	r3, [r7, #14]
 800de00:	2300      	movs	r3, #0
 800de02:	613b      	str	r3, [r7, #16]
 800de04:	e028      	b.n	800de58 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800de06:	4a21      	ldr	r2, [pc, #132]	; (800de8c <pick_lfn+0xc4>)
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	4413      	add	r3, r2
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	461a      	mov	r2, r3
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	4413      	add	r3, r2
 800de14:	4618      	mov	r0, r3
 800de16:	f7fe ff73 	bl	800cd00 <ld_word>
 800de1a:	4603      	mov	r3, r0
 800de1c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800de1e:	89fb      	ldrh	r3, [r7, #14]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d00f      	beq.n	800de44 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	2bfe      	cmp	r3, #254	; 0xfe
 800de28:	d901      	bls.n	800de2e <pick_lfn+0x66>
 800de2a:	2300      	movs	r3, #0
 800de2c:	e029      	b.n	800de82 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800de2e:	89bb      	ldrh	r3, [r7, #12]
 800de30:	81fb      	strh	r3, [r7, #14]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	617a      	str	r2, [r7, #20]
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	4413      	add	r3, r2
 800de3e:	89fa      	ldrh	r2, [r7, #14]
 800de40:	801a      	strh	r2, [r3, #0]
 800de42:	e006      	b.n	800de52 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800de44:	89bb      	ldrh	r3, [r7, #12]
 800de46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d001      	beq.n	800de52 <pick_lfn+0x8a>
 800de4e:	2300      	movs	r3, #0
 800de50:	e017      	b.n	800de82 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	3301      	adds	r3, #1
 800de56:	613b      	str	r3, [r7, #16]
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	2b0c      	cmp	r3, #12
 800de5c:	d9d3      	bls.n	800de06 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00a      	beq.n	800de80 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	2bfe      	cmp	r3, #254	; 0xfe
 800de6e:	d901      	bls.n	800de74 <pick_lfn+0xac>
 800de70:	2300      	movs	r3, #0
 800de72:	e006      	b.n	800de82 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	005b      	lsls	r3, r3, #1
 800de78:	687a      	ldr	r2, [r7, #4]
 800de7a:	4413      	add	r3, r2
 800de7c:	2200      	movs	r2, #0
 800de7e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800de80:	2301      	movs	r3, #1
}
 800de82:	4618      	mov	r0, r3
 800de84:	3718      	adds	r7, #24
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	080146b4 	.word	0x080146b4

0800de90 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b088      	sub	sp, #32
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	4611      	mov	r1, r2
 800de9c:	461a      	mov	r2, r3
 800de9e:	460b      	mov	r3, r1
 800dea0:	71fb      	strb	r3, [r7, #7]
 800dea2:	4613      	mov	r3, r2
 800dea4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	330d      	adds	r3, #13
 800deaa:	79ba      	ldrb	r2, [r7, #6]
 800deac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	330b      	adds	r3, #11
 800deb2:	220f      	movs	r2, #15
 800deb4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	330c      	adds	r3, #12
 800deba:	2200      	movs	r2, #0
 800debc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	331a      	adds	r3, #26
 800dec2:	2100      	movs	r1, #0
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fe ff56 	bl	800cd76 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800deca:	79fb      	ldrb	r3, [r7, #7]
 800decc:	1e5a      	subs	r2, r3, #1
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	009b      	lsls	r3, r3, #2
 800ded6:	4413      	add	r3, r2
 800ded8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800deda:	2300      	movs	r3, #0
 800dedc:	82fb      	strh	r3, [r7, #22]
 800dede:	2300      	movs	r3, #0
 800dee0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800dee2:	8afb      	ldrh	r3, [r7, #22]
 800dee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dee8:	4293      	cmp	r3, r2
 800deea:	d007      	beq.n	800defc <put_lfn+0x6c>
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	1c5a      	adds	r2, r3, #1
 800def0:	61fa      	str	r2, [r7, #28]
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	4413      	add	r3, r2
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800defc:	4a17      	ldr	r2, [pc, #92]	; (800df5c <put_lfn+0xcc>)
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	4413      	add	r3, r2
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	461a      	mov	r2, r3
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	4413      	add	r3, r2
 800df0a:	8afa      	ldrh	r2, [r7, #22]
 800df0c:	4611      	mov	r1, r2
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fe ff31 	bl	800cd76 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800df14:	8afb      	ldrh	r3, [r7, #22]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d102      	bne.n	800df20 <put_lfn+0x90>
 800df1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df1e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	3301      	adds	r3, #1
 800df24:	61bb      	str	r3, [r7, #24]
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	2b0c      	cmp	r3, #12
 800df2a:	d9da      	bls.n	800dee2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800df2c:	8afb      	ldrh	r3, [r7, #22]
 800df2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df32:	4293      	cmp	r3, r2
 800df34:	d006      	beq.n	800df44 <put_lfn+0xb4>
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	4413      	add	r3, r2
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d103      	bne.n	800df4c <put_lfn+0xbc>
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df4a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	79fa      	ldrb	r2, [r7, #7]
 800df50:	701a      	strb	r2, [r3, #0]
}
 800df52:	bf00      	nop
 800df54:	3720      	adds	r7, #32
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
 800df5a:	bf00      	nop
 800df5c:	080146b4 	.word	0x080146b4

0800df60 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b08c      	sub	sp, #48	; 0x30
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
 800df6c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800df6e:	220b      	movs	r2, #11
 800df70:	68b9      	ldr	r1, [r7, #8]
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7fe ff46 	bl	800ce04 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	2b05      	cmp	r3, #5
 800df7c:	d929      	bls.n	800dfd2 <gen_numname+0x72>
		sr = seq;
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800df82:	e020      	b.n	800dfc6 <gen_numname+0x66>
			wc = *lfn++;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	1c9a      	adds	r2, r3, #2
 800df88:	607a      	str	r2, [r7, #4]
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800df8e:	2300      	movs	r3, #0
 800df90:	62bb      	str	r3, [r7, #40]	; 0x28
 800df92:	e015      	b.n	800dfc0 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	005a      	lsls	r2, r3, #1
 800df98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	4413      	add	r3, r2
 800dfa0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dfa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfa4:	085b      	lsrs	r3, r3, #1
 800dfa6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d003      	beq.n	800dfba <gen_numname+0x5a>
 800dfb2:	69fa      	ldr	r2, [r7, #28]
 800dfb4:	4b31      	ldr	r3, [pc, #196]	; (800e07c <gen_numname+0x11c>)
 800dfb6:	4053      	eors	r3, r2
 800dfb8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc2:	2b0f      	cmp	r3, #15
 800dfc4:	d9e6      	bls.n	800df94 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d1da      	bne.n	800df84 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dfd2:	2307      	movs	r3, #7
 800dfd4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	f003 030f 	and.w	r3, r3, #15
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	3330      	adds	r3, #48	; 0x30
 800dfe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dfe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfea:	2b39      	cmp	r3, #57	; 0x39
 800dfec:	d904      	bls.n	800dff8 <gen_numname+0x98>
 800dfee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dff2:	3307      	adds	r3, #7
 800dff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	1e5a      	subs	r2, r3, #1
 800dffc:	62ba      	str	r2, [r7, #40]	; 0x28
 800dffe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e002:	4413      	add	r3, r2
 800e004:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e008:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	091b      	lsrs	r3, r3, #4
 800e010:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1de      	bne.n	800dfd6 <gen_numname+0x76>
	ns[i] = '~';
 800e018:	f107 0214 	add.w	r2, r7, #20
 800e01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01e:	4413      	add	r3, r2
 800e020:	227e      	movs	r2, #126	; 0x7e
 800e022:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e024:	2300      	movs	r3, #0
 800e026:	627b      	str	r3, [r7, #36]	; 0x24
 800e028:	e002      	b.n	800e030 <gen_numname+0xd0>
 800e02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02c:	3301      	adds	r3, #1
 800e02e:	627b      	str	r3, [r7, #36]	; 0x24
 800e030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	429a      	cmp	r2, r3
 800e036:	d205      	bcs.n	800e044 <gen_numname+0xe4>
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03c:	4413      	add	r3, r2
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	2b20      	cmp	r3, #32
 800e042:	d1f2      	bne.n	800e02a <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	2b07      	cmp	r3, #7
 800e048:	d808      	bhi.n	800e05c <gen_numname+0xfc>
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	1c5a      	adds	r2, r3, #1
 800e04e:	62ba      	str	r2, [r7, #40]	; 0x28
 800e050:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e054:	4413      	add	r3, r2
 800e056:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e05a:	e000      	b.n	800e05e <gen_numname+0xfe>
 800e05c:	2120      	movs	r1, #32
 800e05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e060:	1c5a      	adds	r2, r3, #1
 800e062:	627a      	str	r2, [r7, #36]	; 0x24
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	4413      	add	r3, r2
 800e068:	460a      	mov	r2, r1
 800e06a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06e:	2b07      	cmp	r3, #7
 800e070:	d9e8      	bls.n	800e044 <gen_numname+0xe4>
}
 800e072:	bf00      	nop
 800e074:	3730      	adds	r7, #48	; 0x30
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	00011021 	.word	0x00011021

0800e080 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e080:	b480      	push	{r7}
 800e082:	b085      	sub	sp, #20
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e088:	2300      	movs	r3, #0
 800e08a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e08c:	230b      	movs	r3, #11
 800e08e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e090:	7bfb      	ldrb	r3, [r7, #15]
 800e092:	b2da      	uxtb	r2, r3
 800e094:	0852      	lsrs	r2, r2, #1
 800e096:	01db      	lsls	r3, r3, #7
 800e098:	4313      	orrs	r3, r2
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	1c59      	adds	r1, r3, #1
 800e0a0:	6079      	str	r1, [r7, #4]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	60bb      	str	r3, [r7, #8]
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d1ed      	bne.n	800e090 <sum_sfn+0x10>
	return sum;
 800e0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b086      	sub	sp, #24
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e0cc:	2304      	movs	r3, #4
 800e0ce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e0d6:	23ff      	movs	r3, #255	; 0xff
 800e0d8:	757b      	strb	r3, [r7, #21]
 800e0da:	23ff      	movs	r3, #255	; 0xff
 800e0dc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e0de:	e081      	b.n	800e1e4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	69db      	ldr	r3, [r3, #28]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6938      	ldr	r0, [r7, #16]
 800e0e8:	f7ff f8ba 	bl	800d260 <move_window>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d17c      	bne.n	800e1f0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a1b      	ldr	r3, [r3, #32]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e0fe:	7dbb      	ldrb	r3, [r7, #22]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d102      	bne.n	800e10a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e104:	2304      	movs	r3, #4
 800e106:	75fb      	strb	r3, [r7, #23]
 800e108:	e077      	b.n	800e1fa <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a1b      	ldr	r3, [r3, #32]
 800e10e:	330b      	adds	r3, #11
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e116:	73fb      	strb	r3, [r7, #15]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	7bfa      	ldrb	r2, [r7, #15]
 800e11c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e11e:	7dbb      	ldrb	r3, [r7, #22]
 800e120:	2be5      	cmp	r3, #229	; 0xe5
 800e122:	d00e      	beq.n	800e142 <dir_read+0x80>
 800e124:	7dbb      	ldrb	r3, [r7, #22]
 800e126:	2b2e      	cmp	r3, #46	; 0x2e
 800e128:	d00b      	beq.n	800e142 <dir_read+0x80>
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
 800e12c:	f023 0320 	bic.w	r3, r3, #32
 800e130:	2b08      	cmp	r3, #8
 800e132:	bf0c      	ite	eq
 800e134:	2301      	moveq	r3, #1
 800e136:	2300      	movne	r3, #0
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	461a      	mov	r2, r3
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	4293      	cmp	r3, r2
 800e140:	d002      	beq.n	800e148 <dir_read+0x86>
				ord = 0xFF;
 800e142:	23ff      	movs	r3, #255	; 0xff
 800e144:	757b      	strb	r3, [r7, #21]
 800e146:	e044      	b.n	800e1d2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	2b0f      	cmp	r3, #15
 800e14c:	d12f      	bne.n	800e1ae <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e14e:	7dbb      	ldrb	r3, [r7, #22]
 800e150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00d      	beq.n	800e174 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6a1b      	ldr	r3, [r3, #32]
 800e15c:	7b5b      	ldrb	r3, [r3, #13]
 800e15e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e160:	7dbb      	ldrb	r3, [r7, #22]
 800e162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e166:	75bb      	strb	r3, [r7, #22]
 800e168:	7dbb      	ldrb	r3, [r7, #22]
 800e16a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	695a      	ldr	r2, [r3, #20]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e174:	7dba      	ldrb	r2, [r7, #22]
 800e176:	7d7b      	ldrb	r3, [r7, #21]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d115      	bne.n	800e1a8 <dir_read+0xe6>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6a1b      	ldr	r3, [r3, #32]
 800e180:	330d      	adds	r3, #13
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	7d3a      	ldrb	r2, [r7, #20]
 800e186:	429a      	cmp	r2, r3
 800e188:	d10e      	bne.n	800e1a8 <dir_read+0xe6>
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	68da      	ldr	r2, [r3, #12]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6a1b      	ldr	r3, [r3, #32]
 800e192:	4619      	mov	r1, r3
 800e194:	4610      	mov	r0, r2
 800e196:	f7ff fe17 	bl	800ddc8 <pick_lfn>
 800e19a:	4603      	mov	r3, r0
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d003      	beq.n	800e1a8 <dir_read+0xe6>
 800e1a0:	7d7b      	ldrb	r3, [r7, #21]
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	e000      	b.n	800e1aa <dir_read+0xe8>
 800e1a8:	23ff      	movs	r3, #255	; 0xff
 800e1aa:	757b      	strb	r3, [r7, #21]
 800e1ac:	e011      	b.n	800e1d2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e1ae:	7d7b      	ldrb	r3, [r7, #21]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d109      	bne.n	800e1c8 <dir_read+0x106>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6a1b      	ldr	r3, [r3, #32]
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7ff ff61 	bl	800e080 <sum_sfn>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	7d3b      	ldrb	r3, [r7, #20]
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d015      	beq.n	800e1f4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e1ce:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e1d0:	e010      	b.n	800e1f4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7ff fc3b 	bl	800da50 <dir_next>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e1de:	7dfb      	ldrb	r3, [r7, #23]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d109      	bne.n	800e1f8 <dir_read+0x136>
	while (dp->sect) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	69db      	ldr	r3, [r3, #28]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	f47f af79 	bne.w	800e0e0 <dir_read+0x1e>
 800e1ee:	e004      	b.n	800e1fa <dir_read+0x138>
		if (res != FR_OK) break;
 800e1f0:	bf00      	nop
 800e1f2:	e002      	b.n	800e1fa <dir_read+0x138>
					break;
 800e1f4:	bf00      	nop
 800e1f6:	e000      	b.n	800e1fa <dir_read+0x138>
		if (res != FR_OK) break;
 800e1f8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d002      	beq.n	800e206 <dir_read+0x144>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2200      	movs	r2, #0
 800e204:	61da      	str	r2, [r3, #28]
	return res;
 800e206:	7dfb      	ldrb	r3, [r7, #23]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e21e:	2100      	movs	r1, #0
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7ff fb9a 	bl	800d95a <dir_sdi>
 800e226:	4603      	mov	r3, r0
 800e228:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e22a:	7dfb      	ldrb	r3, [r7, #23]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <dir_find+0x24>
 800e230:	7dfb      	ldrb	r3, [r7, #23]
 800e232:	e0a9      	b.n	800e388 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e234:	23ff      	movs	r3, #255	; 0xff
 800e236:	753b      	strb	r3, [r7, #20]
 800e238:	7d3b      	ldrb	r3, [r7, #20]
 800e23a:	757b      	strb	r3, [r7, #21]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f04f 32ff 	mov.w	r2, #4294967295
 800e242:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	69db      	ldr	r3, [r3, #28]
 800e248:	4619      	mov	r1, r3
 800e24a:	6938      	ldr	r0, [r7, #16]
 800e24c:	f7ff f808 	bl	800d260 <move_window>
 800e250:	4603      	mov	r3, r0
 800e252:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e254:	7dfb      	ldrb	r3, [r7, #23]
 800e256:	2b00      	cmp	r3, #0
 800e258:	f040 8090 	bne.w	800e37c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6a1b      	ldr	r3, [r3, #32]
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e264:	7dbb      	ldrb	r3, [r7, #22]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d102      	bne.n	800e270 <dir_find+0x60>
 800e26a:	2304      	movs	r3, #4
 800e26c:	75fb      	strb	r3, [r7, #23]
 800e26e:	e08a      	b.n	800e386 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a1b      	ldr	r3, [r3, #32]
 800e274:	330b      	adds	r3, #11
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e27c:	73fb      	strb	r3, [r7, #15]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	7bfa      	ldrb	r2, [r7, #15]
 800e282:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e284:	7dbb      	ldrb	r3, [r7, #22]
 800e286:	2be5      	cmp	r3, #229	; 0xe5
 800e288:	d007      	beq.n	800e29a <dir_find+0x8a>
 800e28a:	7bfb      	ldrb	r3, [r7, #15]
 800e28c:	f003 0308 	and.w	r3, r3, #8
 800e290:	2b00      	cmp	r3, #0
 800e292:	d009      	beq.n	800e2a8 <dir_find+0x98>
 800e294:	7bfb      	ldrb	r3, [r7, #15]
 800e296:	2b0f      	cmp	r3, #15
 800e298:	d006      	beq.n	800e2a8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e29a:	23ff      	movs	r3, #255	; 0xff
 800e29c:	757b      	strb	r3, [r7, #21]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a4:	631a      	str	r2, [r3, #48]	; 0x30
 800e2a6:	e05e      	b.n	800e366 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
 800e2aa:	2b0f      	cmp	r3, #15
 800e2ac:	d136      	bne.n	800e31c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d154      	bne.n	800e366 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e2bc:	7dbb      	ldrb	r3, [r7, #22]
 800e2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00d      	beq.n	800e2e2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a1b      	ldr	r3, [r3, #32]
 800e2ca:	7b5b      	ldrb	r3, [r3, #13]
 800e2cc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e2ce:	7dbb      	ldrb	r3, [r7, #22]
 800e2d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2d4:	75bb      	strb	r3, [r7, #22]
 800e2d6:	7dbb      	ldrb	r3, [r7, #22]
 800e2d8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	695a      	ldr	r2, [r3, #20]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e2e2:	7dba      	ldrb	r2, [r7, #22]
 800e2e4:	7d7b      	ldrb	r3, [r7, #21]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d115      	bne.n	800e316 <dir_find+0x106>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6a1b      	ldr	r3, [r3, #32]
 800e2ee:	330d      	adds	r3, #13
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	7d3a      	ldrb	r2, [r7, #20]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d10e      	bne.n	800e316 <dir_find+0x106>
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	68da      	ldr	r2, [r3, #12]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6a1b      	ldr	r3, [r3, #32]
 800e300:	4619      	mov	r1, r3
 800e302:	4610      	mov	r0, r2
 800e304:	f7ff fcf0 	bl	800dce8 <cmp_lfn>
 800e308:	4603      	mov	r3, r0
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d003      	beq.n	800e316 <dir_find+0x106>
 800e30e:	7d7b      	ldrb	r3, [r7, #21]
 800e310:	3b01      	subs	r3, #1
 800e312:	b2db      	uxtb	r3, r3
 800e314:	e000      	b.n	800e318 <dir_find+0x108>
 800e316:	23ff      	movs	r3, #255	; 0xff
 800e318:	757b      	strb	r3, [r7, #21]
 800e31a:	e024      	b.n	800e366 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e31c:	7d7b      	ldrb	r3, [r7, #21]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d109      	bne.n	800e336 <dir_find+0x126>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6a1b      	ldr	r3, [r3, #32]
 800e326:	4618      	mov	r0, r3
 800e328:	f7ff feaa 	bl	800e080 <sum_sfn>
 800e32c:	4603      	mov	r3, r0
 800e32e:	461a      	mov	r2, r3
 800e330:	7d3b      	ldrb	r3, [r7, #20]
 800e332:	4293      	cmp	r3, r2
 800e334:	d024      	beq.n	800e380 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e33c:	f003 0301 	and.w	r3, r3, #1
 800e340:	2b00      	cmp	r3, #0
 800e342:	d10a      	bne.n	800e35a <dir_find+0x14a>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a18      	ldr	r0, [r3, #32]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	3324      	adds	r3, #36	; 0x24
 800e34c:	220b      	movs	r2, #11
 800e34e:	4619      	mov	r1, r3
 800e350:	f7fe fd93 	bl	800ce7a <mem_cmp>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d014      	beq.n	800e384 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e35a:	23ff      	movs	r3, #255	; 0xff
 800e35c:	757b      	strb	r3, [r7, #21]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f04f 32ff 	mov.w	r2, #4294967295
 800e364:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e366:	2100      	movs	r1, #0
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff fb71 	bl	800da50 <dir_next>
 800e36e:	4603      	mov	r3, r0
 800e370:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e372:	7dfb      	ldrb	r3, [r7, #23]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f43f af65 	beq.w	800e244 <dir_find+0x34>
 800e37a:	e004      	b.n	800e386 <dir_find+0x176>
		if (res != FR_OK) break;
 800e37c:	bf00      	nop
 800e37e:	e002      	b.n	800e386 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e380:	bf00      	nop
 800e382:	e000      	b.n	800e386 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e384:	bf00      	nop

	return res;
 800e386:	7dfb      	ldrb	r3, [r7, #23]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3718      	adds	r7, #24
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08c      	sub	sp, #48	; 0x30
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e3a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d001      	beq.n	800e3b0 <dir_register+0x20>
 800e3ac:	2306      	movs	r3, #6
 800e3ae:	e0e0      	b.n	800e572 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b4:	e002      	b.n	800e3bc <dir_register+0x2c>
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	68da      	ldr	r2, [r3, #12]
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c2:	005b      	lsls	r3, r3, #1
 800e3c4:	4413      	add	r3, r2
 800e3c6:	881b      	ldrh	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1f4      	bne.n	800e3b6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e3d2:	f107 030c 	add.w	r3, r7, #12
 800e3d6:	220c      	movs	r2, #12
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe fd13 	bl	800ce04 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e3de:	7dfb      	ldrb	r3, [r7, #23]
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d032      	beq.n	800e44e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2240      	movs	r2, #64	; 0x40
 800e3ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3f4:	e016      	b.n	800e424 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e3fc:	69fb      	ldr	r3, [r7, #28]
 800e3fe:	68da      	ldr	r2, [r3, #12]
 800e400:	f107 010c 	add.w	r1, r7, #12
 800e404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e406:	f7ff fdab 	bl	800df60 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7ff ff00 	bl	800e210 <dir_find>
 800e410:	4603      	mov	r3, r0
 800e412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d106      	bne.n	800e42c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e420:	3301      	adds	r3, #1
 800e422:	62bb      	str	r3, [r7, #40]	; 0x28
 800e424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e426:	2b63      	cmp	r3, #99	; 0x63
 800e428:	d9e5      	bls.n	800e3f6 <dir_register+0x66>
 800e42a:	e000      	b.n	800e42e <dir_register+0x9e>
			if (res != FR_OK) break;
 800e42c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e430:	2b64      	cmp	r3, #100	; 0x64
 800e432:	d101      	bne.n	800e438 <dir_register+0xa8>
 800e434:	2307      	movs	r3, #7
 800e436:	e09c      	b.n	800e572 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e43c:	2b04      	cmp	r3, #4
 800e43e:	d002      	beq.n	800e446 <dir_register+0xb6>
 800e440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e444:	e095      	b.n	800e572 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e446:	7dfa      	ldrb	r2, [r7, #23]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e44e:	7dfb      	ldrb	r3, [r7, #23]
 800e450:	f003 0302 	and.w	r3, r3, #2
 800e454:	2b00      	cmp	r3, #0
 800e456:	d007      	beq.n	800e468 <dir_register+0xd8>
 800e458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e45a:	330c      	adds	r3, #12
 800e45c:	4a47      	ldr	r2, [pc, #284]	; (800e57c <dir_register+0x1ec>)
 800e45e:	fba2 2303 	umull	r2, r3, r2, r3
 800e462:	089b      	lsrs	r3, r3, #2
 800e464:	3301      	adds	r3, #1
 800e466:	e000      	b.n	800e46a <dir_register+0xda>
 800e468:	2301      	movs	r3, #1
 800e46a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e46c:	6a39      	ldr	r1, [r7, #32]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7ff fbb3 	bl	800dbda <dir_alloc>
 800e474:	4603      	mov	r3, r0
 800e476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e47a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d148      	bne.n	800e514 <dir_register+0x184>
 800e482:	6a3b      	ldr	r3, [r7, #32]
 800e484:	3b01      	subs	r3, #1
 800e486:	623b      	str	r3, [r7, #32]
 800e488:	6a3b      	ldr	r3, [r7, #32]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d042      	beq.n	800e514 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	695a      	ldr	r2, [r3, #20]
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	015b      	lsls	r3, r3, #5
 800e496:	1ad3      	subs	r3, r2, r3
 800e498:	4619      	mov	r1, r3
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f7ff fa5d 	bl	800d95a <dir_sdi>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e4a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d132      	bne.n	800e514 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	3324      	adds	r3, #36	; 0x24
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff fde4 	bl	800e080 <sum_sfn>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	69db      	ldr	r3, [r3, #28]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	69f8      	ldr	r0, [r7, #28]
 800e4c4:	f7fe fecc 	bl	800d260 <move_window>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e4ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d11d      	bne.n	800e512 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e4d6:	69fb      	ldr	r3, [r7, #28]
 800e4d8:	68d8      	ldr	r0, [r3, #12]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a19      	ldr	r1, [r3, #32]
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	7efb      	ldrb	r3, [r7, #27]
 800e4e4:	f7ff fcd4 	bl	800de90 <put_lfn>
				fs->wflag = 1;
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e4ee:	2100      	movs	r1, #0
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7ff faad 	bl	800da50 <dir_next>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e4fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e500:	2b00      	cmp	r3, #0
 800e502:	d107      	bne.n	800e514 <dir_register+0x184>
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	3b01      	subs	r3, #1
 800e508:	623b      	str	r3, [r7, #32]
 800e50a:	6a3b      	ldr	r3, [r7, #32]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d1d5      	bne.n	800e4bc <dir_register+0x12c>
 800e510:	e000      	b.n	800e514 <dir_register+0x184>
				if (res != FR_OK) break;
 800e512:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d128      	bne.n	800e56e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	69db      	ldr	r3, [r3, #28]
 800e520:	4619      	mov	r1, r3
 800e522:	69f8      	ldr	r0, [r7, #28]
 800e524:	f7fe fe9c 	bl	800d260 <move_window>
 800e528:	4603      	mov	r3, r0
 800e52a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e532:	2b00      	cmp	r3, #0
 800e534:	d11b      	bne.n	800e56e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6a1b      	ldr	r3, [r3, #32]
 800e53a:	2220      	movs	r2, #32
 800e53c:	2100      	movs	r1, #0
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fe fc81 	bl	800ce46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6a18      	ldr	r0, [r3, #32]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3324      	adds	r3, #36	; 0x24
 800e54c:	220b      	movs	r2, #11
 800e54e:	4619      	mov	r1, r3
 800e550:	f7fe fc58 	bl	800ce04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	330c      	adds	r3, #12
 800e560:	f002 0218 	and.w	r2, r2, #24
 800e564:	b2d2      	uxtb	r2, r2
 800e566:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	2201      	movs	r2, #1
 800e56c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e56e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e572:	4618      	mov	r0, r3
 800e574:	3730      	adds	r7, #48	; 0x30
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	4ec4ec4f 	.word	0x4ec4ec4f

0800e580 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b088      	sub	sp, #32
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2200      	movs	r2, #0
 800e594:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	69db      	ldr	r3, [r3, #28]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 80c9 	beq.w	800e732 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a8:	d032      	beq.n	800e610 <get_fileinfo+0x90>
			i = j = 0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	61bb      	str	r3, [r7, #24]
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e5b2:	e01b      	b.n	800e5ec <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e5b4:	89fb      	ldrh	r3, [r7, #14]
 800e5b6:	2100      	movs	r1, #0
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f002 f959 	bl	8010870 <ff_convert>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e5c2:	89fb      	ldrh	r3, [r7, #14]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d102      	bne.n	800e5ce <get_fileinfo+0x4e>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	61fb      	str	r3, [r7, #28]
 800e5cc:	e01a      	b.n	800e604 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	2bfe      	cmp	r3, #254	; 0xfe
 800e5d2:	d902      	bls.n	800e5da <get_fileinfo+0x5a>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	61fb      	str	r3, [r7, #28]
 800e5d8:	e014      	b.n	800e604 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	61fa      	str	r2, [r7, #28]
 800e5e0:	89fa      	ldrh	r2, [r7, #14]
 800e5e2:	b2d1      	uxtb	r1, r2
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	4413      	add	r3, r2
 800e5e8:	460a      	mov	r2, r1
 800e5ea:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	68da      	ldr	r2, [r3, #12]
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	1c59      	adds	r1, r3, #1
 800e5f4:	61b9      	str	r1, [r7, #24]
 800e5f6:	005b      	lsls	r3, r3, #1
 800e5f8:	4413      	add	r3, r2
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	81fb      	strh	r3, [r7, #14]
 800e5fe:	89fb      	ldrh	r3, [r7, #14]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d1d7      	bne.n	800e5b4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e604:	683a      	ldr	r2, [r7, #0]
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	4413      	add	r3, r2
 800e60a:	3316      	adds	r3, #22
 800e60c:	2200      	movs	r2, #0
 800e60e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	61bb      	str	r3, [r7, #24]
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e618:	683a      	ldr	r2, [r7, #0]
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	4413      	add	r3, r2
 800e61e:	3316      	adds	r3, #22
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e624:	e04c      	b.n	800e6c0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a1a      	ldr	r2, [r3, #32]
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	1c59      	adds	r1, r3, #1
 800e62e:	61f9      	str	r1, [r7, #28]
 800e630:	4413      	add	r3, r2
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e636:	7dfb      	ldrb	r3, [r7, #23]
 800e638:	2b20      	cmp	r3, #32
 800e63a:	d100      	bne.n	800e63e <get_fileinfo+0xbe>
 800e63c:	e040      	b.n	800e6c0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
 800e640:	2b05      	cmp	r3, #5
 800e642:	d101      	bne.n	800e648 <get_fileinfo+0xc8>
 800e644:	23e5      	movs	r3, #229	; 0xe5
 800e646:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	2b09      	cmp	r3, #9
 800e64c:	d10f      	bne.n	800e66e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800e64e:	89bb      	ldrh	r3, [r7, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d105      	bne.n	800e660 <get_fileinfo+0xe0>
 800e654:	683a      	ldr	r2, [r7, #0]
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	4413      	add	r3, r2
 800e65a:	3316      	adds	r3, #22
 800e65c:	222e      	movs	r2, #46	; 0x2e
 800e65e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	1c5a      	adds	r2, r3, #1
 800e664:	61ba      	str	r2, [r7, #24]
 800e666:	683a      	ldr	r2, [r7, #0]
 800e668:	4413      	add	r3, r2
 800e66a:	222e      	movs	r2, #46	; 0x2e
 800e66c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e66e:	683a      	ldr	r2, [r7, #0]
 800e670:	69bb      	ldr	r3, [r7, #24]
 800e672:	4413      	add	r3, r2
 800e674:	3309      	adds	r3, #9
 800e676:	7dfa      	ldrb	r2, [r7, #23]
 800e678:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e67a:	89bb      	ldrh	r3, [r7, #12]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d11c      	bne.n	800e6ba <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e680:	7dfb      	ldrb	r3, [r7, #23]
 800e682:	2b40      	cmp	r3, #64	; 0x40
 800e684:	d913      	bls.n	800e6ae <get_fileinfo+0x12e>
 800e686:	7dfb      	ldrb	r3, [r7, #23]
 800e688:	2b5a      	cmp	r3, #90	; 0x5a
 800e68a:	d810      	bhi.n	800e6ae <get_fileinfo+0x12e>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a1b      	ldr	r3, [r3, #32]
 800e690:	330c      	adds	r3, #12
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	461a      	mov	r2, r3
 800e696:	69fb      	ldr	r3, [r7, #28]
 800e698:	2b08      	cmp	r3, #8
 800e69a:	d901      	bls.n	800e6a0 <get_fileinfo+0x120>
 800e69c:	2310      	movs	r3, #16
 800e69e:	e000      	b.n	800e6a2 <get_fileinfo+0x122>
 800e6a0:	2308      	movs	r3, #8
 800e6a2:	4013      	ands	r3, r2
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800e6a8:	7dfb      	ldrb	r3, [r7, #23]
 800e6aa:	3320      	adds	r3, #32
 800e6ac:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e6ae:	683a      	ldr	r2, [r7, #0]
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	3316      	adds	r3, #22
 800e6b6:	7dfa      	ldrb	r2, [r7, #23]
 800e6b8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	2b0a      	cmp	r3, #10
 800e6c4:	d9af      	bls.n	800e626 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e6c6:	89bb      	ldrh	r3, [r7, #12]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d10d      	bne.n	800e6e8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	3316      	adds	r3, #22
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6a1b      	ldr	r3, [r3, #32]
 800e6dc:	330c      	adds	r3, #12
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d101      	bne.n	800e6e8 <get_fileinfo+0x168>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e6e8:	683a      	ldr	r2, [r7, #0]
 800e6ea:	69bb      	ldr	r3, [r7, #24]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	3309      	adds	r3, #9
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a1b      	ldr	r3, [r3, #32]
 800e6f8:	7ada      	ldrb	r2, [r3, #11]
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	331c      	adds	r3, #28
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe fb13 	bl	800cd30 <ld_dword>
 800e70a:	4602      	mov	r2, r0
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a1b      	ldr	r3, [r3, #32]
 800e714:	3316      	adds	r3, #22
 800e716:	4618      	mov	r0, r3
 800e718:	f7fe fb0a 	bl	800cd30 <ld_dword>
 800e71c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	b29a      	uxth	r2, r3
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	80da      	strh	r2, [r3, #6]
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	0c1b      	lsrs	r3, r3, #16
 800e72a:	b29a      	uxth	r2, r3
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	809a      	strh	r2, [r3, #4]
 800e730:	e000      	b.n	800e734 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e732:	bf00      	nop
}
 800e734:	3720      	adds	r7, #32
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
	...

0800e73c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b08a      	sub	sp, #40	; 0x28
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	613b      	str	r3, [r7, #16]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	68db      	ldr	r3, [r3, #12]
 800e752:	60fb      	str	r3, [r7, #12]
 800e754:	2300      	movs	r3, #0
 800e756:	617b      	str	r3, [r7, #20]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e75c:	69bb      	ldr	r3, [r7, #24]
 800e75e:	1c5a      	adds	r2, r3, #1
 800e760:	61ba      	str	r2, [r7, #24]
 800e762:	693a      	ldr	r2, [r7, #16]
 800e764:	4413      	add	r3, r2
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e76a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e76c:	2b1f      	cmp	r3, #31
 800e76e:	d940      	bls.n	800e7f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e772:	2b2f      	cmp	r3, #47	; 0x2f
 800e774:	d006      	beq.n	800e784 <create_name+0x48>
 800e776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e778:	2b5c      	cmp	r3, #92	; 0x5c
 800e77a:	d110      	bne.n	800e79e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e77c:	e002      	b.n	800e784 <create_name+0x48>
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	3301      	adds	r3, #1
 800e782:	61bb      	str	r3, [r7, #24]
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	4413      	add	r3, r2
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	2b2f      	cmp	r3, #47	; 0x2f
 800e78e:	d0f6      	beq.n	800e77e <create_name+0x42>
 800e790:	693a      	ldr	r2, [r7, #16]
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	4413      	add	r3, r2
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b5c      	cmp	r3, #92	; 0x5c
 800e79a:	d0f0      	beq.n	800e77e <create_name+0x42>
			break;
 800e79c:	e02a      	b.n	800e7f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2bfe      	cmp	r3, #254	; 0xfe
 800e7a2:	d901      	bls.n	800e7a8 <create_name+0x6c>
 800e7a4:	2306      	movs	r3, #6
 800e7a6:	e177      	b.n	800ea98 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f002 f85c 	bl	8010870 <ff_convert>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e7bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d101      	bne.n	800e7c6 <create_name+0x8a>
 800e7c2:	2306      	movs	r3, #6
 800e7c4:	e168      	b.n	800ea98 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e7c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7c8:	2b7f      	cmp	r3, #127	; 0x7f
 800e7ca:	d809      	bhi.n	800e7e0 <create_name+0xa4>
 800e7cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	48b3      	ldr	r0, [pc, #716]	; (800eaa0 <create_name+0x364>)
 800e7d2:	f7fe fb79 	bl	800cec8 <chk_chr>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d001      	beq.n	800e7e0 <create_name+0xa4>
 800e7dc:	2306      	movs	r3, #6
 800e7de:	e15b      	b.n	800ea98 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	1c5a      	adds	r2, r3, #1
 800e7e4:	617a      	str	r2, [r7, #20]
 800e7e6:	005b      	lsls	r3, r3, #1
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e7f0:	e7b4      	b.n	800e75c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e7f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	441a      	add	r2, r3
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e7fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e800:	2b1f      	cmp	r3, #31
 800e802:	d801      	bhi.n	800e808 <create_name+0xcc>
 800e804:	2304      	movs	r3, #4
 800e806:	e000      	b.n	800e80a <create_name+0xce>
 800e808:	2300      	movs	r3, #0
 800e80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e80e:	e011      	b.n	800e834 <create_name+0xf8>
		w = lfn[di - 1];
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e816:	4413      	add	r3, r2
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	4413      	add	r3, r2
 800e81e:	881b      	ldrh	r3, [r3, #0]
 800e820:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800e822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e824:	2b20      	cmp	r3, #32
 800e826:	d002      	beq.n	800e82e <create_name+0xf2>
 800e828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e82a:	2b2e      	cmp	r3, #46	; 0x2e
 800e82c:	d106      	bne.n	800e83c <create_name+0x100>
		di--;
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	3b01      	subs	r3, #1
 800e832:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1ea      	bne.n	800e810 <create_name+0xd4>
 800e83a:	e000      	b.n	800e83e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800e83c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	005b      	lsls	r3, r3, #1
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	4413      	add	r3, r2
 800e846:	2200      	movs	r2, #0
 800e848:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d101      	bne.n	800e854 <create_name+0x118>
 800e850:	2306      	movs	r3, #6
 800e852:	e121      	b.n	800ea98 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	3324      	adds	r3, #36	; 0x24
 800e858:	220b      	movs	r2, #11
 800e85a:	2120      	movs	r1, #32
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7fe faf2 	bl	800ce46 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e862:	2300      	movs	r3, #0
 800e864:	61bb      	str	r3, [r7, #24]
 800e866:	e002      	b.n	800e86e <create_name+0x132>
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	3301      	adds	r3, #1
 800e86c:	61bb      	str	r3, [r7, #24]
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	4413      	add	r3, r2
 800e876:	881b      	ldrh	r3, [r3, #0]
 800e878:	2b20      	cmp	r3, #32
 800e87a:	d0f5      	beq.n	800e868 <create_name+0x12c>
 800e87c:	69bb      	ldr	r3, [r7, #24]
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	4413      	add	r3, r2
 800e884:	881b      	ldrh	r3, [r3, #0]
 800e886:	2b2e      	cmp	r3, #46	; 0x2e
 800e888:	d0ee      	beq.n	800e868 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d009      	beq.n	800e8a4 <create_name+0x168>
 800e890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e894:	f043 0303 	orr.w	r3, r3, #3
 800e898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e89c:	e002      	b.n	800e8a4 <create_name+0x168>
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	3b01      	subs	r3, #1
 800e8a2:	617b      	str	r3, [r7, #20]
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d009      	beq.n	800e8be <create_name+0x182>
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e8b0:	4413      	add	r3, r2
 800e8b2:	005b      	lsls	r3, r3, #1
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e8bc:	d1ef      	bne.n	800e89e <create_name+0x162>

	i = b = 0; ni = 8;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	623b      	str	r3, [r7, #32]
 800e8c8:	2308      	movs	r3, #8
 800e8ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	61ba      	str	r2, [r7, #24]
 800e8d2:	005b      	lsls	r3, r3, #1
 800e8d4:	68fa      	ldr	r2, [r7, #12]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800e8dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f000 8090 	beq.w	800ea04 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e8e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8e6:	2b20      	cmp	r3, #32
 800e8e8:	d006      	beq.n	800e8f8 <create_name+0x1bc>
 800e8ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8ec:	2b2e      	cmp	r3, #46	; 0x2e
 800e8ee:	d10a      	bne.n	800e906 <create_name+0x1ca>
 800e8f0:	69ba      	ldr	r2, [r7, #24]
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d006      	beq.n	800e906 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800e8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8fc:	f043 0303 	orr.w	r3, r3, #3
 800e900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e904:	e07d      	b.n	800ea02 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e906:	6a3a      	ldr	r2, [r7, #32]
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d203      	bcs.n	800e916 <create_name+0x1da>
 800e90e:	69ba      	ldr	r2, [r7, #24]
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	429a      	cmp	r2, r3
 800e914:	d123      	bne.n	800e95e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	2b0b      	cmp	r3, #11
 800e91a:	d106      	bne.n	800e92a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800e91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e920:	f043 0303 	orr.w	r3, r3, #3
 800e924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e928:	e06f      	b.n	800ea0a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e92a:	69ba      	ldr	r2, [r7, #24]
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	429a      	cmp	r2, r3
 800e930:	d005      	beq.n	800e93e <create_name+0x202>
 800e932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e936:	f043 0303 	orr.w	r3, r3, #3
 800e93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800e93e:	69ba      	ldr	r2, [r7, #24]
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	429a      	cmp	r2, r3
 800e944:	d860      	bhi.n	800ea08 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	61bb      	str	r3, [r7, #24]
 800e94a:	2308      	movs	r3, #8
 800e94c:	623b      	str	r3, [r7, #32]
 800e94e:	230b      	movs	r3, #11
 800e950:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800e952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e956:	009b      	lsls	r3, r3, #2
 800e958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e95c:	e051      	b.n	800ea02 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800e95e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e960:	2b7f      	cmp	r3, #127	; 0x7f
 800e962:	d914      	bls.n	800e98e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e966:	2100      	movs	r1, #0
 800e968:	4618      	mov	r0, r3
 800e96a:	f001 ff81 	bl	8010870 <ff_convert>
 800e96e:	4603      	mov	r3, r0
 800e970:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	d004      	beq.n	800e982 <create_name+0x246>
 800e978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e97a:	3b80      	subs	r3, #128	; 0x80
 800e97c:	4a49      	ldr	r2, [pc, #292]	; (800eaa4 <create_name+0x368>)
 800e97e:	5cd3      	ldrb	r3, [r2, r3]
 800e980:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800e982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e986:	f043 0302 	orr.w	r3, r3, #2
 800e98a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e98e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e990:	2b00      	cmp	r3, #0
 800e992:	d007      	beq.n	800e9a4 <create_name+0x268>
 800e994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e996:	4619      	mov	r1, r3
 800e998:	4843      	ldr	r0, [pc, #268]	; (800eaa8 <create_name+0x36c>)
 800e99a:	f7fe fa95 	bl	800cec8 <chk_chr>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d008      	beq.n	800e9b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e9a4:	235f      	movs	r3, #95	; 0x5f
 800e9a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9ac:	f043 0303 	orr.w	r3, r3, #3
 800e9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9b4:	e01b      	b.n	800e9ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800e9b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9b8:	2b40      	cmp	r3, #64	; 0x40
 800e9ba:	d909      	bls.n	800e9d0 <create_name+0x294>
 800e9bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9be:	2b5a      	cmp	r3, #90	; 0x5a
 800e9c0:	d806      	bhi.n	800e9d0 <create_name+0x294>
					b |= 2;
 800e9c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9c6:	f043 0302 	orr.w	r3, r3, #2
 800e9ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9ce:	e00e      	b.n	800e9ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800e9d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9d2:	2b60      	cmp	r3, #96	; 0x60
 800e9d4:	d90b      	bls.n	800e9ee <create_name+0x2b2>
 800e9d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9d8:	2b7a      	cmp	r3, #122	; 0x7a
 800e9da:	d808      	bhi.n	800e9ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800e9dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9e0:	f043 0301 	orr.w	r3, r3, #1
 800e9e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e9e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ea:	3b20      	subs	r3, #32
 800e9ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800e9ee:	6a3b      	ldr	r3, [r7, #32]
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	623a      	str	r2, [r7, #32]
 800e9f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9f6:	b2d1      	uxtb	r1, r2
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	460a      	mov	r2, r1
 800e9fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ea02:	e763      	b.n	800e8cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ea04:	bf00      	nop
 800ea06:	e000      	b.n	800ea0a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800ea08:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ea10:	2be5      	cmp	r3, #229	; 0xe5
 800ea12:	d103      	bne.n	800ea1c <create_name+0x2e0>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2205      	movs	r2, #5
 800ea18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	2b08      	cmp	r3, #8
 800ea20:	d104      	bne.n	800ea2c <create_name+0x2f0>
 800ea22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ea2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea30:	f003 030c 	and.w	r3, r3, #12
 800ea34:	2b0c      	cmp	r3, #12
 800ea36:	d005      	beq.n	800ea44 <create_name+0x308>
 800ea38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea3c:	f003 0303 	and.w	r3, r3, #3
 800ea40:	2b03      	cmp	r3, #3
 800ea42:	d105      	bne.n	800ea50 <create_name+0x314>
 800ea44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea48:	f043 0302 	orr.w	r3, r3, #2
 800ea4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ea50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea54:	f003 0302 	and.w	r3, r3, #2
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d117      	bne.n	800ea8c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ea5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea60:	f003 0303 	and.w	r3, r3, #3
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d105      	bne.n	800ea74 <create_name+0x338>
 800ea68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea6c:	f043 0310 	orr.w	r3, r3, #16
 800ea70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ea74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea78:	f003 030c 	and.w	r3, r3, #12
 800ea7c:	2b04      	cmp	r3, #4
 800ea7e:	d105      	bne.n	800ea8c <create_name+0x350>
 800ea80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea84:	f043 0308 	orr.w	r3, r3, #8
 800ea88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ea92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800ea96:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3728      	adds	r7, #40	; 0x28
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	080145cc 	.word	0x080145cc
 800eaa4:	08014634 	.word	0x08014634
 800eaa8:	080145d8 	.word	0x080145d8

0800eaac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800eac0:	e002      	b.n	800eac8 <follow_path+0x1c>
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	3301      	adds	r3, #1
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2b2f      	cmp	r3, #47	; 0x2f
 800eace:	d0f8      	beq.n	800eac2 <follow_path+0x16>
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	2b5c      	cmp	r3, #92	; 0x5c
 800ead6:	d0f4      	beq.n	800eac2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ead8:	693b      	ldr	r3, [r7, #16]
 800eada:	2200      	movs	r2, #0
 800eadc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	2b1f      	cmp	r3, #31
 800eae4:	d80a      	bhi.n	800eafc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2280      	movs	r2, #128	; 0x80
 800eaea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800eaee:	2100      	movs	r1, #0
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7fe ff32 	bl	800d95a <dir_sdi>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	75fb      	strb	r3, [r7, #23]
 800eafa:	e043      	b.n	800eb84 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eafc:	463b      	mov	r3, r7
 800eafe:	4619      	mov	r1, r3
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f7ff fe1b 	bl	800e73c <create_name>
 800eb06:	4603      	mov	r3, r0
 800eb08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb0a:	7dfb      	ldrb	r3, [r7, #23]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d134      	bne.n	800eb7a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f7ff fb7d 	bl	800e210 <dir_find>
 800eb16:	4603      	mov	r3, r0
 800eb18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eb22:	7dfb      	ldrb	r3, [r7, #23]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00a      	beq.n	800eb3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eb28:	7dfb      	ldrb	r3, [r7, #23]
 800eb2a:	2b04      	cmp	r3, #4
 800eb2c:	d127      	bne.n	800eb7e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eb2e:	7afb      	ldrb	r3, [r7, #11]
 800eb30:	f003 0304 	and.w	r3, r3, #4
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d122      	bne.n	800eb7e <follow_path+0xd2>
 800eb38:	2305      	movs	r3, #5
 800eb3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eb3c:	e01f      	b.n	800eb7e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb3e:	7afb      	ldrb	r3, [r7, #11]
 800eb40:	f003 0304 	and.w	r3, r3, #4
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d11c      	bne.n	800eb82 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	799b      	ldrb	r3, [r3, #6]
 800eb4c:	f003 0310 	and.w	r3, r3, #16
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d102      	bne.n	800eb5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800eb54:	2305      	movs	r3, #5
 800eb56:	75fb      	strb	r3, [r7, #23]
 800eb58:	e014      	b.n	800eb84 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	695b      	ldr	r3, [r3, #20]
 800eb64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb68:	4413      	add	r3, r2
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f7ff f87b 	bl	800dc68 <ld_clust>
 800eb72:	4602      	mov	r2, r0
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eb78:	e7c0      	b.n	800eafc <follow_path+0x50>
			if (res != FR_OK) break;
 800eb7a:	bf00      	nop
 800eb7c:	e002      	b.n	800eb84 <follow_path+0xd8>
				break;
 800eb7e:	bf00      	nop
 800eb80:	e000      	b.n	800eb84 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eb82:	bf00      	nop
			}
		}
	}

	return res;
 800eb84:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	3718      	adds	r7, #24
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	bd80      	pop	{r7, pc}

0800eb8e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eb8e:	b480      	push	{r7}
 800eb90:	b087      	sub	sp, #28
 800eb92:	af00      	add	r7, sp, #0
 800eb94:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eb96:	f04f 33ff 	mov.w	r3, #4294967295
 800eb9a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d031      	beq.n	800ec08 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	617b      	str	r3, [r7, #20]
 800ebaa:	e002      	b.n	800ebb2 <get_ldnumber+0x24>
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	3301      	adds	r3, #1
 800ebb0:	617b      	str	r3, [r7, #20]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	2b1f      	cmp	r3, #31
 800ebb8:	d903      	bls.n	800ebc2 <get_ldnumber+0x34>
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	2b3a      	cmp	r3, #58	; 0x3a
 800ebc0:	d1f4      	bne.n	800ebac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	2b3a      	cmp	r3, #58	; 0x3a
 800ebc8:	d11c      	bne.n	800ec04 <get_ldnumber+0x76>
			tp = *path;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	1c5a      	adds	r2, r3, #1
 800ebd4:	60fa      	str	r2, [r7, #12]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	3b30      	subs	r3, #48	; 0x30
 800ebda:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	2b09      	cmp	r3, #9
 800ebe0:	d80e      	bhi.n	800ec00 <get_ldnumber+0x72>
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	d10a      	bne.n	800ec00 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d107      	bne.n	800ec00 <get_ldnumber+0x72>
					vol = (int)i;
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	617b      	str	r3, [r7, #20]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	697a      	ldr	r2, [r7, #20]
 800ebfe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	e002      	b.n	800ec0a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ec04:	2300      	movs	r3, #0
 800ec06:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ec08:	693b      	ldr	r3, [r7, #16]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
	...

0800ec18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	70da      	strb	r2, [r3, #3]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ec2e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ec30:	6839      	ldr	r1, [r7, #0]
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7fe fb14 	bl	800d260 <move_window>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d001      	beq.n	800ec42 <check_fs+0x2a>
 800ec3e:	2304      	movs	r3, #4
 800ec40:	e038      	b.n	800ecb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	3334      	adds	r3, #52	; 0x34
 800ec46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fe f858 	bl	800cd00 <ld_word>
 800ec50:	4603      	mov	r3, r0
 800ec52:	461a      	mov	r2, r3
 800ec54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d001      	beq.n	800ec60 <check_fs+0x48>
 800ec5c:	2303      	movs	r3, #3
 800ec5e:	e029      	b.n	800ecb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec66:	2be9      	cmp	r3, #233	; 0xe9
 800ec68:	d009      	beq.n	800ec7e <check_fs+0x66>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ec70:	2beb      	cmp	r3, #235	; 0xeb
 800ec72:	d11e      	bne.n	800ecb2 <check_fs+0x9a>
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ec7a:	2b90      	cmp	r3, #144	; 0x90
 800ec7c:	d119      	bne.n	800ecb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	3334      	adds	r3, #52	; 0x34
 800ec82:	3336      	adds	r3, #54	; 0x36
 800ec84:	4618      	mov	r0, r3
 800ec86:	f7fe f853 	bl	800cd30 <ld_dword>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ec90:	4a0a      	ldr	r2, [pc, #40]	; (800ecbc <check_fs+0xa4>)
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d101      	bne.n	800ec9a <check_fs+0x82>
 800ec96:	2300      	movs	r3, #0
 800ec98:	e00c      	b.n	800ecb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	3334      	adds	r3, #52	; 0x34
 800ec9e:	3352      	adds	r3, #82	; 0x52
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fe f845 	bl	800cd30 <ld_dword>
 800eca6:	4602      	mov	r2, r0
 800eca8:	4b05      	ldr	r3, [pc, #20]	; (800ecc0 <check_fs+0xa8>)
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d101      	bne.n	800ecb2 <check_fs+0x9a>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	e000      	b.n	800ecb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ecb2:	2302      	movs	r3, #2
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3708      	adds	r7, #8
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	00544146 	.word	0x00544146
 800ecc0:	33544146 	.word	0x33544146

0800ecc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b096      	sub	sp, #88	; 0x58
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	4613      	mov	r3, r2
 800ecd0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f7ff ff58 	bl	800eb8e <get_ldnumber>
 800ecde:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ece0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	da01      	bge.n	800ecea <find_volume+0x26>
 800ece6:	230b      	movs	r3, #11
 800ece8:	e231      	b.n	800f14e <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ecea:	4aa8      	ldr	r2, [pc, #672]	; (800ef8c <find_volume+0x2c8>)
 800ecec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecf2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ecf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d101      	bne.n	800ecfe <find_volume+0x3a>
 800ecfa:	230c      	movs	r3, #12
 800ecfc:	e227      	b.n	800f14e <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed02:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ed04:	79fb      	ldrb	r3, [r7, #7]
 800ed06:	f023 0301 	bic.w	r3, r3, #1
 800ed0a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0e:	781b      	ldrb	r3, [r3, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d01a      	beq.n	800ed4a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ed14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed16:	785b      	ldrb	r3, [r3, #1]
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f7fd ff53 	bl	800cbc4 <disk_status>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ed24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed28:	f003 0301 	and.w	r3, r3, #1
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d10c      	bne.n	800ed4a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ed30:	79fb      	ldrb	r3, [r7, #7]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d007      	beq.n	800ed46 <find_volume+0x82>
 800ed36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed3a:	f003 0304 	and.w	r3, r3, #4
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ed42:	230a      	movs	r3, #10
 800ed44:	e203      	b.n	800f14e <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800ed46:	2300      	movs	r3, #0
 800ed48:	e201      	b.n	800f14e <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ed4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ed50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed56:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ed58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5a:	785b      	ldrb	r3, [r3, #1]
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fd ff4b 	bl	800cbf8 <disk_initialize>
 800ed62:	4603      	mov	r3, r0
 800ed64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ed68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed6c:	f003 0301 	and.w	r3, r3, #1
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d001      	beq.n	800ed78 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ed74:	2303      	movs	r3, #3
 800ed76:	e1ea      	b.n	800f14e <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ed78:	79fb      	ldrb	r3, [r7, #7]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d007      	beq.n	800ed8e <find_volume+0xca>
 800ed7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ed82:	f003 0304 	and.w	r3, r3, #4
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d001      	beq.n	800ed8e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ed8a:	230a      	movs	r3, #10
 800ed8c:	e1df      	b.n	800f14e <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ed92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed96:	f7ff ff3f 	bl	800ec18 <check_fs>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800eda0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d14b      	bne.n	800ee40 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eda8:	2300      	movs	r3, #0
 800edaa:	643b      	str	r3, [r7, #64]	; 0x40
 800edac:	e01f      	b.n	800edee <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800edae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800edb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edb6:	011b      	lsls	r3, r3, #4
 800edb8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800edbc:	4413      	add	r3, r2
 800edbe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	3304      	adds	r3, #4
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d006      	beq.n	800edd8 <find_volume+0x114>
 800edca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edcc:	3308      	adds	r3, #8
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fd ffae 	bl	800cd30 <ld_dword>
 800edd4:	4602      	mov	r2, r0
 800edd6:	e000      	b.n	800edda <find_volume+0x116>
 800edd8:	2200      	movs	r2, #0
 800edda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eddc:	009b      	lsls	r3, r3, #2
 800edde:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ede2:	440b      	add	r3, r1
 800ede4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ede8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edea:	3301      	adds	r3, #1
 800edec:	643b      	str	r3, [r7, #64]	; 0x40
 800edee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edf0:	2b03      	cmp	r3, #3
 800edf2:	d9dc      	bls.n	800edae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800edf4:	2300      	movs	r3, #0
 800edf6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800edf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d002      	beq.n	800ee04 <find_volume+0x140>
 800edfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee00:	3b01      	subs	r3, #1
 800ee02:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ee04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ee0c:	4413      	add	r3, r2
 800ee0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ee12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ee14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d005      	beq.n	800ee26 <find_volume+0x162>
 800ee1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ee1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee1e:	f7ff fefb 	bl	800ec18 <check_fs>
 800ee22:	4603      	mov	r3, r0
 800ee24:	e000      	b.n	800ee28 <find_volume+0x164>
 800ee26:	2303      	movs	r3, #3
 800ee28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ee2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d905      	bls.n	800ee40 <find_volume+0x17c>
 800ee34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee36:	3301      	adds	r3, #1
 800ee38:	643b      	str	r3, [r7, #64]	; 0x40
 800ee3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee3c:	2b03      	cmp	r3, #3
 800ee3e:	d9e1      	bls.n	800ee04 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ee40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee44:	2b04      	cmp	r3, #4
 800ee46:	d101      	bne.n	800ee4c <find_volume+0x188>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e180      	b.n	800f14e <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ee4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d901      	bls.n	800ee58 <find_volume+0x194>
 800ee54:	230d      	movs	r3, #13
 800ee56:	e17a      	b.n	800f14e <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	3334      	adds	r3, #52	; 0x34
 800ee5c:	330b      	adds	r3, #11
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7fd ff4e 	bl	800cd00 <ld_word>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee6a:	d001      	beq.n	800ee70 <find_volume+0x1ac>
 800ee6c:	230d      	movs	r3, #13
 800ee6e:	e16e      	b.n	800f14e <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ee70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee72:	3334      	adds	r3, #52	; 0x34
 800ee74:	3316      	adds	r3, #22
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fd ff42 	bl	800cd00 <ld_word>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ee80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d106      	bne.n	800ee94 <find_volume+0x1d0>
 800ee86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee88:	3334      	adds	r3, #52	; 0x34
 800ee8a:	3324      	adds	r3, #36	; 0x24
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fd ff4f 	bl	800cd30 <ld_dword>
 800ee92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee98:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ee9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800eea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	789b      	ldrb	r3, [r3, #2]
 800eea8:	2b01      	cmp	r3, #1
 800eeaa:	d005      	beq.n	800eeb8 <find_volume+0x1f4>
 800eeac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeae:	789b      	ldrb	r3, [r3, #2]
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	d001      	beq.n	800eeb8 <find_volume+0x1f4>
 800eeb4:	230d      	movs	r3, #13
 800eeb6:	e14a      	b.n	800f14e <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	789b      	ldrb	r3, [r3, #2]
 800eebc:	461a      	mov	r2, r3
 800eebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eec0:	fb02 f303 	mul.w	r3, r2, r3
 800eec4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800eec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eecc:	b29a      	uxth	r2, r3
 800eece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800eed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed4:	895b      	ldrh	r3, [r3, #10]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d008      	beq.n	800eeec <find_volume+0x228>
 800eeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eedc:	895b      	ldrh	r3, [r3, #10]
 800eede:	461a      	mov	r2, r3
 800eee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee2:	895b      	ldrh	r3, [r3, #10]
 800eee4:	3b01      	subs	r3, #1
 800eee6:	4013      	ands	r3, r2
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d001      	beq.n	800eef0 <find_volume+0x22c>
 800eeec:	230d      	movs	r3, #13
 800eeee:	e12e      	b.n	800f14e <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800eef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef2:	3334      	adds	r3, #52	; 0x34
 800eef4:	3311      	adds	r3, #17
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fd ff02 	bl	800cd00 <ld_word>
 800eefc:	4603      	mov	r3, r0
 800eefe:	461a      	mov	r2, r3
 800ef00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ef04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef06:	891b      	ldrh	r3, [r3, #8]
 800ef08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d001      	beq.n	800ef16 <find_volume+0x252>
 800ef12:	230d      	movs	r3, #13
 800ef14:	e11b      	b.n	800f14e <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef18:	3334      	adds	r3, #52	; 0x34
 800ef1a:	3313      	adds	r3, #19
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fd feef 	bl	800cd00 <ld_word>
 800ef22:	4603      	mov	r3, r0
 800ef24:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ef26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d106      	bne.n	800ef3a <find_volume+0x276>
 800ef2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2e:	3334      	adds	r3, #52	; 0x34
 800ef30:	3320      	adds	r3, #32
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fd fefc 	bl	800cd30 <ld_dword>
 800ef38:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ef3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef3c:	3334      	adds	r3, #52	; 0x34
 800ef3e:	330e      	adds	r3, #14
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fd fedd 	bl	800cd00 <ld_word>
 800ef46:	4603      	mov	r3, r0
 800ef48:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ef4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <find_volume+0x290>
 800ef50:	230d      	movs	r3, #13
 800ef52:	e0fc      	b.n	800f14e <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ef54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef58:	4413      	add	r3, r2
 800ef5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef5c:	8912      	ldrh	r2, [r2, #8]
 800ef5e:	09d2      	lsrs	r2, r2, #7
 800ef60:	b292      	uxth	r2, r2
 800ef62:	4413      	add	r3, r2
 800ef64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ef66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d201      	bcs.n	800ef72 <find_volume+0x2ae>
 800ef6e:	230d      	movs	r3, #13
 800ef70:	e0ed      	b.n	800f14e <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ef72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef7a:	8952      	ldrh	r2, [r2, #10]
 800ef7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef80:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ef82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d103      	bne.n	800ef90 <find_volume+0x2cc>
 800ef88:	230d      	movs	r3, #13
 800ef8a:	e0e0      	b.n	800f14e <find_volume+0x48a>
 800ef8c:	20001c3c 	.word	0x20001c3c
		fmt = FS_FAT32;
 800ef90:	2303      	movs	r3, #3
 800ef92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ef96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d802      	bhi.n	800efa6 <find_volume+0x2e2>
 800efa0:	2302      	movs	r3, #2
 800efa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800efa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800efac:	4293      	cmp	r3, r2
 800efae:	d802      	bhi.n	800efb6 <find_volume+0x2f2>
 800efb0:	2301      	movs	r3, #1
 800efb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800efb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb8:	1c9a      	adds	r2, r3, #2
 800efba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800efbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800efc2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800efc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800efc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efc8:	441a      	add	r2, r3
 800efca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efcc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800efce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800efd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd2:	441a      	add	r2, r3
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800efd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efdc:	2b03      	cmp	r3, #3
 800efde:	d11e      	bne.n	800f01e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800efe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe2:	3334      	adds	r3, #52	; 0x34
 800efe4:	332a      	adds	r3, #42	; 0x2a
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fd fe8a 	bl	800cd00 <ld_word>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d001      	beq.n	800eff6 <find_volume+0x332>
 800eff2:	230d      	movs	r3, #13
 800eff4:	e0ab      	b.n	800f14e <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eff8:	891b      	ldrh	r3, [r3, #8]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <find_volume+0x33e>
 800effe:	230d      	movs	r3, #13
 800f000:	e0a5      	b.n	800f14e <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f004:	3334      	adds	r3, #52	; 0x34
 800f006:	332c      	adds	r3, #44	; 0x2c
 800f008:	4618      	mov	r0, r3
 800f00a:	f7fd fe91 	bl	800cd30 <ld_dword>
 800f00e:	4602      	mov	r2, r0
 800f010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f012:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f016:	699b      	ldr	r3, [r3, #24]
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	647b      	str	r3, [r7, #68]	; 0x44
 800f01c:	e01f      	b.n	800f05e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f020:	891b      	ldrh	r3, [r3, #8]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d101      	bne.n	800f02a <find_volume+0x366>
 800f026:	230d      	movs	r3, #13
 800f028:	e091      	b.n	800f14e <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f030:	441a      	add	r2, r3
 800f032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f034:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f036:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f03a:	2b02      	cmp	r3, #2
 800f03c:	d103      	bne.n	800f046 <find_volume+0x382>
 800f03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f040:	699b      	ldr	r3, [r3, #24]
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	e00a      	b.n	800f05c <find_volume+0x398>
 800f046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f048:	699a      	ldr	r2, [r3, #24]
 800f04a:	4613      	mov	r3, r2
 800f04c:	005b      	lsls	r3, r3, #1
 800f04e:	4413      	add	r3, r2
 800f050:	085a      	lsrs	r2, r3, #1
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	699b      	ldr	r3, [r3, #24]
 800f056:	f003 0301 	and.w	r3, r3, #1
 800f05a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f05c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f060:	69da      	ldr	r2, [r3, #28]
 800f062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f064:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800f068:	0b1b      	lsrs	r3, r3, #12
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d201      	bcs.n	800f072 <find_volume+0x3ae>
 800f06e:	230d      	movs	r3, #13
 800f070:	e06d      	b.n	800f14e <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f074:	f04f 32ff 	mov.w	r2, #4294967295
 800f078:	615a      	str	r2, [r3, #20]
 800f07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07c:	695a      	ldr	r2, [r3, #20]
 800f07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f080:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f084:	2280      	movs	r2, #128	; 0x80
 800f086:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f08c:	2b03      	cmp	r3, #3
 800f08e:	d149      	bne.n	800f124 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	3334      	adds	r3, #52	; 0x34
 800f094:	3330      	adds	r3, #48	; 0x30
 800f096:	4618      	mov	r0, r3
 800f098:	f7fd fe32 	bl	800cd00 <ld_word>
 800f09c:	4603      	mov	r3, r0
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d140      	bne.n	800f124 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f0aa:	f7fe f8d9 	bl	800d260 <move_window>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d137      	bne.n	800f124 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0bc:	3334      	adds	r3, #52	; 0x34
 800f0be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fd fe1c 	bl	800cd00 <ld_word>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d127      	bne.n	800f124 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d6:	3334      	adds	r3, #52	; 0x34
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fd fe29 	bl	800cd30 <ld_dword>
 800f0de:	4602      	mov	r2, r0
 800f0e0:	4b1d      	ldr	r3, [pc, #116]	; (800f158 <find_volume+0x494>)
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d11e      	bne.n	800f124 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e8:	3334      	adds	r3, #52	; 0x34
 800f0ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fd fe1e 	bl	800cd30 <ld_dword>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	4b19      	ldr	r3, [pc, #100]	; (800f15c <find_volume+0x498>)
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d113      	bne.n	800f124 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fe:	3334      	adds	r3, #52	; 0x34
 800f100:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f104:	4618      	mov	r0, r3
 800f106:	f7fd fe13 	bl	800cd30 <ld_dword>
 800f10a:	4602      	mov	r2, r0
 800f10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f112:	3334      	adds	r3, #52	; 0x34
 800f114:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f118:	4618      	mov	r0, r3
 800f11a:	f7fd fe09 	bl	800cd30 <ld_dword>
 800f11e:	4602      	mov	r2, r0
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f12a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f12c:	4b0c      	ldr	r3, [pc, #48]	; (800f160 <find_volume+0x49c>)
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	3301      	adds	r3, #1
 800f132:	b29a      	uxth	r2, r3
 800f134:	4b0a      	ldr	r3, [pc, #40]	; (800f160 <find_volume+0x49c>)
 800f136:	801a      	strh	r2, [r3, #0]
 800f138:	4b09      	ldr	r3, [pc, #36]	; (800f160 <find_volume+0x49c>)
 800f13a:	881a      	ldrh	r2, [r3, #0]
 800f13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f142:	4a08      	ldr	r2, [pc, #32]	; (800f164 <find_volume+0x4a0>)
 800f144:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f146:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f148:	f7fe f822 	bl	800d190 <clear_lock>
#endif
	return FR_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3758      	adds	r7, #88	; 0x58
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	41615252 	.word	0x41615252
 800f15c:	61417272 	.word	0x61417272
 800f160:	20001c40 	.word	0x20001c40
 800f164:	20001c64 	.word	0x20001c64

0800f168 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f172:	2309      	movs	r3, #9
 800f174:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d01c      	beq.n	800f1b6 <validate+0x4e>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d018      	beq.n	800f1b6 <validate+0x4e>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d013      	beq.n	800f1b6 <validate+0x4e>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	889a      	ldrh	r2, [r3, #4]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	88db      	ldrh	r3, [r3, #6]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d10c      	bne.n	800f1b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	785b      	ldrb	r3, [r3, #1]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fd fd0e 	bl	800cbc4 <disk_status>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d101      	bne.n	800f1b6 <validate+0x4e>
			res = FR_OK;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f1b6:	7bfb      	ldrb	r3, [r7, #15]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d102      	bne.n	800f1c2 <validate+0x5a>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	e000      	b.n	800f1c4 <validate+0x5c>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	683a      	ldr	r2, [r7, #0]
 800f1c6:	6013      	str	r3, [r2, #0]
	return res;
 800f1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3710      	adds	r7, #16
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	bd80      	pop	{r7, pc}
	...

0800f1d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b088      	sub	sp, #32
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f1e6:	f107 0310 	add.w	r3, r7, #16
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7ff fccf 	bl	800eb8e <get_ldnumber>
 800f1f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	da01      	bge.n	800f1fc <f_mount+0x28>
 800f1f8:	230b      	movs	r3, #11
 800f1fa:	e02b      	b.n	800f254 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f1fc:	4a17      	ldr	r2, [pc, #92]	; (800f25c <f_mount+0x88>)
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f204:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d005      	beq.n	800f218 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f20c:	69b8      	ldr	r0, [r7, #24]
 800f20e:	f7fd ffbf 	bl	800d190 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	2200      	movs	r2, #0
 800f216:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d002      	beq.n	800f224 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2200      	movs	r2, #0
 800f222:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	490d      	ldr	r1, [pc, #52]	; (800f25c <f_mount+0x88>)
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <f_mount+0x66>
 800f234:	79fb      	ldrb	r3, [r7, #7]
 800f236:	2b01      	cmp	r3, #1
 800f238:	d001      	beq.n	800f23e <f_mount+0x6a>
 800f23a:	2300      	movs	r3, #0
 800f23c:	e00a      	b.n	800f254 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f23e:	f107 010c 	add.w	r1, r7, #12
 800f242:	f107 0308 	add.w	r3, r7, #8
 800f246:	2200      	movs	r2, #0
 800f248:	4618      	mov	r0, r3
 800f24a:	f7ff fd3b 	bl	800ecc4 <find_volume>
 800f24e:	4603      	mov	r3, r0
 800f250:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f252:	7dfb      	ldrb	r3, [r7, #23]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3720      	adds	r7, #32
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	20001c3c 	.word	0x20001c3c

0800f260 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b09a      	sub	sp, #104	; 0x68
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	60b9      	str	r1, [r7, #8]
 800f26a:	4613      	mov	r3, r2
 800f26c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d101      	bne.n	800f278 <f_open+0x18>
 800f274:	2309      	movs	r3, #9
 800f276:	e1ad      	b.n	800f5d4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f278:	79fb      	ldrb	r3, [r7, #7]
 800f27a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f27e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f280:	79fa      	ldrb	r2, [r7, #7]
 800f282:	f107 0110 	add.w	r1, r7, #16
 800f286:	f107 0308 	add.w	r3, r7, #8
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff fd1a 	bl	800ecc4 <find_volume>
 800f290:	4603      	mov	r3, r0
 800f292:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f296:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f040 8191 	bne.w	800f5c2 <f_open+0x362>
		dj.obj.fs = fs;
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f2a4:	68ba      	ldr	r2, [r7, #8]
 800f2a6:	f107 0314 	add.w	r3, r7, #20
 800f2aa:	4611      	mov	r1, r2
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7ff fbfd 	bl	800eaac <follow_path>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f2b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d11a      	bne.n	800f2f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f2c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f2c4:	b25b      	sxtb	r3, r3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	da03      	bge.n	800f2d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f2ca:	2306      	movs	r3, #6
 800f2cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f2d0:	e011      	b.n	800f2f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f2d2:	79fb      	ldrb	r3, [r7, #7]
 800f2d4:	f023 0301 	bic.w	r3, r3, #1
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	bf14      	ite	ne
 800f2dc:	2301      	movne	r3, #1
 800f2de:	2300      	moveq	r3, #0
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	f107 0314 	add.w	r3, r7, #20
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fd fe08 	bl	800cf00 <chk_lock>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f2f6:	79fb      	ldrb	r3, [r7, #7]
 800f2f8:	f003 031c 	and.w	r3, r3, #28
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d07f      	beq.n	800f400 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f300:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f304:	2b00      	cmp	r3, #0
 800f306:	d017      	beq.n	800f338 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f308:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f30c:	2b04      	cmp	r3, #4
 800f30e:	d10e      	bne.n	800f32e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f310:	f7fd fe52 	bl	800cfb8 <enq_lock>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d006      	beq.n	800f328 <f_open+0xc8>
 800f31a:	f107 0314 	add.w	r3, r7, #20
 800f31e:	4618      	mov	r0, r3
 800f320:	f7ff f836 	bl	800e390 <dir_register>
 800f324:	4603      	mov	r3, r0
 800f326:	e000      	b.n	800f32a <f_open+0xca>
 800f328:	2312      	movs	r3, #18
 800f32a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f32e:	79fb      	ldrb	r3, [r7, #7]
 800f330:	f043 0308 	orr.w	r3, r3, #8
 800f334:	71fb      	strb	r3, [r7, #7]
 800f336:	e010      	b.n	800f35a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f338:	7ebb      	ldrb	r3, [r7, #26]
 800f33a:	f003 0311 	and.w	r3, r3, #17
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d003      	beq.n	800f34a <f_open+0xea>
					res = FR_DENIED;
 800f342:	2307      	movs	r3, #7
 800f344:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f348:	e007      	b.n	800f35a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f34a:	79fb      	ldrb	r3, [r7, #7]
 800f34c:	f003 0304 	and.w	r3, r3, #4
 800f350:	2b00      	cmp	r3, #0
 800f352:	d002      	beq.n	800f35a <f_open+0xfa>
 800f354:	2308      	movs	r3, #8
 800f356:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f35a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d168      	bne.n	800f434 <f_open+0x1d4>
 800f362:	79fb      	ldrb	r3, [r7, #7]
 800f364:	f003 0308 	and.w	r3, r3, #8
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d063      	beq.n	800f434 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f36c:	f7f3 fa9a 	bl	80028a4 <get_fattime>
 800f370:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f374:	330e      	adds	r3, #14
 800f376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f378:	4618      	mov	r0, r3
 800f37a:	f7fd fd17 	bl	800cdac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f380:	3316      	adds	r3, #22
 800f382:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f384:	4618      	mov	r0, r3
 800f386:	f7fd fd11 	bl	800cdac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f38c:	330b      	adds	r3, #11
 800f38e:	2220      	movs	r2, #32
 800f390:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f396:	4611      	mov	r1, r2
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fe fc65 	bl	800dc68 <ld_clust>
 800f39e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fe fc7d 	bl	800dca6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ae:	331c      	adds	r3, #28
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fd fcfa 	bl	800cdac <st_dword>
					fs->wflag = 1;
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f3be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d037      	beq.n	800f434 <f_open+0x1d4>
						dw = fs->winsect;
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f3ca:	f107 0314 	add.w	r3, r7, #20
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fe f990 	bl	800d6f8 <remove_chain>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f3de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d126      	bne.n	800f434 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fd ff38 	bl	800d260 <move_window>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f3fa:	3a01      	subs	r2, #1
 800f3fc:	611a      	str	r2, [r3, #16]
 800f3fe:	e019      	b.n	800f434 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f400:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f404:	2b00      	cmp	r3, #0
 800f406:	d115      	bne.n	800f434 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f408:	7ebb      	ldrb	r3, [r7, #26]
 800f40a:	f003 0310 	and.w	r3, r3, #16
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d003      	beq.n	800f41a <f_open+0x1ba>
					res = FR_NO_FILE;
 800f412:	2304      	movs	r3, #4
 800f414:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f418:	e00c      	b.n	800f434 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f41a:	79fb      	ldrb	r3, [r7, #7]
 800f41c:	f003 0302 	and.w	r3, r3, #2
 800f420:	2b00      	cmp	r3, #0
 800f422:	d007      	beq.n	800f434 <f_open+0x1d4>
 800f424:	7ebb      	ldrb	r3, [r7, #26]
 800f426:	f003 0301 	and.w	r3, r3, #1
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d002      	beq.n	800f434 <f_open+0x1d4>
						res = FR_DENIED;
 800f42e:	2307      	movs	r3, #7
 800f430:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f434:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d128      	bne.n	800f48e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f43c:	79fb      	ldrb	r3, [r7, #7]
 800f43e:	f003 0308 	and.w	r3, r3, #8
 800f442:	2b00      	cmp	r3, #0
 800f444:	d003      	beq.n	800f44e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f446:	79fb      	ldrb	r3, [r7, #7]
 800f448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f44c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f45c:	79fb      	ldrb	r3, [r7, #7]
 800f45e:	f023 0301 	bic.w	r3, r3, #1
 800f462:	2b00      	cmp	r3, #0
 800f464:	bf14      	ite	ne
 800f466:	2301      	movne	r3, #1
 800f468:	2300      	moveq	r3, #0
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	461a      	mov	r2, r3
 800f46e:	f107 0314 	add.w	r3, r7, #20
 800f472:	4611      	mov	r1, r2
 800f474:	4618      	mov	r0, r3
 800f476:	f7fd fdc1 	bl	800cffc <inc_lock>
 800f47a:	4602      	mov	r2, r0
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	691b      	ldr	r3, [r3, #16]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d102      	bne.n	800f48e <f_open+0x22e>
 800f488:	2302      	movs	r3, #2
 800f48a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f48e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f492:	2b00      	cmp	r3, #0
 800f494:	f040 8095 	bne.w	800f5c2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f49c:	4611      	mov	r1, r2
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fbe2 	bl	800dc68 <ld_clust>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ac:	331c      	adds	r3, #28
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fd fc3e 	bl	800cd30 <ld_dword>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	88da      	ldrh	r2, [r3, #6]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	79fa      	ldrb	r2, [r7, #7]
 800f4d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	3330      	adds	r3, #48	; 0x30
 800f4ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f4ee:	2100      	movs	r1, #0
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fd fca8 	bl	800ce46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	f003 0320 	and.w	r3, r3, #32
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d060      	beq.n	800f5c2 <f_open+0x362>
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d05c      	beq.n	800f5c2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	68da      	ldr	r2, [r3, #12]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	895b      	ldrh	r3, [r3, #10]
 800f514:	031b      	lsls	r3, r3, #12
 800f516:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f524:	e016      	b.n	800f554 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fd ff53 	bl	800d3d6 <get_fat>
 800f530:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800f532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f534:	2b01      	cmp	r3, #1
 800f536:	d802      	bhi.n	800f53e <f_open+0x2de>
 800f538:	2302      	movs	r3, #2
 800f53a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f53e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f544:	d102      	bne.n	800f54c <f_open+0x2ec>
 800f546:	2301      	movs	r3, #1
 800f548:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f54c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f554:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d103      	bne.n	800f564 <f_open+0x304>
 800f55c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f560:	429a      	cmp	r2, r3
 800f562:	d8e0      	bhi.n	800f526 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f568:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f56a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d127      	bne.n	800f5c2 <f_open+0x362>
 800f572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d022      	beq.n	800f5c2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f580:	4618      	mov	r0, r3
 800f582:	f7fd ff09 	bl	800d398 <clust2sect>
 800f586:	64f8      	str	r0, [r7, #76]	; 0x4c
 800f588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d103      	bne.n	800f596 <f_open+0x336>
						res = FR_INT_ERR;
 800f58e:	2302      	movs	r3, #2
 800f590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f594:	e015      	b.n	800f5c2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f598:	0b1a      	lsrs	r2, r3, #12
 800f59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59c:	441a      	add	r2, r3
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	7858      	ldrb	r0, [r3, #1]
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	6a1a      	ldr	r2, [r3, #32]
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	f7fd fb47 	bl	800cc44 <disk_read>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d002      	beq.n	800f5c2 <f_open+0x362>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f5c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d002      	beq.n	800f5d0 <f_open+0x370>
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f5d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3768      	adds	r7, #104	; 0x68
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08e      	sub	sp, #56	; 0x38
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	f107 0214 	add.w	r2, r7, #20
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff fdb3 	bl	800f168 <validate>
 800f602:	4603      	mov	r3, r0
 800f604:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d107      	bne.n	800f620 <f_read+0x44>
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	7d5b      	ldrb	r3, [r3, #21]
 800f614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d002      	beq.n	800f626 <f_read+0x4a>
 800f620:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f624:	e115      	b.n	800f852 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	7d1b      	ldrb	r3, [r3, #20]
 800f62a:	f003 0301 	and.w	r3, r3, #1
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d101      	bne.n	800f636 <f_read+0x5a>
 800f632:	2307      	movs	r3, #7
 800f634:	e10d      	b.n	800f852 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	68da      	ldr	r2, [r3, #12]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	699b      	ldr	r3, [r3, #24]
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	6a3b      	ldr	r3, [r7, #32]
 800f646:	429a      	cmp	r2, r3
 800f648:	f240 80fe 	bls.w	800f848 <f_read+0x26c>
 800f64c:	6a3b      	ldr	r3, [r7, #32]
 800f64e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f650:	e0fa      	b.n	800f848 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	699b      	ldr	r3, [r3, #24]
 800f656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f040 80c6 	bne.w	800f7ec <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	699b      	ldr	r3, [r3, #24]
 800f664:	0b1b      	lsrs	r3, r3, #12
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	8952      	ldrh	r2, [r2, #10]
 800f66a:	3a01      	subs	r2, #1
 800f66c:	4013      	ands	r3, r2
 800f66e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f670:	69fb      	ldr	r3, [r7, #28]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d12f      	bne.n	800f6d6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	699b      	ldr	r3, [r3, #24]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d103      	bne.n	800f686 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	633b      	str	r3, [r7, #48]	; 0x30
 800f684:	e013      	b.n	800f6ae <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d007      	beq.n	800f69e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	699b      	ldr	r3, [r3, #24]
 800f692:	4619      	mov	r1, r3
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f7fe f92c 	bl	800d8f2 <clmt_clust>
 800f69a:	6338      	str	r0, [r7, #48]	; 0x30
 800f69c:	e007      	b.n	800f6ae <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f69e:	68fa      	ldr	r2, [r7, #12]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	69db      	ldr	r3, [r3, #28]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4610      	mov	r0, r2
 800f6a8:	f7fd fe95 	bl	800d3d6 <get_fat>
 800f6ac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d804      	bhi.n	800f6be <f_read+0xe2>
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2202      	movs	r2, #2
 800f6b8:	755a      	strb	r2, [r3, #21]
 800f6ba:	2302      	movs	r3, #2
 800f6bc:	e0c9      	b.n	800f852 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6c4:	d104      	bne.n	800f6d0 <f_read+0xf4>
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	755a      	strb	r2, [r3, #21]
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e0c0      	b.n	800f852 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f6d6:	697a      	ldr	r2, [r7, #20]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	69db      	ldr	r3, [r3, #28]
 800f6dc:	4619      	mov	r1, r3
 800f6de:	4610      	mov	r0, r2
 800f6e0:	f7fd fe5a 	bl	800d398 <clust2sect>
 800f6e4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d104      	bne.n	800f6f6 <f_read+0x11a>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	2202      	movs	r2, #2
 800f6f0:	755a      	strb	r2, [r3, #21]
 800f6f2:	2302      	movs	r3, #2
 800f6f4:	e0ad      	b.n	800f852 <f_read+0x276>
			sect += csect;
 800f6f6:	69ba      	ldr	r2, [r7, #24]
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	0b1b      	lsrs	r3, r3, #12
 800f702:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f706:	2b00      	cmp	r3, #0
 800f708:	d039      	beq.n	800f77e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f70a:	69fa      	ldr	r2, [r7, #28]
 800f70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70e:	4413      	add	r3, r2
 800f710:	697a      	ldr	r2, [r7, #20]
 800f712:	8952      	ldrh	r2, [r2, #10]
 800f714:	4293      	cmp	r3, r2
 800f716:	d905      	bls.n	800f724 <f_read+0x148>
					cc = fs->csize - csect;
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	895b      	ldrh	r3, [r3, #10]
 800f71c:	461a      	mov	r2, r3
 800f71e:	69fb      	ldr	r3, [r7, #28]
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	7858      	ldrb	r0, [r3, #1]
 800f728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f72a:	69ba      	ldr	r2, [r7, #24]
 800f72c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f72e:	f7fd fa89 	bl	800cc44 <disk_read>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d004      	beq.n	800f742 <f_read+0x166>
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2201      	movs	r2, #1
 800f73c:	755a      	strb	r2, [r3, #21]
 800f73e:	2301      	movs	r3, #1
 800f740:	e087      	b.n	800f852 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	7d1b      	ldrb	r3, [r3, #20]
 800f746:	b25b      	sxtb	r3, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	da14      	bge.n	800f776 <f_read+0x19a>
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	6a1a      	ldr	r2, [r3, #32]
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	1ad3      	subs	r3, r2, r3
 800f754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f756:	429a      	cmp	r2, r3
 800f758:	d90d      	bls.n	800f776 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6a1a      	ldr	r2, [r3, #32]
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	1ad3      	subs	r3, r2, r3
 800f762:	031b      	lsls	r3, r3, #12
 800f764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f766:	18d0      	adds	r0, r2, r3
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	3330      	adds	r3, #48	; 0x30
 800f76c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f770:	4619      	mov	r1, r3
 800f772:	f7fd fb47 	bl	800ce04 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f778:	031b      	lsls	r3, r3, #12
 800f77a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f77c:	e050      	b.n	800f820 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	6a1b      	ldr	r3, [r3, #32]
 800f782:	69ba      	ldr	r2, [r7, #24]
 800f784:	429a      	cmp	r2, r3
 800f786:	d02e      	beq.n	800f7e6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	7d1b      	ldrb	r3, [r3, #20]
 800f78c:	b25b      	sxtb	r3, r3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	da18      	bge.n	800f7c4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	7858      	ldrb	r0, [r3, #1]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	6a1a      	ldr	r2, [r3, #32]
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	f7fd fa6f 	bl	800cc84 <disk_write>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d004      	beq.n	800f7b6 <f_read+0x1da>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	755a      	strb	r2, [r3, #21]
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	e04d      	b.n	800f852 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	7d1b      	ldrb	r3, [r3, #20]
 800f7ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	7858      	ldrb	r0, [r3, #1]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	69ba      	ldr	r2, [r7, #24]
 800f7d2:	f7fd fa37 	bl	800cc44 <disk_read>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d004      	beq.n	800f7e6 <f_read+0x20a>
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	755a      	strb	r2, [r3, #21]
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	e035      	b.n	800f852 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	69ba      	ldr	r2, [r7, #24]
 800f7ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	699b      	ldr	r3, [r3, #24]
 800f7f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f7f4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800f7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d901      	bls.n	800f806 <f_read+0x22a>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	699b      	ldr	r3, [r3, #24]
 800f810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f814:	4413      	add	r3, r2
 800f816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f818:	4619      	mov	r1, r3
 800f81a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f81c:	f7fd faf2 	bl	800ce04 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	4413      	add	r3, r2
 800f826:	627b      	str	r3, [r7, #36]	; 0x24
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	699a      	ldr	r2, [r3, #24]
 800f82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82e:	441a      	add	r2, r3
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	619a      	str	r2, [r3, #24]
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	681a      	ldr	r2, [r3, #0]
 800f838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83a:	441a      	add	r2, r3
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	601a      	str	r2, [r3, #0]
 800f840:	687a      	ldr	r2, [r7, #4]
 800f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f47f af01 	bne.w	800f652 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f850:	2300      	movs	r3, #0
}
 800f852:	4618      	mov	r0, r3
 800f854:	3738      	adds	r7, #56	; 0x38
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}

0800f85a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f85a:	b580      	push	{r7, lr}
 800f85c:	b08c      	sub	sp, #48	; 0x30
 800f85e:	af00      	add	r7, sp, #0
 800f860:	60f8      	str	r0, [r7, #12]
 800f862:	60b9      	str	r1, [r7, #8]
 800f864:	607a      	str	r2, [r7, #4]
 800f866:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	2200      	movs	r2, #0
 800f870:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	f107 0210 	add.w	r2, r7, #16
 800f878:	4611      	mov	r1, r2
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7ff fc74 	bl	800f168 <validate>
 800f880:	4603      	mov	r3, r0
 800f882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d107      	bne.n	800f89e <f_write+0x44>
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	7d5b      	ldrb	r3, [r3, #21]
 800f892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d002      	beq.n	800f8a4 <f_write+0x4a>
 800f89e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8a2:	e14b      	b.n	800fb3c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	7d1b      	ldrb	r3, [r3, #20]
 800f8a8:	f003 0302 	and.w	r3, r3, #2
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d101      	bne.n	800f8b4 <f_write+0x5a>
 800f8b0:	2307      	movs	r3, #7
 800f8b2:	e143      	b.n	800fb3c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	699a      	ldr	r2, [r3, #24]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	441a      	add	r2, r3
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	f080 812d 	bcs.w	800fb20 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	43db      	mvns	r3, r3
 800f8cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f8ce:	e127      	b.n	800fb20 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	699b      	ldr	r3, [r3, #24]
 800f8d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	f040 80e3 	bne.w	800faa4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	699b      	ldr	r3, [r3, #24]
 800f8e2:	0b1b      	lsrs	r3, r3, #12
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	8952      	ldrh	r2, [r2, #10]
 800f8e8:	3a01      	subs	r2, #1
 800f8ea:	4013      	ands	r3, r2
 800f8ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d143      	bne.n	800f97c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	699b      	ldr	r3, [r3, #24]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d10c      	bne.n	800f916 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f904:	2b00      	cmp	r3, #0
 800f906:	d11a      	bne.n	800f93e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2100      	movs	r1, #0
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fd ff58 	bl	800d7c2 <create_chain>
 800f912:	62b8      	str	r0, [r7, #40]	; 0x28
 800f914:	e013      	b.n	800f93e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d007      	beq.n	800f92e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	699b      	ldr	r3, [r3, #24]
 800f922:	4619      	mov	r1, r3
 800f924:	68f8      	ldr	r0, [r7, #12]
 800f926:	f7fd ffe4 	bl	800d8f2 <clmt_clust>
 800f92a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f92c:	e007      	b.n	800f93e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f92e:	68fa      	ldr	r2, [r7, #12]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	69db      	ldr	r3, [r3, #28]
 800f934:	4619      	mov	r1, r3
 800f936:	4610      	mov	r0, r2
 800f938:	f7fd ff43 	bl	800d7c2 <create_chain>
 800f93c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f940:	2b00      	cmp	r3, #0
 800f942:	f000 80f2 	beq.w	800fb2a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d104      	bne.n	800f956 <f_write+0xfc>
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2202      	movs	r2, #2
 800f950:	755a      	strb	r2, [r3, #21]
 800f952:	2302      	movs	r3, #2
 800f954:	e0f2      	b.n	800fb3c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f95c:	d104      	bne.n	800f968 <f_write+0x10e>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2201      	movs	r2, #1
 800f962:	755a      	strb	r2, [r3, #21]
 800f964:	2301      	movs	r3, #1
 800f966:	e0e9      	b.n	800fb3c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f96c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d102      	bne.n	800f97c <f_write+0x122>
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f97a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	7d1b      	ldrb	r3, [r3, #20]
 800f980:	b25b      	sxtb	r3, r3
 800f982:	2b00      	cmp	r3, #0
 800f984:	da18      	bge.n	800f9b8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	7858      	ldrb	r0, [r3, #1]
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	6a1a      	ldr	r2, [r3, #32]
 800f994:	2301      	movs	r3, #1
 800f996:	f7fd f975 	bl	800cc84 <disk_write>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d004      	beq.n	800f9aa <f_write+0x150>
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	755a      	strb	r2, [r3, #21]
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	e0c8      	b.n	800fb3c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	7d1b      	ldrb	r3, [r3, #20]
 800f9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f9b8:	693a      	ldr	r2, [r7, #16]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	69db      	ldr	r3, [r3, #28]
 800f9be:	4619      	mov	r1, r3
 800f9c0:	4610      	mov	r0, r2
 800f9c2:	f7fd fce9 	bl	800d398 <clust2sect>
 800f9c6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d104      	bne.n	800f9d8 <f_write+0x17e>
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2202      	movs	r2, #2
 800f9d2:	755a      	strb	r2, [r3, #21]
 800f9d4:	2302      	movs	r3, #2
 800f9d6:	e0b1      	b.n	800fb3c <f_write+0x2e2>
			sect += csect;
 800f9d8:	697a      	ldr	r2, [r7, #20]
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	4413      	add	r3, r2
 800f9de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	0b1b      	lsrs	r3, r3, #12
 800f9e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d03c      	beq.n	800fa66 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f9ec:	69ba      	ldr	r2, [r7, #24]
 800f9ee:	6a3b      	ldr	r3, [r7, #32]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	693a      	ldr	r2, [r7, #16]
 800f9f4:	8952      	ldrh	r2, [r2, #10]
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d905      	bls.n	800fa06 <f_write+0x1ac>
					cc = fs->csize - csect;
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	895b      	ldrh	r3, [r3, #10]
 800f9fe:	461a      	mov	r2, r3
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	1ad3      	subs	r3, r2, r3
 800fa04:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	7858      	ldrb	r0, [r3, #1]
 800fa0a:	6a3b      	ldr	r3, [r7, #32]
 800fa0c:	697a      	ldr	r2, [r7, #20]
 800fa0e:	69f9      	ldr	r1, [r7, #28]
 800fa10:	f7fd f938 	bl	800cc84 <disk_write>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d004      	beq.n	800fa24 <f_write+0x1ca>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	755a      	strb	r2, [r3, #21]
 800fa20:	2301      	movs	r3, #1
 800fa22:	e08b      	b.n	800fb3c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	6a1a      	ldr	r2, [r3, #32]
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	6a3a      	ldr	r2, [r7, #32]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d915      	bls.n	800fa5e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	6a1a      	ldr	r2, [r3, #32]
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	031b      	lsls	r3, r3, #12
 800fa42:	69fa      	ldr	r2, [r7, #28]
 800fa44:	4413      	add	r3, r2
 800fa46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	f7fd f9da 	bl	800ce04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	7d1b      	ldrb	r3, [r3, #20]
 800fa54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa58:	b2da      	uxtb	r2, r3
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fa5e:	6a3b      	ldr	r3, [r7, #32]
 800fa60:	031b      	lsls	r3, r3, #12
 800fa62:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fa64:	e03f      	b.n	800fae6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	697a      	ldr	r2, [r7, #20]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d016      	beq.n	800fa9e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	699a      	ldr	r2, [r3, #24]
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d210      	bcs.n	800fa9e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	7858      	ldrb	r0, [r3, #1]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa86:	2301      	movs	r3, #1
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	f7fd f8db 	bl	800cc44 <disk_read>
 800fa8e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d004      	beq.n	800fa9e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	2201      	movs	r2, #1
 800fa98:	755a      	strb	r2, [r3, #21]
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e04e      	b.n	800fb3c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	697a      	ldr	r2, [r7, #20]
 800faa2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	699b      	ldr	r3, [r3, #24]
 800faa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800faac:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fab0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d901      	bls.n	800fabe <f_write+0x264>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	699b      	ldr	r3, [r3, #24]
 800fac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800facc:	4413      	add	r3, r2
 800face:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fad0:	69f9      	ldr	r1, [r7, #28]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fd f996 	bl	800ce04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	7d1b      	ldrb	r3, [r3, #20]
 800fadc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fae0:	b2da      	uxtb	r2, r3
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fae6:	69fa      	ldr	r2, [r7, #28]
 800fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faea:	4413      	add	r3, r2
 800faec:	61fb      	str	r3, [r7, #28]
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	699a      	ldr	r2, [r3, #24]
 800faf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf4:	441a      	add	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	619a      	str	r2, [r3, #24]
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	68da      	ldr	r2, [r3, #12]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	699b      	ldr	r3, [r3, #24]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	bf38      	it	cc
 800fb06:	461a      	movcc	r2, r3
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	60da      	str	r2, [r3, #12]
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	681a      	ldr	r2, [r3, #0]
 800fb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb12:	441a      	add	r2, r3
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	601a      	str	r2, [r3, #0]
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb1c:	1ad3      	subs	r3, r2, r3
 800fb1e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f47f aed4 	bne.w	800f8d0 <f_write+0x76>
 800fb28:	e000      	b.n	800fb2c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fb2a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	7d1b      	ldrb	r3, [r3, #20]
 800fb30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fb3a:	2300      	movs	r3, #0
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3730      	adds	r7, #48	; 0x30
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b086      	sub	sp, #24
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f107 0208 	add.w	r2, r7, #8
 800fb52:	4611      	mov	r1, r2
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7ff fb07 	bl	800f168 <validate>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb5e:	7dfb      	ldrb	r3, [r7, #23]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d168      	bne.n	800fc36 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	7d1b      	ldrb	r3, [r3, #20]
 800fb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d062      	beq.n	800fc36 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	7d1b      	ldrb	r3, [r3, #20]
 800fb74:	b25b      	sxtb	r3, r3
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	da15      	bge.n	800fba6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	7858      	ldrb	r0, [r3, #1]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6a1a      	ldr	r2, [r3, #32]
 800fb88:	2301      	movs	r3, #1
 800fb8a:	f7fd f87b 	bl	800cc84 <disk_write>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d001      	beq.n	800fb98 <f_sync+0x54>
 800fb94:	2301      	movs	r3, #1
 800fb96:	e04f      	b.n	800fc38 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	7d1b      	ldrb	r3, [r3, #20]
 800fb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fba0:	b2da      	uxtb	r2, r3
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fba6:	f7f2 fe7d 	bl	80028a4 <get_fattime>
 800fbaa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fbac:	68ba      	ldr	r2, [r7, #8]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	4610      	mov	r0, r2
 800fbb6:	f7fd fb53 	bl	800d260 <move_window>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fbbe:	7dfb      	ldrb	r3, [r7, #23]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d138      	bne.n	800fc36 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbc8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	330b      	adds	r3, #11
 800fbce:	781a      	ldrb	r2, [r3, #0]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	330b      	adds	r3, #11
 800fbd4:	f042 0220 	orr.w	r2, r2, #32
 800fbd8:	b2d2      	uxtb	r2, r2
 800fbda:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6818      	ldr	r0, [r3, #0]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	689b      	ldr	r3, [r3, #8]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	68f9      	ldr	r1, [r7, #12]
 800fbe8:	f7fe f85d 	bl	800dca6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	f103 021c 	add.w	r2, r3, #28
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	f7fd f8d7 	bl	800cdac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	3316      	adds	r3, #22
 800fc02:	6939      	ldr	r1, [r7, #16]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fd f8d1 	bl	800cdac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	3312      	adds	r3, #18
 800fc0e:	2100      	movs	r1, #0
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7fd f8b0 	bl	800cd76 <st_word>
					fs->wflag = 1;
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	2201      	movs	r2, #1
 800fc1a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fd fb4c 	bl	800d2bc <sync_fs>
 800fc24:	4603      	mov	r3, r0
 800fc26:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	7d1b      	ldrb	r3, [r3, #20]
 800fc2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc30:	b2da      	uxtb	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fc36:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3718      	adds	r7, #24
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7ff ff7b 	bl	800fb44 <f_sync>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fc52:	7bfb      	ldrb	r3, [r7, #15]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d118      	bne.n	800fc8a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f107 0208 	add.w	r2, r7, #8
 800fc5e:	4611      	mov	r1, r2
 800fc60:	4618      	mov	r0, r3
 800fc62:	f7ff fa81 	bl	800f168 <validate>
 800fc66:	4603      	mov	r3, r0
 800fc68:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10c      	bne.n	800fc8a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	691b      	ldr	r3, [r3, #16]
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7fd fa4f 	bl	800d118 <dec_lock>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fc7e:	7bfb      	ldrb	r3, [r7, #15]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d102      	bne.n	800fc8a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fc8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3710      	adds	r7, #16
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b086      	sub	sp, #24
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d101      	bne.n	800fca8 <f_opendir+0x14>
 800fca4:	2309      	movs	r3, #9
 800fca6:	e064      	b.n	800fd72 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800fcac:	f107 010c 	add.w	r1, r7, #12
 800fcb0:	463b      	mov	r3, r7
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f7ff f805 	bl	800ecc4 <find_volume>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fcbe:	7dfb      	ldrb	r3, [r7, #23]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d14f      	bne.n	800fd64 <f_opendir+0xd0>
		obj->fs = fs;
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	4619      	mov	r1, r3
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7fe feec 	bl	800eaac <follow_path>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800fcd8:	7dfb      	ldrb	r3, [r7, #23]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d13d      	bne.n	800fd5a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fce4:	b25b      	sxtb	r3, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	db12      	blt.n	800fd10 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	799b      	ldrb	r3, [r3, #6]
 800fcee:	f003 0310 	and.w	r3, r3, #16
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00a      	beq.n	800fd0c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6a1b      	ldr	r3, [r3, #32]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	4610      	mov	r0, r2
 800fd00:	f7fd ffb2 	bl	800dc68 <ld_clust>
 800fd04:	4602      	mov	r2, r0
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	609a      	str	r2, [r3, #8]
 800fd0a:	e001      	b.n	800fd10 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800fd0c:	2305      	movs	r3, #5
 800fd0e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800fd10:	7dfb      	ldrb	r3, [r7, #23]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d121      	bne.n	800fd5a <f_opendir+0xc6>
				obj->id = fs->id;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	88da      	ldrh	r2, [r3, #6]
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fd1e:	2100      	movs	r1, #0
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f7fd fe1a 	bl	800d95a <dir_sdi>
 800fd26:	4603      	mov	r3, r0
 800fd28:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800fd2a:	7dfb      	ldrb	r3, [r7, #23]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d114      	bne.n	800fd5a <f_opendir+0xc6>
					if (obj->sclust) {
 800fd30:	693b      	ldr	r3, [r7, #16]
 800fd32:	689b      	ldr	r3, [r3, #8]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00d      	beq.n	800fd54 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fd38:	2100      	movs	r1, #0
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f7fd f95e 	bl	800cffc <inc_lock>
 800fd40:	4602      	mov	r2, r0
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d105      	bne.n	800fd5a <f_opendir+0xc6>
 800fd4e:	2312      	movs	r3, #18
 800fd50:	75fb      	strb	r3, [r7, #23]
 800fd52:	e002      	b.n	800fd5a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	2200      	movs	r2, #0
 800fd58:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fd5a:	7dfb      	ldrb	r3, [r7, #23]
 800fd5c:	2b04      	cmp	r3, #4
 800fd5e:	d101      	bne.n	800fd64 <f_opendir+0xd0>
 800fd60:	2305      	movs	r3, #5
 800fd62:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fd64:	7dfb      	ldrb	r3, [r7, #23]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d002      	beq.n	800fd70 <f_opendir+0xdc>
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fd70:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3718      	adds	r7, #24
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}

0800fd7a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800fd7a:	b580      	push	{r7, lr}
 800fd7c:	b084      	sub	sp, #16
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	6078      	str	r0, [r7, #4]
 800fd82:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f107 0208 	add.w	r2, r7, #8
 800fd8a:	4611      	mov	r1, r2
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff f9eb 	bl	800f168 <validate>
 800fd92:	4603      	mov	r3, r0
 800fd94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd96:	7bfb      	ldrb	r3, [r7, #15]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d126      	bne.n	800fdea <f_readdir+0x70>
		if (!fno) {
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d106      	bne.n	800fdb0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fda2:	2100      	movs	r1, #0
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f7fd fdd8 	bl	800d95a <dir_sdi>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	73fb      	strb	r3, [r7, #15]
 800fdae:	e01c      	b.n	800fdea <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f7fe f985 	bl	800e0c2 <dir_read>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800fdbc:	7bfb      	ldrb	r3, [r7, #15]
 800fdbe:	2b04      	cmp	r3, #4
 800fdc0:	d101      	bne.n	800fdc6 <f_readdir+0x4c>
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800fdc6:	7bfb      	ldrb	r3, [r7, #15]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d10e      	bne.n	800fdea <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fdcc:	6839      	ldr	r1, [r7, #0]
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7fe fbd6 	bl	800e580 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f7fd fe3a 	bl	800da50 <dir_next>
 800fddc:	4603      	mov	r3, r0
 800fdde:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
 800fde2:	2b04      	cmp	r3, #4
 800fde4:	d101      	bne.n	800fdea <f_readdir+0x70>
 800fde6:	2300      	movs	r3, #0
 800fde8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800fdea:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3710      	adds	r7, #16
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}

0800fdf4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b092      	sub	sp, #72	; 0x48
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	60f8      	str	r0, [r7, #12]
 800fdfc:	60b9      	str	r1, [r7, #8]
 800fdfe:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800fe00:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800fe04:	f107 030c 	add.w	r3, r7, #12
 800fe08:	2200      	movs	r2, #0
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fe ff5a 	bl	800ecc4 <find_volume>
 800fe10:	4603      	mov	r3, r0
 800fe12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800fe16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	f040 8099 	bne.w	800ff52 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800fe20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800fe26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe28:	695a      	ldr	r2, [r3, #20]
 800fe2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2c:	699b      	ldr	r3, [r3, #24]
 800fe2e:	3b02      	subs	r3, #2
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d804      	bhi.n	800fe3e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800fe34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe36:	695a      	ldr	r2, [r3, #20]
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	601a      	str	r2, [r3, #0]
 800fe3c:	e089      	b.n	800ff52 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800fe42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d128      	bne.n	800fe9c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800fe4a:	2302      	movs	r3, #2
 800fe4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe50:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800fe52:	f107 0314 	add.w	r3, r7, #20
 800fe56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fd fabc 	bl	800d3d6 <get_fat>
 800fe5e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800fe60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe66:	d103      	bne.n	800fe70 <f_getfree+0x7c>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fe6e:	e063      	b.n	800ff38 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800fe70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d103      	bne.n	800fe7e <f_getfree+0x8a>
 800fe76:	2302      	movs	r3, #2
 800fe78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800fe7c:	e05c      	b.n	800ff38 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800fe7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d102      	bne.n	800fe8a <f_getfree+0x96>
 800fe84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe86:	3301      	adds	r3, #1
 800fe88:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800fe8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe92:	699b      	ldr	r3, [r3, #24]
 800fe94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d3db      	bcc.n	800fe52 <f_getfree+0x5e>
 800fe9a:	e04d      	b.n	800ff38 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800fe9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9e:	699b      	ldr	r3, [r3, #24]
 800fea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800fea8:	2300      	movs	r3, #0
 800feaa:	637b      	str	r3, [r7, #52]	; 0x34
 800feac:	2300      	movs	r3, #0
 800feae:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800feb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d113      	bne.n	800fede <f_getfree+0xea>
							res = move_window(fs, sect++);
 800feb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	1c5a      	adds	r2, r3, #1
 800febc:	63ba      	str	r2, [r7, #56]	; 0x38
 800febe:	4619      	mov	r1, r3
 800fec0:	f7fd f9ce 	bl	800d260 <move_window>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800feca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d131      	bne.n	800ff36 <f_getfree+0x142>
							p = fs->win;
 800fed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed4:	3334      	adds	r3, #52	; 0x34
 800fed6:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800fed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fedc:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800fede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee0:	781b      	ldrb	r3, [r3, #0]
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d10f      	bne.n	800ff06 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800fee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fee8:	f7fc ff0a 	bl	800cd00 <ld_word>
 800feec:	4603      	mov	r3, r0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d102      	bne.n	800fef8 <f_getfree+0x104>
 800fef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fef4:	3301      	adds	r3, #1
 800fef6:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800fef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefa:	3302      	adds	r3, #2
 800fefc:	633b      	str	r3, [r7, #48]	; 0x30
 800fefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff00:	3b02      	subs	r3, #2
 800ff02:	637b      	str	r3, [r7, #52]	; 0x34
 800ff04:	e010      	b.n	800ff28 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ff06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff08:	f7fc ff12 	bl	800cd30 <ld_dword>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d102      	bne.n	800ff1c <f_getfree+0x128>
 800ff16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff18:	3301      	adds	r3, #1
 800ff1a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800ff1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1e:	3304      	adds	r3, #4
 800ff20:	633b      	str	r3, [r7, #48]	; 0x30
 800ff22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff24:	3b04      	subs	r3, #4
 800ff26:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800ff28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff2a:	3b01      	subs	r3, #1
 800ff2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ff2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d1bd      	bne.n	800feb0 <f_getfree+0xbc>
 800ff34:	e000      	b.n	800ff38 <f_getfree+0x144>
							if (res != FR_OK) break;
 800ff36:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff3c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ff3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff42:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ff44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff46:	791a      	ldrb	r2, [r3, #4]
 800ff48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4a:	f042 0201 	orr.w	r2, r2, #1
 800ff4e:	b2d2      	uxtb	r2, r2
 800ff50:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ff52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3748      	adds	r7, #72	; 0x48
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
	...

0800ff60 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800ff60:	b590      	push	{r4, r7, lr}
 800ff62:	b09d      	sub	sp, #116	; 0x74
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	607a      	str	r2, [r7, #4]
 800ff6a:	603b      	str	r3, [r7, #0]
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800ff70:	2301      	movs	r3, #1
 800ff72:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800ff74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ff78:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800ff7a:	f107 030c 	add.w	r3, r7, #12
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fe fe05 	bl	800eb8e <get_ldnumber>
 800ff84:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ff86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	da02      	bge.n	800ff92 <f_mkfs+0x32>
 800ff8c:	230b      	movs	r3, #11
 800ff8e:	f000 bc0d 	b.w	80107ac <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800ff92:	4a94      	ldr	r2, [pc, #592]	; (80101e4 <f_mkfs+0x284>)
 800ff94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d005      	beq.n	800ffaa <f_mkfs+0x4a>
 800ff9e:	4a91      	ldr	r2, [pc, #580]	; (80101e4 <f_mkfs+0x284>)
 800ffa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800ffaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800ffb0:	2300      	movs	r3, #0
 800ffb2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800ffb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fc fe1c 	bl	800cbf8 <disk_initialize>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800ffc6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ffca:	f003 0301 	and.w	r3, r3, #1
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d001      	beq.n	800ffd6 <f_mkfs+0x76>
 800ffd2:	2303      	movs	r3, #3
 800ffd4:	e3ea      	b.n	80107ac <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800ffd6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ffda:	f003 0304 	and.w	r3, r3, #4
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <f_mkfs+0x86>
 800ffe2:	230a      	movs	r3, #10
 800ffe4:	e3e2      	b.n	80107ac <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800ffe6:	f107 0214 	add.w	r2, r7, #20
 800ffea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ffee:	2103      	movs	r1, #3
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7fc fe67 	bl	800ccc4 <disk_ioctl>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d10c      	bne.n	8010016 <f_mkfs+0xb6>
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d009      	beq.n	8010016 <f_mkfs+0xb6>
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010008:	d805      	bhi.n	8010016 <f_mkfs+0xb6>
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	1e5a      	subs	r2, r3, #1
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	4013      	ands	r3, r2
 8010012:	2b00      	cmp	r3, #0
 8010014:	d001      	beq.n	801001a <f_mkfs+0xba>
 8010016:	2301      	movs	r3, #1
 8010018:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 801001a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801001e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d003      	beq.n	801002e <f_mkfs+0xce>
 8010026:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	429a      	cmp	r2, r3
 801002c:	d309      	bcc.n	8010042 <f_mkfs+0xe2>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010034:	d805      	bhi.n	8010042 <f_mkfs+0xe2>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	1e5a      	subs	r2, r3, #1
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	4013      	ands	r3, r2
 801003e:	2b00      	cmp	r3, #0
 8010040:	d001      	beq.n	8010046 <f_mkfs+0xe6>
 8010042:	2313      	movs	r3, #19
 8010044:	e3b2      	b.n	80107ac <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8010046:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	fbb2 f3f3 	udiv	r3, r2, r3
 801004e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8010054:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010056:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801005a:	fbb2 f3f3 	udiv	r3, r2, r3
 801005e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8010060:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010064:	fb02 f303 	mul.w	r3, r2, r3
 8010068:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 801006a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006c:	2b00      	cmp	r3, #0
 801006e:	d101      	bne.n	8010074 <f_mkfs+0x114>
 8010070:	230e      	movs	r3, #14
 8010072:	e39b      	b.n	80107ac <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8010074:	f107 0210 	add.w	r2, r7, #16
 8010078:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801007c:	2101      	movs	r1, #1
 801007e:	4618      	mov	r0, r3
 8010080:	f7fc fe20 	bl	800ccc4 <disk_ioctl>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d001      	beq.n	801008e <f_mkfs+0x12e>
 801008a:	2301      	movs	r3, #1
 801008c:	e38e      	b.n	80107ac <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801008e:	7afb      	ldrb	r3, [r7, #11]
 8010090:	f003 0308 	and.w	r3, r3, #8
 8010094:	2b00      	cmp	r3, #0
 8010096:	d001      	beq.n	801009c <f_mkfs+0x13c>
 8010098:	2300      	movs	r3, #0
 801009a:	e000      	b.n	801009e <f_mkfs+0x13e>
 801009c:	233f      	movs	r3, #63	; 0x3f
 801009e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d901      	bls.n	80100ac <f_mkfs+0x14c>
 80100a8:	230e      	movs	r3, #14
 80100aa:	e37f      	b.n	80107ac <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 80100ac:	693a      	ldr	r2, [r7, #16]
 80100ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b0:	1ad3      	subs	r3, r2, r3
 80100b2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	2b7f      	cmp	r3, #127	; 0x7f
 80100b8:	d801      	bhi.n	80100be <f_mkfs+0x15e>
 80100ba:	230e      	movs	r3, #14
 80100bc:	e376      	b.n	80107ac <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2b80      	cmp	r3, #128	; 0x80
 80100c2:	d901      	bls.n	80100c8 <f_mkfs+0x168>
 80100c4:	2313      	movs	r3, #19
 80100c6:	e371      	b.n	80107ac <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80100c8:	7afb      	ldrb	r3, [r7, #11]
 80100ca:	f003 0302 	and.w	r3, r3, #2
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00d      	beq.n	80100ee <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80100d2:	7afb      	ldrb	r3, [r7, #11]
 80100d4:	f003 0307 	and.w	r3, r3, #7
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d004      	beq.n	80100e6 <f_mkfs+0x186>
 80100dc:	7afb      	ldrb	r3, [r7, #11]
 80100de:	f003 0301 	and.w	r3, r3, #1
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d103      	bne.n	80100ee <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80100e6:	2303      	movs	r3, #3
 80100e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80100ec:	e009      	b.n	8010102 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80100ee:	7afb      	ldrb	r3, [r7, #11]
 80100f0:	f003 0301 	and.w	r3, r3, #1
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d101      	bne.n	80100fc <f_mkfs+0x19c>
 80100f8:	2313      	movs	r3, #19
 80100fa:	e357      	b.n	80107ac <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80100fc:	2302      	movs	r3, #2
 80100fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8010106:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801010a:	2b03      	cmp	r3, #3
 801010c:	d13c      	bne.n	8010188 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 801010e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010110:	2b00      	cmp	r3, #0
 8010112:	d11b      	bne.n	801014c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	0c5b      	lsrs	r3, r3, #17
 8010118:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 801011a:	2300      	movs	r3, #0
 801011c:	64bb      	str	r3, [r7, #72]	; 0x48
 801011e:	2301      	movs	r3, #1
 8010120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010122:	e005      	b.n	8010130 <f_mkfs+0x1d0>
 8010124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010126:	3301      	adds	r3, #1
 8010128:	64bb      	str	r3, [r7, #72]	; 0x48
 801012a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801012c:	005b      	lsls	r3, r3, #1
 801012e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010130:	4a2d      	ldr	r2, [pc, #180]	; (80101e8 <f_mkfs+0x288>)
 8010132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d007      	beq.n	801014c <f_mkfs+0x1ec>
 801013c:	4a2a      	ldr	r2, [pc, #168]	; (80101e8 <f_mkfs+0x288>)
 801013e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010144:	461a      	mov	r2, r3
 8010146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010148:	4293      	cmp	r3, r2
 801014a:	d2eb      	bcs.n	8010124 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 801014c:	693a      	ldr	r2, [r7, #16]
 801014e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010150:	fbb2 f3f3 	udiv	r3, r2, r3
 8010154:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8010156:	6a3b      	ldr	r3, [r7, #32]
 8010158:	3302      	adds	r3, #2
 801015a:	009a      	lsls	r2, r3, #2
 801015c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801015e:	4413      	add	r3, r2
 8010160:	1e5a      	subs	r2, r3, #1
 8010162:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010164:	fbb2 f3f3 	udiv	r3, r2, r3
 8010168:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 801016a:	2320      	movs	r3, #32
 801016c:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 801016e:	2300      	movs	r3, #0
 8010170:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8010172:	6a3b      	ldr	r3, [r7, #32]
 8010174:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010178:	4293      	cmp	r3, r2
 801017a:	d903      	bls.n	8010184 <f_mkfs+0x224>
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	4a1b      	ldr	r2, [pc, #108]	; (80101ec <f_mkfs+0x28c>)
 8010180:	4293      	cmp	r3, r2
 8010182:	d952      	bls.n	801022a <f_mkfs+0x2ca>
 8010184:	230e      	movs	r3, #14
 8010186:	e311      	b.n	80107ac <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8010188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801018a:	2b00      	cmp	r3, #0
 801018c:	d11b      	bne.n	80101c6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	0b1b      	lsrs	r3, r3, #12
 8010192:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8010194:	2300      	movs	r3, #0
 8010196:	64bb      	str	r3, [r7, #72]	; 0x48
 8010198:	2301      	movs	r3, #1
 801019a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801019c:	e005      	b.n	80101aa <f_mkfs+0x24a>
 801019e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101a0:	3301      	adds	r3, #1
 80101a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80101a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101a6:	005b      	lsls	r3, r3, #1
 80101a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80101aa:	4a11      	ldr	r2, [pc, #68]	; (80101f0 <f_mkfs+0x290>)
 80101ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d007      	beq.n	80101c6 <f_mkfs+0x266>
 80101b6:	4a0e      	ldr	r2, [pc, #56]	; (80101f0 <f_mkfs+0x290>)
 80101b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80101be:	461a      	mov	r2, r3
 80101c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80101c2:	4293      	cmp	r3, r2
 80101c4:	d2eb      	bcs.n	801019e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80101c6:	693a      	ldr	r2, [r7, #16]
 80101c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80101ce:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80101d0:	6a3b      	ldr	r3, [r7, #32]
 80101d2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d90c      	bls.n	80101f4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80101da:	6a3b      	ldr	r3, [r7, #32]
 80101dc:	3302      	adds	r3, #2
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	663b      	str	r3, [r7, #96]	; 0x60
 80101e2:	e012      	b.n	801020a <f_mkfs+0x2aa>
 80101e4:	20001c3c 	.word	0x20001c3c
 80101e8:	080146c4 	.word	0x080146c4
 80101ec:	0ffffff5 	.word	0x0ffffff5
 80101f0:	080146d4 	.word	0x080146d4
				} else {
					fmt = FS_FAT12;
 80101f4:	2301      	movs	r3, #1
 80101f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80101fa:	6a3a      	ldr	r2, [r7, #32]
 80101fc:	4613      	mov	r3, r2
 80101fe:	005b      	lsls	r3, r3, #1
 8010200:	4413      	add	r3, r2
 8010202:	3301      	adds	r3, #1
 8010204:	085b      	lsrs	r3, r3, #1
 8010206:	3303      	adds	r3, #3
 8010208:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801020a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801020c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801020e:	4413      	add	r3, r2
 8010210:	1e5a      	subs	r2, r3, #1
 8010212:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010214:	fbb2 f3f3 	udiv	r3, r2, r3
 8010218:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 801021a:	2301      	movs	r3, #1
 801021c:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801021e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010220:	015a      	lsls	r2, r3, #5
 8010222:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010224:	fbb2 f3f3 	udiv	r3, r2, r3
 8010228:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801022a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801022c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801022e:	4413      	add	r3, r2
 8010230:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8010232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010236:	fb02 f203 	mul.w	r2, r2, r3
 801023a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801023c:	4413      	add	r3, r2
 801023e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010240:	4413      	add	r3, r2
 8010242:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8010244:	697a      	ldr	r2, [r7, #20]
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	4413      	add	r3, r2
 801024a:	1e5a      	subs	r2, r3, #1
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	425b      	negs	r3, r3
 8010250:	401a      	ands	r2, r3
 8010252:	69fb      	ldr	r3, [r7, #28]
 8010254:	1ad3      	subs	r3, r2, r3
 8010256:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8010258:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801025c:	2b03      	cmp	r3, #3
 801025e:	d108      	bne.n	8010272 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8010260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010264:	4413      	add	r3, r2
 8010266:	65bb      	str	r3, [r7, #88]	; 0x58
 8010268:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801026a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801026c:	4413      	add	r3, r2
 801026e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010270:	e006      	b.n	8010280 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8010272:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010276:	fbb2 f3f3 	udiv	r3, r2, r3
 801027a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801027c:	4413      	add	r3, r2
 801027e:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8010280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010282:	011a      	lsls	r2, r3, #4
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	441a      	add	r2, r3
 8010288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028a:	1ad2      	subs	r2, r2, r3
 801028c:	693b      	ldr	r3, [r7, #16]
 801028e:	429a      	cmp	r2, r3
 8010290:	d901      	bls.n	8010296 <f_mkfs+0x336>
 8010292:	230e      	movs	r3, #14
 8010294:	e28a      	b.n	80107ac <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8010296:	693a      	ldr	r2, [r7, #16]
 8010298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801029a:	1ad2      	subs	r2, r2, r3
 801029c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801029e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80102a0:	fb01 f303 	mul.w	r3, r1, r3
 80102a4:	1ad2      	subs	r2, r2, r3
 80102a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102a8:	1ad2      	subs	r2, r2, r3
 80102aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80102b0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 80102b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80102b6:	2b03      	cmp	r3, #3
 80102b8:	d10f      	bne.n	80102da <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80102ba:	6a3b      	ldr	r3, [r7, #32]
 80102bc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d80a      	bhi.n	80102da <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d105      	bne.n	80102d6 <f_mkfs+0x376>
 80102ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102cc:	085b      	lsrs	r3, r3, #1
 80102ce:	607b      	str	r3, [r7, #4]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d144      	bne.n	8010360 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80102d6:	230e      	movs	r3, #14
 80102d8:	e268      	b.n	80107ac <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80102da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80102de:	2b02      	cmp	r3, #2
 80102e0:	d133      	bne.n	801034a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80102e2:	6a3b      	ldr	r3, [r7, #32]
 80102e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d91e      	bls.n	801032a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d107      	bne.n	8010302 <f_mkfs+0x3a2>
 80102f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102f4:	005b      	lsls	r3, r3, #1
 80102f6:	2b40      	cmp	r3, #64	; 0x40
 80102f8:	d803      	bhi.n	8010302 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80102fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102fc:	005b      	lsls	r3, r3, #1
 80102fe:	607b      	str	r3, [r7, #4]
 8010300:	e033      	b.n	801036a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8010302:	7afb      	ldrb	r3, [r7, #11]
 8010304:	f003 0302 	and.w	r3, r3, #2
 8010308:	2b00      	cmp	r3, #0
 801030a:	d003      	beq.n	8010314 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 801030c:	2303      	movs	r3, #3
 801030e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010312:	e02a      	b.n	801036a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d105      	bne.n	8010326 <f_mkfs+0x3c6>
 801031a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801031c:	005b      	lsls	r3, r3, #1
 801031e:	607b      	str	r3, [r7, #4]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b80      	cmp	r3, #128	; 0x80
 8010324:	d91e      	bls.n	8010364 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8010326:	230e      	movs	r3, #14
 8010328:	e240      	b.n	80107ac <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801032a:	6a3b      	ldr	r3, [r7, #32]
 801032c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010330:	4293      	cmp	r3, r2
 8010332:	d80a      	bhi.n	801034a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d105      	bne.n	8010346 <f_mkfs+0x3e6>
 801033a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801033c:	005b      	lsls	r3, r3, #1
 801033e:	607b      	str	r3, [r7, #4]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2b80      	cmp	r3, #128	; 0x80
 8010344:	d910      	bls.n	8010368 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8010346:	230e      	movs	r3, #14
 8010348:	e230      	b.n	80107ac <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 801034a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801034e:	2b01      	cmp	r3, #1
 8010350:	d10c      	bne.n	801036c <f_mkfs+0x40c>
 8010352:	6a3b      	ldr	r3, [r7, #32]
 8010354:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010358:	4293      	cmp	r3, r2
 801035a:	d907      	bls.n	801036c <f_mkfs+0x40c>
 801035c:	230e      	movs	r3, #14
 801035e:	e225      	b.n	80107ac <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010360:	bf00      	nop
 8010362:	e6ce      	b.n	8010102 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010364:	bf00      	nop
 8010366:	e6cc      	b.n	8010102 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010368:	bf00      	nop
			pau = au;
 801036a:	e6ca      	b.n	8010102 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 801036c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801036e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010370:	461a      	mov	r2, r3
 8010372:	2100      	movs	r1, #0
 8010374:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010376:	f7fc fd66 	bl	800ce46 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 801037a:	220b      	movs	r2, #11
 801037c:	49bc      	ldr	r1, [pc, #752]	; (8010670 <f_mkfs+0x710>)
 801037e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010380:	f7fc fd40 	bl	800ce04 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8010384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010386:	330b      	adds	r3, #11
 8010388:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801038a:	4611      	mov	r1, r2
 801038c:	4618      	mov	r0, r3
 801038e:	f7fc fcf2 	bl	800cd76 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8010392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010394:	330d      	adds	r3, #13
 8010396:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010398:	b2d2      	uxtb	r2, r2
 801039a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 801039c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039e:	330e      	adds	r3, #14
 80103a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103a2:	b292      	uxth	r2, r2
 80103a4:	4611      	mov	r1, r2
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fc fce5 	bl	800cd76 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80103ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ae:	3310      	adds	r3, #16
 80103b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80103b2:	b2d2      	uxtb	r2, r2
 80103b4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80103b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b8:	f103 0211 	add.w	r2, r3, #17
 80103bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80103c0:	2b03      	cmp	r3, #3
 80103c2:	d002      	beq.n	80103ca <f_mkfs+0x46a>
 80103c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	e000      	b.n	80103cc <f_mkfs+0x46c>
 80103ca:	2300      	movs	r3, #0
 80103cc:	4619      	mov	r1, r3
 80103ce:	4610      	mov	r0, r2
 80103d0:	f7fc fcd1 	bl	800cd76 <st_word>
		if (sz_vol < 0x10000) {
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103da:	d208      	bcs.n	80103ee <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80103dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103de:	3313      	adds	r3, #19
 80103e0:	693a      	ldr	r2, [r7, #16]
 80103e2:	b292      	uxth	r2, r2
 80103e4:	4611      	mov	r1, r2
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7fc fcc5 	bl	800cd76 <st_word>
 80103ec:	e006      	b.n	80103fc <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80103ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f0:	3320      	adds	r3, #32
 80103f2:	693a      	ldr	r2, [r7, #16]
 80103f4:	4611      	mov	r1, r2
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fc fcd8 	bl	800cdac <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80103fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fe:	3315      	adds	r3, #21
 8010400:	22f8      	movs	r2, #248	; 0xf8
 8010402:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8010404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010406:	3318      	adds	r3, #24
 8010408:	213f      	movs	r1, #63	; 0x3f
 801040a:	4618      	mov	r0, r3
 801040c:	f7fc fcb3 	bl	800cd76 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8010410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010412:	331a      	adds	r3, #26
 8010414:	21ff      	movs	r1, #255	; 0xff
 8010416:	4618      	mov	r0, r3
 8010418:	f7fc fcad 	bl	800cd76 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801041c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801041e:	331c      	adds	r3, #28
 8010420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010422:	4618      	mov	r0, r3
 8010424:	f7fc fcc2 	bl	800cdac <st_dword>
		if (fmt == FS_FAT32) {
 8010428:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801042c:	2b03      	cmp	r3, #3
 801042e:	d131      	bne.n	8010494 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8010430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010432:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8010436:	f7f2 fa35 	bl	80028a4 <get_fattime>
 801043a:	4603      	mov	r3, r0
 801043c:	4619      	mov	r1, r3
 801043e:	4620      	mov	r0, r4
 8010440:	f7fc fcb4 	bl	800cdac <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8010444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010446:	3324      	adds	r3, #36	; 0x24
 8010448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801044a:	4618      	mov	r0, r3
 801044c:	f7fc fcae 	bl	800cdac <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8010450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010452:	332c      	adds	r3, #44	; 0x2c
 8010454:	2102      	movs	r1, #2
 8010456:	4618      	mov	r0, r3
 8010458:	f7fc fca8 	bl	800cdac <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 801045c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045e:	3330      	adds	r3, #48	; 0x30
 8010460:	2101      	movs	r1, #1
 8010462:	4618      	mov	r0, r3
 8010464:	f7fc fc87 	bl	800cd76 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	3332      	adds	r3, #50	; 0x32
 801046c:	2106      	movs	r1, #6
 801046e:	4618      	mov	r0, r3
 8010470:	f7fc fc81 	bl	800cd76 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8010474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010476:	3340      	adds	r3, #64	; 0x40
 8010478:	2280      	movs	r2, #128	; 0x80
 801047a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 801047c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047e:	3342      	adds	r3, #66	; 0x42
 8010480:	2229      	movs	r2, #41	; 0x29
 8010482:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8010484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010486:	3347      	adds	r3, #71	; 0x47
 8010488:	2213      	movs	r2, #19
 801048a:	497a      	ldr	r1, [pc, #488]	; (8010674 <f_mkfs+0x714>)
 801048c:	4618      	mov	r0, r3
 801048e:	f7fc fcb9 	bl	800ce04 <mem_cpy>
 8010492:	e020      	b.n	80104d6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8010494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010496:	f103 0427 	add.w	r4, r3, #39	; 0x27
 801049a:	f7f2 fa03 	bl	80028a4 <get_fattime>
 801049e:	4603      	mov	r3, r0
 80104a0:	4619      	mov	r1, r3
 80104a2:	4620      	mov	r0, r4
 80104a4:	f7fc fc82 	bl	800cdac <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80104a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104aa:	3316      	adds	r3, #22
 80104ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104ae:	b292      	uxth	r2, r2
 80104b0:	4611      	mov	r1, r2
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fc fc5f 	bl	800cd76 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80104b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ba:	3324      	adds	r3, #36	; 0x24
 80104bc:	2280      	movs	r2, #128	; 0x80
 80104be:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80104c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c2:	3326      	adds	r3, #38	; 0x26
 80104c4:	2229      	movs	r2, #41	; 0x29
 80104c6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80104c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ca:	332b      	adds	r3, #43	; 0x2b
 80104cc:	2213      	movs	r2, #19
 80104ce:	496a      	ldr	r1, [pc, #424]	; (8010678 <f_mkfs+0x718>)
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7fc fc97 	bl	800ce04 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80104dc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7fc fc48 	bl	800cd76 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80104e6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80104ea:	2301      	movs	r3, #1
 80104ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104f0:	f7fc fbc8 	bl	800cc84 <disk_write>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d001      	beq.n	80104fe <f_mkfs+0x59e>
 80104fa:	2301      	movs	r3, #1
 80104fc:	e156      	b.n	80107ac <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80104fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010502:	2b03      	cmp	r3, #3
 8010504:	d140      	bne.n	8010588 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8010506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010508:	1d9a      	adds	r2, r3, #6
 801050a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801050e:	2301      	movs	r3, #1
 8010510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010512:	f7fc fbb7 	bl	800cc84 <disk_write>
			mem_set(buf, 0, ss);
 8010516:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010518:	461a      	mov	r2, r3
 801051a:	2100      	movs	r1, #0
 801051c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801051e:	f7fc fc92 	bl	800ce46 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8010522:	4956      	ldr	r1, [pc, #344]	; (801067c <f_mkfs+0x71c>)
 8010524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010526:	f7fc fc41 	bl	800cdac <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801052a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801052c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010530:	4953      	ldr	r1, [pc, #332]	; (8010680 <f_mkfs+0x720>)
 8010532:	4618      	mov	r0, r3
 8010534:	f7fc fc3a 	bl	800cdac <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8010538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801053e:	6a3b      	ldr	r3, [r7, #32]
 8010540:	3b01      	subs	r3, #1
 8010542:	4619      	mov	r1, r3
 8010544:	4610      	mov	r0, r2
 8010546:	f7fc fc31 	bl	800cdac <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801054a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010550:	2102      	movs	r1, #2
 8010552:	4618      	mov	r0, r3
 8010554:	f7fc fc2a 	bl	800cdac <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8010558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801055e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010562:	4618      	mov	r0, r3
 8010564:	f7fc fc07 	bl	800cd76 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056a:	1dda      	adds	r2, r3, #7
 801056c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010570:	2301      	movs	r3, #1
 8010572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010574:	f7fc fb86 	bl	800cc84 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057a:	1c5a      	adds	r2, r3, #1
 801057c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010580:	2301      	movs	r3, #1
 8010582:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010584:	f7fc fb7e 	bl	800cc84 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801058a:	2100      	movs	r1, #0
 801058c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801058e:	f7fc fc5a 	bl	800ce46 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8010592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010594:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010596:	2300      	movs	r3, #0
 8010598:	64bb      	str	r3, [r7, #72]	; 0x48
 801059a:	e04b      	b.n	8010634 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 801059c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d113      	bne.n	80105cc <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80105a4:	f06f 0107 	mvn.w	r1, #7
 80105a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105aa:	f7fc fbff 	bl	800cdac <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	3304      	adds	r3, #4
 80105b2:	f04f 31ff 	mov.w	r1, #4294967295
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fc fbf8 	bl	800cdac <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	3308      	adds	r3, #8
 80105c0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fc fbf1 	bl	800cdac <st_dword>
 80105ca:	e00b      	b.n	80105e4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80105cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d101      	bne.n	80105d8 <f_mkfs+0x678>
 80105d4:	4b2b      	ldr	r3, [pc, #172]	; (8010684 <f_mkfs+0x724>)
 80105d6:	e001      	b.n	80105dc <f_mkfs+0x67c>
 80105d8:	f06f 0307 	mvn.w	r3, #7
 80105dc:	4619      	mov	r1, r3
 80105de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105e0:	f7fc fbe4 	bl	800cdac <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80105e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105e6:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80105e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80105ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ec:	4293      	cmp	r3, r2
 80105ee:	bf28      	it	cs
 80105f0:	4613      	movcs	r3, r2
 80105f2:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80105f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80105f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80105fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80105fe:	f7fc fb41 	bl	800cc84 <disk_write>
 8010602:	4603      	mov	r3, r0
 8010604:	2b00      	cmp	r3, #0
 8010606:	d001      	beq.n	801060c <f_mkfs+0x6ac>
 8010608:	2301      	movs	r3, #1
 801060a:	e0cf      	b.n	80107ac <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 801060c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801060e:	461a      	mov	r2, r3
 8010610:	2100      	movs	r1, #0
 8010612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010614:	f7fc fc17 	bl	800ce46 <mem_set>
				sect += n; nsect -= n;
 8010618:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801061a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801061c:	4413      	add	r3, r2
 801061e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010620:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010624:	1ad3      	subs	r3, r2, r3
 8010626:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 8010628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1dc      	bne.n	80105e8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801062e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010630:	3301      	adds	r3, #1
 8010632:	64bb      	str	r3, [r7, #72]	; 0x48
 8010634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010638:	429a      	cmp	r2, r3
 801063a:	d3af      	bcc.n	801059c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801063c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010640:	2b03      	cmp	r3, #3
 8010642:	d101      	bne.n	8010648 <f_mkfs+0x6e8>
 8010644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010646:	e000      	b.n	801064a <f_mkfs+0x6ea>
 8010648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801064a:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 801064c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010650:	4293      	cmp	r3, r2
 8010652:	bf28      	it	cs
 8010654:	4613      	movcs	r3, r2
 8010656:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010658:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801065c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801065e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010662:	f7fc fb0f 	bl	800cc84 <disk_write>
 8010666:	4603      	mov	r3, r0
 8010668:	2b00      	cmp	r3, #0
 801066a:	d00d      	beq.n	8010688 <f_mkfs+0x728>
 801066c:	2301      	movs	r3, #1
 801066e:	e09d      	b.n	80107ac <f_mkfs+0x84c>
 8010670:	080145e0 	.word	0x080145e0
 8010674:	080145ec 	.word	0x080145ec
 8010678:	08014600 	.word	0x08014600
 801067c:	41615252 	.word	0x41615252
 8010680:	61417272 	.word	0x61417272
 8010684:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8010688:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801068a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801068c:	4413      	add	r3, r2
 801068e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010690:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010694:	1ad3      	subs	r3, r2, r3
 8010696:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 8010698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1d6      	bne.n	801064c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801069e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80106a2:	2b03      	cmp	r3, #3
 80106a4:	d103      	bne.n	80106ae <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80106a6:	230c      	movs	r3, #12
 80106a8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80106ac:	e010      	b.n	80106d0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106b4:	d303      	bcc.n	80106be <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80106b6:	2306      	movs	r3, #6
 80106b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80106bc:	e008      	b.n	80106d0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80106be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d101      	bne.n	80106ca <f_mkfs+0x76a>
 80106c6:	2304      	movs	r3, #4
 80106c8:	e000      	b.n	80106cc <f_mkfs+0x76c>
 80106ca:	2301      	movs	r3, #1
 80106cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80106d0:	7afb      	ldrb	r3, [r7, #11]
 80106d2:	f003 0308 	and.w	r3, r3, #8
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d15b      	bne.n	8010792 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80106da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80106dc:	461a      	mov	r2, r3
 80106de:	2100      	movs	r1, #0
 80106e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106e2:	f7fc fbb0 	bl	800ce46 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80106ec:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fc fb40 	bl	800cd76 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80106fc:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	2200      	movs	r2, #0
 8010702:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	3301      	adds	r3, #1
 8010708:	2201      	movs	r2, #1
 801070a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801070c:	69bb      	ldr	r3, [r7, #24]
 801070e:	3302      	adds	r3, #2
 8010710:	2201      	movs	r2, #1
 8010712:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	3303      	adds	r3, #3
 8010718:	2200      	movs	r2, #0
 801071a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	3304      	adds	r3, #4
 8010720:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8010724:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010726:	693a      	ldr	r2, [r7, #16]
 8010728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072a:	441a      	add	r2, r3
 801072c:	4b21      	ldr	r3, [pc, #132]	; (80107b4 <f_mkfs+0x854>)
 801072e:	fba3 1302 	umull	r1, r3, r3, r2
 8010732:	1ad2      	subs	r2, r2, r3
 8010734:	0852      	lsrs	r2, r2, #1
 8010736:	4413      	add	r3, r2
 8010738:	0b5b      	lsrs	r3, r3, #13
 801073a:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 801073c:	69bb      	ldr	r3, [r7, #24]
 801073e:	3305      	adds	r3, #5
 8010740:	22fe      	movs	r2, #254	; 0xfe
 8010742:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8010744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010746:	089b      	lsrs	r3, r3, #2
 8010748:	b2da      	uxtb	r2, r3
 801074a:	69bb      	ldr	r3, [r7, #24]
 801074c:	3306      	adds	r3, #6
 801074e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8010752:	b2d2      	uxtb	r2, r2
 8010754:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010756:	69bb      	ldr	r3, [r7, #24]
 8010758:	3307      	adds	r3, #7
 801075a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801075c:	b2d2      	uxtb	r2, r2
 801075e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	3308      	adds	r3, #8
 8010764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010766:	4618      	mov	r0, r3
 8010768:	f7fc fb20 	bl	800cdac <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	330c      	adds	r3, #12
 8010770:	693a      	ldr	r2, [r7, #16]
 8010772:	4611      	mov	r1, r2
 8010774:	4618      	mov	r0, r3
 8010776:	f7fc fb19 	bl	800cdac <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801077a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801077e:	2301      	movs	r3, #1
 8010780:	2200      	movs	r2, #0
 8010782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010784:	f7fc fa7e 	bl	800cc84 <disk_write>
 8010788:	4603      	mov	r3, r0
 801078a:	2b00      	cmp	r3, #0
 801078c:	d001      	beq.n	8010792 <f_mkfs+0x832>
 801078e:	2301      	movs	r3, #1
 8010790:	e00c      	b.n	80107ac <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8010792:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010796:	2200      	movs	r2, #0
 8010798:	2100      	movs	r1, #0
 801079a:	4618      	mov	r0, r3
 801079c:	f7fc fa92 	bl	800ccc4 <disk_ioctl>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d001      	beq.n	80107aa <f_mkfs+0x84a>
 80107a6:	2301      	movs	r3, #1
 80107a8:	e000      	b.n	80107ac <f_mkfs+0x84c>

	return FR_OK;
 80107aa:	2300      	movs	r3, #0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3774      	adds	r7, #116	; 0x74
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd90      	pop	{r4, r7, pc}
 80107b4:	0515565b 	.word	0x0515565b

080107b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b087      	sub	sp, #28
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	4613      	mov	r3, r2
 80107c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80107c6:	2301      	movs	r3, #1
 80107c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80107ca:	2300      	movs	r3, #0
 80107cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80107ce:	4b1f      	ldr	r3, [pc, #124]	; (801084c <FATFS_LinkDriverEx+0x94>)
 80107d0:	7a5b      	ldrb	r3, [r3, #9]
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d131      	bne.n	801083c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80107d8:	4b1c      	ldr	r3, [pc, #112]	; (801084c <FATFS_LinkDriverEx+0x94>)
 80107da:	7a5b      	ldrb	r3, [r3, #9]
 80107dc:	b2db      	uxtb	r3, r3
 80107de:	461a      	mov	r2, r3
 80107e0:	4b1a      	ldr	r3, [pc, #104]	; (801084c <FATFS_LinkDriverEx+0x94>)
 80107e2:	2100      	movs	r1, #0
 80107e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80107e6:	4b19      	ldr	r3, [pc, #100]	; (801084c <FATFS_LinkDriverEx+0x94>)
 80107e8:	7a5b      	ldrb	r3, [r3, #9]
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	4a17      	ldr	r2, [pc, #92]	; (801084c <FATFS_LinkDriverEx+0x94>)
 80107ee:	009b      	lsls	r3, r3, #2
 80107f0:	4413      	add	r3, r2
 80107f2:	68fa      	ldr	r2, [r7, #12]
 80107f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80107f6:	4b15      	ldr	r3, [pc, #84]	; (801084c <FATFS_LinkDriverEx+0x94>)
 80107f8:	7a5b      	ldrb	r3, [r3, #9]
 80107fa:	b2db      	uxtb	r3, r3
 80107fc:	461a      	mov	r2, r3
 80107fe:	4b13      	ldr	r3, [pc, #76]	; (801084c <FATFS_LinkDriverEx+0x94>)
 8010800:	4413      	add	r3, r2
 8010802:	79fa      	ldrb	r2, [r7, #7]
 8010804:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010806:	4b11      	ldr	r3, [pc, #68]	; (801084c <FATFS_LinkDriverEx+0x94>)
 8010808:	7a5b      	ldrb	r3, [r3, #9]
 801080a:	b2db      	uxtb	r3, r3
 801080c:	1c5a      	adds	r2, r3, #1
 801080e:	b2d1      	uxtb	r1, r2
 8010810:	4a0e      	ldr	r2, [pc, #56]	; (801084c <FATFS_LinkDriverEx+0x94>)
 8010812:	7251      	strb	r1, [r2, #9]
 8010814:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010816:	7dbb      	ldrb	r3, [r7, #22]
 8010818:	3330      	adds	r3, #48	; 0x30
 801081a:	b2da      	uxtb	r2, r3
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	3301      	adds	r3, #1
 8010824:	223a      	movs	r2, #58	; 0x3a
 8010826:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	3302      	adds	r3, #2
 801082c:	222f      	movs	r2, #47	; 0x2f
 801082e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	3303      	adds	r3, #3
 8010834:	2200      	movs	r2, #0
 8010836:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010838:	2300      	movs	r3, #0
 801083a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801083c:	7dfb      	ldrb	r3, [r7, #23]
}
 801083e:	4618      	mov	r0, r3
 8010840:	371c      	adds	r7, #28
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr
 801084a:	bf00      	nop
 801084c:	20001e64 	.word	0x20001e64

08010850 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801085a:	2200      	movs	r2, #0
 801085c:	6839      	ldr	r1, [r7, #0]
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f7ff ffaa 	bl	80107b8 <FATFS_LinkDriverEx>
 8010864:	4603      	mov	r3, r0
}
 8010866:	4618      	mov	r0, r3
 8010868:	3708      	adds	r7, #8
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
	...

08010870 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010870:	b480      	push	{r7}
 8010872:	b085      	sub	sp, #20
 8010874:	af00      	add	r7, sp, #0
 8010876:	4603      	mov	r3, r0
 8010878:	6039      	str	r1, [r7, #0]
 801087a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801087c:	88fb      	ldrh	r3, [r7, #6]
 801087e:	2b7f      	cmp	r3, #127	; 0x7f
 8010880:	d802      	bhi.n	8010888 <ff_convert+0x18>
		c = chr;
 8010882:	88fb      	ldrh	r3, [r7, #6]
 8010884:	81fb      	strh	r3, [r7, #14]
 8010886:	e025      	b.n	80108d4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d00b      	beq.n	80108a6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801088e:	88fb      	ldrh	r3, [r7, #6]
 8010890:	2bff      	cmp	r3, #255	; 0xff
 8010892:	d805      	bhi.n	80108a0 <ff_convert+0x30>
 8010894:	88fb      	ldrh	r3, [r7, #6]
 8010896:	3b80      	subs	r3, #128	; 0x80
 8010898:	4a12      	ldr	r2, [pc, #72]	; (80108e4 <ff_convert+0x74>)
 801089a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801089e:	e000      	b.n	80108a2 <ff_convert+0x32>
 80108a0:	2300      	movs	r3, #0
 80108a2:	81fb      	strh	r3, [r7, #14]
 80108a4:	e016      	b.n	80108d4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80108a6:	2300      	movs	r3, #0
 80108a8:	81fb      	strh	r3, [r7, #14]
 80108aa:	e009      	b.n	80108c0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80108ac:	89fb      	ldrh	r3, [r7, #14]
 80108ae:	4a0d      	ldr	r2, [pc, #52]	; (80108e4 <ff_convert+0x74>)
 80108b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108b4:	88fa      	ldrh	r2, [r7, #6]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d006      	beq.n	80108c8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80108ba:	89fb      	ldrh	r3, [r7, #14]
 80108bc:	3301      	adds	r3, #1
 80108be:	81fb      	strh	r3, [r7, #14]
 80108c0:	89fb      	ldrh	r3, [r7, #14]
 80108c2:	2b7f      	cmp	r3, #127	; 0x7f
 80108c4:	d9f2      	bls.n	80108ac <ff_convert+0x3c>
 80108c6:	e000      	b.n	80108ca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80108c8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80108ca:	89fb      	ldrh	r3, [r7, #14]
 80108cc:	3380      	adds	r3, #128	; 0x80
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80108d4:	89fb      	ldrh	r3, [r7, #14]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	080146e4 	.word	0x080146e4

080108e8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b087      	sub	sp, #28
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80108f2:	88fb      	ldrh	r3, [r7, #6]
 80108f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108f8:	d201      	bcs.n	80108fe <ff_wtoupper+0x16>
 80108fa:	4b3e      	ldr	r3, [pc, #248]	; (80109f4 <ff_wtoupper+0x10c>)
 80108fc:	e000      	b.n	8010900 <ff_wtoupper+0x18>
 80108fe:	4b3e      	ldr	r3, [pc, #248]	; (80109f8 <ff_wtoupper+0x110>)
 8010900:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	1c9a      	adds	r2, r3, #2
 8010906:	617a      	str	r2, [r7, #20]
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801090c:	8a7b      	ldrh	r3, [r7, #18]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d068      	beq.n	80109e4 <ff_wtoupper+0xfc>
 8010912:	88fa      	ldrh	r2, [r7, #6]
 8010914:	8a7b      	ldrh	r3, [r7, #18]
 8010916:	429a      	cmp	r2, r3
 8010918:	d364      	bcc.n	80109e4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	1c9a      	adds	r2, r3, #2
 801091e:	617a      	str	r2, [r7, #20]
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	823b      	strh	r3, [r7, #16]
 8010924:	8a3b      	ldrh	r3, [r7, #16]
 8010926:	0a1b      	lsrs	r3, r3, #8
 8010928:	81fb      	strh	r3, [r7, #14]
 801092a:	8a3b      	ldrh	r3, [r7, #16]
 801092c:	b2db      	uxtb	r3, r3
 801092e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010930:	88fa      	ldrh	r2, [r7, #6]
 8010932:	8a79      	ldrh	r1, [r7, #18]
 8010934:	8a3b      	ldrh	r3, [r7, #16]
 8010936:	440b      	add	r3, r1
 8010938:	429a      	cmp	r2, r3
 801093a:	da49      	bge.n	80109d0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801093c:	89fb      	ldrh	r3, [r7, #14]
 801093e:	2b08      	cmp	r3, #8
 8010940:	d84f      	bhi.n	80109e2 <ff_wtoupper+0xfa>
 8010942:	a201      	add	r2, pc, #4	; (adr r2, 8010948 <ff_wtoupper+0x60>)
 8010944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010948:	0801096d 	.word	0x0801096d
 801094c:	0801097f 	.word	0x0801097f
 8010950:	08010995 	.word	0x08010995
 8010954:	0801099d 	.word	0x0801099d
 8010958:	080109a5 	.word	0x080109a5
 801095c:	080109ad 	.word	0x080109ad
 8010960:	080109b5 	.word	0x080109b5
 8010964:	080109bd 	.word	0x080109bd
 8010968:	080109c5 	.word	0x080109c5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801096c:	88fa      	ldrh	r2, [r7, #6]
 801096e:	8a7b      	ldrh	r3, [r7, #18]
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	005b      	lsls	r3, r3, #1
 8010974:	697a      	ldr	r2, [r7, #20]
 8010976:	4413      	add	r3, r2
 8010978:	881b      	ldrh	r3, [r3, #0]
 801097a:	80fb      	strh	r3, [r7, #6]
 801097c:	e027      	b.n	80109ce <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801097e:	88fa      	ldrh	r2, [r7, #6]
 8010980:	8a7b      	ldrh	r3, [r7, #18]
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	b29b      	uxth	r3, r3
 8010986:	f003 0301 	and.w	r3, r3, #1
 801098a:	b29b      	uxth	r3, r3
 801098c:	88fa      	ldrh	r2, [r7, #6]
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	80fb      	strh	r3, [r7, #6]
 8010992:	e01c      	b.n	80109ce <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010994:	88fb      	ldrh	r3, [r7, #6]
 8010996:	3b10      	subs	r3, #16
 8010998:	80fb      	strh	r3, [r7, #6]
 801099a:	e018      	b.n	80109ce <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801099c:	88fb      	ldrh	r3, [r7, #6]
 801099e:	3b20      	subs	r3, #32
 80109a0:	80fb      	strh	r3, [r7, #6]
 80109a2:	e014      	b.n	80109ce <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80109a4:	88fb      	ldrh	r3, [r7, #6]
 80109a6:	3b30      	subs	r3, #48	; 0x30
 80109a8:	80fb      	strh	r3, [r7, #6]
 80109aa:	e010      	b.n	80109ce <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80109ac:	88fb      	ldrh	r3, [r7, #6]
 80109ae:	3b1a      	subs	r3, #26
 80109b0:	80fb      	strh	r3, [r7, #6]
 80109b2:	e00c      	b.n	80109ce <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80109b4:	88fb      	ldrh	r3, [r7, #6]
 80109b6:	3308      	adds	r3, #8
 80109b8:	80fb      	strh	r3, [r7, #6]
 80109ba:	e008      	b.n	80109ce <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80109bc:	88fb      	ldrh	r3, [r7, #6]
 80109be:	3b50      	subs	r3, #80	; 0x50
 80109c0:	80fb      	strh	r3, [r7, #6]
 80109c2:	e004      	b.n	80109ce <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80109c4:	88fb      	ldrh	r3, [r7, #6]
 80109c6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80109ca:	80fb      	strh	r3, [r7, #6]
 80109cc:	bf00      	nop
			}
			break;
 80109ce:	e008      	b.n	80109e2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80109d0:	89fb      	ldrh	r3, [r7, #14]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d195      	bne.n	8010902 <ff_wtoupper+0x1a>
 80109d6:	8a3b      	ldrh	r3, [r7, #16]
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	697a      	ldr	r2, [r7, #20]
 80109dc:	4413      	add	r3, r2
 80109de:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80109e0:	e78f      	b.n	8010902 <ff_wtoupper+0x1a>
			break;
 80109e2:	bf00      	nop
	}

	return chr;
 80109e4:	88fb      	ldrh	r3, [r7, #6]
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	371c      	adds	r7, #28
 80109ea:	46bd      	mov	sp, r7
 80109ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f0:	4770      	bx	lr
 80109f2:	bf00      	nop
 80109f4:	080147e4 	.word	0x080147e4
 80109f8:	080149d8 	.word	0x080149d8

080109fc <__errno>:
 80109fc:	4b01      	ldr	r3, [pc, #4]	; (8010a04 <__errno+0x8>)
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	2000006c 	.word	0x2000006c

08010a08 <__libc_init_array>:
 8010a08:	b570      	push	{r4, r5, r6, lr}
 8010a0a:	4e0d      	ldr	r6, [pc, #52]	; (8010a40 <__libc_init_array+0x38>)
 8010a0c:	4c0d      	ldr	r4, [pc, #52]	; (8010a44 <__libc_init_array+0x3c>)
 8010a0e:	1ba4      	subs	r4, r4, r6
 8010a10:	10a4      	asrs	r4, r4, #2
 8010a12:	2500      	movs	r5, #0
 8010a14:	42a5      	cmp	r5, r4
 8010a16:	d109      	bne.n	8010a2c <__libc_init_array+0x24>
 8010a18:	4e0b      	ldr	r6, [pc, #44]	; (8010a48 <__libc_init_array+0x40>)
 8010a1a:	4c0c      	ldr	r4, [pc, #48]	; (8010a4c <__libc_init_array+0x44>)
 8010a1c:	f003 fca8 	bl	8014370 <_init>
 8010a20:	1ba4      	subs	r4, r4, r6
 8010a22:	10a4      	asrs	r4, r4, #2
 8010a24:	2500      	movs	r5, #0
 8010a26:	42a5      	cmp	r5, r4
 8010a28:	d105      	bne.n	8010a36 <__libc_init_array+0x2e>
 8010a2a:	bd70      	pop	{r4, r5, r6, pc}
 8010a2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a30:	4798      	blx	r3
 8010a32:	3501      	adds	r5, #1
 8010a34:	e7ee      	b.n	8010a14 <__libc_init_array+0xc>
 8010a36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a3a:	4798      	blx	r3
 8010a3c:	3501      	adds	r5, #1
 8010a3e:	e7f2      	b.n	8010a26 <__libc_init_array+0x1e>
 8010a40:	08014d50 	.word	0x08014d50
 8010a44:	08014d50 	.word	0x08014d50
 8010a48:	08014d50 	.word	0x08014d50
 8010a4c:	08014d54 	.word	0x08014d54

08010a50 <memcpy>:
 8010a50:	b510      	push	{r4, lr}
 8010a52:	1e43      	subs	r3, r0, #1
 8010a54:	440a      	add	r2, r1
 8010a56:	4291      	cmp	r1, r2
 8010a58:	d100      	bne.n	8010a5c <memcpy+0xc>
 8010a5a:	bd10      	pop	{r4, pc}
 8010a5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010a64:	e7f7      	b.n	8010a56 <memcpy+0x6>

08010a66 <memset>:
 8010a66:	4402      	add	r2, r0
 8010a68:	4603      	mov	r3, r0
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d100      	bne.n	8010a70 <memset+0xa>
 8010a6e:	4770      	bx	lr
 8010a70:	f803 1b01 	strb.w	r1, [r3], #1
 8010a74:	e7f9      	b.n	8010a6a <memset+0x4>

08010a76 <__cvt>:
 8010a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a78:	ed2d 8b02 	vpush	{d8}
 8010a7c:	eeb0 8b40 	vmov.f64	d8, d0
 8010a80:	b085      	sub	sp, #20
 8010a82:	4617      	mov	r7, r2
 8010a84:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010a86:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010a88:	ee18 2a90 	vmov	r2, s17
 8010a8c:	f025 0520 	bic.w	r5, r5, #32
 8010a90:	2a00      	cmp	r2, #0
 8010a92:	bfb6      	itet	lt
 8010a94:	222d      	movlt	r2, #45	; 0x2d
 8010a96:	2200      	movge	r2, #0
 8010a98:	eeb1 8b40 	vneglt.f64	d8, d0
 8010a9c:	2d46      	cmp	r5, #70	; 0x46
 8010a9e:	460c      	mov	r4, r1
 8010aa0:	701a      	strb	r2, [r3, #0]
 8010aa2:	d004      	beq.n	8010aae <__cvt+0x38>
 8010aa4:	2d45      	cmp	r5, #69	; 0x45
 8010aa6:	d100      	bne.n	8010aaa <__cvt+0x34>
 8010aa8:	3401      	adds	r4, #1
 8010aaa:	2102      	movs	r1, #2
 8010aac:	e000      	b.n	8010ab0 <__cvt+0x3a>
 8010aae:	2103      	movs	r1, #3
 8010ab0:	ab03      	add	r3, sp, #12
 8010ab2:	9301      	str	r3, [sp, #4]
 8010ab4:	ab02      	add	r3, sp, #8
 8010ab6:	9300      	str	r3, [sp, #0]
 8010ab8:	4622      	mov	r2, r4
 8010aba:	4633      	mov	r3, r6
 8010abc:	eeb0 0b48 	vmov.f64	d0, d8
 8010ac0:	f001 fd36 	bl	8012530 <_dtoa_r>
 8010ac4:	2d47      	cmp	r5, #71	; 0x47
 8010ac6:	d101      	bne.n	8010acc <__cvt+0x56>
 8010ac8:	07fb      	lsls	r3, r7, #31
 8010aca:	d51e      	bpl.n	8010b0a <__cvt+0x94>
 8010acc:	2d46      	cmp	r5, #70	; 0x46
 8010ace:	eb00 0304 	add.w	r3, r0, r4
 8010ad2:	d10c      	bne.n	8010aee <__cvt+0x78>
 8010ad4:	7802      	ldrb	r2, [r0, #0]
 8010ad6:	2a30      	cmp	r2, #48	; 0x30
 8010ad8:	d107      	bne.n	8010aea <__cvt+0x74>
 8010ada:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae2:	bf1c      	itt	ne
 8010ae4:	f1c4 0401 	rsbne	r4, r4, #1
 8010ae8:	6034      	strne	r4, [r6, #0]
 8010aea:	6832      	ldr	r2, [r6, #0]
 8010aec:	4413      	add	r3, r2
 8010aee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af6:	d007      	beq.n	8010b08 <__cvt+0x92>
 8010af8:	2130      	movs	r1, #48	; 0x30
 8010afa:	9a03      	ldr	r2, [sp, #12]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d204      	bcs.n	8010b0a <__cvt+0x94>
 8010b00:	1c54      	adds	r4, r2, #1
 8010b02:	9403      	str	r4, [sp, #12]
 8010b04:	7011      	strb	r1, [r2, #0]
 8010b06:	e7f8      	b.n	8010afa <__cvt+0x84>
 8010b08:	9303      	str	r3, [sp, #12]
 8010b0a:	9b03      	ldr	r3, [sp, #12]
 8010b0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b0e:	1a1b      	subs	r3, r3, r0
 8010b10:	6013      	str	r3, [r2, #0]
 8010b12:	b005      	add	sp, #20
 8010b14:	ecbd 8b02 	vpop	{d8}
 8010b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b1a <__exponent>:
 8010b1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	4604      	mov	r4, r0
 8010b20:	bfba      	itte	lt
 8010b22:	4249      	neglt	r1, r1
 8010b24:	232d      	movlt	r3, #45	; 0x2d
 8010b26:	232b      	movge	r3, #43	; 0x2b
 8010b28:	2909      	cmp	r1, #9
 8010b2a:	f804 2b02 	strb.w	r2, [r4], #2
 8010b2e:	7043      	strb	r3, [r0, #1]
 8010b30:	dd20      	ble.n	8010b74 <__exponent+0x5a>
 8010b32:	f10d 0307 	add.w	r3, sp, #7
 8010b36:	461f      	mov	r7, r3
 8010b38:	260a      	movs	r6, #10
 8010b3a:	fb91 f5f6 	sdiv	r5, r1, r6
 8010b3e:	fb06 1115 	mls	r1, r6, r5, r1
 8010b42:	3130      	adds	r1, #48	; 0x30
 8010b44:	2d09      	cmp	r5, #9
 8010b46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010b4a:	f103 32ff 	add.w	r2, r3, #4294967295
 8010b4e:	4629      	mov	r1, r5
 8010b50:	dc09      	bgt.n	8010b66 <__exponent+0x4c>
 8010b52:	3130      	adds	r1, #48	; 0x30
 8010b54:	3b02      	subs	r3, #2
 8010b56:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010b5a:	42bb      	cmp	r3, r7
 8010b5c:	4622      	mov	r2, r4
 8010b5e:	d304      	bcc.n	8010b6a <__exponent+0x50>
 8010b60:	1a10      	subs	r0, r2, r0
 8010b62:	b003      	add	sp, #12
 8010b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b66:	4613      	mov	r3, r2
 8010b68:	e7e7      	b.n	8010b3a <__exponent+0x20>
 8010b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b6e:	f804 2b01 	strb.w	r2, [r4], #1
 8010b72:	e7f2      	b.n	8010b5a <__exponent+0x40>
 8010b74:	2330      	movs	r3, #48	; 0x30
 8010b76:	4419      	add	r1, r3
 8010b78:	7083      	strb	r3, [r0, #2]
 8010b7a:	1d02      	adds	r2, r0, #4
 8010b7c:	70c1      	strb	r1, [r0, #3]
 8010b7e:	e7ef      	b.n	8010b60 <__exponent+0x46>

08010b80 <_printf_float>:
 8010b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b84:	b08d      	sub	sp, #52	; 0x34
 8010b86:	460c      	mov	r4, r1
 8010b88:	4616      	mov	r6, r2
 8010b8a:	461f      	mov	r7, r3
 8010b8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010b90:	4605      	mov	r5, r0
 8010b92:	f002 fd45 	bl	8013620 <_localeconv_r>
 8010b96:	f8d0 b000 	ldr.w	fp, [r0]
 8010b9a:	4658      	mov	r0, fp
 8010b9c:	f7ef fb5a 	bl	8000254 <strlen>
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8010ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8010ba8:	9005      	str	r0, [sp, #20]
 8010baa:	3307      	adds	r3, #7
 8010bac:	f023 0307 	bic.w	r3, r3, #7
 8010bb0:	f103 0108 	add.w	r1, r3, #8
 8010bb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010bb8:	6822      	ldr	r2, [r4, #0]
 8010bba:	f8c8 1000 	str.w	r1, [r8]
 8010bbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010bc2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010bc6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8010e50 <_printf_float+0x2d0>
 8010bca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010bce:	eeb0 6bc0 	vabs.f64	d6, d0
 8010bd2:	eeb4 6b47 	vcmp.f64	d6, d7
 8010bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bda:	dd24      	ble.n	8010c26 <_printf_float+0xa6>
 8010bdc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be4:	d502      	bpl.n	8010bec <_printf_float+0x6c>
 8010be6:	232d      	movs	r3, #45	; 0x2d
 8010be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bec:	499a      	ldr	r1, [pc, #616]	; (8010e58 <_printf_float+0x2d8>)
 8010bee:	4b9b      	ldr	r3, [pc, #620]	; (8010e5c <_printf_float+0x2dc>)
 8010bf0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010bf4:	bf8c      	ite	hi
 8010bf6:	4688      	movhi	r8, r1
 8010bf8:	4698      	movls	r8, r3
 8010bfa:	f022 0204 	bic.w	r2, r2, #4
 8010bfe:	2303      	movs	r3, #3
 8010c00:	6123      	str	r3, [r4, #16]
 8010c02:	6022      	str	r2, [r4, #0]
 8010c04:	f04f 0a00 	mov.w	sl, #0
 8010c08:	9700      	str	r7, [sp, #0]
 8010c0a:	4633      	mov	r3, r6
 8010c0c:	aa0b      	add	r2, sp, #44	; 0x2c
 8010c0e:	4621      	mov	r1, r4
 8010c10:	4628      	mov	r0, r5
 8010c12:	f000 f9e1 	bl	8010fd8 <_printf_common>
 8010c16:	3001      	adds	r0, #1
 8010c18:	f040 8089 	bne.w	8010d2e <_printf_float+0x1ae>
 8010c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c20:	b00d      	add	sp, #52	; 0x34
 8010c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c26:	eeb4 0b40 	vcmp.f64	d0, d0
 8010c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c2e:	d702      	bvc.n	8010c36 <_printf_float+0xb6>
 8010c30:	498b      	ldr	r1, [pc, #556]	; (8010e60 <_printf_float+0x2e0>)
 8010c32:	4b8c      	ldr	r3, [pc, #560]	; (8010e64 <_printf_float+0x2e4>)
 8010c34:	e7dc      	b.n	8010bf0 <_printf_float+0x70>
 8010c36:	6861      	ldr	r1, [r4, #4]
 8010c38:	1c4b      	adds	r3, r1, #1
 8010c3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010c3e:	ab0a      	add	r3, sp, #40	; 0x28
 8010c40:	a809      	add	r0, sp, #36	; 0x24
 8010c42:	d13b      	bne.n	8010cbc <_printf_float+0x13c>
 8010c44:	2106      	movs	r1, #6
 8010c46:	6061      	str	r1, [r4, #4]
 8010c48:	f04f 0c00 	mov.w	ip, #0
 8010c4c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010c50:	e9cd 0900 	strd	r0, r9, [sp]
 8010c54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010c58:	6022      	str	r2, [r4, #0]
 8010c5a:	6861      	ldr	r1, [r4, #4]
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	f7ff ff0a 	bl	8010a76 <__cvt>
 8010c62:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010c66:	2b47      	cmp	r3, #71	; 0x47
 8010c68:	4680      	mov	r8, r0
 8010c6a:	d109      	bne.n	8010c80 <_printf_float+0x100>
 8010c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c6e:	1cd8      	adds	r0, r3, #3
 8010c70:	db02      	blt.n	8010c78 <_printf_float+0xf8>
 8010c72:	6862      	ldr	r2, [r4, #4]
 8010c74:	4293      	cmp	r3, r2
 8010c76:	dd47      	ble.n	8010d08 <_printf_float+0x188>
 8010c78:	f1a9 0902 	sub.w	r9, r9, #2
 8010c7c:	fa5f f989 	uxtb.w	r9, r9
 8010c80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010c86:	d824      	bhi.n	8010cd2 <_printf_float+0x152>
 8010c88:	3901      	subs	r1, #1
 8010c8a:	464a      	mov	r2, r9
 8010c8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010c90:	9109      	str	r1, [sp, #36]	; 0x24
 8010c92:	f7ff ff42 	bl	8010b1a <__exponent>
 8010c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010c98:	1813      	adds	r3, r2, r0
 8010c9a:	2a01      	cmp	r2, #1
 8010c9c:	4682      	mov	sl, r0
 8010c9e:	6123      	str	r3, [r4, #16]
 8010ca0:	dc02      	bgt.n	8010ca8 <_printf_float+0x128>
 8010ca2:	6822      	ldr	r2, [r4, #0]
 8010ca4:	07d1      	lsls	r1, r2, #31
 8010ca6:	d501      	bpl.n	8010cac <_printf_float+0x12c>
 8010ca8:	3301      	adds	r3, #1
 8010caa:	6123      	str	r3, [r4, #16]
 8010cac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d0a9      	beq.n	8010c08 <_printf_float+0x88>
 8010cb4:	232d      	movs	r3, #45	; 0x2d
 8010cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cba:	e7a5      	b.n	8010c08 <_printf_float+0x88>
 8010cbc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010cc0:	f000 8178 	beq.w	8010fb4 <_printf_float+0x434>
 8010cc4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010cc8:	d1be      	bne.n	8010c48 <_printf_float+0xc8>
 8010cca:	2900      	cmp	r1, #0
 8010ccc:	d1bc      	bne.n	8010c48 <_printf_float+0xc8>
 8010cce:	2101      	movs	r1, #1
 8010cd0:	e7b9      	b.n	8010c46 <_printf_float+0xc6>
 8010cd2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010cd6:	d119      	bne.n	8010d0c <_printf_float+0x18c>
 8010cd8:	2900      	cmp	r1, #0
 8010cda:	6863      	ldr	r3, [r4, #4]
 8010cdc:	dd0c      	ble.n	8010cf8 <_printf_float+0x178>
 8010cde:	6121      	str	r1, [r4, #16]
 8010ce0:	b913      	cbnz	r3, 8010ce8 <_printf_float+0x168>
 8010ce2:	6822      	ldr	r2, [r4, #0]
 8010ce4:	07d2      	lsls	r2, r2, #31
 8010ce6:	d502      	bpl.n	8010cee <_printf_float+0x16e>
 8010ce8:	3301      	adds	r3, #1
 8010cea:	440b      	add	r3, r1
 8010cec:	6123      	str	r3, [r4, #16]
 8010cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cf0:	65a3      	str	r3, [r4, #88]	; 0x58
 8010cf2:	f04f 0a00 	mov.w	sl, #0
 8010cf6:	e7d9      	b.n	8010cac <_printf_float+0x12c>
 8010cf8:	b913      	cbnz	r3, 8010d00 <_printf_float+0x180>
 8010cfa:	6822      	ldr	r2, [r4, #0]
 8010cfc:	07d0      	lsls	r0, r2, #31
 8010cfe:	d501      	bpl.n	8010d04 <_printf_float+0x184>
 8010d00:	3302      	adds	r3, #2
 8010d02:	e7f3      	b.n	8010cec <_printf_float+0x16c>
 8010d04:	2301      	movs	r3, #1
 8010d06:	e7f1      	b.n	8010cec <_printf_float+0x16c>
 8010d08:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010d0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010d10:	4293      	cmp	r3, r2
 8010d12:	db05      	blt.n	8010d20 <_printf_float+0x1a0>
 8010d14:	6822      	ldr	r2, [r4, #0]
 8010d16:	6123      	str	r3, [r4, #16]
 8010d18:	07d1      	lsls	r1, r2, #31
 8010d1a:	d5e8      	bpl.n	8010cee <_printf_float+0x16e>
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	e7e5      	b.n	8010cec <_printf_float+0x16c>
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	bfd4      	ite	le
 8010d24:	f1c3 0302 	rsble	r3, r3, #2
 8010d28:	2301      	movgt	r3, #1
 8010d2a:	4413      	add	r3, r2
 8010d2c:	e7de      	b.n	8010cec <_printf_float+0x16c>
 8010d2e:	6823      	ldr	r3, [r4, #0]
 8010d30:	055a      	lsls	r2, r3, #21
 8010d32:	d407      	bmi.n	8010d44 <_printf_float+0x1c4>
 8010d34:	6923      	ldr	r3, [r4, #16]
 8010d36:	4642      	mov	r2, r8
 8010d38:	4631      	mov	r1, r6
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	47b8      	blx	r7
 8010d3e:	3001      	adds	r0, #1
 8010d40:	d12a      	bne.n	8010d98 <_printf_float+0x218>
 8010d42:	e76b      	b.n	8010c1c <_printf_float+0x9c>
 8010d44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010d48:	f240 80de 	bls.w	8010f08 <_printf_float+0x388>
 8010d4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010d50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d58:	d133      	bne.n	8010dc2 <_printf_float+0x242>
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	4a42      	ldr	r2, [pc, #264]	; (8010e68 <_printf_float+0x2e8>)
 8010d5e:	4631      	mov	r1, r6
 8010d60:	4628      	mov	r0, r5
 8010d62:	47b8      	blx	r7
 8010d64:	3001      	adds	r0, #1
 8010d66:	f43f af59 	beq.w	8010c1c <_printf_float+0x9c>
 8010d6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	db02      	blt.n	8010d78 <_printf_float+0x1f8>
 8010d72:	6823      	ldr	r3, [r4, #0]
 8010d74:	07d8      	lsls	r0, r3, #31
 8010d76:	d50f      	bpl.n	8010d98 <_printf_float+0x218>
 8010d78:	9b05      	ldr	r3, [sp, #20]
 8010d7a:	465a      	mov	r2, fp
 8010d7c:	4631      	mov	r1, r6
 8010d7e:	4628      	mov	r0, r5
 8010d80:	47b8      	blx	r7
 8010d82:	3001      	adds	r0, #1
 8010d84:	f43f af4a 	beq.w	8010c1c <_printf_float+0x9c>
 8010d88:	f04f 0800 	mov.w	r8, #0
 8010d8c:	f104 091a 	add.w	r9, r4, #26
 8010d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d92:	3b01      	subs	r3, #1
 8010d94:	4543      	cmp	r3, r8
 8010d96:	dc09      	bgt.n	8010dac <_printf_float+0x22c>
 8010d98:	6823      	ldr	r3, [r4, #0]
 8010d9a:	079b      	lsls	r3, r3, #30
 8010d9c:	f100 8105 	bmi.w	8010faa <_printf_float+0x42a>
 8010da0:	68e0      	ldr	r0, [r4, #12]
 8010da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010da4:	4298      	cmp	r0, r3
 8010da6:	bfb8      	it	lt
 8010da8:	4618      	movlt	r0, r3
 8010daa:	e739      	b.n	8010c20 <_printf_float+0xa0>
 8010dac:	2301      	movs	r3, #1
 8010dae:	464a      	mov	r2, r9
 8010db0:	4631      	mov	r1, r6
 8010db2:	4628      	mov	r0, r5
 8010db4:	47b8      	blx	r7
 8010db6:	3001      	adds	r0, #1
 8010db8:	f43f af30 	beq.w	8010c1c <_printf_float+0x9c>
 8010dbc:	f108 0801 	add.w	r8, r8, #1
 8010dc0:	e7e6      	b.n	8010d90 <_printf_float+0x210>
 8010dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	dc2b      	bgt.n	8010e20 <_printf_float+0x2a0>
 8010dc8:	2301      	movs	r3, #1
 8010dca:	4a27      	ldr	r2, [pc, #156]	; (8010e68 <_printf_float+0x2e8>)
 8010dcc:	4631      	mov	r1, r6
 8010dce:	4628      	mov	r0, r5
 8010dd0:	47b8      	blx	r7
 8010dd2:	3001      	adds	r0, #1
 8010dd4:	f43f af22 	beq.w	8010c1c <_printf_float+0x9c>
 8010dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dda:	b923      	cbnz	r3, 8010de6 <_printf_float+0x266>
 8010ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dde:	b913      	cbnz	r3, 8010de6 <_printf_float+0x266>
 8010de0:	6823      	ldr	r3, [r4, #0]
 8010de2:	07d9      	lsls	r1, r3, #31
 8010de4:	d5d8      	bpl.n	8010d98 <_printf_float+0x218>
 8010de6:	9b05      	ldr	r3, [sp, #20]
 8010de8:	465a      	mov	r2, fp
 8010dea:	4631      	mov	r1, r6
 8010dec:	4628      	mov	r0, r5
 8010dee:	47b8      	blx	r7
 8010df0:	3001      	adds	r0, #1
 8010df2:	f43f af13 	beq.w	8010c1c <_printf_float+0x9c>
 8010df6:	f04f 0900 	mov.w	r9, #0
 8010dfa:	f104 0a1a 	add.w	sl, r4, #26
 8010dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e00:	425b      	negs	r3, r3
 8010e02:	454b      	cmp	r3, r9
 8010e04:	dc01      	bgt.n	8010e0a <_printf_float+0x28a>
 8010e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e08:	e795      	b.n	8010d36 <_printf_float+0x1b6>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	4652      	mov	r2, sl
 8010e0e:	4631      	mov	r1, r6
 8010e10:	4628      	mov	r0, r5
 8010e12:	47b8      	blx	r7
 8010e14:	3001      	adds	r0, #1
 8010e16:	f43f af01 	beq.w	8010c1c <_printf_float+0x9c>
 8010e1a:	f109 0901 	add.w	r9, r9, #1
 8010e1e:	e7ee      	b.n	8010dfe <_printf_float+0x27e>
 8010e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010e22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e24:	429a      	cmp	r2, r3
 8010e26:	bfa8      	it	ge
 8010e28:	461a      	movge	r2, r3
 8010e2a:	2a00      	cmp	r2, #0
 8010e2c:	4691      	mov	r9, r2
 8010e2e:	dd07      	ble.n	8010e40 <_printf_float+0x2c0>
 8010e30:	4613      	mov	r3, r2
 8010e32:	4631      	mov	r1, r6
 8010e34:	4642      	mov	r2, r8
 8010e36:	4628      	mov	r0, r5
 8010e38:	47b8      	blx	r7
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	f43f aeee 	beq.w	8010c1c <_printf_float+0x9c>
 8010e40:	f104 031a 	add.w	r3, r4, #26
 8010e44:	f04f 0a00 	mov.w	sl, #0
 8010e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010e4c:	9307      	str	r3, [sp, #28]
 8010e4e:	e017      	b.n	8010e80 <_printf_float+0x300>
 8010e50:	ffffffff 	.word	0xffffffff
 8010e54:	7fefffff 	.word	0x7fefffff
 8010e58:	08014a98 	.word	0x08014a98
 8010e5c:	08014a94 	.word	0x08014a94
 8010e60:	08014aa0 	.word	0x08014aa0
 8010e64:	08014a9c 	.word	0x08014a9c
 8010e68:	08014aa4 	.word	0x08014aa4
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	9a07      	ldr	r2, [sp, #28]
 8010e70:	4631      	mov	r1, r6
 8010e72:	4628      	mov	r0, r5
 8010e74:	47b8      	blx	r7
 8010e76:	3001      	adds	r0, #1
 8010e78:	f43f aed0 	beq.w	8010c1c <_printf_float+0x9c>
 8010e7c:	f10a 0a01 	add.w	sl, sl, #1
 8010e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010e82:	9306      	str	r3, [sp, #24]
 8010e84:	eba3 0309 	sub.w	r3, r3, r9
 8010e88:	4553      	cmp	r3, sl
 8010e8a:	dcef      	bgt.n	8010e6c <_printf_float+0x2ec>
 8010e8c:	9b06      	ldr	r3, [sp, #24]
 8010e8e:	4498      	add	r8, r3
 8010e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e94:	429a      	cmp	r2, r3
 8010e96:	db15      	blt.n	8010ec4 <_printf_float+0x344>
 8010e98:	6823      	ldr	r3, [r4, #0]
 8010e9a:	07da      	lsls	r2, r3, #31
 8010e9c:	d412      	bmi.n	8010ec4 <_printf_float+0x344>
 8010e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ea0:	9a06      	ldr	r2, [sp, #24]
 8010ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010ea4:	1a9a      	subs	r2, r3, r2
 8010ea6:	eba3 0a01 	sub.w	sl, r3, r1
 8010eaa:	4592      	cmp	sl, r2
 8010eac:	bfa8      	it	ge
 8010eae:	4692      	movge	sl, r2
 8010eb0:	f1ba 0f00 	cmp.w	sl, #0
 8010eb4:	dc0e      	bgt.n	8010ed4 <_printf_float+0x354>
 8010eb6:	f04f 0800 	mov.w	r8, #0
 8010eba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ebe:	f104 091a 	add.w	r9, r4, #26
 8010ec2:	e019      	b.n	8010ef8 <_printf_float+0x378>
 8010ec4:	9b05      	ldr	r3, [sp, #20]
 8010ec6:	465a      	mov	r2, fp
 8010ec8:	4631      	mov	r1, r6
 8010eca:	4628      	mov	r0, r5
 8010ecc:	47b8      	blx	r7
 8010ece:	3001      	adds	r0, #1
 8010ed0:	d1e5      	bne.n	8010e9e <_printf_float+0x31e>
 8010ed2:	e6a3      	b.n	8010c1c <_printf_float+0x9c>
 8010ed4:	4653      	mov	r3, sl
 8010ed6:	4642      	mov	r2, r8
 8010ed8:	4631      	mov	r1, r6
 8010eda:	4628      	mov	r0, r5
 8010edc:	47b8      	blx	r7
 8010ede:	3001      	adds	r0, #1
 8010ee0:	d1e9      	bne.n	8010eb6 <_printf_float+0x336>
 8010ee2:	e69b      	b.n	8010c1c <_printf_float+0x9c>
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	464a      	mov	r2, r9
 8010ee8:	4631      	mov	r1, r6
 8010eea:	4628      	mov	r0, r5
 8010eec:	47b8      	blx	r7
 8010eee:	3001      	adds	r0, #1
 8010ef0:	f43f ae94 	beq.w	8010c1c <_printf_float+0x9c>
 8010ef4:	f108 0801 	add.w	r8, r8, #1
 8010ef8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010efc:	1a9b      	subs	r3, r3, r2
 8010efe:	eba3 030a 	sub.w	r3, r3, sl
 8010f02:	4543      	cmp	r3, r8
 8010f04:	dcee      	bgt.n	8010ee4 <_printf_float+0x364>
 8010f06:	e747      	b.n	8010d98 <_printf_float+0x218>
 8010f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f0a:	2a01      	cmp	r2, #1
 8010f0c:	dc01      	bgt.n	8010f12 <_printf_float+0x392>
 8010f0e:	07db      	lsls	r3, r3, #31
 8010f10:	d539      	bpl.n	8010f86 <_printf_float+0x406>
 8010f12:	2301      	movs	r3, #1
 8010f14:	4642      	mov	r2, r8
 8010f16:	4631      	mov	r1, r6
 8010f18:	4628      	mov	r0, r5
 8010f1a:	47b8      	blx	r7
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	f43f ae7d 	beq.w	8010c1c <_printf_float+0x9c>
 8010f22:	9b05      	ldr	r3, [sp, #20]
 8010f24:	465a      	mov	r2, fp
 8010f26:	4631      	mov	r1, r6
 8010f28:	4628      	mov	r0, r5
 8010f2a:	47b8      	blx	r7
 8010f2c:	3001      	adds	r0, #1
 8010f2e:	f108 0801 	add.w	r8, r8, #1
 8010f32:	f43f ae73 	beq.w	8010c1c <_printf_float+0x9c>
 8010f36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f44:	f103 33ff 	add.w	r3, r3, #4294967295
 8010f48:	d018      	beq.n	8010f7c <_printf_float+0x3fc>
 8010f4a:	4642      	mov	r2, r8
 8010f4c:	4631      	mov	r1, r6
 8010f4e:	4628      	mov	r0, r5
 8010f50:	47b8      	blx	r7
 8010f52:	3001      	adds	r0, #1
 8010f54:	d10e      	bne.n	8010f74 <_printf_float+0x3f4>
 8010f56:	e661      	b.n	8010c1c <_printf_float+0x9c>
 8010f58:	2301      	movs	r3, #1
 8010f5a:	464a      	mov	r2, r9
 8010f5c:	4631      	mov	r1, r6
 8010f5e:	4628      	mov	r0, r5
 8010f60:	47b8      	blx	r7
 8010f62:	3001      	adds	r0, #1
 8010f64:	f43f ae5a 	beq.w	8010c1c <_printf_float+0x9c>
 8010f68:	f108 0801 	add.w	r8, r8, #1
 8010f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	4543      	cmp	r3, r8
 8010f72:	dcf1      	bgt.n	8010f58 <_printf_float+0x3d8>
 8010f74:	4653      	mov	r3, sl
 8010f76:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010f7a:	e6dd      	b.n	8010d38 <_printf_float+0x1b8>
 8010f7c:	f04f 0800 	mov.w	r8, #0
 8010f80:	f104 091a 	add.w	r9, r4, #26
 8010f84:	e7f2      	b.n	8010f6c <_printf_float+0x3ec>
 8010f86:	2301      	movs	r3, #1
 8010f88:	e7df      	b.n	8010f4a <_printf_float+0x3ca>
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	464a      	mov	r2, r9
 8010f8e:	4631      	mov	r1, r6
 8010f90:	4628      	mov	r0, r5
 8010f92:	47b8      	blx	r7
 8010f94:	3001      	adds	r0, #1
 8010f96:	f43f ae41 	beq.w	8010c1c <_printf_float+0x9c>
 8010f9a:	f108 0801 	add.w	r8, r8, #1
 8010f9e:	68e3      	ldr	r3, [r4, #12]
 8010fa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010fa2:	1a9b      	subs	r3, r3, r2
 8010fa4:	4543      	cmp	r3, r8
 8010fa6:	dcf0      	bgt.n	8010f8a <_printf_float+0x40a>
 8010fa8:	e6fa      	b.n	8010da0 <_printf_float+0x220>
 8010faa:	f04f 0800 	mov.w	r8, #0
 8010fae:	f104 0919 	add.w	r9, r4, #25
 8010fb2:	e7f4      	b.n	8010f9e <_printf_float+0x41e>
 8010fb4:	2900      	cmp	r1, #0
 8010fb6:	f43f ae8a 	beq.w	8010cce <_printf_float+0x14e>
 8010fba:	f04f 0c00 	mov.w	ip, #0
 8010fbe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010fc2:	e9cd 0900 	strd	r0, r9, [sp]
 8010fc6:	6022      	str	r2, [r4, #0]
 8010fc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010fcc:	4628      	mov	r0, r5
 8010fce:	f7ff fd52 	bl	8010a76 <__cvt>
 8010fd2:	4680      	mov	r8, r0
 8010fd4:	e64a      	b.n	8010c6c <_printf_float+0xec>
 8010fd6:	bf00      	nop

08010fd8 <_printf_common>:
 8010fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fdc:	4691      	mov	r9, r2
 8010fde:	461f      	mov	r7, r3
 8010fe0:	688a      	ldr	r2, [r1, #8]
 8010fe2:	690b      	ldr	r3, [r1, #16]
 8010fe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010fe8:	4293      	cmp	r3, r2
 8010fea:	bfb8      	it	lt
 8010fec:	4613      	movlt	r3, r2
 8010fee:	f8c9 3000 	str.w	r3, [r9]
 8010ff2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ff6:	4606      	mov	r6, r0
 8010ff8:	460c      	mov	r4, r1
 8010ffa:	b112      	cbz	r2, 8011002 <_printf_common+0x2a>
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	f8c9 3000 	str.w	r3, [r9]
 8011002:	6823      	ldr	r3, [r4, #0]
 8011004:	0699      	lsls	r1, r3, #26
 8011006:	bf42      	ittt	mi
 8011008:	f8d9 3000 	ldrmi.w	r3, [r9]
 801100c:	3302      	addmi	r3, #2
 801100e:	f8c9 3000 	strmi.w	r3, [r9]
 8011012:	6825      	ldr	r5, [r4, #0]
 8011014:	f015 0506 	ands.w	r5, r5, #6
 8011018:	d107      	bne.n	801102a <_printf_common+0x52>
 801101a:	f104 0a19 	add.w	sl, r4, #25
 801101e:	68e3      	ldr	r3, [r4, #12]
 8011020:	f8d9 2000 	ldr.w	r2, [r9]
 8011024:	1a9b      	subs	r3, r3, r2
 8011026:	42ab      	cmp	r3, r5
 8011028:	dc28      	bgt.n	801107c <_printf_common+0xa4>
 801102a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801102e:	6822      	ldr	r2, [r4, #0]
 8011030:	3300      	adds	r3, #0
 8011032:	bf18      	it	ne
 8011034:	2301      	movne	r3, #1
 8011036:	0692      	lsls	r2, r2, #26
 8011038:	d42d      	bmi.n	8011096 <_printf_common+0xbe>
 801103a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801103e:	4639      	mov	r1, r7
 8011040:	4630      	mov	r0, r6
 8011042:	47c0      	blx	r8
 8011044:	3001      	adds	r0, #1
 8011046:	d020      	beq.n	801108a <_printf_common+0xb2>
 8011048:	6823      	ldr	r3, [r4, #0]
 801104a:	68e5      	ldr	r5, [r4, #12]
 801104c:	f8d9 2000 	ldr.w	r2, [r9]
 8011050:	f003 0306 	and.w	r3, r3, #6
 8011054:	2b04      	cmp	r3, #4
 8011056:	bf08      	it	eq
 8011058:	1aad      	subeq	r5, r5, r2
 801105a:	68a3      	ldr	r3, [r4, #8]
 801105c:	6922      	ldr	r2, [r4, #16]
 801105e:	bf0c      	ite	eq
 8011060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011064:	2500      	movne	r5, #0
 8011066:	4293      	cmp	r3, r2
 8011068:	bfc4      	itt	gt
 801106a:	1a9b      	subgt	r3, r3, r2
 801106c:	18ed      	addgt	r5, r5, r3
 801106e:	f04f 0900 	mov.w	r9, #0
 8011072:	341a      	adds	r4, #26
 8011074:	454d      	cmp	r5, r9
 8011076:	d11a      	bne.n	80110ae <_printf_common+0xd6>
 8011078:	2000      	movs	r0, #0
 801107a:	e008      	b.n	801108e <_printf_common+0xb6>
 801107c:	2301      	movs	r3, #1
 801107e:	4652      	mov	r2, sl
 8011080:	4639      	mov	r1, r7
 8011082:	4630      	mov	r0, r6
 8011084:	47c0      	blx	r8
 8011086:	3001      	adds	r0, #1
 8011088:	d103      	bne.n	8011092 <_printf_common+0xba>
 801108a:	f04f 30ff 	mov.w	r0, #4294967295
 801108e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011092:	3501      	adds	r5, #1
 8011094:	e7c3      	b.n	801101e <_printf_common+0x46>
 8011096:	18e1      	adds	r1, r4, r3
 8011098:	1c5a      	adds	r2, r3, #1
 801109a:	2030      	movs	r0, #48	; 0x30
 801109c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80110a0:	4422      	add	r2, r4
 80110a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80110a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80110aa:	3302      	adds	r3, #2
 80110ac:	e7c5      	b.n	801103a <_printf_common+0x62>
 80110ae:	2301      	movs	r3, #1
 80110b0:	4622      	mov	r2, r4
 80110b2:	4639      	mov	r1, r7
 80110b4:	4630      	mov	r0, r6
 80110b6:	47c0      	blx	r8
 80110b8:	3001      	adds	r0, #1
 80110ba:	d0e6      	beq.n	801108a <_printf_common+0xb2>
 80110bc:	f109 0901 	add.w	r9, r9, #1
 80110c0:	e7d8      	b.n	8011074 <_printf_common+0x9c>
	...

080110c4 <_printf_i>:
 80110c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80110cc:	460c      	mov	r4, r1
 80110ce:	7e09      	ldrb	r1, [r1, #24]
 80110d0:	b085      	sub	sp, #20
 80110d2:	296e      	cmp	r1, #110	; 0x6e
 80110d4:	4617      	mov	r7, r2
 80110d6:	4606      	mov	r6, r0
 80110d8:	4698      	mov	r8, r3
 80110da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110dc:	f000 80b3 	beq.w	8011246 <_printf_i+0x182>
 80110e0:	d822      	bhi.n	8011128 <_printf_i+0x64>
 80110e2:	2963      	cmp	r1, #99	; 0x63
 80110e4:	d036      	beq.n	8011154 <_printf_i+0x90>
 80110e6:	d80a      	bhi.n	80110fe <_printf_i+0x3a>
 80110e8:	2900      	cmp	r1, #0
 80110ea:	f000 80b9 	beq.w	8011260 <_printf_i+0x19c>
 80110ee:	2958      	cmp	r1, #88	; 0x58
 80110f0:	f000 8083 	beq.w	80111fa <_printf_i+0x136>
 80110f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80110f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80110fc:	e032      	b.n	8011164 <_printf_i+0xa0>
 80110fe:	2964      	cmp	r1, #100	; 0x64
 8011100:	d001      	beq.n	8011106 <_printf_i+0x42>
 8011102:	2969      	cmp	r1, #105	; 0x69
 8011104:	d1f6      	bne.n	80110f4 <_printf_i+0x30>
 8011106:	6820      	ldr	r0, [r4, #0]
 8011108:	6813      	ldr	r3, [r2, #0]
 801110a:	0605      	lsls	r5, r0, #24
 801110c:	f103 0104 	add.w	r1, r3, #4
 8011110:	d52a      	bpl.n	8011168 <_printf_i+0xa4>
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	6011      	str	r1, [r2, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	da03      	bge.n	8011122 <_printf_i+0x5e>
 801111a:	222d      	movs	r2, #45	; 0x2d
 801111c:	425b      	negs	r3, r3
 801111e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011122:	486f      	ldr	r0, [pc, #444]	; (80112e0 <_printf_i+0x21c>)
 8011124:	220a      	movs	r2, #10
 8011126:	e039      	b.n	801119c <_printf_i+0xd8>
 8011128:	2973      	cmp	r1, #115	; 0x73
 801112a:	f000 809d 	beq.w	8011268 <_printf_i+0x1a4>
 801112e:	d808      	bhi.n	8011142 <_printf_i+0x7e>
 8011130:	296f      	cmp	r1, #111	; 0x6f
 8011132:	d020      	beq.n	8011176 <_printf_i+0xb2>
 8011134:	2970      	cmp	r1, #112	; 0x70
 8011136:	d1dd      	bne.n	80110f4 <_printf_i+0x30>
 8011138:	6823      	ldr	r3, [r4, #0]
 801113a:	f043 0320 	orr.w	r3, r3, #32
 801113e:	6023      	str	r3, [r4, #0]
 8011140:	e003      	b.n	801114a <_printf_i+0x86>
 8011142:	2975      	cmp	r1, #117	; 0x75
 8011144:	d017      	beq.n	8011176 <_printf_i+0xb2>
 8011146:	2978      	cmp	r1, #120	; 0x78
 8011148:	d1d4      	bne.n	80110f4 <_printf_i+0x30>
 801114a:	2378      	movs	r3, #120	; 0x78
 801114c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011150:	4864      	ldr	r0, [pc, #400]	; (80112e4 <_printf_i+0x220>)
 8011152:	e055      	b.n	8011200 <_printf_i+0x13c>
 8011154:	6813      	ldr	r3, [r2, #0]
 8011156:	1d19      	adds	r1, r3, #4
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	6011      	str	r1, [r2, #0]
 801115c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011164:	2301      	movs	r3, #1
 8011166:	e08c      	b.n	8011282 <_printf_i+0x1be>
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	6011      	str	r1, [r2, #0]
 801116c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011170:	bf18      	it	ne
 8011172:	b21b      	sxthne	r3, r3
 8011174:	e7cf      	b.n	8011116 <_printf_i+0x52>
 8011176:	6813      	ldr	r3, [r2, #0]
 8011178:	6825      	ldr	r5, [r4, #0]
 801117a:	1d18      	adds	r0, r3, #4
 801117c:	6010      	str	r0, [r2, #0]
 801117e:	0628      	lsls	r0, r5, #24
 8011180:	d501      	bpl.n	8011186 <_printf_i+0xc2>
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	e002      	b.n	801118c <_printf_i+0xc8>
 8011186:	0668      	lsls	r0, r5, #25
 8011188:	d5fb      	bpl.n	8011182 <_printf_i+0xbe>
 801118a:	881b      	ldrh	r3, [r3, #0]
 801118c:	4854      	ldr	r0, [pc, #336]	; (80112e0 <_printf_i+0x21c>)
 801118e:	296f      	cmp	r1, #111	; 0x6f
 8011190:	bf14      	ite	ne
 8011192:	220a      	movne	r2, #10
 8011194:	2208      	moveq	r2, #8
 8011196:	2100      	movs	r1, #0
 8011198:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801119c:	6865      	ldr	r5, [r4, #4]
 801119e:	60a5      	str	r5, [r4, #8]
 80111a0:	2d00      	cmp	r5, #0
 80111a2:	f2c0 8095 	blt.w	80112d0 <_printf_i+0x20c>
 80111a6:	6821      	ldr	r1, [r4, #0]
 80111a8:	f021 0104 	bic.w	r1, r1, #4
 80111ac:	6021      	str	r1, [r4, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d13d      	bne.n	801122e <_printf_i+0x16a>
 80111b2:	2d00      	cmp	r5, #0
 80111b4:	f040 808e 	bne.w	80112d4 <_printf_i+0x210>
 80111b8:	4665      	mov	r5, ip
 80111ba:	2a08      	cmp	r2, #8
 80111bc:	d10b      	bne.n	80111d6 <_printf_i+0x112>
 80111be:	6823      	ldr	r3, [r4, #0]
 80111c0:	07db      	lsls	r3, r3, #31
 80111c2:	d508      	bpl.n	80111d6 <_printf_i+0x112>
 80111c4:	6923      	ldr	r3, [r4, #16]
 80111c6:	6862      	ldr	r2, [r4, #4]
 80111c8:	429a      	cmp	r2, r3
 80111ca:	bfde      	ittt	le
 80111cc:	2330      	movle	r3, #48	; 0x30
 80111ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80111d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80111d6:	ebac 0305 	sub.w	r3, ip, r5
 80111da:	6123      	str	r3, [r4, #16]
 80111dc:	f8cd 8000 	str.w	r8, [sp]
 80111e0:	463b      	mov	r3, r7
 80111e2:	aa03      	add	r2, sp, #12
 80111e4:	4621      	mov	r1, r4
 80111e6:	4630      	mov	r0, r6
 80111e8:	f7ff fef6 	bl	8010fd8 <_printf_common>
 80111ec:	3001      	adds	r0, #1
 80111ee:	d14d      	bne.n	801128c <_printf_i+0x1c8>
 80111f0:	f04f 30ff 	mov.w	r0, #4294967295
 80111f4:	b005      	add	sp, #20
 80111f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111fa:	4839      	ldr	r0, [pc, #228]	; (80112e0 <_printf_i+0x21c>)
 80111fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011200:	6813      	ldr	r3, [r2, #0]
 8011202:	6821      	ldr	r1, [r4, #0]
 8011204:	1d1d      	adds	r5, r3, #4
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	6015      	str	r5, [r2, #0]
 801120a:	060a      	lsls	r2, r1, #24
 801120c:	d50b      	bpl.n	8011226 <_printf_i+0x162>
 801120e:	07ca      	lsls	r2, r1, #31
 8011210:	bf44      	itt	mi
 8011212:	f041 0120 	orrmi.w	r1, r1, #32
 8011216:	6021      	strmi	r1, [r4, #0]
 8011218:	b91b      	cbnz	r3, 8011222 <_printf_i+0x15e>
 801121a:	6822      	ldr	r2, [r4, #0]
 801121c:	f022 0220 	bic.w	r2, r2, #32
 8011220:	6022      	str	r2, [r4, #0]
 8011222:	2210      	movs	r2, #16
 8011224:	e7b7      	b.n	8011196 <_printf_i+0xd2>
 8011226:	064d      	lsls	r5, r1, #25
 8011228:	bf48      	it	mi
 801122a:	b29b      	uxthmi	r3, r3
 801122c:	e7ef      	b.n	801120e <_printf_i+0x14a>
 801122e:	4665      	mov	r5, ip
 8011230:	fbb3 f1f2 	udiv	r1, r3, r2
 8011234:	fb02 3311 	mls	r3, r2, r1, r3
 8011238:	5cc3      	ldrb	r3, [r0, r3]
 801123a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801123e:	460b      	mov	r3, r1
 8011240:	2900      	cmp	r1, #0
 8011242:	d1f5      	bne.n	8011230 <_printf_i+0x16c>
 8011244:	e7b9      	b.n	80111ba <_printf_i+0xf6>
 8011246:	6813      	ldr	r3, [r2, #0]
 8011248:	6825      	ldr	r5, [r4, #0]
 801124a:	6961      	ldr	r1, [r4, #20]
 801124c:	1d18      	adds	r0, r3, #4
 801124e:	6010      	str	r0, [r2, #0]
 8011250:	0628      	lsls	r0, r5, #24
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	d501      	bpl.n	801125a <_printf_i+0x196>
 8011256:	6019      	str	r1, [r3, #0]
 8011258:	e002      	b.n	8011260 <_printf_i+0x19c>
 801125a:	066a      	lsls	r2, r5, #25
 801125c:	d5fb      	bpl.n	8011256 <_printf_i+0x192>
 801125e:	8019      	strh	r1, [r3, #0]
 8011260:	2300      	movs	r3, #0
 8011262:	6123      	str	r3, [r4, #16]
 8011264:	4665      	mov	r5, ip
 8011266:	e7b9      	b.n	80111dc <_printf_i+0x118>
 8011268:	6813      	ldr	r3, [r2, #0]
 801126a:	1d19      	adds	r1, r3, #4
 801126c:	6011      	str	r1, [r2, #0]
 801126e:	681d      	ldr	r5, [r3, #0]
 8011270:	6862      	ldr	r2, [r4, #4]
 8011272:	2100      	movs	r1, #0
 8011274:	4628      	mov	r0, r5
 8011276:	f7ee fffb 	bl	8000270 <memchr>
 801127a:	b108      	cbz	r0, 8011280 <_printf_i+0x1bc>
 801127c:	1b40      	subs	r0, r0, r5
 801127e:	6060      	str	r0, [r4, #4]
 8011280:	6863      	ldr	r3, [r4, #4]
 8011282:	6123      	str	r3, [r4, #16]
 8011284:	2300      	movs	r3, #0
 8011286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801128a:	e7a7      	b.n	80111dc <_printf_i+0x118>
 801128c:	6923      	ldr	r3, [r4, #16]
 801128e:	462a      	mov	r2, r5
 8011290:	4639      	mov	r1, r7
 8011292:	4630      	mov	r0, r6
 8011294:	47c0      	blx	r8
 8011296:	3001      	adds	r0, #1
 8011298:	d0aa      	beq.n	80111f0 <_printf_i+0x12c>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	079b      	lsls	r3, r3, #30
 801129e:	d413      	bmi.n	80112c8 <_printf_i+0x204>
 80112a0:	68e0      	ldr	r0, [r4, #12]
 80112a2:	9b03      	ldr	r3, [sp, #12]
 80112a4:	4298      	cmp	r0, r3
 80112a6:	bfb8      	it	lt
 80112a8:	4618      	movlt	r0, r3
 80112aa:	e7a3      	b.n	80111f4 <_printf_i+0x130>
 80112ac:	2301      	movs	r3, #1
 80112ae:	464a      	mov	r2, r9
 80112b0:	4639      	mov	r1, r7
 80112b2:	4630      	mov	r0, r6
 80112b4:	47c0      	blx	r8
 80112b6:	3001      	adds	r0, #1
 80112b8:	d09a      	beq.n	80111f0 <_printf_i+0x12c>
 80112ba:	3501      	adds	r5, #1
 80112bc:	68e3      	ldr	r3, [r4, #12]
 80112be:	9a03      	ldr	r2, [sp, #12]
 80112c0:	1a9b      	subs	r3, r3, r2
 80112c2:	42ab      	cmp	r3, r5
 80112c4:	dcf2      	bgt.n	80112ac <_printf_i+0x1e8>
 80112c6:	e7eb      	b.n	80112a0 <_printf_i+0x1dc>
 80112c8:	2500      	movs	r5, #0
 80112ca:	f104 0919 	add.w	r9, r4, #25
 80112ce:	e7f5      	b.n	80112bc <_printf_i+0x1f8>
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1ac      	bne.n	801122e <_printf_i+0x16a>
 80112d4:	7803      	ldrb	r3, [r0, #0]
 80112d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80112da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80112de:	e76c      	b.n	80111ba <_printf_i+0xf6>
 80112e0:	08014aa6 	.word	0x08014aa6
 80112e4:	08014ab7 	.word	0x08014ab7

080112e8 <_scanf_float>:
 80112e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ec:	469a      	mov	sl, r3
 80112ee:	688b      	ldr	r3, [r1, #8]
 80112f0:	4616      	mov	r6, r2
 80112f2:	1e5a      	subs	r2, r3, #1
 80112f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80112f8:	b087      	sub	sp, #28
 80112fa:	bf83      	ittte	hi
 80112fc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011300:	189b      	addhi	r3, r3, r2
 8011302:	9301      	strhi	r3, [sp, #4]
 8011304:	2300      	movls	r3, #0
 8011306:	bf86      	itte	hi
 8011308:	f240 135d 	movwhi	r3, #349	; 0x15d
 801130c:	608b      	strhi	r3, [r1, #8]
 801130e:	9301      	strls	r3, [sp, #4]
 8011310:	680b      	ldr	r3, [r1, #0]
 8011312:	4688      	mov	r8, r1
 8011314:	f04f 0b00 	mov.w	fp, #0
 8011318:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801131c:	f848 3b1c 	str.w	r3, [r8], #28
 8011320:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011324:	4607      	mov	r7, r0
 8011326:	460c      	mov	r4, r1
 8011328:	4645      	mov	r5, r8
 801132a:	465a      	mov	r2, fp
 801132c:	46d9      	mov	r9, fp
 801132e:	f8cd b008 	str.w	fp, [sp, #8]
 8011332:	68a1      	ldr	r1, [r4, #8]
 8011334:	b181      	cbz	r1, 8011358 <_scanf_float+0x70>
 8011336:	6833      	ldr	r3, [r6, #0]
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	2b49      	cmp	r3, #73	; 0x49
 801133c:	d071      	beq.n	8011422 <_scanf_float+0x13a>
 801133e:	d84d      	bhi.n	80113dc <_scanf_float+0xf4>
 8011340:	2b39      	cmp	r3, #57	; 0x39
 8011342:	d840      	bhi.n	80113c6 <_scanf_float+0xde>
 8011344:	2b31      	cmp	r3, #49	; 0x31
 8011346:	f080 8088 	bcs.w	801145a <_scanf_float+0x172>
 801134a:	2b2d      	cmp	r3, #45	; 0x2d
 801134c:	f000 8090 	beq.w	8011470 <_scanf_float+0x188>
 8011350:	d815      	bhi.n	801137e <_scanf_float+0x96>
 8011352:	2b2b      	cmp	r3, #43	; 0x2b
 8011354:	f000 808c 	beq.w	8011470 <_scanf_float+0x188>
 8011358:	f1b9 0f00 	cmp.w	r9, #0
 801135c:	d003      	beq.n	8011366 <_scanf_float+0x7e>
 801135e:	6823      	ldr	r3, [r4, #0]
 8011360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011364:	6023      	str	r3, [r4, #0]
 8011366:	3a01      	subs	r2, #1
 8011368:	2a01      	cmp	r2, #1
 801136a:	f200 80ea 	bhi.w	8011542 <_scanf_float+0x25a>
 801136e:	4545      	cmp	r5, r8
 8011370:	f200 80dc 	bhi.w	801152c <_scanf_float+0x244>
 8011374:	2601      	movs	r6, #1
 8011376:	4630      	mov	r0, r6
 8011378:	b007      	add	sp, #28
 801137a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801137e:	2b2e      	cmp	r3, #46	; 0x2e
 8011380:	f000 809f 	beq.w	80114c2 <_scanf_float+0x1da>
 8011384:	2b30      	cmp	r3, #48	; 0x30
 8011386:	d1e7      	bne.n	8011358 <_scanf_float+0x70>
 8011388:	6820      	ldr	r0, [r4, #0]
 801138a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801138e:	d064      	beq.n	801145a <_scanf_float+0x172>
 8011390:	9b01      	ldr	r3, [sp, #4]
 8011392:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011396:	6020      	str	r0, [r4, #0]
 8011398:	f109 0901 	add.w	r9, r9, #1
 801139c:	b11b      	cbz	r3, 80113a6 <_scanf_float+0xbe>
 801139e:	3b01      	subs	r3, #1
 80113a0:	3101      	adds	r1, #1
 80113a2:	9301      	str	r3, [sp, #4]
 80113a4:	60a1      	str	r1, [r4, #8]
 80113a6:	68a3      	ldr	r3, [r4, #8]
 80113a8:	3b01      	subs	r3, #1
 80113aa:	60a3      	str	r3, [r4, #8]
 80113ac:	6923      	ldr	r3, [r4, #16]
 80113ae:	3301      	adds	r3, #1
 80113b0:	6123      	str	r3, [r4, #16]
 80113b2:	6873      	ldr	r3, [r6, #4]
 80113b4:	3b01      	subs	r3, #1
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	6073      	str	r3, [r6, #4]
 80113ba:	f340 80ac 	ble.w	8011516 <_scanf_float+0x22e>
 80113be:	6833      	ldr	r3, [r6, #0]
 80113c0:	3301      	adds	r3, #1
 80113c2:	6033      	str	r3, [r6, #0]
 80113c4:	e7b5      	b.n	8011332 <_scanf_float+0x4a>
 80113c6:	2b45      	cmp	r3, #69	; 0x45
 80113c8:	f000 8085 	beq.w	80114d6 <_scanf_float+0x1ee>
 80113cc:	2b46      	cmp	r3, #70	; 0x46
 80113ce:	d06a      	beq.n	80114a6 <_scanf_float+0x1be>
 80113d0:	2b41      	cmp	r3, #65	; 0x41
 80113d2:	d1c1      	bne.n	8011358 <_scanf_float+0x70>
 80113d4:	2a01      	cmp	r2, #1
 80113d6:	d1bf      	bne.n	8011358 <_scanf_float+0x70>
 80113d8:	2202      	movs	r2, #2
 80113da:	e046      	b.n	801146a <_scanf_float+0x182>
 80113dc:	2b65      	cmp	r3, #101	; 0x65
 80113de:	d07a      	beq.n	80114d6 <_scanf_float+0x1ee>
 80113e0:	d818      	bhi.n	8011414 <_scanf_float+0x12c>
 80113e2:	2b54      	cmp	r3, #84	; 0x54
 80113e4:	d066      	beq.n	80114b4 <_scanf_float+0x1cc>
 80113e6:	d811      	bhi.n	801140c <_scanf_float+0x124>
 80113e8:	2b4e      	cmp	r3, #78	; 0x4e
 80113ea:	d1b5      	bne.n	8011358 <_scanf_float+0x70>
 80113ec:	2a00      	cmp	r2, #0
 80113ee:	d146      	bne.n	801147e <_scanf_float+0x196>
 80113f0:	f1b9 0f00 	cmp.w	r9, #0
 80113f4:	d145      	bne.n	8011482 <_scanf_float+0x19a>
 80113f6:	6821      	ldr	r1, [r4, #0]
 80113f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80113fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011400:	d13f      	bne.n	8011482 <_scanf_float+0x19a>
 8011402:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011406:	6021      	str	r1, [r4, #0]
 8011408:	2201      	movs	r2, #1
 801140a:	e02e      	b.n	801146a <_scanf_float+0x182>
 801140c:	2b59      	cmp	r3, #89	; 0x59
 801140e:	d01e      	beq.n	801144e <_scanf_float+0x166>
 8011410:	2b61      	cmp	r3, #97	; 0x61
 8011412:	e7de      	b.n	80113d2 <_scanf_float+0xea>
 8011414:	2b6e      	cmp	r3, #110	; 0x6e
 8011416:	d0e9      	beq.n	80113ec <_scanf_float+0x104>
 8011418:	d815      	bhi.n	8011446 <_scanf_float+0x15e>
 801141a:	2b66      	cmp	r3, #102	; 0x66
 801141c:	d043      	beq.n	80114a6 <_scanf_float+0x1be>
 801141e:	2b69      	cmp	r3, #105	; 0x69
 8011420:	d19a      	bne.n	8011358 <_scanf_float+0x70>
 8011422:	f1bb 0f00 	cmp.w	fp, #0
 8011426:	d138      	bne.n	801149a <_scanf_float+0x1b2>
 8011428:	f1b9 0f00 	cmp.w	r9, #0
 801142c:	d197      	bne.n	801135e <_scanf_float+0x76>
 801142e:	6821      	ldr	r1, [r4, #0]
 8011430:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011434:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011438:	d195      	bne.n	8011366 <_scanf_float+0x7e>
 801143a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801143e:	6021      	str	r1, [r4, #0]
 8011440:	f04f 0b01 	mov.w	fp, #1
 8011444:	e011      	b.n	801146a <_scanf_float+0x182>
 8011446:	2b74      	cmp	r3, #116	; 0x74
 8011448:	d034      	beq.n	80114b4 <_scanf_float+0x1cc>
 801144a:	2b79      	cmp	r3, #121	; 0x79
 801144c:	d184      	bne.n	8011358 <_scanf_float+0x70>
 801144e:	f1bb 0f07 	cmp.w	fp, #7
 8011452:	d181      	bne.n	8011358 <_scanf_float+0x70>
 8011454:	f04f 0b08 	mov.w	fp, #8
 8011458:	e007      	b.n	801146a <_scanf_float+0x182>
 801145a:	eb12 0f0b 	cmn.w	r2, fp
 801145e:	f47f af7b 	bne.w	8011358 <_scanf_float+0x70>
 8011462:	6821      	ldr	r1, [r4, #0]
 8011464:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011468:	6021      	str	r1, [r4, #0]
 801146a:	702b      	strb	r3, [r5, #0]
 801146c:	3501      	adds	r5, #1
 801146e:	e79a      	b.n	80113a6 <_scanf_float+0xbe>
 8011470:	6821      	ldr	r1, [r4, #0]
 8011472:	0608      	lsls	r0, r1, #24
 8011474:	f57f af70 	bpl.w	8011358 <_scanf_float+0x70>
 8011478:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801147c:	e7f4      	b.n	8011468 <_scanf_float+0x180>
 801147e:	2a02      	cmp	r2, #2
 8011480:	d047      	beq.n	8011512 <_scanf_float+0x22a>
 8011482:	f1bb 0f01 	cmp.w	fp, #1
 8011486:	d003      	beq.n	8011490 <_scanf_float+0x1a8>
 8011488:	f1bb 0f04 	cmp.w	fp, #4
 801148c:	f47f af64 	bne.w	8011358 <_scanf_float+0x70>
 8011490:	f10b 0b01 	add.w	fp, fp, #1
 8011494:	fa5f fb8b 	uxtb.w	fp, fp
 8011498:	e7e7      	b.n	801146a <_scanf_float+0x182>
 801149a:	f1bb 0f03 	cmp.w	fp, #3
 801149e:	d0f7      	beq.n	8011490 <_scanf_float+0x1a8>
 80114a0:	f1bb 0f05 	cmp.w	fp, #5
 80114a4:	e7f2      	b.n	801148c <_scanf_float+0x1a4>
 80114a6:	f1bb 0f02 	cmp.w	fp, #2
 80114aa:	f47f af55 	bne.w	8011358 <_scanf_float+0x70>
 80114ae:	f04f 0b03 	mov.w	fp, #3
 80114b2:	e7da      	b.n	801146a <_scanf_float+0x182>
 80114b4:	f1bb 0f06 	cmp.w	fp, #6
 80114b8:	f47f af4e 	bne.w	8011358 <_scanf_float+0x70>
 80114bc:	f04f 0b07 	mov.w	fp, #7
 80114c0:	e7d3      	b.n	801146a <_scanf_float+0x182>
 80114c2:	6821      	ldr	r1, [r4, #0]
 80114c4:	0588      	lsls	r0, r1, #22
 80114c6:	f57f af47 	bpl.w	8011358 <_scanf_float+0x70>
 80114ca:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80114ce:	6021      	str	r1, [r4, #0]
 80114d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80114d4:	e7c9      	b.n	801146a <_scanf_float+0x182>
 80114d6:	6821      	ldr	r1, [r4, #0]
 80114d8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80114dc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80114e0:	d006      	beq.n	80114f0 <_scanf_float+0x208>
 80114e2:	0548      	lsls	r0, r1, #21
 80114e4:	f57f af38 	bpl.w	8011358 <_scanf_float+0x70>
 80114e8:	f1b9 0f00 	cmp.w	r9, #0
 80114ec:	f43f af3b 	beq.w	8011366 <_scanf_float+0x7e>
 80114f0:	0588      	lsls	r0, r1, #22
 80114f2:	bf58      	it	pl
 80114f4:	9802      	ldrpl	r0, [sp, #8]
 80114f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80114fa:	bf58      	it	pl
 80114fc:	eba9 0000 	subpl.w	r0, r9, r0
 8011500:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8011504:	bf58      	it	pl
 8011506:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801150a:	6021      	str	r1, [r4, #0]
 801150c:	f04f 0900 	mov.w	r9, #0
 8011510:	e7ab      	b.n	801146a <_scanf_float+0x182>
 8011512:	2203      	movs	r2, #3
 8011514:	e7a9      	b.n	801146a <_scanf_float+0x182>
 8011516:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801151a:	9205      	str	r2, [sp, #20]
 801151c:	4631      	mov	r1, r6
 801151e:	4638      	mov	r0, r7
 8011520:	4798      	blx	r3
 8011522:	9a05      	ldr	r2, [sp, #20]
 8011524:	2800      	cmp	r0, #0
 8011526:	f43f af04 	beq.w	8011332 <_scanf_float+0x4a>
 801152a:	e715      	b.n	8011358 <_scanf_float+0x70>
 801152c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011530:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011534:	4632      	mov	r2, r6
 8011536:	4638      	mov	r0, r7
 8011538:	4798      	blx	r3
 801153a:	6923      	ldr	r3, [r4, #16]
 801153c:	3b01      	subs	r3, #1
 801153e:	6123      	str	r3, [r4, #16]
 8011540:	e715      	b.n	801136e <_scanf_float+0x86>
 8011542:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011546:	2b06      	cmp	r3, #6
 8011548:	d80a      	bhi.n	8011560 <_scanf_float+0x278>
 801154a:	f1bb 0f02 	cmp.w	fp, #2
 801154e:	d966      	bls.n	801161e <_scanf_float+0x336>
 8011550:	f1ab 0b03 	sub.w	fp, fp, #3
 8011554:	fa5f fb8b 	uxtb.w	fp, fp
 8011558:	eba5 0b0b 	sub.w	fp, r5, fp
 801155c:	455d      	cmp	r5, fp
 801155e:	d149      	bne.n	80115f4 <_scanf_float+0x30c>
 8011560:	6823      	ldr	r3, [r4, #0]
 8011562:	05da      	lsls	r2, r3, #23
 8011564:	d51f      	bpl.n	80115a6 <_scanf_float+0x2be>
 8011566:	055b      	lsls	r3, r3, #21
 8011568:	d466      	bmi.n	8011638 <_scanf_float+0x350>
 801156a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801156e:	6923      	ldr	r3, [r4, #16]
 8011570:	2965      	cmp	r1, #101	; 0x65
 8011572:	f103 33ff 	add.w	r3, r3, #4294967295
 8011576:	f105 3bff 	add.w	fp, r5, #4294967295
 801157a:	6123      	str	r3, [r4, #16]
 801157c:	d00d      	beq.n	801159a <_scanf_float+0x2b2>
 801157e:	2945      	cmp	r1, #69	; 0x45
 8011580:	d00b      	beq.n	801159a <_scanf_float+0x2b2>
 8011582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011586:	4632      	mov	r2, r6
 8011588:	4638      	mov	r0, r7
 801158a:	4798      	blx	r3
 801158c:	6923      	ldr	r3, [r4, #16]
 801158e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8011592:	3b01      	subs	r3, #1
 8011594:	f1a5 0b02 	sub.w	fp, r5, #2
 8011598:	6123      	str	r3, [r4, #16]
 801159a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801159e:	4632      	mov	r2, r6
 80115a0:	4638      	mov	r0, r7
 80115a2:	4798      	blx	r3
 80115a4:	465d      	mov	r5, fp
 80115a6:	6826      	ldr	r6, [r4, #0]
 80115a8:	f016 0610 	ands.w	r6, r6, #16
 80115ac:	d170      	bne.n	8011690 <_scanf_float+0x3a8>
 80115ae:	702e      	strb	r6, [r5, #0]
 80115b0:	6823      	ldr	r3, [r4, #0]
 80115b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80115b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115ba:	d140      	bne.n	801163e <_scanf_float+0x356>
 80115bc:	9b02      	ldr	r3, [sp, #8]
 80115be:	eba9 0303 	sub.w	r3, r9, r3
 80115c2:	425a      	negs	r2, r3
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d147      	bne.n	8011658 <_scanf_float+0x370>
 80115c8:	2200      	movs	r2, #0
 80115ca:	4638      	mov	r0, r7
 80115cc:	4641      	mov	r1, r8
 80115ce:	f000 fe83 	bl	80122d8 <_strtod_r>
 80115d2:	6820      	ldr	r0, [r4, #0]
 80115d4:	f8da 3000 	ldr.w	r3, [sl]
 80115d8:	f010 0f02 	tst.w	r0, #2
 80115dc:	f103 0204 	add.w	r2, r3, #4
 80115e0:	f8ca 2000 	str.w	r2, [sl]
 80115e4:	d043      	beq.n	801166e <_scanf_float+0x386>
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	ed83 0b00 	vstr	d0, [r3]
 80115ec:	68e3      	ldr	r3, [r4, #12]
 80115ee:	3301      	adds	r3, #1
 80115f0:	60e3      	str	r3, [r4, #12]
 80115f2:	e6c0      	b.n	8011376 <_scanf_float+0x8e>
 80115f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80115f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80115fc:	4632      	mov	r2, r6
 80115fe:	4638      	mov	r0, r7
 8011600:	4798      	blx	r3
 8011602:	6923      	ldr	r3, [r4, #16]
 8011604:	3b01      	subs	r3, #1
 8011606:	6123      	str	r3, [r4, #16]
 8011608:	e7a8      	b.n	801155c <_scanf_float+0x274>
 801160a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801160e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011612:	4632      	mov	r2, r6
 8011614:	4638      	mov	r0, r7
 8011616:	4798      	blx	r3
 8011618:	6923      	ldr	r3, [r4, #16]
 801161a:	3b01      	subs	r3, #1
 801161c:	6123      	str	r3, [r4, #16]
 801161e:	4545      	cmp	r5, r8
 8011620:	d8f3      	bhi.n	801160a <_scanf_float+0x322>
 8011622:	e6a7      	b.n	8011374 <_scanf_float+0x8c>
 8011624:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011628:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801162c:	4632      	mov	r2, r6
 801162e:	4638      	mov	r0, r7
 8011630:	4798      	blx	r3
 8011632:	6923      	ldr	r3, [r4, #16]
 8011634:	3b01      	subs	r3, #1
 8011636:	6123      	str	r3, [r4, #16]
 8011638:	4545      	cmp	r5, r8
 801163a:	d8f3      	bhi.n	8011624 <_scanf_float+0x33c>
 801163c:	e69a      	b.n	8011374 <_scanf_float+0x8c>
 801163e:	9b03      	ldr	r3, [sp, #12]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d0c1      	beq.n	80115c8 <_scanf_float+0x2e0>
 8011644:	9904      	ldr	r1, [sp, #16]
 8011646:	230a      	movs	r3, #10
 8011648:	4632      	mov	r2, r6
 801164a:	3101      	adds	r1, #1
 801164c:	4638      	mov	r0, r7
 801164e:	f000 fecf 	bl	80123f0 <_strtol_r>
 8011652:	9b03      	ldr	r3, [sp, #12]
 8011654:	9d04      	ldr	r5, [sp, #16]
 8011656:	1ac2      	subs	r2, r0, r3
 8011658:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801165c:	429d      	cmp	r5, r3
 801165e:	bf28      	it	cs
 8011660:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011664:	490b      	ldr	r1, [pc, #44]	; (8011694 <_scanf_float+0x3ac>)
 8011666:	4628      	mov	r0, r5
 8011668:	f000 f81c 	bl	80116a4 <siprintf>
 801166c:	e7ac      	b.n	80115c8 <_scanf_float+0x2e0>
 801166e:	f010 0004 	ands.w	r0, r0, #4
 8011672:	d1b8      	bne.n	80115e6 <_scanf_float+0x2fe>
 8011674:	eeb4 0b40 	vcmp.f64	d0, d0
 8011678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801167c:	681d      	ldr	r5, [r3, #0]
 801167e:	d704      	bvc.n	801168a <_scanf_float+0x3a2>
 8011680:	f000 f80a 	bl	8011698 <nanf>
 8011684:	ed85 0a00 	vstr	s0, [r5]
 8011688:	e7b0      	b.n	80115ec <_scanf_float+0x304>
 801168a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801168e:	e7f9      	b.n	8011684 <_scanf_float+0x39c>
 8011690:	2600      	movs	r6, #0
 8011692:	e670      	b.n	8011376 <_scanf_float+0x8e>
 8011694:	08014ac8 	.word	0x08014ac8

08011698 <nanf>:
 8011698:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80116a0 <nanf+0x8>
 801169c:	4770      	bx	lr
 801169e:	bf00      	nop
 80116a0:	7fc00000 	.word	0x7fc00000

080116a4 <siprintf>:
 80116a4:	b40e      	push	{r1, r2, r3}
 80116a6:	b500      	push	{lr}
 80116a8:	b09c      	sub	sp, #112	; 0x70
 80116aa:	ab1d      	add	r3, sp, #116	; 0x74
 80116ac:	9002      	str	r0, [sp, #8]
 80116ae:	9006      	str	r0, [sp, #24]
 80116b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80116b4:	4809      	ldr	r0, [pc, #36]	; (80116dc <siprintf+0x38>)
 80116b6:	9107      	str	r1, [sp, #28]
 80116b8:	9104      	str	r1, [sp, #16]
 80116ba:	4909      	ldr	r1, [pc, #36]	; (80116e0 <siprintf+0x3c>)
 80116bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80116c0:	9105      	str	r1, [sp, #20]
 80116c2:	6800      	ldr	r0, [r0, #0]
 80116c4:	9301      	str	r3, [sp, #4]
 80116c6:	a902      	add	r1, sp, #8
 80116c8:	f002 fce2 	bl	8014090 <_svfiprintf_r>
 80116cc:	9b02      	ldr	r3, [sp, #8]
 80116ce:	2200      	movs	r2, #0
 80116d0:	701a      	strb	r2, [r3, #0]
 80116d2:	b01c      	add	sp, #112	; 0x70
 80116d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80116d8:	b003      	add	sp, #12
 80116da:	4770      	bx	lr
 80116dc:	2000006c 	.word	0x2000006c
 80116e0:	ffff0208 	.word	0xffff0208

080116e4 <strncpy>:
 80116e4:	b570      	push	{r4, r5, r6, lr}
 80116e6:	3901      	subs	r1, #1
 80116e8:	4604      	mov	r4, r0
 80116ea:	b902      	cbnz	r2, 80116ee <strncpy+0xa>
 80116ec:	bd70      	pop	{r4, r5, r6, pc}
 80116ee:	4623      	mov	r3, r4
 80116f0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80116f4:	f803 5b01 	strb.w	r5, [r3], #1
 80116f8:	1e56      	subs	r6, r2, #1
 80116fa:	b92d      	cbnz	r5, 8011708 <strncpy+0x24>
 80116fc:	4414      	add	r4, r2
 80116fe:	42a3      	cmp	r3, r4
 8011700:	d0f4      	beq.n	80116ec <strncpy+0x8>
 8011702:	f803 5b01 	strb.w	r5, [r3], #1
 8011706:	e7fa      	b.n	80116fe <strncpy+0x1a>
 8011708:	461c      	mov	r4, r3
 801170a:	4632      	mov	r2, r6
 801170c:	e7ed      	b.n	80116ea <strncpy+0x6>

0801170e <sulp>:
 801170e:	b570      	push	{r4, r5, r6, lr}
 8011710:	4604      	mov	r4, r0
 8011712:	460d      	mov	r5, r1
 8011714:	4616      	mov	r6, r2
 8011716:	ec45 4b10 	vmov	d0, r4, r5
 801171a:	f002 fa75 	bl	8013c08 <__ulp>
 801171e:	b17e      	cbz	r6, 8011740 <sulp+0x32>
 8011720:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011724:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011728:	2b00      	cmp	r3, #0
 801172a:	dd09      	ble.n	8011740 <sulp+0x32>
 801172c:	051b      	lsls	r3, r3, #20
 801172e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011732:	2000      	movs	r0, #0
 8011734:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8011738:	ec41 0b17 	vmov	d7, r0, r1
 801173c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011740:	bd70      	pop	{r4, r5, r6, pc}
 8011742:	0000      	movs	r0, r0
 8011744:	0000      	movs	r0, r0
	...

08011748 <_strtod_l>:
 8011748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174c:	ed2d 8b0c 	vpush	{d8-d13}
 8011750:	4698      	mov	r8, r3
 8011752:	b09d      	sub	sp, #116	; 0x74
 8011754:	2300      	movs	r3, #0
 8011756:	4604      	mov	r4, r0
 8011758:	4640      	mov	r0, r8
 801175a:	460e      	mov	r6, r1
 801175c:	9214      	str	r2, [sp, #80]	; 0x50
 801175e:	9318      	str	r3, [sp, #96]	; 0x60
 8011760:	f001 ff5b 	bl	801361a <__localeconv_l>
 8011764:	4681      	mov	r9, r0
 8011766:	6800      	ldr	r0, [r0, #0]
 8011768:	f7ee fd74 	bl	8000254 <strlen>
 801176c:	f04f 0a00 	mov.w	sl, #0
 8011770:	4607      	mov	r7, r0
 8011772:	f04f 0b00 	mov.w	fp, #0
 8011776:	9617      	str	r6, [sp, #92]	; 0x5c
 8011778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801177a:	781a      	ldrb	r2, [r3, #0]
 801177c:	2a0d      	cmp	r2, #13
 801177e:	d834      	bhi.n	80117ea <_strtod_l+0xa2>
 8011780:	2a09      	cmp	r2, #9
 8011782:	d238      	bcs.n	80117f6 <_strtod_l+0xae>
 8011784:	2a00      	cmp	r2, #0
 8011786:	d040      	beq.n	801180a <_strtod_l+0xc2>
 8011788:	2300      	movs	r3, #0
 801178a:	930d      	str	r3, [sp, #52]	; 0x34
 801178c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801178e:	782b      	ldrb	r3, [r5, #0]
 8011790:	2b30      	cmp	r3, #48	; 0x30
 8011792:	f040 80b3 	bne.w	80118fc <_strtod_l+0x1b4>
 8011796:	786b      	ldrb	r3, [r5, #1]
 8011798:	2b58      	cmp	r3, #88	; 0x58
 801179a:	d001      	beq.n	80117a0 <_strtod_l+0x58>
 801179c:	2b78      	cmp	r3, #120	; 0x78
 801179e:	d169      	bne.n	8011874 <_strtod_l+0x12c>
 80117a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117a2:	9301      	str	r3, [sp, #4]
 80117a4:	ab18      	add	r3, sp, #96	; 0x60
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	f8cd 8008 	str.w	r8, [sp, #8]
 80117ac:	ab19      	add	r3, sp, #100	; 0x64
 80117ae:	4a8f      	ldr	r2, [pc, #572]	; (80119ec <_strtod_l+0x2a4>)
 80117b0:	a917      	add	r1, sp, #92	; 0x5c
 80117b2:	4620      	mov	r0, r4
 80117b4:	f001 fc57 	bl	8013066 <__gethex>
 80117b8:	f010 0607 	ands.w	r6, r0, #7
 80117bc:	4607      	mov	r7, r0
 80117be:	d005      	beq.n	80117cc <_strtod_l+0x84>
 80117c0:	2e06      	cmp	r6, #6
 80117c2:	d12c      	bne.n	801181e <_strtod_l+0xd6>
 80117c4:	3501      	adds	r5, #1
 80117c6:	2300      	movs	r3, #0
 80117c8:	9517      	str	r5, [sp, #92]	; 0x5c
 80117ca:	930d      	str	r3, [sp, #52]	; 0x34
 80117cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f040 855e 	bne.w	8012290 <_strtod_l+0xb48>
 80117d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117d6:	b1eb      	cbz	r3, 8011814 <_strtod_l+0xcc>
 80117d8:	ec4b ab17 	vmov	d7, sl, fp
 80117dc:	eeb1 0b47 	vneg.f64	d0, d7
 80117e0:	b01d      	add	sp, #116	; 0x74
 80117e2:	ecbd 8b0c 	vpop	{d8-d13}
 80117e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ea:	2a2b      	cmp	r2, #43	; 0x2b
 80117ec:	d015      	beq.n	801181a <_strtod_l+0xd2>
 80117ee:	2a2d      	cmp	r2, #45	; 0x2d
 80117f0:	d004      	beq.n	80117fc <_strtod_l+0xb4>
 80117f2:	2a20      	cmp	r2, #32
 80117f4:	d1c8      	bne.n	8011788 <_strtod_l+0x40>
 80117f6:	3301      	adds	r3, #1
 80117f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80117fa:	e7bd      	b.n	8011778 <_strtod_l+0x30>
 80117fc:	2201      	movs	r2, #1
 80117fe:	920d      	str	r2, [sp, #52]	; 0x34
 8011800:	1c5a      	adds	r2, r3, #1
 8011802:	9217      	str	r2, [sp, #92]	; 0x5c
 8011804:	785b      	ldrb	r3, [r3, #1]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d1c0      	bne.n	801178c <_strtod_l+0x44>
 801180a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801180c:	9617      	str	r6, [sp, #92]	; 0x5c
 801180e:	2b00      	cmp	r3, #0
 8011810:	f040 853c 	bne.w	801228c <_strtod_l+0xb44>
 8011814:	ec4b ab10 	vmov	d0, sl, fp
 8011818:	e7e2      	b.n	80117e0 <_strtod_l+0x98>
 801181a:	2200      	movs	r2, #0
 801181c:	e7ef      	b.n	80117fe <_strtod_l+0xb6>
 801181e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011820:	b13a      	cbz	r2, 8011832 <_strtod_l+0xea>
 8011822:	2135      	movs	r1, #53	; 0x35
 8011824:	a81a      	add	r0, sp, #104	; 0x68
 8011826:	f002 fae8 	bl	8013dfa <__copybits>
 801182a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801182c:	4620      	mov	r0, r4
 801182e:	f001 ff53 	bl	80136d8 <_Bfree>
 8011832:	3e01      	subs	r6, #1
 8011834:	2e04      	cmp	r6, #4
 8011836:	d806      	bhi.n	8011846 <_strtod_l+0xfe>
 8011838:	e8df f006 	tbb	[pc, r6]
 801183c:	1714030a 	.word	0x1714030a
 8011840:	0a          	.byte	0x0a
 8011841:	00          	.byte	0x00
 8011842:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011846:	073b      	lsls	r3, r7, #28
 8011848:	d5c0      	bpl.n	80117cc <_strtod_l+0x84>
 801184a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801184e:	e7bd      	b.n	80117cc <_strtod_l+0x84>
 8011850:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011854:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011856:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801185a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801185e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011862:	e7f0      	b.n	8011846 <_strtod_l+0xfe>
 8011864:	f8df b188 	ldr.w	fp, [pc, #392]	; 80119f0 <_strtod_l+0x2a8>
 8011868:	e7ed      	b.n	8011846 <_strtod_l+0xfe>
 801186a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801186e:	f04f 3aff 	mov.w	sl, #4294967295
 8011872:	e7e8      	b.n	8011846 <_strtod_l+0xfe>
 8011874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011876:	1c5a      	adds	r2, r3, #1
 8011878:	9217      	str	r2, [sp, #92]	; 0x5c
 801187a:	785b      	ldrb	r3, [r3, #1]
 801187c:	2b30      	cmp	r3, #48	; 0x30
 801187e:	d0f9      	beq.n	8011874 <_strtod_l+0x12c>
 8011880:	2b00      	cmp	r3, #0
 8011882:	d0a3      	beq.n	80117cc <_strtod_l+0x84>
 8011884:	2301      	movs	r3, #1
 8011886:	930a      	str	r3, [sp, #40]	; 0x28
 8011888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801188a:	930c      	str	r3, [sp, #48]	; 0x30
 801188c:	2300      	movs	r3, #0
 801188e:	9306      	str	r3, [sp, #24]
 8011890:	9308      	str	r3, [sp, #32]
 8011892:	461d      	mov	r5, r3
 8011894:	220a      	movs	r2, #10
 8011896:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011898:	f890 8000 	ldrb.w	r8, [r0]
 801189c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 80118a0:	b2d9      	uxtb	r1, r3
 80118a2:	2909      	cmp	r1, #9
 80118a4:	d92c      	bls.n	8011900 <_strtod_l+0x1b8>
 80118a6:	463a      	mov	r2, r7
 80118a8:	f8d9 1000 	ldr.w	r1, [r9]
 80118ac:	f002 fcf8 	bl	80142a0 <strncmp>
 80118b0:	2800      	cmp	r0, #0
 80118b2:	d035      	beq.n	8011920 <_strtod_l+0x1d8>
 80118b4:	2000      	movs	r0, #0
 80118b6:	4642      	mov	r2, r8
 80118b8:	462b      	mov	r3, r5
 80118ba:	4601      	mov	r1, r0
 80118bc:	9004      	str	r0, [sp, #16]
 80118be:	2a65      	cmp	r2, #101	; 0x65
 80118c0:	d001      	beq.n	80118c6 <_strtod_l+0x17e>
 80118c2:	2a45      	cmp	r2, #69	; 0x45
 80118c4:	d117      	bne.n	80118f6 <_strtod_l+0x1ae>
 80118c6:	b923      	cbnz	r3, 80118d2 <_strtod_l+0x18a>
 80118c8:	b910      	cbnz	r0, 80118d0 <_strtod_l+0x188>
 80118ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d09c      	beq.n	801180a <_strtod_l+0xc2>
 80118d0:	2300      	movs	r3, #0
 80118d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80118d4:	1c72      	adds	r2, r6, #1
 80118d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80118d8:	7872      	ldrb	r2, [r6, #1]
 80118da:	2a2b      	cmp	r2, #43	; 0x2b
 80118dc:	f000 8082 	beq.w	80119e4 <_strtod_l+0x29c>
 80118e0:	2a2d      	cmp	r2, #45	; 0x2d
 80118e2:	d079      	beq.n	80119d8 <_strtod_l+0x290>
 80118e4:	f04f 0e00 	mov.w	lr, #0
 80118e8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80118ec:	f1bc 0f09 	cmp.w	ip, #9
 80118f0:	f240 8086 	bls.w	8011a00 <_strtod_l+0x2b8>
 80118f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80118f6:	f04f 0800 	mov.w	r8, #0
 80118fa:	e0a8      	b.n	8011a4e <_strtod_l+0x306>
 80118fc:	2300      	movs	r3, #0
 80118fe:	e7c2      	b.n	8011886 <_strtod_l+0x13e>
 8011900:	2d08      	cmp	r5, #8
 8011902:	bfd5      	itete	le
 8011904:	9908      	ldrle	r1, [sp, #32]
 8011906:	9906      	ldrgt	r1, [sp, #24]
 8011908:	fb02 3301 	mlale	r3, r2, r1, r3
 801190c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011910:	f100 0001 	add.w	r0, r0, #1
 8011914:	bfd4      	ite	le
 8011916:	9308      	strle	r3, [sp, #32]
 8011918:	9306      	strgt	r3, [sp, #24]
 801191a:	3501      	adds	r5, #1
 801191c:	9017      	str	r0, [sp, #92]	; 0x5c
 801191e:	e7ba      	b.n	8011896 <_strtod_l+0x14e>
 8011920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011922:	19da      	adds	r2, r3, r7
 8011924:	9217      	str	r2, [sp, #92]	; 0x5c
 8011926:	5dda      	ldrb	r2, [r3, r7]
 8011928:	2d00      	cmp	r5, #0
 801192a:	d038      	beq.n	801199e <_strtod_l+0x256>
 801192c:	4601      	mov	r1, r0
 801192e:	462b      	mov	r3, r5
 8011930:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8011934:	2f09      	cmp	r7, #9
 8011936:	d913      	bls.n	8011960 <_strtod_l+0x218>
 8011938:	2701      	movs	r7, #1
 801193a:	9704      	str	r7, [sp, #16]
 801193c:	e7bf      	b.n	80118be <_strtod_l+0x176>
 801193e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011940:	1c5a      	adds	r2, r3, #1
 8011942:	9217      	str	r2, [sp, #92]	; 0x5c
 8011944:	785a      	ldrb	r2, [r3, #1]
 8011946:	3001      	adds	r0, #1
 8011948:	2a30      	cmp	r2, #48	; 0x30
 801194a:	d0f8      	beq.n	801193e <_strtod_l+0x1f6>
 801194c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011950:	2b08      	cmp	r3, #8
 8011952:	f200 84a2 	bhi.w	801229a <_strtod_l+0xb52>
 8011956:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011958:	930c      	str	r3, [sp, #48]	; 0x30
 801195a:	4601      	mov	r1, r0
 801195c:	2000      	movs	r0, #0
 801195e:	4603      	mov	r3, r0
 8011960:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8011964:	f100 0701 	add.w	r7, r0, #1
 8011968:	d013      	beq.n	8011992 <_strtod_l+0x24a>
 801196a:	4439      	add	r1, r7
 801196c:	eb00 0e03 	add.w	lr, r0, r3
 8011970:	461f      	mov	r7, r3
 8011972:	f04f 0c0a 	mov.w	ip, #10
 8011976:	45be      	cmp	lr, r7
 8011978:	d113      	bne.n	80119a2 <_strtod_l+0x25a>
 801197a:	181f      	adds	r7, r3, r0
 801197c:	2f08      	cmp	r7, #8
 801197e:	f103 0301 	add.w	r3, r3, #1
 8011982:	4403      	add	r3, r0
 8011984:	dc1d      	bgt.n	80119c2 <_strtod_l+0x27a>
 8011986:	9a08      	ldr	r2, [sp, #32]
 8011988:	200a      	movs	r0, #10
 801198a:	fb00 8202 	mla	r2, r0, r2, r8
 801198e:	9208      	str	r2, [sp, #32]
 8011990:	2700      	movs	r7, #0
 8011992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011994:	1c50      	adds	r0, r2, #1
 8011996:	9017      	str	r0, [sp, #92]	; 0x5c
 8011998:	7852      	ldrb	r2, [r2, #1]
 801199a:	4638      	mov	r0, r7
 801199c:	e7c8      	b.n	8011930 <_strtod_l+0x1e8>
 801199e:	4628      	mov	r0, r5
 80119a0:	e7d2      	b.n	8011948 <_strtod_l+0x200>
 80119a2:	2f08      	cmp	r7, #8
 80119a4:	f107 0701 	add.w	r7, r7, #1
 80119a8:	dc04      	bgt.n	80119b4 <_strtod_l+0x26c>
 80119aa:	9a08      	ldr	r2, [sp, #32]
 80119ac:	fb0c f202 	mul.w	r2, ip, r2
 80119b0:	9208      	str	r2, [sp, #32]
 80119b2:	e7e0      	b.n	8011976 <_strtod_l+0x22e>
 80119b4:	2f10      	cmp	r7, #16
 80119b6:	bfde      	ittt	le
 80119b8:	9a06      	ldrle	r2, [sp, #24]
 80119ba:	fb0c f202 	mulle.w	r2, ip, r2
 80119be:	9206      	strle	r2, [sp, #24]
 80119c0:	e7d9      	b.n	8011976 <_strtod_l+0x22e>
 80119c2:	2b10      	cmp	r3, #16
 80119c4:	bfdf      	itttt	le
 80119c6:	9a06      	ldrle	r2, [sp, #24]
 80119c8:	200a      	movle	r0, #10
 80119ca:	fb00 8202 	mlale	r2, r0, r2, r8
 80119ce:	9206      	strle	r2, [sp, #24]
 80119d0:	e7de      	b.n	8011990 <_strtod_l+0x248>
 80119d2:	2301      	movs	r3, #1
 80119d4:	9304      	str	r3, [sp, #16]
 80119d6:	e777      	b.n	80118c8 <_strtod_l+0x180>
 80119d8:	f04f 0e01 	mov.w	lr, #1
 80119dc:	1cb2      	adds	r2, r6, #2
 80119de:	9217      	str	r2, [sp, #92]	; 0x5c
 80119e0:	78b2      	ldrb	r2, [r6, #2]
 80119e2:	e781      	b.n	80118e8 <_strtod_l+0x1a0>
 80119e4:	f04f 0e00 	mov.w	lr, #0
 80119e8:	e7f8      	b.n	80119dc <_strtod_l+0x294>
 80119ea:	bf00      	nop
 80119ec:	08014ad0 	.word	0x08014ad0
 80119f0:	7ff00000 	.word	0x7ff00000
 80119f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80119f6:	f102 0c01 	add.w	ip, r2, #1
 80119fa:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80119fe:	7852      	ldrb	r2, [r2, #1]
 8011a00:	2a30      	cmp	r2, #48	; 0x30
 8011a02:	d0f7      	beq.n	80119f4 <_strtod_l+0x2ac>
 8011a04:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8011a08:	f1bc 0f08 	cmp.w	ip, #8
 8011a0c:	f63f af73 	bhi.w	80118f6 <_strtod_l+0x1ae>
 8011a10:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8011a14:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011a16:	920e      	str	r2, [sp, #56]	; 0x38
 8011a18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011a1a:	f102 0c01 	add.w	ip, r2, #1
 8011a1e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011a22:	7852      	ldrb	r2, [r2, #1]
 8011a24:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011a28:	f1b9 0f09 	cmp.w	r9, #9
 8011a2c:	d939      	bls.n	8011aa2 <_strtod_l+0x35a>
 8011a2e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011a30:	ebac 0c07 	sub.w	ip, ip, r7
 8011a34:	f1bc 0f08 	cmp.w	ip, #8
 8011a38:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8011a3c:	dc37      	bgt.n	8011aae <_strtod_l+0x366>
 8011a3e:	45e0      	cmp	r8, ip
 8011a40:	bfa8      	it	ge
 8011a42:	46e0      	movge	r8, ip
 8011a44:	f1be 0f00 	cmp.w	lr, #0
 8011a48:	d001      	beq.n	8011a4e <_strtod_l+0x306>
 8011a4a:	f1c8 0800 	rsb	r8, r8, #0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d151      	bne.n	8011af6 <_strtod_l+0x3ae>
 8011a52:	2800      	cmp	r0, #0
 8011a54:	f47f aeba 	bne.w	80117cc <_strtod_l+0x84>
 8011a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f47f aeb6 	bne.w	80117cc <_strtod_l+0x84>
 8011a60:	9b04      	ldr	r3, [sp, #16]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f47f aed1 	bne.w	801180a <_strtod_l+0xc2>
 8011a68:	2a4e      	cmp	r2, #78	; 0x4e
 8011a6a:	d027      	beq.n	8011abc <_strtod_l+0x374>
 8011a6c:	dc21      	bgt.n	8011ab2 <_strtod_l+0x36a>
 8011a6e:	2a49      	cmp	r2, #73	; 0x49
 8011a70:	f47f aecb 	bne.w	801180a <_strtod_l+0xc2>
 8011a74:	499a      	ldr	r1, [pc, #616]	; (8011ce0 <_strtod_l+0x598>)
 8011a76:	a817      	add	r0, sp, #92	; 0x5c
 8011a78:	f001 fd28 	bl	80134cc <__match>
 8011a7c:	2800      	cmp	r0, #0
 8011a7e:	f43f aec4 	beq.w	801180a <_strtod_l+0xc2>
 8011a82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a84:	4997      	ldr	r1, [pc, #604]	; (8011ce4 <_strtod_l+0x59c>)
 8011a86:	3b01      	subs	r3, #1
 8011a88:	a817      	add	r0, sp, #92	; 0x5c
 8011a8a:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a8c:	f001 fd1e 	bl	80134cc <__match>
 8011a90:	b910      	cbnz	r0, 8011a98 <_strtod_l+0x350>
 8011a92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011a94:	3301      	adds	r3, #1
 8011a96:	9317      	str	r3, [sp, #92]	; 0x5c
 8011a98:	f8df b260 	ldr.w	fp, [pc, #608]	; 8011cfc <_strtod_l+0x5b4>
 8011a9c:	f04f 0a00 	mov.w	sl, #0
 8011aa0:	e694      	b.n	80117cc <_strtod_l+0x84>
 8011aa2:	270a      	movs	r7, #10
 8011aa4:	fb07 2808 	mla	r8, r7, r8, r2
 8011aa8:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8011aac:	e7b4      	b.n	8011a18 <_strtod_l+0x2d0>
 8011aae:	46e0      	mov	r8, ip
 8011ab0:	e7c8      	b.n	8011a44 <_strtod_l+0x2fc>
 8011ab2:	2a69      	cmp	r2, #105	; 0x69
 8011ab4:	d0de      	beq.n	8011a74 <_strtod_l+0x32c>
 8011ab6:	2a6e      	cmp	r2, #110	; 0x6e
 8011ab8:	f47f aea7 	bne.w	801180a <_strtod_l+0xc2>
 8011abc:	498a      	ldr	r1, [pc, #552]	; (8011ce8 <_strtod_l+0x5a0>)
 8011abe:	a817      	add	r0, sp, #92	; 0x5c
 8011ac0:	f001 fd04 	bl	80134cc <__match>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	f43f aea0 	beq.w	801180a <_strtod_l+0xc2>
 8011aca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	2b28      	cmp	r3, #40	; 0x28
 8011ad0:	d10e      	bne.n	8011af0 <_strtod_l+0x3a8>
 8011ad2:	aa1a      	add	r2, sp, #104	; 0x68
 8011ad4:	4985      	ldr	r1, [pc, #532]	; (8011cec <_strtod_l+0x5a4>)
 8011ad6:	a817      	add	r0, sp, #92	; 0x5c
 8011ad8:	f001 fd0c 	bl	80134f4 <__hexnan>
 8011adc:	2805      	cmp	r0, #5
 8011ade:	d107      	bne.n	8011af0 <_strtod_l+0x3a8>
 8011ae0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011ae2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011ae6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011aea:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011aee:	e66d      	b.n	80117cc <_strtod_l+0x84>
 8011af0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8011d00 <_strtod_l+0x5b8>
 8011af4:	e7d2      	b.n	8011a9c <_strtod_l+0x354>
 8011af6:	eddd 7a08 	vldr	s15, [sp, #32]
 8011afa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011afe:	eba8 0201 	sub.w	r2, r8, r1
 8011b02:	2d00      	cmp	r5, #0
 8011b04:	bf08      	it	eq
 8011b06:	461d      	moveq	r5, r3
 8011b08:	2b10      	cmp	r3, #16
 8011b0a:	9204      	str	r2, [sp, #16]
 8011b0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011b10:	461a      	mov	r2, r3
 8011b12:	bfa8      	it	ge
 8011b14:	2210      	movge	r2, #16
 8011b16:	2b09      	cmp	r3, #9
 8011b18:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011b1c:	dc14      	bgt.n	8011b48 <_strtod_l+0x400>
 8011b1e:	9904      	ldr	r1, [sp, #16]
 8011b20:	2900      	cmp	r1, #0
 8011b22:	f43f ae53 	beq.w	80117cc <_strtod_l+0x84>
 8011b26:	9904      	ldr	r1, [sp, #16]
 8011b28:	dd72      	ble.n	8011c10 <_strtod_l+0x4c8>
 8011b2a:	2916      	cmp	r1, #22
 8011b2c:	dc5a      	bgt.n	8011be4 <_strtod_l+0x49c>
 8011b2e:	4970      	ldr	r1, [pc, #448]	; (8011cf0 <_strtod_l+0x5a8>)
 8011b30:	9b04      	ldr	r3, [sp, #16]
 8011b32:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011b36:	ed91 7b00 	vldr	d7, [r1]
 8011b3a:	ec4b ab16 	vmov	d6, sl, fp
 8011b3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b42:	ec5b ab17 	vmov	sl, fp, d7
 8011b46:	e641      	b.n	80117cc <_strtod_l+0x84>
 8011b48:	4969      	ldr	r1, [pc, #420]	; (8011cf0 <_strtod_l+0x5a8>)
 8011b4a:	eddd 7a06 	vldr	s15, [sp, #24]
 8011b4e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011b52:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8011b56:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011b5a:	2b0f      	cmp	r3, #15
 8011b5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011b60:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011b64:	ec5b ab17 	vmov	sl, fp, d7
 8011b68:	ddd9      	ble.n	8011b1e <_strtod_l+0x3d6>
 8011b6a:	9904      	ldr	r1, [sp, #16]
 8011b6c:	1a9a      	subs	r2, r3, r2
 8011b6e:	440a      	add	r2, r1
 8011b70:	2a00      	cmp	r2, #0
 8011b72:	f340 8096 	ble.w	8011ca2 <_strtod_l+0x55a>
 8011b76:	f012 000f 	ands.w	r0, r2, #15
 8011b7a:	d00a      	beq.n	8011b92 <_strtod_l+0x44a>
 8011b7c:	495c      	ldr	r1, [pc, #368]	; (8011cf0 <_strtod_l+0x5a8>)
 8011b7e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011b82:	ed91 7b00 	vldr	d7, [r1]
 8011b86:	ec4b ab16 	vmov	d6, sl, fp
 8011b8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011b8e:	ec5b ab17 	vmov	sl, fp, d7
 8011b92:	f032 020f 	bics.w	r2, r2, #15
 8011b96:	d072      	beq.n	8011c7e <_strtod_l+0x536>
 8011b98:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011b9c:	dd45      	ble.n	8011c2a <_strtod_l+0x4e2>
 8011b9e:	2500      	movs	r5, #0
 8011ba0:	46a8      	mov	r8, r5
 8011ba2:	9506      	str	r5, [sp, #24]
 8011ba4:	46a9      	mov	r9, r5
 8011ba6:	2322      	movs	r3, #34	; 0x22
 8011ba8:	f8df b150 	ldr.w	fp, [pc, #336]	; 8011cfc <_strtod_l+0x5b4>
 8011bac:	6023      	str	r3, [r4, #0]
 8011bae:	f04f 0a00 	mov.w	sl, #0
 8011bb2:	9b06      	ldr	r3, [sp, #24]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	f43f ae09 	beq.w	80117cc <_strtod_l+0x84>
 8011bba:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f001 fd8b 	bl	80136d8 <_Bfree>
 8011bc2:	4649      	mov	r1, r9
 8011bc4:	4620      	mov	r0, r4
 8011bc6:	f001 fd87 	bl	80136d8 <_Bfree>
 8011bca:	4641      	mov	r1, r8
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f001 fd83 	bl	80136d8 <_Bfree>
 8011bd2:	9906      	ldr	r1, [sp, #24]
 8011bd4:	4620      	mov	r0, r4
 8011bd6:	f001 fd7f 	bl	80136d8 <_Bfree>
 8011bda:	4629      	mov	r1, r5
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f001 fd7b 	bl	80136d8 <_Bfree>
 8011be2:	e5f3      	b.n	80117cc <_strtod_l+0x84>
 8011be4:	9804      	ldr	r0, [sp, #16]
 8011be6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8011bea:	4281      	cmp	r1, r0
 8011bec:	dbbd      	blt.n	8011b6a <_strtod_l+0x422>
 8011bee:	4a40      	ldr	r2, [pc, #256]	; (8011cf0 <_strtod_l+0x5a8>)
 8011bf0:	f1c3 030f 	rsb	r3, r3, #15
 8011bf4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8011bf8:	ed91 7b00 	vldr	d7, [r1]
 8011bfc:	ec4b ab16 	vmov	d6, sl, fp
 8011c00:	1ac3      	subs	r3, r0, r3
 8011c02:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8011c06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c0a:	ed92 6b00 	vldr	d6, [r2]
 8011c0e:	e796      	b.n	8011b3e <_strtod_l+0x3f6>
 8011c10:	3116      	adds	r1, #22
 8011c12:	dbaa      	blt.n	8011b6a <_strtod_l+0x422>
 8011c14:	4936      	ldr	r1, [pc, #216]	; (8011cf0 <_strtod_l+0x5a8>)
 8011c16:	9b04      	ldr	r3, [sp, #16]
 8011c18:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8011c1c:	ed91 7b00 	vldr	d7, [r1]
 8011c20:	ec4b ab16 	vmov	d6, sl, fp
 8011c24:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011c28:	e78b      	b.n	8011b42 <_strtod_l+0x3fa>
 8011c2a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011c2e:	2000      	movs	r0, #0
 8011c30:	4e30      	ldr	r6, [pc, #192]	; (8011cf4 <_strtod_l+0x5ac>)
 8011c32:	1112      	asrs	r2, r2, #4
 8011c34:	4601      	mov	r1, r0
 8011c36:	2a01      	cmp	r2, #1
 8011c38:	dc23      	bgt.n	8011c82 <_strtod_l+0x53a>
 8011c3a:	b108      	cbz	r0, 8011c40 <_strtod_l+0x4f8>
 8011c3c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011c40:	4a2c      	ldr	r2, [pc, #176]	; (8011cf4 <_strtod_l+0x5ac>)
 8011c42:	482d      	ldr	r0, [pc, #180]	; (8011cf8 <_strtod_l+0x5b0>)
 8011c44:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8011c48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011c4c:	ed91 7b00 	vldr	d7, [r1]
 8011c50:	ec4b ab16 	vmov	d6, sl, fp
 8011c54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011c58:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c5c:	9907      	ldr	r1, [sp, #28]
 8011c5e:	4a27      	ldr	r2, [pc, #156]	; (8011cfc <_strtod_l+0x5b4>)
 8011c60:	400a      	ands	r2, r1
 8011c62:	4282      	cmp	r2, r0
 8011c64:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011c68:	d899      	bhi.n	8011b9e <_strtod_l+0x456>
 8011c6a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8011c6e:	4282      	cmp	r2, r0
 8011c70:	bf86      	itte	hi
 8011c72:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8011d04 <_strtod_l+0x5bc>
 8011c76:	f04f 3aff 	movhi.w	sl, #4294967295
 8011c7a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8011c7e:	2700      	movs	r7, #0
 8011c80:	e070      	b.n	8011d64 <_strtod_l+0x61c>
 8011c82:	07d7      	lsls	r7, r2, #31
 8011c84:	d50a      	bpl.n	8011c9c <_strtod_l+0x554>
 8011c86:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8011c8a:	ed90 7b00 	vldr	d7, [r0]
 8011c8e:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011c92:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011c96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011c9a:	2001      	movs	r0, #1
 8011c9c:	3101      	adds	r1, #1
 8011c9e:	1052      	asrs	r2, r2, #1
 8011ca0:	e7c9      	b.n	8011c36 <_strtod_l+0x4ee>
 8011ca2:	d0ec      	beq.n	8011c7e <_strtod_l+0x536>
 8011ca4:	4252      	negs	r2, r2
 8011ca6:	f012 000f 	ands.w	r0, r2, #15
 8011caa:	d00a      	beq.n	8011cc2 <_strtod_l+0x57a>
 8011cac:	4910      	ldr	r1, [pc, #64]	; (8011cf0 <_strtod_l+0x5a8>)
 8011cae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011cb2:	ed91 7b00 	vldr	d7, [r1]
 8011cb6:	ec4b ab16 	vmov	d6, sl, fp
 8011cba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8011cbe:	ec5b ab17 	vmov	sl, fp, d7
 8011cc2:	1112      	asrs	r2, r2, #4
 8011cc4:	d0db      	beq.n	8011c7e <_strtod_l+0x536>
 8011cc6:	2a1f      	cmp	r2, #31
 8011cc8:	dd1e      	ble.n	8011d08 <_strtod_l+0x5c0>
 8011cca:	2500      	movs	r5, #0
 8011ccc:	46a8      	mov	r8, r5
 8011cce:	9506      	str	r5, [sp, #24]
 8011cd0:	46a9      	mov	r9, r5
 8011cd2:	2322      	movs	r3, #34	; 0x22
 8011cd4:	f04f 0a00 	mov.w	sl, #0
 8011cd8:	f04f 0b00 	mov.w	fp, #0
 8011cdc:	6023      	str	r3, [r4, #0]
 8011cde:	e768      	b.n	8011bb2 <_strtod_l+0x46a>
 8011ce0:	08014a99 	.word	0x08014a99
 8011ce4:	08014b23 	.word	0x08014b23
 8011ce8:	08014aa1 	.word	0x08014aa1
 8011cec:	08014ae4 	.word	0x08014ae4
 8011cf0:	08014b60 	.word	0x08014b60
 8011cf4:	08014b38 	.word	0x08014b38
 8011cf8:	7ca00000 	.word	0x7ca00000
 8011cfc:	7ff00000 	.word	0x7ff00000
 8011d00:	fff80000 	.word	0xfff80000
 8011d04:	7fefffff 	.word	0x7fefffff
 8011d08:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8011d0c:	f012 0710 	ands.w	r7, r2, #16
 8011d10:	49ab      	ldr	r1, [pc, #684]	; (8011fc0 <_strtod_l+0x878>)
 8011d12:	bf18      	it	ne
 8011d14:	276a      	movne	r7, #106	; 0x6a
 8011d16:	2000      	movs	r0, #0
 8011d18:	2a00      	cmp	r2, #0
 8011d1a:	f300 8113 	bgt.w	8011f44 <_strtod_l+0x7fc>
 8011d1e:	b108      	cbz	r0, 8011d24 <_strtod_l+0x5dc>
 8011d20:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8011d24:	b1bf      	cbz	r7, 8011d56 <_strtod_l+0x60e>
 8011d26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8011d2a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8011d2e:	2a00      	cmp	r2, #0
 8011d30:	4659      	mov	r1, fp
 8011d32:	dd10      	ble.n	8011d56 <_strtod_l+0x60e>
 8011d34:	2a1f      	cmp	r2, #31
 8011d36:	f340 8113 	ble.w	8011f60 <_strtod_l+0x818>
 8011d3a:	2a34      	cmp	r2, #52	; 0x34
 8011d3c:	bfde      	ittt	le
 8011d3e:	3a20      	suble	r2, #32
 8011d40:	f04f 30ff 	movle.w	r0, #4294967295
 8011d44:	fa00 f202 	lslle.w	r2, r0, r2
 8011d48:	f04f 0a00 	mov.w	sl, #0
 8011d4c:	bfcc      	ite	gt
 8011d4e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011d52:	ea02 0b01 	andle.w	fp, r2, r1
 8011d56:	ec4b ab17 	vmov	d7, sl, fp
 8011d5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d62:	d0b2      	beq.n	8011cca <_strtod_l+0x582>
 8011d64:	9a08      	ldr	r2, [sp, #32]
 8011d66:	9200      	str	r2, [sp, #0]
 8011d68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011d6a:	462a      	mov	r2, r5
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f001 fd05 	bl	801377c <__s2b>
 8011d72:	9006      	str	r0, [sp, #24]
 8011d74:	2800      	cmp	r0, #0
 8011d76:	f43f af12 	beq.w	8011b9e <_strtod_l+0x456>
 8011d7a:	9a04      	ldr	r2, [sp, #16]
 8011d7c:	9b04      	ldr	r3, [sp, #16]
 8011d7e:	2a00      	cmp	r2, #0
 8011d80:	f1c3 0300 	rsb	r3, r3, #0
 8011d84:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8011fa8 <_strtod_l+0x860>
 8011d88:	bfa8      	it	ge
 8011d8a:	2300      	movge	r3, #0
 8011d8c:	ed9f ab88 	vldr	d10, [pc, #544]	; 8011fb0 <_strtod_l+0x868>
 8011d90:	ed9f bb89 	vldr	d11, [pc, #548]	; 8011fb8 <_strtod_l+0x870>
 8011d94:	930e      	str	r3, [sp, #56]	; 0x38
 8011d96:	2500      	movs	r5, #0
 8011d98:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011d9c:	9310      	str	r3, [sp, #64]	; 0x40
 8011d9e:	46a8      	mov	r8, r5
 8011da0:	9b06      	ldr	r3, [sp, #24]
 8011da2:	4620      	mov	r0, r4
 8011da4:	6859      	ldr	r1, [r3, #4]
 8011da6:	f001 fc63 	bl	8013670 <_Balloc>
 8011daa:	4681      	mov	r9, r0
 8011dac:	2800      	cmp	r0, #0
 8011dae:	f43f aefa 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011db2:	9b06      	ldr	r3, [sp, #24]
 8011db4:	691a      	ldr	r2, [r3, #16]
 8011db6:	3202      	adds	r2, #2
 8011db8:	f103 010c 	add.w	r1, r3, #12
 8011dbc:	0092      	lsls	r2, r2, #2
 8011dbe:	300c      	adds	r0, #12
 8011dc0:	f7fe fe46 	bl	8010a50 <memcpy>
 8011dc4:	aa1a      	add	r2, sp, #104	; 0x68
 8011dc6:	a919      	add	r1, sp, #100	; 0x64
 8011dc8:	ec4b ab10 	vmov	d0, sl, fp
 8011dcc:	4620      	mov	r0, r4
 8011dce:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8011dd2:	f001 ff8f 	bl	8013cf4 <__d2b>
 8011dd6:	9018      	str	r0, [sp, #96]	; 0x60
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	f43f aee4 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011dde:	2101      	movs	r1, #1
 8011de0:	4620      	mov	r0, r4
 8011de2:	f001 fd57 	bl	8013894 <__i2b>
 8011de6:	4680      	mov	r8, r0
 8011de8:	2800      	cmp	r0, #0
 8011dea:	f43f aedc 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011dee:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8011df0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011df2:	2e00      	cmp	r6, #0
 8011df4:	bfb1      	iteee	lt
 8011df6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8011df8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011dfa:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8011dfc:	18f3      	addge	r3, r6, r3
 8011dfe:	bfba      	itte	lt
 8011e00:	1b98      	sublt	r0, r3, r6
 8011e02:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011e04:	9308      	strge	r3, [sp, #32]
 8011e06:	eba6 0607 	sub.w	r6, r6, r7
 8011e0a:	bfb8      	it	lt
 8011e0c:	9308      	strlt	r3, [sp, #32]
 8011e0e:	4416      	add	r6, r2
 8011e10:	4b6c      	ldr	r3, [pc, #432]	; (8011fc4 <_strtod_l+0x87c>)
 8011e12:	3e01      	subs	r6, #1
 8011e14:	429e      	cmp	r6, r3
 8011e16:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011e1a:	f280 80b4 	bge.w	8011f86 <_strtod_l+0x83e>
 8011e1e:	1b9b      	subs	r3, r3, r6
 8011e20:	2b1f      	cmp	r3, #31
 8011e22:	eba2 0203 	sub.w	r2, r2, r3
 8011e26:	f04f 0101 	mov.w	r1, #1
 8011e2a:	f300 80a0 	bgt.w	8011f6e <_strtod_l+0x826>
 8011e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8011e32:	9311      	str	r3, [sp, #68]	; 0x44
 8011e34:	2300      	movs	r3, #0
 8011e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e38:	9b08      	ldr	r3, [sp, #32]
 8011e3a:	4413      	add	r3, r2
 8011e3c:	4402      	add	r2, r0
 8011e3e:	18be      	adds	r6, r7, r2
 8011e40:	9a08      	ldr	r2, [sp, #32]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	bfa8      	it	ge
 8011e46:	461a      	movge	r2, r3
 8011e48:	42b2      	cmp	r2, r6
 8011e4a:	bfa8      	it	ge
 8011e4c:	4632      	movge	r2, r6
 8011e4e:	2a00      	cmp	r2, #0
 8011e50:	dd04      	ble.n	8011e5c <_strtod_l+0x714>
 8011e52:	9908      	ldr	r1, [sp, #32]
 8011e54:	1a9b      	subs	r3, r3, r2
 8011e56:	1ab6      	subs	r6, r6, r2
 8011e58:	1a8a      	subs	r2, r1, r2
 8011e5a:	9208      	str	r2, [sp, #32]
 8011e5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e5e:	b1c2      	cbz	r2, 8011e92 <_strtod_l+0x74a>
 8011e60:	4641      	mov	r1, r8
 8011e62:	4620      	mov	r0, r4
 8011e64:	9315      	str	r3, [sp, #84]	; 0x54
 8011e66:	f001 fdb5 	bl	80139d4 <__pow5mult>
 8011e6a:	4680      	mov	r8, r0
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	f43f ae9a 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011e72:	4601      	mov	r1, r0
 8011e74:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011e76:	4620      	mov	r0, r4
 8011e78:	f001 fd15 	bl	80138a6 <__multiply>
 8011e7c:	900c      	str	r0, [sp, #48]	; 0x30
 8011e7e:	2800      	cmp	r0, #0
 8011e80:	f43f ae91 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011e84:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011e86:	4620      	mov	r0, r4
 8011e88:	f001 fc26 	bl	80136d8 <_Bfree>
 8011e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e90:	9218      	str	r2, [sp, #96]	; 0x60
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	dc7c      	bgt.n	8011f90 <_strtod_l+0x848>
 8011e96:	9b04      	ldr	r3, [sp, #16]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	dd08      	ble.n	8011eae <_strtod_l+0x766>
 8011e9c:	4649      	mov	r1, r9
 8011e9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f001 fd97 	bl	80139d4 <__pow5mult>
 8011ea6:	4681      	mov	r9, r0
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	f43f ae7c 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011eae:	2e00      	cmp	r6, #0
 8011eb0:	dd08      	ble.n	8011ec4 <_strtod_l+0x77c>
 8011eb2:	4649      	mov	r1, r9
 8011eb4:	4632      	mov	r2, r6
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f001 fdda 	bl	8013a70 <__lshift>
 8011ebc:	4681      	mov	r9, r0
 8011ebe:	2800      	cmp	r0, #0
 8011ec0:	f43f ae71 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011ec4:	9b08      	ldr	r3, [sp, #32]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	dd08      	ble.n	8011edc <_strtod_l+0x794>
 8011eca:	4641      	mov	r1, r8
 8011ecc:	461a      	mov	r2, r3
 8011ece:	4620      	mov	r0, r4
 8011ed0:	f001 fdce 	bl	8013a70 <__lshift>
 8011ed4:	4680      	mov	r8, r0
 8011ed6:	2800      	cmp	r0, #0
 8011ed8:	f43f ae65 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011edc:	464a      	mov	r2, r9
 8011ede:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f001 fe33 	bl	8013b4c <__mdiff>
 8011ee6:	4605      	mov	r5, r0
 8011ee8:	2800      	cmp	r0, #0
 8011eea:	f43f ae5c 	beq.w	8011ba6 <_strtod_l+0x45e>
 8011eee:	68c3      	ldr	r3, [r0, #12]
 8011ef0:	930c      	str	r3, [sp, #48]	; 0x30
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60c3      	str	r3, [r0, #12]
 8011ef6:	4641      	mov	r1, r8
 8011ef8:	f001 fe0e 	bl	8013b18 <__mcmp>
 8011efc:	2800      	cmp	r0, #0
 8011efe:	da63      	bge.n	8011fc8 <_strtod_l+0x880>
 8011f00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f02:	b9e3      	cbnz	r3, 8011f3e <_strtod_l+0x7f6>
 8011f04:	f1ba 0f00 	cmp.w	sl, #0
 8011f08:	d119      	bne.n	8011f3e <_strtod_l+0x7f6>
 8011f0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f0e:	b9b3      	cbnz	r3, 8011f3e <_strtod_l+0x7f6>
 8011f10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011f14:	0d1b      	lsrs	r3, r3, #20
 8011f16:	051b      	lsls	r3, r3, #20
 8011f18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011f1c:	d90f      	bls.n	8011f3e <_strtod_l+0x7f6>
 8011f1e:	696b      	ldr	r3, [r5, #20]
 8011f20:	b913      	cbnz	r3, 8011f28 <_strtod_l+0x7e0>
 8011f22:	692b      	ldr	r3, [r5, #16]
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	dd0a      	ble.n	8011f3e <_strtod_l+0x7f6>
 8011f28:	4629      	mov	r1, r5
 8011f2a:	2201      	movs	r2, #1
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	f001 fd9f 	bl	8013a70 <__lshift>
 8011f32:	4641      	mov	r1, r8
 8011f34:	4605      	mov	r5, r0
 8011f36:	f001 fdef 	bl	8013b18 <__mcmp>
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	dc75      	bgt.n	801202a <_strtod_l+0x8e2>
 8011f3e:	2f00      	cmp	r7, #0
 8011f40:	d17f      	bne.n	8012042 <_strtod_l+0x8fa>
 8011f42:	e63a      	b.n	8011bba <_strtod_l+0x472>
 8011f44:	07d6      	lsls	r6, r2, #31
 8011f46:	d508      	bpl.n	8011f5a <_strtod_l+0x812>
 8011f48:	ed9d 6b06 	vldr	d6, [sp, #24]
 8011f4c:	ed91 7b00 	vldr	d7, [r1]
 8011f50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011f54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011f58:	2001      	movs	r0, #1
 8011f5a:	1052      	asrs	r2, r2, #1
 8011f5c:	3108      	adds	r1, #8
 8011f5e:	e6db      	b.n	8011d18 <_strtod_l+0x5d0>
 8011f60:	f04f 31ff 	mov.w	r1, #4294967295
 8011f64:	fa01 f202 	lsl.w	r2, r1, r2
 8011f68:	ea02 0a0a 	and.w	sl, r2, sl
 8011f6c:	e6f3      	b.n	8011d56 <_strtod_l+0x60e>
 8011f6e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011f72:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011f76:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011f7a:	36e2      	adds	r6, #226	; 0xe2
 8011f7c:	fa01 f306 	lsl.w	r3, r1, r6
 8011f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f82:	9111      	str	r1, [sp, #68]	; 0x44
 8011f84:	e758      	b.n	8011e38 <_strtod_l+0x6f0>
 8011f86:	2300      	movs	r3, #0
 8011f88:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	9311      	str	r3, [sp, #68]	; 0x44
 8011f8e:	e753      	b.n	8011e38 <_strtod_l+0x6f0>
 8011f90:	461a      	mov	r2, r3
 8011f92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011f94:	4620      	mov	r0, r4
 8011f96:	f001 fd6b 	bl	8013a70 <__lshift>
 8011f9a:	9018      	str	r0, [sp, #96]	; 0x60
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	f47f af7a 	bne.w	8011e96 <_strtod_l+0x74e>
 8011fa2:	e600      	b.n	8011ba6 <_strtod_l+0x45e>
 8011fa4:	f3af 8000 	nop.w
 8011fa8:	94a03595 	.word	0x94a03595
 8011fac:	3fdfffff 	.word	0x3fdfffff
 8011fb0:	35afe535 	.word	0x35afe535
 8011fb4:	3fe00000 	.word	0x3fe00000
 8011fb8:	94a03595 	.word	0x94a03595
 8011fbc:	3fcfffff 	.word	0x3fcfffff
 8011fc0:	08014af8 	.word	0x08014af8
 8011fc4:	fffffc02 	.word	0xfffffc02
 8011fc8:	f8cd b020 	str.w	fp, [sp, #32]
 8011fcc:	f040 8085 	bne.w	80120da <_strtod_l+0x992>
 8011fd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fd2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011fd6:	b322      	cbz	r2, 8012022 <_strtod_l+0x8da>
 8011fd8:	4ab7      	ldr	r2, [pc, #732]	; (80122b8 <_strtod_l+0xb70>)
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	d154      	bne.n	8012088 <_strtod_l+0x940>
 8011fde:	4651      	mov	r1, sl
 8011fe0:	b1e7      	cbz	r7, 801201c <_strtod_l+0x8d4>
 8011fe2:	4bb6      	ldr	r3, [pc, #728]	; (80122bc <_strtod_l+0xb74>)
 8011fe4:	465a      	mov	r2, fp
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011fec:	f04f 32ff 	mov.w	r2, #4294967295
 8011ff0:	d803      	bhi.n	8011ffa <_strtod_l+0x8b2>
 8011ff2:	0d1b      	lsrs	r3, r3, #20
 8011ff4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011ff8:	409a      	lsls	r2, r3
 8011ffa:	4291      	cmp	r1, r2
 8011ffc:	d144      	bne.n	8012088 <_strtod_l+0x940>
 8011ffe:	4bb0      	ldr	r3, [pc, #704]	; (80122c0 <_strtod_l+0xb78>)
 8012000:	9a08      	ldr	r2, [sp, #32]
 8012002:	429a      	cmp	r2, r3
 8012004:	d102      	bne.n	801200c <_strtod_l+0x8c4>
 8012006:	3101      	adds	r1, #1
 8012008:	f43f adcd 	beq.w	8011ba6 <_strtod_l+0x45e>
 801200c:	4bab      	ldr	r3, [pc, #684]	; (80122bc <_strtod_l+0xb74>)
 801200e:	9a08      	ldr	r2, [sp, #32]
 8012010:	401a      	ands	r2, r3
 8012012:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8012016:	f04f 0a00 	mov.w	sl, #0
 801201a:	e790      	b.n	8011f3e <_strtod_l+0x7f6>
 801201c:	f04f 32ff 	mov.w	r2, #4294967295
 8012020:	e7eb      	b.n	8011ffa <_strtod_l+0x8b2>
 8012022:	bb8b      	cbnz	r3, 8012088 <_strtod_l+0x940>
 8012024:	f1ba 0f00 	cmp.w	sl, #0
 8012028:	d12e      	bne.n	8012088 <_strtod_l+0x940>
 801202a:	465b      	mov	r3, fp
 801202c:	4aa3      	ldr	r2, [pc, #652]	; (80122bc <_strtod_l+0xb74>)
 801202e:	b30f      	cbz	r7, 8012074 <_strtod_l+0x92c>
 8012030:	ea02 010b 	and.w	r1, r2, fp
 8012034:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012038:	dc1c      	bgt.n	8012074 <_strtod_l+0x92c>
 801203a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801203e:	f77f ae48 	ble.w	8011cd2 <_strtod_l+0x58a>
 8012042:	4aa0      	ldr	r2, [pc, #640]	; (80122c4 <_strtod_l+0xb7c>)
 8012044:	2300      	movs	r3, #0
 8012046:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 801204a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 801204e:	ec4b ab17 	vmov	d7, sl, fp
 8012052:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012056:	ed8d 7b04 	vstr	d7, [sp, #16]
 801205a:	9b05      	ldr	r3, [sp, #20]
 801205c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012060:	2b00      	cmp	r3, #0
 8012062:	f47f adaa 	bne.w	8011bba <_strtod_l+0x472>
 8012066:	9b04      	ldr	r3, [sp, #16]
 8012068:	2b00      	cmp	r3, #0
 801206a:	f47f ada6 	bne.w	8011bba <_strtod_l+0x472>
 801206e:	2322      	movs	r3, #34	; 0x22
 8012070:	6023      	str	r3, [r4, #0]
 8012072:	e5a2      	b.n	8011bba <_strtod_l+0x472>
 8012074:	4013      	ands	r3, r2
 8012076:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801207a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801207e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012082:	f04f 3aff 	mov.w	sl, #4294967295
 8012086:	e75a      	b.n	8011f3e <_strtod_l+0x7f6>
 8012088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801208a:	b18b      	cbz	r3, 80120b0 <_strtod_l+0x968>
 801208c:	9a08      	ldr	r2, [sp, #32]
 801208e:	4213      	tst	r3, r2
 8012090:	f43f af55 	beq.w	8011f3e <_strtod_l+0x7f6>
 8012094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012096:	463a      	mov	r2, r7
 8012098:	4650      	mov	r0, sl
 801209a:	4659      	mov	r1, fp
 801209c:	b163      	cbz	r3, 80120b8 <_strtod_l+0x970>
 801209e:	f7ff fb36 	bl	801170e <sulp>
 80120a2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80120a6:	ee37 7b00 	vadd.f64	d7, d7, d0
 80120aa:	ec5b ab17 	vmov	sl, fp, d7
 80120ae:	e746      	b.n	8011f3e <_strtod_l+0x7f6>
 80120b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80120b2:	ea13 0f0a 	tst.w	r3, sl
 80120b6:	e7eb      	b.n	8012090 <_strtod_l+0x948>
 80120b8:	f7ff fb29 	bl	801170e <sulp>
 80120bc:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80120c0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80120c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80120c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80120d4:	f43f adfd 	beq.w	8011cd2 <_strtod_l+0x58a>
 80120d8:	e731      	b.n	8011f3e <_strtod_l+0x7f6>
 80120da:	4641      	mov	r1, r8
 80120dc:	4628      	mov	r0, r5
 80120de:	f001 fe58 	bl	8013d92 <__ratio>
 80120e2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80120e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80120ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ee:	d869      	bhi.n	80121c4 <_strtod_l+0xa7c>
 80120f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d045      	beq.n	8012182 <_strtod_l+0xa3a>
 80120f6:	4b74      	ldr	r3, [pc, #464]	; (80122c8 <_strtod_l+0xb80>)
 80120f8:	2200      	movs	r2, #0
 80120fa:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80120fe:	9808      	ldr	r0, [sp, #32]
 8012100:	496e      	ldr	r1, [pc, #440]	; (80122bc <_strtod_l+0xb74>)
 8012102:	ea00 0601 	and.w	r6, r0, r1
 8012106:	4871      	ldr	r0, [pc, #452]	; (80122cc <_strtod_l+0xb84>)
 8012108:	4286      	cmp	r6, r0
 801210a:	f040 8089 	bne.w	8012220 <_strtod_l+0xad8>
 801210e:	910f      	str	r1, [sp, #60]	; 0x3c
 8012110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012114:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012118:	9908      	ldr	r1, [sp, #32]
 801211a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 801211e:	ec4b ab10 	vmov	d0, sl, fp
 8012122:	ec43 2b1c 	vmov	d12, r2, r3
 8012126:	f001 fd6f 	bl	8013c08 <__ulp>
 801212a:	ec4b ab1d 	vmov	d13, sl, fp
 801212e:	eeac db00 	vfma.f64	d13, d12, d0
 8012132:	ed8d db08 	vstr	d13, [sp, #32]
 8012136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012138:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801213a:	4a65      	ldr	r2, [pc, #404]	; (80122d0 <_strtod_l+0xb88>)
 801213c:	4019      	ands	r1, r3
 801213e:	4291      	cmp	r1, r2
 8012140:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8012144:	d948      	bls.n	80121d8 <_strtod_l+0xa90>
 8012146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012148:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801214c:	4293      	cmp	r3, r2
 801214e:	d103      	bne.n	8012158 <_strtod_l+0xa10>
 8012150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012152:	3301      	adds	r3, #1
 8012154:	f43f ad27 	beq.w	8011ba6 <_strtod_l+0x45e>
 8012158:	f8df b164 	ldr.w	fp, [pc, #356]	; 80122c0 <_strtod_l+0xb78>
 801215c:	f04f 3aff 	mov.w	sl, #4294967295
 8012160:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012162:	4620      	mov	r0, r4
 8012164:	f001 fab8 	bl	80136d8 <_Bfree>
 8012168:	4649      	mov	r1, r9
 801216a:	4620      	mov	r0, r4
 801216c:	f001 fab4 	bl	80136d8 <_Bfree>
 8012170:	4641      	mov	r1, r8
 8012172:	4620      	mov	r0, r4
 8012174:	f001 fab0 	bl	80136d8 <_Bfree>
 8012178:	4629      	mov	r1, r5
 801217a:	4620      	mov	r0, r4
 801217c:	f001 faac 	bl	80136d8 <_Bfree>
 8012180:	e60e      	b.n	8011da0 <_strtod_l+0x658>
 8012182:	f1ba 0f00 	cmp.w	sl, #0
 8012186:	d113      	bne.n	80121b0 <_strtod_l+0xa68>
 8012188:	9b08      	ldr	r3, [sp, #32]
 801218a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801218e:	b9b3      	cbnz	r3, 80121be <_strtod_l+0xa76>
 8012190:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012194:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801219c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80121a0:	d401      	bmi.n	80121a6 <_strtod_l+0xa5e>
 80121a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80121a6:	eeb1 7b48 	vneg.f64	d7, d8
 80121aa:	ec53 2b17 	vmov	r2, r3, d7
 80121ae:	e7a6      	b.n	80120fe <_strtod_l+0x9b6>
 80121b0:	f1ba 0f01 	cmp.w	sl, #1
 80121b4:	d103      	bne.n	80121be <_strtod_l+0xa76>
 80121b6:	9b08      	ldr	r3, [sp, #32]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	f43f ad8a 	beq.w	8011cd2 <_strtod_l+0x58a>
 80121be:	2200      	movs	r2, #0
 80121c0:	4b44      	ldr	r3, [pc, #272]	; (80122d4 <_strtod_l+0xb8c>)
 80121c2:	e79a      	b.n	80120fa <_strtod_l+0x9b2>
 80121c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121c6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80121ca:	ee20 8b08 	vmul.f64	d8, d0, d8
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d0e9      	beq.n	80121a6 <_strtod_l+0xa5e>
 80121d2:	ec53 2b18 	vmov	r2, r3, d8
 80121d6:	e792      	b.n	80120fe <_strtod_l+0x9b6>
 80121d8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80121dc:	2f00      	cmp	r7, #0
 80121de:	d1bf      	bne.n	8012160 <_strtod_l+0xa18>
 80121e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80121e4:	0d1b      	lsrs	r3, r3, #20
 80121e6:	051b      	lsls	r3, r3, #20
 80121e8:	429e      	cmp	r6, r3
 80121ea:	d1b9      	bne.n	8012160 <_strtod_l+0xa18>
 80121ec:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 80121f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121f2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80121f6:	ee38 8b40 	vsub.f64	d8, d8, d0
 80121fa:	b92b      	cbnz	r3, 8012208 <_strtod_l+0xac0>
 80121fc:	f1ba 0f00 	cmp.w	sl, #0
 8012200:	d102      	bne.n	8012208 <_strtod_l+0xac0>
 8012202:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8012206:	b3d2      	cbz	r2, 801227e <_strtod_l+0xb36>
 8012208:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801220c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012210:	f53f acd3 	bmi.w	8011bba <_strtod_l+0x472>
 8012214:	eeb4 8bca 	vcmpe.f64	d8, d10
 8012218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221c:	dda0      	ble.n	8012160 <_strtod_l+0xa18>
 801221e:	e4cc      	b.n	8011bba <_strtod_l+0x472>
 8012220:	b1ef      	cbz	r7, 801225e <_strtod_l+0xb16>
 8012222:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8012226:	d81a      	bhi.n	801225e <_strtod_l+0xb16>
 8012228:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80122b0 <_strtod_l+0xb68>
 801222c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012234:	d810      	bhi.n	8012258 <_strtod_l+0xb10>
 8012236:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 801223a:	ee17 3a90 	vmov	r3, s15
 801223e:	2b00      	cmp	r3, #0
 8012240:	bf08      	it	eq
 8012242:	2301      	moveq	r3, #1
 8012244:	ee07 3a90 	vmov	s15, r3
 8012248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801224a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 801224e:	b99b      	cbnz	r3, 8012278 <_strtod_l+0xb30>
 8012250:	eeb1 7b48 	vneg.f64	d7, d8
 8012254:	ec53 2b17 	vmov	r2, r3, d7
 8012258:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801225c:	1b8b      	subs	r3, r1, r6
 801225e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012262:	ec43 2b1c 	vmov	d12, r2, r3
 8012266:	f001 fccf 	bl	8013c08 <__ulp>
 801226a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801226e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8012272:	ec5b ab17 	vmov	sl, fp, d7
 8012276:	e7b1      	b.n	80121dc <_strtod_l+0xa94>
 8012278:	ec53 2b18 	vmov	r2, r3, d8
 801227c:	e7ec      	b.n	8012258 <_strtod_l+0xb10>
 801227e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8012282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012286:	f57f af6b 	bpl.w	8012160 <_strtod_l+0xa18>
 801228a:	e496      	b.n	8011bba <_strtod_l+0x472>
 801228c:	2300      	movs	r3, #0
 801228e:	930d      	str	r3, [sp, #52]	; 0x34
 8012290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012292:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012294:	6013      	str	r3, [r2, #0]
 8012296:	f7ff ba9d 	b.w	80117d4 <_strtod_l+0x8c>
 801229a:	2a65      	cmp	r2, #101	; 0x65
 801229c:	f04f 0100 	mov.w	r1, #0
 80122a0:	f43f ab97 	beq.w	80119d2 <_strtod_l+0x28a>
 80122a4:	2701      	movs	r7, #1
 80122a6:	460b      	mov	r3, r1
 80122a8:	9704      	str	r7, [sp, #16]
 80122aa:	f7ff bb0a 	b.w	80118c2 <_strtod_l+0x17a>
 80122ae:	bf00      	nop
 80122b0:	ffc00000 	.word	0xffc00000
 80122b4:	41dfffff 	.word	0x41dfffff
 80122b8:	000fffff 	.word	0x000fffff
 80122bc:	7ff00000 	.word	0x7ff00000
 80122c0:	7fefffff 	.word	0x7fefffff
 80122c4:	39500000 	.word	0x39500000
 80122c8:	3ff00000 	.word	0x3ff00000
 80122cc:	7fe00000 	.word	0x7fe00000
 80122d0:	7c9fffff 	.word	0x7c9fffff
 80122d4:	bff00000 	.word	0xbff00000

080122d8 <_strtod_r>:
 80122d8:	4b05      	ldr	r3, [pc, #20]	; (80122f0 <_strtod_r+0x18>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	b410      	push	{r4}
 80122de:	6a1b      	ldr	r3, [r3, #32]
 80122e0:	4c04      	ldr	r4, [pc, #16]	; (80122f4 <_strtod_r+0x1c>)
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	bf08      	it	eq
 80122e6:	4623      	moveq	r3, r4
 80122e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122ec:	f7ff ba2c 	b.w	8011748 <_strtod_l>
 80122f0:	2000006c 	.word	0x2000006c
 80122f4:	200000d0 	.word	0x200000d0

080122f8 <_strtol_l.isra.0>:
 80122f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122fc:	4680      	mov	r8, r0
 80122fe:	4689      	mov	r9, r1
 8012300:	4692      	mov	sl, r2
 8012302:	461e      	mov	r6, r3
 8012304:	460f      	mov	r7, r1
 8012306:	463d      	mov	r5, r7
 8012308:	9808      	ldr	r0, [sp, #32]
 801230a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801230e:	f001 f981 	bl	8013614 <__locale_ctype_ptr_l>
 8012312:	4420      	add	r0, r4
 8012314:	7843      	ldrb	r3, [r0, #1]
 8012316:	f013 0308 	ands.w	r3, r3, #8
 801231a:	d132      	bne.n	8012382 <_strtol_l.isra.0+0x8a>
 801231c:	2c2d      	cmp	r4, #45	; 0x2d
 801231e:	d132      	bne.n	8012386 <_strtol_l.isra.0+0x8e>
 8012320:	787c      	ldrb	r4, [r7, #1]
 8012322:	1cbd      	adds	r5, r7, #2
 8012324:	2201      	movs	r2, #1
 8012326:	2e00      	cmp	r6, #0
 8012328:	d05d      	beq.n	80123e6 <_strtol_l.isra.0+0xee>
 801232a:	2e10      	cmp	r6, #16
 801232c:	d109      	bne.n	8012342 <_strtol_l.isra.0+0x4a>
 801232e:	2c30      	cmp	r4, #48	; 0x30
 8012330:	d107      	bne.n	8012342 <_strtol_l.isra.0+0x4a>
 8012332:	782b      	ldrb	r3, [r5, #0]
 8012334:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012338:	2b58      	cmp	r3, #88	; 0x58
 801233a:	d14f      	bne.n	80123dc <_strtol_l.isra.0+0xe4>
 801233c:	786c      	ldrb	r4, [r5, #1]
 801233e:	2610      	movs	r6, #16
 8012340:	3502      	adds	r5, #2
 8012342:	2a00      	cmp	r2, #0
 8012344:	bf14      	ite	ne
 8012346:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801234a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801234e:	2700      	movs	r7, #0
 8012350:	fbb1 fcf6 	udiv	ip, r1, r6
 8012354:	4638      	mov	r0, r7
 8012356:	fb06 1e1c 	mls	lr, r6, ip, r1
 801235a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801235e:	2b09      	cmp	r3, #9
 8012360:	d817      	bhi.n	8012392 <_strtol_l.isra.0+0x9a>
 8012362:	461c      	mov	r4, r3
 8012364:	42a6      	cmp	r6, r4
 8012366:	dd23      	ble.n	80123b0 <_strtol_l.isra.0+0xb8>
 8012368:	1c7b      	adds	r3, r7, #1
 801236a:	d007      	beq.n	801237c <_strtol_l.isra.0+0x84>
 801236c:	4584      	cmp	ip, r0
 801236e:	d31c      	bcc.n	80123aa <_strtol_l.isra.0+0xb2>
 8012370:	d101      	bne.n	8012376 <_strtol_l.isra.0+0x7e>
 8012372:	45a6      	cmp	lr, r4
 8012374:	db19      	blt.n	80123aa <_strtol_l.isra.0+0xb2>
 8012376:	fb00 4006 	mla	r0, r0, r6, r4
 801237a:	2701      	movs	r7, #1
 801237c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012380:	e7eb      	b.n	801235a <_strtol_l.isra.0+0x62>
 8012382:	462f      	mov	r7, r5
 8012384:	e7bf      	b.n	8012306 <_strtol_l.isra.0+0xe>
 8012386:	2c2b      	cmp	r4, #43	; 0x2b
 8012388:	bf04      	itt	eq
 801238a:	1cbd      	addeq	r5, r7, #2
 801238c:	787c      	ldrbeq	r4, [r7, #1]
 801238e:	461a      	mov	r2, r3
 8012390:	e7c9      	b.n	8012326 <_strtol_l.isra.0+0x2e>
 8012392:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012396:	2b19      	cmp	r3, #25
 8012398:	d801      	bhi.n	801239e <_strtol_l.isra.0+0xa6>
 801239a:	3c37      	subs	r4, #55	; 0x37
 801239c:	e7e2      	b.n	8012364 <_strtol_l.isra.0+0x6c>
 801239e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80123a2:	2b19      	cmp	r3, #25
 80123a4:	d804      	bhi.n	80123b0 <_strtol_l.isra.0+0xb8>
 80123a6:	3c57      	subs	r4, #87	; 0x57
 80123a8:	e7dc      	b.n	8012364 <_strtol_l.isra.0+0x6c>
 80123aa:	f04f 37ff 	mov.w	r7, #4294967295
 80123ae:	e7e5      	b.n	801237c <_strtol_l.isra.0+0x84>
 80123b0:	1c7b      	adds	r3, r7, #1
 80123b2:	d108      	bne.n	80123c6 <_strtol_l.isra.0+0xce>
 80123b4:	2322      	movs	r3, #34	; 0x22
 80123b6:	f8c8 3000 	str.w	r3, [r8]
 80123ba:	4608      	mov	r0, r1
 80123bc:	f1ba 0f00 	cmp.w	sl, #0
 80123c0:	d107      	bne.n	80123d2 <_strtol_l.isra.0+0xda>
 80123c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c6:	b102      	cbz	r2, 80123ca <_strtol_l.isra.0+0xd2>
 80123c8:	4240      	negs	r0, r0
 80123ca:	f1ba 0f00 	cmp.w	sl, #0
 80123ce:	d0f8      	beq.n	80123c2 <_strtol_l.isra.0+0xca>
 80123d0:	b10f      	cbz	r7, 80123d6 <_strtol_l.isra.0+0xde>
 80123d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80123d6:	f8ca 9000 	str.w	r9, [sl]
 80123da:	e7f2      	b.n	80123c2 <_strtol_l.isra.0+0xca>
 80123dc:	2430      	movs	r4, #48	; 0x30
 80123de:	2e00      	cmp	r6, #0
 80123e0:	d1af      	bne.n	8012342 <_strtol_l.isra.0+0x4a>
 80123e2:	2608      	movs	r6, #8
 80123e4:	e7ad      	b.n	8012342 <_strtol_l.isra.0+0x4a>
 80123e6:	2c30      	cmp	r4, #48	; 0x30
 80123e8:	d0a3      	beq.n	8012332 <_strtol_l.isra.0+0x3a>
 80123ea:	260a      	movs	r6, #10
 80123ec:	e7a9      	b.n	8012342 <_strtol_l.isra.0+0x4a>
	...

080123f0 <_strtol_r>:
 80123f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123f2:	4c06      	ldr	r4, [pc, #24]	; (801240c <_strtol_r+0x1c>)
 80123f4:	4d06      	ldr	r5, [pc, #24]	; (8012410 <_strtol_r+0x20>)
 80123f6:	6824      	ldr	r4, [r4, #0]
 80123f8:	6a24      	ldr	r4, [r4, #32]
 80123fa:	2c00      	cmp	r4, #0
 80123fc:	bf08      	it	eq
 80123fe:	462c      	moveq	r4, r5
 8012400:	9400      	str	r4, [sp, #0]
 8012402:	f7ff ff79 	bl	80122f8 <_strtol_l.isra.0>
 8012406:	b003      	add	sp, #12
 8012408:	bd30      	pop	{r4, r5, pc}
 801240a:	bf00      	nop
 801240c:	2000006c 	.word	0x2000006c
 8012410:	200000d0 	.word	0x200000d0

08012414 <quorem>:
 8012414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012418:	6903      	ldr	r3, [r0, #16]
 801241a:	690c      	ldr	r4, [r1, #16]
 801241c:	42a3      	cmp	r3, r4
 801241e:	4680      	mov	r8, r0
 8012420:	f2c0 8082 	blt.w	8012528 <quorem+0x114>
 8012424:	3c01      	subs	r4, #1
 8012426:	f101 0714 	add.w	r7, r1, #20
 801242a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801242e:	f100 0614 	add.w	r6, r0, #20
 8012432:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012436:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801243a:	eb06 030c 	add.w	r3, r6, ip
 801243e:	3501      	adds	r5, #1
 8012440:	eb07 090c 	add.w	r9, r7, ip
 8012444:	9301      	str	r3, [sp, #4]
 8012446:	fbb0 f5f5 	udiv	r5, r0, r5
 801244a:	b395      	cbz	r5, 80124b2 <quorem+0x9e>
 801244c:	f04f 0a00 	mov.w	sl, #0
 8012450:	4638      	mov	r0, r7
 8012452:	46b6      	mov	lr, r6
 8012454:	46d3      	mov	fp, sl
 8012456:	f850 2b04 	ldr.w	r2, [r0], #4
 801245a:	b293      	uxth	r3, r2
 801245c:	fb05 a303 	mla	r3, r5, r3, sl
 8012460:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012464:	b29b      	uxth	r3, r3
 8012466:	ebab 0303 	sub.w	r3, fp, r3
 801246a:	0c12      	lsrs	r2, r2, #16
 801246c:	f8de b000 	ldr.w	fp, [lr]
 8012470:	fb05 a202 	mla	r2, r5, r2, sl
 8012474:	fa13 f38b 	uxtah	r3, r3, fp
 8012478:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801247c:	fa1f fb82 	uxth.w	fp, r2
 8012480:	f8de 2000 	ldr.w	r2, [lr]
 8012484:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801248c:	b29b      	uxth	r3, r3
 801248e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012492:	4581      	cmp	r9, r0
 8012494:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012498:	f84e 3b04 	str.w	r3, [lr], #4
 801249c:	d2db      	bcs.n	8012456 <quorem+0x42>
 801249e:	f856 300c 	ldr.w	r3, [r6, ip]
 80124a2:	b933      	cbnz	r3, 80124b2 <quorem+0x9e>
 80124a4:	9b01      	ldr	r3, [sp, #4]
 80124a6:	3b04      	subs	r3, #4
 80124a8:	429e      	cmp	r6, r3
 80124aa:	461a      	mov	r2, r3
 80124ac:	d330      	bcc.n	8012510 <quorem+0xfc>
 80124ae:	f8c8 4010 	str.w	r4, [r8, #16]
 80124b2:	4640      	mov	r0, r8
 80124b4:	f001 fb30 	bl	8013b18 <__mcmp>
 80124b8:	2800      	cmp	r0, #0
 80124ba:	db25      	blt.n	8012508 <quorem+0xf4>
 80124bc:	3501      	adds	r5, #1
 80124be:	4630      	mov	r0, r6
 80124c0:	f04f 0c00 	mov.w	ip, #0
 80124c4:	f857 2b04 	ldr.w	r2, [r7], #4
 80124c8:	f8d0 e000 	ldr.w	lr, [r0]
 80124cc:	b293      	uxth	r3, r2
 80124ce:	ebac 0303 	sub.w	r3, ip, r3
 80124d2:	0c12      	lsrs	r2, r2, #16
 80124d4:	fa13 f38e 	uxtah	r3, r3, lr
 80124d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80124dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80124e6:	45b9      	cmp	r9, r7
 80124e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80124ec:	f840 3b04 	str.w	r3, [r0], #4
 80124f0:	d2e8      	bcs.n	80124c4 <quorem+0xb0>
 80124f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80124f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80124fa:	b92a      	cbnz	r2, 8012508 <quorem+0xf4>
 80124fc:	3b04      	subs	r3, #4
 80124fe:	429e      	cmp	r6, r3
 8012500:	461a      	mov	r2, r3
 8012502:	d30b      	bcc.n	801251c <quorem+0x108>
 8012504:	f8c8 4010 	str.w	r4, [r8, #16]
 8012508:	4628      	mov	r0, r5
 801250a:	b003      	add	sp, #12
 801250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012510:	6812      	ldr	r2, [r2, #0]
 8012512:	3b04      	subs	r3, #4
 8012514:	2a00      	cmp	r2, #0
 8012516:	d1ca      	bne.n	80124ae <quorem+0x9a>
 8012518:	3c01      	subs	r4, #1
 801251a:	e7c5      	b.n	80124a8 <quorem+0x94>
 801251c:	6812      	ldr	r2, [r2, #0]
 801251e:	3b04      	subs	r3, #4
 8012520:	2a00      	cmp	r2, #0
 8012522:	d1ef      	bne.n	8012504 <quorem+0xf0>
 8012524:	3c01      	subs	r4, #1
 8012526:	e7ea      	b.n	80124fe <quorem+0xea>
 8012528:	2000      	movs	r0, #0
 801252a:	e7ee      	b.n	801250a <quorem+0xf6>
 801252c:	0000      	movs	r0, r0
	...

08012530 <_dtoa_r>:
 8012530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012534:	ec57 6b10 	vmov	r6, r7, d0
 8012538:	b095      	sub	sp, #84	; 0x54
 801253a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801253c:	9108      	str	r1, [sp, #32]
 801253e:	4604      	mov	r4, r0
 8012540:	920a      	str	r2, [sp, #40]	; 0x28
 8012542:	9311      	str	r3, [sp, #68]	; 0x44
 8012544:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8012548:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801254c:	b93d      	cbnz	r5, 801255e <_dtoa_r+0x2e>
 801254e:	2010      	movs	r0, #16
 8012550:	f001 f874 	bl	801363c <malloc>
 8012554:	6260      	str	r0, [r4, #36]	; 0x24
 8012556:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801255a:	6005      	str	r5, [r0, #0]
 801255c:	60c5      	str	r5, [r0, #12]
 801255e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012560:	6819      	ldr	r1, [r3, #0]
 8012562:	b151      	cbz	r1, 801257a <_dtoa_r+0x4a>
 8012564:	685a      	ldr	r2, [r3, #4]
 8012566:	604a      	str	r2, [r1, #4]
 8012568:	2301      	movs	r3, #1
 801256a:	4093      	lsls	r3, r2
 801256c:	608b      	str	r3, [r1, #8]
 801256e:	4620      	mov	r0, r4
 8012570:	f001 f8b2 	bl	80136d8 <_Bfree>
 8012574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012576:	2200      	movs	r2, #0
 8012578:	601a      	str	r2, [r3, #0]
 801257a:	1e3b      	subs	r3, r7, #0
 801257c:	bfb9      	ittee	lt
 801257e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012582:	9303      	strlt	r3, [sp, #12]
 8012584:	2300      	movge	r3, #0
 8012586:	f8c8 3000 	strge.w	r3, [r8]
 801258a:	9d03      	ldr	r5, [sp, #12]
 801258c:	4bac      	ldr	r3, [pc, #688]	; (8012840 <_dtoa_r+0x310>)
 801258e:	bfbc      	itt	lt
 8012590:	2201      	movlt	r2, #1
 8012592:	f8c8 2000 	strlt.w	r2, [r8]
 8012596:	43ab      	bics	r3, r5
 8012598:	d11b      	bne.n	80125d2 <_dtoa_r+0xa2>
 801259a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801259c:	f242 730f 	movw	r3, #9999	; 0x270f
 80125a0:	6013      	str	r3, [r2, #0]
 80125a2:	9b02      	ldr	r3, [sp, #8]
 80125a4:	b923      	cbnz	r3, 80125b0 <_dtoa_r+0x80>
 80125a6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80125aa:	2d00      	cmp	r5, #0
 80125ac:	f000 84dd 	beq.w	8012f6a <_dtoa_r+0xa3a>
 80125b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80125b2:	b953      	cbnz	r3, 80125ca <_dtoa_r+0x9a>
 80125b4:	4ba3      	ldr	r3, [pc, #652]	; (8012844 <_dtoa_r+0x314>)
 80125b6:	e020      	b.n	80125fa <_dtoa_r+0xca>
 80125b8:	4ba3      	ldr	r3, [pc, #652]	; (8012848 <_dtoa_r+0x318>)
 80125ba:	9304      	str	r3, [sp, #16]
 80125bc:	3308      	adds	r3, #8
 80125be:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80125c0:	6013      	str	r3, [r2, #0]
 80125c2:	9804      	ldr	r0, [sp, #16]
 80125c4:	b015      	add	sp, #84	; 0x54
 80125c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ca:	4b9e      	ldr	r3, [pc, #632]	; (8012844 <_dtoa_r+0x314>)
 80125cc:	9304      	str	r3, [sp, #16]
 80125ce:	3303      	adds	r3, #3
 80125d0:	e7f5      	b.n	80125be <_dtoa_r+0x8e>
 80125d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80125da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125de:	ed8d 7b04 	vstr	d7, [sp, #16]
 80125e2:	d10c      	bne.n	80125fe <_dtoa_r+0xce>
 80125e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80125e6:	2301      	movs	r3, #1
 80125e8:	6013      	str	r3, [r2, #0]
 80125ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f000 84b9 	beq.w	8012f64 <_dtoa_r+0xa34>
 80125f2:	4b96      	ldr	r3, [pc, #600]	; (801284c <_dtoa_r+0x31c>)
 80125f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80125f6:	6013      	str	r3, [r2, #0]
 80125f8:	3b01      	subs	r3, #1
 80125fa:	9304      	str	r3, [sp, #16]
 80125fc:	e7e1      	b.n	80125c2 <_dtoa_r+0x92>
 80125fe:	a913      	add	r1, sp, #76	; 0x4c
 8012600:	aa12      	add	r2, sp, #72	; 0x48
 8012602:	ed9d 0b04 	vldr	d0, [sp, #16]
 8012606:	4620      	mov	r0, r4
 8012608:	f001 fb74 	bl	8013cf4 <__d2b>
 801260c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8012610:	9001      	str	r0, [sp, #4]
 8012612:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012614:	2e00      	cmp	r6, #0
 8012616:	d046      	beq.n	80126a6 <_dtoa_r+0x176>
 8012618:	9805      	ldr	r0, [sp, #20]
 801261a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 801261e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012622:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8012626:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801262a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 801262e:	2700      	movs	r7, #0
 8012630:	ee07 aa90 	vmov	s15, sl
 8012634:	ec43 2b16 	vmov	d6, r2, r3
 8012638:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801263c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012828 <_dtoa_r+0x2f8>
 8012640:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012644:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012648:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012830 <_dtoa_r+0x300>
 801264c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012650:	eeb0 7b46 	vmov.f64	d7, d6
 8012654:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012838 <_dtoa_r+0x308>
 8012658:	eea5 7b06 	vfma.f64	d7, d5, d6
 801265c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012660:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012668:	ee16 ba90 	vmov	fp, s13
 801266c:	d508      	bpl.n	8012680 <_dtoa_r+0x150>
 801266e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012672:	eeb4 6b47 	vcmp.f64	d6, d7
 8012676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801267a:	bf18      	it	ne
 801267c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012680:	f1bb 0f16 	cmp.w	fp, #22
 8012684:	d834      	bhi.n	80126f0 <_dtoa_r+0x1c0>
 8012686:	4b72      	ldr	r3, [pc, #456]	; (8012850 <_dtoa_r+0x320>)
 8012688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801268c:	ed93 7b00 	vldr	d7, [r3]
 8012690:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012694:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269c:	dd01      	ble.n	80126a2 <_dtoa_r+0x172>
 801269e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126a2:	2300      	movs	r3, #0
 80126a4:	e025      	b.n	80126f2 <_dtoa_r+0x1c2>
 80126a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80126a8:	eb01 0a03 	add.w	sl, r1, r3
 80126ac:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80126b0:	2b20      	cmp	r3, #32
 80126b2:	dd17      	ble.n	80126e4 <_dtoa_r+0x1b4>
 80126b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80126b8:	9a02      	ldr	r2, [sp, #8]
 80126ba:	409d      	lsls	r5, r3
 80126bc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80126c0:	fa22 f303 	lsr.w	r3, r2, r3
 80126c4:	432b      	orrs	r3, r5
 80126c6:	ee07 3a90 	vmov	s15, r3
 80126ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80126ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80126d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80126d6:	9805      	ldr	r0, [sp, #20]
 80126d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126dc:	2701      	movs	r7, #1
 80126de:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80126e2:	e7a5      	b.n	8012630 <_dtoa_r+0x100>
 80126e4:	9a02      	ldr	r2, [sp, #8]
 80126e6:	f1c3 0320 	rsb	r3, r3, #32
 80126ea:	fa02 f303 	lsl.w	r3, r2, r3
 80126ee:	e7ea      	b.n	80126c6 <_dtoa_r+0x196>
 80126f0:	2301      	movs	r3, #1
 80126f2:	eba1 0a0a 	sub.w	sl, r1, sl
 80126f6:	9310      	str	r3, [sp, #64]	; 0x40
 80126f8:	f1ba 0301 	subs.w	r3, sl, #1
 80126fc:	9307      	str	r3, [sp, #28]
 80126fe:	bf43      	ittte	mi
 8012700:	2300      	movmi	r3, #0
 8012702:	f1ca 0a01 	rsbmi	sl, sl, #1
 8012706:	9307      	strmi	r3, [sp, #28]
 8012708:	f04f 0a00 	movpl.w	sl, #0
 801270c:	f1bb 0f00 	cmp.w	fp, #0
 8012710:	db19      	blt.n	8012746 <_dtoa_r+0x216>
 8012712:	9b07      	ldr	r3, [sp, #28]
 8012714:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012718:	445b      	add	r3, fp
 801271a:	9307      	str	r3, [sp, #28]
 801271c:	f04f 0800 	mov.w	r8, #0
 8012720:	9b08      	ldr	r3, [sp, #32]
 8012722:	2b09      	cmp	r3, #9
 8012724:	d866      	bhi.n	80127f4 <_dtoa_r+0x2c4>
 8012726:	2b05      	cmp	r3, #5
 8012728:	bfc4      	itt	gt
 801272a:	3b04      	subgt	r3, #4
 801272c:	9308      	strgt	r3, [sp, #32]
 801272e:	9b08      	ldr	r3, [sp, #32]
 8012730:	f1a3 0302 	sub.w	r3, r3, #2
 8012734:	bfcc      	ite	gt
 8012736:	2500      	movgt	r5, #0
 8012738:	2501      	movle	r5, #1
 801273a:	2b03      	cmp	r3, #3
 801273c:	d866      	bhi.n	801280c <_dtoa_r+0x2dc>
 801273e:	e8df f003 	tbb	[pc, r3]
 8012742:	5755      	.short	0x5755
 8012744:	4909      	.short	0x4909
 8012746:	2300      	movs	r3, #0
 8012748:	ebaa 0a0b 	sub.w	sl, sl, fp
 801274c:	f1cb 0800 	rsb	r8, fp, #0
 8012750:	930b      	str	r3, [sp, #44]	; 0x2c
 8012752:	e7e5      	b.n	8012720 <_dtoa_r+0x1f0>
 8012754:	2301      	movs	r3, #1
 8012756:	9309      	str	r3, [sp, #36]	; 0x24
 8012758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801275a:	2b00      	cmp	r3, #0
 801275c:	dd59      	ble.n	8012812 <_dtoa_r+0x2e2>
 801275e:	9306      	str	r3, [sp, #24]
 8012760:	4699      	mov	r9, r3
 8012762:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012764:	2200      	movs	r2, #0
 8012766:	6072      	str	r2, [r6, #4]
 8012768:	2204      	movs	r2, #4
 801276a:	f102 0014 	add.w	r0, r2, #20
 801276e:	4298      	cmp	r0, r3
 8012770:	6871      	ldr	r1, [r6, #4]
 8012772:	d953      	bls.n	801281c <_dtoa_r+0x2ec>
 8012774:	4620      	mov	r0, r4
 8012776:	f000 ff7b 	bl	8013670 <_Balloc>
 801277a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801277c:	6030      	str	r0, [r6, #0]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	9304      	str	r3, [sp, #16]
 8012782:	f1b9 0f0e 	cmp.w	r9, #14
 8012786:	f200 80c2 	bhi.w	801290e <_dtoa_r+0x3de>
 801278a:	2d00      	cmp	r5, #0
 801278c:	f000 80bf 	beq.w	801290e <_dtoa_r+0x3de>
 8012790:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012794:	f1bb 0f00 	cmp.w	fp, #0
 8012798:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 801279c:	f340 80e6 	ble.w	801296c <_dtoa_r+0x43c>
 80127a0:	4a2b      	ldr	r2, [pc, #172]	; (8012850 <_dtoa_r+0x320>)
 80127a2:	f00b 030f 	and.w	r3, fp, #15
 80127a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80127aa:	ed93 7b00 	vldr	d7, [r3]
 80127ae:	ea4f 132b 	mov.w	r3, fp, asr #4
 80127b2:	06da      	lsls	r2, r3, #27
 80127b4:	f140 80d8 	bpl.w	8012968 <_dtoa_r+0x438>
 80127b8:	4a26      	ldr	r2, [pc, #152]	; (8012854 <_dtoa_r+0x324>)
 80127ba:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80127be:	ed92 6b08 	vldr	d6, [r2, #32]
 80127c2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80127c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80127ca:	f003 030f 	and.w	r3, r3, #15
 80127ce:	2203      	movs	r2, #3
 80127d0:	4920      	ldr	r1, [pc, #128]	; (8012854 <_dtoa_r+0x324>)
 80127d2:	e04a      	b.n	801286a <_dtoa_r+0x33a>
 80127d4:	2301      	movs	r3, #1
 80127d6:	9309      	str	r3, [sp, #36]	; 0x24
 80127d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127da:	445b      	add	r3, fp
 80127dc:	f103 0901 	add.w	r9, r3, #1
 80127e0:	9306      	str	r3, [sp, #24]
 80127e2:	464b      	mov	r3, r9
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	bfb8      	it	lt
 80127e8:	2301      	movlt	r3, #1
 80127ea:	e7ba      	b.n	8012762 <_dtoa_r+0x232>
 80127ec:	2300      	movs	r3, #0
 80127ee:	e7b2      	b.n	8012756 <_dtoa_r+0x226>
 80127f0:	2300      	movs	r3, #0
 80127f2:	e7f0      	b.n	80127d6 <_dtoa_r+0x2a6>
 80127f4:	2501      	movs	r5, #1
 80127f6:	2300      	movs	r3, #0
 80127f8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80127fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012800:	9306      	str	r3, [sp, #24]
 8012802:	4699      	mov	r9, r3
 8012804:	2200      	movs	r2, #0
 8012806:	2312      	movs	r3, #18
 8012808:	920a      	str	r2, [sp, #40]	; 0x28
 801280a:	e7aa      	b.n	8012762 <_dtoa_r+0x232>
 801280c:	2301      	movs	r3, #1
 801280e:	9309      	str	r3, [sp, #36]	; 0x24
 8012810:	e7f4      	b.n	80127fc <_dtoa_r+0x2cc>
 8012812:	2301      	movs	r3, #1
 8012814:	9306      	str	r3, [sp, #24]
 8012816:	4699      	mov	r9, r3
 8012818:	461a      	mov	r2, r3
 801281a:	e7f5      	b.n	8012808 <_dtoa_r+0x2d8>
 801281c:	3101      	adds	r1, #1
 801281e:	6071      	str	r1, [r6, #4]
 8012820:	0052      	lsls	r2, r2, #1
 8012822:	e7a2      	b.n	801276a <_dtoa_r+0x23a>
 8012824:	f3af 8000 	nop.w
 8012828:	636f4361 	.word	0x636f4361
 801282c:	3fd287a7 	.word	0x3fd287a7
 8012830:	8b60c8b3 	.word	0x8b60c8b3
 8012834:	3fc68a28 	.word	0x3fc68a28
 8012838:	509f79fb 	.word	0x509f79fb
 801283c:	3fd34413 	.word	0x3fd34413
 8012840:	7ff00000 	.word	0x7ff00000
 8012844:	08014b29 	.word	0x08014b29
 8012848:	08014b20 	.word	0x08014b20
 801284c:	08014aa5 	.word	0x08014aa5
 8012850:	08014b60 	.word	0x08014b60
 8012854:	08014b38 	.word	0x08014b38
 8012858:	07de      	lsls	r6, r3, #31
 801285a:	d504      	bpl.n	8012866 <_dtoa_r+0x336>
 801285c:	ed91 6b00 	vldr	d6, [r1]
 8012860:	3201      	adds	r2, #1
 8012862:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012866:	105b      	asrs	r3, r3, #1
 8012868:	3108      	adds	r1, #8
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1f4      	bne.n	8012858 <_dtoa_r+0x328>
 801286e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012872:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012876:	ed8d 7b02 	vstr	d7, [sp, #8]
 801287a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801287c:	2b00      	cmp	r3, #0
 801287e:	f000 80a7 	beq.w	80129d0 <_dtoa_r+0x4a0>
 8012882:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012886:	ed9d 7b02 	vldr	d7, [sp, #8]
 801288a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801288e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012892:	f140 809d 	bpl.w	80129d0 <_dtoa_r+0x4a0>
 8012896:	f1b9 0f00 	cmp.w	r9, #0
 801289a:	f000 8099 	beq.w	80129d0 <_dtoa_r+0x4a0>
 801289e:	9b06      	ldr	r3, [sp, #24]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	dd30      	ble.n	8012906 <_dtoa_r+0x3d6>
 80128a4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80128a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80128ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80128b0:	9d06      	ldr	r5, [sp, #24]
 80128b2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80128b6:	3201      	adds	r2, #1
 80128b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80128bc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80128c0:	ee07 2a90 	vmov	s15, r2
 80128c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80128c8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80128cc:	ed8d 5b02 	vstr	d5, [sp, #8]
 80128d0:	9a03      	ldr	r2, [sp, #12]
 80128d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80128d6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80128da:	2d00      	cmp	r5, #0
 80128dc:	d17b      	bne.n	80129d6 <_dtoa_r+0x4a6>
 80128de:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80128e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80128e6:	ec41 0b17 	vmov	d7, r0, r1
 80128ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f2:	f300 8253 	bgt.w	8012d9c <_dtoa_r+0x86c>
 80128f6:	eeb1 7b47 	vneg.f64	d7, d7
 80128fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80128fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012902:	f100 8249 	bmi.w	8012d98 <_dtoa_r+0x868>
 8012906:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801290a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801290e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012910:	2b00      	cmp	r3, #0
 8012912:	f2c0 8119 	blt.w	8012b48 <_dtoa_r+0x618>
 8012916:	f1bb 0f0e 	cmp.w	fp, #14
 801291a:	f300 8115 	bgt.w	8012b48 <_dtoa_r+0x618>
 801291e:	4bc3      	ldr	r3, [pc, #780]	; (8012c2c <_dtoa_r+0x6fc>)
 8012920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012924:	ed93 6b00 	vldr	d6, [r3]
 8012928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801292a:	2b00      	cmp	r3, #0
 801292c:	f280 80ba 	bge.w	8012aa4 <_dtoa_r+0x574>
 8012930:	f1b9 0f00 	cmp.w	r9, #0
 8012934:	f300 80b6 	bgt.w	8012aa4 <_dtoa_r+0x574>
 8012938:	f040 822d 	bne.w	8012d96 <_dtoa_r+0x866>
 801293c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012940:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012944:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012948:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	464d      	mov	r5, r9
 8012952:	464f      	mov	r7, r9
 8012954:	f280 8204 	bge.w	8012d60 <_dtoa_r+0x830>
 8012958:	9b04      	ldr	r3, [sp, #16]
 801295a:	9a04      	ldr	r2, [sp, #16]
 801295c:	1c5e      	adds	r6, r3, #1
 801295e:	2331      	movs	r3, #49	; 0x31
 8012960:	7013      	strb	r3, [r2, #0]
 8012962:	f10b 0b01 	add.w	fp, fp, #1
 8012966:	e1ff      	b.n	8012d68 <_dtoa_r+0x838>
 8012968:	2202      	movs	r2, #2
 801296a:	e731      	b.n	80127d0 <_dtoa_r+0x2a0>
 801296c:	d02e      	beq.n	80129cc <_dtoa_r+0x49c>
 801296e:	f1cb 0300 	rsb	r3, fp, #0
 8012972:	4aae      	ldr	r2, [pc, #696]	; (8012c2c <_dtoa_r+0x6fc>)
 8012974:	f003 010f 	and.w	r1, r3, #15
 8012978:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801297c:	ed92 7b00 	vldr	d7, [r2]
 8012980:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8012984:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012988:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801298c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012990:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012994:	49a6      	ldr	r1, [pc, #664]	; (8012c30 <_dtoa_r+0x700>)
 8012996:	111b      	asrs	r3, r3, #4
 8012998:	2000      	movs	r0, #0
 801299a:	2202      	movs	r2, #2
 801299c:	b93b      	cbnz	r3, 80129ae <_dtoa_r+0x47e>
 801299e:	2800      	cmp	r0, #0
 80129a0:	f43f af6b 	beq.w	801287a <_dtoa_r+0x34a>
 80129a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129ac:	e765      	b.n	801287a <_dtoa_r+0x34a>
 80129ae:	07dd      	lsls	r5, r3, #31
 80129b0:	d509      	bpl.n	80129c6 <_dtoa_r+0x496>
 80129b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80129b6:	ed91 7b00 	vldr	d7, [r1]
 80129ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80129be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80129c2:	3201      	adds	r2, #1
 80129c4:	2001      	movs	r0, #1
 80129c6:	105b      	asrs	r3, r3, #1
 80129c8:	3108      	adds	r1, #8
 80129ca:	e7e7      	b.n	801299c <_dtoa_r+0x46c>
 80129cc:	2202      	movs	r2, #2
 80129ce:	e754      	b.n	801287a <_dtoa_r+0x34a>
 80129d0:	465b      	mov	r3, fp
 80129d2:	464d      	mov	r5, r9
 80129d4:	e770      	b.n	80128b8 <_dtoa_r+0x388>
 80129d6:	4a95      	ldr	r2, [pc, #596]	; (8012c2c <_dtoa_r+0x6fc>)
 80129d8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80129dc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80129e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80129e2:	ec41 0b17 	vmov	d7, r0, r1
 80129e6:	b35a      	cbz	r2, 8012a40 <_dtoa_r+0x510>
 80129e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80129ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80129f0:	9e04      	ldr	r6, [sp, #16]
 80129f2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80129f6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80129fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80129fe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a02:	ee14 2a90 	vmov	r2, s9
 8012a06:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a0a:	3230      	adds	r2, #48	; 0x30
 8012a0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a18:	f806 2b01 	strb.w	r2, [r6], #1
 8012a1c:	d43b      	bmi.n	8012a96 <_dtoa_r+0x566>
 8012a1e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012a22:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a2a:	d472      	bmi.n	8012b12 <_dtoa_r+0x5e2>
 8012a2c:	9a04      	ldr	r2, [sp, #16]
 8012a2e:	1ab2      	subs	r2, r6, r2
 8012a30:	4295      	cmp	r5, r2
 8012a32:	f77f af68 	ble.w	8012906 <_dtoa_r+0x3d6>
 8012a36:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012a3a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012a3e:	e7de      	b.n	80129fe <_dtoa_r+0x4ce>
 8012a40:	9a04      	ldr	r2, [sp, #16]
 8012a42:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012a46:	1956      	adds	r6, r2, r5
 8012a48:	4611      	mov	r1, r2
 8012a4a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012a4e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012a52:	ee14 2a90 	vmov	r2, s9
 8012a56:	3230      	adds	r2, #48	; 0x30
 8012a58:	f801 2b01 	strb.w	r2, [r1], #1
 8012a5c:	42b1      	cmp	r1, r6
 8012a5e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012a62:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012a66:	d11a      	bne.n	8012a9e <_dtoa_r+0x56e>
 8012a68:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012a6c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012a70:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a78:	dc4b      	bgt.n	8012b12 <_dtoa_r+0x5e2>
 8012a7a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012a7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a86:	f57f af3e 	bpl.w	8012906 <_dtoa_r+0x3d6>
 8012a8a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012a8e:	2a30      	cmp	r2, #48	; 0x30
 8012a90:	f106 31ff 	add.w	r1, r6, #4294967295
 8012a94:	d001      	beq.n	8012a9a <_dtoa_r+0x56a>
 8012a96:	469b      	mov	fp, r3
 8012a98:	e02a      	b.n	8012af0 <_dtoa_r+0x5c0>
 8012a9a:	460e      	mov	r6, r1
 8012a9c:	e7f5      	b.n	8012a8a <_dtoa_r+0x55a>
 8012a9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012aa2:	e7d4      	b.n	8012a4e <_dtoa_r+0x51e>
 8012aa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012aa8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8012aac:	9e04      	ldr	r6, [sp, #16]
 8012aae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012ab2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ab6:	ee15 3a10 	vmov	r3, s10
 8012aba:	3330      	adds	r3, #48	; 0x30
 8012abc:	f806 3b01 	strb.w	r3, [r6], #1
 8012ac0:	9b04      	ldr	r3, [sp, #16]
 8012ac2:	1af3      	subs	r3, r6, r3
 8012ac4:	4599      	cmp	r9, r3
 8012ac6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012aca:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012ace:	d133      	bne.n	8012b38 <_dtoa_r+0x608>
 8012ad0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012ad4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012adc:	dc18      	bgt.n	8012b10 <_dtoa_r+0x5e0>
 8012ade:	eeb4 7b46 	vcmp.f64	d7, d6
 8012ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ae6:	d103      	bne.n	8012af0 <_dtoa_r+0x5c0>
 8012ae8:	ee15 3a10 	vmov	r3, s10
 8012aec:	07db      	lsls	r3, r3, #31
 8012aee:	d40f      	bmi.n	8012b10 <_dtoa_r+0x5e0>
 8012af0:	9901      	ldr	r1, [sp, #4]
 8012af2:	4620      	mov	r0, r4
 8012af4:	f000 fdf0 	bl	80136d8 <_Bfree>
 8012af8:	2300      	movs	r3, #0
 8012afa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012afc:	7033      	strb	r3, [r6, #0]
 8012afe:	f10b 0301 	add.w	r3, fp, #1
 8012b02:	6013      	str	r3, [r2, #0]
 8012b04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	f43f ad5b 	beq.w	80125c2 <_dtoa_r+0x92>
 8012b0c:	601e      	str	r6, [r3, #0]
 8012b0e:	e558      	b.n	80125c2 <_dtoa_r+0x92>
 8012b10:	465b      	mov	r3, fp
 8012b12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012b16:	2939      	cmp	r1, #57	; 0x39
 8012b18:	f106 32ff 	add.w	r2, r6, #4294967295
 8012b1c:	d106      	bne.n	8012b2c <_dtoa_r+0x5fc>
 8012b1e:	9904      	ldr	r1, [sp, #16]
 8012b20:	4291      	cmp	r1, r2
 8012b22:	d107      	bne.n	8012b34 <_dtoa_r+0x604>
 8012b24:	2230      	movs	r2, #48	; 0x30
 8012b26:	700a      	strb	r2, [r1, #0]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	460a      	mov	r2, r1
 8012b2c:	7811      	ldrb	r1, [r2, #0]
 8012b2e:	3101      	adds	r1, #1
 8012b30:	7011      	strb	r1, [r2, #0]
 8012b32:	e7b0      	b.n	8012a96 <_dtoa_r+0x566>
 8012b34:	4616      	mov	r6, r2
 8012b36:	e7ec      	b.n	8012b12 <_dtoa_r+0x5e2>
 8012b38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012b3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b44:	d1b3      	bne.n	8012aae <_dtoa_r+0x57e>
 8012b46:	e7d3      	b.n	8012af0 <_dtoa_r+0x5c0>
 8012b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012b4a:	2a00      	cmp	r2, #0
 8012b4c:	f000 808d 	beq.w	8012c6a <_dtoa_r+0x73a>
 8012b50:	9a08      	ldr	r2, [sp, #32]
 8012b52:	2a01      	cmp	r2, #1
 8012b54:	dc72      	bgt.n	8012c3c <_dtoa_r+0x70c>
 8012b56:	2f00      	cmp	r7, #0
 8012b58:	d06c      	beq.n	8012c34 <_dtoa_r+0x704>
 8012b5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012b5e:	4645      	mov	r5, r8
 8012b60:	4656      	mov	r6, sl
 8012b62:	9a07      	ldr	r2, [sp, #28]
 8012b64:	2101      	movs	r1, #1
 8012b66:	441a      	add	r2, r3
 8012b68:	4620      	mov	r0, r4
 8012b6a:	449a      	add	sl, r3
 8012b6c:	9207      	str	r2, [sp, #28]
 8012b6e:	f000 fe91 	bl	8013894 <__i2b>
 8012b72:	4607      	mov	r7, r0
 8012b74:	2e00      	cmp	r6, #0
 8012b76:	dd0b      	ble.n	8012b90 <_dtoa_r+0x660>
 8012b78:	9b07      	ldr	r3, [sp, #28]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	dd08      	ble.n	8012b90 <_dtoa_r+0x660>
 8012b7e:	42b3      	cmp	r3, r6
 8012b80:	9a07      	ldr	r2, [sp, #28]
 8012b82:	bfa8      	it	ge
 8012b84:	4633      	movge	r3, r6
 8012b86:	ebaa 0a03 	sub.w	sl, sl, r3
 8012b8a:	1af6      	subs	r6, r6, r3
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	9307      	str	r3, [sp, #28]
 8012b90:	f1b8 0f00 	cmp.w	r8, #0
 8012b94:	d01d      	beq.n	8012bd2 <_dtoa_r+0x6a2>
 8012b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d06a      	beq.n	8012c72 <_dtoa_r+0x742>
 8012b9c:	b18d      	cbz	r5, 8012bc2 <_dtoa_r+0x692>
 8012b9e:	4639      	mov	r1, r7
 8012ba0:	462a      	mov	r2, r5
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f000 ff16 	bl	80139d4 <__pow5mult>
 8012ba8:	9a01      	ldr	r2, [sp, #4]
 8012baa:	4601      	mov	r1, r0
 8012bac:	4607      	mov	r7, r0
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f000 fe79 	bl	80138a6 <__multiply>
 8012bb4:	9901      	ldr	r1, [sp, #4]
 8012bb6:	900c      	str	r0, [sp, #48]	; 0x30
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f000 fd8d 	bl	80136d8 <_Bfree>
 8012bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012bc0:	9301      	str	r3, [sp, #4]
 8012bc2:	ebb8 0205 	subs.w	r2, r8, r5
 8012bc6:	d004      	beq.n	8012bd2 <_dtoa_r+0x6a2>
 8012bc8:	9901      	ldr	r1, [sp, #4]
 8012bca:	4620      	mov	r0, r4
 8012bcc:	f000 ff02 	bl	80139d4 <__pow5mult>
 8012bd0:	9001      	str	r0, [sp, #4]
 8012bd2:	2101      	movs	r1, #1
 8012bd4:	4620      	mov	r0, r4
 8012bd6:	f000 fe5d 	bl	8013894 <__i2b>
 8012bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bdc:	4605      	mov	r5, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f000 81ca 	beq.w	8012f78 <_dtoa_r+0xa48>
 8012be4:	461a      	mov	r2, r3
 8012be6:	4601      	mov	r1, r0
 8012be8:	4620      	mov	r0, r4
 8012bea:	f000 fef3 	bl	80139d4 <__pow5mult>
 8012bee:	9b08      	ldr	r3, [sp, #32]
 8012bf0:	2b01      	cmp	r3, #1
 8012bf2:	4605      	mov	r5, r0
 8012bf4:	dc44      	bgt.n	8012c80 <_dtoa_r+0x750>
 8012bf6:	9b02      	ldr	r3, [sp, #8]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d13c      	bne.n	8012c76 <_dtoa_r+0x746>
 8012bfc:	9b03      	ldr	r3, [sp, #12]
 8012bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d137      	bne.n	8012c76 <_dtoa_r+0x746>
 8012c06:	9b03      	ldr	r3, [sp, #12]
 8012c08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012c0c:	0d1b      	lsrs	r3, r3, #20
 8012c0e:	051b      	lsls	r3, r3, #20
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d033      	beq.n	8012c7c <_dtoa_r+0x74c>
 8012c14:	9b07      	ldr	r3, [sp, #28]
 8012c16:	3301      	adds	r3, #1
 8012c18:	f10a 0a01 	add.w	sl, sl, #1
 8012c1c:	9307      	str	r3, [sp, #28]
 8012c1e:	f04f 0801 	mov.w	r8, #1
 8012c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c24:	bb73      	cbnz	r3, 8012c84 <_dtoa_r+0x754>
 8012c26:	2001      	movs	r0, #1
 8012c28:	e034      	b.n	8012c94 <_dtoa_r+0x764>
 8012c2a:	bf00      	nop
 8012c2c:	08014b60 	.word	0x08014b60
 8012c30:	08014b38 	.word	0x08014b38
 8012c34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012c3a:	e790      	b.n	8012b5e <_dtoa_r+0x62e>
 8012c3c:	f109 35ff 	add.w	r5, r9, #4294967295
 8012c40:	45a8      	cmp	r8, r5
 8012c42:	bfbf      	itttt	lt
 8012c44:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8012c46:	eba5 0808 	sublt.w	r8, r5, r8
 8012c4a:	4443      	addlt	r3, r8
 8012c4c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8012c4e:	bfb6      	itet	lt
 8012c50:	46a8      	movlt	r8, r5
 8012c52:	eba8 0505 	subge.w	r5, r8, r5
 8012c56:	2500      	movlt	r5, #0
 8012c58:	f1b9 0f00 	cmp.w	r9, #0
 8012c5c:	bfb9      	ittee	lt
 8012c5e:	ebaa 0609 	sublt.w	r6, sl, r9
 8012c62:	2300      	movlt	r3, #0
 8012c64:	4656      	movge	r6, sl
 8012c66:	464b      	movge	r3, r9
 8012c68:	e77b      	b.n	8012b62 <_dtoa_r+0x632>
 8012c6a:	4645      	mov	r5, r8
 8012c6c:	4656      	mov	r6, sl
 8012c6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012c70:	e780      	b.n	8012b74 <_dtoa_r+0x644>
 8012c72:	4642      	mov	r2, r8
 8012c74:	e7a8      	b.n	8012bc8 <_dtoa_r+0x698>
 8012c76:	f04f 0800 	mov.w	r8, #0
 8012c7a:	e7d2      	b.n	8012c22 <_dtoa_r+0x6f2>
 8012c7c:	4698      	mov	r8, r3
 8012c7e:	e7d0      	b.n	8012c22 <_dtoa_r+0x6f2>
 8012c80:	f04f 0800 	mov.w	r8, #0
 8012c84:	692b      	ldr	r3, [r5, #16]
 8012c86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012c8a:	6918      	ldr	r0, [r3, #16]
 8012c8c:	f000 fdb4 	bl	80137f8 <__hi0bits>
 8012c90:	f1c0 0020 	rsb	r0, r0, #32
 8012c94:	9b07      	ldr	r3, [sp, #28]
 8012c96:	4418      	add	r0, r3
 8012c98:	f010 001f 	ands.w	r0, r0, #31
 8012c9c:	d047      	beq.n	8012d2e <_dtoa_r+0x7fe>
 8012c9e:	f1c0 0320 	rsb	r3, r0, #32
 8012ca2:	2b04      	cmp	r3, #4
 8012ca4:	dd3b      	ble.n	8012d1e <_dtoa_r+0x7ee>
 8012ca6:	9b07      	ldr	r3, [sp, #28]
 8012ca8:	f1c0 001c 	rsb	r0, r0, #28
 8012cac:	4482      	add	sl, r0
 8012cae:	4406      	add	r6, r0
 8012cb0:	4403      	add	r3, r0
 8012cb2:	9307      	str	r3, [sp, #28]
 8012cb4:	f1ba 0f00 	cmp.w	sl, #0
 8012cb8:	dd05      	ble.n	8012cc6 <_dtoa_r+0x796>
 8012cba:	4652      	mov	r2, sl
 8012cbc:	9901      	ldr	r1, [sp, #4]
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f000 fed6 	bl	8013a70 <__lshift>
 8012cc4:	9001      	str	r0, [sp, #4]
 8012cc6:	9b07      	ldr	r3, [sp, #28]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	dd05      	ble.n	8012cd8 <_dtoa_r+0x7a8>
 8012ccc:	4629      	mov	r1, r5
 8012cce:	461a      	mov	r2, r3
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f000 fecd 	bl	8013a70 <__lshift>
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012cda:	b353      	cbz	r3, 8012d32 <_dtoa_r+0x802>
 8012cdc:	4629      	mov	r1, r5
 8012cde:	9801      	ldr	r0, [sp, #4]
 8012ce0:	f000 ff1a 	bl	8013b18 <__mcmp>
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	da24      	bge.n	8012d32 <_dtoa_r+0x802>
 8012ce8:	2300      	movs	r3, #0
 8012cea:	220a      	movs	r2, #10
 8012cec:	9901      	ldr	r1, [sp, #4]
 8012cee:	4620      	mov	r0, r4
 8012cf0:	f000 fd09 	bl	8013706 <__multadd>
 8012cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cf6:	9001      	str	r0, [sp, #4]
 8012cf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	f000 8142 	beq.w	8012f86 <_dtoa_r+0xa56>
 8012d02:	2300      	movs	r3, #0
 8012d04:	4639      	mov	r1, r7
 8012d06:	220a      	movs	r2, #10
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f000 fcfc 	bl	8013706 <__multadd>
 8012d0e:	9b06      	ldr	r3, [sp, #24]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	4607      	mov	r7, r0
 8012d14:	dc4b      	bgt.n	8012dae <_dtoa_r+0x87e>
 8012d16:	9b08      	ldr	r3, [sp, #32]
 8012d18:	2b02      	cmp	r3, #2
 8012d1a:	dd48      	ble.n	8012dae <_dtoa_r+0x87e>
 8012d1c:	e011      	b.n	8012d42 <_dtoa_r+0x812>
 8012d1e:	d0c9      	beq.n	8012cb4 <_dtoa_r+0x784>
 8012d20:	9a07      	ldr	r2, [sp, #28]
 8012d22:	331c      	adds	r3, #28
 8012d24:	441a      	add	r2, r3
 8012d26:	449a      	add	sl, r3
 8012d28:	441e      	add	r6, r3
 8012d2a:	4613      	mov	r3, r2
 8012d2c:	e7c1      	b.n	8012cb2 <_dtoa_r+0x782>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	e7f6      	b.n	8012d20 <_dtoa_r+0x7f0>
 8012d32:	f1b9 0f00 	cmp.w	r9, #0
 8012d36:	dc34      	bgt.n	8012da2 <_dtoa_r+0x872>
 8012d38:	9b08      	ldr	r3, [sp, #32]
 8012d3a:	2b02      	cmp	r3, #2
 8012d3c:	dd31      	ble.n	8012da2 <_dtoa_r+0x872>
 8012d3e:	f8cd 9018 	str.w	r9, [sp, #24]
 8012d42:	9b06      	ldr	r3, [sp, #24]
 8012d44:	b963      	cbnz	r3, 8012d60 <_dtoa_r+0x830>
 8012d46:	4629      	mov	r1, r5
 8012d48:	2205      	movs	r2, #5
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	f000 fcdb 	bl	8013706 <__multadd>
 8012d50:	4601      	mov	r1, r0
 8012d52:	4605      	mov	r5, r0
 8012d54:	9801      	ldr	r0, [sp, #4]
 8012d56:	f000 fedf 	bl	8013b18 <__mcmp>
 8012d5a:	2800      	cmp	r0, #0
 8012d5c:	f73f adfc 	bgt.w	8012958 <_dtoa_r+0x428>
 8012d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d62:	9e04      	ldr	r6, [sp, #16]
 8012d64:	ea6f 0b03 	mvn.w	fp, r3
 8012d68:	f04f 0900 	mov.w	r9, #0
 8012d6c:	4629      	mov	r1, r5
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f000 fcb2 	bl	80136d8 <_Bfree>
 8012d74:	2f00      	cmp	r7, #0
 8012d76:	f43f aebb 	beq.w	8012af0 <_dtoa_r+0x5c0>
 8012d7a:	f1b9 0f00 	cmp.w	r9, #0
 8012d7e:	d005      	beq.n	8012d8c <_dtoa_r+0x85c>
 8012d80:	45b9      	cmp	r9, r7
 8012d82:	d003      	beq.n	8012d8c <_dtoa_r+0x85c>
 8012d84:	4649      	mov	r1, r9
 8012d86:	4620      	mov	r0, r4
 8012d88:	f000 fca6 	bl	80136d8 <_Bfree>
 8012d8c:	4639      	mov	r1, r7
 8012d8e:	4620      	mov	r0, r4
 8012d90:	f000 fca2 	bl	80136d8 <_Bfree>
 8012d94:	e6ac      	b.n	8012af0 <_dtoa_r+0x5c0>
 8012d96:	2500      	movs	r5, #0
 8012d98:	462f      	mov	r7, r5
 8012d9a:	e7e1      	b.n	8012d60 <_dtoa_r+0x830>
 8012d9c:	469b      	mov	fp, r3
 8012d9e:	462f      	mov	r7, r5
 8012da0:	e5da      	b.n	8012958 <_dtoa_r+0x428>
 8012da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012da4:	f8cd 9018 	str.w	r9, [sp, #24]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	f000 80f3 	beq.w	8012f94 <_dtoa_r+0xa64>
 8012dae:	2e00      	cmp	r6, #0
 8012db0:	dd05      	ble.n	8012dbe <_dtoa_r+0x88e>
 8012db2:	4639      	mov	r1, r7
 8012db4:	4632      	mov	r2, r6
 8012db6:	4620      	mov	r0, r4
 8012db8:	f000 fe5a 	bl	8013a70 <__lshift>
 8012dbc:	4607      	mov	r7, r0
 8012dbe:	f1b8 0f00 	cmp.w	r8, #0
 8012dc2:	d04c      	beq.n	8012e5e <_dtoa_r+0x92e>
 8012dc4:	6879      	ldr	r1, [r7, #4]
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f000 fc52 	bl	8013670 <_Balloc>
 8012dcc:	693a      	ldr	r2, [r7, #16]
 8012dce:	3202      	adds	r2, #2
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	0092      	lsls	r2, r2, #2
 8012dd4:	f107 010c 	add.w	r1, r7, #12
 8012dd8:	300c      	adds	r0, #12
 8012dda:	f7fd fe39 	bl	8010a50 <memcpy>
 8012dde:	2201      	movs	r2, #1
 8012de0:	4631      	mov	r1, r6
 8012de2:	4620      	mov	r0, r4
 8012de4:	f000 fe44 	bl	8013a70 <__lshift>
 8012de8:	9b02      	ldr	r3, [sp, #8]
 8012dea:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012dee:	f003 0301 	and.w	r3, r3, #1
 8012df2:	46b9      	mov	r9, r7
 8012df4:	9307      	str	r3, [sp, #28]
 8012df6:	4607      	mov	r7, r0
 8012df8:	4629      	mov	r1, r5
 8012dfa:	9801      	ldr	r0, [sp, #4]
 8012dfc:	f7ff fb0a 	bl	8012414 <quorem>
 8012e00:	4649      	mov	r1, r9
 8012e02:	4606      	mov	r6, r0
 8012e04:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012e08:	9801      	ldr	r0, [sp, #4]
 8012e0a:	f000 fe85 	bl	8013b18 <__mcmp>
 8012e0e:	463a      	mov	r2, r7
 8012e10:	9002      	str	r0, [sp, #8]
 8012e12:	4629      	mov	r1, r5
 8012e14:	4620      	mov	r0, r4
 8012e16:	f000 fe99 	bl	8013b4c <__mdiff>
 8012e1a:	68c3      	ldr	r3, [r0, #12]
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	bb03      	cbnz	r3, 8012e62 <_dtoa_r+0x932>
 8012e20:	4601      	mov	r1, r0
 8012e22:	9009      	str	r0, [sp, #36]	; 0x24
 8012e24:	9801      	ldr	r0, [sp, #4]
 8012e26:	f000 fe77 	bl	8013b18 <__mcmp>
 8012e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	4611      	mov	r1, r2
 8012e30:	4620      	mov	r0, r4
 8012e32:	9309      	str	r3, [sp, #36]	; 0x24
 8012e34:	f000 fc50 	bl	80136d8 <_Bfree>
 8012e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e3a:	b9a3      	cbnz	r3, 8012e66 <_dtoa_r+0x936>
 8012e3c:	9a08      	ldr	r2, [sp, #32]
 8012e3e:	b992      	cbnz	r2, 8012e66 <_dtoa_r+0x936>
 8012e40:	9a07      	ldr	r2, [sp, #28]
 8012e42:	b982      	cbnz	r2, 8012e66 <_dtoa_r+0x936>
 8012e44:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e48:	d029      	beq.n	8012e9e <_dtoa_r+0x96e>
 8012e4a:	9b02      	ldr	r3, [sp, #8]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	dd01      	ble.n	8012e54 <_dtoa_r+0x924>
 8012e50:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8012e54:	f10a 0601 	add.w	r6, sl, #1
 8012e58:	f88a 8000 	strb.w	r8, [sl]
 8012e5c:	e786      	b.n	8012d6c <_dtoa_r+0x83c>
 8012e5e:	4638      	mov	r0, r7
 8012e60:	e7c2      	b.n	8012de8 <_dtoa_r+0x8b8>
 8012e62:	2301      	movs	r3, #1
 8012e64:	e7e3      	b.n	8012e2e <_dtoa_r+0x8fe>
 8012e66:	9a02      	ldr	r2, [sp, #8]
 8012e68:	2a00      	cmp	r2, #0
 8012e6a:	db04      	blt.n	8012e76 <_dtoa_r+0x946>
 8012e6c:	d124      	bne.n	8012eb8 <_dtoa_r+0x988>
 8012e6e:	9a08      	ldr	r2, [sp, #32]
 8012e70:	bb12      	cbnz	r2, 8012eb8 <_dtoa_r+0x988>
 8012e72:	9a07      	ldr	r2, [sp, #28]
 8012e74:	bb02      	cbnz	r2, 8012eb8 <_dtoa_r+0x988>
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	ddec      	ble.n	8012e54 <_dtoa_r+0x924>
 8012e7a:	2201      	movs	r2, #1
 8012e7c:	9901      	ldr	r1, [sp, #4]
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 fdf6 	bl	8013a70 <__lshift>
 8012e84:	4629      	mov	r1, r5
 8012e86:	9001      	str	r0, [sp, #4]
 8012e88:	f000 fe46 	bl	8013b18 <__mcmp>
 8012e8c:	2800      	cmp	r0, #0
 8012e8e:	dc03      	bgt.n	8012e98 <_dtoa_r+0x968>
 8012e90:	d1e0      	bne.n	8012e54 <_dtoa_r+0x924>
 8012e92:	f018 0f01 	tst.w	r8, #1
 8012e96:	d0dd      	beq.n	8012e54 <_dtoa_r+0x924>
 8012e98:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e9c:	d1d8      	bne.n	8012e50 <_dtoa_r+0x920>
 8012e9e:	2339      	movs	r3, #57	; 0x39
 8012ea0:	f10a 0601 	add.w	r6, sl, #1
 8012ea4:	f88a 3000 	strb.w	r3, [sl]
 8012ea8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012eac:	2b39      	cmp	r3, #57	; 0x39
 8012eae:	f106 32ff 	add.w	r2, r6, #4294967295
 8012eb2:	d04c      	beq.n	8012f4e <_dtoa_r+0xa1e>
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	e051      	b.n	8012f5c <_dtoa_r+0xa2c>
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f10a 0601 	add.w	r6, sl, #1
 8012ebe:	dd05      	ble.n	8012ecc <_dtoa_r+0x99c>
 8012ec0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012ec4:	d0eb      	beq.n	8012e9e <_dtoa_r+0x96e>
 8012ec6:	f108 0801 	add.w	r8, r8, #1
 8012eca:	e7c5      	b.n	8012e58 <_dtoa_r+0x928>
 8012ecc:	9b04      	ldr	r3, [sp, #16]
 8012ece:	9a06      	ldr	r2, [sp, #24]
 8012ed0:	f806 8c01 	strb.w	r8, [r6, #-1]
 8012ed4:	1af3      	subs	r3, r6, r3
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d021      	beq.n	8012f1e <_dtoa_r+0x9ee>
 8012eda:	2300      	movs	r3, #0
 8012edc:	220a      	movs	r2, #10
 8012ede:	9901      	ldr	r1, [sp, #4]
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 fc10 	bl	8013706 <__multadd>
 8012ee6:	45b9      	cmp	r9, r7
 8012ee8:	9001      	str	r0, [sp, #4]
 8012eea:	f04f 0300 	mov.w	r3, #0
 8012eee:	f04f 020a 	mov.w	r2, #10
 8012ef2:	4649      	mov	r1, r9
 8012ef4:	4620      	mov	r0, r4
 8012ef6:	d105      	bne.n	8012f04 <_dtoa_r+0x9d4>
 8012ef8:	f000 fc05 	bl	8013706 <__multadd>
 8012efc:	4681      	mov	r9, r0
 8012efe:	4607      	mov	r7, r0
 8012f00:	46b2      	mov	sl, r6
 8012f02:	e779      	b.n	8012df8 <_dtoa_r+0x8c8>
 8012f04:	f000 fbff 	bl	8013706 <__multadd>
 8012f08:	4639      	mov	r1, r7
 8012f0a:	4681      	mov	r9, r0
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	220a      	movs	r2, #10
 8012f10:	4620      	mov	r0, r4
 8012f12:	f000 fbf8 	bl	8013706 <__multadd>
 8012f16:	4607      	mov	r7, r0
 8012f18:	e7f2      	b.n	8012f00 <_dtoa_r+0x9d0>
 8012f1a:	f04f 0900 	mov.w	r9, #0
 8012f1e:	2201      	movs	r2, #1
 8012f20:	9901      	ldr	r1, [sp, #4]
 8012f22:	4620      	mov	r0, r4
 8012f24:	f000 fda4 	bl	8013a70 <__lshift>
 8012f28:	4629      	mov	r1, r5
 8012f2a:	9001      	str	r0, [sp, #4]
 8012f2c:	f000 fdf4 	bl	8013b18 <__mcmp>
 8012f30:	2800      	cmp	r0, #0
 8012f32:	dcb9      	bgt.n	8012ea8 <_dtoa_r+0x978>
 8012f34:	d102      	bne.n	8012f3c <_dtoa_r+0xa0c>
 8012f36:	f018 0f01 	tst.w	r8, #1
 8012f3a:	d1b5      	bne.n	8012ea8 <_dtoa_r+0x978>
 8012f3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012f40:	2b30      	cmp	r3, #48	; 0x30
 8012f42:	f106 32ff 	add.w	r2, r6, #4294967295
 8012f46:	f47f af11 	bne.w	8012d6c <_dtoa_r+0x83c>
 8012f4a:	4616      	mov	r6, r2
 8012f4c:	e7f6      	b.n	8012f3c <_dtoa_r+0xa0c>
 8012f4e:	9b04      	ldr	r3, [sp, #16]
 8012f50:	4293      	cmp	r3, r2
 8012f52:	d105      	bne.n	8012f60 <_dtoa_r+0xa30>
 8012f54:	9a04      	ldr	r2, [sp, #16]
 8012f56:	f10b 0b01 	add.w	fp, fp, #1
 8012f5a:	2331      	movs	r3, #49	; 0x31
 8012f5c:	7013      	strb	r3, [r2, #0]
 8012f5e:	e705      	b.n	8012d6c <_dtoa_r+0x83c>
 8012f60:	4616      	mov	r6, r2
 8012f62:	e7a1      	b.n	8012ea8 <_dtoa_r+0x978>
 8012f64:	4b16      	ldr	r3, [pc, #88]	; (8012fc0 <_dtoa_r+0xa90>)
 8012f66:	f7ff bb48 	b.w	80125fa <_dtoa_r+0xca>
 8012f6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	f47f ab23 	bne.w	80125b8 <_dtoa_r+0x88>
 8012f72:	4b14      	ldr	r3, [pc, #80]	; (8012fc4 <_dtoa_r+0xa94>)
 8012f74:	f7ff bb41 	b.w	80125fa <_dtoa_r+0xca>
 8012f78:	9b08      	ldr	r3, [sp, #32]
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	f77f ae3b 	ble.w	8012bf6 <_dtoa_r+0x6c6>
 8012f80:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012f84:	e64f      	b.n	8012c26 <_dtoa_r+0x6f6>
 8012f86:	9b06      	ldr	r3, [sp, #24]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	dc03      	bgt.n	8012f94 <_dtoa_r+0xa64>
 8012f8c:	9b08      	ldr	r3, [sp, #32]
 8012f8e:	2b02      	cmp	r3, #2
 8012f90:	f73f aed7 	bgt.w	8012d42 <_dtoa_r+0x812>
 8012f94:	9e04      	ldr	r6, [sp, #16]
 8012f96:	9801      	ldr	r0, [sp, #4]
 8012f98:	4629      	mov	r1, r5
 8012f9a:	f7ff fa3b 	bl	8012414 <quorem>
 8012f9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012fa2:	f806 8b01 	strb.w	r8, [r6], #1
 8012fa6:	9b04      	ldr	r3, [sp, #16]
 8012fa8:	9a06      	ldr	r2, [sp, #24]
 8012faa:	1af3      	subs	r3, r6, r3
 8012fac:	429a      	cmp	r2, r3
 8012fae:	ddb4      	ble.n	8012f1a <_dtoa_r+0x9ea>
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	220a      	movs	r2, #10
 8012fb4:	9901      	ldr	r1, [sp, #4]
 8012fb6:	4620      	mov	r0, r4
 8012fb8:	f000 fba5 	bl	8013706 <__multadd>
 8012fbc:	9001      	str	r0, [sp, #4]
 8012fbe:	e7ea      	b.n	8012f96 <_dtoa_r+0xa66>
 8012fc0:	08014aa4 	.word	0x08014aa4
 8012fc4:	08014b20 	.word	0x08014b20

08012fc8 <rshift>:
 8012fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fca:	6906      	ldr	r6, [r0, #16]
 8012fcc:	114b      	asrs	r3, r1, #5
 8012fce:	429e      	cmp	r6, r3
 8012fd0:	f100 0414 	add.w	r4, r0, #20
 8012fd4:	dd30      	ble.n	8013038 <rshift+0x70>
 8012fd6:	f011 011f 	ands.w	r1, r1, #31
 8012fda:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012fde:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012fe2:	d108      	bne.n	8012ff6 <rshift+0x2e>
 8012fe4:	4621      	mov	r1, r4
 8012fe6:	42b2      	cmp	r2, r6
 8012fe8:	460b      	mov	r3, r1
 8012fea:	d211      	bcs.n	8013010 <rshift+0x48>
 8012fec:	f852 3b04 	ldr.w	r3, [r2], #4
 8012ff0:	f841 3b04 	str.w	r3, [r1], #4
 8012ff4:	e7f7      	b.n	8012fe6 <rshift+0x1e>
 8012ff6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012ffa:	f1c1 0c20 	rsb	ip, r1, #32
 8012ffe:	40cd      	lsrs	r5, r1
 8013000:	3204      	adds	r2, #4
 8013002:	4623      	mov	r3, r4
 8013004:	42b2      	cmp	r2, r6
 8013006:	4617      	mov	r7, r2
 8013008:	d30c      	bcc.n	8013024 <rshift+0x5c>
 801300a:	601d      	str	r5, [r3, #0]
 801300c:	b105      	cbz	r5, 8013010 <rshift+0x48>
 801300e:	3304      	adds	r3, #4
 8013010:	1b1a      	subs	r2, r3, r4
 8013012:	42a3      	cmp	r3, r4
 8013014:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013018:	bf08      	it	eq
 801301a:	2300      	moveq	r3, #0
 801301c:	6102      	str	r2, [r0, #16]
 801301e:	bf08      	it	eq
 8013020:	6143      	streq	r3, [r0, #20]
 8013022:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013024:	683f      	ldr	r7, [r7, #0]
 8013026:	fa07 f70c 	lsl.w	r7, r7, ip
 801302a:	433d      	orrs	r5, r7
 801302c:	f843 5b04 	str.w	r5, [r3], #4
 8013030:	f852 5b04 	ldr.w	r5, [r2], #4
 8013034:	40cd      	lsrs	r5, r1
 8013036:	e7e5      	b.n	8013004 <rshift+0x3c>
 8013038:	4623      	mov	r3, r4
 801303a:	e7e9      	b.n	8013010 <rshift+0x48>

0801303c <__hexdig_fun>:
 801303c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013040:	2b09      	cmp	r3, #9
 8013042:	d802      	bhi.n	801304a <__hexdig_fun+0xe>
 8013044:	3820      	subs	r0, #32
 8013046:	b2c0      	uxtb	r0, r0
 8013048:	4770      	bx	lr
 801304a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801304e:	2b05      	cmp	r3, #5
 8013050:	d801      	bhi.n	8013056 <__hexdig_fun+0x1a>
 8013052:	3847      	subs	r0, #71	; 0x47
 8013054:	e7f7      	b.n	8013046 <__hexdig_fun+0xa>
 8013056:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801305a:	2b05      	cmp	r3, #5
 801305c:	d801      	bhi.n	8013062 <__hexdig_fun+0x26>
 801305e:	3827      	subs	r0, #39	; 0x27
 8013060:	e7f1      	b.n	8013046 <__hexdig_fun+0xa>
 8013062:	2000      	movs	r0, #0
 8013064:	4770      	bx	lr

08013066 <__gethex>:
 8013066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801306a:	b08b      	sub	sp, #44	; 0x2c
 801306c:	468a      	mov	sl, r1
 801306e:	9002      	str	r0, [sp, #8]
 8013070:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013072:	9306      	str	r3, [sp, #24]
 8013074:	4690      	mov	r8, r2
 8013076:	f000 fad0 	bl	801361a <__localeconv_l>
 801307a:	6803      	ldr	r3, [r0, #0]
 801307c:	9303      	str	r3, [sp, #12]
 801307e:	4618      	mov	r0, r3
 8013080:	f7ed f8e8 	bl	8000254 <strlen>
 8013084:	9b03      	ldr	r3, [sp, #12]
 8013086:	9001      	str	r0, [sp, #4]
 8013088:	4403      	add	r3, r0
 801308a:	f04f 0b00 	mov.w	fp, #0
 801308e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013092:	9307      	str	r3, [sp, #28]
 8013094:	f8da 3000 	ldr.w	r3, [sl]
 8013098:	3302      	adds	r3, #2
 801309a:	461f      	mov	r7, r3
 801309c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80130a0:	2830      	cmp	r0, #48	; 0x30
 80130a2:	d06c      	beq.n	801317e <__gethex+0x118>
 80130a4:	f7ff ffca 	bl	801303c <__hexdig_fun>
 80130a8:	4604      	mov	r4, r0
 80130aa:	2800      	cmp	r0, #0
 80130ac:	d16a      	bne.n	8013184 <__gethex+0x11e>
 80130ae:	9a01      	ldr	r2, [sp, #4]
 80130b0:	9903      	ldr	r1, [sp, #12]
 80130b2:	4638      	mov	r0, r7
 80130b4:	f001 f8f4 	bl	80142a0 <strncmp>
 80130b8:	2800      	cmp	r0, #0
 80130ba:	d166      	bne.n	801318a <__gethex+0x124>
 80130bc:	9b01      	ldr	r3, [sp, #4]
 80130be:	5cf8      	ldrb	r0, [r7, r3]
 80130c0:	18fe      	adds	r6, r7, r3
 80130c2:	f7ff ffbb 	bl	801303c <__hexdig_fun>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	d062      	beq.n	8013190 <__gethex+0x12a>
 80130ca:	4633      	mov	r3, r6
 80130cc:	7818      	ldrb	r0, [r3, #0]
 80130ce:	2830      	cmp	r0, #48	; 0x30
 80130d0:	461f      	mov	r7, r3
 80130d2:	f103 0301 	add.w	r3, r3, #1
 80130d6:	d0f9      	beq.n	80130cc <__gethex+0x66>
 80130d8:	f7ff ffb0 	bl	801303c <__hexdig_fun>
 80130dc:	fab0 f580 	clz	r5, r0
 80130e0:	096d      	lsrs	r5, r5, #5
 80130e2:	4634      	mov	r4, r6
 80130e4:	f04f 0b01 	mov.w	fp, #1
 80130e8:	463a      	mov	r2, r7
 80130ea:	4616      	mov	r6, r2
 80130ec:	3201      	adds	r2, #1
 80130ee:	7830      	ldrb	r0, [r6, #0]
 80130f0:	f7ff ffa4 	bl	801303c <__hexdig_fun>
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d1f8      	bne.n	80130ea <__gethex+0x84>
 80130f8:	9a01      	ldr	r2, [sp, #4]
 80130fa:	9903      	ldr	r1, [sp, #12]
 80130fc:	4630      	mov	r0, r6
 80130fe:	f001 f8cf 	bl	80142a0 <strncmp>
 8013102:	b950      	cbnz	r0, 801311a <__gethex+0xb4>
 8013104:	b954      	cbnz	r4, 801311c <__gethex+0xb6>
 8013106:	9b01      	ldr	r3, [sp, #4]
 8013108:	18f4      	adds	r4, r6, r3
 801310a:	4622      	mov	r2, r4
 801310c:	4616      	mov	r6, r2
 801310e:	3201      	adds	r2, #1
 8013110:	7830      	ldrb	r0, [r6, #0]
 8013112:	f7ff ff93 	bl	801303c <__hexdig_fun>
 8013116:	2800      	cmp	r0, #0
 8013118:	d1f8      	bne.n	801310c <__gethex+0xa6>
 801311a:	b10c      	cbz	r4, 8013120 <__gethex+0xba>
 801311c:	1ba4      	subs	r4, r4, r6
 801311e:	00a4      	lsls	r4, r4, #2
 8013120:	7833      	ldrb	r3, [r6, #0]
 8013122:	2b50      	cmp	r3, #80	; 0x50
 8013124:	d001      	beq.n	801312a <__gethex+0xc4>
 8013126:	2b70      	cmp	r3, #112	; 0x70
 8013128:	d140      	bne.n	80131ac <__gethex+0x146>
 801312a:	7873      	ldrb	r3, [r6, #1]
 801312c:	2b2b      	cmp	r3, #43	; 0x2b
 801312e:	d031      	beq.n	8013194 <__gethex+0x12e>
 8013130:	2b2d      	cmp	r3, #45	; 0x2d
 8013132:	d033      	beq.n	801319c <__gethex+0x136>
 8013134:	1c71      	adds	r1, r6, #1
 8013136:	f04f 0900 	mov.w	r9, #0
 801313a:	7808      	ldrb	r0, [r1, #0]
 801313c:	f7ff ff7e 	bl	801303c <__hexdig_fun>
 8013140:	1e43      	subs	r3, r0, #1
 8013142:	b2db      	uxtb	r3, r3
 8013144:	2b18      	cmp	r3, #24
 8013146:	d831      	bhi.n	80131ac <__gethex+0x146>
 8013148:	f1a0 0210 	sub.w	r2, r0, #16
 801314c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013150:	f7ff ff74 	bl	801303c <__hexdig_fun>
 8013154:	1e43      	subs	r3, r0, #1
 8013156:	b2db      	uxtb	r3, r3
 8013158:	2b18      	cmp	r3, #24
 801315a:	d922      	bls.n	80131a2 <__gethex+0x13c>
 801315c:	f1b9 0f00 	cmp.w	r9, #0
 8013160:	d000      	beq.n	8013164 <__gethex+0xfe>
 8013162:	4252      	negs	r2, r2
 8013164:	4414      	add	r4, r2
 8013166:	f8ca 1000 	str.w	r1, [sl]
 801316a:	b30d      	cbz	r5, 80131b0 <__gethex+0x14a>
 801316c:	f1bb 0f00 	cmp.w	fp, #0
 8013170:	bf0c      	ite	eq
 8013172:	2706      	moveq	r7, #6
 8013174:	2700      	movne	r7, #0
 8013176:	4638      	mov	r0, r7
 8013178:	b00b      	add	sp, #44	; 0x2c
 801317a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801317e:	f10b 0b01 	add.w	fp, fp, #1
 8013182:	e78a      	b.n	801309a <__gethex+0x34>
 8013184:	2500      	movs	r5, #0
 8013186:	462c      	mov	r4, r5
 8013188:	e7ae      	b.n	80130e8 <__gethex+0x82>
 801318a:	463e      	mov	r6, r7
 801318c:	2501      	movs	r5, #1
 801318e:	e7c7      	b.n	8013120 <__gethex+0xba>
 8013190:	4604      	mov	r4, r0
 8013192:	e7fb      	b.n	801318c <__gethex+0x126>
 8013194:	f04f 0900 	mov.w	r9, #0
 8013198:	1cb1      	adds	r1, r6, #2
 801319a:	e7ce      	b.n	801313a <__gethex+0xd4>
 801319c:	f04f 0901 	mov.w	r9, #1
 80131a0:	e7fa      	b.n	8013198 <__gethex+0x132>
 80131a2:	230a      	movs	r3, #10
 80131a4:	fb03 0202 	mla	r2, r3, r2, r0
 80131a8:	3a10      	subs	r2, #16
 80131aa:	e7cf      	b.n	801314c <__gethex+0xe6>
 80131ac:	4631      	mov	r1, r6
 80131ae:	e7da      	b.n	8013166 <__gethex+0x100>
 80131b0:	1bf3      	subs	r3, r6, r7
 80131b2:	3b01      	subs	r3, #1
 80131b4:	4629      	mov	r1, r5
 80131b6:	2b07      	cmp	r3, #7
 80131b8:	dc49      	bgt.n	801324e <__gethex+0x1e8>
 80131ba:	9802      	ldr	r0, [sp, #8]
 80131bc:	f000 fa58 	bl	8013670 <_Balloc>
 80131c0:	9b01      	ldr	r3, [sp, #4]
 80131c2:	f100 0914 	add.w	r9, r0, #20
 80131c6:	f04f 0b00 	mov.w	fp, #0
 80131ca:	f1c3 0301 	rsb	r3, r3, #1
 80131ce:	4605      	mov	r5, r0
 80131d0:	f8cd 9010 	str.w	r9, [sp, #16]
 80131d4:	46da      	mov	sl, fp
 80131d6:	9308      	str	r3, [sp, #32]
 80131d8:	42b7      	cmp	r7, r6
 80131da:	d33b      	bcc.n	8013254 <__gethex+0x1ee>
 80131dc:	9804      	ldr	r0, [sp, #16]
 80131de:	f840 ab04 	str.w	sl, [r0], #4
 80131e2:	eba0 0009 	sub.w	r0, r0, r9
 80131e6:	1080      	asrs	r0, r0, #2
 80131e8:	6128      	str	r0, [r5, #16]
 80131ea:	0147      	lsls	r7, r0, #5
 80131ec:	4650      	mov	r0, sl
 80131ee:	f000 fb03 	bl	80137f8 <__hi0bits>
 80131f2:	f8d8 6000 	ldr.w	r6, [r8]
 80131f6:	1a3f      	subs	r7, r7, r0
 80131f8:	42b7      	cmp	r7, r6
 80131fa:	dd64      	ble.n	80132c6 <__gethex+0x260>
 80131fc:	1bbf      	subs	r7, r7, r6
 80131fe:	4639      	mov	r1, r7
 8013200:	4628      	mov	r0, r5
 8013202:	f000 fe14 	bl	8013e2e <__any_on>
 8013206:	4682      	mov	sl, r0
 8013208:	b178      	cbz	r0, 801322a <__gethex+0x1c4>
 801320a:	1e7b      	subs	r3, r7, #1
 801320c:	1159      	asrs	r1, r3, #5
 801320e:	f003 021f 	and.w	r2, r3, #31
 8013212:	f04f 0a01 	mov.w	sl, #1
 8013216:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801321a:	fa0a f202 	lsl.w	r2, sl, r2
 801321e:	420a      	tst	r2, r1
 8013220:	d003      	beq.n	801322a <__gethex+0x1c4>
 8013222:	4553      	cmp	r3, sl
 8013224:	dc46      	bgt.n	80132b4 <__gethex+0x24e>
 8013226:	f04f 0a02 	mov.w	sl, #2
 801322a:	4639      	mov	r1, r7
 801322c:	4628      	mov	r0, r5
 801322e:	f7ff fecb 	bl	8012fc8 <rshift>
 8013232:	443c      	add	r4, r7
 8013234:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013238:	42a3      	cmp	r3, r4
 801323a:	da52      	bge.n	80132e2 <__gethex+0x27c>
 801323c:	4629      	mov	r1, r5
 801323e:	9802      	ldr	r0, [sp, #8]
 8013240:	f000 fa4a 	bl	80136d8 <_Bfree>
 8013244:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013246:	2300      	movs	r3, #0
 8013248:	6013      	str	r3, [r2, #0]
 801324a:	27a3      	movs	r7, #163	; 0xa3
 801324c:	e793      	b.n	8013176 <__gethex+0x110>
 801324e:	3101      	adds	r1, #1
 8013250:	105b      	asrs	r3, r3, #1
 8013252:	e7b0      	b.n	80131b6 <__gethex+0x150>
 8013254:	1e73      	subs	r3, r6, #1
 8013256:	9305      	str	r3, [sp, #20]
 8013258:	9a07      	ldr	r2, [sp, #28]
 801325a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801325e:	4293      	cmp	r3, r2
 8013260:	d018      	beq.n	8013294 <__gethex+0x22e>
 8013262:	f1bb 0f20 	cmp.w	fp, #32
 8013266:	d107      	bne.n	8013278 <__gethex+0x212>
 8013268:	9b04      	ldr	r3, [sp, #16]
 801326a:	f8c3 a000 	str.w	sl, [r3]
 801326e:	3304      	adds	r3, #4
 8013270:	f04f 0a00 	mov.w	sl, #0
 8013274:	9304      	str	r3, [sp, #16]
 8013276:	46d3      	mov	fp, sl
 8013278:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801327c:	f7ff fede 	bl	801303c <__hexdig_fun>
 8013280:	f000 000f 	and.w	r0, r0, #15
 8013284:	fa00 f00b 	lsl.w	r0, r0, fp
 8013288:	ea4a 0a00 	orr.w	sl, sl, r0
 801328c:	f10b 0b04 	add.w	fp, fp, #4
 8013290:	9b05      	ldr	r3, [sp, #20]
 8013292:	e00d      	b.n	80132b0 <__gethex+0x24a>
 8013294:	9b05      	ldr	r3, [sp, #20]
 8013296:	9a08      	ldr	r2, [sp, #32]
 8013298:	4413      	add	r3, r2
 801329a:	42bb      	cmp	r3, r7
 801329c:	d3e1      	bcc.n	8013262 <__gethex+0x1fc>
 801329e:	4618      	mov	r0, r3
 80132a0:	9a01      	ldr	r2, [sp, #4]
 80132a2:	9903      	ldr	r1, [sp, #12]
 80132a4:	9309      	str	r3, [sp, #36]	; 0x24
 80132a6:	f000 fffb 	bl	80142a0 <strncmp>
 80132aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132ac:	2800      	cmp	r0, #0
 80132ae:	d1d8      	bne.n	8013262 <__gethex+0x1fc>
 80132b0:	461e      	mov	r6, r3
 80132b2:	e791      	b.n	80131d8 <__gethex+0x172>
 80132b4:	1eb9      	subs	r1, r7, #2
 80132b6:	4628      	mov	r0, r5
 80132b8:	f000 fdb9 	bl	8013e2e <__any_on>
 80132bc:	2800      	cmp	r0, #0
 80132be:	d0b2      	beq.n	8013226 <__gethex+0x1c0>
 80132c0:	f04f 0a03 	mov.w	sl, #3
 80132c4:	e7b1      	b.n	801322a <__gethex+0x1c4>
 80132c6:	da09      	bge.n	80132dc <__gethex+0x276>
 80132c8:	1bf7      	subs	r7, r6, r7
 80132ca:	4629      	mov	r1, r5
 80132cc:	463a      	mov	r2, r7
 80132ce:	9802      	ldr	r0, [sp, #8]
 80132d0:	f000 fbce 	bl	8013a70 <__lshift>
 80132d4:	1be4      	subs	r4, r4, r7
 80132d6:	4605      	mov	r5, r0
 80132d8:	f100 0914 	add.w	r9, r0, #20
 80132dc:	f04f 0a00 	mov.w	sl, #0
 80132e0:	e7a8      	b.n	8013234 <__gethex+0x1ce>
 80132e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80132e6:	42a0      	cmp	r0, r4
 80132e8:	dd6a      	ble.n	80133c0 <__gethex+0x35a>
 80132ea:	1b04      	subs	r4, r0, r4
 80132ec:	42a6      	cmp	r6, r4
 80132ee:	dc2e      	bgt.n	801334e <__gethex+0x2e8>
 80132f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80132f4:	2b02      	cmp	r3, #2
 80132f6:	d022      	beq.n	801333e <__gethex+0x2d8>
 80132f8:	2b03      	cmp	r3, #3
 80132fa:	d024      	beq.n	8013346 <__gethex+0x2e0>
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d115      	bne.n	801332c <__gethex+0x2c6>
 8013300:	42a6      	cmp	r6, r4
 8013302:	d113      	bne.n	801332c <__gethex+0x2c6>
 8013304:	2e01      	cmp	r6, #1
 8013306:	dc0b      	bgt.n	8013320 <__gethex+0x2ba>
 8013308:	9a06      	ldr	r2, [sp, #24]
 801330a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801330e:	6013      	str	r3, [r2, #0]
 8013310:	2301      	movs	r3, #1
 8013312:	612b      	str	r3, [r5, #16]
 8013314:	f8c9 3000 	str.w	r3, [r9]
 8013318:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801331a:	2762      	movs	r7, #98	; 0x62
 801331c:	601d      	str	r5, [r3, #0]
 801331e:	e72a      	b.n	8013176 <__gethex+0x110>
 8013320:	1e71      	subs	r1, r6, #1
 8013322:	4628      	mov	r0, r5
 8013324:	f000 fd83 	bl	8013e2e <__any_on>
 8013328:	2800      	cmp	r0, #0
 801332a:	d1ed      	bne.n	8013308 <__gethex+0x2a2>
 801332c:	4629      	mov	r1, r5
 801332e:	9802      	ldr	r0, [sp, #8]
 8013330:	f000 f9d2 	bl	80136d8 <_Bfree>
 8013334:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013336:	2300      	movs	r3, #0
 8013338:	6013      	str	r3, [r2, #0]
 801333a:	2750      	movs	r7, #80	; 0x50
 801333c:	e71b      	b.n	8013176 <__gethex+0x110>
 801333e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013340:	2b00      	cmp	r3, #0
 8013342:	d0e1      	beq.n	8013308 <__gethex+0x2a2>
 8013344:	e7f2      	b.n	801332c <__gethex+0x2c6>
 8013346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013348:	2b00      	cmp	r3, #0
 801334a:	d1dd      	bne.n	8013308 <__gethex+0x2a2>
 801334c:	e7ee      	b.n	801332c <__gethex+0x2c6>
 801334e:	1e67      	subs	r7, r4, #1
 8013350:	f1ba 0f00 	cmp.w	sl, #0
 8013354:	d131      	bne.n	80133ba <__gethex+0x354>
 8013356:	b127      	cbz	r7, 8013362 <__gethex+0x2fc>
 8013358:	4639      	mov	r1, r7
 801335a:	4628      	mov	r0, r5
 801335c:	f000 fd67 	bl	8013e2e <__any_on>
 8013360:	4682      	mov	sl, r0
 8013362:	117a      	asrs	r2, r7, #5
 8013364:	2301      	movs	r3, #1
 8013366:	f007 071f 	and.w	r7, r7, #31
 801336a:	fa03 f707 	lsl.w	r7, r3, r7
 801336e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013372:	4621      	mov	r1, r4
 8013374:	421f      	tst	r7, r3
 8013376:	4628      	mov	r0, r5
 8013378:	bf18      	it	ne
 801337a:	f04a 0a02 	orrne.w	sl, sl, #2
 801337e:	1b36      	subs	r6, r6, r4
 8013380:	f7ff fe22 	bl	8012fc8 <rshift>
 8013384:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013388:	2702      	movs	r7, #2
 801338a:	f1ba 0f00 	cmp.w	sl, #0
 801338e:	d048      	beq.n	8013422 <__gethex+0x3bc>
 8013390:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013394:	2b02      	cmp	r3, #2
 8013396:	d015      	beq.n	80133c4 <__gethex+0x35e>
 8013398:	2b03      	cmp	r3, #3
 801339a:	d017      	beq.n	80133cc <__gethex+0x366>
 801339c:	2b01      	cmp	r3, #1
 801339e:	d109      	bne.n	80133b4 <__gethex+0x34e>
 80133a0:	f01a 0f02 	tst.w	sl, #2
 80133a4:	d006      	beq.n	80133b4 <__gethex+0x34e>
 80133a6:	f8d9 3000 	ldr.w	r3, [r9]
 80133aa:	ea4a 0a03 	orr.w	sl, sl, r3
 80133ae:	f01a 0f01 	tst.w	sl, #1
 80133b2:	d10e      	bne.n	80133d2 <__gethex+0x36c>
 80133b4:	f047 0710 	orr.w	r7, r7, #16
 80133b8:	e033      	b.n	8013422 <__gethex+0x3bc>
 80133ba:	f04f 0a01 	mov.w	sl, #1
 80133be:	e7d0      	b.n	8013362 <__gethex+0x2fc>
 80133c0:	2701      	movs	r7, #1
 80133c2:	e7e2      	b.n	801338a <__gethex+0x324>
 80133c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133c6:	f1c3 0301 	rsb	r3, r3, #1
 80133ca:	9315      	str	r3, [sp, #84]	; 0x54
 80133cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d0f0      	beq.n	80133b4 <__gethex+0x34e>
 80133d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80133d6:	f105 0314 	add.w	r3, r5, #20
 80133da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80133de:	eb03 010a 	add.w	r1, r3, sl
 80133e2:	f04f 0c00 	mov.w	ip, #0
 80133e6:	4618      	mov	r0, r3
 80133e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80133ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80133f0:	d01c      	beq.n	801342c <__gethex+0x3c6>
 80133f2:	3201      	adds	r2, #1
 80133f4:	6002      	str	r2, [r0, #0]
 80133f6:	2f02      	cmp	r7, #2
 80133f8:	f105 0314 	add.w	r3, r5, #20
 80133fc:	d138      	bne.n	8013470 <__gethex+0x40a>
 80133fe:	f8d8 2000 	ldr.w	r2, [r8]
 8013402:	3a01      	subs	r2, #1
 8013404:	42b2      	cmp	r2, r6
 8013406:	d10a      	bne.n	801341e <__gethex+0x3b8>
 8013408:	1171      	asrs	r1, r6, #5
 801340a:	2201      	movs	r2, #1
 801340c:	f006 061f 	and.w	r6, r6, #31
 8013410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013414:	fa02 f606 	lsl.w	r6, r2, r6
 8013418:	421e      	tst	r6, r3
 801341a:	bf18      	it	ne
 801341c:	4617      	movne	r7, r2
 801341e:	f047 0720 	orr.w	r7, r7, #32
 8013422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013424:	601d      	str	r5, [r3, #0]
 8013426:	9b06      	ldr	r3, [sp, #24]
 8013428:	601c      	str	r4, [r3, #0]
 801342a:	e6a4      	b.n	8013176 <__gethex+0x110>
 801342c:	4299      	cmp	r1, r3
 801342e:	f843 cc04 	str.w	ip, [r3, #-4]
 8013432:	d8d8      	bhi.n	80133e6 <__gethex+0x380>
 8013434:	68ab      	ldr	r3, [r5, #8]
 8013436:	4599      	cmp	r9, r3
 8013438:	db12      	blt.n	8013460 <__gethex+0x3fa>
 801343a:	6869      	ldr	r1, [r5, #4]
 801343c:	9802      	ldr	r0, [sp, #8]
 801343e:	3101      	adds	r1, #1
 8013440:	f000 f916 	bl	8013670 <_Balloc>
 8013444:	692a      	ldr	r2, [r5, #16]
 8013446:	3202      	adds	r2, #2
 8013448:	f105 010c 	add.w	r1, r5, #12
 801344c:	4683      	mov	fp, r0
 801344e:	0092      	lsls	r2, r2, #2
 8013450:	300c      	adds	r0, #12
 8013452:	f7fd fafd 	bl	8010a50 <memcpy>
 8013456:	4629      	mov	r1, r5
 8013458:	9802      	ldr	r0, [sp, #8]
 801345a:	f000 f93d 	bl	80136d8 <_Bfree>
 801345e:	465d      	mov	r5, fp
 8013460:	692b      	ldr	r3, [r5, #16]
 8013462:	1c5a      	adds	r2, r3, #1
 8013464:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013468:	612a      	str	r2, [r5, #16]
 801346a:	2201      	movs	r2, #1
 801346c:	615a      	str	r2, [r3, #20]
 801346e:	e7c2      	b.n	80133f6 <__gethex+0x390>
 8013470:	692a      	ldr	r2, [r5, #16]
 8013472:	454a      	cmp	r2, r9
 8013474:	dd0b      	ble.n	801348e <__gethex+0x428>
 8013476:	2101      	movs	r1, #1
 8013478:	4628      	mov	r0, r5
 801347a:	f7ff fda5 	bl	8012fc8 <rshift>
 801347e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013482:	3401      	adds	r4, #1
 8013484:	42a3      	cmp	r3, r4
 8013486:	f6ff aed9 	blt.w	801323c <__gethex+0x1d6>
 801348a:	2701      	movs	r7, #1
 801348c:	e7c7      	b.n	801341e <__gethex+0x3b8>
 801348e:	f016 061f 	ands.w	r6, r6, #31
 8013492:	d0fa      	beq.n	801348a <__gethex+0x424>
 8013494:	449a      	add	sl, r3
 8013496:	f1c6 0620 	rsb	r6, r6, #32
 801349a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801349e:	f000 f9ab 	bl	80137f8 <__hi0bits>
 80134a2:	42b0      	cmp	r0, r6
 80134a4:	dbe7      	blt.n	8013476 <__gethex+0x410>
 80134a6:	e7f0      	b.n	801348a <__gethex+0x424>

080134a8 <L_shift>:
 80134a8:	f1c2 0208 	rsb	r2, r2, #8
 80134ac:	0092      	lsls	r2, r2, #2
 80134ae:	b570      	push	{r4, r5, r6, lr}
 80134b0:	f1c2 0620 	rsb	r6, r2, #32
 80134b4:	6843      	ldr	r3, [r0, #4]
 80134b6:	6804      	ldr	r4, [r0, #0]
 80134b8:	fa03 f506 	lsl.w	r5, r3, r6
 80134bc:	432c      	orrs	r4, r5
 80134be:	40d3      	lsrs	r3, r2
 80134c0:	6004      	str	r4, [r0, #0]
 80134c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80134c6:	4288      	cmp	r0, r1
 80134c8:	d3f4      	bcc.n	80134b4 <L_shift+0xc>
 80134ca:	bd70      	pop	{r4, r5, r6, pc}

080134cc <__match>:
 80134cc:	b530      	push	{r4, r5, lr}
 80134ce:	6803      	ldr	r3, [r0, #0]
 80134d0:	3301      	adds	r3, #1
 80134d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134d6:	b914      	cbnz	r4, 80134de <__match+0x12>
 80134d8:	6003      	str	r3, [r0, #0]
 80134da:	2001      	movs	r0, #1
 80134dc:	bd30      	pop	{r4, r5, pc}
 80134de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80134e6:	2d19      	cmp	r5, #25
 80134e8:	bf98      	it	ls
 80134ea:	3220      	addls	r2, #32
 80134ec:	42a2      	cmp	r2, r4
 80134ee:	d0f0      	beq.n	80134d2 <__match+0x6>
 80134f0:	2000      	movs	r0, #0
 80134f2:	e7f3      	b.n	80134dc <__match+0x10>

080134f4 <__hexnan>:
 80134f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f8:	680b      	ldr	r3, [r1, #0]
 80134fa:	6801      	ldr	r1, [r0, #0]
 80134fc:	115f      	asrs	r7, r3, #5
 80134fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013502:	f013 031f 	ands.w	r3, r3, #31
 8013506:	b087      	sub	sp, #28
 8013508:	bf18      	it	ne
 801350a:	3704      	addne	r7, #4
 801350c:	2500      	movs	r5, #0
 801350e:	1f3e      	subs	r6, r7, #4
 8013510:	4682      	mov	sl, r0
 8013512:	4690      	mov	r8, r2
 8013514:	9301      	str	r3, [sp, #4]
 8013516:	f847 5c04 	str.w	r5, [r7, #-4]
 801351a:	46b1      	mov	r9, r6
 801351c:	4634      	mov	r4, r6
 801351e:	9502      	str	r5, [sp, #8]
 8013520:	46ab      	mov	fp, r5
 8013522:	784a      	ldrb	r2, [r1, #1]
 8013524:	1c4b      	adds	r3, r1, #1
 8013526:	9303      	str	r3, [sp, #12]
 8013528:	b342      	cbz	r2, 801357c <__hexnan+0x88>
 801352a:	4610      	mov	r0, r2
 801352c:	9105      	str	r1, [sp, #20]
 801352e:	9204      	str	r2, [sp, #16]
 8013530:	f7ff fd84 	bl	801303c <__hexdig_fun>
 8013534:	2800      	cmp	r0, #0
 8013536:	d143      	bne.n	80135c0 <__hexnan+0xcc>
 8013538:	9a04      	ldr	r2, [sp, #16]
 801353a:	9905      	ldr	r1, [sp, #20]
 801353c:	2a20      	cmp	r2, #32
 801353e:	d818      	bhi.n	8013572 <__hexnan+0x7e>
 8013540:	9b02      	ldr	r3, [sp, #8]
 8013542:	459b      	cmp	fp, r3
 8013544:	dd13      	ble.n	801356e <__hexnan+0x7a>
 8013546:	454c      	cmp	r4, r9
 8013548:	d206      	bcs.n	8013558 <__hexnan+0x64>
 801354a:	2d07      	cmp	r5, #7
 801354c:	dc04      	bgt.n	8013558 <__hexnan+0x64>
 801354e:	462a      	mov	r2, r5
 8013550:	4649      	mov	r1, r9
 8013552:	4620      	mov	r0, r4
 8013554:	f7ff ffa8 	bl	80134a8 <L_shift>
 8013558:	4544      	cmp	r4, r8
 801355a:	d944      	bls.n	80135e6 <__hexnan+0xf2>
 801355c:	2300      	movs	r3, #0
 801355e:	f1a4 0904 	sub.w	r9, r4, #4
 8013562:	f844 3c04 	str.w	r3, [r4, #-4]
 8013566:	f8cd b008 	str.w	fp, [sp, #8]
 801356a:	464c      	mov	r4, r9
 801356c:	461d      	mov	r5, r3
 801356e:	9903      	ldr	r1, [sp, #12]
 8013570:	e7d7      	b.n	8013522 <__hexnan+0x2e>
 8013572:	2a29      	cmp	r2, #41	; 0x29
 8013574:	d14a      	bne.n	801360c <__hexnan+0x118>
 8013576:	3102      	adds	r1, #2
 8013578:	f8ca 1000 	str.w	r1, [sl]
 801357c:	f1bb 0f00 	cmp.w	fp, #0
 8013580:	d044      	beq.n	801360c <__hexnan+0x118>
 8013582:	454c      	cmp	r4, r9
 8013584:	d206      	bcs.n	8013594 <__hexnan+0xa0>
 8013586:	2d07      	cmp	r5, #7
 8013588:	dc04      	bgt.n	8013594 <__hexnan+0xa0>
 801358a:	462a      	mov	r2, r5
 801358c:	4649      	mov	r1, r9
 801358e:	4620      	mov	r0, r4
 8013590:	f7ff ff8a 	bl	80134a8 <L_shift>
 8013594:	4544      	cmp	r4, r8
 8013596:	d928      	bls.n	80135ea <__hexnan+0xf6>
 8013598:	4643      	mov	r3, r8
 801359a:	f854 2b04 	ldr.w	r2, [r4], #4
 801359e:	f843 2b04 	str.w	r2, [r3], #4
 80135a2:	42a6      	cmp	r6, r4
 80135a4:	d2f9      	bcs.n	801359a <__hexnan+0xa6>
 80135a6:	2200      	movs	r2, #0
 80135a8:	f843 2b04 	str.w	r2, [r3], #4
 80135ac:	429e      	cmp	r6, r3
 80135ae:	d2fb      	bcs.n	80135a8 <__hexnan+0xb4>
 80135b0:	6833      	ldr	r3, [r6, #0]
 80135b2:	b91b      	cbnz	r3, 80135bc <__hexnan+0xc8>
 80135b4:	4546      	cmp	r6, r8
 80135b6:	d127      	bne.n	8013608 <__hexnan+0x114>
 80135b8:	2301      	movs	r3, #1
 80135ba:	6033      	str	r3, [r6, #0]
 80135bc:	2005      	movs	r0, #5
 80135be:	e026      	b.n	801360e <__hexnan+0x11a>
 80135c0:	3501      	adds	r5, #1
 80135c2:	2d08      	cmp	r5, #8
 80135c4:	f10b 0b01 	add.w	fp, fp, #1
 80135c8:	dd06      	ble.n	80135d8 <__hexnan+0xe4>
 80135ca:	4544      	cmp	r4, r8
 80135cc:	d9cf      	bls.n	801356e <__hexnan+0x7a>
 80135ce:	2300      	movs	r3, #0
 80135d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80135d4:	2501      	movs	r5, #1
 80135d6:	3c04      	subs	r4, #4
 80135d8:	6822      	ldr	r2, [r4, #0]
 80135da:	f000 000f 	and.w	r0, r0, #15
 80135de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80135e2:	6020      	str	r0, [r4, #0]
 80135e4:	e7c3      	b.n	801356e <__hexnan+0x7a>
 80135e6:	2508      	movs	r5, #8
 80135e8:	e7c1      	b.n	801356e <__hexnan+0x7a>
 80135ea:	9b01      	ldr	r3, [sp, #4]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d0df      	beq.n	80135b0 <__hexnan+0xbc>
 80135f0:	f04f 32ff 	mov.w	r2, #4294967295
 80135f4:	f1c3 0320 	rsb	r3, r3, #32
 80135f8:	fa22 f303 	lsr.w	r3, r2, r3
 80135fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013600:	401a      	ands	r2, r3
 8013602:	f847 2c04 	str.w	r2, [r7, #-4]
 8013606:	e7d3      	b.n	80135b0 <__hexnan+0xbc>
 8013608:	3e04      	subs	r6, #4
 801360a:	e7d1      	b.n	80135b0 <__hexnan+0xbc>
 801360c:	2004      	movs	r0, #4
 801360e:	b007      	add	sp, #28
 8013610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013614 <__locale_ctype_ptr_l>:
 8013614:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013618:	4770      	bx	lr

0801361a <__localeconv_l>:
 801361a:	30f0      	adds	r0, #240	; 0xf0
 801361c:	4770      	bx	lr
	...

08013620 <_localeconv_r>:
 8013620:	4b04      	ldr	r3, [pc, #16]	; (8013634 <_localeconv_r+0x14>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	6a18      	ldr	r0, [r3, #32]
 8013626:	4b04      	ldr	r3, [pc, #16]	; (8013638 <_localeconv_r+0x18>)
 8013628:	2800      	cmp	r0, #0
 801362a:	bf08      	it	eq
 801362c:	4618      	moveq	r0, r3
 801362e:	30f0      	adds	r0, #240	; 0xf0
 8013630:	4770      	bx	lr
 8013632:	bf00      	nop
 8013634:	2000006c 	.word	0x2000006c
 8013638:	200000d0 	.word	0x200000d0

0801363c <malloc>:
 801363c:	4b02      	ldr	r3, [pc, #8]	; (8013648 <malloc+0xc>)
 801363e:	4601      	mov	r1, r0
 8013640:	6818      	ldr	r0, [r3, #0]
 8013642:	f000 bc71 	b.w	8013f28 <_malloc_r>
 8013646:	bf00      	nop
 8013648:	2000006c 	.word	0x2000006c

0801364c <__ascii_mbtowc>:
 801364c:	b082      	sub	sp, #8
 801364e:	b901      	cbnz	r1, 8013652 <__ascii_mbtowc+0x6>
 8013650:	a901      	add	r1, sp, #4
 8013652:	b142      	cbz	r2, 8013666 <__ascii_mbtowc+0x1a>
 8013654:	b14b      	cbz	r3, 801366a <__ascii_mbtowc+0x1e>
 8013656:	7813      	ldrb	r3, [r2, #0]
 8013658:	600b      	str	r3, [r1, #0]
 801365a:	7812      	ldrb	r2, [r2, #0]
 801365c:	1c10      	adds	r0, r2, #0
 801365e:	bf18      	it	ne
 8013660:	2001      	movne	r0, #1
 8013662:	b002      	add	sp, #8
 8013664:	4770      	bx	lr
 8013666:	4610      	mov	r0, r2
 8013668:	e7fb      	b.n	8013662 <__ascii_mbtowc+0x16>
 801366a:	f06f 0001 	mvn.w	r0, #1
 801366e:	e7f8      	b.n	8013662 <__ascii_mbtowc+0x16>

08013670 <_Balloc>:
 8013670:	b570      	push	{r4, r5, r6, lr}
 8013672:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013674:	4604      	mov	r4, r0
 8013676:	460e      	mov	r6, r1
 8013678:	b93d      	cbnz	r5, 801368a <_Balloc+0x1a>
 801367a:	2010      	movs	r0, #16
 801367c:	f7ff ffde 	bl	801363c <malloc>
 8013680:	6260      	str	r0, [r4, #36]	; 0x24
 8013682:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013686:	6005      	str	r5, [r0, #0]
 8013688:	60c5      	str	r5, [r0, #12]
 801368a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801368c:	68eb      	ldr	r3, [r5, #12]
 801368e:	b183      	cbz	r3, 80136b2 <_Balloc+0x42>
 8013690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013698:	b9b8      	cbnz	r0, 80136ca <_Balloc+0x5a>
 801369a:	2101      	movs	r1, #1
 801369c:	fa01 f506 	lsl.w	r5, r1, r6
 80136a0:	1d6a      	adds	r2, r5, #5
 80136a2:	0092      	lsls	r2, r2, #2
 80136a4:	4620      	mov	r0, r4
 80136a6:	f000 fbe3 	bl	8013e70 <_calloc_r>
 80136aa:	b160      	cbz	r0, 80136c6 <_Balloc+0x56>
 80136ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80136b0:	e00e      	b.n	80136d0 <_Balloc+0x60>
 80136b2:	2221      	movs	r2, #33	; 0x21
 80136b4:	2104      	movs	r1, #4
 80136b6:	4620      	mov	r0, r4
 80136b8:	f000 fbda 	bl	8013e70 <_calloc_r>
 80136bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80136be:	60e8      	str	r0, [r5, #12]
 80136c0:	68db      	ldr	r3, [r3, #12]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d1e4      	bne.n	8013690 <_Balloc+0x20>
 80136c6:	2000      	movs	r0, #0
 80136c8:	bd70      	pop	{r4, r5, r6, pc}
 80136ca:	6802      	ldr	r2, [r0, #0]
 80136cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80136d0:	2300      	movs	r3, #0
 80136d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80136d6:	e7f7      	b.n	80136c8 <_Balloc+0x58>

080136d8 <_Bfree>:
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80136dc:	4606      	mov	r6, r0
 80136de:	460d      	mov	r5, r1
 80136e0:	b93c      	cbnz	r4, 80136f2 <_Bfree+0x1a>
 80136e2:	2010      	movs	r0, #16
 80136e4:	f7ff ffaa 	bl	801363c <malloc>
 80136e8:	6270      	str	r0, [r6, #36]	; 0x24
 80136ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136ee:	6004      	str	r4, [r0, #0]
 80136f0:	60c4      	str	r4, [r0, #12]
 80136f2:	b13d      	cbz	r5, 8013704 <_Bfree+0x2c>
 80136f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80136f6:	686a      	ldr	r2, [r5, #4]
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80136fe:	6029      	str	r1, [r5, #0]
 8013700:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013704:	bd70      	pop	{r4, r5, r6, pc}

08013706 <__multadd>:
 8013706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801370a:	690d      	ldr	r5, [r1, #16]
 801370c:	461f      	mov	r7, r3
 801370e:	4606      	mov	r6, r0
 8013710:	460c      	mov	r4, r1
 8013712:	f101 0c14 	add.w	ip, r1, #20
 8013716:	2300      	movs	r3, #0
 8013718:	f8dc 0000 	ldr.w	r0, [ip]
 801371c:	b281      	uxth	r1, r0
 801371e:	fb02 7101 	mla	r1, r2, r1, r7
 8013722:	0c0f      	lsrs	r7, r1, #16
 8013724:	0c00      	lsrs	r0, r0, #16
 8013726:	fb02 7000 	mla	r0, r2, r0, r7
 801372a:	b289      	uxth	r1, r1
 801372c:	3301      	adds	r3, #1
 801372e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013732:	429d      	cmp	r5, r3
 8013734:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013738:	f84c 1b04 	str.w	r1, [ip], #4
 801373c:	dcec      	bgt.n	8013718 <__multadd+0x12>
 801373e:	b1d7      	cbz	r7, 8013776 <__multadd+0x70>
 8013740:	68a3      	ldr	r3, [r4, #8]
 8013742:	42ab      	cmp	r3, r5
 8013744:	dc12      	bgt.n	801376c <__multadd+0x66>
 8013746:	6861      	ldr	r1, [r4, #4]
 8013748:	4630      	mov	r0, r6
 801374a:	3101      	adds	r1, #1
 801374c:	f7ff ff90 	bl	8013670 <_Balloc>
 8013750:	6922      	ldr	r2, [r4, #16]
 8013752:	3202      	adds	r2, #2
 8013754:	f104 010c 	add.w	r1, r4, #12
 8013758:	4680      	mov	r8, r0
 801375a:	0092      	lsls	r2, r2, #2
 801375c:	300c      	adds	r0, #12
 801375e:	f7fd f977 	bl	8010a50 <memcpy>
 8013762:	4621      	mov	r1, r4
 8013764:	4630      	mov	r0, r6
 8013766:	f7ff ffb7 	bl	80136d8 <_Bfree>
 801376a:	4644      	mov	r4, r8
 801376c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013770:	3501      	adds	r5, #1
 8013772:	615f      	str	r7, [r3, #20]
 8013774:	6125      	str	r5, [r4, #16]
 8013776:	4620      	mov	r0, r4
 8013778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801377c <__s2b>:
 801377c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013780:	460c      	mov	r4, r1
 8013782:	4615      	mov	r5, r2
 8013784:	461f      	mov	r7, r3
 8013786:	2209      	movs	r2, #9
 8013788:	3308      	adds	r3, #8
 801378a:	4606      	mov	r6, r0
 801378c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013790:	2100      	movs	r1, #0
 8013792:	2201      	movs	r2, #1
 8013794:	429a      	cmp	r2, r3
 8013796:	db20      	blt.n	80137da <__s2b+0x5e>
 8013798:	4630      	mov	r0, r6
 801379a:	f7ff ff69 	bl	8013670 <_Balloc>
 801379e:	9b08      	ldr	r3, [sp, #32]
 80137a0:	6143      	str	r3, [r0, #20]
 80137a2:	2d09      	cmp	r5, #9
 80137a4:	f04f 0301 	mov.w	r3, #1
 80137a8:	6103      	str	r3, [r0, #16]
 80137aa:	dd19      	ble.n	80137e0 <__s2b+0x64>
 80137ac:	f104 0809 	add.w	r8, r4, #9
 80137b0:	46c1      	mov	r9, r8
 80137b2:	442c      	add	r4, r5
 80137b4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80137b8:	4601      	mov	r1, r0
 80137ba:	3b30      	subs	r3, #48	; 0x30
 80137bc:	220a      	movs	r2, #10
 80137be:	4630      	mov	r0, r6
 80137c0:	f7ff ffa1 	bl	8013706 <__multadd>
 80137c4:	45a1      	cmp	r9, r4
 80137c6:	d1f5      	bne.n	80137b4 <__s2b+0x38>
 80137c8:	eb08 0405 	add.w	r4, r8, r5
 80137cc:	3c08      	subs	r4, #8
 80137ce:	1b2d      	subs	r5, r5, r4
 80137d0:	1963      	adds	r3, r4, r5
 80137d2:	42bb      	cmp	r3, r7
 80137d4:	db07      	blt.n	80137e6 <__s2b+0x6a>
 80137d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137da:	0052      	lsls	r2, r2, #1
 80137dc:	3101      	adds	r1, #1
 80137de:	e7d9      	b.n	8013794 <__s2b+0x18>
 80137e0:	340a      	adds	r4, #10
 80137e2:	2509      	movs	r5, #9
 80137e4:	e7f3      	b.n	80137ce <__s2b+0x52>
 80137e6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80137ea:	4601      	mov	r1, r0
 80137ec:	3b30      	subs	r3, #48	; 0x30
 80137ee:	220a      	movs	r2, #10
 80137f0:	4630      	mov	r0, r6
 80137f2:	f7ff ff88 	bl	8013706 <__multadd>
 80137f6:	e7eb      	b.n	80137d0 <__s2b+0x54>

080137f8 <__hi0bits>:
 80137f8:	0c02      	lsrs	r2, r0, #16
 80137fa:	0412      	lsls	r2, r2, #16
 80137fc:	4603      	mov	r3, r0
 80137fe:	b9b2      	cbnz	r2, 801382e <__hi0bits+0x36>
 8013800:	0403      	lsls	r3, r0, #16
 8013802:	2010      	movs	r0, #16
 8013804:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013808:	bf04      	itt	eq
 801380a:	021b      	lsleq	r3, r3, #8
 801380c:	3008      	addeq	r0, #8
 801380e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013812:	bf04      	itt	eq
 8013814:	011b      	lsleq	r3, r3, #4
 8013816:	3004      	addeq	r0, #4
 8013818:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801381c:	bf04      	itt	eq
 801381e:	009b      	lsleq	r3, r3, #2
 8013820:	3002      	addeq	r0, #2
 8013822:	2b00      	cmp	r3, #0
 8013824:	db06      	blt.n	8013834 <__hi0bits+0x3c>
 8013826:	005b      	lsls	r3, r3, #1
 8013828:	d503      	bpl.n	8013832 <__hi0bits+0x3a>
 801382a:	3001      	adds	r0, #1
 801382c:	4770      	bx	lr
 801382e:	2000      	movs	r0, #0
 8013830:	e7e8      	b.n	8013804 <__hi0bits+0xc>
 8013832:	2020      	movs	r0, #32
 8013834:	4770      	bx	lr

08013836 <__lo0bits>:
 8013836:	6803      	ldr	r3, [r0, #0]
 8013838:	f013 0207 	ands.w	r2, r3, #7
 801383c:	4601      	mov	r1, r0
 801383e:	d00b      	beq.n	8013858 <__lo0bits+0x22>
 8013840:	07da      	lsls	r2, r3, #31
 8013842:	d423      	bmi.n	801388c <__lo0bits+0x56>
 8013844:	0798      	lsls	r0, r3, #30
 8013846:	bf49      	itett	mi
 8013848:	085b      	lsrmi	r3, r3, #1
 801384a:	089b      	lsrpl	r3, r3, #2
 801384c:	2001      	movmi	r0, #1
 801384e:	600b      	strmi	r3, [r1, #0]
 8013850:	bf5c      	itt	pl
 8013852:	600b      	strpl	r3, [r1, #0]
 8013854:	2002      	movpl	r0, #2
 8013856:	4770      	bx	lr
 8013858:	b298      	uxth	r0, r3
 801385a:	b9a8      	cbnz	r0, 8013888 <__lo0bits+0x52>
 801385c:	0c1b      	lsrs	r3, r3, #16
 801385e:	2010      	movs	r0, #16
 8013860:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013864:	bf04      	itt	eq
 8013866:	0a1b      	lsreq	r3, r3, #8
 8013868:	3008      	addeq	r0, #8
 801386a:	071a      	lsls	r2, r3, #28
 801386c:	bf04      	itt	eq
 801386e:	091b      	lsreq	r3, r3, #4
 8013870:	3004      	addeq	r0, #4
 8013872:	079a      	lsls	r2, r3, #30
 8013874:	bf04      	itt	eq
 8013876:	089b      	lsreq	r3, r3, #2
 8013878:	3002      	addeq	r0, #2
 801387a:	07da      	lsls	r2, r3, #31
 801387c:	d402      	bmi.n	8013884 <__lo0bits+0x4e>
 801387e:	085b      	lsrs	r3, r3, #1
 8013880:	d006      	beq.n	8013890 <__lo0bits+0x5a>
 8013882:	3001      	adds	r0, #1
 8013884:	600b      	str	r3, [r1, #0]
 8013886:	4770      	bx	lr
 8013888:	4610      	mov	r0, r2
 801388a:	e7e9      	b.n	8013860 <__lo0bits+0x2a>
 801388c:	2000      	movs	r0, #0
 801388e:	4770      	bx	lr
 8013890:	2020      	movs	r0, #32
 8013892:	4770      	bx	lr

08013894 <__i2b>:
 8013894:	b510      	push	{r4, lr}
 8013896:	460c      	mov	r4, r1
 8013898:	2101      	movs	r1, #1
 801389a:	f7ff fee9 	bl	8013670 <_Balloc>
 801389e:	2201      	movs	r2, #1
 80138a0:	6144      	str	r4, [r0, #20]
 80138a2:	6102      	str	r2, [r0, #16]
 80138a4:	bd10      	pop	{r4, pc}

080138a6 <__multiply>:
 80138a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138aa:	4614      	mov	r4, r2
 80138ac:	690a      	ldr	r2, [r1, #16]
 80138ae:	6923      	ldr	r3, [r4, #16]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	bfb8      	it	lt
 80138b4:	460b      	movlt	r3, r1
 80138b6:	4688      	mov	r8, r1
 80138b8:	bfbc      	itt	lt
 80138ba:	46a0      	movlt	r8, r4
 80138bc:	461c      	movlt	r4, r3
 80138be:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80138c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80138c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80138ce:	eb07 0609 	add.w	r6, r7, r9
 80138d2:	42b3      	cmp	r3, r6
 80138d4:	bfb8      	it	lt
 80138d6:	3101      	addlt	r1, #1
 80138d8:	f7ff feca 	bl	8013670 <_Balloc>
 80138dc:	f100 0514 	add.w	r5, r0, #20
 80138e0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80138e4:	462b      	mov	r3, r5
 80138e6:	2200      	movs	r2, #0
 80138e8:	4573      	cmp	r3, lr
 80138ea:	d316      	bcc.n	801391a <__multiply+0x74>
 80138ec:	f104 0214 	add.w	r2, r4, #20
 80138f0:	f108 0114 	add.w	r1, r8, #20
 80138f4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80138f8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80138fc:	9300      	str	r3, [sp, #0]
 80138fe:	9b00      	ldr	r3, [sp, #0]
 8013900:	9201      	str	r2, [sp, #4]
 8013902:	4293      	cmp	r3, r2
 8013904:	d80c      	bhi.n	8013920 <__multiply+0x7a>
 8013906:	2e00      	cmp	r6, #0
 8013908:	dd03      	ble.n	8013912 <__multiply+0x6c>
 801390a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801390e:	2b00      	cmp	r3, #0
 8013910:	d05d      	beq.n	80139ce <__multiply+0x128>
 8013912:	6106      	str	r6, [r0, #16]
 8013914:	b003      	add	sp, #12
 8013916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801391a:	f843 2b04 	str.w	r2, [r3], #4
 801391e:	e7e3      	b.n	80138e8 <__multiply+0x42>
 8013920:	f8b2 b000 	ldrh.w	fp, [r2]
 8013924:	f1bb 0f00 	cmp.w	fp, #0
 8013928:	d023      	beq.n	8013972 <__multiply+0xcc>
 801392a:	4689      	mov	r9, r1
 801392c:	46ac      	mov	ip, r5
 801392e:	f04f 0800 	mov.w	r8, #0
 8013932:	f859 4b04 	ldr.w	r4, [r9], #4
 8013936:	f8dc a000 	ldr.w	sl, [ip]
 801393a:	b2a3      	uxth	r3, r4
 801393c:	fa1f fa8a 	uxth.w	sl, sl
 8013940:	fb0b a303 	mla	r3, fp, r3, sl
 8013944:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013948:	f8dc 4000 	ldr.w	r4, [ip]
 801394c:	4443      	add	r3, r8
 801394e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013952:	fb0b 840a 	mla	r4, fp, sl, r8
 8013956:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801395a:	46e2      	mov	sl, ip
 801395c:	b29b      	uxth	r3, r3
 801395e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013962:	454f      	cmp	r7, r9
 8013964:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013968:	f84a 3b04 	str.w	r3, [sl], #4
 801396c:	d82b      	bhi.n	80139c6 <__multiply+0x120>
 801396e:	f8cc 8004 	str.w	r8, [ip, #4]
 8013972:	9b01      	ldr	r3, [sp, #4]
 8013974:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013978:	3204      	adds	r2, #4
 801397a:	f1ba 0f00 	cmp.w	sl, #0
 801397e:	d020      	beq.n	80139c2 <__multiply+0x11c>
 8013980:	682b      	ldr	r3, [r5, #0]
 8013982:	4689      	mov	r9, r1
 8013984:	46a8      	mov	r8, r5
 8013986:	f04f 0b00 	mov.w	fp, #0
 801398a:	f8b9 c000 	ldrh.w	ip, [r9]
 801398e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013992:	fb0a 440c 	mla	r4, sl, ip, r4
 8013996:	445c      	add	r4, fp
 8013998:	46c4      	mov	ip, r8
 801399a:	b29b      	uxth	r3, r3
 801399c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80139a0:	f84c 3b04 	str.w	r3, [ip], #4
 80139a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80139a8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80139ac:	0c1b      	lsrs	r3, r3, #16
 80139ae:	fb0a b303 	mla	r3, sl, r3, fp
 80139b2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80139b6:	454f      	cmp	r7, r9
 80139b8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80139bc:	d805      	bhi.n	80139ca <__multiply+0x124>
 80139be:	f8c8 3004 	str.w	r3, [r8, #4]
 80139c2:	3504      	adds	r5, #4
 80139c4:	e79b      	b.n	80138fe <__multiply+0x58>
 80139c6:	46d4      	mov	ip, sl
 80139c8:	e7b3      	b.n	8013932 <__multiply+0x8c>
 80139ca:	46e0      	mov	r8, ip
 80139cc:	e7dd      	b.n	801398a <__multiply+0xe4>
 80139ce:	3e01      	subs	r6, #1
 80139d0:	e799      	b.n	8013906 <__multiply+0x60>
	...

080139d4 <__pow5mult>:
 80139d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139d8:	4615      	mov	r5, r2
 80139da:	f012 0203 	ands.w	r2, r2, #3
 80139de:	4606      	mov	r6, r0
 80139e0:	460f      	mov	r7, r1
 80139e2:	d007      	beq.n	80139f4 <__pow5mult+0x20>
 80139e4:	3a01      	subs	r2, #1
 80139e6:	4c21      	ldr	r4, [pc, #132]	; (8013a6c <__pow5mult+0x98>)
 80139e8:	2300      	movs	r3, #0
 80139ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80139ee:	f7ff fe8a 	bl	8013706 <__multadd>
 80139f2:	4607      	mov	r7, r0
 80139f4:	10ad      	asrs	r5, r5, #2
 80139f6:	d035      	beq.n	8013a64 <__pow5mult+0x90>
 80139f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80139fa:	b93c      	cbnz	r4, 8013a0c <__pow5mult+0x38>
 80139fc:	2010      	movs	r0, #16
 80139fe:	f7ff fe1d 	bl	801363c <malloc>
 8013a02:	6270      	str	r0, [r6, #36]	; 0x24
 8013a04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a08:	6004      	str	r4, [r0, #0]
 8013a0a:	60c4      	str	r4, [r0, #12]
 8013a0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013a10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a14:	b94c      	cbnz	r4, 8013a2a <__pow5mult+0x56>
 8013a16:	f240 2171 	movw	r1, #625	; 0x271
 8013a1a:	4630      	mov	r0, r6
 8013a1c:	f7ff ff3a 	bl	8013894 <__i2b>
 8013a20:	2300      	movs	r3, #0
 8013a22:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a26:	4604      	mov	r4, r0
 8013a28:	6003      	str	r3, [r0, #0]
 8013a2a:	f04f 0800 	mov.w	r8, #0
 8013a2e:	07eb      	lsls	r3, r5, #31
 8013a30:	d50a      	bpl.n	8013a48 <__pow5mult+0x74>
 8013a32:	4639      	mov	r1, r7
 8013a34:	4622      	mov	r2, r4
 8013a36:	4630      	mov	r0, r6
 8013a38:	f7ff ff35 	bl	80138a6 <__multiply>
 8013a3c:	4639      	mov	r1, r7
 8013a3e:	4681      	mov	r9, r0
 8013a40:	4630      	mov	r0, r6
 8013a42:	f7ff fe49 	bl	80136d8 <_Bfree>
 8013a46:	464f      	mov	r7, r9
 8013a48:	106d      	asrs	r5, r5, #1
 8013a4a:	d00b      	beq.n	8013a64 <__pow5mult+0x90>
 8013a4c:	6820      	ldr	r0, [r4, #0]
 8013a4e:	b938      	cbnz	r0, 8013a60 <__pow5mult+0x8c>
 8013a50:	4622      	mov	r2, r4
 8013a52:	4621      	mov	r1, r4
 8013a54:	4630      	mov	r0, r6
 8013a56:	f7ff ff26 	bl	80138a6 <__multiply>
 8013a5a:	6020      	str	r0, [r4, #0]
 8013a5c:	f8c0 8000 	str.w	r8, [r0]
 8013a60:	4604      	mov	r4, r0
 8013a62:	e7e4      	b.n	8013a2e <__pow5mult+0x5a>
 8013a64:	4638      	mov	r0, r7
 8013a66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a6a:	bf00      	nop
 8013a6c:	08014c28 	.word	0x08014c28

08013a70 <__lshift>:
 8013a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a74:	460c      	mov	r4, r1
 8013a76:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013a7a:	6923      	ldr	r3, [r4, #16]
 8013a7c:	6849      	ldr	r1, [r1, #4]
 8013a7e:	eb0a 0903 	add.w	r9, sl, r3
 8013a82:	68a3      	ldr	r3, [r4, #8]
 8013a84:	4607      	mov	r7, r0
 8013a86:	4616      	mov	r6, r2
 8013a88:	f109 0501 	add.w	r5, r9, #1
 8013a8c:	42ab      	cmp	r3, r5
 8013a8e:	db32      	blt.n	8013af6 <__lshift+0x86>
 8013a90:	4638      	mov	r0, r7
 8013a92:	f7ff fded 	bl	8013670 <_Balloc>
 8013a96:	2300      	movs	r3, #0
 8013a98:	4680      	mov	r8, r0
 8013a9a:	f100 0114 	add.w	r1, r0, #20
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	4553      	cmp	r3, sl
 8013aa2:	db2b      	blt.n	8013afc <__lshift+0x8c>
 8013aa4:	6920      	ldr	r0, [r4, #16]
 8013aa6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013aaa:	f104 0314 	add.w	r3, r4, #20
 8013aae:	f016 021f 	ands.w	r2, r6, #31
 8013ab2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ab6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013aba:	d025      	beq.n	8013b08 <__lshift+0x98>
 8013abc:	f1c2 0e20 	rsb	lr, r2, #32
 8013ac0:	2000      	movs	r0, #0
 8013ac2:	681e      	ldr	r6, [r3, #0]
 8013ac4:	468a      	mov	sl, r1
 8013ac6:	4096      	lsls	r6, r2
 8013ac8:	4330      	orrs	r0, r6
 8013aca:	f84a 0b04 	str.w	r0, [sl], #4
 8013ace:	f853 0b04 	ldr.w	r0, [r3], #4
 8013ad2:	459c      	cmp	ip, r3
 8013ad4:	fa20 f00e 	lsr.w	r0, r0, lr
 8013ad8:	d814      	bhi.n	8013b04 <__lshift+0x94>
 8013ada:	6048      	str	r0, [r1, #4]
 8013adc:	b108      	cbz	r0, 8013ae2 <__lshift+0x72>
 8013ade:	f109 0502 	add.w	r5, r9, #2
 8013ae2:	3d01      	subs	r5, #1
 8013ae4:	4638      	mov	r0, r7
 8013ae6:	f8c8 5010 	str.w	r5, [r8, #16]
 8013aea:	4621      	mov	r1, r4
 8013aec:	f7ff fdf4 	bl	80136d8 <_Bfree>
 8013af0:	4640      	mov	r0, r8
 8013af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013af6:	3101      	adds	r1, #1
 8013af8:	005b      	lsls	r3, r3, #1
 8013afa:	e7c7      	b.n	8013a8c <__lshift+0x1c>
 8013afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013b00:	3301      	adds	r3, #1
 8013b02:	e7cd      	b.n	8013aa0 <__lshift+0x30>
 8013b04:	4651      	mov	r1, sl
 8013b06:	e7dc      	b.n	8013ac2 <__lshift+0x52>
 8013b08:	3904      	subs	r1, #4
 8013b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b12:	459c      	cmp	ip, r3
 8013b14:	d8f9      	bhi.n	8013b0a <__lshift+0x9a>
 8013b16:	e7e4      	b.n	8013ae2 <__lshift+0x72>

08013b18 <__mcmp>:
 8013b18:	6903      	ldr	r3, [r0, #16]
 8013b1a:	690a      	ldr	r2, [r1, #16]
 8013b1c:	1a9b      	subs	r3, r3, r2
 8013b1e:	b530      	push	{r4, r5, lr}
 8013b20:	d10c      	bne.n	8013b3c <__mcmp+0x24>
 8013b22:	0092      	lsls	r2, r2, #2
 8013b24:	3014      	adds	r0, #20
 8013b26:	3114      	adds	r1, #20
 8013b28:	1884      	adds	r4, r0, r2
 8013b2a:	4411      	add	r1, r2
 8013b2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013b30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013b34:	4295      	cmp	r5, r2
 8013b36:	d003      	beq.n	8013b40 <__mcmp+0x28>
 8013b38:	d305      	bcc.n	8013b46 <__mcmp+0x2e>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	bd30      	pop	{r4, r5, pc}
 8013b40:	42a0      	cmp	r0, r4
 8013b42:	d3f3      	bcc.n	8013b2c <__mcmp+0x14>
 8013b44:	e7fa      	b.n	8013b3c <__mcmp+0x24>
 8013b46:	f04f 33ff 	mov.w	r3, #4294967295
 8013b4a:	e7f7      	b.n	8013b3c <__mcmp+0x24>

08013b4c <__mdiff>:
 8013b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b50:	460d      	mov	r5, r1
 8013b52:	4607      	mov	r7, r0
 8013b54:	4611      	mov	r1, r2
 8013b56:	4628      	mov	r0, r5
 8013b58:	4614      	mov	r4, r2
 8013b5a:	f7ff ffdd 	bl	8013b18 <__mcmp>
 8013b5e:	1e06      	subs	r6, r0, #0
 8013b60:	d108      	bne.n	8013b74 <__mdiff+0x28>
 8013b62:	4631      	mov	r1, r6
 8013b64:	4638      	mov	r0, r7
 8013b66:	f7ff fd83 	bl	8013670 <_Balloc>
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b74:	bfa4      	itt	ge
 8013b76:	4623      	movge	r3, r4
 8013b78:	462c      	movge	r4, r5
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	6861      	ldr	r1, [r4, #4]
 8013b7e:	bfa6      	itte	ge
 8013b80:	461d      	movge	r5, r3
 8013b82:	2600      	movge	r6, #0
 8013b84:	2601      	movlt	r6, #1
 8013b86:	f7ff fd73 	bl	8013670 <_Balloc>
 8013b8a:	692b      	ldr	r3, [r5, #16]
 8013b8c:	60c6      	str	r6, [r0, #12]
 8013b8e:	6926      	ldr	r6, [r4, #16]
 8013b90:	f105 0914 	add.w	r9, r5, #20
 8013b94:	f104 0214 	add.w	r2, r4, #20
 8013b98:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013b9c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013ba0:	f100 0514 	add.w	r5, r0, #20
 8013ba4:	f04f 0e00 	mov.w	lr, #0
 8013ba8:	f852 ab04 	ldr.w	sl, [r2], #4
 8013bac:	f859 4b04 	ldr.w	r4, [r9], #4
 8013bb0:	fa1e f18a 	uxtah	r1, lr, sl
 8013bb4:	b2a3      	uxth	r3, r4
 8013bb6:	1ac9      	subs	r1, r1, r3
 8013bb8:	0c23      	lsrs	r3, r4, #16
 8013bba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013bbe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013bc2:	b289      	uxth	r1, r1
 8013bc4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013bc8:	45c8      	cmp	r8, r9
 8013bca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013bce:	4694      	mov	ip, r2
 8013bd0:	f845 3b04 	str.w	r3, [r5], #4
 8013bd4:	d8e8      	bhi.n	8013ba8 <__mdiff+0x5c>
 8013bd6:	45bc      	cmp	ip, r7
 8013bd8:	d304      	bcc.n	8013be4 <__mdiff+0x98>
 8013bda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013bde:	b183      	cbz	r3, 8013c02 <__mdiff+0xb6>
 8013be0:	6106      	str	r6, [r0, #16]
 8013be2:	e7c5      	b.n	8013b70 <__mdiff+0x24>
 8013be4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013be8:	fa1e f381 	uxtah	r3, lr, r1
 8013bec:	141a      	asrs	r2, r3, #16
 8013bee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013bf8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013bfc:	f845 3b04 	str.w	r3, [r5], #4
 8013c00:	e7e9      	b.n	8013bd6 <__mdiff+0x8a>
 8013c02:	3e01      	subs	r6, #1
 8013c04:	e7e9      	b.n	8013bda <__mdiff+0x8e>
	...

08013c08 <__ulp>:
 8013c08:	4b12      	ldr	r3, [pc, #72]	; (8013c54 <__ulp+0x4c>)
 8013c0a:	ee10 2a90 	vmov	r2, s1
 8013c0e:	401a      	ands	r2, r3
 8013c10:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	dd04      	ble.n	8013c22 <__ulp+0x1a>
 8013c18:	2000      	movs	r0, #0
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	ec41 0b10 	vmov	d0, r0, r1
 8013c20:	4770      	bx	lr
 8013c22:	425b      	negs	r3, r3
 8013c24:	151b      	asrs	r3, r3, #20
 8013c26:	2b13      	cmp	r3, #19
 8013c28:	f04f 0000 	mov.w	r0, #0
 8013c2c:	f04f 0100 	mov.w	r1, #0
 8013c30:	dc04      	bgt.n	8013c3c <__ulp+0x34>
 8013c32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013c36:	fa42 f103 	asr.w	r1, r2, r3
 8013c3a:	e7ef      	b.n	8013c1c <__ulp+0x14>
 8013c3c:	3b14      	subs	r3, #20
 8013c3e:	2b1e      	cmp	r3, #30
 8013c40:	f04f 0201 	mov.w	r2, #1
 8013c44:	bfda      	itte	le
 8013c46:	f1c3 031f 	rsble	r3, r3, #31
 8013c4a:	fa02 f303 	lslle.w	r3, r2, r3
 8013c4e:	4613      	movgt	r3, r2
 8013c50:	4618      	mov	r0, r3
 8013c52:	e7e3      	b.n	8013c1c <__ulp+0x14>
 8013c54:	7ff00000 	.word	0x7ff00000

08013c58 <__b2d>:
 8013c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c5a:	6905      	ldr	r5, [r0, #16]
 8013c5c:	f100 0714 	add.w	r7, r0, #20
 8013c60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013c64:	1f2e      	subs	r6, r5, #4
 8013c66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	f7ff fdc4 	bl	80137f8 <__hi0bits>
 8013c70:	f1c0 0320 	rsb	r3, r0, #32
 8013c74:	280a      	cmp	r0, #10
 8013c76:	600b      	str	r3, [r1, #0]
 8013c78:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013cf0 <__b2d+0x98>
 8013c7c:	dc14      	bgt.n	8013ca8 <__b2d+0x50>
 8013c7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8013c82:	fa24 f10e 	lsr.w	r1, r4, lr
 8013c86:	42b7      	cmp	r7, r6
 8013c88:	ea41 030c 	orr.w	r3, r1, ip
 8013c8c:	bf34      	ite	cc
 8013c8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013c92:	2100      	movcs	r1, #0
 8013c94:	3015      	adds	r0, #21
 8013c96:	fa04 f000 	lsl.w	r0, r4, r0
 8013c9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8013c9e:	ea40 0201 	orr.w	r2, r0, r1
 8013ca2:	ec43 2b10 	vmov	d0, r2, r3
 8013ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ca8:	42b7      	cmp	r7, r6
 8013caa:	bf3a      	itte	cc
 8013cac:	f1a5 0608 	subcc.w	r6, r5, #8
 8013cb0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013cb4:	2100      	movcs	r1, #0
 8013cb6:	380b      	subs	r0, #11
 8013cb8:	d015      	beq.n	8013ce6 <__b2d+0x8e>
 8013cba:	4084      	lsls	r4, r0
 8013cbc:	f1c0 0520 	rsb	r5, r0, #32
 8013cc0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013cc4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013cc8:	42be      	cmp	r6, r7
 8013cca:	fa21 fc05 	lsr.w	ip, r1, r5
 8013cce:	ea44 030c 	orr.w	r3, r4, ip
 8013cd2:	bf8c      	ite	hi
 8013cd4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013cd8:	2400      	movls	r4, #0
 8013cda:	fa01 f000 	lsl.w	r0, r1, r0
 8013cde:	40ec      	lsrs	r4, r5
 8013ce0:	ea40 0204 	orr.w	r2, r0, r4
 8013ce4:	e7dd      	b.n	8013ca2 <__b2d+0x4a>
 8013ce6:	ea44 030c 	orr.w	r3, r4, ip
 8013cea:	460a      	mov	r2, r1
 8013cec:	e7d9      	b.n	8013ca2 <__b2d+0x4a>
 8013cee:	bf00      	nop
 8013cf0:	3ff00000 	.word	0x3ff00000

08013cf4 <__d2b>:
 8013cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cf8:	460e      	mov	r6, r1
 8013cfa:	2101      	movs	r1, #1
 8013cfc:	ec59 8b10 	vmov	r8, r9, d0
 8013d00:	4615      	mov	r5, r2
 8013d02:	f7ff fcb5 	bl	8013670 <_Balloc>
 8013d06:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013d0a:	4607      	mov	r7, r0
 8013d0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d10:	bb34      	cbnz	r4, 8013d60 <__d2b+0x6c>
 8013d12:	9301      	str	r3, [sp, #4]
 8013d14:	f1b8 0300 	subs.w	r3, r8, #0
 8013d18:	d027      	beq.n	8013d6a <__d2b+0x76>
 8013d1a:	a802      	add	r0, sp, #8
 8013d1c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013d20:	f7ff fd89 	bl	8013836 <__lo0bits>
 8013d24:	9900      	ldr	r1, [sp, #0]
 8013d26:	b1f0      	cbz	r0, 8013d66 <__d2b+0x72>
 8013d28:	9a01      	ldr	r2, [sp, #4]
 8013d2a:	f1c0 0320 	rsb	r3, r0, #32
 8013d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8013d32:	430b      	orrs	r3, r1
 8013d34:	40c2      	lsrs	r2, r0
 8013d36:	617b      	str	r3, [r7, #20]
 8013d38:	9201      	str	r2, [sp, #4]
 8013d3a:	9b01      	ldr	r3, [sp, #4]
 8013d3c:	61bb      	str	r3, [r7, #24]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	bf14      	ite	ne
 8013d42:	2102      	movne	r1, #2
 8013d44:	2101      	moveq	r1, #1
 8013d46:	6139      	str	r1, [r7, #16]
 8013d48:	b1c4      	cbz	r4, 8013d7c <__d2b+0x88>
 8013d4a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013d4e:	4404      	add	r4, r0
 8013d50:	6034      	str	r4, [r6, #0]
 8013d52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013d56:	6028      	str	r0, [r5, #0]
 8013d58:	4638      	mov	r0, r7
 8013d5a:	b003      	add	sp, #12
 8013d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013d64:	e7d5      	b.n	8013d12 <__d2b+0x1e>
 8013d66:	6179      	str	r1, [r7, #20]
 8013d68:	e7e7      	b.n	8013d3a <__d2b+0x46>
 8013d6a:	a801      	add	r0, sp, #4
 8013d6c:	f7ff fd63 	bl	8013836 <__lo0bits>
 8013d70:	9b01      	ldr	r3, [sp, #4]
 8013d72:	617b      	str	r3, [r7, #20]
 8013d74:	2101      	movs	r1, #1
 8013d76:	6139      	str	r1, [r7, #16]
 8013d78:	3020      	adds	r0, #32
 8013d7a:	e7e5      	b.n	8013d48 <__d2b+0x54>
 8013d7c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013d80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013d84:	6030      	str	r0, [r6, #0]
 8013d86:	6918      	ldr	r0, [r3, #16]
 8013d88:	f7ff fd36 	bl	80137f8 <__hi0bits>
 8013d8c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013d90:	e7e1      	b.n	8013d56 <__d2b+0x62>

08013d92 <__ratio>:
 8013d92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d96:	4688      	mov	r8, r1
 8013d98:	4669      	mov	r1, sp
 8013d9a:	4681      	mov	r9, r0
 8013d9c:	f7ff ff5c 	bl	8013c58 <__b2d>
 8013da0:	a901      	add	r1, sp, #4
 8013da2:	4640      	mov	r0, r8
 8013da4:	ec57 6b10 	vmov	r6, r7, d0
 8013da8:	ee10 4a10 	vmov	r4, s0
 8013dac:	f7ff ff54 	bl	8013c58 <__b2d>
 8013db0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013db4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013db8:	eba3 0c02 	sub.w	ip, r3, r2
 8013dbc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013dc0:	1a9b      	subs	r3, r3, r2
 8013dc2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013dc6:	ec51 0b10 	vmov	r0, r1, d0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	ee10 aa10 	vmov	sl, s0
 8013dd0:	bfce      	itee	gt
 8013dd2:	463a      	movgt	r2, r7
 8013dd4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013dd8:	460a      	movle	r2, r1
 8013dda:	463d      	mov	r5, r7
 8013ddc:	468b      	mov	fp, r1
 8013dde:	bfcc      	ite	gt
 8013de0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013de4:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013de8:	ec45 4b17 	vmov	d7, r4, r5
 8013dec:	ec4b ab16 	vmov	d6, sl, fp
 8013df0:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8013df4:	b003      	add	sp, #12
 8013df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013dfa <__copybits>:
 8013dfa:	3901      	subs	r1, #1
 8013dfc:	b510      	push	{r4, lr}
 8013dfe:	1149      	asrs	r1, r1, #5
 8013e00:	6914      	ldr	r4, [r2, #16]
 8013e02:	3101      	adds	r1, #1
 8013e04:	f102 0314 	add.w	r3, r2, #20
 8013e08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013e0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013e10:	42a3      	cmp	r3, r4
 8013e12:	4602      	mov	r2, r0
 8013e14:	d303      	bcc.n	8013e1e <__copybits+0x24>
 8013e16:	2300      	movs	r3, #0
 8013e18:	428a      	cmp	r2, r1
 8013e1a:	d305      	bcc.n	8013e28 <__copybits+0x2e>
 8013e1c:	bd10      	pop	{r4, pc}
 8013e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e22:	f840 2b04 	str.w	r2, [r0], #4
 8013e26:	e7f3      	b.n	8013e10 <__copybits+0x16>
 8013e28:	f842 3b04 	str.w	r3, [r2], #4
 8013e2c:	e7f4      	b.n	8013e18 <__copybits+0x1e>

08013e2e <__any_on>:
 8013e2e:	f100 0214 	add.w	r2, r0, #20
 8013e32:	6900      	ldr	r0, [r0, #16]
 8013e34:	114b      	asrs	r3, r1, #5
 8013e36:	4298      	cmp	r0, r3
 8013e38:	b510      	push	{r4, lr}
 8013e3a:	db11      	blt.n	8013e60 <__any_on+0x32>
 8013e3c:	dd0a      	ble.n	8013e54 <__any_on+0x26>
 8013e3e:	f011 011f 	ands.w	r1, r1, #31
 8013e42:	d007      	beq.n	8013e54 <__any_on+0x26>
 8013e44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013e48:	fa24 f001 	lsr.w	r0, r4, r1
 8013e4c:	fa00 f101 	lsl.w	r1, r0, r1
 8013e50:	428c      	cmp	r4, r1
 8013e52:	d10b      	bne.n	8013e6c <__any_on+0x3e>
 8013e54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d803      	bhi.n	8013e64 <__any_on+0x36>
 8013e5c:	2000      	movs	r0, #0
 8013e5e:	bd10      	pop	{r4, pc}
 8013e60:	4603      	mov	r3, r0
 8013e62:	e7f7      	b.n	8013e54 <__any_on+0x26>
 8013e64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013e68:	2900      	cmp	r1, #0
 8013e6a:	d0f5      	beq.n	8013e58 <__any_on+0x2a>
 8013e6c:	2001      	movs	r0, #1
 8013e6e:	e7f6      	b.n	8013e5e <__any_on+0x30>

08013e70 <_calloc_r>:
 8013e70:	b538      	push	{r3, r4, r5, lr}
 8013e72:	fb02 f401 	mul.w	r4, r2, r1
 8013e76:	4621      	mov	r1, r4
 8013e78:	f000 f856 	bl	8013f28 <_malloc_r>
 8013e7c:	4605      	mov	r5, r0
 8013e7e:	b118      	cbz	r0, 8013e88 <_calloc_r+0x18>
 8013e80:	4622      	mov	r2, r4
 8013e82:	2100      	movs	r1, #0
 8013e84:	f7fc fdef 	bl	8010a66 <memset>
 8013e88:	4628      	mov	r0, r5
 8013e8a:	bd38      	pop	{r3, r4, r5, pc}

08013e8c <_free_r>:
 8013e8c:	b538      	push	{r3, r4, r5, lr}
 8013e8e:	4605      	mov	r5, r0
 8013e90:	2900      	cmp	r1, #0
 8013e92:	d045      	beq.n	8013f20 <_free_r+0x94>
 8013e94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e98:	1f0c      	subs	r4, r1, #4
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	bfb8      	it	lt
 8013e9e:	18e4      	addlt	r4, r4, r3
 8013ea0:	f000 fa36 	bl	8014310 <__malloc_lock>
 8013ea4:	4a1f      	ldr	r2, [pc, #124]	; (8013f24 <_free_r+0x98>)
 8013ea6:	6813      	ldr	r3, [r2, #0]
 8013ea8:	4610      	mov	r0, r2
 8013eaa:	b933      	cbnz	r3, 8013eba <_free_r+0x2e>
 8013eac:	6063      	str	r3, [r4, #4]
 8013eae:	6014      	str	r4, [r2, #0]
 8013eb0:	4628      	mov	r0, r5
 8013eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013eb6:	f000 ba2c 	b.w	8014312 <__malloc_unlock>
 8013eba:	42a3      	cmp	r3, r4
 8013ebc:	d90c      	bls.n	8013ed8 <_free_r+0x4c>
 8013ebe:	6821      	ldr	r1, [r4, #0]
 8013ec0:	1862      	adds	r2, r4, r1
 8013ec2:	4293      	cmp	r3, r2
 8013ec4:	bf04      	itt	eq
 8013ec6:	681a      	ldreq	r2, [r3, #0]
 8013ec8:	685b      	ldreq	r3, [r3, #4]
 8013eca:	6063      	str	r3, [r4, #4]
 8013ecc:	bf04      	itt	eq
 8013ece:	1852      	addeq	r2, r2, r1
 8013ed0:	6022      	streq	r2, [r4, #0]
 8013ed2:	6004      	str	r4, [r0, #0]
 8013ed4:	e7ec      	b.n	8013eb0 <_free_r+0x24>
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	685a      	ldr	r2, [r3, #4]
 8013eda:	b10a      	cbz	r2, 8013ee0 <_free_r+0x54>
 8013edc:	42a2      	cmp	r2, r4
 8013ede:	d9fa      	bls.n	8013ed6 <_free_r+0x4a>
 8013ee0:	6819      	ldr	r1, [r3, #0]
 8013ee2:	1858      	adds	r0, r3, r1
 8013ee4:	42a0      	cmp	r0, r4
 8013ee6:	d10b      	bne.n	8013f00 <_free_r+0x74>
 8013ee8:	6820      	ldr	r0, [r4, #0]
 8013eea:	4401      	add	r1, r0
 8013eec:	1858      	adds	r0, r3, r1
 8013eee:	4282      	cmp	r2, r0
 8013ef0:	6019      	str	r1, [r3, #0]
 8013ef2:	d1dd      	bne.n	8013eb0 <_free_r+0x24>
 8013ef4:	6810      	ldr	r0, [r2, #0]
 8013ef6:	6852      	ldr	r2, [r2, #4]
 8013ef8:	605a      	str	r2, [r3, #4]
 8013efa:	4401      	add	r1, r0
 8013efc:	6019      	str	r1, [r3, #0]
 8013efe:	e7d7      	b.n	8013eb0 <_free_r+0x24>
 8013f00:	d902      	bls.n	8013f08 <_free_r+0x7c>
 8013f02:	230c      	movs	r3, #12
 8013f04:	602b      	str	r3, [r5, #0]
 8013f06:	e7d3      	b.n	8013eb0 <_free_r+0x24>
 8013f08:	6820      	ldr	r0, [r4, #0]
 8013f0a:	1821      	adds	r1, r4, r0
 8013f0c:	428a      	cmp	r2, r1
 8013f0e:	bf04      	itt	eq
 8013f10:	6811      	ldreq	r1, [r2, #0]
 8013f12:	6852      	ldreq	r2, [r2, #4]
 8013f14:	6062      	str	r2, [r4, #4]
 8013f16:	bf04      	itt	eq
 8013f18:	1809      	addeq	r1, r1, r0
 8013f1a:	6021      	streq	r1, [r4, #0]
 8013f1c:	605c      	str	r4, [r3, #4]
 8013f1e:	e7c7      	b.n	8013eb0 <_free_r+0x24>
 8013f20:	bd38      	pop	{r3, r4, r5, pc}
 8013f22:	bf00      	nop
 8013f24:	20001e70 	.word	0x20001e70

08013f28 <_malloc_r>:
 8013f28:	b570      	push	{r4, r5, r6, lr}
 8013f2a:	1ccd      	adds	r5, r1, #3
 8013f2c:	f025 0503 	bic.w	r5, r5, #3
 8013f30:	3508      	adds	r5, #8
 8013f32:	2d0c      	cmp	r5, #12
 8013f34:	bf38      	it	cc
 8013f36:	250c      	movcc	r5, #12
 8013f38:	2d00      	cmp	r5, #0
 8013f3a:	4606      	mov	r6, r0
 8013f3c:	db01      	blt.n	8013f42 <_malloc_r+0x1a>
 8013f3e:	42a9      	cmp	r1, r5
 8013f40:	d903      	bls.n	8013f4a <_malloc_r+0x22>
 8013f42:	230c      	movs	r3, #12
 8013f44:	6033      	str	r3, [r6, #0]
 8013f46:	2000      	movs	r0, #0
 8013f48:	bd70      	pop	{r4, r5, r6, pc}
 8013f4a:	f000 f9e1 	bl	8014310 <__malloc_lock>
 8013f4e:	4a21      	ldr	r2, [pc, #132]	; (8013fd4 <_malloc_r+0xac>)
 8013f50:	6814      	ldr	r4, [r2, #0]
 8013f52:	4621      	mov	r1, r4
 8013f54:	b991      	cbnz	r1, 8013f7c <_malloc_r+0x54>
 8013f56:	4c20      	ldr	r4, [pc, #128]	; (8013fd8 <_malloc_r+0xb0>)
 8013f58:	6823      	ldr	r3, [r4, #0]
 8013f5a:	b91b      	cbnz	r3, 8013f64 <_malloc_r+0x3c>
 8013f5c:	4630      	mov	r0, r6
 8013f5e:	f000 f98f 	bl	8014280 <_sbrk_r>
 8013f62:	6020      	str	r0, [r4, #0]
 8013f64:	4629      	mov	r1, r5
 8013f66:	4630      	mov	r0, r6
 8013f68:	f000 f98a 	bl	8014280 <_sbrk_r>
 8013f6c:	1c43      	adds	r3, r0, #1
 8013f6e:	d124      	bne.n	8013fba <_malloc_r+0x92>
 8013f70:	230c      	movs	r3, #12
 8013f72:	6033      	str	r3, [r6, #0]
 8013f74:	4630      	mov	r0, r6
 8013f76:	f000 f9cc 	bl	8014312 <__malloc_unlock>
 8013f7a:	e7e4      	b.n	8013f46 <_malloc_r+0x1e>
 8013f7c:	680b      	ldr	r3, [r1, #0]
 8013f7e:	1b5b      	subs	r3, r3, r5
 8013f80:	d418      	bmi.n	8013fb4 <_malloc_r+0x8c>
 8013f82:	2b0b      	cmp	r3, #11
 8013f84:	d90f      	bls.n	8013fa6 <_malloc_r+0x7e>
 8013f86:	600b      	str	r3, [r1, #0]
 8013f88:	50cd      	str	r5, [r1, r3]
 8013f8a:	18cc      	adds	r4, r1, r3
 8013f8c:	4630      	mov	r0, r6
 8013f8e:	f000 f9c0 	bl	8014312 <__malloc_unlock>
 8013f92:	f104 000b 	add.w	r0, r4, #11
 8013f96:	1d23      	adds	r3, r4, #4
 8013f98:	f020 0007 	bic.w	r0, r0, #7
 8013f9c:	1ac3      	subs	r3, r0, r3
 8013f9e:	d0d3      	beq.n	8013f48 <_malloc_r+0x20>
 8013fa0:	425a      	negs	r2, r3
 8013fa2:	50e2      	str	r2, [r4, r3]
 8013fa4:	e7d0      	b.n	8013f48 <_malloc_r+0x20>
 8013fa6:	428c      	cmp	r4, r1
 8013fa8:	684b      	ldr	r3, [r1, #4]
 8013faa:	bf16      	itet	ne
 8013fac:	6063      	strne	r3, [r4, #4]
 8013fae:	6013      	streq	r3, [r2, #0]
 8013fb0:	460c      	movne	r4, r1
 8013fb2:	e7eb      	b.n	8013f8c <_malloc_r+0x64>
 8013fb4:	460c      	mov	r4, r1
 8013fb6:	6849      	ldr	r1, [r1, #4]
 8013fb8:	e7cc      	b.n	8013f54 <_malloc_r+0x2c>
 8013fba:	1cc4      	adds	r4, r0, #3
 8013fbc:	f024 0403 	bic.w	r4, r4, #3
 8013fc0:	42a0      	cmp	r0, r4
 8013fc2:	d005      	beq.n	8013fd0 <_malloc_r+0xa8>
 8013fc4:	1a21      	subs	r1, r4, r0
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	f000 f95a 	bl	8014280 <_sbrk_r>
 8013fcc:	3001      	adds	r0, #1
 8013fce:	d0cf      	beq.n	8013f70 <_malloc_r+0x48>
 8013fd0:	6025      	str	r5, [r4, #0]
 8013fd2:	e7db      	b.n	8013f8c <_malloc_r+0x64>
 8013fd4:	20001e70 	.word	0x20001e70
 8013fd8:	20001e74 	.word	0x20001e74

08013fdc <__ssputs_r>:
 8013fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fe0:	688e      	ldr	r6, [r1, #8]
 8013fe2:	429e      	cmp	r6, r3
 8013fe4:	4682      	mov	sl, r0
 8013fe6:	460c      	mov	r4, r1
 8013fe8:	4690      	mov	r8, r2
 8013fea:	4699      	mov	r9, r3
 8013fec:	d837      	bhi.n	801405e <__ssputs_r+0x82>
 8013fee:	898a      	ldrh	r2, [r1, #12]
 8013ff0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ff4:	d031      	beq.n	801405a <__ssputs_r+0x7e>
 8013ff6:	6825      	ldr	r5, [r4, #0]
 8013ff8:	6909      	ldr	r1, [r1, #16]
 8013ffa:	1a6f      	subs	r7, r5, r1
 8013ffc:	6965      	ldr	r5, [r4, #20]
 8013ffe:	2302      	movs	r3, #2
 8014000:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014004:	fb95 f5f3 	sdiv	r5, r5, r3
 8014008:	f109 0301 	add.w	r3, r9, #1
 801400c:	443b      	add	r3, r7
 801400e:	429d      	cmp	r5, r3
 8014010:	bf38      	it	cc
 8014012:	461d      	movcc	r5, r3
 8014014:	0553      	lsls	r3, r2, #21
 8014016:	d530      	bpl.n	801407a <__ssputs_r+0x9e>
 8014018:	4629      	mov	r1, r5
 801401a:	f7ff ff85 	bl	8013f28 <_malloc_r>
 801401e:	4606      	mov	r6, r0
 8014020:	b950      	cbnz	r0, 8014038 <__ssputs_r+0x5c>
 8014022:	230c      	movs	r3, #12
 8014024:	f8ca 3000 	str.w	r3, [sl]
 8014028:	89a3      	ldrh	r3, [r4, #12]
 801402a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801402e:	81a3      	strh	r3, [r4, #12]
 8014030:	f04f 30ff 	mov.w	r0, #4294967295
 8014034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014038:	463a      	mov	r2, r7
 801403a:	6921      	ldr	r1, [r4, #16]
 801403c:	f7fc fd08 	bl	8010a50 <memcpy>
 8014040:	89a3      	ldrh	r3, [r4, #12]
 8014042:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801404a:	81a3      	strh	r3, [r4, #12]
 801404c:	6126      	str	r6, [r4, #16]
 801404e:	6165      	str	r5, [r4, #20]
 8014050:	443e      	add	r6, r7
 8014052:	1bed      	subs	r5, r5, r7
 8014054:	6026      	str	r6, [r4, #0]
 8014056:	60a5      	str	r5, [r4, #8]
 8014058:	464e      	mov	r6, r9
 801405a:	454e      	cmp	r6, r9
 801405c:	d900      	bls.n	8014060 <__ssputs_r+0x84>
 801405e:	464e      	mov	r6, r9
 8014060:	4632      	mov	r2, r6
 8014062:	4641      	mov	r1, r8
 8014064:	6820      	ldr	r0, [r4, #0]
 8014066:	f000 f93a 	bl	80142de <memmove>
 801406a:	68a3      	ldr	r3, [r4, #8]
 801406c:	1b9b      	subs	r3, r3, r6
 801406e:	60a3      	str	r3, [r4, #8]
 8014070:	6823      	ldr	r3, [r4, #0]
 8014072:	441e      	add	r6, r3
 8014074:	6026      	str	r6, [r4, #0]
 8014076:	2000      	movs	r0, #0
 8014078:	e7dc      	b.n	8014034 <__ssputs_r+0x58>
 801407a:	462a      	mov	r2, r5
 801407c:	f000 f94a 	bl	8014314 <_realloc_r>
 8014080:	4606      	mov	r6, r0
 8014082:	2800      	cmp	r0, #0
 8014084:	d1e2      	bne.n	801404c <__ssputs_r+0x70>
 8014086:	6921      	ldr	r1, [r4, #16]
 8014088:	4650      	mov	r0, sl
 801408a:	f7ff feff 	bl	8013e8c <_free_r>
 801408e:	e7c8      	b.n	8014022 <__ssputs_r+0x46>

08014090 <_svfiprintf_r>:
 8014090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014094:	461d      	mov	r5, r3
 8014096:	898b      	ldrh	r3, [r1, #12]
 8014098:	061f      	lsls	r7, r3, #24
 801409a:	b09d      	sub	sp, #116	; 0x74
 801409c:	4680      	mov	r8, r0
 801409e:	460c      	mov	r4, r1
 80140a0:	4616      	mov	r6, r2
 80140a2:	d50f      	bpl.n	80140c4 <_svfiprintf_r+0x34>
 80140a4:	690b      	ldr	r3, [r1, #16]
 80140a6:	b96b      	cbnz	r3, 80140c4 <_svfiprintf_r+0x34>
 80140a8:	2140      	movs	r1, #64	; 0x40
 80140aa:	f7ff ff3d 	bl	8013f28 <_malloc_r>
 80140ae:	6020      	str	r0, [r4, #0]
 80140b0:	6120      	str	r0, [r4, #16]
 80140b2:	b928      	cbnz	r0, 80140c0 <_svfiprintf_r+0x30>
 80140b4:	230c      	movs	r3, #12
 80140b6:	f8c8 3000 	str.w	r3, [r8]
 80140ba:	f04f 30ff 	mov.w	r0, #4294967295
 80140be:	e0c8      	b.n	8014252 <_svfiprintf_r+0x1c2>
 80140c0:	2340      	movs	r3, #64	; 0x40
 80140c2:	6163      	str	r3, [r4, #20]
 80140c4:	2300      	movs	r3, #0
 80140c6:	9309      	str	r3, [sp, #36]	; 0x24
 80140c8:	2320      	movs	r3, #32
 80140ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140ce:	2330      	movs	r3, #48	; 0x30
 80140d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140d4:	9503      	str	r5, [sp, #12]
 80140d6:	f04f 0b01 	mov.w	fp, #1
 80140da:	4637      	mov	r7, r6
 80140dc:	463d      	mov	r5, r7
 80140de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80140e2:	b10b      	cbz	r3, 80140e8 <_svfiprintf_r+0x58>
 80140e4:	2b25      	cmp	r3, #37	; 0x25
 80140e6:	d13e      	bne.n	8014166 <_svfiprintf_r+0xd6>
 80140e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80140ec:	d00b      	beq.n	8014106 <_svfiprintf_r+0x76>
 80140ee:	4653      	mov	r3, sl
 80140f0:	4632      	mov	r2, r6
 80140f2:	4621      	mov	r1, r4
 80140f4:	4640      	mov	r0, r8
 80140f6:	f7ff ff71 	bl	8013fdc <__ssputs_r>
 80140fa:	3001      	adds	r0, #1
 80140fc:	f000 80a4 	beq.w	8014248 <_svfiprintf_r+0x1b8>
 8014100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014102:	4453      	add	r3, sl
 8014104:	9309      	str	r3, [sp, #36]	; 0x24
 8014106:	783b      	ldrb	r3, [r7, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	f000 809d 	beq.w	8014248 <_svfiprintf_r+0x1b8>
 801410e:	2300      	movs	r3, #0
 8014110:	f04f 32ff 	mov.w	r2, #4294967295
 8014114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014118:	9304      	str	r3, [sp, #16]
 801411a:	9307      	str	r3, [sp, #28]
 801411c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014120:	931a      	str	r3, [sp, #104]	; 0x68
 8014122:	462f      	mov	r7, r5
 8014124:	2205      	movs	r2, #5
 8014126:	f817 1b01 	ldrb.w	r1, [r7], #1
 801412a:	4850      	ldr	r0, [pc, #320]	; (801426c <_svfiprintf_r+0x1dc>)
 801412c:	f7ec f8a0 	bl	8000270 <memchr>
 8014130:	9b04      	ldr	r3, [sp, #16]
 8014132:	b9d0      	cbnz	r0, 801416a <_svfiprintf_r+0xda>
 8014134:	06d9      	lsls	r1, r3, #27
 8014136:	bf44      	itt	mi
 8014138:	2220      	movmi	r2, #32
 801413a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801413e:	071a      	lsls	r2, r3, #28
 8014140:	bf44      	itt	mi
 8014142:	222b      	movmi	r2, #43	; 0x2b
 8014144:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014148:	782a      	ldrb	r2, [r5, #0]
 801414a:	2a2a      	cmp	r2, #42	; 0x2a
 801414c:	d015      	beq.n	801417a <_svfiprintf_r+0xea>
 801414e:	9a07      	ldr	r2, [sp, #28]
 8014150:	462f      	mov	r7, r5
 8014152:	2000      	movs	r0, #0
 8014154:	250a      	movs	r5, #10
 8014156:	4639      	mov	r1, r7
 8014158:	f811 3b01 	ldrb.w	r3, [r1], #1
 801415c:	3b30      	subs	r3, #48	; 0x30
 801415e:	2b09      	cmp	r3, #9
 8014160:	d94d      	bls.n	80141fe <_svfiprintf_r+0x16e>
 8014162:	b1b8      	cbz	r0, 8014194 <_svfiprintf_r+0x104>
 8014164:	e00f      	b.n	8014186 <_svfiprintf_r+0xf6>
 8014166:	462f      	mov	r7, r5
 8014168:	e7b8      	b.n	80140dc <_svfiprintf_r+0x4c>
 801416a:	4a40      	ldr	r2, [pc, #256]	; (801426c <_svfiprintf_r+0x1dc>)
 801416c:	1a80      	subs	r0, r0, r2
 801416e:	fa0b f000 	lsl.w	r0, fp, r0
 8014172:	4318      	orrs	r0, r3
 8014174:	9004      	str	r0, [sp, #16]
 8014176:	463d      	mov	r5, r7
 8014178:	e7d3      	b.n	8014122 <_svfiprintf_r+0x92>
 801417a:	9a03      	ldr	r2, [sp, #12]
 801417c:	1d11      	adds	r1, r2, #4
 801417e:	6812      	ldr	r2, [r2, #0]
 8014180:	9103      	str	r1, [sp, #12]
 8014182:	2a00      	cmp	r2, #0
 8014184:	db01      	blt.n	801418a <_svfiprintf_r+0xfa>
 8014186:	9207      	str	r2, [sp, #28]
 8014188:	e004      	b.n	8014194 <_svfiprintf_r+0x104>
 801418a:	4252      	negs	r2, r2
 801418c:	f043 0302 	orr.w	r3, r3, #2
 8014190:	9207      	str	r2, [sp, #28]
 8014192:	9304      	str	r3, [sp, #16]
 8014194:	783b      	ldrb	r3, [r7, #0]
 8014196:	2b2e      	cmp	r3, #46	; 0x2e
 8014198:	d10c      	bne.n	80141b4 <_svfiprintf_r+0x124>
 801419a:	787b      	ldrb	r3, [r7, #1]
 801419c:	2b2a      	cmp	r3, #42	; 0x2a
 801419e:	d133      	bne.n	8014208 <_svfiprintf_r+0x178>
 80141a0:	9b03      	ldr	r3, [sp, #12]
 80141a2:	1d1a      	adds	r2, r3, #4
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	9203      	str	r2, [sp, #12]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	bfb8      	it	lt
 80141ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80141b0:	3702      	adds	r7, #2
 80141b2:	9305      	str	r3, [sp, #20]
 80141b4:	4d2e      	ldr	r5, [pc, #184]	; (8014270 <_svfiprintf_r+0x1e0>)
 80141b6:	7839      	ldrb	r1, [r7, #0]
 80141b8:	2203      	movs	r2, #3
 80141ba:	4628      	mov	r0, r5
 80141bc:	f7ec f858 	bl	8000270 <memchr>
 80141c0:	b138      	cbz	r0, 80141d2 <_svfiprintf_r+0x142>
 80141c2:	2340      	movs	r3, #64	; 0x40
 80141c4:	1b40      	subs	r0, r0, r5
 80141c6:	fa03 f000 	lsl.w	r0, r3, r0
 80141ca:	9b04      	ldr	r3, [sp, #16]
 80141cc:	4303      	orrs	r3, r0
 80141ce:	3701      	adds	r7, #1
 80141d0:	9304      	str	r3, [sp, #16]
 80141d2:	7839      	ldrb	r1, [r7, #0]
 80141d4:	4827      	ldr	r0, [pc, #156]	; (8014274 <_svfiprintf_r+0x1e4>)
 80141d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141da:	2206      	movs	r2, #6
 80141dc:	1c7e      	adds	r6, r7, #1
 80141de:	f7ec f847 	bl	8000270 <memchr>
 80141e2:	2800      	cmp	r0, #0
 80141e4:	d038      	beq.n	8014258 <_svfiprintf_r+0x1c8>
 80141e6:	4b24      	ldr	r3, [pc, #144]	; (8014278 <_svfiprintf_r+0x1e8>)
 80141e8:	bb13      	cbnz	r3, 8014230 <_svfiprintf_r+0x1a0>
 80141ea:	9b03      	ldr	r3, [sp, #12]
 80141ec:	3307      	adds	r3, #7
 80141ee:	f023 0307 	bic.w	r3, r3, #7
 80141f2:	3308      	adds	r3, #8
 80141f4:	9303      	str	r3, [sp, #12]
 80141f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141f8:	444b      	add	r3, r9
 80141fa:	9309      	str	r3, [sp, #36]	; 0x24
 80141fc:	e76d      	b.n	80140da <_svfiprintf_r+0x4a>
 80141fe:	fb05 3202 	mla	r2, r5, r2, r3
 8014202:	2001      	movs	r0, #1
 8014204:	460f      	mov	r7, r1
 8014206:	e7a6      	b.n	8014156 <_svfiprintf_r+0xc6>
 8014208:	2300      	movs	r3, #0
 801420a:	3701      	adds	r7, #1
 801420c:	9305      	str	r3, [sp, #20]
 801420e:	4619      	mov	r1, r3
 8014210:	250a      	movs	r5, #10
 8014212:	4638      	mov	r0, r7
 8014214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014218:	3a30      	subs	r2, #48	; 0x30
 801421a:	2a09      	cmp	r2, #9
 801421c:	d903      	bls.n	8014226 <_svfiprintf_r+0x196>
 801421e:	2b00      	cmp	r3, #0
 8014220:	d0c8      	beq.n	80141b4 <_svfiprintf_r+0x124>
 8014222:	9105      	str	r1, [sp, #20]
 8014224:	e7c6      	b.n	80141b4 <_svfiprintf_r+0x124>
 8014226:	fb05 2101 	mla	r1, r5, r1, r2
 801422a:	2301      	movs	r3, #1
 801422c:	4607      	mov	r7, r0
 801422e:	e7f0      	b.n	8014212 <_svfiprintf_r+0x182>
 8014230:	ab03      	add	r3, sp, #12
 8014232:	9300      	str	r3, [sp, #0]
 8014234:	4622      	mov	r2, r4
 8014236:	4b11      	ldr	r3, [pc, #68]	; (801427c <_svfiprintf_r+0x1ec>)
 8014238:	a904      	add	r1, sp, #16
 801423a:	4640      	mov	r0, r8
 801423c:	f7fc fca0 	bl	8010b80 <_printf_float>
 8014240:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014244:	4681      	mov	r9, r0
 8014246:	d1d6      	bne.n	80141f6 <_svfiprintf_r+0x166>
 8014248:	89a3      	ldrh	r3, [r4, #12]
 801424a:	065b      	lsls	r3, r3, #25
 801424c:	f53f af35 	bmi.w	80140ba <_svfiprintf_r+0x2a>
 8014250:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014252:	b01d      	add	sp, #116	; 0x74
 8014254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014258:	ab03      	add	r3, sp, #12
 801425a:	9300      	str	r3, [sp, #0]
 801425c:	4622      	mov	r2, r4
 801425e:	4b07      	ldr	r3, [pc, #28]	; (801427c <_svfiprintf_r+0x1ec>)
 8014260:	a904      	add	r1, sp, #16
 8014262:	4640      	mov	r0, r8
 8014264:	f7fc ff2e 	bl	80110c4 <_printf_i>
 8014268:	e7ea      	b.n	8014240 <_svfiprintf_r+0x1b0>
 801426a:	bf00      	nop
 801426c:	08014c34 	.word	0x08014c34
 8014270:	08014c3a 	.word	0x08014c3a
 8014274:	08014c3e 	.word	0x08014c3e
 8014278:	08010b81 	.word	0x08010b81
 801427c:	08013fdd 	.word	0x08013fdd

08014280 <_sbrk_r>:
 8014280:	b538      	push	{r3, r4, r5, lr}
 8014282:	4c06      	ldr	r4, [pc, #24]	; (801429c <_sbrk_r+0x1c>)
 8014284:	2300      	movs	r3, #0
 8014286:	4605      	mov	r5, r0
 8014288:	4608      	mov	r0, r1
 801428a:	6023      	str	r3, [r4, #0]
 801428c:	f7ef ffb6 	bl	80041fc <_sbrk>
 8014290:	1c43      	adds	r3, r0, #1
 8014292:	d102      	bne.n	801429a <_sbrk_r+0x1a>
 8014294:	6823      	ldr	r3, [r4, #0]
 8014296:	b103      	cbz	r3, 801429a <_sbrk_r+0x1a>
 8014298:	602b      	str	r3, [r5, #0]
 801429a:	bd38      	pop	{r3, r4, r5, pc}
 801429c:	20005618 	.word	0x20005618

080142a0 <strncmp>:
 80142a0:	b510      	push	{r4, lr}
 80142a2:	b16a      	cbz	r2, 80142c0 <strncmp+0x20>
 80142a4:	3901      	subs	r1, #1
 80142a6:	1884      	adds	r4, r0, r2
 80142a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80142ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80142b0:	4293      	cmp	r3, r2
 80142b2:	d103      	bne.n	80142bc <strncmp+0x1c>
 80142b4:	42a0      	cmp	r0, r4
 80142b6:	d001      	beq.n	80142bc <strncmp+0x1c>
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d1f5      	bne.n	80142a8 <strncmp+0x8>
 80142bc:	1a98      	subs	r0, r3, r2
 80142be:	bd10      	pop	{r4, pc}
 80142c0:	4610      	mov	r0, r2
 80142c2:	e7fc      	b.n	80142be <strncmp+0x1e>

080142c4 <__ascii_wctomb>:
 80142c4:	b149      	cbz	r1, 80142da <__ascii_wctomb+0x16>
 80142c6:	2aff      	cmp	r2, #255	; 0xff
 80142c8:	bf85      	ittet	hi
 80142ca:	238a      	movhi	r3, #138	; 0x8a
 80142cc:	6003      	strhi	r3, [r0, #0]
 80142ce:	700a      	strbls	r2, [r1, #0]
 80142d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80142d4:	bf98      	it	ls
 80142d6:	2001      	movls	r0, #1
 80142d8:	4770      	bx	lr
 80142da:	4608      	mov	r0, r1
 80142dc:	4770      	bx	lr

080142de <memmove>:
 80142de:	4288      	cmp	r0, r1
 80142e0:	b510      	push	{r4, lr}
 80142e2:	eb01 0302 	add.w	r3, r1, r2
 80142e6:	d807      	bhi.n	80142f8 <memmove+0x1a>
 80142e8:	1e42      	subs	r2, r0, #1
 80142ea:	4299      	cmp	r1, r3
 80142ec:	d00a      	beq.n	8014304 <memmove+0x26>
 80142ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80142f6:	e7f8      	b.n	80142ea <memmove+0xc>
 80142f8:	4283      	cmp	r3, r0
 80142fa:	d9f5      	bls.n	80142e8 <memmove+0xa>
 80142fc:	1881      	adds	r1, r0, r2
 80142fe:	1ad2      	subs	r2, r2, r3
 8014300:	42d3      	cmn	r3, r2
 8014302:	d100      	bne.n	8014306 <memmove+0x28>
 8014304:	bd10      	pop	{r4, pc}
 8014306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801430a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801430e:	e7f7      	b.n	8014300 <memmove+0x22>

08014310 <__malloc_lock>:
 8014310:	4770      	bx	lr

08014312 <__malloc_unlock>:
 8014312:	4770      	bx	lr

08014314 <_realloc_r>:
 8014314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014316:	4607      	mov	r7, r0
 8014318:	4614      	mov	r4, r2
 801431a:	460e      	mov	r6, r1
 801431c:	b921      	cbnz	r1, 8014328 <_realloc_r+0x14>
 801431e:	4611      	mov	r1, r2
 8014320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014324:	f7ff be00 	b.w	8013f28 <_malloc_r>
 8014328:	b922      	cbnz	r2, 8014334 <_realloc_r+0x20>
 801432a:	f7ff fdaf 	bl	8013e8c <_free_r>
 801432e:	4625      	mov	r5, r4
 8014330:	4628      	mov	r0, r5
 8014332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014334:	f000 f814 	bl	8014360 <_malloc_usable_size_r>
 8014338:	42a0      	cmp	r0, r4
 801433a:	d20f      	bcs.n	801435c <_realloc_r+0x48>
 801433c:	4621      	mov	r1, r4
 801433e:	4638      	mov	r0, r7
 8014340:	f7ff fdf2 	bl	8013f28 <_malloc_r>
 8014344:	4605      	mov	r5, r0
 8014346:	2800      	cmp	r0, #0
 8014348:	d0f2      	beq.n	8014330 <_realloc_r+0x1c>
 801434a:	4631      	mov	r1, r6
 801434c:	4622      	mov	r2, r4
 801434e:	f7fc fb7f 	bl	8010a50 <memcpy>
 8014352:	4631      	mov	r1, r6
 8014354:	4638      	mov	r0, r7
 8014356:	f7ff fd99 	bl	8013e8c <_free_r>
 801435a:	e7e9      	b.n	8014330 <_realloc_r+0x1c>
 801435c:	4635      	mov	r5, r6
 801435e:	e7e7      	b.n	8014330 <_realloc_r+0x1c>

08014360 <_malloc_usable_size_r>:
 8014360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014364:	1f18      	subs	r0, r3, #4
 8014366:	2b00      	cmp	r3, #0
 8014368:	bfbc      	itt	lt
 801436a:	580b      	ldrlt	r3, [r1, r0]
 801436c:	18c0      	addlt	r0, r0, r3
 801436e:	4770      	bx	lr

08014370 <_init>:
 8014370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014372:	bf00      	nop
 8014374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014376:	bc08      	pop	{r3}
 8014378:	469e      	mov	lr, r3
 801437a:	4770      	bx	lr

0801437c <_fini>:
 801437c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801437e:	bf00      	nop
 8014380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014382:	bc08      	pop	{r3}
 8014384:	469e      	mov	lr, r3
 8014386:	4770      	bx	lr
