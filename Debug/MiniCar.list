
MiniCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebf4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  0800edf8  0800edf8  0001edf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1a0  0800f1a0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1a0  0800f1a0  0001f1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1a8  0800f1a8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1a8  0800f1a8  0001f1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1ac  0800f1ac  0001f1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800f1b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002eb4  200001f8  0800f3a4  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200030ac  0800f3a4  000230ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033ee8  00000000  00000000  00020222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004aa1  00000000  00000000  0005410a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024f8  00000000  00000000  00058bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022b0  00000000  00000000  0005b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003091a  00000000  00000000  0005d358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cdfe  00000000  00000000  0008dc72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001226f9  00000000  00000000  000aaa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cd169  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab48  00000000  00000000  001cd1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f8 	.word	0x200001f8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800eddc 	.word	0x0800eddc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001fc 	.word	0x200001fc
 800023c:	0800eddc 	.word	0x0800eddc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <start_pwm1>:
 *      Author: raing
 */
#include "main.h"

void start_pwm1(int onTimemSec)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    TIM2->CCR1 = onTimemSec * 4 / 10;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <start_pwm1+0x30>)
 80005fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000602:	1092      	asrs	r2, r2, #2
 8000604:	17db      	asrs	r3, r3, #31
 8000606:	1ad2      	subs	r2, r2, r3
 8000608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800060e:	2100      	movs	r1, #0
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <start_pwm1+0x34>)
 8000612:	f008 fb1f 	bl	8008c54 <HAL_TIM_PWM_Start>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	66666667 	.word	0x66666667
 8000624:	20000f0c 	.word	0x20000f0c

08000628 <start_pwm2>:
{
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
}

void start_pwm2(int PercentOn)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    TIM1->CCR4 = PercentOn;
 8000630:	4a05      	ldr	r2, [pc, #20]	; (8000648 <start_pwm2+0x20>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000636:	210c      	movs	r1, #12
 8000638:	4804      	ldr	r0, [pc, #16]	; (800064c <start_pwm2+0x24>)
 800063a:	f008 fb0b 	bl	8008c54 <HAL_TIM_PWM_Start>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010000 	.word	0x40010000
 800064c:	20000e68 	.word	0x20000e68

08000650 <CheckButton>:
uint32_t ButtonPressCycleStart = 0;
uint32_t ButtonPressDurationmSec[5] = {0};
uint8_t ButtonCycle = 0;

void CheckButton(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af02      	add	r7, sp, #8
	PA0PinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000656:	2101      	movs	r1, #1
 8000658:	487d      	ldr	r0, [pc, #500]	; (8000850 <CheckButton+0x200>)
 800065a:	f004 f9b1 	bl	80049c0 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b7c      	ldr	r3, [pc, #496]	; (8000854 <CheckButton+0x204>)
 8000664:	701a      	strb	r2, [r3, #0]
	if (PA0PinState == GPIO_PIN_RESET)
 8000666:	4b7b      	ldr	r3, [pc, #492]	; (8000854 <CheckButton+0x204>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d108      	bne.n	8000680 <CheckButton+0x30>
	{
		SetRGB(0, 250, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	21fa      	movs	r1, #250	; 0xfa
 8000672:	2000      	movs	r0, #0
 8000674:	f000 fa34 	bl	8000ae0 <SetRGB>
		ButtonIsLow = true;
 8000678:	4b77      	ldr	r3, [pc, #476]	; (8000858 <CheckButton+0x208>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
		if (ButtonCycle == 0)
		{
			ButtonPressCycleStart = HAL_GetTick();
		}
	}
}
 800067e:	e0df      	b.n	8000840 <CheckButton+0x1f0>
		if (ButtonIsLow)
 8000680:	4b75      	ldr	r3, [pc, #468]	; (8000858 <CheckButton+0x208>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d044      	beq.n	8000712 <CheckButton+0xc2>
			if (ButtonCycle < 5)
 8000688:	4b74      	ldr	r3, [pc, #464]	; (800085c <CheckButton+0x20c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d818      	bhi.n	80006c2 <CheckButton+0x72>
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 8000690:	f002 fe56 	bl	8003340 <HAL_GetTick>
 8000694:	4602      	mov	r2, r0
						- ButtonPressStart) / 100) * 100;
 8000696:	4b72      	ldr	r3, [pc, #456]	; (8000860 <CheckButton+0x210>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	4a71      	ldr	r2, [pc, #452]	; (8000864 <CheckButton+0x214>)
 800069e:	fba2 2303 	umull	r2, r3, r2, r3
 80006a2:	095b      	lsrs	r3, r3, #5
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006a4:	4a6d      	ldr	r2, [pc, #436]	; (800085c <CheckButton+0x20c>)
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	4611      	mov	r1, r2
						- ButtonPressStart) / 100) * 100;
 80006aa:	2264      	movs	r2, #100	; 0x64
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
				ButtonPressDurationmSec[ButtonCycle] = ((HAL_GetTick()
 80006b0:	4a6d      	ldr	r2, [pc, #436]	; (8000868 <CheckButton+0x218>)
 80006b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				ButtonCycle++;
 80006b6:	4b69      	ldr	r3, [pc, #420]	; (800085c <CheckButton+0x20c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b67      	ldr	r3, [pc, #412]	; (800085c <CheckButton+0x20c>)
 80006c0:	701a      	strb	r2, [r3, #0]
			if (ButtonCycle >= 5)
 80006c2:	4b66      	ldr	r3, [pc, #408]	; (800085c <CheckButton+0x20c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d907      	bls.n	80006da <CheckButton+0x8a>
				ButtonCycle = 0;
 80006ca:	4b64      	ldr	r3, [pc, #400]	; (800085c <CheckButton+0x20c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
				memset(ButtonPressDurationmSec, 0, 20);
 80006d0:	2214      	movs	r2, #20
 80006d2:	2100      	movs	r1, #0
 80006d4:	4864      	ldr	r0, [pc, #400]	; (8000868 <CheckButton+0x218>)
 80006d6:	f00a ff09 	bl	800b4ec <memset>
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 80006da:	f002 f8cd 	bl	8002878 <CurrentTime>
 80006de:	ec55 4b10 	vmov	r4, r5, d0
					CurrentTime(), (HAL_GetTick() - ButtonPressStart) / 1000.0);
 80006e2:	f002 fe2d 	bl	8003340 <HAL_GetTick>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4b5d      	ldr	r3, [pc, #372]	; (8000860 <CheckButton+0x210>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	1ad3      	subs	r3, r2, r3
			sprintf(USBTXArray, "%6.3f, Button press duration: %6.3f\r\n",
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006f6:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8000848 <CheckButton+0x1f8>
 80006fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006fe:	ed8d 7b00 	vstr	d7, [sp]
 8000702:	4622      	mov	r2, r4
 8000704:	462b      	mov	r3, r5
 8000706:	4959      	ldr	r1, [pc, #356]	; (800086c <CheckButton+0x21c>)
 8000708:	4859      	ldr	r0, [pc, #356]	; (8000870 <CheckButton+0x220>)
 800070a:	f00b fd0f 	bl	800c12c <siprintf>
			SendToScreen();
 800070e:	f001 facb 	bl	8001ca8 <SendToScreen>
		if (HAL_GetTick() - ButtonPressCycleStart > 3000)
 8000712:	f002 fe15 	bl	8003340 <HAL_GetTick>
 8000716:	4602      	mov	r2, r0
 8000718:	4b56      	ldr	r3, [pc, #344]	; (8000874 <CheckButton+0x224>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000722:	4293      	cmp	r3, r2
 8000724:	d973      	bls.n	800080e <CheckButton+0x1be>
			if (ButtonPressDurationmSec[0] >= 2000)
 8000726:	4b50      	ldr	r3, [pc, #320]	; (8000868 <CheckButton+0x218>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800072e:	d30c      	bcc.n	800074a <CheckButton+0xfa>
				sprintf(USBTXArray, "%6.3f, Do this\r\n", CurrentTime());
 8000730:	f002 f8a2 	bl	8002878 <CurrentTime>
 8000734:	ec54 3b10 	vmov	r3, r4, d0
 8000738:	461a      	mov	r2, r3
 800073a:	4623      	mov	r3, r4
 800073c:	494e      	ldr	r1, [pc, #312]	; (8000878 <CheckButton+0x228>)
 800073e:	484c      	ldr	r0, [pc, #304]	; (8000870 <CheckButton+0x220>)
 8000740:	f00b fcf4 	bl	800c12c <siprintf>
				SendToScreen();
 8000744:	f001 fab0 	bl	8001ca8 <SendToScreen>
 8000748:	e059      	b.n	80007fe <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 800074a:	4b47      	ldr	r3, [pc, #284]	; (8000868 <CheckButton+0x218>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000752:	d311      	bcc.n	8000778 <CheckButton+0x128>
					&& (ButtonPressDurationmSec[1] >= 1000))
 8000754:	4b44      	ldr	r3, [pc, #272]	; (8000868 <CheckButton+0x218>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800075c:	d30c      	bcc.n	8000778 <CheckButton+0x128>
				sprintf(USBTXArray, "%6.3f, Do that\r\n", CurrentTime());
 800075e:	f002 f88b 	bl	8002878 <CurrentTime>
 8000762:	ec54 3b10 	vmov	r3, r4, d0
 8000766:	461a      	mov	r2, r3
 8000768:	4623      	mov	r3, r4
 800076a:	4944      	ldr	r1, [pc, #272]	; (800087c <CheckButton+0x22c>)
 800076c:	4840      	ldr	r0, [pc, #256]	; (8000870 <CheckButton+0x220>)
 800076e:	f00b fcdd 	bl	800c12c <siprintf>
				SendToScreen();
 8000772:	f001 fa99 	bl	8001ca8 <SendToScreen>
			{
 8000776:	e042      	b.n	80007fe <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 1000)
 8000778:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <CheckButton+0x218>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000780:	d310      	bcc.n	80007a4 <CheckButton+0x154>
					&& (ButtonPressDurationmSec[1] == 0))
 8000782:	4b39      	ldr	r3, [pc, #228]	; (8000868 <CheckButton+0x218>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d10c      	bne.n	80007a4 <CheckButton+0x154>
				sprintf(USBTXArray, "%6.3f, Do that Single Press\r\n",
 800078a:	f002 f875 	bl	8002878 <CurrentTime>
 800078e:	ec54 3b10 	vmov	r3, r4, d0
 8000792:	461a      	mov	r2, r3
 8000794:	4623      	mov	r3, r4
 8000796:	493a      	ldr	r1, [pc, #232]	; (8000880 <CheckButton+0x230>)
 8000798:	4835      	ldr	r0, [pc, #212]	; (8000870 <CheckButton+0x220>)
 800079a:	f00b fcc7 	bl	800c12c <siprintf>
				SendToScreen();
 800079e:	f001 fa83 	bl	8001ca8 <SendToScreen>
			{
 80007a2:	e02c      	b.n	80007fe <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 500)
 80007a4:	4b30      	ldr	r3, [pc, #192]	; (8000868 <CheckButton+0x218>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007ac:	d311      	bcc.n	80007d2 <CheckButton+0x182>
					&& (ButtonPressDurationmSec[1] >= 1000))
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <CheckButton+0x218>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007b6:	d30c      	bcc.n	80007d2 <CheckButton+0x182>
				sprintf(USBTXArray, "%6.3f, Or maybe this\r\n", CurrentTime());
 80007b8:	f002 f85e 	bl	8002878 <CurrentTime>
 80007bc:	ec54 3b10 	vmov	r3, r4, d0
 80007c0:	461a      	mov	r2, r3
 80007c2:	4623      	mov	r3, r4
 80007c4:	492f      	ldr	r1, [pc, #188]	; (8000884 <CheckButton+0x234>)
 80007c6:	482a      	ldr	r0, [pc, #168]	; (8000870 <CheckButton+0x220>)
 80007c8:	f00b fcb0 	bl	800c12c <siprintf>
				SendToScreen();
 80007cc:	f001 fa6c 	bl	8001ca8 <SendToScreen>
			{
 80007d0:	e015      	b.n	80007fe <CheckButton+0x1ae>
			else if ((ButtonPressDurationmSec[0] >= 500)
 80007d2:	4b25      	ldr	r3, [pc, #148]	; (8000868 <CheckButton+0x218>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007da:	d310      	bcc.n	80007fe <CheckButton+0x1ae>
					&& (ButtonPressDurationmSec[1] >= 500))
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <CheckButton+0x218>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007e4:	d30b      	bcc.n	80007fe <CheckButton+0x1ae>
				sprintf(USBTXArray, "%6.3f, Or maybe that\r\n", CurrentTime());
 80007e6:	f002 f847 	bl	8002878 <CurrentTime>
 80007ea:	ec54 3b10 	vmov	r3, r4, d0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4623      	mov	r3, r4
 80007f2:	4925      	ldr	r1, [pc, #148]	; (8000888 <CheckButton+0x238>)
 80007f4:	481e      	ldr	r0, [pc, #120]	; (8000870 <CheckButton+0x220>)
 80007f6:	f00b fc99 	bl	800c12c <siprintf>
				SendToScreen();
 80007fa:	f001 fa55 	bl	8001ca8 <SendToScreen>
			ButtonCycle = 0;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <CheckButton+0x20c>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
			memset(ButtonPressDurationmSec, 0, 20);
 8000804:	2214      	movs	r2, #20
 8000806:	2100      	movs	r1, #0
 8000808:	4817      	ldr	r0, [pc, #92]	; (8000868 <CheckButton+0x218>)
 800080a:	f00a fe6f 	bl	800b4ec <memset>
		SetRGB(250, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	20fa      	movs	r0, #250	; 0xfa
 8000814:	f000 f964 	bl	8000ae0 <SetRGB>
		ButtonIsHigh = true;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <CheckButton+0x23c>)
 800081a:	2201      	movs	r2, #1
 800081c:	701a      	strb	r2, [r3, #0]
		ButtonIsLow = false;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <CheckButton+0x208>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
		ButtonPressStart = HAL_GetTick();
 8000824:	f002 fd8c 	bl	8003340 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <CheckButton+0x210>)
 800082c:	601a      	str	r2, [r3, #0]
		if (ButtonCycle == 0)
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <CheckButton+0x20c>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <CheckButton+0x1f0>
			ButtonPressCycleStart = HAL_GetTick();
 8000836:	f002 fd83 	bl	8003340 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <CheckButton+0x224>)
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bdb0      	pop	{r4, r5, r7, pc}
 8000846:	bf00      	nop
 8000848:	00000000 	.word	0x00000000
 800084c:	408f4000 	.word	0x408f4000
 8000850:	40020000 	.word	0x40020000
 8000854:	20000b58 	.word	0x20000b58
 8000858:	20000215 	.word	0x20000215
 800085c:	20000234 	.word	0x20000234
 8000860:	20000218 	.word	0x20000218
 8000864:	51eb851f 	.word	0x51eb851f
 8000868:	20000220 	.word	0x20000220
 800086c:	0800edf8 	.word	0x0800edf8
 8000870:	20000714 	.word	0x20000714
 8000874:	2000021c 	.word	0x2000021c
 8000878:	0800ee20 	.word	0x0800ee20
 800087c:	0800ee34 	.word	0x0800ee34
 8000880:	0800ee48 	.word	0x0800ee48
 8000884:	0800ee68 	.word	0x0800ee68
 8000888:	0800ee80 	.word	0x0800ee80
 800088c:	20000214 	.word	0x20000214

08000890 <QSPI_Init>:
  * @brief  QSPI Init
  * @param  None
  * @retval HAL_ERROR or HAL_OK
  */
uint8_t QSPI_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&hqspi) != HAL_OK)
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <QSPI_Init+0x1c>)
 8000896:	f000 f855 	bl	8000944 <QSPI_DummyCyclesCfg>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <QSPI_Init+0x14>
  {
    return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e000      	b.n	80008a6 <QSPI_Init+0x16>
  }
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000fec 	.word	0x20000fec

080008b0 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_WriteEnable(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0
  QSPI_CommandTypeDef s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.Instruction = WRITE_ENABLE_CMD; // ok
 80008bc:	2306      	movs	r3, #6
 80008be:	61bb      	str	r3, [r7, #24]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DataMode = QSPI_DATA_NONE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DummyCycles = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008d8:	2300      	movs	r3, #0
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008dc:	f107 0318 	add.w	r3, r7, #24
 80008e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80008e4:	4619      	mov	r1, r3
 80008e6:	4816      	ldr	r0, [pc, #88]	; (8000940 <QSPI_WriteEnable+0x90>)
 80008e8:	f005 fb5a 	bl	8005fa0 <HAL_QSPI_Command>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <QSPI_WriteEnable+0x46>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e01f      	b.n	8000936 <QSPI_WriteEnable+0x86>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match = QSPI_SR_WREN;
 80008f6:	2302      	movs	r3, #2
 80008f8:	603b      	str	r3, [r7, #0]
  s_config.Mask = QSPI_SR_WREN;
 80008fa:	2302      	movs	r3, #2
 80008fc:	607b      	str	r3, [r7, #4]
  s_config.MatchMode = QSPI_MATCH_MODE_AND;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  s_config.StatusBytesSize = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	60fb      	str	r3, [r7, #12]
  s_config.Interval = 1;
 8000906:	2301      	movs	r3, #1
 8000908:	60bb      	str	r3, [r7, #8]
  s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800090a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090e:	617b      	str	r3, [r7, #20]

  s_command.Instruction = READ_STATUS_REG_CMD;
 8000910:	2305      	movs	r3, #5
 8000912:	61bb      	str	r3, [r7, #24]
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800091a:	463a      	mov	r2, r7
 800091c:	f107 0118 	add.w	r1, r7, #24
 8000920:	f241 3388 	movw	r3, #5000	; 0x1388
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <QSPI_WriteEnable+0x90>)
 8000926:	f005 fcc8 	bl	80062ba <HAL_QSPI_AutoPolling>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <QSPI_WriteEnable+0x84>
  {
    return HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	e000      	b.n	8000936 <QSPI_WriteEnable+0x86>
  }

  return HAL_OK;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3750      	adds	r7, #80	; 0x50
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000fec 	.word	0x20000fec

08000944 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint8_t reg[2];

  /* Initialize the reading of status register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE; //QSPI_INSTRUCTION_4_LINES;
 800094c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_STATUS_REG_CMD;
 8000952:	2305      	movs	r3, #5
 8000954:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE; // QSPI_DATA_4_LINES;
 800095e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000970:	2300      	movs	r3, #0
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000974:	2300      	movs	r3, #0
 8000976:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000980:	4619      	mov	r1, r3
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f005 fb0c 	bl	8005fa0 <HAL_QSPI_Command>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <QSPI_DummyCyclesCfg+0x4e>
  {
    return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e08f      	b.n	8000ab2 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	f241 3288 	movw	r2, #5000	; 0x1388
 800099a:	4619      	mov	r1, r3
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f005 fbef 	bl	8006180 <HAL_QSPI_Receive>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <QSPI_DummyCyclesCfg+0x68>
  {
    return HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e082      	b.n	8000ab2 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Initialize the reading of configuration register */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80009ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = READ_CFG_REG_CMD;
 80009b2:	2315      	movs	r3, #21
 80009b4:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 80009be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009d0:	2300      	movs	r3, #0
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009d4:	2300      	movs	r3, #0
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80009e0:	4619      	mov	r1, r3
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f005 fadc 	bl	8005fa0 <HAL_QSPI_Command>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <QSPI_DummyCyclesCfg+0xae>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e05f      	b.n	8000ab2 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	3301      	adds	r3, #1
 80009f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009fc:	4619      	mov	r1, r3
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f005 fbbe 	bl	8006180 <HAL_QSPI_Receive>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <QSPI_DummyCyclesCfg+0xca>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e051      	b.n	8000ab2 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable() != HAL_OK)
 8000a0e:	f7ff ff4f 	bl	80008b0 <QSPI_WriteEnable>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <QSPI_DummyCyclesCfg+0xd8>
  {
    return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e04a      	b.n	8000ab2 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Update the configuration register with new dummy cycles */
  s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8000a22:	2301      	movs	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
  s_command.AddressMode = QSPI_ADDRESS_NONE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode = QSPI_DATA_1_LINE;
 8000a2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a32:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a40:	2300      	movs	r3, #0
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a44:	2300      	movs	r3, #0
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44

  /* QSPI_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
  //  MODIFY_REG( reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(QSPI_CR_NB_DUMMY)));
  MODIFY_REG(reg[1], QSPI_CR_NB_DUMMY, (QSPI_DUMMY_CYCLES_READ << POSITION_VAL(QSPI_CR_NB_DUMMY)));
 8000a48:	7b7b      	ldrb	r3, [r7, #13]
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a50:	b25a      	sxtb	r2, r3
 8000a52:	23c0      	movs	r3, #192	; 0xc0
 8000a54:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a58:	fa93 f3a3 	rbit	r3, r3
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a60:	fab3 f383 	clz	r3, r3
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	2308      	movs	r3, #8
 8000a6a:	408b      	lsls	r3, r1
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b25b      	sxtb	r3, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	737b      	strb	r3, [r7, #13]

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a76:	f107 0310 	add.w	r3, r7, #16
 8000a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a7e:	4619      	mov	r1, r3
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f005 fa8d 	bl	8005fa0 <HAL_QSPI_Command>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <QSPI_DummyCyclesCfg+0x14c>
  {
    return HAL_ERROR;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e010      	b.n	8000ab2 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a98:	4619      	mov	r1, r3
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f005 fade 	bl	800605c <HAL_QSPI_Transmit>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <QSPI_DummyCyclesCfg+0x166>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e003      	b.n	8000ab2 <QSPI_DummyCyclesCfg+0x16e>
  }

  /* 40ms  Write Status/Configuration Register Cycle Time */
  HAL_Delay(40);
 8000aaa:	2028      	movs	r0, #40	; 0x28
 8000aac:	f002 fc54 	bl	8003358 <HAL_Delay>

  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3750      	adds	r7, #80	; 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <led_init>:
 */

#include "main.h"

void led_init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //Red LED
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	4806      	ldr	r0, [pc, #24]	; (8000adc <led_init+0x20>)
 8000ac4:	f008 f8c6 	bl	8008c54 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Green LED
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <led_init+0x20>)
 8000acc:	f008 f8c2 	bl	8008c54 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //Blue LED
 8000ad0:	210c      	movs	r1, #12
 8000ad2:	4802      	ldr	r0, [pc, #8]	; (8000adc <led_init+0x20>)
 8000ad4:	f008 f8be 	bl	8008c54 <HAL_TIM_PWM_Start>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000bd8 	.word	0x20000bd8

08000ae0 <SetRGB>:
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4); //Blue LED
}

// Input: 0 to 250
void SetRGB(int Red, int Green, int Blue)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	//  SetRGB(250, 0, 0); // Red
	//  SetRGB(0, 250, 0); // Green
	//  SetRGB(0, 0, 250); // Blue
	//  SetRGB(250, 250, 0);// Yellow
	TIM4->CCR2 = Red * 8000 / 250;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <SetRGB+0x68>)
 8000af8:	fb82 1203 	smull	r1, r2, r2, r3
 8000afc:	1112      	asrs	r2, r2, #4
 8000afe:	17db      	asrs	r3, r3, #31
 8000b00:	1ad2      	subs	r2, r2, r3
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <SetRGB+0x6c>)
 8000b04:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR1 = Green * 8000 / 250;
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b0c:	fb02 f303 	mul.w	r3, r2, r3
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <SetRGB+0x68>)
 8000b12:	fb82 1203 	smull	r1, r2, r2, r3
 8000b16:	1112      	asrs	r2, r2, #4
 8000b18:	17db      	asrs	r3, r3, #31
 8000b1a:	1ad2      	subs	r2, r2, r3
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <SetRGB+0x6c>)
 8000b1e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR4 = Blue * 8000 / 250;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b26:	fb02 f303 	mul.w	r3, r2, r3
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <SetRGB+0x68>)
 8000b2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b30:	1112      	asrs	r2, r2, #4
 8000b32:	17db      	asrs	r3, r3, #31
 8000b34:	1ad2      	subs	r2, r2, r3
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SetRGB+0x6c>)
 8000b38:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	10624dd3 	.word	0x10624dd3
 8000b4c:	40000800 	.word	0x40000800

08000b50 <bno055_init>:
 *  make sure your changes will not
 *  affect the reference value of the parameter
 *  (Better case don't change the reference value of the parameter)
 */
BNO055_RETURN_FUNCTION_TYPE bno055_init(struct bno055_t *bno055)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000b58:	23ff      	movs	r3, #255	; 0xff
 8000b5a:	73fb      	strb	r3, [r7, #15]
    u8 data_u8 = BNO055_INIT_VALUE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73bb      	strb	r3, [r7, #14]
    u8 bno055_page_zero_u8 = BNO055_PAGE_ZERO;
 8000b60:	2300      	movs	r3, #0
 8000b62:	737b      	strb	r3, [r7, #13]

    /* Array holding the Software revision id
     */
    u8 a_SW_ID_u8[BNO055_REV_ID_SIZE] = { BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000b64:	2300      	movs	r3, #0
 8000b66:	723b      	strb	r3, [r7, #8]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	727b      	strb	r3, [r7, #9]

    /* stuct parameters are assign to bno055*/
    p_bno055 = bno055;
 8000b6c:	4a58      	ldr	r2, [pc, #352]	; (8000cd0 <bno055_init+0x180>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]

    /* Write the default page as zero*/
    com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000b72:	4b57      	ldr	r3, [pc, #348]	; (8000cd0 <bno055_init+0x180>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68dc      	ldr	r4, [r3, #12]
 8000b78:	4b55      	ldr	r3, [pc, #340]	; (8000cd0 <bno055_init+0x180>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	7a58      	ldrb	r0, [r3, #9]
 8000b7e:	f107 020d 	add.w	r2, r7, #13
 8000b82:	2301      	movs	r3, #1
 8000b84:	2107      	movs	r1, #7
 8000b86:	47a0      	blx	r4
 8000b88:	4603      	mov	r3, r0
 8000b8a:	73fb      	strb	r3, [r7, #15]
                                               &bno055_page_zero_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);

    /* Read the chip id of the sensor from page
     * zero 0x00 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000b8c:	4b50      	ldr	r3, [pc, #320]	; (8000cd0 <bno055_init+0x180>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	691c      	ldr	r4, [r3, #16]
 8000b92:	4b4f      	ldr	r3, [pc, #316]	; (8000cd0 <bno055_init+0x180>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	7a58      	ldrb	r0, [r3, #9]
 8000b98:	f107 020e 	add.w	r2, r7, #14
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	47a0      	blx	r4
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	73fb      	strb	r3, [r7, #15]
                                               BNO055_CHIP_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->chip_id = data_u8;
 8000bae:	4b48      	ldr	r3, [pc, #288]	; (8000cd0 <bno055_init+0x180>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	7bba      	ldrb	r2, [r7, #14]
 8000bb4:	701a      	strb	r2, [r3, #0]

    /* Read the accel revision id from page
     * zero 0x01 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000bb6:	4b46      	ldr	r3, [pc, #280]	; (8000cd0 <bno055_init+0x180>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	691c      	ldr	r4, [r3, #16]
 8000bbc:	4b44      	ldr	r3, [pc, #272]	; (8000cd0 <bno055_init+0x180>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	7a58      	ldrb	r0, [r3, #9]
 8000bc2:	f107 020e 	add.w	r2, r7, #14
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	2101      	movs	r1, #1
 8000bca:	47a0      	blx	r4
 8000bcc:	4603      	mov	r3, r0
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	73fb      	strb	r3, [r7, #15]
                                               BNO055_ACCEL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->accel_rev_id = data_u8;
 8000bd8:	4b3d      	ldr	r3, [pc, #244]	; (8000cd0 <bno055_init+0x180>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	7bba      	ldrb	r2, [r7, #14]
 8000bde:	715a      	strb	r2, [r3, #5]

    /* Read the mag revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000be0:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <bno055_init+0x180>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	691c      	ldr	r4, [r3, #16]
 8000be6:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <bno055_init+0x180>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	7a58      	ldrb	r0, [r3, #9]
 8000bec:	f107 020e 	add.w	r2, r7, #14
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	47a0      	blx	r4
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	73fb      	strb	r3, [r7, #15]
                                               BNO055_MAG_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->mag_rev_id = data_u8;
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <bno055_init+0x180>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	7bba      	ldrb	r2, [r7, #14]
 8000c08:	719a      	strb	r2, [r3, #6]

    /* Read the gyro revision id from page
     * zero 0x02 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <bno055_init+0x180>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	691c      	ldr	r4, [r3, #16]
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <bno055_init+0x180>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	7a58      	ldrb	r0, [r3, #9]
 8000c16:	f107 020e 	add.w	r2, r7, #14
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	47a0      	blx	r4
 8000c20:	4603      	mov	r3, r0
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	4413      	add	r3, r2
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	73fb      	strb	r3, [r7, #15]
                                               BNO055_GYRO_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->gyro_rev_id = data_u8;
 8000c2c:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <bno055_init+0x180>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	7bba      	ldrb	r2, [r7, #14]
 8000c32:	71da      	strb	r2, [r3, #7]

    /* Read the boot loader revision from page
     * zero 0x06 register*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c34:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <bno055_init+0x180>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	691c      	ldr	r4, [r3, #16]
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <bno055_init+0x180>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	7a58      	ldrb	r0, [r3, #9]
 8000c40:	f107 020e 	add.w	r2, r7, #14
 8000c44:	2301      	movs	r3, #1
 8000c46:	2106      	movs	r1, #6
 8000c48:	47a0      	blx	r4
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	4413      	add	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	73fb      	strb	r3, [r7, #15]
                                               BNO055_BL_REV_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->bl_rev_id = data_u8;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <bno055_init+0x180>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	7bba      	ldrb	r2, [r7, #14]
 8000c5c:	721a      	strb	r2, [r3, #8]

    /* Read the software revision id from page
     * zero 0x04 and 0x05 register( 2 bytes of data)*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <bno055_init+0x180>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	691c      	ldr	r4, [r3, #16]
 8000c64:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <bno055_init+0x180>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	7a58      	ldrb	r0, [r3, #9]
 8000c6a:	f107 0208 	add.w	r2, r7, #8
 8000c6e:	2302      	movs	r3, #2
 8000c70:	2104      	movs	r1, #4
 8000c72:	47a0      	blx	r4
 8000c74:	4603      	mov	r3, r0
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	73fb      	strb	r3, [r7, #15]
                                               BNO055_SW_REV_ID_LSB_REG,
                                               a_SW_ID_u8,
                                               BNO055_LSB_MSB_READ_LENGTH);
    a_SW_ID_u8[BNO055_SW_ID_LSB] = BNO055_GET_BITSLICE(a_SW_ID_u8[BNO055_SW_ID_LSB], BNO055_SW_REV_ID_LSB);
 8000c80:	7a3b      	ldrb	r3, [r7, #8]
 8000c82:	723b      	strb	r3, [r7, #8]
    p_bno055->sw_rev_id =
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000c84:	7a7b      	ldrb	r3, [r7, #9]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b299      	uxth	r1, r3
 8000c8c:	7a3b      	ldrb	r3, [r7, #8]
 8000c8e:	b29a      	uxth	r2, r3
    p_bno055->sw_rev_id =
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <bno055_init+0x180>)
 8000c92:	681b      	ldr	r3, [r3, #0]
        (u16)((((u32)((u8)a_SW_ID_u8[BNO055_SW_ID_MSB])) << BNO055_SHIFT_EIGHT_BITS) | (a_SW_ID_u8[BNO055_SW_ID_LSB]));
 8000c94:	430a      	orrs	r2, r1
 8000c96:	b292      	uxth	r2, r2
    p_bno055->sw_rev_id =
 8000c98:	805a      	strh	r2, [r3, #2]

    /* Read the page id from the register 0x07*/
    com_rslt += p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <bno055_init+0x180>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	691c      	ldr	r4, [r3, #16]
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <bno055_init+0x180>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	7a58      	ldrb	r0, [r3, #9]
 8000ca6:	f107 020e 	add.w	r2, r7, #14
 8000caa:	2301      	movs	r3, #1
 8000cac:	2107      	movs	r1, #7
 8000cae:	47a0      	blx	r4
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	73fb      	strb	r3, [r7, #15]
                                               BNO055_PAGE_ID_REG,
                                               &data_u8,
                                               BNO055_GEN_READ_WRITE_LENGTH);
    p_bno055->page_id = data_u8;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <bno055_init+0x180>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	7bba      	ldrb	r2, [r7, #14]
 8000cc2:	711a      	strb	r2, [r3, #4]

    return com_rslt;
 8000cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	20000238 	.word	0x20000238

08000cd4 <bno055_write_register>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_register(u8 addr_u8, u8 *data_u8, u8 len_u8)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	71bb      	strb	r3, [r7, #6]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000ce4:	23ff      	movs	r3, #255	; 0xff
 8000ce6:	73fb      	strb	r3, [r7, #15]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <bno055_write_register+0x48>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <bno055_write_register+0x22>
    {
        return BNO055_E_NULL_PTR;
 8000cf0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000cf4:	e00d      	b.n	8000d12 <bno055_write_register+0x3e>
    }
    else
    {
        /* Write the values of respective given register */
        com_rslt = p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr, addr_u8, data_u8, len_u8);
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <bno055_write_register+0x48>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68dc      	ldr	r4, [r3, #12]
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <bno055_write_register+0x48>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	7a58      	ldrb	r0, [r3, #9]
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	79f9      	ldrb	r1, [r7, #7]
 8000d06:	683a      	ldr	r2, [r7, #0]
 8000d08:	47a0      	blx	r4
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd90      	pop	{r4, r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000238 	.word	0x20000238

08000d20 <bno055_write_page_id>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_write_page_id(u8 page_id_u8)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000d2a:	23ff      	movs	r3, #255	; 0xff
 8000d2c:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <bno055_write_page_id+0x8c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <bno055_write_page_id+0x20>
    {
        return BNO055_E_NULL_PTR;
 8000d3a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000d3e:	e030      	b.n	8000da2 <bno055_write_page_id+0x82>
    }
    else
    {
        /* Read the current page*/
        com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <bno055_write_page_id+0x8c>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	691c      	ldr	r4, [r3, #16]
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <bno055_write_page_id+0x8c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	7a58      	ldrb	r0, [r3, #9]
 8000d4c:	f107 020e 	add.w	r2, r7, #14
 8000d50:	2301      	movs	r3, #1
 8000d52:	2107      	movs	r1, #7
 8000d54:	47a0      	blx	r4
 8000d56:	4603      	mov	r3, r0
 8000d58:	73fb      	strb	r3, [r7, #15]
                                                  BNO055_PAGE_ID_REG,
                                                  &data_u8r,
                                                  BNO055_GEN_READ_WRITE_LENGTH);

        /* Check condition for communication BNO055_SUCCESS*/
        if (com_rslt == BNO055_SUCCESS)
 8000d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d11b      	bne.n	8000d9a <bno055_write_page_id+0x7a>
        {
            data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_PAGE_ID, page_id_u8);
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	73bb      	strb	r3, [r7, #14]

            /* Write the page id*/
            com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <bno055_write_page_id+0x8c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68dc      	ldr	r4, [r3, #12]
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <bno055_write_page_id+0x8c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	7a58      	ldrb	r0, [r3, #9]
 8000d72:	f107 020e 	add.w	r2, r7, #14
 8000d76:	2301      	movs	r3, #1
 8000d78:	2107      	movs	r1, #7
 8000d7a:	47a0      	blx	r4
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
 8000d82:	4413      	add	r3, r2
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73fb      	strb	r3, [r7, #15]
                                                        BNO055_PAGE_ID_REG,
                                                        &data_u8r,
                                                        BNO055_GEN_READ_WRITE_LENGTH);
            if (com_rslt == BNO055_SUCCESS)
 8000d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d106      	bne.n	8000d9e <bno055_write_page_id+0x7e>
            {
                p_bno055->page_id = page_id_u8;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <bno055_write_page_id+0x8c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	711a      	strb	r2, [r3, #4]
 8000d98:	e001      	b.n	8000d9e <bno055_write_page_id+0x7e>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000d9a:	23ff      	movs	r3, #255	; 0xff
 8000d9c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000238 	.word	0x20000238

08000db0 <bno055_read_mag_xyz>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_mag_xyz(struct bno055_mag_t *mag)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000db8:	23ff      	movs	r3, #255	; 0xff
 8000dba:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] - y->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] - z->MSB
     * data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] - z->MSB
     */
    u8 data_u8[BNO055_MAG_XYZ_DATA_SIZE] = {
 8000dbc:	f107 0308 	add.w	r3, r7, #8
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000dc6:	23ff      	movs	r3, #255	; 0xff
 8000dc8:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <bno055_read_mag_xyz+0xd0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d102      	bne.n	8000dd8 <bno055_read_mag_xyz+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000dd2:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000dd6:	e04e      	b.n	8000e76 <bno055_read_mag_xyz+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <bno055_read_mag_xyz+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <bno055_read_mag_xyz+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff ff9c 	bl	8000d20 <bno055_write_page_id>
 8000de8:	4603      	mov	r3, r0
 8000dea:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <bno055_read_mag_xyz+0x4e>
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <bno055_read_mag_xyz+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d137      	bne.n	8000e6e <bno055_read_mag_xyz+0xbe>
        {
            /*Read the six byte value of mag xyz*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <bno055_read_mag_xyz+0xd0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	691c      	ldr	r4, [r3, #16]
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <bno055_read_mag_xyz+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	7a58      	ldrb	r0, [r3, #9]
 8000e0a:	f107 0208 	add.w	r2, r7, #8
 8000e0e:	2306      	movs	r3, #6
 8000e10:	210e      	movs	r1, #14
 8000e12:	47a0      	blx	r4
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_MAG_DATA_X_LSB_VALUEX_REG,
                                                      data_u8,
                                                      BNO055_MAG_XYZ_DATA_SIZE);

            /* Data X*/
            data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB],
 8000e18:	7a3b      	ldrb	r3, [r7, #8]
 8000e1a:	723b      	strb	r3, [r7, #8]
                                                                        BNO055_MAG_DATA_X_LSB_VALUEX);
            data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB],
 8000e1c:	7a7b      	ldrb	r3, [r7, #9]
 8000e1e:	727b      	strb	r3, [r7, #9]
                                                                        BNO055_MAG_DATA_X_MSB_VALUEX);
            mag->x =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e20:	7a7b      	ldrb	r3, [r7, #9]
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_X_LSB]));
 8000e28:	7a3b      	ldrb	r3, [r7, #8]
 8000e2a:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_X_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b21a      	sxth	r2, r3
            mag->x =
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	801a      	strh	r2, [r3, #0]

            /* Data Y*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB],
 8000e34:	7abb      	ldrb	r3, [r7, #10]
 8000e36:	72bb      	strb	r3, [r7, #10]
                                                                        BNO055_MAG_DATA_Y_LSB_VALUEY);
            data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB],
 8000e38:	7afb      	ldrb	r3, [r7, #11]
 8000e3a:	72fb      	strb	r3, [r7, #11]
                                                                        BNO055_MAG_DATA_Y_MSB_VALUEY);
            mag->y =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e3c:	7afb      	ldrb	r3, [r7, #11]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	021b      	lsls	r3, r3, #8
 8000e42:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Y_LSB]));
 8000e44:	7abb      	ldrb	r3, [r7, #10]
 8000e46:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Y_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b21a      	sxth	r2, r3
            mag->y =
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	805a      	strh	r2, [r3, #2]

            /* Data Z*/
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB],
 8000e50:	7b3b      	ldrb	r3, [r7, #12]
 8000e52:	733b      	strb	r3, [r7, #12]
                                                                        BNO055_MAG_DATA_Z_LSB_VALUEZ);
            data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB] = BNO055_GET_BITSLICE(data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB],
 8000e54:	7b7b      	ldrb	r3, [r7, #13]
 8000e56:	737b      	strb	r3, [r7, #13]
                                                                        BNO055_MAG_DATA_Z_MSB_VALUEZ);
            mag->z =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e58:	7b7b      	ldrb	r3, [r7, #13]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_XYZ_Z_LSB]));
 8000e60:	7b3b      	ldrb	r3, [r7, #12]
 8000e62:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_XYZ_Z_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b21a      	sxth	r2, r3
            mag->z =
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	809a      	strh	r2, [r3, #4]
 8000e6c:	e001      	b.n	8000e72 <bno055_read_mag_xyz+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000e6e:	23ff      	movs	r3, #255	; 0xff
 8000e70:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000238 	.word	0x20000238

08000e84 <bno055_read_euler_hrp>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_read_euler_hrp(struct bno055_euler_t *euler)
{
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000e8c:	23ff      	movs	r3, #255	; 0xff
 8000e8e:	73fb      	strb	r3, [r7, #15]
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] - r->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] - p->MSB
     * data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] - p->MSB
     */
    u8 data_u8[BNO055_EULER_HRP_DATA_SIZE] = {
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	809a      	strh	r2, [r3, #4]
        BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE
    };
    s8 stat_s8 = BNO055_ERROR;
 8000e9a:	23ff      	movs	r3, #255	; 0xff
 8000e9c:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <bno055_read_euler_hrp+0xd0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d102      	bne.n	8000eac <bno055_read_euler_hrp+0x28>
    {
        return BNO055_E_NULL_PTR;
 8000ea6:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8000eaa:	e04e      	b.n	8000f4a <bno055_read_euler_hrp+0xc6>
    }
    else
    {
        /*condition check for page, chip id is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <bno055_read_euler_hrp+0xd0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	791b      	ldrb	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d004      	beq.n	8000ec0 <bno055_read_euler_hrp+0x3c>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff32 	bl	8000d20 <bno055_write_page_id>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 8000ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <bno055_read_euler_hrp+0x4e>
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <bno055_read_euler_hrp+0xd0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d137      	bne.n	8000f42 <bno055_read_euler_hrp+0xbe>
        {
            /* Read the six byte of Euler hrp data*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <bno055_read_euler_hrp+0xd0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	691c      	ldr	r4, [r3, #16]
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <bno055_read_euler_hrp+0xd0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	7a58      	ldrb	r0, [r3, #9]
 8000ede:	f107 0208 	add.w	r2, r7, #8
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	211a      	movs	r1, #26
 8000ee6:	47a0      	blx	r4
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_H_LSB_VALUEH_REG,
                                                      data_u8,
                                                      BNO055_EULER_HRP_DATA_SIZE);

            /* Data h*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB] = BNO055_GET_BITSLICE(
 8000eec:	7a3b      	ldrb	r3, [r7, #8]
 8000eee:	723b      	strb	r3, [r7, #8]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB],
                BNO055_EULER_H_LSB_VALUEH);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB] = BNO055_GET_BITSLICE(
 8000ef0:	7a7b      	ldrb	r3, [r7, #9]
 8000ef2:	727b      	strb	r3, [r7, #9]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB],
                BNO055_EULER_H_MSB_VALUEH);
            euler->h =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000ef4:	7a7b      	ldrb	r3, [r7, #9]
 8000ef6:	b25b      	sxtb	r3, r3
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_LSB]));
 8000efc:	7a3b      	ldrb	r3, [r7, #8]
 8000efe:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_H_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b21a      	sxth	r2, r3
            euler->h =
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	801a      	strh	r2, [r3, #0]

            /* Data r*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB] = BNO055_GET_BITSLICE(
 8000f08:	7abb      	ldrb	r3, [r7, #10]
 8000f0a:	72bb      	strb	r3, [r7, #10]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB],
                BNO055_EULER_R_LSB_VALUER);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB] = BNO055_GET_BITSLICE(
 8000f0c:	7afb      	ldrb	r3, [r7, #11]
 8000f0e:	72fb      	strb	r3, [r7, #11]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB],
                BNO055_EULER_R_MSB_VALUER);
            euler->r =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f10:	7afb      	ldrb	r3, [r7, #11]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_LSB]));
 8000f18:	7abb      	ldrb	r3, [r7, #10]
 8000f1a:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_R_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21a      	sxth	r2, r3
            euler->r =
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	805a      	strh	r2, [r3, #2]

            /* Data p*/
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB] = BNO055_GET_BITSLICE(
 8000f24:	7b3b      	ldrb	r3, [r7, #12]
 8000f26:	733b      	strb	r3, [r7, #12]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB],
                BNO055_EULER_P_LSB_VALUEP);
            data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB] = BNO055_GET_BITSLICE(
 8000f28:	7b7b      	ldrb	r3, [r7, #13]
 8000f2a:	737b      	strb	r3, [r7, #13]
                data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB],
                BNO055_EULER_P_MSB_VALUEP);
            euler->p =
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f2c:	7b7b      	ldrb	r3, [r7, #13]
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
                      (data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_LSB]));
 8000f34:	7b3b      	ldrb	r3, [r7, #12]
 8000f36:	b21b      	sxth	r3, r3
                (s16)((((s32)((s8)data_u8[BNO055_SENSOR_DATA_EULER_HRP_P_MSB])) << BNO055_SHIFT_EIGHT_BITS) |
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21a      	sxth	r2, r3
            euler->p =
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	809a      	strh	r2, [r3, #4]
 8000f40:	e001      	b.n	8000f46 <bno055_read_euler_hrp+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8000f42:	23ff      	movs	r3, #255	; 0xff
 8000f44:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000238 	.word	0x20000238

08000f58 <bno055_convert_double_mag_xyz_uT>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_mag_xyz_uT(struct bno055_mag_double_t *mag_xyz)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000f60:	23ff      	movs	r3, #255	; 0xff
 8000f62:	73fb      	strb	r3, [r7, #15]
    struct bno055_mag_t reg_mag_xyz = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000f64:	2300      	movs	r3, #0
 8000f66:	813b      	strh	r3, [r7, #8]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	817b      	strh	r3, [r7, #10]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	81bb      	strh	r3, [r7, #12]

    /* Read raw mag xyz data */
    com_rslt = bno055_read_mag_xyz(&reg_mag_xyz);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff1b 	bl	8000db0 <bno055_read_mag_xyz>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	73fb      	strb	r3, [r7, #15]
    if (com_rslt == BNO055_SUCCESS)
 8000f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d127      	bne.n	8000fd6 <bno055_convert_double_mag_xyz_uT+0x7e>
    {
        /* Convert raw mag xyz to microTesla*/
        mag_xyz->x = (double)(reg_mag_xyz.x / BNO055_MAG_DIV_UT);
 8000f86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000f92:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000f96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	ed83 7b00 	vstr	d7, [r3]
        mag_xyz->y = (double)(reg_mag_xyz.y / BNO055_MAG_DIV_UT);
 8000fa0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fa4:	ee07 3a90 	vmov	s15, r3
 8000fa8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fac:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000fb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	ed83 7b02 	vstr	d7, [r3, #8]
        mag_xyz->z = (double)(reg_mag_xyz.z / BNO055_MAG_DIV_UT);
 8000fba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fbe:	ee07 3a90 	vmov	s15, r3
 8000fc2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000fc6:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8000fca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed83 7b04 	vstr	d7, [r3, #16]
 8000fd4:	e001      	b.n	8000fda <bno055_convert_double_mag_xyz_uT+0x82>
    }
    else
    {
        com_rslt = BNO055_ERROR;
 8000fd6:	23ff      	movs	r3, #255	; 0xff
 8000fd8:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <bno055_convert_double_euler_hpr_deg>:
 *  @retval 0 -> BNO055_SUCCESS
 *  @retval 1 -> BNO055_ERROR
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_convert_double_euler_hpr_deg(struct bno055_euler_double_t *euler_hpr)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8000fee:	23ff      	movs	r3, #255	; 0xff
 8000ff0:	75fb      	strb	r3, [r7, #23]
    struct bno055_euler_t reg_euler = { BNO055_INIT_VALUE, BNO055_INIT_VALUE, BNO055_INIT_VALUE };
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	823b      	strh	r3, [r7, #16]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	827b      	strh	r3, [r7, #18]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	82bb      	strh	r3, [r7, #20]
    u8 euler_unit_u8 = BNO055_INIT_VALUE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]

    /* Read the current Euler unit and set the
     * unit as degree if the unit is in radians */
    com_rslt = bno055_get_euler_unit(&euler_unit_u8);
 8001002:	f107 030f 	add.w	r3, r7, #15
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f854 	bl	80010b4 <bno055_get_euler_unit>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
    if (euler_unit_u8 != BNO055_EULER_UNIT_DEG)
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d008      	beq.n	8001028 <bno055_convert_double_euler_hpr_deg+0x42>
    {
        com_rslt += bno055_set_euler_unit(BNO055_EULER_UNIT_DEG);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f890 	bl	800113c <bno055_set_euler_unit>
 800101c:	4603      	mov	r3, r0
 800101e:	b2da      	uxtb	r2, r3
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	4413      	add	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	75fb      	strb	r3, [r7, #23]
    }
    if (com_rslt == BNO055_SUCCESS)
 8001028:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d139      	bne.n	80010a4 <bno055_convert_double_euler_hpr_deg+0xbe>
    {
        /* Read Euler raw h data*/
        com_rslt += bno055_read_euler_hrp(&reg_euler);
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff25 	bl	8000e84 <bno055_read_euler_hrp>
 800103a:	4603      	mov	r3, r0
 800103c:	b2da      	uxtb	r2, r3
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	4413      	add	r3, r2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	75fb      	strb	r3, [r7, #23]
        if (com_rslt == BNO055_SUCCESS)
 8001046:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d127      	bne.n	800109e <bno055_convert_double_euler_hpr_deg+0xb8>
        {
            /* Convert raw Euler hrp to degree*/
            euler_hpr->h = (double)(reg_euler.h / BNO055_EULER_DIV_DEG);
 800104e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800105a:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 800105e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	ed83 7b00 	vstr	d7, [r3]
            euler_hpr->p = (double)(reg_euler.p / BNO055_EULER_DIV_DEG);
 8001068:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001074:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001078:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	ed83 7b04 	vstr	d7, [r3, #16]
            euler_hpr->r = (double)(reg_euler.r / BNO055_EULER_DIV_DEG);
 8001082:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800108e:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8001092:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed83 7b02 	vstr	d7, [r3, #8]
 800109c:	e004      	b.n	80010a8 <bno055_convert_double_euler_hpr_deg+0xc2>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	75fb      	strb	r3, [r7, #23]
 80010a2:	e001      	b.n	80010a8 <bno055_convert_double_euler_hpr_deg+0xc2>
        }
    }
    else
    {
        com_rslt = BNO055_ERROR;
 80010a4:	23ff      	movs	r3, #255	; 0xff
 80010a6:	75fb      	strb	r3, [r7, #23]
    }

    return com_rslt;
 80010a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <bno055_get_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_euler_unit(u8 *euler_unit_u8)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80010bc:	23ff      	movs	r3, #255	; 0xff
 80010be:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 80010c4:	23ff      	movs	r3, #255	; 0xff
 80010c6:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <bno055_get_euler_unit+0x84>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <bno055_get_euler_unit+0x22>
    {
        return BNO055_E_NULL_PTR;
 80010d0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80010d4:	e02c      	b.n	8001130 <bno055_get_euler_unit+0x7c>
    }
    else
    {
        /*condition check for page, Euler unit is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <bno055_get_euler_unit+0x84>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	791b      	ldrb	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <bno055_get_euler_unit+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fe1d 	bl	8000d20 <bno055_write_page_id>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 80010ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d004      	beq.n	80010fc <bno055_get_euler_unit+0x48>
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <bno055_get_euler_unit+0x84>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	791b      	ldrb	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d115      	bne.n	8001128 <bno055_get_euler_unit+0x74>
        {
            /* Read the Euler unit */
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <bno055_get_euler_unit+0x84>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	691c      	ldr	r4, [r3, #16]
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <bno055_get_euler_unit+0x84>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	7a58      	ldrb	r0, [r3, #9]
 8001108:	f107 020d 	add.w	r2, r7, #13
 800110c:	2301      	movs	r3, #1
 800110e:	213b      	movs	r1, #59	; 0x3b
 8001110:	47a0      	blx	r4
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_EULER_UNIT_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *euler_unit_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_EULER_UNIT);
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	109b      	asrs	r3, r3, #2
 800111a:	b2db      	uxtb	r3, r3
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2da      	uxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	e001      	b.n	800112c <bno055_get_euler_unit+0x78>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 800112c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bd90      	pop	{r4, r7, pc}
 8001138:	20000238 	.word	0x20000238

0800113c <bno055_set_euler_unit>:
 *  @retval 1 -> BNO055_ERROR
 *
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_euler_unit(u8 euler_unit_u8)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001146:	23ff      	movs	r3, #255	; 0xff
 8001148:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 800114a:	2300      	movs	r3, #0
 800114c:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800114e:	2300      	movs	r3, #0
 8001150:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 8001152:	23ff      	movs	r3, #255	; 0xff
 8001154:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001156:	4b36      	ldr	r3, [pc, #216]	; (8001230 <bno055_set_euler_unit+0xf4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d102      	bne.n	8001164 <bno055_set_euler_unit+0x28>
    {
        return BNO055_E_NULL_PTR;
 800115e:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001162:	e060      	b.n	8001226 <bno055_set_euler_unit+0xea>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f863 	bl	8001234 <bno055_get_operation_mode>
 800116e:	4603      	mov	r3, r0
 8001170:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 8001172:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d144      	bne.n	8001204 <bno055_set_euler_unit+0xc8>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 800117a:	7b3b      	ldrb	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d008      	beq.n	8001192 <bno055_set_euler_unit+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 8001180:	2000      	movs	r0, #0
 8001182:	f000 f899 	bl	80012b8 <bno055_set_operation_mode>
 8001186:	4603      	mov	r3, r0
 8001188:	b2da      	uxtb	r2, r3
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	4413      	add	r3, r2
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 8001192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d131      	bne.n	80011fe <bno055_set_euler_unit+0xc2>
            {
                /* Write the Euler unit*/
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800119a:	4b25      	ldr	r3, [pc, #148]	; (8001230 <bno055_set_euler_unit+0xf4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691c      	ldr	r4, [r3, #16]
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <bno055_set_euler_unit+0xf4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	7a58      	ldrb	r0, [r3, #9]
 80011a6:	f107 020d 	add.w	r2, r7, #13
 80011aa:	2301      	movs	r3, #1
 80011ac:	213b      	movs	r1, #59	; 0x3b
 80011ae:	47a0      	blx	r4
 80011b0:	4603      	mov	r3, r0
 80011b2:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_EULER_UNIT_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80011b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d125      	bne.n	8001208 <bno055_set_euler_unit+0xcc>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_EULER_UNIT, euler_unit_u8);
 80011bc:	7b7b      	ldrb	r3, [r7, #13]
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	f023 0304 	bic.w	r3, r3, #4
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	b25b      	sxtb	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <bno055_set_euler_unit+0xf4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68dc      	ldr	r4, [r3, #12]
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <bno055_set_euler_unit+0xf4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	7a58      	ldrb	r0, [r3, #9]
 80011e6:	f107 020d 	add.w	r2, r7, #13
 80011ea:	2301      	movs	r3, #1
 80011ec:	213b      	movs	r1, #59	; 0x3b
 80011ee:	47a0      	blx	r4
 80011f0:	4603      	mov	r3, r0
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	4413      	add	r3, r2
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e004      	b.n	8001208 <bno055_set_euler_unit+0xcc>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 80011fe:	23ff      	movs	r3, #255	; 0xff
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e001      	b.n	8001208 <bno055_set_euler_unit+0xcc>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001204:	23ff      	movs	r3, #255	; 0xff
 8001206:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001208:	7b3b      	ldrb	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <bno055_set_euler_unit+0xe6>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 800120e:	7b3b      	ldrb	r3, [r7, #12]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f851 	bl	80012b8 <bno055_set_operation_mode>
 8001216:	4603      	mov	r3, r0
 8001218:	b2da      	uxtb	r2, r3
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	4413      	add	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	bd90      	pop	{r4, r7, pc}
 800122e:	bf00      	nop
 8001230:	20000238 	.word	0x20000238

08001234 <bno055_get_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_get_operation_mode(u8 *operation_mode_u8)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    /* Variable used to return value of
     * communication routine*/
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 800123c:	23ff      	movs	r3, #255	; 0xff
 800123e:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001240:	2300      	movs	r3, #0
 8001242:	737b      	strb	r3, [r7, #13]
    s8 stat_s8 = BNO055_ERROR;
 8001244:	23ff      	movs	r3, #255	; 0xff
 8001246:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001248:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <bno055_get_operation_mode+0x80>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <bno055_get_operation_mode+0x22>
    {
        return BNO055_E_NULL_PTR;
 8001250:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 8001254:	e02a      	b.n	80012ac <bno055_get_operation_mode+0x78>
    }
    else
    {
        /*condition check for page, operation mode is
         * available in the page zero*/
        if (p_bno055->page_id != BNO055_PAGE_ZERO)
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <bno055_get_operation_mode+0x80>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	791b      	ldrb	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <bno055_get_operation_mode+0x36>
        {
            /* Write the page zero*/
            stat_s8 = bno055_write_page_id(BNO055_PAGE_ZERO);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fd5d 	bl	8000d20 <bno055_write_page_id>
 8001266:	4603      	mov	r3, r0
 8001268:	73bb      	strb	r3, [r7, #14]
        }
        if ((stat_s8 == BNO055_SUCCESS) || (p_bno055->page_id == BNO055_PAGE_ZERO))
 800126a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d004      	beq.n	800127c <bno055_get_operation_mode+0x48>
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <bno055_get_operation_mode+0x80>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d113      	bne.n	80012a4 <bno055_get_operation_mode+0x70>
        {
            /* Read the value of operation mode*/
            com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <bno055_get_operation_mode+0x80>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691c      	ldr	r4, [r3, #16]
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <bno055_get_operation_mode+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7a58      	ldrb	r0, [r3, #9]
 8001288:	f107 020d 	add.w	r2, r7, #13
 800128c:	2301      	movs	r3, #1
 800128e:	213d      	movs	r1, #61	; 0x3d
 8001290:	47a0      	blx	r4
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
                                                      BNO055_OPERATION_MODE_REG,
                                                      &data_u8r,
                                                      BNO055_GEN_READ_WRITE_LENGTH);
            *operation_mode_u8 = BNO055_GET_BITSLICE(data_u8r, BNO055_OPERATION_MODE);
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	b2da      	uxtb	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	701a      	strb	r2, [r3, #0]
 80012a2:	e001      	b.n	80012a8 <bno055_get_operation_mode+0x74>
        }
        else
        {
            com_rslt = BNO055_ERROR;
 80012a4:	23ff      	movs	r3, #255	; 0xff
 80012a6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 80012a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd90      	pop	{r4, r7, pc}
 80012b4:	20000238 	.word	0x20000238

080012b8 <bno055_set_operation_mode>:
 *  becomes zero and it is mainly derived
 *  to configure the various settings of the BNO
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_operation_mode(u8 operation_mode_u8)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 80012c2:	23ff      	movs	r3, #255	; 0xff
 80012c4:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 80012ca:	2300      	movs	r3, #0
 80012cc:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 80012ce:	23ff      	movs	r3, #255	; 0xff
 80012d0:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 80012d2:	4b5c      	ldr	r3, [pc, #368]	; (8001444 <bno055_set_operation_mode+0x18c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d102      	bne.n	80012e0 <bno055_set_operation_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 80012da:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 80012de:	e0ac      	b.n	800143a <bno055_set_operation_mode+0x182>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 80012e0:	f107 030c 	add.w	r3, r7, #12
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffa5 	bl	8001234 <bno055_get_operation_mode>
 80012ea:	4603      	mov	r3, r0
 80012ec:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 80012ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 809d 	bne.w	8001432 <bno055_set_operation_mode+0x17a>
        {
            /* If the previous operation mode is config it is
             * directly write the operation mode */
            if (prev_opmode_u8 == BNO055_OPERATION_MODE_CONFIG)
 80012f8:	7b3b      	ldrb	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d137      	bne.n	800136e <bno055_set_operation_mode+0xb6>
            {
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691c      	ldr	r4, [r3, #16]
 8001304:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	7a58      	ldrb	r0, [r3, #9]
 800130a:	f107 020d 	add.w	r2, r7, #13
 800130e:	2301      	movs	r3, #1
 8001310:	213d      	movs	r1, #61	; 0x3d
 8001312:	47a0      	blx	r4
 8001314:	4603      	mov	r3, r0
 8001316:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 808a 	bne.w	8001436 <bno055_set_operation_mode+0x17e>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 8001322:	7b7b      	ldrb	r3, [r7, #13]
 8001324:	b25b      	sxtb	r3, r3
 8001326:	f023 030f 	bic.w	r3, r3, #15
 800132a:	b25a      	sxtb	r2, r3
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	b25b      	sxtb	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b25b      	sxtb	r3, r3
 800133a:	b2db      	uxtb	r3, r3
 800133c:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 800133e:	4b41      	ldr	r3, [pc, #260]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68dc      	ldr	r4, [r3, #12]
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	7a58      	ldrb	r0, [r3, #9]
 800134a:	f107 020d 	add.w	r2, r7, #13
 800134e:	2301      	movs	r3, #1
 8001350:	213d      	movs	r1, #61	; 0x3d
 8001352:	47a0      	blx	r4
 8001354:	4603      	mov	r3, r0
 8001356:	b2da      	uxtb	r2, r3
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	4413      	add	r3, r2
 800135c:	b2db      	uxtb	r3, r3
 800135e:	73fb      	strb	r3, [r7, #15]
                                                                BNO055_GEN_READ_WRITE_LENGTH);

                    /* Config mode to other
                     * operation mode switching
                     * required delay of 600ms*/
                    p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f44f 7016 	mov.w	r0, #600	; 0x258
 800136a:	4798      	blx	r3
 800136c:	e063      	b.n	8001436 <bno055_set_operation_mode+0x17e>
            else
            {
                /* If the previous operation
                 * mode is not config it is
                 * write the config mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 800136e:	4b35      	ldr	r3, [pc, #212]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691c      	ldr	r4, [r3, #16]
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	7a58      	ldrb	r0, [r3, #9]
 800137a:	f107 020d 	add.w	r2, r7, #13
 800137e:	2301      	movs	r3, #1
 8001380:	213d      	movs	r1, #61	; 0x3d
 8001382:	47a0      	blx	r4
 8001384:	4603      	mov	r3, r0
 8001386:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_OPERATION_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 8001388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d116      	bne.n	80013be <bno055_set_operation_mode+0x106>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, BNO055_OPERATION_MODE_CONFIG);
 8001390:	7b7b      	ldrb	r3, [r7, #13]
 8001392:	f023 030f 	bic.w	r3, r3, #15
 8001396:	b2db      	uxtb	r3, r3
 8001398:	737b      	strb	r3, [r7, #13]
                    com_rslt +=
                        bno055_write_register(BNO055_OPERATION_MODE_REG, &data_u8r, BNO055_GEN_READ_WRITE_LENGTH);
 800139a:	f107 030d 	add.w	r3, r7, #13
 800139e:	2201      	movs	r2, #1
 80013a0:	4619      	mov	r1, r3
 80013a2:	203d      	movs	r0, #61	; 0x3d
 80013a4:	f7ff fc96 	bl	8000cd4 <bno055_write_register>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b2da      	uxtb	r2, r3
                    com_rslt +=
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	4413      	add	r3, r2
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	73fb      	strb	r3, [r7, #15]

                    /* other mode to config mode switching
                     * required delay of 20ms*/
                    p_bno055->delay_msec(BNO055_CONFIG_MODE_SWITCHING_DELAY);
 80013b4:	4b23      	ldr	r3, [pc, #140]	; (8001444 <bno055_set_operation_mode+0x18c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	2014      	movs	r0, #20
 80013bc:	4798      	blx	r3
                }

                /* Write the operation mode */
                if (operation_mode_u8 != BNO055_OPERATION_MODE_CONFIG)
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d038      	beq.n	8001436 <bno055_set_operation_mode+0x17e>
                {
                    com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <bno055_set_operation_mode+0x18c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	691c      	ldr	r4, [r3, #16]
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <bno055_set_operation_mode+0x18c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	7a58      	ldrb	r0, [r3, #9]
 80013d0:	f107 020d 	add.w	r2, r7, #13
 80013d4:	2301      	movs	r3, #1
 80013d6:	213d      	movs	r1, #61	; 0x3d
 80013d8:	47a0      	blx	r4
 80013da:	4603      	mov	r3, r0
 80013dc:	73fb      	strb	r3, [r7, #15]
                                                              BNO055_OPERATION_MODE_REG,
                                                              &data_u8r,
                                                              BNO055_GEN_READ_WRITE_LENGTH);
                    if (com_rslt == BNO055_SUCCESS)
 80013de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d127      	bne.n	8001436 <bno055_set_operation_mode+0x17e>
                    {
                        data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_OPERATION_MODE, operation_mode_u8);
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	f023 030f 	bic.w	r3, r3, #15
 80013ee:	b25a      	sxtb	r2, r3
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	737b      	strb	r3, [r7, #13]
                        com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68dc      	ldr	r4, [r3, #12]
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <bno055_set_operation_mode+0x18c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	7a58      	ldrb	r0, [r3, #9]
 800140e:	f107 020d 	add.w	r2, r7, #13
 8001412:	2301      	movs	r3, #1
 8001414:	213d      	movs	r1, #61	; 0x3d
 8001416:	47a0      	blx	r4
 8001418:	4603      	mov	r3, r0
 800141a:	b2da      	uxtb	r2, r3
 800141c:	7bfb      	ldrb	r3, [r7, #15]
 800141e:	4413      	add	r3, r2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	73fb      	strb	r3, [r7, #15]
                                                                    BNO055_GEN_READ_WRITE_LENGTH);

                        /* Config mode to other
                         * operation mode switching
                         * required delay of 600ms*/
                        p_bno055->delay_msec(BNO055_MODE_SWITCHING_DELAY);
 8001424:	4b07      	ldr	r3, [pc, #28]	; (8001444 <bno055_set_operation_mode+0x18c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800142e:	4798      	blx	r3
 8001430:	e001      	b.n	8001436 <bno055_set_operation_mode+0x17e>
                }
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 8001432:	23ff      	movs	r3, #255	; 0xff
 8001434:	73fb      	strb	r3, [r7, #15]
        }
    }

    return com_rslt;
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	20000238 	.word	0x20000238

08001448 <bno055_set_power_mode>:
 *  @note For detailed about LOWPOWER mode
 *  refer data sheet 3.4.2
 *
 */
BNO055_RETURN_FUNCTION_TYPE bno055_set_power_mode(u8 power_mode_u8)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
    BNO055_RETURN_FUNCTION_TYPE com_rslt = BNO055_ERROR;
 8001452:	23ff      	movs	r3, #255	; 0xff
 8001454:	73fb      	strb	r3, [r7, #15]
    u8 data_u8r = BNO055_INIT_VALUE;
 8001456:	2300      	movs	r3, #0
 8001458:	737b      	strb	r3, [r7, #13]
    u8 prev_opmode_u8 = BNO055_OPERATION_MODE_CONFIG;
 800145a:	2300      	movs	r3, #0
 800145c:	733b      	strb	r3, [r7, #12]
    s8 stat_s8 = BNO055_ERROR;
 800145e:	23ff      	movs	r3, #255	; 0xff
 8001460:	73bb      	strb	r3, [r7, #14]

    /* Check the struct p_bno055 is empty */
    if (p_bno055 == NULL)
 8001462:	4b35      	ldr	r3, [pc, #212]	; (8001538 <bno055_set_power_mode+0xf0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <bno055_set_power_mode+0x28>
    {
        return BNO055_E_NULL_PTR;
 800146a:	f06f 037e 	mvn.w	r3, #126	; 0x7e
 800146e:	e05f      	b.n	8001530 <bno055_set_power_mode+0xe8>
    else
    {
        /* The write operation effective only if the operation
         * mode is in config mode, this part of code is checking the
         * current operation mode and set the config mode */
        stat_s8 = bno055_get_operation_mode(&prev_opmode_u8);
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fedd 	bl	8001234 <bno055_get_operation_mode>
 800147a:	4603      	mov	r3, r0
 800147c:	73bb      	strb	r3, [r7, #14]
        if (stat_s8 == BNO055_SUCCESS)
 800147e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d143      	bne.n	800150e <bno055_set_power_mode+0xc6>
        {
            if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001486:	7b3b      	ldrb	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <bno055_set_power_mode+0x56>
            {
                stat_s8 += bno055_set_operation_mode(BNO055_OPERATION_MODE_CONFIG);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff ff13 	bl	80012b8 <bno055_set_operation_mode>
 8001492:	4603      	mov	r3, r0
 8001494:	b2da      	uxtb	r2, r3
 8001496:	7bbb      	ldrb	r3, [r7, #14]
 8001498:	4413      	add	r3, r2
 800149a:	b2db      	uxtb	r3, r3
 800149c:	73bb      	strb	r3, [r7, #14]
            }
            if (stat_s8 == BNO055_SUCCESS)
 800149e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d130      	bne.n	8001508 <bno055_set_power_mode+0xc0>
            {
                /* Write the value of power mode */
                com_rslt = p_bno055->BNO055_BUS_READ_FUNC(p_bno055->dev_addr,
 80014a6:	4b24      	ldr	r3, [pc, #144]	; (8001538 <bno055_set_power_mode+0xf0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691c      	ldr	r4, [r3, #16]
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <bno055_set_power_mode+0xf0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	7a58      	ldrb	r0, [r3, #9]
 80014b2:	f107 020d 	add.w	r2, r7, #13
 80014b6:	2301      	movs	r3, #1
 80014b8:	213e      	movs	r1, #62	; 0x3e
 80014ba:	47a0      	blx	r4
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]
                                                          BNO055_POWER_MODE_REG,
                                                          &data_u8r,
                                                          BNO055_GEN_READ_WRITE_LENGTH);
                if (com_rslt == BNO055_SUCCESS)
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d124      	bne.n	8001512 <bno055_set_power_mode+0xca>
                {
                    data_u8r = BNO055_SET_BITSLICE(data_u8r, BNO055_POWER_MODE, power_mode_u8);
 80014c8:	7b7b      	ldrb	r3, [r7, #13]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	f023 0303 	bic.w	r3, r3, #3
 80014d0:	b25a      	sxtb	r2, r3
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	4313      	orrs	r3, r2
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	737b      	strb	r3, [r7, #13]
                    com_rslt += p_bno055->BNO055_BUS_WRITE_FUNC(p_bno055->dev_addr,
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <bno055_set_power_mode+0xf0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68dc      	ldr	r4, [r3, #12]
 80014ea:	4b13      	ldr	r3, [pc, #76]	; (8001538 <bno055_set_power_mode+0xf0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	7a58      	ldrb	r0, [r3, #9]
 80014f0:	f107 020d 	add.w	r2, r7, #13
 80014f4:	2301      	movs	r3, #1
 80014f6:	213e      	movs	r1, #62	; 0x3e
 80014f8:	47a0      	blx	r4
 80014fa:	4603      	mov	r3, r0
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
 8001500:	4413      	add	r3, r2
 8001502:	b2db      	uxtb	r3, r3
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e004      	b.n	8001512 <bno055_set_power_mode+0xca>
                                                                BNO055_GEN_READ_WRITE_LENGTH);
                }
            }
            else
            {
                com_rslt = BNO055_ERROR;
 8001508:	23ff      	movs	r3, #255	; 0xff
 800150a:	73fb      	strb	r3, [r7, #15]
 800150c:	e001      	b.n	8001512 <bno055_set_power_mode+0xca>
            }
        }
        else
        {
            com_rslt = BNO055_ERROR;
 800150e:	23ff      	movs	r3, #255	; 0xff
 8001510:	73fb      	strb	r3, [r7, #15]
        }
    }
    if (prev_opmode_u8 != BNO055_OPERATION_MODE_CONFIG)
 8001512:	7b3b      	ldrb	r3, [r7, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <bno055_set_power_mode+0xe4>
    {
        /* set the operation mode
         * of previous operation mode*/
        com_rslt += bno055_set_operation_mode(prev_opmode_u8);
 8001518:	7b3b      	ldrb	r3, [r7, #12]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fecc 	bl	80012b8 <bno055_set_operation_mode>
 8001520:	4603      	mov	r3, r0
 8001522:	b2da      	uxtb	r2, r3
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	4413      	add	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	73fb      	strb	r3, [r7, #15]
    }

    return com_rslt;
 800152c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	20000238 	.word	0x20000238

0800153c <I2C_routine>:
 *  Bus read function pointer: BNO055_RD_FUNC_PTR
 *  Delay function pointer: delay_msec
 *  I2C address: dev_addr
 *--------------------------------------------------------------------------*/
s8 I2C_routine(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
    bno055.bus_write = BNO055_I2C_bus_write;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <I2C_routine+0x28>)
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <I2C_routine+0x2c>)
 8001544:	60da      	str	r2, [r3, #12]
    bno055.bus_read = BNO055_I2C_bus_read;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <I2C_routine+0x28>)
 8001548:	4a08      	ldr	r2, [pc, #32]	; (800156c <I2C_routine+0x30>)
 800154a:	611a      	str	r2, [r3, #16]
    bno055.delay_msec = BNO055_delay_msek;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <I2C_routine+0x28>)
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <I2C_routine+0x34>)
 8001550:	615a      	str	r2, [r3, #20]
    bno055.dev_addr = BNO055_I2C_ADDR2;
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <I2C_routine+0x28>)
 8001554:	2229      	movs	r2, #41	; 0x29
 8001556:	725a      	strb	r2, [r3, #9]

    return BNO055_INIT_VALUE;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	20000b5c 	.word	0x20000b5c
 8001568:	08001575 	.word	0x08001575
 800156c:	080015ed 	.word	0x080015ed
 8001570:	0800167d 	.word	0x0800167d

08001574 <BNO055_I2C_bus_write>:
 *  \param reg_data : It is a value hold in the array,
 *      will be used for write the value into the register
 *  \param cnt : The no of byte of data to be write
 */
s8 BNO055_I2C_bus_write(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af02      	add	r7, sp, #8
 800157a:	603a      	str	r2, [r7, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
 8001582:	460b      	mov	r3, r1
 8001584:	71bb      	strb	r3, [r7, #6]
 8001586:	4613      	mov	r3, r2
 8001588:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN];
    u8 stringpos = BNO055_INIT_VALUE;
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	723b      	strb	r3, [r7, #8]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
 800159a:	e00d      	b.n	80015b8 <BNO055_I2C_bus_write+0x44>
    {
        array[stringpos + BNO055_I2C_BUS_WRITE_ARRAY_INDEX] = *(reg_data + stringpos);
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	441a      	add	r2, r3
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	3301      	adds	r3, #1
 80015a6:	7812      	ldrb	r2, [r2, #0]
 80015a8:	f107 0118 	add.w	r1, r7, #24
 80015ac:	440b      	add	r3, r1
 80015ae:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	3301      	adds	r3, #1
 80015b6:	75fb      	strb	r3, [r7, #23]
 80015b8:	7dfa      	ldrb	r2, [r7, #23]
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d3ed      	bcc.n	800159c <BNO055_I2C_bus_write+0x28>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt+1, 10);
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	b299      	uxth	r1, r3
 80015c8:	f107 0208 	add.w	r2, r7, #8
 80015cc:	230a      	movs	r3, #10
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	460b      	mov	r3, r1
 80015d2:	2152      	movs	r1, #82	; 0x52
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <BNO055_I2C_bus_write+0x74>)
 80015d6:	f003 fab5 	bl	8004b44 <HAL_I2C_Master_Transmit>
    return (s8)BNO055_iERROR;
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	b25b      	sxtb	r3, r3
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000c18 	.word	0x20000c18

080015ec <BNO055_I2C_bus_read>:
 */

uint8_t byte_out[3]={0};
uint8_t byte_in[3]={0};
s8 BNO055_I2C_bus_read(u8 dev_addr, u8 reg_addr, u8 *reg_data, u8 cnt)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	603a      	str	r2, [r7, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	460b      	mov	r3, r1
 80015fc:	71bb      	strb	r3, [r7, #6]
 80015fe:	4613      	mov	r3, r2
 8001600:	717b      	strb	r3, [r7, #5]
    s32 BNO055_iERROR = BNO055_INIT_VALUE;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
    u8 array[I2C_BUFFER_LEN] = { BNO055_INIT_VALUE };
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
    u8 stringpos = BNO055_INIT_VALUE;
 8001610:	2300      	movs	r3, #0
 8001612:	75fb      	strb	r3, [r7, #23]

    array[BNO055_INIT_VALUE] = reg_addr;
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	723b      	strb	r3, [r7, #8]
//     * BNO055_iERROR is an return value of SPI write API
//     * Please select your valid return value
//     * In the driver BNO055_SUCCESS defined as 0
//     * and FAILURE defined as -1
//     */
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001618:	2300      	movs	r3, #0
 800161a:	75fb      	strb	r3, [r7, #23]
 800161c:	e00c      	b.n	8001638 <BNO055_I2C_bus_read+0x4c>
    {
        *(reg_data + stringpos) = array[stringpos];
 800161e:	7dfa      	ldrb	r2, [r7, #23]
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	6839      	ldr	r1, [r7, #0]
 8001624:	440b      	add	r3, r1
 8001626:	f107 0118 	add.w	r1, r7, #24
 800162a:	440a      	add	r2, r1
 800162c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001630:	701a      	strb	r2, [r3, #0]
    for (stringpos = BNO055_INIT_VALUE; stringpos < cnt; stringpos++)
 8001632:	7dfb      	ldrb	r3, [r7, #23]
 8001634:	3301      	adds	r3, #1
 8001636:	75fb      	strb	r3, [r7, #23]
 8001638:	7dfa      	ldrb	r2, [r7, #23]
 800163a:	797b      	ldrb	r3, [r7, #5]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3ee      	bcc.n	800161e <BNO055_I2C_bus_read+0x32>
    }
    HAL_I2C_Master_Transmit(&hi2c1, 0x29<<1, array, cnt, 10);
 8001640:	797b      	ldrb	r3, [r7, #5]
 8001642:	b299      	uxth	r1, r3
 8001644:	f107 0208 	add.w	r2, r7, #8
 8001648:	230a      	movs	r3, #10
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	460b      	mov	r3, r1
 800164e:	2152      	movs	r1, #82	; 0x52
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <BNO055_I2C_bus_read+0x8c>)
 8001652:	f003 fa77 	bl	8004b44 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, 0x29<<1, (uint8_t*)reg_data, cnt, 10);
 8001656:	797b      	ldrb	r3, [r7, #5]
 8001658:	b29a      	uxth	r2, r3
 800165a:	230a      	movs	r3, #10
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	4613      	mov	r3, r2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	2152      	movs	r1, #82	; 0x52
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <BNO055_I2C_bus_read+0x8c>)
 8001666:	f003 fb61 	bl	8004d2c <HAL_I2C_Master_Receive>
//		//    status = HAL_I2C_Master_Receive(&hi2c1,0x29<<1,reg_data ,cnt,10);
//		status = HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) byte_out, 1, 10); //!!10
//		status = HAL_I2C_Master_Receive(&hi2c1, (uint16_t) 0x29 << 1,(uint8_t*) reg_data + i, 1, 10); //!!10
//	}

	return (s8) BNO055_iERROR;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	b25b      	sxtb	r3, r3
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000c18 	.word	0x20000c18

0800167c <BNO055_delay_msek>:

/*  Brief : The delay routine
 *  \param : delay in ms
 */
void BNO055_delay_msek(u32 msek)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
    /*Here you can write your own delay routine*/
	HAL_Delay(msek);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f001 fe67 	bl	8003358 <HAL_Delay>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <BNOInit>:

void BNOInit()
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	I2C_routine();
 8001698:	f7ff ff50 	bl	800153c <I2C_routine>
	comres = bno055_init(&bno055);
 800169c:	4810      	ldr	r0, [pc, #64]	; (80016e0 <BNOInit+0x4c>)
 800169e:	f7ff fa57 	bl	8000b50 <bno055_init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <BNOInit+0x50>)
 80016a8:	601a      	str	r2, [r3, #0]
    power_mode = BNO055_POWER_MODE_NORMAL;
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <BNOInit+0x54>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
    comres += bno055_set_power_mode(power_mode);
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <BNOInit+0x54>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fec7 	bl	8001448 <bno055_set_power_mode>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <BNOInit+0x50>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4413      	add	r3, r2
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <BNOInit+0x50>)
 80016c6:	6013      	str	r3, [r2, #0]
    comres += bno055_set_operation_mode(BNO055_OPERATION_MODE_NDOF);
 80016c8:	200c      	movs	r0, #12
 80016ca:	f7ff fdf5 	bl	80012b8 <bno055_set_operation_mode>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <BNOInit+0x50>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a02      	ldr	r2, [pc, #8]	; (80016e4 <BNOInit+0x50>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000b5c 	.word	0x20000b5c
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000b14 	.word	0x20000b14

080016ec <readBNOAnglesDeg>:

void readBNOAnglesDeg()
{
 80016ec:	b598      	push	{r3, r4, r7, lr}
 80016ee:	af00      	add	r7, sp, #0
//	comres += bno055_convert_double_euler_h_deg(&d_euler_data_h);
//	comres += bno055_convert_double_euler_r_deg(&d_euler_data_r);
//	comres += bno055_convert_double_euler_p_deg(&d_euler_data_p);
	comres += bno055_convert_double_euler_hpr_deg(&d_euler_hpr);
 80016f0:	480e      	ldr	r0, [pc, #56]	; (800172c <readBNOAnglesDeg+0x40>)
 80016f2:	f7ff fc78 	bl	8000fe6 <bno055_convert_double_euler_hpr_deg>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <readBNOAnglesDeg+0x44>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <readBNOAnglesDeg+0x44>)
 8001702:	6013      	str	r3, [r2, #0]
	Roll = d_euler_hpr.p;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <readBNOAnglesDeg+0x40>)
 8001706:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <readBNOAnglesDeg+0x48>)
 800170c:	e9c2 3400 	strd	r3, r4, [r2]
	Pitch = d_euler_hpr.r;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <readBNOAnglesDeg+0x40>)
 8001712:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <readBNOAnglesDeg+0x4c>)
 8001718:	e9c2 3400 	strd	r3, r4, [r2]
	Yaw = d_euler_hpr.h;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <readBNOAnglesDeg+0x40>)
 800171e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <readBNOAnglesDeg+0x50>)
 8001724:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001728:	bf00      	nop
 800172a:	bd98      	pop	{r3, r4, r7, pc}
 800172c:	20000fd0 	.word	0x20000fd0
 8001730:	20000000 	.word	0x20000000
 8001734:	20000b18 	.word	0x20000b18
 8001738:	20000b20 	.word	0x20000b20
 800173c:	20000b28 	.word	0x20000b28

08001740 <readBNOMagnetometer>:
}

uint32_t LastMagnetometerMeasurement = 0;

void readBNOMagnetometer()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	isNewMagDataAvailable = false;
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <readBNOMagnetometer+0x44>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
	if ( (HAL_GetTick() - LastMagnetometerMeasurement) > 50 )
 800174a:	f001 fdf9 	bl	8003340 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <readBNOMagnetometer+0x48>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b32      	cmp	r3, #50	; 0x32
 8001758:	d911      	bls.n	800177e <readBNOMagnetometer+0x3e>
	{
		comres += bno055_convert_double_mag_xyz_uT(&d_mag_xyz);
 800175a:	480c      	ldr	r0, [pc, #48]	; (800178c <readBNOMagnetometer+0x4c>)
 800175c:	f7ff fbfc 	bl	8000f58 <bno055_convert_double_mag_xyz_uT>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <readBNOMagnetometer+0x50>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4413      	add	r3, r2
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <readBNOMagnetometer+0x50>)
 800176c:	6013      	str	r3, [r2, #0]
		LastMagnetometerMeasurement = HAL_GetTick();
 800176e:	f001 fde7 	bl	8003340 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <readBNOMagnetometer+0x48>)
 8001776:	601a      	str	r2, [r3, #0]
		isNewMagDataAvailable = true;
 8001778:	4b02      	ldr	r3, [pc, #8]	; (8001784 <readBNOMagnetometer+0x44>)
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
	}
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000b38 	.word	0x20000b38
 8001788:	2000023c 	.word	0x2000023c
 800178c:	20000ce8 	.word	0x20000ce8
 8001790:	20000000 	.word	0x20000000

08001794 <MS56XXReset>:
int64_t OFF = 0;
int64_t SNES = 0;
int32_t P = 0;

void MS56XXReset(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2110      	movs	r1, #16
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <MS56XXReset+0x40>)
 800179e:	f003 f927 	bl	80049f0 <HAL_GPIO_WritePin>
	SPITX[0] = 0x1E;
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <MS56XXReset+0x44>)
 80017a4:	221e      	movs	r2, #30
 80017a6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 80017a8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ac:	2201      	movs	r2, #1
 80017ae:	490a      	ldr	r1, [pc, #40]	; (80017d8 <MS56XXReset+0x44>)
 80017b0:	480a      	ldr	r0, [pc, #40]	; (80017dc <MS56XXReset+0x48>)
 80017b2:	f006 fbff 	bl	8007fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80017b6:	bf00      	nop
 80017b8:	4808      	ldr	r0, [pc, #32]	; (80017dc <MS56XXReset+0x48>)
 80017ba:	f007 f89c 	bl	80088f6 <HAL_SPI_GetState>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d0f9      	beq.n	80017b8 <MS56XXReset+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2110      	movs	r1, #16
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <MS56XXReset+0x40>)
 80017ca:	f003 f911 	bl	80049f0 <HAL_GPIO_WritePin>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40020000 	.word	0x40020000
 80017d8:	20000240 	.word	0x20000240
 80017dc:	20000ea8 	.word	0x20000ea8

080017e0 <MS56XXReadProm>:

uint16_t MS56XXReadProm(uint8_t address)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = address;
 80017ea:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <MS56XXReadProm+0x78>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	7013      	strb	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2110      	movs	r1, #16
 80017f4:	4819      	ldr	r0, [pc, #100]	; (800185c <MS56XXReadProm+0x7c>)
 80017f6:	f003 f8fb 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295
 80017fe:	2201      	movs	r2, #1
 8001800:	4915      	ldr	r1, [pc, #84]	; (8001858 <MS56XXReadProm+0x78>)
 8001802:	4817      	ldr	r0, [pc, #92]	; (8001860 <MS56XXReadProm+0x80>)
 8001804:	f006 fbd6 	bl	8007fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001808:	bf00      	nop
 800180a:	4815      	ldr	r0, [pc, #84]	; (8001860 <MS56XXReadProm+0x80>)
 800180c:	f007 f873 	bl	80088f6 <HAL_SPI_GetState>
 8001810:	4603      	mov	r3, r0
 8001812:	2b02      	cmp	r3, #2
 8001814:	d0f9      	beq.n	800180a <MS56XXReadProm+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[0], 1, HAL_MAX_DELAY);
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	2201      	movs	r2, #1
 800181c:	4911      	ldr	r1, [pc, #68]	; (8001864 <MS56XXReadProm+0x84>)
 800181e:	4810      	ldr	r0, [pc, #64]	; (8001860 <MS56XXReadProm+0x80>)
 8001820:	f006 fd2e 	bl	8008280 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX2Byte[1], 1, HAL_MAX_DELAY);
 8001824:	f04f 33ff 	mov.w	r3, #4294967295
 8001828:	2201      	movs	r2, #1
 800182a:	490f      	ldr	r1, [pc, #60]	; (8001868 <MS56XXReadProm+0x88>)
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <MS56XXReadProm+0x80>)
 800182e:	f006 fd27 	bl	8008280 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001832:	2201      	movs	r2, #1
 8001834:	2110      	movs	r1, #16
 8001836:	4809      	ldr	r0, [pc, #36]	; (800185c <MS56XXReadProm+0x7c>)
 8001838:	f003 f8da 	bl	80049f0 <HAL_GPIO_WritePin>
	return (SPIRX2Byte[0]<<8) + SPIRX2Byte[1];
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MS56XXReadProm+0x84>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	021b      	lsls	r3, r3, #8
 8001844:	b29a      	uxth	r2, r3
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <MS56XXReadProm+0x84>)
 8001848:	785b      	ldrb	r3, [r3, #1]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	b29b      	uxth	r3, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000240 	.word	0x20000240
 800185c:	40020000 	.word	0x40020000
 8001860:	20000ea8 	.word	0x20000ea8
 8001864:	20000244 	.word	0x20000244
 8001868:	20000245 	.word	0x20000245

0800186c <MS56XXInit>:

void MS56XXInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	MS56XXReset();
 8001870:	f7ff ff90 	bl	8001794 <MS56XXReset>
	HAL_Delay(50);
 8001874:	2032      	movs	r0, #50	; 0x32
 8001876:	f001 fd6f 	bl	8003358 <HAL_Delay>
	MS56XXReadProm(0xA0);
 800187a:	20a0      	movs	r0, #160	; 0xa0
 800187c:	f7ff ffb0 	bl	80017e0 <MS56XXReadProm>
	Coeff1 = MS56XXReadProm(0xA2);
 8001880:	20a2      	movs	r0, #162	; 0xa2
 8001882:	f7ff ffad 	bl	80017e0 <MS56XXReadProm>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <MS56XXInit+0xb0>)
 800188c:	801a      	strh	r2, [r3, #0]
	Coeff2 = MS56XXReadProm(0xA4);
 800188e:	20a4      	movs	r0, #164	; 0xa4
 8001890:	f7ff ffa6 	bl	80017e0 <MS56XXReadProm>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MS56XXInit+0xb4>)
 800189a:	801a      	strh	r2, [r3, #0]
	Coeff3 = MS56XXReadProm(0xA6);
 800189c:	20a6      	movs	r0, #166	; 0xa6
 800189e:	f7ff ff9f 	bl	80017e0 <MS56XXReadProm>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <MS56XXInit+0xb8>)
 80018a8:	801a      	strh	r2, [r3, #0]
	Coeff4 = MS56XXReadProm(0xA8);
 80018aa:	20a8      	movs	r0, #168	; 0xa8
 80018ac:	f7ff ff98 	bl	80017e0 <MS56XXReadProm>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <MS56XXInit+0xbc>)
 80018b6:	801a      	strh	r2, [r3, #0]
	Coeff5 = MS56XXReadProm(0xAA);
 80018b8:	20aa      	movs	r0, #170	; 0xaa
 80018ba:	f7ff ff91 	bl	80017e0 <MS56XXReadProm>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MS56XXInit+0xc0>)
 80018c4:	801a      	strh	r2, [r3, #0]
	Coeff6 = MS56XXReadProm(0xAC);
 80018c6:	20ac      	movs	r0, #172	; 0xac
 80018c8:	f7ff ff8a 	bl	80017e0 <MS56XXReadProm>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <MS56XXInit+0xc4>)
 80018d2:	801a      	strh	r2, [r3, #0]
	MSCRC = MS56XXReadProm(0xAE);
 80018d4:	20ae      	movs	r0, #174	; 0xae
 80018d6:	f7ff ff83 	bl	80017e0 <MS56XXReadProm>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MS56XXInit+0xc8>)
 80018e0:	801a      	strh	r2, [r3, #0]

	MS56XXSendCmd(0x58);
 80018e2:	2058      	movs	r0, #88	; 0x58
 80018e4:	f000 f82c 	bl	8001940 <MS56XXSendCmd>
	HAL_Delay(9);
 80018e8:	2009      	movs	r0, #9
 80018ea:	f001 fd35 	bl	8003358 <HAL_Delay>
	RawTemp = MS56XXRead3Bytes(0);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f856 	bl	80019a0 <MS56XXRead3Bytes>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <MS56XXInit+0xcc>)
 80018f8:	601a      	str	r2, [r3, #0]

	MS56XXSendCmd(0x48);
 80018fa:	2048      	movs	r0, #72	; 0x48
 80018fc:	f000 f820 	bl	8001940 <MS56XXSendCmd>
	HAL_Delay(9);
 8001900:	2009      	movs	r0, #9
 8001902:	f001 fd29 	bl	8003358 <HAL_Delay>
	RawPressure = MS56XXRead3Bytes(0);
 8001906:	2000      	movs	r0, #0
 8001908:	f000 f84a 	bl	80019a0 <MS56XXRead3Bytes>
 800190c:	4602      	mov	r2, r0
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MS56XXInit+0xd0>)
 8001910:	601a      	str	r2, [r3, #0]
	GetAltitudeAndTemp();
 8001912:	f000 f899 	bl	8001a48 <GetAltitudeAndTemp>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000024c 	.word	0x2000024c
 8001920:	2000024e 	.word	0x2000024e
 8001924:	20000250 	.word	0x20000250
 8001928:	20000252 	.word	0x20000252
 800192c:	20000254 	.word	0x20000254
 8001930:	20000256 	.word	0x20000256
 8001934:	20000258 	.word	0x20000258
 8001938:	2000026c 	.word	0x2000026c
 800193c:	20000270 	.word	0x20000270

08001940 <MS56XXSendCmd>:

void MS56XXSendCmd(uint8_t Cmd)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2110      	movs	r1, #16
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <MS56XXSendCmd+0x50>)
 8001950:	f003 f84e 	bl	80049f0 <HAL_GPIO_WritePin>
	SPITX[0] = Cmd;
 8001954:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <MS56XXSendCmd+0x54>)
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	7013      	strb	r3, [r2, #0]
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	2201      	movs	r2, #1
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <MS56XXSendCmd+0x54>)
 8001962:	480d      	ldr	r0, [pc, #52]	; (8001998 <MS56XXSendCmd+0x58>)
 8001964:	f006 fb26 	bl	8007fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 8001968:	bf00      	nop
 800196a:	480b      	ldr	r0, [pc, #44]	; (8001998 <MS56XXSendCmd+0x58>)
 800196c:	f006 ffc3 	bl	80088f6 <HAL_SPI_GetState>
 8001970:	4603      	mov	r3, r0
 8001972:	2b02      	cmp	r3, #2
 8001974:	d0f9      	beq.n	800196a <MS56XXSendCmd+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	2110      	movs	r1, #16
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MS56XXSendCmd+0x50>)
 800197c:	f003 f838 	bl	80049f0 <HAL_GPIO_WritePin>
	isCmdSet = true;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MS56XXSendCmd+0x5c>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40020000 	.word	0x40020000
 8001994:	20000240 	.word	0x20000240
 8001998:	20000ea8 	.word	0x20000ea8
 800199c:	2000025a 	.word	0x2000025a

080019a0 <MS56XXRead3Bytes>:

uint32_t MS56XXRead3Bytes(uint8_t address)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	SPITX[0] = 0x00;
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <MS56XXRead3Bytes+0x8c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2110      	movs	r1, #16
 80019b4:	481e      	ldr	r0, [pc, #120]	; (8001a30 <MS56XXRead3Bytes+0x90>)
 80019b6:	f003 f81b 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &SPITX[0], 1, HAL_MAX_DELAY);
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	2201      	movs	r2, #1
 80019c0:	491a      	ldr	r1, [pc, #104]	; (8001a2c <MS56XXRead3Bytes+0x8c>)
 80019c2:	481c      	ldr	r0, [pc, #112]	; (8001a34 <MS56XXRead3Bytes+0x94>)
 80019c4:	f006 faf6 	bl	8007fb4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_BUSY);
 80019c8:	bf00      	nop
 80019ca:	481a      	ldr	r0, [pc, #104]	; (8001a34 <MS56XXRead3Bytes+0x94>)
 80019cc:	f006 ff93 	bl	80088f6 <HAL_SPI_GetState>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d0f9      	beq.n	80019ca <MS56XXRead3Bytes+0x2a>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[0], 1, HAL_MAX_DELAY);
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	2201      	movs	r2, #1
 80019dc:	4916      	ldr	r1, [pc, #88]	; (8001a38 <MS56XXRead3Bytes+0x98>)
 80019de:	4815      	ldr	r0, [pc, #84]	; (8001a34 <MS56XXRead3Bytes+0x94>)
 80019e0:	f006 fc4e 	bl	8008280 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[1], 1, HAL_MAX_DELAY);
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	2201      	movs	r2, #1
 80019ea:	4914      	ldr	r1, [pc, #80]	; (8001a3c <MS56XXRead3Bytes+0x9c>)
 80019ec:	4811      	ldr	r0, [pc, #68]	; (8001a34 <MS56XXRead3Bytes+0x94>)
 80019ee:	f006 fc47 	bl	8008280 <HAL_SPI_Receive>
	HAL_SPI_Receive(&hspi1, &SPIRX3Byte[2], 1, HAL_MAX_DELAY);
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	2201      	movs	r2, #1
 80019f8:	4911      	ldr	r1, [pc, #68]	; (8001a40 <MS56XXRead3Bytes+0xa0>)
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <MS56XXRead3Bytes+0x94>)
 80019fc:	f006 fc40 	bl	8008280 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2110      	movs	r1, #16
 8001a04:	480a      	ldr	r0, [pc, #40]	; (8001a30 <MS56XXRead3Bytes+0x90>)
 8001a06:	f002 fff3 	bl	80049f0 <HAL_GPIO_WritePin>
	isCmdSet = false;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <MS56XXRead3Bytes+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
	return (SPIRX3Byte[0] << 16) + (SPIRX3Byte[1] << 8 ) + (SPIRX3Byte[0]);
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MS56XXRead3Bytes+0x98>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MS56XXRead3Bytes+0x98>)
 8001a18:	785b      	ldrb	r3, [r3, #1]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a06      	ldr	r2, [pc, #24]	; (8001a38 <MS56XXRead3Bytes+0x98>)
 8001a20:	7812      	ldrb	r2, [r2, #0]
 8001a22:	4413      	add	r3, r2
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000240 	.word	0x20000240
 8001a30:	40020000 	.word	0x40020000
 8001a34:	20000ea8 	.word	0x20000ea8
 8001a38:	20000248 	.word	0x20000248
 8001a3c:	20000249 	.word	0x20000249
 8001a40:	2000024a 	.word	0x2000024a
 8001a44:	2000025a 	.word	0x2000025a

08001a48 <GetAltitudeAndTemp>:

uint16_t GetAltitudeAndTemp(void)
{
 8001a48:	b4f0      	push	{r4, r5, r6, r7}
 8001a4a:	af00      	add	r7, sp, #0
	dT = RawTemp - Coeff5 * 256;
 8001a4c:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <GetAltitudeAndTemp+0x124>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a47      	ldr	r2, [pc, #284]	; (8001b70 <GetAltitudeAndTemp+0x128>)
 8001a52:	8812      	ldrh	r2, [r2, #0]
 8001a54:	0212      	lsls	r2, r2, #8
 8001a56:	1a9b      	subs	r3, r3, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b46      	ldr	r3, [pc, #280]	; (8001b74 <GetAltitudeAndTemp+0x12c>)
 8001a5c:	601a      	str	r2, [r3, #0]
	TEMP = 2000 + dT * Coeff6 / 8388608;
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <GetAltitudeAndTemp+0x130>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <GetAltitudeAndTemp+0x12c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fb03 f302 	mul.w	r3, r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	da02      	bge.n	8001a76 <GetAltitudeAndTemp+0x2e>
 8001a70:	4a42      	ldr	r2, [pc, #264]	; (8001b7c <GetAltitudeAndTemp+0x134>)
 8001a72:	441a      	add	r2, r3
 8001a74:	4613      	mov	r3, r2
 8001a76:	15db      	asrs	r3, r3, #23
 8001a78:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a7c:	4a40      	ldr	r2, [pc, #256]	; (8001b80 <GetAltitudeAndTemp+0x138>)
 8001a7e:	6013      	str	r3, [r2, #0]
	OFF = Coeff2 * 131072 + Coeff4 * dT / 64;
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <GetAltitudeAndTemp+0x13c>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	045a      	lsls	r2, r3, #17
 8001a86:	4b40      	ldr	r3, [pc, #256]	; (8001b88 <GetAltitudeAndTemp+0x140>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <GetAltitudeAndTemp+0x12c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	fb03 f301 	mul.w	r3, r3, r1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	da00      	bge.n	8001a9a <GetAltitudeAndTemp+0x52>
 8001a98:	333f      	adds	r3, #63	; 0x3f
 8001a9a:	119b      	asrs	r3, r3, #6
 8001a9c:	4413      	add	r3, r2
 8001a9e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001aa2:	4a3a      	ldr	r2, [pc, #232]	; (8001b8c <GetAltitudeAndTemp+0x144>)
 8001aa4:	e9c2 3400 	strd	r3, r4, [r2]
	SNES = Coeff1 * 32768 + (Coeff3 * dT) / 127;
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <GetAltitudeAndTemp+0x148>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	03da      	lsls	r2, r3, #15
 8001aae:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <GetAltitudeAndTemp+0x14c>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <GetAltitudeAndTemp+0x12c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fb03 f301 	mul.w	r3, r3, r1
 8001abc:	4936      	ldr	r1, [pc, #216]	; (8001b98 <GetAltitudeAndTemp+0x150>)
 8001abe:	fb81 0103 	smull	r0, r1, r1, r3
 8001ac2:	4419      	add	r1, r3
 8001ac4:	1189      	asrs	r1, r1, #6
 8001ac6:	17db      	asrs	r3, r3, #31
 8001ac8:	1acb      	subs	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001ad0:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <GetAltitudeAndTemp+0x154>)
 8001ad2:	e9c2 3400 	strd	r3, r4, [r2]
	P = ((RawPressure * SNES) / 2097152 - OFF) / 32768;
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <GetAltitudeAndTemp+0x158>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4619      	mov	r1, r3
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <GetAltitudeAndTemp+0x154>)
 8001ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ae6:	fb03 f502 	mul.w	r5, r3, r2
 8001aea:	fb01 f004 	mul.w	r0, r1, r4
 8001aee:	4428      	add	r0, r5
 8001af0:	fba1 3403 	umull	r3, r4, r1, r3
 8001af4:	1902      	adds	r2, r0, r4
 8001af6:	4614      	mov	r4, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f174 0200 	sbcs.w	r2, r4, #0
 8001afe:	da05      	bge.n	8001b0c <GetAltitudeAndTemp+0xc4>
 8001b00:	4928      	ldr	r1, [pc, #160]	; (8001ba4 <GetAltitudeAndTemp+0x15c>)
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	185b      	adds	r3, r3, r1
 8001b08:	eb44 0402 	adc.w	r4, r4, r2
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	0d59      	lsrs	r1, r3, #21
 8001b16:	ea41 21c4 	orr.w	r1, r1, r4, lsl #11
 8001b1a:	1562      	asrs	r2, r4, #21
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <GetAltitudeAndTemp+0x144>)
 8001b1e:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001b22:	460b      	mov	r3, r1
 8001b24:	4614      	mov	r4, r2
 8001b26:	1b5b      	subs	r3, r3, r5
 8001b28:	eb64 0406 	sbc.w	r4, r4, r6
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f174 0200 	sbcs.w	r2, r4, #0
 8001b32:	da06      	bge.n	8001b42 <GetAltitudeAndTemp+0xfa>
 8001b34:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	185b      	adds	r3, r3, r1
 8001b3e:	eb44 0402 	adc.w	r4, r4, r2
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	0bd9      	lsrs	r1, r3, #15
 8001b4c:	ea41 4144 	orr.w	r1, r1, r4, lsl #17
 8001b50:	13e2      	asrs	r2, r4, #15
 8001b52:	460b      	mov	r3, r1
 8001b54:	4614      	mov	r4, r2
 8001b56:	461a      	mov	r2, r3
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <GetAltitudeAndTemp+0x160>)
 8001b5a:	601a      	str	r2, [r3, #0]
	return P;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <GetAltitudeAndTemp+0x160>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	b29b      	uxth	r3, r3
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bcf0      	pop	{r4, r5, r6, r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	2000026c 	.word	0x2000026c
 8001b70:	20000254 	.word	0x20000254
 8001b74:	20000274 	.word	0x20000274
 8001b78:	20000256 	.word	0x20000256
 8001b7c:	007fffff 	.word	0x007fffff
 8001b80:	20000278 	.word	0x20000278
 8001b84:	2000024e 	.word	0x2000024e
 8001b88:	20000252 	.word	0x20000252
 8001b8c:	20000280 	.word	0x20000280
 8001b90:	2000024c 	.word	0x2000024c
 8001b94:	20000250 	.word	0x20000250
 8001b98:	81020409 	.word	0x81020409
 8001b9c:	20000288 	.word	0x20000288
 8001ba0:	20000270 	.word	0x20000270
 8001ba4:	001fffff 	.word	0x001fffff
 8001ba8:	20000290 	.word	0x20000290

08001bac <MS56XXCyclicRead>:

void MS56XXCyclicRead(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	if ( (HAL_GetTick() - LastTempMeasurement) > 1000 )
 8001bb0:	f001 fbc6 	bl	8003340 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <MS56XXCyclicRead+0xdc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bc0:	d914      	bls.n	8001bec <MS56XXCyclicRead+0x40>
	{
		if (!isCmdSet)
 8001bc2:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <MS56XXCyclicRead+0xe0>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d110      	bne.n	8001bec <MS56XXCyclicRead+0x40>
		{
			MS56XXSendCmd(0x58);
 8001bca:	2058      	movs	r0, #88	; 0x58
 8001bcc:	f7ff feb8 	bl	8001940 <MS56XXSendCmd>
			isCmdSet = true;
 8001bd0:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <MS56XXCyclicRead+0xe0>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <MS56XXCyclicRead+0xe4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = false;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <MS56XXCyclicRead+0xe8>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 8001be2:	f001 fbad 	bl	8003340 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <MS56XXCyclicRead+0xec>)
 8001bea:	601a      	str	r2, [r3, #0]
		}
	}

	if ((HAL_GetTick() - LastPressureMeasurement) > 20)
 8001bec:	f001 fba8 	bl	8003340 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <MS56XXCyclicRead+0xf0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b14      	cmp	r3, #20
 8001bfa:	d914      	bls.n	8001c26 <MS56XXCyclicRead+0x7a>
	{
		if (!isCmdSet)
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <MS56XXCyclicRead+0xe0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d110      	bne.n	8001c26 <MS56XXCyclicRead+0x7a>
		{
			MS56XXSendCmd(0x48);
 8001c04:	2048      	movs	r0, #72	; 0x48
 8001c06:	f7ff fe9b 	bl	8001940 <MS56XXSendCmd>
			isCmdSet = true;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <MS56XXCyclicRead+0xe0>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
			isNewMS56XXDataAvailable = false;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <MS56XXCyclicRead+0xe4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
			isPressureLastCmd = true;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MS56XXCyclicRead+0xe8>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	701a      	strb	r2, [r3, #0]
			LastCommandSent = HAL_GetTick();
 8001c1c:	f001 fb90 	bl	8003340 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MS56XXCyclicRead+0xec>)
 8001c24:	601a      	str	r2, [r3, #0]
		}
	}

	if ( (HAL_GetTick() - LastCommandSent) > 9 )
 8001c26:	f001 fb8b 	bl	8003340 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MS56XXCyclicRead+0xec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	d926      	bls.n	8001c84 <MS56XXCyclicRead+0xd8>
	{
		if (isCmdSet)
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <MS56XXCyclicRead+0xe0>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d022      	beq.n	8001c84 <MS56XXCyclicRead+0xd8>
		{
			if (!isPressureLastCmd)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MS56XXCyclicRead+0xe8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <MS56XXCyclicRead+0xb2>
			{
				RawTemp = MS56XXRead3Bytes(0);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff feaa 	bl	80019a0 <MS56XXRead3Bytes>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MS56XXCyclicRead+0xf4>)
 8001c50:	601a      	str	r2, [r3, #0]
				LastTempMeasurement = HAL_GetTick();
 8001c52:	f001 fb75 	bl	8003340 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MS56XXCyclicRead+0xdc>)
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e00a      	b.n	8001c74 <MS56XXCyclicRead+0xc8>
			}
			else
			{
				RawPressure = MS56XXRead3Bytes(0);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fe9e 	bl	80019a0 <MS56XXRead3Bytes>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <MS56XXCyclicRead+0xf8>)
 8001c68:	601a      	str	r2, [r3, #0]
				LastPressureMeasurement = HAL_GetTick();
 8001c6a:	f001 fb69 	bl	8003340 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MS56XXCyclicRead+0xf0>)
 8001c72:	601a      	str	r2, [r3, #0]
			}
			isCmdSet = false;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <MS56XXCyclicRead+0xe0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
			GetAltitudeAndTemp();
 8001c7a:	f7ff fee5 	bl	8001a48 <GetAltitudeAndTemp>
			isNewMS56XXDataAvailable = true;
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <MS56XXCyclicRead+0xe4>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000260 	.word	0x20000260
 8001c8c:	2000025a 	.word	0x2000025a
 8001c90:	2000025c 	.word	0x2000025c
 8001c94:	2000025b 	.word	0x2000025b
 8001c98:	20000268 	.word	0x20000268
 8001c9c:	20000264 	.word	0x20000264
 8001ca0:	2000026c 	.word	0x2000026c
 8001ca4:	20000270 	.word	0x20000270

08001ca8 <SendToScreen>:
 */
#include "main.h"
#include "string.h"

void SendToScreen(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, USBTXArray, 150,4); // HAL_UART_Transmit(&huart2, USBTXArray, 1024,3); TIM2->CCR1
 8001cac:	2304      	movs	r3, #4
 8001cae:	2296      	movs	r2, #150	; 0x96
 8001cb0:	4905      	ldr	r1, [pc, #20]	; (8001cc8 <SendToScreen+0x20>)
 8001cb2:	4806      	ldr	r0, [pc, #24]	; (8001ccc <SendToScreen+0x24>)
 8001cb4:	f007 ff9a 	bl	8009bec <HAL_UART_Transmit>
	memset(USBTXArray,0, 150);
 8001cb8:	2296      	movs	r2, #150	; 0x96
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4802      	ldr	r0, [pc, #8]	; (8001cc8 <SendToScreen+0x20>)
 8001cbe:	f009 fc15 	bl	800b4ec <memset>
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000714 	.word	0x20000714
 8001ccc:	20000f4c 	.word	0x20000f4c

08001cd0 <ParseRCMessage>:
{

}

void ParseRCMessage(uint8_t *pData)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	int a = 1;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cec:	b089      	sub	sp, #36	; 0x24
 8001cee:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf0:	f001 fad5 	bl	800329e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf4:	f000 f8b4 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cf8:	f000 fcea 	bl	80026d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cfc:	f000 fcc2 	bl	8002684 <MX_DMA_Init>
  MX_TIM4_Init();
 8001d00:	f000 fbee 	bl	80024e0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001d04:	f000 fad0 	bl	80022a8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001d08:	f000 fc8c 	bl	8002624 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d0c:	f000 f9a0 	bl	8002050 <MX_I2C1_Init>
  MX_FATFS_Init();
 8001d10:	f009 fafc 	bl	800b30c <MX_FATFS_Init>
  MX_QUADSPI_Init();
 8001d14:	f000 f9dc 	bl	80020d0 <MX_QUADSPI_Init>
  MX_SPI1_Init();
 8001d18:	f000 fa88 	bl	800222c <MX_SPI1_Init>
  MX_ADC1_Init();
 8001d1c:	f000 f946 	bl	8001fac <MX_ADC1_Init>
  MX_SDMMC1_MMC_Init();
 8001d20:	f000 fa5e 	bl	80021e0 <MX_SDMMC1_MMC_Init>
  MX_RTC_Init();
 8001d24:	f000 fa00 	bl	8002128 <MX_RTC_Init>
  MX_UART5_Init();
 8001d28:	f000 fc4c 	bl	80025c4 <MX_UART5_Init>
  MX_TIM2_Init();
 8001d2c:	f000 fb7c 	bl	8002428 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Init(&htim1);	// PWM Generation Servos
 8001d30:	483c      	ldr	r0, [pc, #240]	; (8001e24 <main+0x13c>)
 8001d32:	f006 ff63 	bl	8008bfc <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim4); 	// LED
 8001d36:	483c      	ldr	r0, [pc, #240]	; (8001e28 <main+0x140>)
 8001d38:	f006 ff60 	bl	8008bfc <HAL_TIM_PWM_Init>
	HAL_ADC_Start(&hadc1);		// Battery
 8001d3c:	483b      	ldr	r0, [pc, #236]	; (8001e2c <main+0x144>)
 8001d3e:	f001 fb71 	bl	8003424 <HAL_ADC_Start>
//	HAL_TIM_IC_Init(&htim2);		//
//	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);

	QSPI_Init();
 8001d42:	f7fe fda5 	bl	8000890 <QSPI_Init>

//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET); 	// QSPI CS Low
//	HAL_Delay(15);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET); 	// QSPI WP High
 8001d46:	2201      	movs	r2, #1
 8001d48:	2104      	movs	r1, #4
 8001d4a:	4839      	ldr	r0, [pc, #228]	; (8001e30 <main+0x148>)
 8001d4c:	f002 fe50 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001d50:	200f      	movs	r0, #15
 8001d52:	f001 fb01 	bl	8003358 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);		// QSPI RST High
 8001d56:	2200      	movs	r2, #0
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4836      	ldr	r0, [pc, #216]	; (8001e34 <main+0x14c>)
 8001d5c:	f002 fe48 	bl	80049f0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);		// QSPI RST High
 8001d60:	2201      	movs	r2, #1
 8001d62:	2102      	movs	r1, #2
 8001d64:	4833      	ldr	r0, [pc, #204]	; (8001e34 <main+0x14c>)
 8001d66:	f002 fe43 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001d6a:	200f      	movs	r0, #15
 8001d6c:	f001 faf4 	bl	8003358 <HAL_Delay>

	QSPI_WriteEnable();
 8001d70:	f7fe fd9e 	bl	80008b0 <QSPI_WriteEnable>
//	{
//		HAL_Delay(1);
//		FS_ret = f_open(&USERFile, "test.txt", FA_READ);
//	} while (FS_ret != FR_OK);

	vBat = measureBattery();
 8001d74:	f000 fd98 	bl	80028a8 <measureBattery>
 8001d78:	eeb0 7b40 	vmov.f64	d7, d0
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <main+0x150>)
 8001d7e:	ed83 7b00 	vstr	d7, [r3]
	MS56XXInit();
 8001d82:	f7ff fd73 	bl	800186c <MS56XXInit>
	BNOInit();
 8001d86:	f7ff fc85 	bl	8001694 <BNOInit>
	led_init();
 8001d8a:	f7fe fe97 	bl	8000abc <led_init>

	readBNOAnglesDeg();
 8001d8e:	f7ff fcad 	bl	80016ec <readBNOAnglesDeg>
	//Read Data from terminal - Example
	HAL_UART_Receive_DMA(&huart2, USBRXArray, 1024);
 8001d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d96:	4929      	ldr	r1, [pc, #164]	; (8001e3c <main+0x154>)
 8001d98:	4829      	ldr	r0, [pc, #164]	; (8001e40 <main+0x158>)
 8001d9a:	f008 f835 	bl	8009e08 <HAL_UART_Receive_DMA>
	//Write Data to terminal - Example
	ret = HAL_UART_Transmit_DMA(&huart2, USBTXArray, 1024);
 8001d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da2:	4928      	ldr	r1, [pc, #160]	; (8001e44 <main+0x15c>)
 8001da4:	4826      	ldr	r0, [pc, #152]	; (8001e40 <main+0x158>)
 8001da6:	f007 ffb3 	bl	8009d10 <HAL_UART_Transmit_DMA>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <main+0x160>)
 8001db0:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart5, UART5RXArray, 128);
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	4925      	ldr	r1, [pc, #148]	; (8001e4c <main+0x164>)
 8001db6:	4826      	ldr	r0, [pc, #152]	; (8001e50 <main+0x168>)
 8001db8:	f008 f826 	bl	8009e08 <HAL_UART_Receive_DMA>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		readBNOAnglesDeg();
 8001dbc:	f7ff fc96 	bl	80016ec <readBNOAnglesDeg>
//		}
//		sprintf(USBTXArray, "%6.3f, Roll: %6.3f, Pitch: %6.3f, Yaw: %6.3f\r\n",
//				CurrentTime(), Roll, Pitch, Yaw);
//		SendToScreen();

		MS56XXCyclicRead();
 8001dc0:	f7ff fef4 	bl	8001bac <MS56XXCyclicRead>
//			sprintf(USBTXArray, "%6.3f, Pressure: %d, Temp: %d\r\n",
//					CurrentTime(), P, TEMP);
//			SendToScreen();
//		}

		CheckButton();
 8001dc4:	f7fe fc44 	bl	8000650 <CheckButton>
		readBNOMagnetometer();
 8001dc8:	f7ff fcba 	bl	8001740 <readBNOMagnetometer>

		if (isNewMagDataAvailable)
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <main+0x16c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01a      	beq.n	8001e0a <main+0x122>
		{
			sprintf(USBTXArray, "%6.3f, MagX: %6.3f, MagY: %6.3f, MagZ: %6.3f\r\n",
 8001dd4:	f000 fd50 	bl	8002878 <CurrentTime>
 8001dd8:	ec59 8b10 	vmov	r8, r9, d0
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <main+0x170>)
 8001dde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001de2:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <main+0x170>)
 8001de4:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8001de8:	481b      	ldr	r0, [pc, #108]	; (8001e58 <main+0x170>)
 8001dea:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 8001dee:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001df2:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001df6:	e9cd 3400 	strd	r3, r4, [sp]
 8001dfa:	4642      	mov	r2, r8
 8001dfc:	464b      	mov	r3, r9
 8001dfe:	4917      	ldr	r1, [pc, #92]	; (8001e5c <main+0x174>)
 8001e00:	4810      	ldr	r0, [pc, #64]	; (8001e44 <main+0x15c>)
 8001e02:	f00a f993 	bl	800c12c <siprintf>
								CurrentTime(), d_mag_xyz.x, d_mag_xyz.y, d_mag_xyz.z);
						SendToScreen();
 8001e06:	f7ff ff4f 	bl	8001ca8 <SendToScreen>
		}

		ParseRCMessage(UART5RXArray);
 8001e0a:	4810      	ldr	r0, [pc, #64]	; (8001e4c <main+0x164>)
 8001e0c:	f7ff ff60 	bl	8001cd0 <ParseRCMessage>
		int PWMValue = 1000 * ((2 - 1) * (double)90.0  / (145.0 - 35.0) + 0.5);
 8001e10:	f240 5326 	movw	r3, #1318	; 0x526
 8001e14:	607b      	str	r3, [r7, #4]
		start_pwm1(PWMValue); // Control Servo
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe fbea 	bl	80005f0 <start_pwm1>
		start_pwm2(0*80); // Control Car Motor
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7fe fc03 	bl	8000628 <start_pwm2>
	{
 8001e22:	e7cb      	b.n	8001dbc <main+0xd4>
 8001e24:	20000e68 	.word	0x20000e68
 8001e28:	20000bd8 	.word	0x20000bd8
 8001e2c:	20000d88 	.word	0x20000d88
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40020000 	.word	0x40020000
 8001e38:	20000b30 	.word	0x20000b30
 8001e3c:	20000294 	.word	0x20000294
 8001e40:	20000f4c 	.word	0x20000f4c
 8001e44:	20000714 	.word	0x20000714
 8001e48:	20000fe8 	.word	0x20000fe8
 8001e4c:	20000694 	.word	0x20000694
 8001e50:	20000d00 	.word	0x20000d00
 8001e54:	20000b38 	.word	0x20000b38
 8001e58:	20000ce8 	.word	0x20000ce8
 8001e5c:	0800ee98 	.word	0x0800ee98

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b0b8      	sub	sp, #224	; 0xe0
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e6a:	2234      	movs	r2, #52	; 0x34
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f009 fb3c 	bl	800b4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	2290      	movs	r2, #144	; 0x90
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f009 fb2d 	bl	800b4ec <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001e92:	f003 fdef 	bl	8005a74 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e96:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <SystemClock_Config+0x140>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <SystemClock_Config+0x140>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <SystemClock_Config+0x140>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <SystemClock_Config+0x144>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a3c      	ldr	r2, [pc, #240]	; (8001fa4 <SystemClock_Config+0x144>)
 8001eb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <SystemClock_Config+0x144>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ec6:	2309      	movs	r3, #9
 8001ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ee0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ee8:	2319      	movs	r3, #25
 8001eea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001eee:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001ef2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001efc:	2302      	movs	r3, #2
 8001efe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f02:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 fc9c 	bl	8006844 <HAL_RCC_OscConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001f12:	f000 fcef 	bl	80028f4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f16:	f003 fdbd 	bl	8005a94 <HAL_PWREx_EnableOverDrive>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f20:	f000 fce8 	bl	80028f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f24:	230f      	movs	r3, #15
 8001f26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f4a:	2107      	movs	r1, #7
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 ff27 	bl	8006da0 <HAL_RCC_ClockConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001f58:	f000 fccc 	bl	80028f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_RTC
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <SystemClock_Config+0x148>)
 8001f5e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f66:	2300      	movs	r3, #0
 8001f68:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_SYSCLK;
 8001f72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001f7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f7e:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	4618      	mov	r0, r3
 8001f86:	f005 f909 	bl	800719c <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <SystemClock_Config+0x134>
  {
    Error_Handler();
 8001f90:	f000 fcb0 	bl	80028f4 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8001f94:	f004 fff0 	bl	8006f78 <HAL_RCC_EnableCSS>
}
 8001f98:	bf00      	nop
 8001f9a:	37e0      	adds	r7, #224	; 0xe0
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	008044b0 	.word	0x008044b0

08001fac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001fbe:	4b21      	ldr	r3, [pc, #132]	; (8002044 <MX_ADC1_Init+0x98>)
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <MX_ADC1_Init+0x9c>)
 8001fc2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <MX_ADC1_Init+0x98>)
 8001fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <MX_ADC1_Init+0x98>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <MX_ADC1_Init+0x98>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <MX_ADC1_Init+0x98>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fde:	4b19      	ldr	r3, [pc, #100]	; (8002044 <MX_ADC1_Init+0x98>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <MX_ADC1_Init+0x98>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <MX_ADC1_Init+0x98>)
 8001fee:	4a17      	ldr	r2, [pc, #92]	; (800204c <MX_ADC1_Init+0xa0>)
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_ADC1_Init+0x98>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_ADC1_Init+0x98>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_ADC1_Init+0x98>)
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_ADC1_Init+0x98>)
 8002008:	2201      	movs	r2, #1
 800200a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <MX_ADC1_Init+0x98>)
 800200e:	f001 f9c5 	bl	800339c <HAL_ADC_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002018:	f000 fc6c 	bl	80028f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800201c:	230d      	movs	r3, #13
 800201e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002020:	2301      	movs	r3, #1
 8002022:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_ADC1_Init+0x98>)
 800202e:	f001 fc25 	bl	800387c <HAL_ADC_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002038:	f000 fc5c 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000d88 	.word	0x20000d88
 8002048:	40012000 	.word	0x40012000
 800204c:	0f000001 	.word	0x0f000001

08002050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_I2C1_Init+0x74>)
 8002056:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <MX_I2C1_Init+0x78>)
 8002058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <MX_I2C1_Init+0x74>)
 800205c:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <MX_I2C1_Init+0x7c>)
 800205e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 82;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <MX_I2C1_Init+0x74>)
 8002062:	2252      	movs	r2, #82	; 0x52
 8002064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <MX_I2C1_Init+0x74>)
 8002068:	2201      	movs	r2, #1
 800206a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <MX_I2C1_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002072:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <MX_I2C1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_I2C1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_I2C1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_I2C1_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800208a:	480e      	ldr	r0, [pc, #56]	; (80020c4 <MX_I2C1_Init+0x74>)
 800208c:	f002 fcca 	bl	8004a24 <HAL_I2C_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002096:	f000 fc2d 	bl	80028f4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800209a:	2100      	movs	r1, #0
 800209c:	4809      	ldr	r0, [pc, #36]	; (80020c4 <MX_I2C1_Init+0x74>)
 800209e:	f003 f935 	bl	800530c <HAL_I2CEx_ConfigAnalogFilter>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020a8:	f000 fc24 	bl	80028f4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020ac:	2100      	movs	r1, #0
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_I2C1_Init+0x74>)
 80020b0:	f003 f977 	bl	80053a2 <HAL_I2CEx_ConfigDigitalFilter>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020ba:	f000 fc1b 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000c18 	.word	0x20000c18
 80020c8:	40005400 	.word	0x40005400
 80020cc:	6000030d 	.word	0x6000030d

080020d0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_QUADSPI_Init+0x50>)
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <MX_QUADSPI_Init+0x54>)
 80020d8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MX_QUADSPI_Init+0x50>)
 80020dc:	22ff      	movs	r2, #255	; 0xff
 80020de:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <MX_QUADSPI_Init+0x50>)
 80020e2:	2220      	movs	r2, #32
 80020e4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <MX_QUADSPI_Init+0x50>)
 80020e8:	2210      	movs	r2, #16
 80020ea:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <MX_QUADSPI_Init+0x50>)
 80020ee:	2217      	movs	r2, #23
 80020f0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <MX_QUADSPI_Init+0x50>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80020f8:	4b09      	ldr	r3, [pc, #36]	; (8002120 <MX_QUADSPI_Init+0x50>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <MX_QUADSPI_Init+0x50>)
 8002100:	2280      	movs	r2, #128	; 0x80
 8002102:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <MX_QUADSPI_Init+0x50>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800210a:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_QUADSPI_Init+0x50>)
 800210c:	f003 fd12 	bl	8005b34 <HAL_QSPI_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002116:	f000 fbed 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000fec 	.word	0x20000fec
 8002124:	a0001000 	.word	0xa0001000

08002128 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002144:	4b24      	ldr	r3, [pc, #144]	; (80021d8 <MX_RTC_Init+0xb0>)
 8002146:	4a25      	ldr	r2, [pc, #148]	; (80021dc <MX_RTC_Init+0xb4>)
 8002148:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <MX_RTC_Init+0xb0>)
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_RTC_Init+0xb0>)
 8002152:	227f      	movs	r2, #127	; 0x7f
 8002154:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_RTC_Init+0xb0>)
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MX_RTC_Init+0xb0>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <MX_RTC_Init+0xb0>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002168:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_RTC_Init+0xb0>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800216e:	481a      	ldr	r0, [pc, #104]	; (80021d8 <MX_RTC_Init+0xb0>)
 8002170:	f005 fc3a 	bl	80079e8 <HAL_RTC_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800217a:	f000 fbbb 	bl	80028f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8002182:	2300      	movs	r3, #0
 8002184:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	2200      	movs	r2, #0
 8002198:	4619      	mov	r1, r3
 800219a:	480f      	ldr	r0, [pc, #60]	; (80021d8 <MX_RTC_Init+0xb0>)
 800219c:	f005 fca0 	bl	8007ae0 <HAL_RTC_SetTime>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80021a6:	f000 fba5 	bl	80028f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021aa:	2301      	movs	r3, #1
 80021ac:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80021ae:	2301      	movs	r3, #1
 80021b0:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_RTC_Init+0xb0>)
 80021c2:	f005 fd4b 	bl	8007c5c <HAL_RTC_SetDate>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80021cc:	f000 fb92 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021d0:	bf00      	nop
 80021d2:	3720      	adds	r7, #32
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000e30 	.word	0x20000e30
 80021dc:	40002800 	.word	0x40002800

080021e0 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_SDMMC1_MMC_Init+0x44>)
 80021e6:	4a10      	ldr	r2, [pc, #64]	; (8002228 <MX_SDMMC1_MMC_Init+0x48>)
 80021e8:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_SDMMC1_MMC_Init+0x44>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_SDMMC1_MMC_Init+0x44>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <MX_SDMMC1_MMC_Init+0x44>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_SDMMC1_MMC_Init+0x44>)
 80021fe:	2200      	movs	r2, #0
 8002200:	611a      	str	r2, [r3, #16]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <MX_SDMMC1_MMC_Init+0x44>)
 8002204:	2200      	movs	r2, #0
 8002206:	615a      	str	r2, [r3, #20]
  hmmc1.Init.ClockDiv = 0;
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_SDMMC1_MMC_Init+0x44>)
 800220a:	2200      	movs	r2, #0
 800220c:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	; (8002224 <MX_SDMMC1_MMC_Init+0x44>)
 8002210:	f003 f913 	bl	800543a <HAL_MMC_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_SDMMC1_MMC_Init+0x3e>
  {
    Error_Handler();
 800221a:	f000 fb6b 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000c64 	.word	0x20000c64
 8002228:	40012c00 	.word	0x40012c00

0800222c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002230:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <MX_SPI1_Init+0x78>)
 8002234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800223c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002244:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002246:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800224a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_SPI1_Init+0x74>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002252:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_SPI1_Init+0x74>)
 800225a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002262:	2220      	movs	r2, #32
 8002264:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <MX_SPI1_Init+0x74>)
 800226e:	2200      	movs	r2, #0
 8002270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_SPI1_Init+0x74>)
 800227a:	2207      	movs	r2, #7
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MX_SPI1_Init+0x74>)
 8002286:	2208      	movs	r2, #8
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_SPI1_Init+0x74>)
 800228c:	f005 fe00 	bl	8007e90 <HAL_SPI_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002296:	f000 fb2d 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000ea8 	.word	0x20000ea8
 80022a4:	40013000 	.word	0x40013000

080022a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b09a      	sub	sp, #104	; 0x68
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	615a      	str	r2, [r3, #20]
 80022da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	222c      	movs	r2, #44	; 0x2c
 80022e0:	2100      	movs	r1, #0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f009 f902 	bl	800b4ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022e8:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <MX_TIM1_Init+0x178>)
 80022ea:	4a4e      	ldr	r2, [pc, #312]	; (8002424 <MX_TIM1_Init+0x17c>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 539;
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <MX_TIM1_Init+0x178>)
 80022f0:	f240 221b 	movw	r2, #539	; 0x21b
 80022f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <MX_TIM1_Init+0x178>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8000;
 80022fc:	4b48      	ldr	r3, [pc, #288]	; (8002420 <MX_TIM1_Init+0x178>)
 80022fe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002302:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002304:	4b46      	ldr	r3, [pc, #280]	; (8002420 <MX_TIM1_Init+0x178>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <MX_TIM1_Init+0x178>)
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002310:	4b43      	ldr	r3, [pc, #268]	; (8002420 <MX_TIM1_Init+0x178>)
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002316:	4842      	ldr	r0, [pc, #264]	; (8002420 <MX_TIM1_Init+0x178>)
 8002318:	f006 fce0 	bl	8008cdc <HAL_TIM_IC_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8002322:	f000 fae7 	bl	80028f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002326:	483e      	ldr	r0, [pc, #248]	; (8002420 <MX_TIM1_Init+0x178>)
 8002328:	f006 fc68 	bl	8008bfc <HAL_TIM_PWM_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002332:	f000 fadf 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002336:	2320      	movs	r3, #32
 8002338:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800233a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800233e:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002344:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002348:	4619      	mov	r1, r3
 800234a:	4835      	ldr	r0, [pc, #212]	; (8002420 <MX_TIM1_Init+0x178>)
 800234c:	f007 faf4 	bl	8009938 <HAL_TIMEx_MasterConfigSynchronization>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 8002356:	f000 facd 	bl	80028f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800235a:	2300      	movs	r3, #0
 800235c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800235e:	2301      	movs	r3, #1
 8002360:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002362:	2300      	movs	r3, #0
 8002364:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigIC.ICFilter = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800236a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800236e:	2200      	movs	r2, #0
 8002370:	4619      	mov	r1, r3
 8002372:	482b      	ldr	r0, [pc, #172]	; (8002420 <MX_TIM1_Init+0x178>)
 8002374:	f006 fcdd 	bl	8008d32 <HAL_TIM_IC_ConfigChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800237e:	f000 fab9 	bl	80028f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002382:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002386:	2208      	movs	r2, #8
 8002388:	4619      	mov	r1, r3
 800238a:	4825      	ldr	r0, [pc, #148]	; (8002420 <MX_TIM1_Init+0x178>)
 800238c:	f006 fcd1 	bl	8008d32 <HAL_TIM_IC_ConfigChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002396:	f000 faad 	bl	80028f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800239a:	2360      	movs	r3, #96	; 0x60
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 600;
 800239e:	f44f 7316 	mov.w	r3, #600	; 0x258
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023b8:	220c      	movs	r2, #12
 80023ba:	4619      	mov	r1, r3
 80023bc:	4818      	ldr	r0, [pc, #96]	; (8002420 <MX_TIM1_Init+0x178>)
 80023be:	f006 fd55 	bl	8008e6c <HAL_TIM_PWM_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80023c8:	f000 fa94 	bl	80028f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	4619      	mov	r1, r3
 8002400:	4807      	ldr	r0, [pc, #28]	; (8002420 <MX_TIM1_Init+0x178>)
 8002402:	f007 fb27 	bl	8009a54 <HAL_TIMEx_ConfigBreakDeadTime>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 800240c:	f000 fa72 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002410:	4803      	ldr	r0, [pc, #12]	; (8002420 <MX_TIM1_Init+0x178>)
 8002412:	f000 fcef 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 8002416:	bf00      	nop
 8002418:	3768      	adds	r7, #104	; 0x68
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000e68 	.word	0x20000e68
 8002424:	40010000 	.word	0x40010000

08002428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800243a:	463b      	mov	r3, r7
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
 8002448:	615a      	str	r2, [r3, #20]
 800244a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <MX_TIM2_Init+0xb4>)
 800244e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 539;
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <MX_TIM2_Init+0xb4>)
 8002456:	f240 221b 	movw	r2, #539	; 0x21b
 800245a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <MX_TIM2_Init+0xb4>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <MX_TIM2_Init+0xb4>)
 8002464:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <MX_TIM2_Init+0xb4>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <MX_TIM2_Init+0xb4>)
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002476:	4819      	ldr	r0, [pc, #100]	; (80024dc <MX_TIM2_Init+0xb4>)
 8002478:	f006 fbc0 	bl	8008bfc <HAL_TIM_PWM_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8002482:	f000 fa37 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248e:	f107 031c 	add.w	r3, r7, #28
 8002492:	4619      	mov	r1, r3
 8002494:	4811      	ldr	r0, [pc, #68]	; (80024dc <MX_TIM2_Init+0xb4>)
 8002496:	f007 fa4f 	bl	8009938 <HAL_TIMEx_MasterConfigSynchronization>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80024a0:	f000 fa28 	bl	80028f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a4:	2360      	movs	r3, #96	; 0x60
 80024a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 600;
 80024a8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80024ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b6:	463b      	mov	r3, r7
 80024b8:	2200      	movs	r2, #0
 80024ba:	4619      	mov	r1, r3
 80024bc:	4807      	ldr	r0, [pc, #28]	; (80024dc <MX_TIM2_Init+0xb4>)
 80024be:	f006 fcd5 	bl	8008e6c <HAL_TIM_PWM_ConfigChannel>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 80024c8:	f000 fa14 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024cc:	4803      	ldr	r0, [pc, #12]	; (80024dc <MX_TIM2_Init+0xb4>)
 80024ce:	f000 fc91 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	; 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000f0c 	.word	0x20000f0c

080024e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	; 0x28
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e6:	f107 031c 	add.w	r3, r7, #28
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024f2:	463b      	mov	r3, r7
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	615a      	str	r2, [r3, #20]
 8002502:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <MX_TIM4_Init+0xdc>)
 8002506:	4a2e      	ldr	r2, [pc, #184]	; (80025c0 <MX_TIM4_Init+0xe0>)
 8002508:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 539;
 800250a:	4b2c      	ldr	r3, [pc, #176]	; (80025bc <MX_TIM4_Init+0xdc>)
 800250c:	f240 221b 	movw	r2, #539	; 0x21b
 8002510:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <MX_TIM4_Init+0xdc>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8000;
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <MX_TIM4_Init+0xdc>)
 800251a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800251e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <MX_TIM4_Init+0xdc>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002526:	4b25      	ldr	r3, [pc, #148]	; (80025bc <MX_TIM4_Init+0xdc>)
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800252c:	4823      	ldr	r0, [pc, #140]	; (80025bc <MX_TIM4_Init+0xdc>)
 800252e:	f006 fb65 	bl	8008bfc <HAL_TIM_PWM_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8002538:	f000 f9dc 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253c:	2300      	movs	r3, #0
 800253e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4619      	mov	r1, r3
 800254a:	481c      	ldr	r0, [pc, #112]	; (80025bc <MX_TIM4_Init+0xdc>)
 800254c:	f007 f9f4 	bl	8009938 <HAL_TIMEx_MasterConfigSynchronization>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8002556:	f000 f9cd 	bl	80028f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255a:	2360      	movs	r3, #96	; 0x60
 800255c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800256a:	463b      	mov	r3, r7
 800256c:	2200      	movs	r2, #0
 800256e:	4619      	mov	r1, r3
 8002570:	4812      	ldr	r0, [pc, #72]	; (80025bc <MX_TIM4_Init+0xdc>)
 8002572:	f006 fc7b 	bl	8008e6c <HAL_TIM_PWM_ConfigChannel>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800257c:	f000 f9ba 	bl	80028f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002580:	463b      	mov	r3, r7
 8002582:	2204      	movs	r2, #4
 8002584:	4619      	mov	r1, r3
 8002586:	480d      	ldr	r0, [pc, #52]	; (80025bc <MX_TIM4_Init+0xdc>)
 8002588:	f006 fc70 	bl	8008e6c <HAL_TIM_PWM_ConfigChannel>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8002592:	f000 f9af 	bl	80028f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002596:	463b      	mov	r3, r7
 8002598:	220c      	movs	r2, #12
 800259a:	4619      	mov	r1, r3
 800259c:	4807      	ldr	r0, [pc, #28]	; (80025bc <MX_TIM4_Init+0xdc>)
 800259e:	f006 fc65 	bl	8008e6c <HAL_TIM_PWM_ConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 80025a8:	f000 f9a4 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025ac:	4803      	ldr	r0, [pc, #12]	; (80025bc <MX_TIM4_Init+0xdc>)
 80025ae:	f000 fc21 	bl	8002df4 <HAL_TIM_MspPostInit>

}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000bd8 	.word	0x20000bd8
 80025c0:	40000800 	.word	0x40000800

080025c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80025c8:	4b14      	ldr	r3, [pc, #80]	; (800261c <MX_UART5_Init+0x58>)
 80025ca:	4a15      	ldr	r2, [pc, #84]	; (8002620 <MX_UART5_Init+0x5c>)
 80025cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <MX_UART5_Init+0x58>)
 80025d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <MX_UART5_Init+0x58>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <MX_UART5_Init+0x58>)
 80025de:	2200      	movs	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_UART5_Init+0x58>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <MX_UART5_Init+0x58>)
 80025ea:	220c      	movs	r2, #12
 80025ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <MX_UART5_Init+0x58>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <MX_UART5_Init+0x58>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <MX_UART5_Init+0x58>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <MX_UART5_Init+0x58>)
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <MX_UART5_Init+0x58>)
 8002608:	f007 faa2 	bl	8009b50 <HAL_UART_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002612:	f000 f96f 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002616:	bf00      	nop
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000d00 	.word	0x20000d00
 8002620:	40005000 	.word	0x40005000

08002624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <MX_USART2_UART_Init+0x58>)
 800262a:	4a15      	ldr	r2, [pc, #84]	; (8002680 <MX_USART2_UART_Init+0x5c>)
 800262c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002630:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <MX_USART2_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_USART2_UART_Init+0x58>)
 800264a:	220c      	movs	r2, #12
 800264c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002656:	2200      	movs	r2, #0
 8002658:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <MX_USART2_UART_Init+0x58>)
 800265c:	2200      	movs	r2, #0
 800265e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002662:	2200      	movs	r2, #0
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <MX_USART2_UART_Init+0x58>)
 8002668:	f007 fa72 	bl	8009b50 <HAL_UART_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002672:	f000 f93f 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000f4c 	.word	0x20000f4c
 8002680:	40004400 	.word	0x40004400

08002684 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <MX_DMA_Init+0x48>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <MX_DMA_Init+0x48>)
 8002690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002694:	6313      	str	r3, [r2, #48]	; 0x30
 8002696:	4b0d      	ldr	r3, [pc, #52]	; (80026cc <MX_DMA_Init+0x48>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2010      	movs	r0, #16
 80026a8:	f001 fc11 	bl	8003ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026ac:	2010      	movs	r0, #16
 80026ae:	f001 fc2a 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2011      	movs	r0, #17
 80026b8:	f001 fc09 	bl	8003ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80026bc:	2011      	movs	r0, #17
 80026be:	f001 fc22 	bl	8003f06 <HAL_NVIC_EnableIRQ>

}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800

080026d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	; 0x30
 80026d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026e6:	4b5d      	ldr	r3, [pc, #372]	; (800285c <MX_GPIO_Init+0x18c>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a5c      	ldr	r2, [pc, #368]	; (800285c <MX_GPIO_Init+0x18c>)
 80026ec:	f043 0310 	orr.w	r3, r3, #16
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b5a      	ldr	r3, [pc, #360]	; (800285c <MX_GPIO_Init+0x18c>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	4b57      	ldr	r3, [pc, #348]	; (800285c <MX_GPIO_Init+0x18c>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a56      	ldr	r2, [pc, #344]	; (800285c <MX_GPIO_Init+0x18c>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b54      	ldr	r3, [pc, #336]	; (800285c <MX_GPIO_Init+0x18c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <MX_GPIO_Init+0x18c>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a50      	ldr	r2, [pc, #320]	; (800285c <MX_GPIO_Init+0x18c>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b4e      	ldr	r3, [pc, #312]	; (800285c <MX_GPIO_Init+0x18c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	4b4b      	ldr	r3, [pc, #300]	; (800285c <MX_GPIO_Init+0x18c>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a4a      	ldr	r2, [pc, #296]	; (800285c <MX_GPIO_Init+0x18c>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <MX_GPIO_Init+0x18c>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	4b45      	ldr	r3, [pc, #276]	; (800285c <MX_GPIO_Init+0x18c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a44      	ldr	r2, [pc, #272]	; (800285c <MX_GPIO_Init+0x18c>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b42      	ldr	r3, [pc, #264]	; (800285c <MX_GPIO_Init+0x18c>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <MX_GPIO_Init+0x18c>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a3e      	ldr	r2, [pc, #248]	; (800285c <MX_GPIO_Init+0x18c>)
 8002764:	f043 0308 	orr.w	r3, r3, #8
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b3c      	ldr	r3, [pc, #240]	; (800285c <MX_GPIO_Init+0x18c>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Flash_Reset_Pin|MS5611_CS_Pin, GPIO_PIN_RESET);
 8002776:	2200      	movs	r2, #0
 8002778:	2112      	movs	r1, #18
 800277a:	4839      	ldr	r0, [pc, #228]	; (8002860 <MX_GPIO_Init+0x190>)
 800277c:	f002 f938 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE9 PE10 PE11 
                           PE12 PE13 PE14 PE15 
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8002780:	f64f 637f 	movw	r3, #65151	; 0xfe7f
 8002784:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002786:	2303      	movs	r3, #3
 8002788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800278e:	f107 031c 	add.w	r3, r7, #28
 8002792:	4619      	mov	r1, r3
 8002794:	4833      	ldr	r0, [pc, #204]	; (8002864 <MX_GPIO_Init+0x194>)
 8002796:	f001 ff69 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2 
                           PC4 PC5 PC6 PC7 
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2 
 800279a:	f242 63f7 	movw	r3, #9975	; 0x26f7
 800279e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a0:	2303      	movs	r3, #3
 80027a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	4619      	mov	r1, r3
 80027ae:	482e      	ldr	r0, [pc, #184]	; (8002868 <MX_GPIO_Init+0x198>)
 80027b0:	f001 ff5c 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027b4:	2301      	movs	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027bc:	2301      	movs	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	4619      	mov	r1, r3
 80027c6:	4826      	ldr	r0, [pc, #152]	; (8002860 <MX_GPIO_Init+0x190>)
 80027c8:	f001 ff50 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : Flash_Reset_Pin */
  GPIO_InitStruct.Pin = Flash_Reset_Pin;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Flash_Reset_GPIO_Port, &GPIO_InitStruct);
 80027dc:	f107 031c 	add.w	r3, r7, #28
 80027e0:	4619      	mov	r1, r3
 80027e2:	481f      	ldr	r0, [pc, #124]	; (8002860 <MX_GPIO_Init+0x190>)
 80027e4:	f001 ff42 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : MS5611_CS_Pin */
  GPIO_InitStruct.Pin = MS5611_CS_Pin;
 80027e8:	2310      	movs	r3, #16
 80027ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MS5611_CS_GPIO_Port, &GPIO_InitStruct);
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	4619      	mov	r1, r3
 80027fe:	4818      	ldr	r0, [pc, #96]	; (8002860 <MX_GPIO_Init+0x190>)
 8002800:	f001 ff34 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA12 
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_12 
 8002804:	f249 23c0 	movw	r3, #37568	; 0x92c0
 8002808:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280a:	2303      	movs	r3, #3
 800280c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	4619      	mov	r1, r3
 8002818:	4811      	ldr	r0, [pc, #68]	; (8002860 <MX_GPIO_Init+0x190>)
 800281a:	f001 ff27 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 800281e:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8002822:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002824:	2303      	movs	r3, #3
 8002826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	4619      	mov	r1, r3
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <MX_GPIO_Init+0x19c>)
 8002834:	f001 ff1a 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 
                           PD14 PD0 PD1 PD3 
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002838:	f644 73fb 	movw	r3, #20475	; 0x4ffb
 800283c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3 
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800283e:	2303      	movs	r3, #3
 8002840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002846:	f107 031c 	add.w	r3, r7, #28
 800284a:	4619      	mov	r1, r3
 800284c:	4808      	ldr	r0, [pc, #32]	; (8002870 <MX_GPIO_Init+0x1a0>)
 800284e:	f001 ff0d 	bl	800466c <HAL_GPIO_Init>

}
 8002852:	bf00      	nop
 8002854:	3730      	adds	r7, #48	; 0x30
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40020000 	.word	0x40020000
 8002864:	40021000 	.word	0x40021000
 8002868:	40020800 	.word	0x40020800
 800286c:	40020400 	.word	0x40020400
 8002870:	40020c00 	.word	0x40020c00
 8002874:	00000000 	.word	0x00000000

08002878 <CurrentTime>:

/* USER CODE BEGIN 4 */
double CurrentTime(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	return HAL_GetTick() / 1000.0;
 800287c:	f000 fd60 	bl	8003340 <HAL_GetTick>
 8002880:	ee07 0a90 	vmov	s15, r0
 8002884:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002888:	ed9f 6b05 	vldr	d6, [pc, #20]	; 80028a0 <CurrentTime+0x28>
 800288c:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002890:	eeb0 7b45 	vmov.f64	d7, d5
}
 8002894:	eeb0 0b47 	vmov.f64	d0, d7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	f3af 8000 	nop.w
 80028a0:	00000000 	.word	0x00000000
 80028a4:	408f4000 	.word	0x408f4000

080028a8 <measureBattery>:

double measureBattery()
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
	uint32_t D = HAL_ADC_GetValue(&hadc1);
 80028ae:	4810      	ldr	r0, [pc, #64]	; (80028f0 <measureBattery+0x48>)
 80028b0:	f000 ffb9 	bl	8003826 <HAL_ADC_GetValue>
 80028b4:	6078      	str	r0, [r7, #4]
	return 2 * 3.3 * D / 4096.0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80028c0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80028e0 <measureBattery+0x38>
 80028c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028c8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80028e8 <measureBattery+0x40>
 80028cc:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80028d0:	eeb0 7b45 	vmov.f64	d7, d5
}
 80028d4:	eeb0 0b47 	vmov.f64	d0, d7
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	66666666 	.word	0x66666666
 80028e4:	401a6666 	.word	0x401a6666
 80028e8:	00000000 	.word	0x00000000
 80028ec:	40b00000 	.word	0x40b00000
 80028f0:	20000d88 	.word	0x20000d88

080028f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <HAL_MspInit+0x44>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_MspInit+0x44>)
 8002910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002914:	6413      	str	r3, [r2, #64]	; 0x40
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_MspInit+0x44>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <HAL_MspInit+0x44>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a08      	ldr	r2, [pc, #32]	; (8002948 <HAL_MspInit+0x44>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_MspInit+0x44>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800

0800294c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_ADC_MspInit+0x84>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d12b      	bne.n	80029c6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800296e:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_ADC_MspInit+0x88>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002972:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_ADC_MspInit+0x88>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
 800297a:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <HAL_ADC_MspInit+0x88>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <HAL_ADC_MspInit+0x88>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a12      	ldr	r2, [pc, #72]	; (80029d4 <HAL_ADC_MspInit+0x88>)
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_ADC_MspInit+0x88>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800299e:	2308      	movs	r3, #8
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a2:	2303      	movs	r3, #3
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 0314 	add.w	r3, r7, #20
 80029ae:	4619      	mov	r1, r3
 80029b0:	4809      	ldr	r0, [pc, #36]	; (80029d8 <HAL_ADC_MspInit+0x8c>)
 80029b2:	f001 fe5b 	bl	800466c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2012      	movs	r0, #18
 80029bc:	f001 fa87 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80029c0:	2012      	movs	r0, #18
 80029c2:	f001 faa0 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029c6:	bf00      	nop
 80029c8:	3728      	adds	r7, #40	; 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40012000 	.word	0x40012000
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020800 	.word	0x40020800

080029dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	609a      	str	r2, [r3, #8]
 80029f0:	60da      	str	r2, [r3, #12]
 80029f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_I2C_MspInit+0x8c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d12f      	bne.n	8002a5e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_I2C_MspInit+0x90>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_I2C_MspInit+0x90>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_I2C_MspInit+0x90>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	613b      	str	r3, [r7, #16]
 8002a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a16:	23c0      	movs	r3, #192	; 0xc0
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a1a:	2312      	movs	r3, #18
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a22:	2303      	movs	r3, #3
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a26:	2304      	movs	r3, #4
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	480f      	ldr	r0, [pc, #60]	; (8002a70 <HAL_I2C_MspInit+0x94>)
 8002a32:	f001 fe1b 	bl	800466c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_I2C_MspInit+0x90>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <HAL_I2C_MspInit+0x90>)
 8002a3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a40:	6413      	str	r3, [r2, #64]	; 0x40
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <HAL_I2C_MspInit+0x90>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2100      	movs	r1, #0
 8002a52:	201f      	movs	r0, #31
 8002a54:	f001 fa3b 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a58:	201f      	movs	r0, #31
 8002a5a:	f001 fa54 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a5e:	bf00      	nop
 8002a60:	3728      	adds	r7, #40	; 0x28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	40005400 	.word	0x40005400
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40020400 	.word	0x40020400

08002a74 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08c      	sub	sp, #48	; 0x30
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a38      	ldr	r2, [pc, #224]	; (8002b74 <HAL_QSPI_MspInit+0x100>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d169      	bne.n	8002b6a <HAL_QSPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	4a37      	ldr	r2, [pc, #220]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	6393      	str	r3, [r2, #56]	; 0x38
 8002aa2:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	4b32      	ldr	r3, [pc, #200]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a31      	ldr	r2, [pc, #196]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b2f      	ldr	r3, [pc, #188]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002acc:	f043 0310 	orr.w	r3, r3, #16
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ade:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <HAL_QSPI_MspInit+0x104>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PE7     ------> QUADSPI_BK2_IO0
    PE8     ------> QUADSPI_BK2_IO1
    PC11     ------> QUADSPI_BK2_NCS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002af6:	2304      	movs	r3, #4
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afa:	2302      	movs	r3, #2
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002b06:	2309      	movs	r3, #9
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0a:	f107 031c 	add.w	r3, r7, #28
 8002b0e:	4619      	mov	r1, r3
 8002b10:	481a      	ldr	r0, [pc, #104]	; (8002b7c <HAL_QSPI_MspInit+0x108>)
 8002b12:	f001 fdab 	bl	800466c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b16:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002b28:	230a      	movs	r3, #10
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	4619      	mov	r1, r3
 8002b32:	4813      	ldr	r0, [pc, #76]	; (8002b80 <HAL_QSPI_MspInit+0x10c>)
 8002b34:	f001 fd9a 	bl	800466c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002b4a:	2309      	movs	r3, #9
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <HAL_QSPI_MspInit+0x110>)
 8002b56:	f001 fd89 	bl	800466c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	205c      	movs	r0, #92	; 0x5c
 8002b60:	f001 f9b5 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002b64:	205c      	movs	r0, #92	; 0x5c
 8002b66:	f001 f9ce 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3730      	adds	r7, #48	; 0x30
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	a0001000 	.word	0xa0001000
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40020800 	.word	0x40020800

08002b88 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_RTC_MspInit+0x2c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d105      	bne.n	8002ba6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_RTC_MspInit+0x30>)
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <HAL_RTC_MspInit+0x30>)
 8002ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40002800 	.word	0x40002800
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc4:	f107 0314 	add.w	r3, r7, #20
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <HAL_MMC_MspInit+0xb4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d144      	bne.n	8002c68 <HAL_MMC_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002bde:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be2:	4a24      	ldr	r2, [pc, #144]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a1e      	ldr	r2, [pc, #120]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0e:	4b19      	ldr	r3, [pc, #100]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a18      	ldr	r2, [pc, #96]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_MMC_MspInit+0xb8>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002c26:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c38:	230c      	movs	r3, #12
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <HAL_MMC_MspInit+0xbc>)
 8002c44:	f001 fd12 	bl	800466c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c48:	2304      	movs	r3, #4
 8002c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c54:	2303      	movs	r3, #3
 8002c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c58:	230c      	movs	r3, #12
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4619      	mov	r1, r3
 8002c62:	4806      	ldr	r0, [pc, #24]	; (8002c7c <HAL_MMC_MspInit+0xc0>)
 8002c64:	f001 fd02 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002c68:	bf00      	nop
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00

08002c80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_SPI_MspInit+0x7c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d127      	bne.n	8002cf2 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <HAL_SPI_MspInit+0x80>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_SPI_MspInit+0x80>)
 8002ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cac:	6453      	str	r3, [r2, #68]	; 0x44
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_SPI_MspInit+0x80>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_SPI_MspInit+0x80>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <HAL_SPI_MspInit+0x80>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <HAL_SPI_MspInit+0x80>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002cd2:	2338      	movs	r3, #56	; 0x38
 8002cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ce2:	2305      	movs	r3, #5
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	; (8002d04 <HAL_SPI_MspInit+0x84>)
 8002cee:	f001 fcbd 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3728      	adds	r7, #40	; 0x28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40013000 	.word	0x40013000
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40020400 	.word	0x40020400

08002d08 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	; 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_TIM_IC_MspInit+0x7c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d128      	bne.n	8002d7c <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d2a:	4b17      	ldr	r3, [pc, #92]	; (8002d88 <HAL_TIM_IC_MspInit+0x80>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <HAL_TIM_IC_MspInit+0x80>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_TIM_IC_MspInit+0x80>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_TIM_IC_MspInit+0x80>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <HAL_TIM_IC_MspInit+0x80>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_TIM_IC_MspInit+0x80>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PWM3_J5_P1_Pin|PWM4_J5_P4_Pin;
 8002d5a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <HAL_TIM_IC_MspInit+0x84>)
 8002d78:	f001 fc78 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d7c:	bf00      	nop
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000

08002d90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da0:	d10c      	bne.n	8002dbc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002da2:	4b12      	ldr	r3, [pc, #72]	; (8002dec <HAL_TIM_PWM_MspInit+0x5c>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a11      	ldr	r2, [pc, #68]	; (8002dec <HAL_TIM_PWM_MspInit+0x5c>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_TIM_PWM_MspInit+0x5c>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002dba:	e010      	b.n	8002dde <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM4)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0b      	ldr	r2, [pc, #44]	; (8002df0 <HAL_TIM_PWM_MspInit+0x60>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10b      	bne.n	8002dde <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_TIM_PWM_MspInit+0x5c>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a08      	ldr	r2, [pc, #32]	; (8002dec <HAL_TIM_PWM_MspInit+0x5c>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_TIM_PWM_MspInit+0x5c>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40000800 	.word	0x40000800

08002df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a34      	ldr	r2, [pc, #208]	; (8002ee4 <HAL_TIM_MspPostInit+0xf0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d11d      	bne.n	8002e52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a33      	ldr	r2, [pc, #204]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM2_J1_P4_Pin;
 8002e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM2_J1_P4_GPIO_Port, &GPIO_InitStruct);
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4828      	ldr	r0, [pc, #160]	; (8002eec <HAL_TIM_MspPostInit+0xf8>)
 8002e4c:	f001 fc0e 	bl	800466c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002e50:	e043      	b.n	8002eda <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5a:	d11c      	bne.n	8002e96 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	4a21      	ldr	r2, [pc, #132]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6313      	str	r3, [r2, #48]	; 0x30
 8002e68:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM1_J1_P1_Pin;
 8002e74:	2320      	movs	r3, #32
 8002e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e80:	2300      	movs	r3, #0
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e84:	2301      	movs	r3, #1
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_J1_P1_GPIO_Port, &GPIO_InitStruct);
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4817      	ldr	r0, [pc, #92]	; (8002eec <HAL_TIM_MspPostInit+0xf8>)
 8002e90:	f001 fbec 	bl	800466c <HAL_GPIO_Init>
}
 8002e94:	e021      	b.n	8002eda <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a15      	ldr	r2, [pc, #84]	; (8002ef0 <HAL_TIM_MspPostInit+0xfc>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d11c      	bne.n	8002eda <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4a10      	ldr	r2, [pc, #64]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002ea6:	f043 0308 	orr.w	r3, r3, #8
 8002eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002eac:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <HAL_TIM_MspPostInit+0xf4>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Green_LED_Pin|Red_LED_Pin|Blue_LED_Pin;
 8002eb8:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4807      	ldr	r0, [pc, #28]	; (8002ef4 <HAL_TIM_MspPostInit+0x100>)
 8002ed6:	f001 fbc9 	bl	800466c <HAL_GPIO_Init>
}
 8002eda:	bf00      	nop
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40020c00 	.word	0x40020c00

08002ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08c      	sub	sp, #48	; 0x30
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a69      	ldr	r2, [pc, #420]	; (80030bc <HAL_UART_MspInit+0x1c4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d131      	bne.n	8002f7e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f1a:	4b69      	ldr	r3, [pc, #420]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a68      	ldr	r2, [pc, #416]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
 8002f26:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a62      	ldr	r2, [pc, #392]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b60      	ldr	r3, [pc, #384]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration    
    PB8     ------> UART5_RX
    PB9     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8002f5c:	2307      	movs	r3, #7
 8002f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	4619      	mov	r1, r3
 8002f66:	4857      	ldr	r0, [pc, #348]	; (80030c4 <HAL_UART_MspInit+0x1cc>)
 8002f68:	f001 fb80 	bl	800466c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2100      	movs	r1, #0
 8002f70:	2035      	movs	r0, #53	; 0x35
 8002f72:	f000 ffac 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002f76:	2035      	movs	r0, #53	; 0x35
 8002f78:	f000 ffc5 	bl	8003f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f7c:	e09a      	b.n	80030b4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a51      	ldr	r2, [pc, #324]	; (80030c8 <HAL_UART_MspInit+0x1d0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	f040 8095 	bne.w	80030b4 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f8a:	4b4d      	ldr	r3, [pc, #308]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	4a4c      	ldr	r2, [pc, #304]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f94:	6413      	str	r3, [r2, #64]	; 0x40
 8002f96:	4b4a      	ldr	r3, [pc, #296]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a46      	ldr	r2, [pc, #280]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b44      	ldr	r3, [pc, #272]	; (80030c0 <HAL_UART_MspInit+0x1c8>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USB_TX_Pin|USB_RX_Pin;
 8002fba:	230c      	movs	r3, #12
 8002fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 031c 	add.w	r3, r7, #28
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	483d      	ldr	r0, [pc, #244]	; (80030cc <HAL_UART_MspInit+0x1d4>)
 8002fd6:	f001 fb49 	bl	800466c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8002fdc:	4a3d      	ldr	r2, [pc, #244]	; (80030d4 <HAL_UART_MspInit+0x1dc>)
 8002fde:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002fe0:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8002fe2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fe6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ff4:	4b36      	ldr	r3, [pc, #216]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8002ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ffa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ffc:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003002:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 800300a:	2200      	movs	r2, #0
 800300c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8003010:	2200      	movs	r2, #0
 8003012:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003014:	4b2e      	ldr	r3, [pc, #184]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8003016:	2200      	movs	r2, #0
 8003018:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800301a:	482d      	ldr	r0, [pc, #180]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 800301c:	f000 ff8e 	bl	8003f3c <HAL_DMA_Init>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8003026:	f7ff fc65 	bl	80028f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 800302e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <HAL_UART_MspInit+0x1d8>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_UART_MspInit+0x1e4>)
 800303a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 800303e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003042:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 8003046:	2240      	movs	r2, #64	; 0x40
 8003048:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 800304c:	2200      	movs	r2, #0
 800304e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 8003052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003056:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003058:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 800305a:	2200      	movs	r2, #0
 800305c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003064:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800306a:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 800306c:	2200      	movs	r2, #0
 800306e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 8003072:	2204      	movs	r2, #4
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 8003078:	2203      	movs	r2, #3
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 800307e:	2200      	movs	r2, #0
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003088:	4813      	ldr	r0, [pc, #76]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 800308a:	f000 ff57 	bl	8003f3c <HAL_DMA_Init>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8003094:	f7ff fc2e 	bl	80028f4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 800309c:	669a      	str	r2, [r3, #104]	; 0x68
 800309e:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <HAL_UART_MspInit+0x1e0>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	2100      	movs	r1, #0
 80030a8:	2026      	movs	r0, #38	; 0x26
 80030aa:	f000 ff10 	bl	8003ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030ae:	2026      	movs	r0, #38	; 0x26
 80030b0:	f000 ff29 	bl	8003f06 <HAL_NVIC_EnableIRQ>
}
 80030b4:	bf00      	nop
 80030b6:	3730      	adds	r7, #48	; 0x30
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40005000 	.word	0x40005000
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40004400 	.word	0x40004400
 80030cc:	40020000 	.word	0x40020000
 80030d0:	20000b78 	.word	0x20000b78
 80030d4:	40026088 	.word	0x40026088
 80030d8:	20000dd0 	.word	0x20000dd0
 80030dc:	400260a0 	.word	0x400260a0

080030e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80030e4:	f004 f83e 	bl	8007164 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80030e8:	bf00      	nop
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <HardFault_Handler+0x4>

080030f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f6:	e7fe      	b.n	80030f6 <MemManage_Handler+0x4>

080030f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030fc:	e7fe      	b.n	80030fc <BusFault_Handler+0x4>

080030fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003102:	e7fe      	b.n	8003102 <UsageFault_Handler+0x4>

08003104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003132:	f000 f8f1 	bl	8003318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003140:	4802      	ldr	r0, [pc, #8]	; (800314c <DMA1_Stream5_IRQHandler+0x10>)
 8003142:	f001 f82b 	bl	800419c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000b78 	.word	0x20000b78

08003150 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003154:	4802      	ldr	r0, [pc, #8]	; (8003160 <DMA1_Stream6_IRQHandler+0x10>)
 8003156:	f001 f821 	bl	800419c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000dd0 	.word	0x20000dd0

08003164 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003168:	4802      	ldr	r0, [pc, #8]	; (8003174 <ADC_IRQHandler+0x10>)
 800316a:	f000 fa1b 	bl	80035a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000d88 	.word	0x20000d88

08003178 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <I2C1_EV_IRQHandler+0x10>)
 800317e:	f001 fecb 	bl	8004f18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000c18 	.word	0x20000c18

0800318c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003190:	4802      	ldr	r0, [pc, #8]	; (800319c <USART2_IRQHandler+0x10>)
 8003192:	f006 febd 	bl	8009f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000f4c 	.word	0x20000f4c

080031a0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80031a4:	4802      	ldr	r0, [pc, #8]	; (80031b0 <UART5_IRQHandler+0x10>)
 80031a6:	f006 feb3 	bl	8009f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000d00 	.word	0x20000d00

080031b4 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 80031b8:	4802      	ldr	r0, [pc, #8]	; (80031c4 <QUADSPI_IRQHandler+0x10>)
 80031ba:	f002 fd37 	bl	8005c2c <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000fec 	.word	0x20000fec

080031c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <_sbrk+0x50>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <_sbrk+0x16>
		heap_end = &end;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <_sbrk+0x50>)
 80031da:	4a10      	ldr	r2, [pc, #64]	; (800321c <_sbrk+0x54>)
 80031dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <_sbrk+0x50>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <_sbrk+0x50>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	466a      	mov	r2, sp
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d907      	bls.n	8003202 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80031f2:	f008 f951 	bl	800b498 <__errno>
 80031f6:	4602      	mov	r2, r0
 80031f8:	230c      	movs	r3, #12
 80031fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	e006      	b.n	8003210 <_sbrk+0x48>
	}

	heap_end += incr;
 8003202:	4b05      	ldr	r3, [pc, #20]	; (8003218 <_sbrk+0x50>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	4a03      	ldr	r2, [pc, #12]	; (8003218 <_sbrk+0x50>)
 800320c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000b3c 	.word	0x20000b3c
 800321c:	200030b0 	.word	0x200030b0

08003220 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <SystemInit+0x28>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	4a07      	ldr	r2, [pc, #28]	; (8003248 <SystemInit+0x28>)
 800322c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <SystemInit+0x28>)
 8003236:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800323a:	609a      	str	r2, [r3, #8]
#endif
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800324c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003284 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003250:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003252:	e003      	b.n	800325c <LoopCopyDataInit>

08003254 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003256:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003258:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800325a:	3104      	adds	r1, #4

0800325c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800325c:	480b      	ldr	r0, [pc, #44]	; (800328c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003260:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003262:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003264:	d3f6      	bcc.n	8003254 <CopyDataInit>
  ldr  r2, =_sbss
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003268:	e002      	b.n	8003270 <LoopFillZerobss>

0800326a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800326a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800326c:	f842 3b04 	str.w	r3, [r2], #4

08003270 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003272:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003274:	d3f9      	bcc.n	800326a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003276:	f7ff ffd3 	bl	8003220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800327a:	f008 f913 	bl	800b4a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327e:	f7fe fd33 	bl	8001ce8 <main>
  bx  lr    
 8003282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003284:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003288:	0800f1b0 	.word	0x0800f1b0
  ldr  r0, =_sdata
 800328c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003290:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8003294:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8003298:	200030ac 	.word	0x200030ac

0800329c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800329c:	e7fe      	b.n	800329c <CAN1_RX0_IRQHandler>

0800329e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a2:	2003      	movs	r0, #3
 80032a4:	f000 fe08 	bl	8003eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a8:	2000      	movs	r0, #0
 80032aa:	f000 f805 	bl	80032b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80032ae:	f7ff fb29 	bl	8002904 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c0:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_InitTick+0x54>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_InitTick+0x58>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fe23 	bl	8003f22 <HAL_SYSTICK_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00e      	b.n	8003304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	d80a      	bhi.n	8003302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ec:	2200      	movs	r2, #0
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	f000 fdeb 	bl	8003ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f8:	4a06      	ldr	r2, [pc, #24]	; (8003314 <HAL_InitTick+0x5c>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000004 	.word	0x20000004
 8003310:	2000000c 	.word	0x2000000c
 8003314:	20000008 	.word	0x20000008

08003318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <HAL_IncTick+0x20>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_IncTick+0x24>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4413      	add	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_IncTick+0x24>)
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	2000000c 	.word	0x2000000c
 800333c:	20001038 	.word	0x20001038

08003340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return uwTick;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_GetTick+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20001038 	.word	0x20001038

08003358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003360:	f7ff ffee 	bl	8003340 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003370:	d005      	beq.n	800337e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_Delay+0x40>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800337e:	bf00      	nop
 8003380:	f7ff ffde 	bl	8003340 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	d8f7      	bhi.n	8003380 <HAL_Delay+0x28>
  {
  }
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	2000000c 	.word	0x2000000c

0800339c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e031      	b.n	8003416 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff fac6 	bl	800294c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033de:	4b10      	ldr	r3, [pc, #64]	; (8003420 <HAL_ADC_Init+0x84>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	f043 0202 	orr.w	r2, r3, #2
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb90 	bl	8003b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
 8003406:	e001      	b.n	800340c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003414:	7bfb      	ldrb	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	ffffeefd 	.word	0xffffeefd

08003424 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_ADC_Start+0x1a>
 800343a:	2302      	movs	r3, #2
 800343c:	e0a0      	b.n	8003580 <HAL_ADC_Start+0x15c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b01      	cmp	r3, #1
 8003452:	d018      	beq.n	8003486 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003464:	4b49      	ldr	r3, [pc, #292]	; (800358c <HAL_ADC_Start+0x168>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a49      	ldr	r2, [pc, #292]	; (8003590 <HAL_ADC_Start+0x16c>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0c9a      	lsrs	r2, r3, #18
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003478:	e002      	b.n	8003480 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3b01      	subs	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f9      	bne.n	800347a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d174      	bne.n	800357e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003498:	4b3e      	ldr	r3, [pc, #248]	; (8003594 <HAL_ADC_Start+0x170>)
 800349a:	4013      	ands	r3, r2
 800349c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	d106      	bne.n	80034de <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	f023 0206 	bic.w	r2, r3, #6
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
 80034dc:	e002      	b.n	80034e4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80034f6:	4b28      	ldr	r3, [pc, #160]	; (8003598 <HAL_ADC_Start+0x174>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d136      	bne.n	800357e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	e02d      	b.n	800357e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_ADC_Start+0x178>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d10e      	bne.n	800354a <HAL_ADC_Start+0x126>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003548:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <HAL_ADC_Start+0x174>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d113      	bne.n	800357e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <HAL_ADC_Start+0x17c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10e      	bne.n	800357e <HAL_ADC_Start+0x15a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800357c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	20000004 	.word	0x20000004
 8003590:	431bde83 	.word	0x431bde83
 8003594:	fffff8fe 	.word	0xfffff8fe
 8003598:	40012300 	.word	0x40012300
 800359c:	40012000 	.word	0x40012000
 80035a0:	40012200 	.word	0x40012200

080035a4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	2300      	movs	r3, #0
 80035b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b02      	cmp	r3, #2
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b20      	cmp	r3, #32
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d049      	beq.n	800367a <HAL_ADC_IRQHandler+0xd6>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d046      	beq.n	800367a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d105      	bne.n	8003604 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d12b      	bne.n	800366a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003616:	2b00      	cmp	r3, #0
 8003618:	d127      	bne.n	800366a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003624:	2b00      	cmp	r3, #0
 8003626:	d006      	beq.n	8003636 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003632:	2b00      	cmp	r3, #0
 8003634:	d119      	bne.n	800366a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0220 	bic.w	r2, r2, #32
 8003644:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0201 	orr.w	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8e8 	bl	8003840 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0212 	mvn.w	r2, #18
 8003678:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b04      	cmp	r3, #4
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d057      	beq.n	800375c <HAL_ADC_IRQHandler+0x1b8>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d054      	beq.n	800375c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d105      	bne.n	80036ca <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d139      	bne.n	800374c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d12b      	bne.n	800374c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d124      	bne.n	800374c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800370c:	2b00      	cmp	r3, #0
 800370e:	d11d      	bne.n	800374c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003714:	2b00      	cmp	r3, #0
 8003716:	d119      	bne.n	800374c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003726:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fad9 	bl	8003d04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f06f 020c 	mvn.w	r2, #12
 800375a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	bf0c      	ite	eq
 800376a:	2301      	moveq	r3, #1
 800376c:	2300      	movne	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d017      	beq.n	80037be <HAL_ADC_IRQHandler+0x21a>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d014      	beq.n	80037be <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d10d      	bne.n	80037be <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f850 	bl	8003854 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0201 	mvn.w	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d015      	beq.n	800381e <HAL_ADC_IRQHandler+0x27a>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d012      	beq.n	800381e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f043 0202 	orr.w	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0220 	mvn.w	r2, #32
 800380c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f82a 	bl	8003868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f06f 0220 	mvn.w	r2, #32
 800381c:	601a      	str	r2, [r3, #0]
  }
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x1c>
 8003894:	2302      	movs	r3, #2
 8003896:	e12a      	b.n	8003aee <HAL_ADC_ConfigChannel+0x272>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b09      	cmp	r3, #9
 80038a6:	d93a      	bls.n	800391e <HAL_ADC_ConfigChannel+0xa2>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038b0:	d035      	beq.n	800391e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68d9      	ldr	r1, [r3, #12]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	3b1e      	subs	r3, #30
 80038c8:	2207      	movs	r2, #7
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	400a      	ands	r2, r1
 80038d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a87      	ldr	r2, [pc, #540]	; (8003afc <HAL_ADC_ConfigChannel+0x280>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10a      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68d9      	ldr	r1, [r3, #12]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	061a      	lsls	r2, r3, #24
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038f6:	e035      	b.n	8003964 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68d9      	ldr	r1, [r3, #12]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	b29b      	uxth	r3, r3
 8003908:	4618      	mov	r0, r3
 800390a:	4603      	mov	r3, r0
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4403      	add	r3, r0
 8003910:	3b1e      	subs	r3, #30
 8003912:	409a      	lsls	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800391c:	e022      	b.n	8003964 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6919      	ldr	r1, [r3, #16]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	4613      	mov	r3, r2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4413      	add	r3, r2
 8003932:	2207      	movs	r2, #7
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43da      	mvns	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	400a      	ands	r2, r1
 8003940:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6919      	ldr	r1, [r3, #16]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	b29b      	uxth	r3, r3
 8003952:	4618      	mov	r0, r3
 8003954:	4603      	mov	r3, r0
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	4403      	add	r3, r0
 800395a:	409a      	lsls	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d824      	bhi.n	80039b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	3b05      	subs	r3, #5
 800397e:	221f      	movs	r2, #31
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43da      	mvns	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	400a      	ands	r2, r1
 800398c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	4618      	mov	r0, r3
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	3b05      	subs	r3, #5
 80039a8:	fa00 f203 	lsl.w	r2, r0, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34
 80039b4:	e04c      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	d824      	bhi.n	8003a08 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	3b23      	subs	r3, #35	; 0x23
 80039d0:	221f      	movs	r2, #31
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	400a      	ands	r2, r1
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	3b23      	subs	r3, #35	; 0x23
 80039fa:	fa00 f203 	lsl.w	r2, r0, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
 8003a06:	e023      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	3b41      	subs	r3, #65	; 0x41
 8003a1a:	221f      	movs	r2, #31
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43da      	mvns	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	400a      	ands	r2, r1
 8003a28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4618      	mov	r0, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	3b41      	subs	r3, #65	; 0x41
 8003a44:	fa00 f203 	lsl.w	r2, r0, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a2a      	ldr	r2, [pc, #168]	; (8003b00 <HAL_ADC_ConfigChannel+0x284>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10a      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1f4>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a62:	d105      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003a64:	4b27      	ldr	r3, [pc, #156]	; (8003b04 <HAL_ADC_ConfigChannel+0x288>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a26      	ldr	r2, [pc, #152]	; (8003b04 <HAL_ADC_ConfigChannel+0x288>)
 8003a6a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003a6e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <HAL_ADC_ConfigChannel+0x284>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d109      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x212>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b12      	cmp	r3, #18
 8003a80:	d105      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_ADC_ConfigChannel+0x288>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <HAL_ADC_ConfigChannel+0x288>)
 8003a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1b      	ldr	r2, [pc, #108]	; (8003b00 <HAL_ADC_ConfigChannel+0x284>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d125      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x268>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_ADC_ConfigChannel+0x280>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <HAL_ADC_ConfigChannel+0x22e>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b11      	cmp	r3, #17
 8003aa8:	d11c      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003aaa:	4b16      	ldr	r3, [pc, #88]	; (8003b04 <HAL_ADC_ConfigChannel+0x288>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	4a15      	ldr	r2, [pc, #84]	; (8003b04 <HAL_ADC_ConfigChannel+0x288>)
 8003ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ab4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a10      	ldr	r2, [pc, #64]	; (8003afc <HAL_ADC_ConfigChannel+0x280>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d111      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_ADC_ConfigChannel+0x28c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a11      	ldr	r2, [pc, #68]	; (8003b0c <HAL_ADC_ConfigChannel+0x290>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0c9a      	lsrs	r2, r3, #18
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ad6:	e002      	b.n	8003ade <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f9      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	10000012 	.word	0x10000012
 8003b00:	40012000 	.word	0x40012000
 8003b04:	40012300 	.word	0x40012300
 8003b08:	20000004 	.word	0x20000004
 8003b0c:	431bde83 	.word	0x431bde83

08003b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b18:	4b78      	ldr	r3, [pc, #480]	; (8003cfc <ADC_Init+0x1ec>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a77      	ldr	r2, [pc, #476]	; (8003cfc <ADC_Init+0x1ec>)
 8003b1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003b24:	4b75      	ldr	r3, [pc, #468]	; (8003cfc <ADC_Init+0x1ec>)
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4973      	ldr	r1, [pc, #460]	; (8003cfc <ADC_Init+0x1ec>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	021a      	lsls	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <ADC_Init+0x1f0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d022      	beq.n	8003bea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	e00f      	b.n	8003c0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0202 	bic.w	r2, r2, #2
 8003c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6899      	ldr	r1, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	005a      	lsls	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01b      	beq.n	8003c70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	3b01      	subs	r3, #1
 8003c64:	035a      	lsls	r2, r3, #13
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	e007      	b.n	8003c80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	051a      	lsls	r2, r3, #20
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6899      	ldr	r1, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cc2:	025a      	lsls	r2, r3, #9
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	029a      	lsls	r2, r3, #10
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40012300 	.word	0x40012300
 8003d00:	0f000001 	.word	0x0f000001

08003d04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <__NVIC_SetPriorityGrouping+0x40>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d34:	4013      	ands	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <__NVIC_SetPriorityGrouping+0x44>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d46:	4a04      	ldr	r2, [pc, #16]	; (8003d58 <__NVIC_SetPriorityGrouping+0x40>)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	60d3      	str	r3, [r2, #12]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	e000ed00 	.word	0xe000ed00
 8003d5c:	05fa0000 	.word	0x05fa0000

08003d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d64:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <__NVIC_GetPriorityGrouping+0x18>)
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	0a1b      	lsrs	r3, r3, #8
 8003d6a:	f003 0307 	and.w	r3, r3, #7
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	db0b      	blt.n	8003da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d8e:	79fb      	ldrb	r3, [r7, #7]
 8003d90:	f003 021f 	and.w	r2, r3, #31
 8003d94:	4907      	ldr	r1, [pc, #28]	; (8003db4 <__NVIC_EnableIRQ+0x38>)
 8003d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	e000e100 	.word	0xe000e100

08003db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	6039      	str	r1, [r7, #0]
 8003dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db0a      	blt.n	8003de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	490c      	ldr	r1, [pc, #48]	; (8003e04 <__NVIC_SetPriority+0x4c>)
 8003dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd6:	0112      	lsls	r2, r2, #4
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	440b      	add	r3, r1
 8003ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de0:	e00a      	b.n	8003df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4908      	ldr	r1, [pc, #32]	; (8003e08 <__NVIC_SetPriority+0x50>)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	3b04      	subs	r3, #4
 8003df0:	0112      	lsls	r2, r2, #4
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	440b      	add	r3, r1
 8003df6:	761a      	strb	r2, [r3, #24]
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000e100 	.word	0xe000e100
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f1c3 0307 	rsb	r3, r3, #7
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf28      	it	cs
 8003e2a:	2304      	movcs	r3, #4
 8003e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	3304      	adds	r3, #4
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d902      	bls.n	8003e3c <NVIC_EncodePriority+0x30>
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3b03      	subs	r3, #3
 8003e3a:	e000      	b.n	8003e3e <NVIC_EncodePriority+0x32>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	f04f 32ff 	mov.w	r2, #4294967295
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43da      	mvns	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	401a      	ands	r2, r3
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e54:	f04f 31ff 	mov.w	r1, #4294967295
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5e:	43d9      	mvns	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	4313      	orrs	r3, r2
         );
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3724      	adds	r7, #36	; 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e84:	d301      	bcc.n	8003e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e86:	2301      	movs	r3, #1
 8003e88:	e00f      	b.n	8003eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <SysTick_Config+0x40>)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e92:	210f      	movs	r1, #15
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	f7ff ff8e 	bl	8003db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <SysTick_Config+0x40>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea2:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <SysTick_Config+0x40>)
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	e000e010 	.word	0xe000e010

08003eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff ff29 	bl	8003d18 <__NVIC_SetPriorityGrouping>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee0:	f7ff ff3e 	bl	8003d60 <__NVIC_GetPriorityGrouping>
 8003ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	6978      	ldr	r0, [r7, #20]
 8003eec:	f7ff ff8e 	bl	8003e0c <NVIC_EncodePriority>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff5d 	bl	8003db8 <__NVIC_SetPriority>
}
 8003efe:	bf00      	nop
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff31 	bl	8003d7c <__NVIC_EnableIRQ>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ffa2 	bl	8003e74 <SysTick_Config>
 8003f30:	4603      	mov	r3, r0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff f9fa 	bl	8003340 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e099      	b.n	800408c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f78:	e00f      	b.n	8003f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f7a:	f7ff f9e1 	bl	8003340 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d908      	bls.n	8003f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2203      	movs	r2, #3
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e078      	b.n	800408c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e8      	bne.n	8003f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <HAL_DMA_Init+0x158>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d107      	bne.n	8004004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 0307 	bic.w	r3, r3, #7
 800401a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b04      	cmp	r3, #4
 800402c:	d117      	bne.n	800405e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00e      	beq.n	800405e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fa99 	bl	8004578 <DMA_CheckFifoParam>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800405a:	2301      	movs	r3, #1
 800405c:	e016      	b.n	800408c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fa50 	bl	800450c <DMA_CalcBaseAndBitshift>
 800406c:	4603      	mov	r3, r0
 800406e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	223f      	movs	r2, #63	; 0x3f
 8004076:	409a      	lsls	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	e010803f 	.word	0xe010803f

08004098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_DMA_Start_IT+0x26>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e048      	b.n	8004150 <HAL_DMA_Start_IT+0xb8>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d137      	bne.n	8004142 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f9e2 	bl	80044b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	223f      	movs	r2, #63	; 0x3f
 80040f2:	409a      	lsls	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0216 	orr.w	r2, r2, #22
 8004106:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004116:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0208 	orr.w	r2, r2, #8
 800412e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e005      	b.n	800414e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800414a:	2302      	movs	r3, #2
 800414c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800414e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2280      	movs	r2, #128	; 0x80
 8004170:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e00c      	b.n	8004190 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2205      	movs	r2, #5
 800417a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80041a8:	4b92      	ldr	r3, [pc, #584]	; (80043f4 <HAL_DMA_IRQHandler+0x258>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a92      	ldr	r2, [pc, #584]	; (80043f8 <HAL_DMA_IRQHandler+0x25c>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0a9b      	lsrs	r3, r3, #10
 80041b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c6:	2208      	movs	r2, #8
 80041c8:	409a      	lsls	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4013      	ands	r3, r2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01a      	beq.n	8004208 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0204 	bic.w	r2, r2, #4
 80041ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	2208      	movs	r2, #8
 80041f6:	409a      	lsls	r2, r3
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f043 0201 	orr.w	r2, r3, #1
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420c:	2201      	movs	r2, #1
 800420e:	409a      	lsls	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d012      	beq.n	800423e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	2201      	movs	r2, #1
 800422c:	409a      	lsls	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0202 	orr.w	r2, r3, #2
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004242:	2204      	movs	r2, #4
 8004244:	409a      	lsls	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4013      	ands	r3, r2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d012      	beq.n	8004274 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	2204      	movs	r2, #4
 8004262:	409a      	lsls	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426c:	f043 0204 	orr.w	r2, r3, #4
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004278:	2210      	movs	r2, #16
 800427a:	409a      	lsls	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d043      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d03c      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	2210      	movs	r2, #16
 8004298:	409a      	lsls	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d018      	beq.n	80042de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d108      	bne.n	80042cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d024      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
 80042ca:	e01f      	b.n	800430c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	4798      	blx	r3
 80042dc:	e016      	b.n	800430c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0208 	bic.w	r2, r2, #8
 80042fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	2220      	movs	r2, #32
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 808e 	beq.w	800443a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8086 	beq.w	800443a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	2220      	movs	r2, #32
 8004334:	409a      	lsls	r2, r3
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b05      	cmp	r3, #5
 8004344:	d136      	bne.n	80043b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0216 	bic.w	r2, r2, #22
 8004354:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004364:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_DMA_IRQHandler+0x1da>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0208 	bic.w	r2, r2, #8
 8004384:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	223f      	movs	r2, #63	; 0x3f
 800438c:	409a      	lsls	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d07d      	beq.n	80044a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
        }
        return;
 80043b2:	e078      	b.n	80044a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01c      	beq.n	80043fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d030      	beq.n	800443a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
 80043e0:	e02b      	b.n	800443a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d027      	beq.n	800443a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	4798      	blx	r3
 80043f2:	e022      	b.n	800443a <HAL_DMA_IRQHandler+0x29e>
 80043f4:	20000004 	.word	0x20000004
 80043f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0210 	bic.w	r2, r2, #16
 8004418:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443e:	2b00      	cmp	r3, #0
 8004440:	d032      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d022      	beq.n	8004494 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2205      	movs	r2, #5
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	3301      	adds	r3, #1
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	429a      	cmp	r2, r3
 8004470:	d307      	bcc.n	8004482 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f2      	bne.n	8004466 <HAL_DMA_IRQHandler+0x2ca>
 8004480:	e000      	b.n	8004484 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004482:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
 80044a4:	e000      	b.n	80044a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044a6:	bf00      	nop
    }
  }
}
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop

080044b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b40      	cmp	r3, #64	; 0x40
 80044dc:	d108      	bne.n	80044f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044ee:	e007      	b.n	8004500 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	60da      	str	r2, [r3, #12]
}
 8004500:	bf00      	nop
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	3b10      	subs	r3, #16
 800451c:	4a13      	ldr	r2, [pc, #76]	; (800456c <DMA_CalcBaseAndBitshift+0x60>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004526:	4a12      	ldr	r2, [pc, #72]	; (8004570 <DMA_CalcBaseAndBitshift+0x64>)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	461a      	mov	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b03      	cmp	r3, #3
 8004538:	d908      	bls.n	800454c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <DMA_CalcBaseAndBitshift+0x68>)
 8004542:	4013      	ands	r3, r2
 8004544:	1d1a      	adds	r2, r3, #4
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	659a      	str	r2, [r3, #88]	; 0x58
 800454a:	e006      	b.n	800455a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	461a      	mov	r2, r3
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <DMA_CalcBaseAndBitshift+0x68>)
 8004554:	4013      	ands	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	aaaaaaab 	.word	0xaaaaaaab
 8004570:	0800eee0 	.word	0x0800eee0
 8004574:	fffffc00 	.word	0xfffffc00

08004578 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d11f      	bne.n	80045d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d855      	bhi.n	8004644 <DMA_CheckFifoParam+0xcc>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <DMA_CheckFifoParam+0x28>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045c3 	.word	0x080045c3
 80045a8:	080045b1 	.word	0x080045b1
 80045ac:	08004645 	.word	0x08004645
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d045      	beq.n	8004648 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e042      	b.n	8004648 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ca:	d13f      	bne.n	800464c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d0:	e03c      	b.n	800464c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045da:	d121      	bne.n	8004620 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d836      	bhi.n	8004650 <DMA_CheckFifoParam+0xd8>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <DMA_CheckFifoParam+0x70>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	080045f9 	.word	0x080045f9
 80045ec:	080045ff 	.word	0x080045ff
 80045f0:	080045f9 	.word	0x080045f9
 80045f4:	08004611 	.word	0x08004611
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e02f      	b.n	800465e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d024      	beq.n	8004654 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460e:	e021      	b.n	8004654 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004618:	d11e      	bne.n	8004658 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800461e:	e01b      	b.n	8004658 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d902      	bls.n	800462c <DMA_CheckFifoParam+0xb4>
 8004626:	2b03      	cmp	r3, #3
 8004628:	d003      	beq.n	8004632 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800462a:	e018      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      break;
 8004630:	e015      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
      break;
 8004642:	e00b      	b.n	800465c <DMA_CheckFifoParam+0xe4>
      break;
 8004644:	bf00      	nop
 8004646:	e00a      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      break;
 8004648:	bf00      	nop
 800464a:	e008      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      break;
 800464c:	bf00      	nop
 800464e:	e006      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      break;
 8004650:	bf00      	nop
 8004652:	e004      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      break;
 8004654:	bf00      	nop
 8004656:	e002      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      break;   
 8004658:	bf00      	nop
 800465a:	e000      	b.n	800465e <DMA_CheckFifoParam+0xe6>
      break;
 800465c:	bf00      	nop
    }
  } 
  
  return status; 
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	e175      	b.n	8004978 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800468c:	2201      	movs	r2, #1
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	f040 8164 	bne.w	8004972 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d00b      	beq.n	80046ca <HAL_GPIO_Init+0x5e>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d007      	beq.n	80046ca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046be:	2b11      	cmp	r3, #17
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b12      	cmp	r3, #18
 80046c8:	d130      	bne.n	800472c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	2203      	movs	r2, #3
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004700:	2201      	movs	r2, #1
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	fa02 f303 	lsl.w	r3, r2, r3
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 0201 	and.w	r2, r3, #1
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2203      	movs	r2, #3
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d003      	beq.n	800476c <HAL_GPIO_Init+0x100>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b12      	cmp	r3, #18
 800476a:	d123      	bne.n	80047b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	08da      	lsrs	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3208      	adds	r2, #8
 8004774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	220f      	movs	r2, #15
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	08da      	lsrs	r2, r3, #3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3208      	adds	r2, #8
 80047ae:	69b9      	ldr	r1, [r7, #24]
 80047b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	2203      	movs	r2, #3
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0203 	and.w	r2, r3, #3
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80be 	beq.w	8004972 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f6:	4b65      	ldr	r3, [pc, #404]	; (800498c <HAL_GPIO_Init+0x320>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	4a64      	ldr	r2, [pc, #400]	; (800498c <HAL_GPIO_Init+0x320>)
 80047fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004800:	6453      	str	r3, [r2, #68]	; 0x44
 8004802:	4b62      	ldr	r3, [pc, #392]	; (800498c <HAL_GPIO_Init+0x320>)
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800480e:	4a60      	ldr	r2, [pc, #384]	; (8004990 <HAL_GPIO_Init+0x324>)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	3302      	adds	r3, #2
 8004816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	220f      	movs	r2, #15
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a57      	ldr	r2, [pc, #348]	; (8004994 <HAL_GPIO_Init+0x328>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d037      	beq.n	80048aa <HAL_GPIO_Init+0x23e>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a56      	ldr	r2, [pc, #344]	; (8004998 <HAL_GPIO_Init+0x32c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d031      	beq.n	80048a6 <HAL_GPIO_Init+0x23a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a55      	ldr	r2, [pc, #340]	; (800499c <HAL_GPIO_Init+0x330>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d02b      	beq.n	80048a2 <HAL_GPIO_Init+0x236>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a54      	ldr	r2, [pc, #336]	; (80049a0 <HAL_GPIO_Init+0x334>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d025      	beq.n	800489e <HAL_GPIO_Init+0x232>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a53      	ldr	r2, [pc, #332]	; (80049a4 <HAL_GPIO_Init+0x338>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01f      	beq.n	800489a <HAL_GPIO_Init+0x22e>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a52      	ldr	r2, [pc, #328]	; (80049a8 <HAL_GPIO_Init+0x33c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d019      	beq.n	8004896 <HAL_GPIO_Init+0x22a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a51      	ldr	r2, [pc, #324]	; (80049ac <HAL_GPIO_Init+0x340>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_GPIO_Init+0x226>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a50      	ldr	r2, [pc, #320]	; (80049b0 <HAL_GPIO_Init+0x344>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d00d      	beq.n	800488e <HAL_GPIO_Init+0x222>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4f      	ldr	r2, [pc, #316]	; (80049b4 <HAL_GPIO_Init+0x348>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <HAL_GPIO_Init+0x21e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4e      	ldr	r2, [pc, #312]	; (80049b8 <HAL_GPIO_Init+0x34c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d101      	bne.n	8004886 <HAL_GPIO_Init+0x21a>
 8004882:	2309      	movs	r3, #9
 8004884:	e012      	b.n	80048ac <HAL_GPIO_Init+0x240>
 8004886:	230a      	movs	r3, #10
 8004888:	e010      	b.n	80048ac <HAL_GPIO_Init+0x240>
 800488a:	2308      	movs	r3, #8
 800488c:	e00e      	b.n	80048ac <HAL_GPIO_Init+0x240>
 800488e:	2307      	movs	r3, #7
 8004890:	e00c      	b.n	80048ac <HAL_GPIO_Init+0x240>
 8004892:	2306      	movs	r3, #6
 8004894:	e00a      	b.n	80048ac <HAL_GPIO_Init+0x240>
 8004896:	2305      	movs	r3, #5
 8004898:	e008      	b.n	80048ac <HAL_GPIO_Init+0x240>
 800489a:	2304      	movs	r3, #4
 800489c:	e006      	b.n	80048ac <HAL_GPIO_Init+0x240>
 800489e:	2303      	movs	r3, #3
 80048a0:	e004      	b.n	80048ac <HAL_GPIO_Init+0x240>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e002      	b.n	80048ac <HAL_GPIO_Init+0x240>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_GPIO_Init+0x240>
 80048aa:	2300      	movs	r3, #0
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	f002 0203 	and.w	r2, r2, #3
 80048b2:	0092      	lsls	r2, r2, #2
 80048b4:	4093      	lsls	r3, r2
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048bc:	4934      	ldr	r1, [pc, #208]	; (8004990 <HAL_GPIO_Init+0x324>)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	3302      	adds	r3, #2
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ca:	4b3c      	ldr	r3, [pc, #240]	; (80049bc <HAL_GPIO_Init+0x350>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048ee:	4a33      	ldr	r2, [pc, #204]	; (80049bc <HAL_GPIO_Init+0x350>)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048f4:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_GPIO_Init+0x350>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004918:	4a28      	ldr	r2, [pc, #160]	; (80049bc <HAL_GPIO_Init+0x350>)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800491e:	4b27      	ldr	r3, [pc, #156]	; (80049bc <HAL_GPIO_Init+0x350>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <HAL_GPIO_Init+0x350>)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004948:	4b1c      	ldr	r3, [pc, #112]	; (80049bc <HAL_GPIO_Init+0x350>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800496c:	4a13      	ldr	r2, [pc, #76]	; (80049bc <HAL_GPIO_Init+0x350>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3301      	adds	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	f67f ae86 	bls.w	800468c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004980:	bf00      	nop
 8004982:	3724      	adds	r7, #36	; 0x24
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40023800 	.word	0x40023800
 8004990:	40013800 	.word	0x40013800
 8004994:	40020000 	.word	0x40020000
 8004998:	40020400 	.word	0x40020400
 800499c:	40020800 	.word	0x40020800
 80049a0:	40020c00 	.word	0x40020c00
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40021400 	.word	0x40021400
 80049ac:	40021800 	.word	0x40021800
 80049b0:	40021c00 	.word	0x40021c00
 80049b4:	40022000 	.word	0x40022000
 80049b8:	40022400 	.word	0x40022400
 80049bc:	40013c00 	.word	0x40013c00

080049c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	887b      	ldrh	r3, [r7, #2]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
 80049dc:	e001      	b.n	80049e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049de:	2300      	movs	r3, #0
 80049e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	807b      	strh	r3, [r7, #2]
 80049fc:	4613      	mov	r3, r2
 80049fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a00:	787b      	ldrb	r3, [r7, #1]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a0c:	e003      	b.n	8004a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a0e:	887b      	ldrh	r3, [r7, #2]
 8004a10:	041a      	lsls	r2, r3, #16
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	619a      	str	r2, [r3, #24]
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07f      	b.n	8004b36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fd ffc6 	bl	80029dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	e006      	b.n	8004aac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004aaa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d104      	bne.n	8004abe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004abc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	; (8004b40 <HAL_I2C_Init+0x11c>)
 8004aca:	430b      	orrs	r3, r1
 8004acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	ea42 0103 	orr.w	r1, r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	021a      	lsls	r2, r3, #8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69d9      	ldr	r1, [r3, #28]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1a      	ldr	r2, [r3, #32]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	430a      	orrs	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	02008000 	.word	0x02008000

08004b44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	607a      	str	r2, [r7, #4]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	460b      	mov	r3, r1
 8004b52:	817b      	strh	r3, [r7, #10]
 8004b54:	4613      	mov	r3, r2
 8004b56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	f040 80da 	bne.w	8004d1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_I2C_Master_Transmit+0x30>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e0d3      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b7c:	f7fe fbe0 	bl	8003340 <HAL_GetTick>
 8004b80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	2319      	movs	r3, #25
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa00 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e0be      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2221      	movs	r2, #33	; 0x21
 8004ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	893a      	ldrh	r2, [r7, #8]
 8004bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2bff      	cmp	r3, #255	; 0xff
 8004bce:	d90e      	bls.n	8004bee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	22ff      	movs	r2, #255	; 0xff
 8004bd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	8979      	ldrh	r1, [r7, #10]
 8004bde:	4b51      	ldr	r3, [pc, #324]	; (8004d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 fb62 	bl	80052b0 <I2C_TransferConfig>
 8004bec:	e06c      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	8979      	ldrh	r1, [r7, #10]
 8004c00:	4b48      	ldr	r3, [pc, #288]	; (8004d24 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fb51 	bl	80052b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004c0e:	e05b      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	6a39      	ldr	r1, [r7, #32]
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f9fd 	bl	8005014 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e07b      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d034      	beq.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d130      	bne.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2180      	movs	r1, #128	; 0x80
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 f98f 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e04d      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2bff      	cmp	r3, #255	; 0xff
 8004c88:	d90e      	bls.n	8004ca8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	22ff      	movs	r2, #255	; 0xff
 8004c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	8979      	ldrh	r1, [r7, #10]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fb05 	bl	80052b0 <I2C_TransferConfig>
 8004ca6:	e00f      	b.n	8004cc8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	8979      	ldrh	r1, [r7, #10]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 faf4 	bl	80052b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d19e      	bne.n	8004c10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f9dc 	bl	8005094 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e01a      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2220      	movs	r2, #32
 8004cec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6859      	ldr	r1, [r3, #4]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_I2C_Master_Transmit+0x1e4>)
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
  }
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	80002000 	.word	0x80002000
 8004d28:	fe00e800 	.word	0xfe00e800

08004d2c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	607a      	str	r2, [r7, #4]
 8004d36:	461a      	mov	r2, r3
 8004d38:	460b      	mov	r3, r1
 8004d3a:	817b      	strh	r3, [r7, #10]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	f040 80db 	bne.w	8004f04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_I2C_Master_Receive+0x30>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0d4      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d64:	f7fe faec 	bl	8003340 <HAL_GetTick>
 8004d68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2319      	movs	r3, #25
 8004d70:	2201      	movs	r2, #1
 8004d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f000 f90c 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0bf      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2222      	movs	r2, #34	; 0x22
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2210      	movs	r2, #16
 8004d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	893a      	ldrh	r2, [r7, #8]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2bff      	cmp	r3, #255	; 0xff
 8004db6:	d90e      	bls.n	8004dd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	22ff      	movs	r2, #255	; 0xff
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	4b52      	ldr	r3, [pc, #328]	; (8004f10 <HAL_I2C_Master_Receive+0x1e4>)
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 fa6e 	bl	80052b0 <I2C_TransferConfig>
 8004dd4:	e06d      	b.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	8979      	ldrh	r1, [r7, #10]
 8004de8:	4b49      	ldr	r3, [pc, #292]	; (8004f10 <HAL_I2C_Master_Receive+0x1e4>)
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fa5d 	bl	80052b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004df6:	e05c      	b.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	6a39      	ldr	r1, [r7, #32]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f985 	bl	800510c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e07c      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d034      	beq.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d130      	bne.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	2200      	movs	r2, #0
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f89a 	bl	8004f94 <I2C_WaitOnFlagUntilTimeout>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e04d      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	2bff      	cmp	r3, #255	; 0xff
 8004e72:	d90e      	bls.n	8004e92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	22ff      	movs	r2, #255	; 0xff
 8004e78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	8979      	ldrh	r1, [r7, #10]
 8004e82:	2300      	movs	r3, #0
 8004e84:	9300      	str	r3, [sp, #0]
 8004e86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 fa10 	bl	80052b0 <I2C_TransferConfig>
 8004e90:	e00f      	b.n	8004eb2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	8979      	ldrh	r1, [r7, #10]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f9ff 	bl	80052b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d19d      	bne.n	8004df8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	6a39      	ldr	r1, [r7, #32]
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f8e7 	bl	8005094 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e01a      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <HAL_I2C_Master_Receive+0x1e8>)
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	80002400 	.word	0x80002400
 8004f14:	fe00e800 	.word	0xfe00e800

08004f18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	68f9      	ldr	r1, [r7, #12]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	4798      	blx	r3
  }
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d103      	bne.n	8004f6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d007      	beq.n	8004f88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	619a      	str	r2, [r3, #24]
  }
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa4:	e022      	b.n	8004fec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d01e      	beq.n	8004fec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fe f9c7 	bl	8003340 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d113      	bne.n	8004fec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e00f      	b.n	800500c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	699a      	ldr	r2, [r3, #24]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	429a      	cmp	r2, r3
 8005008:	d0cd      	beq.n	8004fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005020:	e02c      	b.n	800507c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 f8dc 	bl	80051e4 <I2C_IsAcknowledgeFailed>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e02a      	b.n	800508c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503c:	d01e      	beq.n	800507c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503e:	f7fe f97f 	bl	8003340 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	429a      	cmp	r2, r3
 800504c:	d302      	bcc.n	8005054 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d113      	bne.n	800507c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005058:	f043 0220 	orr.w	r2, r3, #32
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e007      	b.n	800508c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b02      	cmp	r3, #2
 8005088:	d1cb      	bne.n	8005022 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a0:	e028      	b.n	80050f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f89c 	bl	80051e4 <I2C_IsAcknowledgeFailed>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e026      	b.n	8005104 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fe f943 	bl	8003340 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d113      	bne.n	80050f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d0:	f043 0220 	orr.w	r2, r3, #32
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e007      	b.n	8005104 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d1cf      	bne.n	80050a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005118:	e055      	b.n	80051c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68b9      	ldr	r1, [r7, #8]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f860 	bl	80051e4 <I2C_IsAcknowledgeFailed>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e053      	b.n	80051d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b20      	cmp	r3, #32
 800513a:	d129      	bne.n	8005190 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b04      	cmp	r3, #4
 8005148:	d105      	bne.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	e03f      	b.n	80051d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2220      	movs	r2, #32
 800515c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b1d      	ldr	r3, [pc, #116]	; (80051e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800516a:	400b      	ands	r3, r1
 800516c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e022      	b.n	80051d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fe f8d6 	bl	8003340 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10f      	bne.n	80051c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	f043 0220 	orr.w	r2, r3, #32
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e007      	b.n	80051d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d1a2      	bne.n	800511a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	fe00e800 	.word	0xfe00e800

080051e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d151      	bne.n	80052a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051fe:	e022      	b.n	8005246 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005206:	d01e      	beq.n	8005246 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005208:	f7fe f89a 	bl	8003340 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	429a      	cmp	r2, r3
 8005216:	d302      	bcc.n	800521e <I2C_IsAcknowledgeFailed+0x3a>
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d113      	bne.n	8005246 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e02e      	b.n	80052a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b20      	cmp	r3, #32
 8005252:	d1d5      	bne.n	8005200 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2210      	movs	r2, #16
 800525a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2220      	movs	r2, #32
 8005262:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fe71 	bl	8004f4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <I2C_IsAcknowledgeFailed+0xc8>)
 8005276:	400b      	ands	r3, r1
 8005278:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	fe00e800 	.word	0xfe00e800

080052b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	607b      	str	r3, [r7, #4]
 80052ba:	460b      	mov	r3, r1
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	4613      	mov	r3, r2
 80052c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	0d5b      	lsrs	r3, r3, #21
 80052cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052d0:	4b0d      	ldr	r3, [pc, #52]	; (8005308 <I2C_TransferConfig+0x58>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	43db      	mvns	r3, r3
 80052d6:	ea02 0103 	and.w	r1, r2, r3
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052e0:	7a7b      	ldrb	r3, [r7, #9]
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	431a      	orrs	r2, r3
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80052fa:	bf00      	nop
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	03ff63ff 	.word	0x03ff63ff

0800530c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b20      	cmp	r3, #32
 8005320:	d138      	bne.n	8005394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800532c:	2302      	movs	r3, #2
 800532e:	e032      	b.n	8005396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2224      	movs	r2, #36	; 0x24
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800535e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6819      	ldr	r1, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	e000      	b.n	8005396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b085      	sub	sp, #20
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
 80053aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d139      	bne.n	800542c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e033      	b.n	800542e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2224      	movs	r2, #36	; 0x24
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e000      	b.n	800542e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b082      	sub	sp, #8
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e022      	b.n	8005492 <HAL_MMC_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d105      	bne.n	8005464 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fd fbac 	bl	8002bbc <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2203      	movs	r2, #3
 8005468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f814 	bl	800549a <HAL_MMC_InitCard>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e00a      	b.n	8005492 <HAL_MMC_Init+0x58>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 800549a:	b5b0      	push	{r4, r5, r7, lr}
 800549c:	b08e      	sub	sp, #56	; 0x38
 800549e:	af04      	add	r7, sp, #16
 80054a0:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80054b6:	2376      	movs	r3, #118	; 0x76
 80054b8:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hmmc->Instance, Init);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681d      	ldr	r5, [r3, #0]
 80054be:	466c      	mov	r4, sp
 80054c0:	f107 0314 	add.w	r3, r7, #20
 80054c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054cc:	f107 0308 	add.w	r3, r7, #8
 80054d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054d2:	4628      	mov	r0, r5
 80054d4:	f005 fbc0 	bl	800ac58 <SDMMC_Init>
 80054d8:	4603      	mov	r3, r0
 80054da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 80054de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e044      	b.n	8005574 <HAL_MMC_InitCard+0xda>
  }

  /* Disable SDMMC Clock */
  __HAL_MMC_DISABLE(hmmc); 
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054f8:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  status = SDMMC_PowerState_ON(hmmc->Instance);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f005 fbd6 	bl	800acb0 <SDMMC_PowerState_ON>
 8005504:	4603      	mov	r3, r0
 8005506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 800550a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_MMC_InitCard+0x7c>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e02e      	b.n	8005574 <HAL_MMC_InitCard+0xda>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005524:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa54 	bl	80059d4 <MMC_PowerON>
 800552c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00b      	beq.n	800554c <HAL_MMC_InitCard+0xb2>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e013      	b.n	8005574 <HAL_MMC_InitCard+0xda>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f980 	bl	8005852 <MMC_InitCard>
 8005552:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00b      	beq.n	8005572 <HAL_MMC_InitCard+0xd8>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <HAL_MMC_InitCard+0xda>
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3728      	adds	r7, #40	; 0x28
 8005578:	46bd      	mov	sp, r7
 800557a:	bdb0      	pop	{r4, r5, r7, pc}

0800557c <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558a:	0f9b      	lsrs	r3, r3, #30
 800558c:	b2da      	uxtb	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005596:	0e9b      	lsrs	r3, r3, #26
 8005598:	b2db      	uxtb	r3, r3
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a8:	0e1b      	lsrs	r3, r3, #24
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055dc:	0d1b      	lsrs	r3, r3, #20
 80055de:	b29a      	uxth	r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055e8:	0c1b      	lsrs	r3, r3, #16
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055fa:	0bdb      	lsrs	r3, r3, #15
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800560c:	0b9b      	lsrs	r3, r3, #14
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800561e:	0b5b      	lsrs	r3, r3, #13
 8005620:	b2db      	uxtb	r3, r3
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005630:	0b1b      	lsrs	r3, r3, #12
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2200      	movs	r2, #0
 8005642:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005648:	009a      	lsls	r2, r3, #2
 800564a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800564e:	4013      	ands	r3, r2
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005654:	0f92      	lsrs	r2, r2, #30
 8005656:	431a      	orrs	r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005660:	0edb      	lsrs	r3, r3, #27
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	b2da      	uxtb	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005672:	0e1b      	lsrs	r3, r3, #24
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	b2da      	uxtb	r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005684:	0d5b      	lsrs	r3, r3, #21
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	b2da      	uxtb	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005696:	0c9b      	lsrs	r3, r3, #18
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a8:	0bdb      	lsrs	r3, r3, #15
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	761a      	strb	r2, [r3, #24]

  hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	7e1b      	ldrb	r3, [r3, #24]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	3302      	adds	r3, #2
 80056cc:	2201      	movs	r2, #1
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056d6:	fb02 f203 	mul.w	r2, r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	651a      	str	r2, [r3, #80]	; 0x50
  hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	7a1b      	ldrb	r3, [r3, #8]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f003 030f 	and.w	r3, r3, #15
 80056e8:	2201      	movs	r2, #1
 80056ea:	409a      	lsls	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54

  hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80056f8:	0a52      	lsrs	r2, r2, #9
 80056fa:	fb02 f203 	mul.w	r2, r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	659a      	str	r2, [r3, #88]	; 0x58
  hmmc->MmcCard.LogBlockSize = 512U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005708:	65da      	str	r2, [r3, #92]	; 0x5c
  
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800570e:	0b9b      	lsrs	r3, r3, #14
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005720:	09db      	lsrs	r3, r3, #7
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005728:	b2da      	uxtb	r2, r3
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005738:	b2da      	uxtb	r2, r3
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005742:	0fdb      	lsrs	r3, r3, #31
 8005744:	b2da      	uxtb	r2, r3
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574e:	0f5b      	lsrs	r3, r3, #29
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	b2da      	uxtb	r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005760:	0e9b      	lsrs	r3, r3, #26
 8005762:	b2db      	uxtb	r3, r3
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	b2da      	uxtb	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005772:	0d9b      	lsrs	r3, r3, #22
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	b2da      	uxtb	r2, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005784:	0d5b      	lsrs	r3, r3, #21
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	b2da      	uxtb	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a0:	0c1b      	lsrs	r3, r3, #16
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b4:	0bdb      	lsrs	r3, r3, #15
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c8:	0b9b      	lsrs	r3, r3, #14
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057dc:	0b5b      	lsrs	r3, r3, #13
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f0:	0b1b      	lsrs	r3, r3, #12
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005804:	0a9b      	lsrs	r3, r3, #10
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	b2da      	uxtb	r2, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005818:	0a1b      	lsrs	r3, r3, #8
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	b2da      	uxtb	r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005834:	b2da      	uxtb	r2, r3
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8005852:	b5b0      	push	{r4, r5, r7, lr}
 8005854:	b094      	sub	sp, #80	; 0x50
 8005856:	af04      	add	r7, sp, #16
 8005858:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 1U;
 800585a:	2301      	movs	r3, #1
 800585c:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f005 fa33 	bl	800acce <SDMMC_GetPowerState>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <MMC_InitCard+0x22>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 800586e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005872:	e0aa      	b.n	80059ca <MMC_InitCard+0x178>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f005 fac2 	bl	800ae02 <SDMMC_CmdSendCID>
 800587e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 8005880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <MMC_InitCard+0x38>
  {
    return errorstate;
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	e09f      	b.n	80059ca <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2100      	movs	r1, #0
 8005890:	4618      	mov	r0, r3
 8005892:	f005 fa62 	bl	800ad5a <SDMMC_GetResponse>
 8005896:	4602      	mov	r2, r0
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2104      	movs	r1, #4
 80058a2:	4618      	mov	r0, r3
 80058a4:	f005 fa59 	bl	800ad5a <SDMMC_GetResponse>
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2108      	movs	r1, #8
 80058b4:	4618      	mov	r0, r3
 80058b6:	f005 fa50 	bl	800ad5a <SDMMC_GetResponse>
 80058ba:	4602      	mov	r2, r0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	210c      	movs	r1, #12
 80058c6:	4618      	mov	r0, r3
 80058c8:	f005 fa47 	bl	800ad5a <SDMMC_GetResponse>
 80058cc:	4602      	mov	r2, r0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with argument 0 */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAdd(hmmc->Instance, &mmc_rca);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f107 020e 	add.w	r2, r7, #14
 80058da:	4611      	mov	r1, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f005 facd 	bl	800ae7c <SDMMC_CmdSetRelAdd>
 80058e2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80058e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <MMC_InitCard+0x9c>
  {
    return errorstate;
 80058ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ec:	e06d      	b.n	80059ca <MMC_InitCard+0x178>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80058ee:	89fb      	ldrh	r3, [r7, #14]
 80058f0:	461a      	mov	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	4619      	mov	r1, r3
 8005902:	4610      	mov	r0, r2
 8005904:	f005 fa9b 	bl	800ae3e <SDMMC_CmdSendCSD>
 8005908:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 800590a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <MMC_InitCard+0xc2>
  {
    return errorstate;
 8005910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005912:	e05a      	b.n	80059ca <MMC_InitCard+0x178>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2100      	movs	r1, #0
 800591a:	4618      	mov	r0, r3
 800591c:	f005 fa1d 	bl	800ad5a <SDMMC_GetResponse>
 8005920:	4602      	mov	r2, r0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2104      	movs	r1, #4
 800592c:	4618      	mov	r0, r3
 800592e:	f005 fa14 	bl	800ad5a <SDMMC_GetResponse>
 8005932:	4602      	mov	r2, r0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2108      	movs	r1, #8
 800593e:	4618      	mov	r0, r3
 8005940:	f005 fa0b 	bl	800ad5a <SDMMC_GetResponse>
 8005944:	4602      	mov	r2, r0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	210c      	movs	r1, #12
 8005950:	4618      	mov	r0, r3
 8005952:	f005 fa02 	bl	800ad5a <SDMMC_GetResponse>
 8005956:	4602      	mov	r2, r0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2104      	movs	r1, #4
 8005962:	4618      	mov	r0, r3
 8005964:	f005 f9f9 	bl	800ad5a <SDMMC_GetResponse>
 8005968:	4603      	mov	r3, r0
 800596a:	0d1a      	lsrs	r2, r3, #20
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8005970:	f107 0310 	add.w	r3, r7, #16
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fe00 	bl	800557c <HAL_MMC_GetCardCSD>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <MMC_InitCard+0x136>
  {
    return hmmc->ErrorCode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005986:	e020      	b.n	80059ca <MMC_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6819      	ldr	r1, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005990:	041b      	lsls	r3, r3, #16
 8005992:	f04f 0400 	mov.w	r4, #0
 8005996:	461a      	mov	r2, r3
 8005998:	4623      	mov	r3, r4
 800599a:	4608      	mov	r0, r1
 800599c:	f005 f9f0 	bl	800ad80 <SDMMC_CmdSelDesel>
 80059a0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_MMC_ERROR_NONE)
 80059a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <MMC_InitCard+0x15a>
  {
    return errorstate;
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059aa:	e00e      	b.n	80059ca <MMC_InitCard+0x178>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hmmc->Instance, hmmc->Init);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681d      	ldr	r5, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	466c      	mov	r4, sp
 80059b4:	f103 0210 	add.w	r2, r3, #16
 80059b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80059ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80059be:	3304      	adds	r3, #4
 80059c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059c2:	4628      	mov	r0, r5
 80059c4:	f005 f948 	bl	800ac58 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3740      	adds	r7, #64	; 0x40
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080059d4 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f005 f9ea 	bl	800adc6 <SDMMC_CmdGoIdleState>
 80059f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d027      	beq.n	8005a4a <MMC_PowerON+0x76>
  {
    return errorstate;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	e034      	b.n	8005a68 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	60ba      	str	r2, [r7, #8]
 8005a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d102      	bne.n	8005a12 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8005a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a10:	e02a      	b.n	8005a68 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with MMC_HIGH_VOLTAGE_RANGE(0xC0FF8000) as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, eMMC_HIGH_VOLTAGE_RANGE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4916      	ldr	r1, [pc, #88]	; (8005a70 <MMC_PowerON+0x9c>)
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f005 fa50 	bl	800aebe <SDMMC_CmdOpCondition>
 8005a1e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8005a26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005a2a:	e01d      	b.n	8005a68 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2100      	movs	r1, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f005 f991 	bl	800ad5a <SDMMC_GetResponse>
 8005a38:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	0fdb      	lsrs	r3, r3, #31
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <MMC_PowerON+0x72>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <MMC_PowerON+0x74>
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0d6      	beq.n	80059fe <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	0e1b      	lsrs	r3, r3, #24
 8005a54:	2bc0      	cmp	r3, #192	; 0xc0
 8005a56:	d103      	bne.n	8005a60 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44
 8005a5e:	e002      	b.n	8005a66 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	c0ff8000 	.word	0xc0ff8000

08005a74 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a78:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40007000 	.word	0x40007000

08005a94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005a9e:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	4a22      	ldr	r2, [pc, #136]	; (8005b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8005aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8005aaa:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <HAL_PWREx_EnableOverDrive+0x98>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005ab6:	4b1e      	ldr	r3, [pc, #120]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ac2:	f7fd fc3d 	bl	8003340 <HAL_GetTick>
 8005ac6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ac8:	e009      	b.n	8005ade <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005aca:	f7fd fc39 	bl	8003340 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad8:	d901      	bls.n	8005ade <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e022      	b.n	8005b24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aea:	d1ee      	bne.n	8005aca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a0f      	ldr	r2, [pc, #60]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005af8:	f7fd fc22 	bl	8003340 <HAL_GetTick>
 8005afc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005afe:	e009      	b.n	8005b14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b00:	f7fd fc1e 	bl	8003340 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b0e:	d901      	bls.n	8005b14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e007      	b.n	8005b24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b14:	4b06      	ldr	r3, [pc, #24]	; (8005b30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b20:	d1ee      	bne.n	8005b00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40007000 	.word	0x40007000

08005b34 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005b3c:	f7fd fc00 	bl	8003340 <HAL_GetTick>
 8005b40:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e067      	b.n	8005c1c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10b      	bne.n	8005b70 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fc ff87 	bl	8002a74 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005b66:	f241 3188 	movw	r1, #5000	; 0x1388
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fc6c 	bl	8006448 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	021a      	lsls	r2, r3, #8
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8e:	9300      	str	r3, [sp, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	2120      	movs	r1, #32
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fc97 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005ba0:	7afb      	ldrb	r3, [r7, #11]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d135      	bne.n	8005c12 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <HAL_QSPI_Init+0xf0>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6852      	ldr	r2, [r2, #4]
 8005bb4:	0611      	lsls	r1, r2, #24
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68d2      	ldr	r2, [r2, #12]
 8005bba:	4311      	orrs	r1, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	69d2      	ldr	r2, [r2, #28]
 8005bc0:	4311      	orrs	r1, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6a12      	ldr	r2, [r2, #32]
 8005bc6:	4311      	orrs	r1, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <HAL_QSPI_Init+0xf4>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6912      	ldr	r2, [r2, #16]
 8005bde:	0411      	lsls	r1, r2, #16
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6952      	ldr	r2, [r2, #20]
 8005be4:	4311      	orrs	r1, r2
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6992      	ldr	r2, [r2, #24]
 8005bea:	4311      	orrs	r1, r2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	00ffff2f 	.word	0x00ffff2f
 8005c28:	ffe0f8fe 	.word	0xffe0f8fe

08005c2c <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d064      	beq.n	8005d18 <HAL_QSPI_IRQHandler+0xec>
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d05f      	beq.n	8005d18 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3320      	adds	r3, #32
 8005c5e:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b12      	cmp	r3, #18
 8005c6a:	d125      	bne.n	8005cb8 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005c6c:	e01c      	b.n	8005ca8 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00f      	beq.n	8005c96 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	781a      	ldrb	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8e:	1e5a      	subs	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c
 8005c94:	e008      	b.n	8005ca8 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ca4:	601a      	str	r2, [r3, #0]
          break;
 8005ca6:	e033      	b.n	8005d10 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1db      	bne.n	8005c6e <HAL_QSPI_IRQHandler+0x42>
 8005cb6:	e02b      	b.n	8005d10 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b22      	cmp	r3, #34	; 0x22
 8005cc2:	d125      	bne.n	8005d10 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005cc4:	e01d      	b.n	8005d02 <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d010      	beq.n	8005cf0 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	7812      	ldrb	r2, [r2, #0]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	1e5a      	subs	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
 8005cee:	e008      	b.n	8005d02 <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cfe:	601a      	str	r2, [r3, #0]
          break;
 8005d00:	e006      	b.n	8005d10 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1da      	bne.n	8005cc6 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fb7b 	bl	800640c <HAL_QSPI_FifoThresholdCallback>
 8005d16:	e13c      	b.n	8005f92 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80b0 	beq.w	8005e84 <HAL_QSPI_IRQHandler+0x258>
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80aa 	beq.w	8005e84 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2202      	movs	r2, #2
 8005d36:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005d46:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b12      	cmp	r3, #18
 8005d52:	d120      	bne.n	8005d96 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d011      	beq.n	8005d86 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0204 	bic.w	r2, r2, #4
 8005d70:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fb32 	bl	80063f8 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005d94:	e0fa      	b.n	8005f8c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b22      	cmp	r3, #34	; 0x22
 8005da0:	d143      	bne.n	8005e2a <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d012      	beq.n	8005dd6 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0204 	bic.w	r2, r2, #4
 8005dbe:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e021      	b.n	8005e1a <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3320      	adds	r3, #32
 8005ddc:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005dde:	e013      	b.n	8005e08 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d017      	beq.n	8005e18 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e02:	1e5a      	subs	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e4      	bne.n	8005de0 <HAL_QSPI_IRQHandler+0x1b4>
 8005e16:	e000      	b.n	8005e1a <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8005e18:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fade 	bl	80063e4 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e28:	e0b0      	b.n	8005f8c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d107      	bne.n	8005e46 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fac6 	bl	80063d0 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e44:	e0a2      	b.n	8005f8c <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	f040 809c 	bne.w	8005f8c <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	695a      	ldr	r2, [r3, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005e62:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d103      	bne.n	8005e7c <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 faa1 	bl	80063bc <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e7a:	e087      	b.n	8005f8c <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fa93 	bl	80063a8 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005e82:	e083      	b.n	8005f8c <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f003 0308 	and.w	r3, r3, #8
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d01f      	beq.n	8005ece <HAL_QSPI_IRQHandler+0x2a2>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01a      	beq.n	8005ece <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2208      	movs	r2, #8
 8005e9e:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 faaa 	bl	8006420 <HAL_QSPI_StatusMatchCallback>
 8005ecc:	e061      	b.n	8005f92 <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d047      	beq.n	8005f68 <HAL_QSPI_IRQHandler+0x33c>
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d042      	beq.n	8005f68 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8005ef8:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f043 0202 	orr.w	r2, r3, #2
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d021      	beq.n	8005f58 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0204 	bic.w	r2, r2, #4
 8005f22:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <HAL_QSPI_IRQHandler+0x370>)
 8005f2a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe f911 	bl	8004158 <HAL_DMA_Abort_IT>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d029      	beq.n	8005f90 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f40:	f043 0204 	orr.w	r2, r3, #4
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fa29 	bl	80063a8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f56:	e01b      	b.n	8005f90 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa21 	bl	80063a8 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f66:	e013      	b.n	8005f90 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00f      	beq.n	8005f92 <HAL_QSPI_IRQHandler+0x366>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00a      	beq.n	8005f92 <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2210      	movs	r2, #16
 8005f82:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa55 	bl	8006434 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 8005f8a:	e002      	b.n	8005f92 <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8005f8c:	bf00      	nop
 8005f8e:	e000      	b.n	8005f92 <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005f90:	bf00      	nop
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	08006465 	.word	0x08006465

08005fa0 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005fac:	f7fd f9c8 	bl	8003340 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d101      	bne.n	8005fc2 <HAL_QSPI_Command+0x22>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e048      	b.n	8006054 <HAL_QSPI_Command+0xb4>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d137      	bne.n	8006046 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2200      	movs	r2, #0
 8005fec:	2120      	movs	r1, #32
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fa6b 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d125      	bne.n	800604a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005ffe:	2200      	movs	r2, #0
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 fa98 	bl	8006538 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d115      	bne.n	800603c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2201      	movs	r2, #1
 8006018:	2102      	movs	r1, #2
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fa55 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006024:	7dfb      	ldrb	r3, [r7, #23]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10f      	bne.n	800604a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2202      	movs	r2, #2
 8006030:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800603a:	e006      	b.n	800604a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006044:	e001      	b.n	800604a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006046:	2302      	movs	r3, #2
 8006048:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006052:	7dfb      	ldrb	r3, [r7, #23]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_QSPI_Transmit>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800606c:	f7fd f968 	bl	8003340 <HAL_GetTick>
 8006070:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3320      	adds	r3, #32
 8006078:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_QSPI_Transmit+0x2e>
 8006086:	2302      	movs	r3, #2
 8006088:	e076      	b.n	8006178 <HAL_QSPI_Transmit+0x11c>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b01      	cmp	r3, #1
 800609c:	d165      	bne.n	800616a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d056      	beq.n	8006158 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2212      	movs	r2, #18
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80060de:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 80060e0:	e01b      	b.n	800611a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2201      	movs	r2, #1
 80060ea:	2104      	movs	r1, #4
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f9ec 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80060f6:	7ffb      	ldrb	r3, [r7, #31]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d113      	bne.n	8006124 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	781a      	ldrb	r2, [r3, #0]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	1e5a      	subs	r2, r3, #1
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1df      	bne.n	80060e2 <HAL_QSPI_Transmit+0x86>
 8006122:	e000      	b.n	8006126 <HAL_QSPI_Transmit+0xca>
          break;
 8006124:	bf00      	nop
      }

      if (status == HAL_OK)
 8006126:	7ffb      	ldrb	r3, [r7, #31]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d110      	bne.n	800614e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2201      	movs	r2, #1
 8006134:	2102      	movs	r1, #2
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f9c7 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006140:	7ffb      	ldrb	r3, [r7, #31]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2202      	movs	r2, #2
 800614c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006156:	e00a      	b.n	800616e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	f043 0208 	orr.w	r2, r3, #8
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e001      	b.n	800616e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800616a:	2302      	movs	r3, #2
 800616c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006176:	7ffb      	ldrb	r3, [r7, #31]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	; 0x28
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006190:	f7fd f8d6 	bl	8003340 <HAL_GetTick>
 8006194:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3320      	adds	r3, #32
 80061a4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_QSPI_Receive+0x36>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e07d      	b.n	80062b2 <HAL_QSPI_Receive+0x132>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d16c      	bne.n	80062a4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d05d      	beq.n	8006292 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2222      	movs	r2, #34	; 0x22
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800620e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006218:	e01c      	b.n	8006254 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	2201      	movs	r2, #1
 8006222:	2106      	movs	r1, #6
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f950 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 800622a:	4603      	mov	r3, r0
 800622c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800622e:	7ffb      	ldrb	r3, [r7, #31]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d114      	bne.n	800625e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	1e5a      	subs	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1de      	bne.n	800621a <HAL_QSPI_Receive+0x9a>
 800625c:	e000      	b.n	8006260 <HAL_QSPI_Receive+0xe0>
          break;
 800625e:	bf00      	nop
      }

      if (status == HAL_OK)
 8006260:	7ffb      	ldrb	r3, [r7, #31]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d110      	bne.n	8006288 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2201      	movs	r2, #1
 800626e:	2102      	movs	r1, #2
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 f92a 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800627a:	7ffb      	ldrb	r3, [r7, #31]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d103      	bne.n	8006288 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2202      	movs	r2, #2
 8006286:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006290:	e00a      	b.n	80062a8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	f043 0208 	orr.w	r2, r3, #8
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	77fb      	strb	r3, [r7, #31]
 80062a2:	e001      	b.n	80062a8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80062b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3720      	adds	r7, #32
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b088      	sub	sp, #32
 80062be:	af02      	add	r7, sp, #8
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	607a      	str	r2, [r7, #4]
 80062c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80062c8:	f7fd f83a 	bl	8003340 <HAL_GetTick>
 80062cc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_QSPI_AutoPolling+0x24>
 80062da:	2302      	movs	r3, #2
 80062dc:	e060      	b.n	80063a0 <HAL_QSPI_AutoPolling+0xe6>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d14f      	bne.n	8006392 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2242      	movs	r2, #66	; 0x42
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2200      	movs	r2, #0
 8006308:	2120      	movs	r1, #32
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 f8dd 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d13d      	bne.n	8006396 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	6852      	ldr	r2, [r2, #4]
 800632c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6892      	ldr	r2, [r2, #8]
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	431a      	orrs	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006350:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800635a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f8e9 	bl	8006538 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2201      	movs	r2, #1
 800636e:	2108      	movs	r1, #8
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f8aa 	bl	80064ca <QSPI_WaitFlagStateUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2208      	movs	r2, #8
 8006386:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006390:	e001      	b.n	8006396 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006392:	2302      	movs	r3, #2
 8006394:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b08      	cmp	r3, #8
 8006488:	d114      	bne.n	80064b4 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2202      	movs	r2, #2
 8006490:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80064a0:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0202 	orr.w	r2, r2, #2
 80064b0:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80064b2:	e006      	b.n	80064c2 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff ff73 	bl	80063a8 <HAL_QSPI_ErrorCallback>
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064da:	e01a      	b.n	8006512 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d016      	beq.n	8006512 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e4:	f7fc ff2c 	bl	8003340 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d302      	bcc.n	80064fa <QSPI_WaitFlagStateUntilTimeout+0x30>
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2204      	movs	r2, #4
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	f043 0201 	orr.w	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e00e      	b.n	8006530 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	429a      	cmp	r2, r3
 800652c:	d1d6      	bne.n	80064dc <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <QSPI_Config+0x28>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006552:	d005      	beq.n	8006560 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3a01      	subs	r2, #1
 800655e:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80b9 	beq.w	80066dc <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d05f      	beq.n	8006632 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	6892      	ldr	r2, [r2, #8]
 800657a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d031      	beq.n	80065e8 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	431a      	orrs	r2, r3
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	431a      	orrs	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	431a      	orrs	r2, r3
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	049b      	lsls	r3, r3, #18
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	431a      	orrs	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	431a      	orrs	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	ea42 0103 	orr.w	r1, r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80065d8:	f000 812e 	beq.w	8006838 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	6852      	ldr	r2, [r2, #4]
 80065e4:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80065e6:	e127      	b.n	8006838 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f6:	431a      	orrs	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	431a      	orrs	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	049b      	lsls	r3, r3, #18
 8006604:	431a      	orrs	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	431a      	orrs	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	431a      	orrs	r2, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	431a      	orrs	r2, r3
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	431a      	orrs	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	ea42 0103 	orr.w	r1, r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	430a      	orrs	r2, r1
 800662e:	615a      	str	r2, [r3, #20]
}
 8006630:	e102      	b.n	8006838 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d02e      	beq.n	8006698 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	431a      	orrs	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006648:	431a      	orrs	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	431a      	orrs	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	049b      	lsls	r3, r3, #18
 8006656:	431a      	orrs	r2, r3
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	431a      	orrs	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	431a      	orrs	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	431a      	orrs	r2, r3
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	431a      	orrs	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	ea42 0103 	orr.w	r1, r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	430a      	orrs	r2, r1
 8006680:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006688:	f000 80d6 	beq.w	8006838 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	6852      	ldr	r2, [r2, #4]
 8006694:	619a      	str	r2, [r3, #24]
}
 8006696:	e0cf      	b.n	8006838 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a0:	431a      	orrs	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	431a      	orrs	r2, r3
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	049b      	lsls	r3, r3, #18
 80066b4:	431a      	orrs	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	ea42 0103 	orr.w	r1, r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	615a      	str	r2, [r3, #20]
}
 80066da:	e0ad      	b.n	8006838 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d058      	beq.n	8006796 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	6892      	ldr	r2, [r2, #8]
 80066ec:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d02d      	beq.n	8006752 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	431a      	orrs	r2, r3
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	431a      	orrs	r2, r3
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	431a      	orrs	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	695b      	ldr	r3, [r3, #20]
 8006710:	049b      	lsls	r3, r3, #18
 8006712:	431a      	orrs	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	431a      	orrs	r2, r3
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	431a      	orrs	r2, r3
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	431a      	orrs	r2, r3
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	69db      	ldr	r3, [r3, #28]
 800672a:	431a      	orrs	r2, r3
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	ea42 0103 	orr.w	r1, r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	430a      	orrs	r2, r1
 800673c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006744:	d078      	beq.n	8006838 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	6852      	ldr	r2, [r2, #4]
 800674e:	619a      	str	r2, [r3, #24]
}
 8006750:	e072      	b.n	8006838 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	431a      	orrs	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006760:	431a      	orrs	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	431a      	orrs	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	049b      	lsls	r3, r3, #18
 800676e:	431a      	orrs	r2, r3
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	431a      	orrs	r2, r3
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	431a      	orrs	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	431a      	orrs	r2, r3
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	ea42 0103 	orr.w	r1, r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	430a      	orrs	r2, r1
 8006792:	615a      	str	r2, [r3, #20]
}
 8006794:	e050      	b.n	8006838 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d02a      	beq.n	80067f4 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	431a      	orrs	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ac:	431a      	orrs	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	431a      	orrs	r2, r3
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	049b      	lsls	r3, r3, #18
 80067ba:	431a      	orrs	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	431a      	orrs	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	ea42 0103 	orr.w	r1, r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	430a      	orrs	r2, r1
 80067de:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067e6:	d027      	beq.n	8006838 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	6852      	ldr	r2, [r2, #4]
 80067f0:	619a      	str	r2, [r3, #24]
}
 80067f2:	e021      	b.n	8006838 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01d      	beq.n	8006838 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	431a      	orrs	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800680a:	431a      	orrs	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	431a      	orrs	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	049b      	lsls	r3, r3, #18
 8006818:	431a      	orrs	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	431a      	orrs	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	431a      	orrs	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	ea42 0103 	orr.w	r1, r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	430a      	orrs	r2, r1
 8006836:	615a      	str	r2, [r3, #20]
}
 8006838:	bf00      	nop
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800684c:	2300      	movs	r3, #0
 800684e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e29b      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8087 	beq.w	8006976 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006868:	4b96      	ldr	r3, [pc, #600]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f003 030c 	and.w	r3, r3, #12
 8006870:	2b04      	cmp	r3, #4
 8006872:	d00c      	beq.n	800688e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006874:	4b93      	ldr	r3, [pc, #588]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d112      	bne.n	80068a6 <HAL_RCC_OscConfig+0x62>
 8006880:	4b90      	ldr	r3, [pc, #576]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800688c:	d10b      	bne.n	80068a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800688e:	4b8d      	ldr	r3, [pc, #564]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d06c      	beq.n	8006974 <HAL_RCC_OscConfig+0x130>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d168      	bne.n	8006974 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e275      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ae:	d106      	bne.n	80068be <HAL_RCC_OscConfig+0x7a>
 80068b0:	4b84      	ldr	r3, [pc, #528]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a83      	ldr	r2, [pc, #524]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ba:	6013      	str	r3, [r2, #0]
 80068bc:	e02e      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10c      	bne.n	80068e0 <HAL_RCC_OscConfig+0x9c>
 80068c6:	4b7f      	ldr	r3, [pc, #508]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a7e      	ldr	r2, [pc, #504]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	4b7c      	ldr	r3, [pc, #496]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a7b      	ldr	r2, [pc, #492]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e01d      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e8:	d10c      	bne.n	8006904 <HAL_RCC_OscConfig+0xc0>
 80068ea:	4b76      	ldr	r3, [pc, #472]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a75      	ldr	r2, [pc, #468]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	4b73      	ldr	r3, [pc, #460]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a72      	ldr	r2, [pc, #456]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	e00b      	b.n	800691c <HAL_RCC_OscConfig+0xd8>
 8006904:	4b6f      	ldr	r3, [pc, #444]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6e      	ldr	r2, [pc, #440]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800690a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	4b6c      	ldr	r3, [pc, #432]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a6b      	ldr	r2, [pc, #428]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800691a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006924:	f7fc fd0c 	bl	8003340 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800692c:	f7fc fd08 	bl	8003340 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b64      	cmp	r3, #100	; 0x64
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e229      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693e:	4b61      	ldr	r3, [pc, #388]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0xe8>
 800694a:	e014      	b.n	8006976 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694c:	f7fc fcf8 	bl	8003340 <HAL_GetTick>
 8006950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006952:	e008      	b.n	8006966 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006954:	f7fc fcf4 	bl	8003340 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b64      	cmp	r3, #100	; 0x64
 8006960:	d901      	bls.n	8006966 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e215      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006966:	4b57      	ldr	r3, [pc, #348]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f0      	bne.n	8006954 <HAL_RCC_OscConfig+0x110>
 8006972:	e000      	b.n	8006976 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d069      	beq.n	8006a56 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006982:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00b      	beq.n	80069a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800698e:	4b4d      	ldr	r3, [pc, #308]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b08      	cmp	r3, #8
 8006998:	d11c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x190>
 800699a:	4b4a      	ldr	r3, [pc, #296]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d116      	bne.n	80069d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a6:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_RCC_OscConfig+0x17a>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d001      	beq.n	80069be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e1e9      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069be:	4b41      	ldr	r3, [pc, #260]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	493d      	ldr	r1, [pc, #244]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d2:	e040      	b.n	8006a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d023      	beq.n	8006a24 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069dc:	4b39      	ldr	r3, [pc, #228]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a38      	ldr	r2, [pc, #224]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e8:	f7fc fcaa 	bl	8003340 <HAL_GetTick>
 80069ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ee:	e008      	b.n	8006a02 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f0:	f7fc fca6 	bl	8003340 <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e1c7      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a02:	4b30      	ldr	r3, [pc, #192]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0f0      	beq.n	80069f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0e:	4b2d      	ldr	r3, [pc, #180]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	4929      	ldr	r1, [pc, #164]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	600b      	str	r3, [r1, #0]
 8006a22:	e018      	b.n	8006a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a26      	ldr	r2, [pc, #152]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a30:	f7fc fc86 	bl	8003340 <HAL_GetTick>
 8006a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a38:	f7fc fc82 	bl	8003340 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e1a3      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a4a:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1f0      	bne.n	8006a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0308 	and.w	r3, r3, #8
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d038      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d019      	beq.n	8006a9e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a6a:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	4a15      	ldr	r2, [pc, #84]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a76:	f7fc fc63 	bl	8003340 <HAL_GetTick>
 8006a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a7c:	e008      	b.n	8006a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a7e:	f7fc fc5f 	bl	8003340 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e180      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a90:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCC_OscConfig+0x23a>
 8006a9c:	e01a      	b.n	8006ad4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa2:	4a08      	ldr	r2, [pc, #32]	; (8006ac4 <HAL_RCC_OscConfig+0x280>)
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fc fc49 	bl	8003340 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ab2:	f7fc fc45 	bl	8003340 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d903      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e166      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
 8006ac4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac8:	4b92      	ldr	r3, [pc, #584]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006acc:	f003 0302 	and.w	r3, r3, #2
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1ee      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80a4 	beq.w	8006c2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ae2:	4b8c      	ldr	r3, [pc, #560]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10d      	bne.n	8006b0a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aee:	4b89      	ldr	r3, [pc, #548]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	4a88      	ldr	r2, [pc, #544]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af8:	6413      	str	r3, [r2, #64]	; 0x40
 8006afa:	4b86      	ldr	r3, [pc, #536]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b02:	60bb      	str	r3, [r7, #8]
 8006b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b0a:	4b83      	ldr	r3, [pc, #524]	; (8006d18 <HAL_RCC_OscConfig+0x4d4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d118      	bne.n	8006b48 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b16:	4b80      	ldr	r3, [pc, #512]	; (8006d18 <HAL_RCC_OscConfig+0x4d4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a7f      	ldr	r2, [pc, #508]	; (8006d18 <HAL_RCC_OscConfig+0x4d4>)
 8006b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b22:	f7fc fc0d 	bl	8003340 <HAL_GetTick>
 8006b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b28:	e008      	b.n	8006b3c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b2a:	f7fc fc09 	bl	8003340 <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b64      	cmp	r3, #100	; 0x64
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e12a      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b3c:	4b76      	ldr	r3, [pc, #472]	; (8006d18 <HAL_RCC_OscConfig+0x4d4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0f0      	beq.n	8006b2a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d106      	bne.n	8006b5e <HAL_RCC_OscConfig+0x31a>
 8006b50:	4b70      	ldr	r3, [pc, #448]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b54:	4a6f      	ldr	r2, [pc, #444]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b5c:	e02d      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10c      	bne.n	8006b80 <HAL_RCC_OscConfig+0x33c>
 8006b66:	4b6b      	ldr	r3, [pc, #428]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	4a6a      	ldr	r2, [pc, #424]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b6c:	f023 0301 	bic.w	r3, r3, #1
 8006b70:	6713      	str	r3, [r2, #112]	; 0x70
 8006b72:	4b68      	ldr	r3, [pc, #416]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b76:	4a67      	ldr	r2, [pc, #412]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b78:	f023 0304 	bic.w	r3, r3, #4
 8006b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b7e:	e01c      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	2b05      	cmp	r3, #5
 8006b86:	d10c      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x35e>
 8006b88:	4b62      	ldr	r3, [pc, #392]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	4a61      	ldr	r2, [pc, #388]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b8e:	f043 0304 	orr.w	r3, r3, #4
 8006b92:	6713      	str	r3, [r2, #112]	; 0x70
 8006b94:	4b5f      	ldr	r3, [pc, #380]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b98:	4a5e      	ldr	r2, [pc, #376]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba0:	e00b      	b.n	8006bba <HAL_RCC_OscConfig+0x376>
 8006ba2:	4b5c      	ldr	r3, [pc, #368]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	4a5b      	ldr	r2, [pc, #364]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006ba8:	f023 0301 	bic.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	; 0x70
 8006bae:	4b59      	ldr	r3, [pc, #356]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb2:	4a58      	ldr	r2, [pc, #352]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006bb4:	f023 0304 	bic.w	r3, r3, #4
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d015      	beq.n	8006bee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bc2:	f7fc fbbd 	bl	8003340 <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc8:	e00a      	b.n	8006be0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bca:	f7fc fbb9 	bl	8003340 <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0d8      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be0:	4b4c      	ldr	r3, [pc, #304]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0ee      	beq.n	8006bca <HAL_RCC_OscConfig+0x386>
 8006bec:	e014      	b.n	8006c18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bee:	f7fc fba7 	bl	8003340 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bf4:	e00a      	b.n	8006c0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf6:	f7fc fba3 	bl	8003340 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e0c2      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c0c:	4b41      	ldr	r3, [pc, #260]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1ee      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d105      	bne.n	8006c2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c1e:	4b3d      	ldr	r3, [pc, #244]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	4a3c      	ldr	r2, [pc, #240]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80ae 	beq.w	8006d90 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c34:	4b37      	ldr	r3, [pc, #220]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d06d      	beq.n	8006d1c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d14b      	bne.n	8006ce0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c48:	4b32      	ldr	r3, [pc, #200]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a31      	ldr	r2, [pc, #196]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7fc fb74 	bl	8003340 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5c:	f7fc fb70 	bl	8003340 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e091      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c6e:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1f0      	bne.n	8006c5c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	085b      	lsrs	r3, r3, #1
 8006c92:	3b01      	subs	r3, #1
 8006c94:	041b      	lsls	r3, r3, #16
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	061b      	lsls	r3, r3, #24
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	071b      	lsls	r3, r3, #28
 8006ca6:	491b      	ldr	r1, [pc, #108]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cac:	4b19      	ldr	r3, [pc, #100]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fc fb42 	bl	8003340 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cc0:	f7fc fb3e 	bl	8003340 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e05f      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd2:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x47c>
 8006cde:	e057      	b.n	8006d90 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a0b      	ldr	r2, [pc, #44]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cec:	f7fc fb28 	bl	8003340 <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf4:	f7fc fb24 	bl	8003340 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e045      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d06:	4b03      	ldr	r3, [pc, #12]	; (8006d14 <HAL_RCC_OscConfig+0x4d0>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f0      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x4b0>
 8006d12:	e03d      	b.n	8006d90 <HAL_RCC_OscConfig+0x54c>
 8006d14:	40023800 	.word	0x40023800
 8006d18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d1c:	4b1f      	ldr	r3, [pc, #124]	; (8006d9c <HAL_RCC_OscConfig+0x558>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d030      	beq.n	8006d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d129      	bne.n	8006d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d122      	bne.n	8006d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d119      	bne.n	8006d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	3b01      	subs	r3, #1
 8006d66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d10f      	bne.n	8006d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d107      	bne.n	8006d8c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d001      	beq.n	8006d90 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40023800 	.word	0x40023800

08006da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e0d0      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006db8:	4b6a      	ldr	r3, [pc, #424]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 030f 	and.w	r3, r3, #15
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d910      	bls.n	8006de8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc6:	4b67      	ldr	r3, [pc, #412]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f023 020f 	bic.w	r2, r3, #15
 8006dce:	4965      	ldr	r1, [pc, #404]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd6:	4b63      	ldr	r3, [pc, #396]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d001      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0b8      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d020      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e00:	4b59      	ldr	r3, [pc, #356]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	4a58      	ldr	r2, [pc, #352]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e18:	4b53      	ldr	r3, [pc, #332]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	4a52      	ldr	r2, [pc, #328]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e24:	4b50      	ldr	r3, [pc, #320]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	494d      	ldr	r1, [pc, #308]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d040      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d107      	bne.n	8006e5a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4a:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d115      	bne.n	8006e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e07f      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d107      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e62:	4b41      	ldr	r3, [pc, #260]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d109      	bne.n	8006e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e073      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e72:	4b3d      	ldr	r3, [pc, #244]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e06b      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e82:	4b39      	ldr	r3, [pc, #228]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f023 0203 	bic.w	r2, r3, #3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4936      	ldr	r1, [pc, #216]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e94:	f7fc fa54 	bl	8003340 <HAL_GetTick>
 8006e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e9a:	e00a      	b.n	8006eb2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e9c:	f7fc fa50 	bl	8003340 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e053      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eb2:	4b2d      	ldr	r3, [pc, #180]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 020c 	and.w	r2, r3, #12
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d1eb      	bne.n	8006e9c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec4:	4b27      	ldr	r3, [pc, #156]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d210      	bcs.n	8006ef4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed2:	4b24      	ldr	r3, [pc, #144]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f023 020f 	bic.w	r2, r3, #15
 8006eda:	4922      	ldr	r1, [pc, #136]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee2:	4b20      	ldr	r3, [pc, #128]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d001      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e032      	b.n	8006f5a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f00:	4b19      	ldr	r3, [pc, #100]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	4916      	ldr	r1, [pc, #88]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d009      	beq.n	8006f32 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	490e      	ldr	r1, [pc, #56]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f32:	f000 f831 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006f36:	4601      	mov	r1, r0
 8006f38:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	091b      	lsrs	r3, r3, #4
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <HAL_RCC_ClockConfig+0x1cc>)
 8006f44:	5cd3      	ldrb	r3, [r2, r3]
 8006f46:	fa21 f303 	lsr.w	r3, r1, r3
 8006f4a:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <HAL_RCC_ClockConfig+0x1d0>)
 8006f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f4e:	4b09      	ldr	r3, [pc, #36]	; (8006f74 <HAL_RCC_ClockConfig+0x1d4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fc f9b0 	bl	80032b8 <HAL_InitTick>

  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	40023c00 	.word	0x40023c00
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	0800eec8 	.word	0x0800eec8
 8006f70:	20000004 	.word	0x20000004
 8006f74:	20000008 	.word	0x20000008

08006f78 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <HAL_RCC_EnableCSS+0x1c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <HAL_RCC_EnableCSS+0x1c>)
 8006f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f86:	6013      	str	r3, [r2, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800

08006f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fae:	4b50      	ldr	r3, [pc, #320]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 030c 	and.w	r3, r3, #12
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	d007      	beq.n	8006fca <HAL_RCC_GetSysClockFreq+0x32>
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d008      	beq.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x38>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f040 808d 	bne.w	80070de <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fc4:	4b4b      	ldr	r3, [pc, #300]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006fc6:	60bb      	str	r3, [r7, #8]
      break;
 8006fc8:	e08c      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fca:	4b4b      	ldr	r3, [pc, #300]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fcc:	60bb      	str	r3, [r7, #8]
      break;
 8006fce:	e089      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fd0:	4b47      	ldr	r3, [pc, #284]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fd8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006fda:	4b45      	ldr	r3, [pc, #276]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d023      	beq.n	800702e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fe6:	4b42      	ldr	r3, [pc, #264]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	099b      	lsrs	r3, r3, #6
 8006fec:	f04f 0400 	mov.w	r4, #0
 8006ff0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	ea03 0501 	and.w	r5, r3, r1
 8006ffc:	ea04 0602 	and.w	r6, r4, r2
 8007000:	4a3d      	ldr	r2, [pc, #244]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007002:	fb02 f106 	mul.w	r1, r2, r6
 8007006:	2200      	movs	r2, #0
 8007008:	fb02 f205 	mul.w	r2, r2, r5
 800700c:	440a      	add	r2, r1
 800700e:	493a      	ldr	r1, [pc, #232]	; (80070f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007010:	fba5 0101 	umull	r0, r1, r5, r1
 8007014:	1853      	adds	r3, r2, r1
 8007016:	4619      	mov	r1, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f04f 0400 	mov.w	r4, #0
 800701e:	461a      	mov	r2, r3
 8007020:	4623      	mov	r3, r4
 8007022:	f7f9 f965 	bl	80002f0 <__aeabi_uldivmod>
 8007026:	4603      	mov	r3, r0
 8007028:	460c      	mov	r4, r1
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	e049      	b.n	80070c2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800702e:	4b30      	ldr	r3, [pc, #192]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	099b      	lsrs	r3, r3, #6
 8007034:	f04f 0400 	mov.w	r4, #0
 8007038:	f240 11ff 	movw	r1, #511	; 0x1ff
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	ea03 0501 	and.w	r5, r3, r1
 8007044:	ea04 0602 	and.w	r6, r4, r2
 8007048:	4629      	mov	r1, r5
 800704a:	4632      	mov	r2, r6
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	f04f 0400 	mov.w	r4, #0
 8007054:	0154      	lsls	r4, r2, #5
 8007056:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800705a:	014b      	lsls	r3, r1, #5
 800705c:	4619      	mov	r1, r3
 800705e:	4622      	mov	r2, r4
 8007060:	1b49      	subs	r1, r1, r5
 8007062:	eb62 0206 	sbc.w	r2, r2, r6
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	f04f 0400 	mov.w	r4, #0
 800706e:	0194      	lsls	r4, r2, #6
 8007070:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007074:	018b      	lsls	r3, r1, #6
 8007076:	1a5b      	subs	r3, r3, r1
 8007078:	eb64 0402 	sbc.w	r4, r4, r2
 800707c:	f04f 0100 	mov.w	r1, #0
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	00e2      	lsls	r2, r4, #3
 8007086:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800708a:	00d9      	lsls	r1, r3, #3
 800708c:	460b      	mov	r3, r1
 800708e:	4614      	mov	r4, r2
 8007090:	195b      	adds	r3, r3, r5
 8007092:	eb44 0406 	adc.w	r4, r4, r6
 8007096:	f04f 0100 	mov.w	r1, #0
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	02a2      	lsls	r2, r4, #10
 80070a0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80070a4:	0299      	lsls	r1, r3, #10
 80070a6:	460b      	mov	r3, r1
 80070a8:	4614      	mov	r4, r2
 80070aa:	4618      	mov	r0, r3
 80070ac:	4621      	mov	r1, r4
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f04f 0400 	mov.w	r4, #0
 80070b4:	461a      	mov	r2, r3
 80070b6:	4623      	mov	r3, r4
 80070b8:	f7f9 f91a 	bl	80002f0 <__aeabi_uldivmod>
 80070bc:	4603      	mov	r3, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	0c1b      	lsrs	r3, r3, #16
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	3301      	adds	r3, #1
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	60bb      	str	r3, [r7, #8]
      break;
 80070dc:	e002      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070de:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80070e0:	60bb      	str	r3, [r7, #8]
      break;
 80070e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070e4:	68bb      	ldr	r3, [r7, #8]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ee:	bf00      	nop
 80070f0:	40023800 	.word	0x40023800
 80070f4:	00f42400 	.word	0x00f42400
 80070f8:	017d7840 	.word	0x017d7840

080070fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007100:	4b03      	ldr	r3, [pc, #12]	; (8007110 <HAL_RCC_GetHCLKFreq+0x14>)
 8007102:	681b      	ldr	r3, [r3, #0]
}
 8007104:	4618      	mov	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20000004 	.word	0x20000004

08007114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007118:	f7ff fff0 	bl	80070fc <HAL_RCC_GetHCLKFreq>
 800711c:	4601      	mov	r1, r0
 800711e:	4b05      	ldr	r3, [pc, #20]	; (8007134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	0a9b      	lsrs	r3, r3, #10
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	4a03      	ldr	r2, [pc, #12]	; (8007138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800712a:	5cd3      	ldrb	r3, [r2, r3]
 800712c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007130:	4618      	mov	r0, r3
 8007132:	bd80      	pop	{r7, pc}
 8007134:	40023800 	.word	0x40023800
 8007138:	0800eed8 	.word	0x0800eed8

0800713c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007140:	f7ff ffdc 	bl	80070fc <HAL_RCC_GetHCLKFreq>
 8007144:	4601      	mov	r1, r0
 8007146:	4b05      	ldr	r3, [pc, #20]	; (800715c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	0b5b      	lsrs	r3, r3, #13
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	4a03      	ldr	r2, [pc, #12]	; (8007160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007152:	5cd3      	ldrb	r3, [r2, r3]
 8007154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007158:	4618      	mov	r0, r3
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40023800 	.word	0x40023800
 8007160:	0800eed8 	.word	0x0800eed8

08007164 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <HAL_RCC_NMI_IRQHandler+0x20>)
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b80      	cmp	r3, #128	; 0x80
 8007172:	d104      	bne.n	800717e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007174:	f000 f80a 	bl	800718c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007178:	4b03      	ldr	r3, [pc, #12]	; (8007188 <HAL_RCC_NMI_IRQHandler+0x24>)
 800717a:	2280      	movs	r2, #128	; 0x80
 800717c:	701a      	strb	r2, [r3, #0]
  }
}
 800717e:	bf00      	nop
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40023800 	.word	0x40023800
 8007188:	4002380e 	.word	0x4002380e

0800718c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
	...

0800719c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d012      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071c4:	4b69      	ldr	r3, [pc, #420]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	4a68      	ldr	r2, [pc, #416]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80071ce:	6093      	str	r3, [r2, #8]
 80071d0:	4b66      	ldr	r3, [pc, #408]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071d2:	689a      	ldr	r2, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d8:	4964      	ldr	r1, [pc, #400]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d017      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071f6:	4b5d      	ldr	r3, [pc, #372]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007204:	4959      	ldr	r1, [pc, #356]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007214:	d101      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007216:	2301      	movs	r3, #1
 8007218:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007222:	2301      	movs	r3, #1
 8007224:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d017      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007232:	4b4e      	ldr	r3, [pc, #312]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007238:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007240:	494a      	ldr	r1, [pc, #296]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007250:	d101      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007252:	2301      	movs	r3, #1
 8007254:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800725e:	2301      	movs	r3, #1
 8007260:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800726e:	2301      	movs	r3, #1
 8007270:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 808b 	beq.w	8007396 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007280:	4b3a      	ldr	r3, [pc, #232]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	4a39      	ldr	r2, [pc, #228]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800728a:	6413      	str	r3, [r2, #64]	; 0x40
 800728c:	4b37      	ldr	r3, [pc, #220]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800728e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007294:	60bb      	str	r3, [r7, #8]
 8007296:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007298:	4b35      	ldr	r3, [pc, #212]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a34      	ldr	r2, [pc, #208]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800729e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072a4:	f7fc f84c 	bl	8003340 <HAL_GetTick>
 80072a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ac:	f7fc f848 	bl	8003340 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b64      	cmp	r3, #100	; 0x64
 80072b8:	d901      	bls.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e38d      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80072be:	4b2c      	ldr	r3, [pc, #176]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072ca:	4b28      	ldr	r3, [pc, #160]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d035      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d02e      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072e8:	4b20      	ldr	r3, [pc, #128]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072f2:	4b1e      	ldr	r3, [pc, #120]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	4a1d      	ldr	r2, [pc, #116]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072fe:	4b1b      	ldr	r3, [pc, #108]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007302:	4a1a      	ldr	r2, [pc, #104]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007308:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800730a:	4a18      	ldr	r2, [pc, #96]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007310:	4b16      	ldr	r3, [pc, #88]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b01      	cmp	r3, #1
 800731a:	d114      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800731c:	f7fc f810 	bl	8003340 <HAL_GetTick>
 8007320:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007322:	e00a      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007324:	f7fc f80c 	bl	8003340 <HAL_GetTick>
 8007328:	4602      	mov	r2, r0
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007332:	4293      	cmp	r3, r2
 8007334:	d901      	bls.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e34f      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800733a:	4b0c      	ldr	r3, [pc, #48]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800733c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0ee      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800734e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007352:	d111      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007354:	4b05      	ldr	r3, [pc, #20]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007360:	4b04      	ldr	r3, [pc, #16]	; (8007374 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007362:	400b      	ands	r3, r1
 8007364:	4901      	ldr	r1, [pc, #4]	; (800736c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007366:	4313      	orrs	r3, r2
 8007368:	608b      	str	r3, [r1, #8]
 800736a:	e00b      	b.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800736c:	40023800 	.word	0x40023800
 8007370:	40007000 	.word	0x40007000
 8007374:	0ffffcff 	.word	0x0ffffcff
 8007378:	4bb3      	ldr	r3, [pc, #716]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4ab2      	ldr	r2, [pc, #712]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800737e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007382:	6093      	str	r3, [r2, #8]
 8007384:	4bb0      	ldr	r3, [pc, #704]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007386:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007390:	49ad      	ldr	r1, [pc, #692]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007392:	4313      	orrs	r3, r2
 8007394:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d010      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073a2:	4ba9      	ldr	r3, [pc, #676]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a8:	4aa7      	ldr	r2, [pc, #668]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80073b2:	4ba5      	ldr	r3, [pc, #660]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	49a2      	ldr	r1, [pc, #648]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80073d0:	4b9d      	ldr	r3, [pc, #628]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073de:	499a      	ldr	r1, [pc, #616]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00a      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073f2:	4b95      	ldr	r3, [pc, #596]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80073f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007400:	4991      	ldr	r1, [pc, #580]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007414:	4b8c      	ldr	r3, [pc, #560]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007422:	4989      	ldr	r1, [pc, #548]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007424:	4313      	orrs	r3, r2
 8007426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007436:	4b84      	ldr	r3, [pc, #528]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007444:	4980      	ldr	r1, [pc, #512]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007458:	4b7b      	ldr	r3, [pc, #492]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745e:	f023 0203 	bic.w	r2, r3, #3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007466:	4978      	ldr	r1, [pc, #480]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007468:	4313      	orrs	r3, r2
 800746a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800747a:	4b73      	ldr	r3, [pc, #460]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800747c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007480:	f023 020c 	bic.w	r2, r3, #12
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007488:	496f      	ldr	r1, [pc, #444]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800748a:	4313      	orrs	r3, r2
 800748c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800749c:	4b6a      	ldr	r3, [pc, #424]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800749e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074aa:	4967      	ldr	r1, [pc, #412]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074be:	4b62      	ldr	r3, [pc, #392]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074cc:	495e      	ldr	r1, [pc, #376]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074e0:	4b59      	ldr	r3, [pc, #356]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ee:	4956      	ldr	r1, [pc, #344]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007502:	4b51      	ldr	r3, [pc, #324]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007508:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007510:	494d      	ldr	r1, [pc, #308]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007512:	4313      	orrs	r3, r2
 8007514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007524:	4b48      	ldr	r3, [pc, #288]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007532:	4945      	ldr	r1, [pc, #276]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007534:	4313      	orrs	r3, r2
 8007536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007546:	4b40      	ldr	r3, [pc, #256]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	493c      	ldr	r1, [pc, #240]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007568:	4b37      	ldr	r3, [pc, #220]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007576:	4934      	ldr	r1, [pc, #208]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d011      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800758a:	4b2f      	ldr	r3, [pc, #188]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007590:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007598:	492b      	ldr	r1, [pc, #172]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a8:	d101      	bne.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80075aa:	2301      	movs	r3, #1
 80075ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80075ba:	2301      	movs	r3, #1
 80075bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075ca:	4b1f      	ldr	r3, [pc, #124]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075d8:	491b      	ldr	r1, [pc, #108]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075ec:	4b16      	ldr	r3, [pc, #88]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fc:	4912      	ldr	r1, [pc, #72]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007610:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007616:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007620:	4909      	ldr	r1, [pc, #36]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00f      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800763a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007644:	e002      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007646:	bf00      	nop
 8007648:	40023800 	.word	0x40023800
 800764c:	4985      	ldr	r1, [pc, #532]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800764e:	4313      	orrs	r3, r2
 8007650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007660:	4b80      	ldr	r3, [pc, #512]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007666:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007670:	497c      	ldr	r1, [pc, #496]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d005      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007686:	f040 80d6 	bne.w	8007836 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800768a:	4b76      	ldr	r3, [pc, #472]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a75      	ldr	r2, [pc, #468]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007696:	f7fb fe53 	bl	8003340 <HAL_GetTick>
 800769a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800769c:	e008      	b.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800769e:	f7fb fe4f 	bl	8003340 <HAL_GetTick>
 80076a2:	4602      	mov	r2, r0
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	1ad3      	subs	r3, r2, r3
 80076a8:	2b64      	cmp	r3, #100	; 0x64
 80076aa:	d901      	bls.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	e194      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076b0:	4b6c      	ldr	r3, [pc, #432]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f0      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d021      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d11d      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076d0:	4b64      	ldr	r3, [pc, #400]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80076d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076d6:	0c1b      	lsrs	r3, r3, #16
 80076d8:	f003 0303 	and.w	r3, r3, #3
 80076dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076de:	4b61      	ldr	r3, [pc, #388]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80076e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e4:	0e1b      	lsrs	r3, r3, #24
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	019a      	lsls	r2, r3, #6
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	041b      	lsls	r3, r3, #16
 80076f6:	431a      	orrs	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	061b      	lsls	r3, r3, #24
 80076fc:	431a      	orrs	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	071b      	lsls	r3, r3, #28
 8007704:	4957      	ldr	r1, [pc, #348]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007720:	d00a      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800772a:	2b00      	cmp	r3, #0
 800772c:	d02e      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007736:	d129      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007738:	4b4a      	ldr	r3, [pc, #296]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800773a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800773e:	0c1b      	lsrs	r3, r3, #16
 8007740:	f003 0303 	and.w	r3, r3, #3
 8007744:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007746:	4b47      	ldr	r3, [pc, #284]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774c:	0f1b      	lsrs	r3, r3, #28
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	019a      	lsls	r2, r3, #6
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	431a      	orrs	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	061b      	lsls	r3, r3, #24
 8007766:	431a      	orrs	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	071b      	lsls	r3, r3, #28
 800776c:	493d      	ldr	r1, [pc, #244]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800776e:	4313      	orrs	r3, r2
 8007770:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007774:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800777a:	f023 021f 	bic.w	r2, r3, #31
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	3b01      	subs	r3, #1
 8007784:	4937      	ldr	r1, [pc, #220]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007786:	4313      	orrs	r3, r2
 8007788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01d      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007798:	4b32      	ldr	r3, [pc, #200]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800779a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800779e:	0e1b      	lsrs	r3, r3, #24
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077a6:	4b2f      	ldr	r3, [pc, #188]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80077a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ac:	0f1b      	lsrs	r3, r3, #28
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	019a      	lsls	r2, r3, #6
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	041b      	lsls	r3, r3, #16
 80077c0:	431a      	orrs	r2, r3
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	061b      	lsls	r3, r3, #24
 80077c6:	431a      	orrs	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	071b      	lsls	r3, r3, #28
 80077cc:	4925      	ldr	r1, [pc, #148]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d011      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	019a      	lsls	r2, r3, #6
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	061b      	lsls	r3, r3, #24
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	071b      	lsls	r3, r3, #28
 80077fc:	4919      	ldr	r1, [pc, #100]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007804:	4b17      	ldr	r3, [pc, #92]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a16      	ldr	r2, [pc, #88]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800780a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800780e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007810:	f7fb fd96 	bl	8003340 <HAL_GetTick>
 8007814:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007816:	e008      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007818:	f7fb fd92 	bl	8003340 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	; 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e0d7      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0f0      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b01      	cmp	r3, #1
 800783a:	f040 80cd 	bne.w	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a08      	ldr	r2, [pc, #32]	; (8007864 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8007844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784a:	f7fb fd79 	bl	8003340 <HAL_GetTick>
 800784e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007850:	e00a      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007852:	f7fb fd75 	bl	8003340 <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b64      	cmp	r3, #100	; 0x64
 800785e:	d903      	bls.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e0ba      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8007864:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007868:	4b5e      	ldr	r3, [pc, #376]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007874:	d0ed      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007892:	2b00      	cmp	r3, #0
 8007894:	d02e      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d12a      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800789e:	4b51      	ldr	r3, [pc, #324]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078ac:	4b4d      	ldr	r3, [pc, #308]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b2:	0f1b      	lsrs	r3, r3, #28
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	019a      	lsls	r2, r3, #6
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	041b      	lsls	r3, r3, #16
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	061b      	lsls	r3, r3, #24
 80078cc:	431a      	orrs	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	071b      	lsls	r3, r3, #28
 80078d2:	4944      	ldr	r1, [pc, #272]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078da:	4b42      	ldr	r3, [pc, #264]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	3b01      	subs	r3, #1
 80078ea:	021b      	lsls	r3, r3, #8
 80078ec:	493d      	ldr	r1, [pc, #244]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d022      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007908:	d11d      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800790a:	4b36      	ldr	r3, [pc, #216]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800790c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007910:	0e1b      	lsrs	r3, r3, #24
 8007912:	f003 030f 	and.w	r3, r3, #15
 8007916:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007918:	4b32      	ldr	r3, [pc, #200]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800791a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791e:	0f1b      	lsrs	r3, r3, #28
 8007920:	f003 0307 	and.w	r3, r3, #7
 8007924:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	019a      	lsls	r2, r3, #6
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	041b      	lsls	r3, r3, #16
 8007932:	431a      	orrs	r2, r3
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	061b      	lsls	r3, r3, #24
 8007938:	431a      	orrs	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	071b      	lsls	r3, r3, #28
 800793e:	4929      	ldr	r1, [pc, #164]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007940:	4313      	orrs	r3, r2
 8007942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d028      	beq.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007952:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007958:	0e1b      	lsrs	r3, r3, #24
 800795a:	f003 030f 	and.w	r3, r3, #15
 800795e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007960:	4b20      	ldr	r3, [pc, #128]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007966:	0c1b      	lsrs	r3, r3, #16
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	019a      	lsls	r2, r3, #6
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	041b      	lsls	r3, r3, #16
 8007978:	431a      	orrs	r2, r3
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	061b      	lsls	r3, r3, #24
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	69db      	ldr	r3, [r3, #28]
 8007984:	071b      	lsls	r3, r3, #28
 8007986:	4917      	ldr	r1, [pc, #92]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007988:	4313      	orrs	r3, r2
 800798a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800798e:	4b15      	ldr	r3, [pc, #84]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8007990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007994:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	4911      	ldr	r1, [pc, #68]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80079a4:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a0e      	ldr	r2, [pc, #56]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80079aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b0:	f7fb fcc6 	bl	8003340 <HAL_GetTick>
 80079b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80079b6:	e008      	b.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079b8:	f7fb fcc2 	bl	8003340 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b64      	cmp	r3, #100	; 0x64
 80079c4:	d901      	bls.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e007      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80079ca:	4b06      	ldr	r3, [pc, #24]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079d6:	d1ef      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3720      	adds	r7, #32
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40023800 	.word	0x40023800

080079e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e06b      	b.n	8007ad2 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	7f5b      	ldrb	r3, [r3, #29]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d105      	bne.n	8007a10 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7fb f8bc 	bl	8002b88 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	22ca      	movs	r2, #202	; 0xca
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2253      	movs	r2, #83	; 0x53
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f9e8 	bl	8007dfc <RTC_EnterInitMode>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d008      	beq.n	8007a44 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	22ff      	movs	r2, #255	; 0xff
 8007a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e046      	b.n	8007ad2 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6899      	ldr	r1, [r3, #8]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	4b23      	ldr	r3, [pc, #140]	; (8007adc <HAL_RTC_Init+0xf4>)
 8007a50:	400b      	ands	r3, r1
 8007a52:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	6899      	ldr	r1, [r3, #8]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	431a      	orrs	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	68d2      	ldr	r2, [r2, #12]
 8007a7a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6919      	ldr	r1, [r3, #16]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	041a      	lsls	r2, r3, #16
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a9e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0208 	bic.w	r2, r2, #8
 8007aae:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699a      	ldr	r2, [r3, #24]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	22ff      	movs	r2, #255	; 0xff
 8007ac8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
  }
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	ff8fffbf 	.word	0xff8fffbf

08007ae0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	7f1b      	ldrb	r3, [r3, #28]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_RTC_SetTime+0x1c>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e0a8      	b.n	8007c4e <HAL_RTC_SetTime+0x16e>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2202      	movs	r2, #2
 8007b06:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d126      	bne.n	8007b5c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 f994 	bl	8007e54 <RTC_ByteToBcd2>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 f98d 	bl	8007e54 <RTC_ByteToBcd2>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b3e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	789b      	ldrb	r3, [r3, #2]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 f985 	bl	8007e54 <RTC_ByteToBcd2>
 8007b4a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007b4c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	7b1b      	ldrb	r3, [r3, #12]
 8007b54:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e018      	b.n	8007b8e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d102      	bne.n	8007b70 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b7c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8007b82:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	7b1b      	ldrb	r3, [r3, #12]
 8007b88:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	22ca      	movs	r2, #202	; 0xca
 8007b94:	625a      	str	r2, [r3, #36]	; 0x24
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2253      	movs	r2, #83	; 0x53
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f92c 	bl	8007dfc <RTC_EnterInitMode>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00b      	beq.n	8007bc2 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	22ff      	movs	r2, #255	; 0xff
 8007bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e045      	b.n	8007c4e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	6979      	ldr	r1, [r7, #20]
 8007bc8:	4b23      	ldr	r3, [pc, #140]	; (8007c58 <HAL_RTC_SetTime+0x178>)
 8007bca:	400b      	ands	r3, r1
 8007bcc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007bdc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6899      	ldr	r1, [r3, #8]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	431a      	orrs	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c04:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d111      	bne.n	8007c38 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f8c9 	bl	8007dac <HAL_RTC_WaitForSynchro>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e00a      	b.n	8007c4e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	22ff      	movs	r2, #255	; 0xff
 8007c3e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2201      	movs	r2, #1
 8007c44:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
  }
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	371c      	adds	r7, #28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd90      	pop	{r4, r7, pc}
 8007c56:	bf00      	nop
 8007c58:	007f7f7f 	.word	0x007f7f7f

08007c5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c5c:	b590      	push	{r4, r7, lr}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	7f1b      	ldrb	r3, [r3, #28]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_RTC_SetDate+0x1c>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e092      	b.n	8007d9e <HAL_RTC_SetDate+0x142>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2202      	movs	r2, #2
 8007c82:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10e      	bne.n	8007ca8 <HAL_RTC_SetDate+0x4c>
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	785b      	ldrb	r3, [r3, #1]
 8007c9a:	f023 0310 	bic.w	r3, r3, #16
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	330a      	adds	r3, #10
 8007ca2:	b2da      	uxtb	r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d11c      	bne.n	8007ce8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	78db      	ldrb	r3, [r3, #3]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 f8ce 	bl	8007e54 <RTC_ByteToBcd2>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 f8c7 	bl	8007e54 <RTC_ByteToBcd2>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007cca:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	789b      	ldrb	r3, [r3, #2]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 f8bf 	bl	8007e54 <RTC_ByteToBcd2>
 8007cd6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007cd8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
 8007ce6:	e00e      	b.n	8007d06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	78db      	ldrb	r3, [r3, #3]
 8007cec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007cf4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007cfa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007d02:	4313      	orrs	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	22ca      	movs	r2, #202	; 0xca
 8007d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2253      	movs	r2, #83	; 0x53
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f000 f870 	bl	8007dfc <RTC_EnterInitMode>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00b      	beq.n	8007d3a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	22ff      	movs	r2, #255	; 0xff
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e031      	b.n	8007d9e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	6979      	ldr	r1, [r7, #20]
 8007d40:	4b19      	ldr	r3, [pc, #100]	; (8007da8 <HAL_RTC_SetDate+0x14c>)
 8007d42:	400b      	ands	r3, r1
 8007d44:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d54:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d111      	bne.n	8007d88 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f821 	bl	8007dac <HAL_RTC_WaitForSynchro>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	22ff      	movs	r2, #255	; 0xff
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e00a      	b.n	8007d9e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	22ff      	movs	r2, #255	; 0xff
 8007d8e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
  }
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd90      	pop	{r4, r7, pc}
 8007da6:	bf00      	nop
 8007da8:	00ffff3f 	.word	0x00ffff3f

08007dac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007dc6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007dc8:	f7fb faba 	bl	8003340 <HAL_GetTick>
 8007dcc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007dce:	e009      	b.n	8007de4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007dd0:	f7fb fab6 	bl	8003340 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dde:	d901      	bls.n	8007de4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e007      	b.n	8007df4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	f003 0320 	and.w	r3, r3, #32
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0ee      	beq.n	8007dd0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d119      	bne.n	8007e4a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e20:	f7fb fa8e 	bl	8003340 <HAL_GetTick>
 8007e24:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e26:	e009      	b.n	8007e3c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e28:	f7fb fa8a 	bl	8003340 <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e36:	d901      	bls.n	8007e3c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e007      	b.n	8007e4c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0ee      	beq.n	8007e28 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8007e62:	e005      	b.n	8007e70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3301      	adds	r3, #1
 8007e68:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	3b0a      	subs	r3, #10
 8007e6e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b09      	cmp	r3, #9
 8007e74:	d8f6      	bhi.n	8007e64 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	b2da      	uxtb	r2, r3
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	b2db      	uxtb	r3, r3
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d101      	bne.n	8007ea2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e084      	b.n	8007fac <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fa fedf 	bl	8002c80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ee2:	d902      	bls.n	8007eea <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e002      	b.n	8007ef0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007eee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007ef8:	d007      	beq.n	8007f0a <HAL_SPI_Init+0x7a>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f02:	d002      	beq.n	8007f0a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10b      	bne.n	8007f2a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f1a:	d903      	bls.n	8007f24 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2202      	movs	r2, #2
 8007f20:	631a      	str	r2, [r3, #48]	; 0x30
 8007f22:	e002      	b.n	8007f2a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	ea42 0103 	orr.w	r1, r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	0c1b      	lsrs	r3, r3, #16
 8007f6a:	f003 0204 	and.w	r2, r3, #4
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	431a      	orrs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	ea42 0103 	orr.w	r1, r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	69da      	ldr	r2, [r3, #28]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	603b      	str	r3, [r7, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d101      	bne.n	8007fd6 <HAL_SPI_Transmit+0x22>
 8007fd2:	2302      	movs	r3, #2
 8007fd4:	e150      	b.n	8008278 <HAL_SPI_Transmit+0x2c4>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fde:	f7fb f9af 	bl	8003340 <HAL_GetTick>
 8007fe2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d002      	beq.n	8007ffa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ff8:	e135      	b.n	8008266 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <HAL_SPI_Transmit+0x52>
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800800a:	e12c      	b.n	8008266 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2203      	movs	r2, #3
 8008010:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	88fa      	ldrh	r2, [r7, #6]
 8008024:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	88fa      	ldrh	r2, [r7, #6]
 800802a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008056:	d107      	bne.n	8008068 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008066:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008072:	2b40      	cmp	r3, #64	; 0x40
 8008074:	d007      	beq.n	8008086 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008084:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800808e:	d94b      	bls.n	8008128 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <HAL_SPI_Transmit+0xea>
 8008098:	8afb      	ldrh	r3, [r7, #22]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d13e      	bne.n	800811c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	881a      	ldrh	r2, [r3, #0]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ae:	1c9a      	adds	r2, r3, #2
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080c2:	e02b      	b.n	800811c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d112      	bne.n	80080f8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d6:	881a      	ldrh	r2, [r3, #0]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e2:	1c9a      	adds	r2, r3, #2
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080f6:	e011      	b.n	800811c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080f8:	f7fb f922 	bl	8003340 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	429a      	cmp	r2, r3
 8008106:	d803      	bhi.n	8008110 <HAL_SPI_Transmit+0x15c>
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810e:	d102      	bne.n	8008116 <HAL_SPI_Transmit+0x162>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d102      	bne.n	800811c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	77fb      	strb	r3, [r7, #31]
          goto error;
 800811a:	e0a4      	b.n	8008266 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1ce      	bne.n	80080c4 <HAL_SPI_Transmit+0x110>
 8008126:	e07c      	b.n	8008222 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <HAL_SPI_Transmit+0x182>
 8008130:	8afb      	ldrh	r3, [r7, #22]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d170      	bne.n	8008218 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b01      	cmp	r3, #1
 800813e:	d912      	bls.n	8008166 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	881a      	ldrh	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	1c9a      	adds	r2, r3, #2
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b02      	subs	r3, #2
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008164:	e058      	b.n	8008218 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	330c      	adds	r3, #12
 8008170:	7812      	ldrb	r2, [r2, #0]
 8008172:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	1c5a      	adds	r2, r3, #1
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008182:	b29b      	uxth	r3, r3
 8008184:	3b01      	subs	r3, #1
 8008186:	b29a      	uxth	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800818c:	e044      	b.n	8008218 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b02      	cmp	r3, #2
 800819a:	d12b      	bne.n	80081f4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d912      	bls.n	80081cc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	881a      	ldrh	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b6:	1c9a      	adds	r2, r3, #2
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	3b02      	subs	r3, #2
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081ca:	e025      	b.n	8008218 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	330c      	adds	r3, #12
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081f2:	e011      	b.n	8008218 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081f4:	f7fb f8a4 	bl	8003340 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d803      	bhi.n	800820c <HAL_SPI_Transmit+0x258>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820a:	d102      	bne.n	8008212 <HAL_SPI_Transmit+0x25e>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008216:	e026      	b.n	8008266 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1b5      	bne.n	800818e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008222:	69ba      	ldr	r2, [r7, #24]
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 fca2 	bl	8008b70 <SPI_EndRxTxTransaction>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2220      	movs	r2, #32
 8008236:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10a      	bne.n	8008256 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008240:	2300      	movs	r3, #0
 8008242:	613b      	str	r3, [r7, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	613b      	str	r3, [r7, #16]
 8008254:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	77fb      	strb	r3, [r7, #31]
 8008262:	e000      	b.n	8008266 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8008264:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008276:	7ffb      	ldrb	r3, [r7, #31]
}
 8008278:	4618      	mov	r0, r3
 800827a:	3720      	adds	r7, #32
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	603b      	str	r3, [r7, #0]
 800828c:	4613      	mov	r3, r2
 800828e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800829c:	d112      	bne.n	80082c4 <HAL_SPI_Receive+0x44>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10e      	bne.n	80082c4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2204      	movs	r2, #4
 80082aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80082ae:	88fa      	ldrh	r2, [r7, #6]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	4613      	mov	r3, r2
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 f908 	bl	80084d0 <HAL_SPI_TransmitReceive>
 80082c0:	4603      	mov	r3, r0
 80082c2:	e101      	b.n	80084c8 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_SPI_Receive+0x52>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e0fa      	b.n	80084c8 <HAL_SPI_Receive+0x248>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082da:	f7fb f831 	bl	8003340 <HAL_GetTick>
 80082de:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d002      	beq.n	80082f2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80082ec:	2302      	movs	r3, #2
 80082ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082f0:	e0e1      	b.n	80084b6 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <HAL_SPI_Receive+0x7e>
 80082f8:	88fb      	ldrh	r3, [r7, #6]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d102      	bne.n	8008304 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008302:	e0d8      	b.n	80084b6 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2204      	movs	r2, #4
 8008308:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	88fa      	ldrh	r2, [r7, #6]
 800831c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	88fa      	ldrh	r2, [r7, #6]
 8008324:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800834e:	d908      	bls.n	8008362 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800835e:	605a      	str	r2, [r3, #4]
 8008360:	e007      	b.n	8008372 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685a      	ldr	r2, [r3, #4]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008370:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837a:	d107      	bne.n	800838c <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800838a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008396:	2b40      	cmp	r3, #64	; 0x40
 8008398:	d007      	beq.n	80083aa <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083b2:	d867      	bhi.n	8008484 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80083b4:	e030      	b.n	8008418 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d117      	bne.n	80083f4 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f103 020c 	add.w	r2, r3, #12
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	7812      	ldrb	r2, [r2, #0]
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	3b01      	subs	r3, #1
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80083f2:	e011      	b.n	8008418 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f4:	f7fa ffa4 	bl	8003340 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d803      	bhi.n	800840c <HAL_SPI_Receive+0x18c>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840a:	d102      	bne.n	8008412 <HAL_SPI_Receive+0x192>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008416:	e04e      	b.n	80084b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800841e:	b29b      	uxth	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1c8      	bne.n	80083b6 <HAL_SPI_Receive+0x136>
 8008424:	e034      	b.n	8008490 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b01      	cmp	r3, #1
 8008432:	d115      	bne.n	8008460 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	b292      	uxth	r2, r2
 8008440:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008446:	1c9a      	adds	r2, r3, #2
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008452:	b29b      	uxth	r3, r3
 8008454:	3b01      	subs	r3, #1
 8008456:	b29a      	uxth	r2, r3
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800845e:	e011      	b.n	8008484 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008460:	f7fa ff6e 	bl	8003340 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d803      	bhi.n	8008478 <HAL_SPI_Receive+0x1f8>
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008476:	d102      	bne.n	800847e <HAL_SPI_Receive+0x1fe>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d102      	bne.n	8008484 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008482:	e018      	b.n	80084b6 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1ca      	bne.n	8008426 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	6839      	ldr	r1, [r7, #0]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fb13 	bl	8008ac0 <SPI_EndRxTransaction>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2220      	movs	r2, #32
 80084a4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75fb      	strb	r3, [r7, #23]
 80084b2:	e000      	b.n	80084b6 <HAL_SPI_Receive+0x236>
  }

error :
 80084b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08a      	sub	sp, #40	; 0x28
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80084de:	2301      	movs	r3, #1
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d101      	bne.n	80084f6 <HAL_SPI_TransmitReceive+0x26>
 80084f2:	2302      	movs	r3, #2
 80084f4:	e1fb      	b.n	80088ee <HAL_SPI_TransmitReceive+0x41e>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084fe:	f7fa ff1f 	bl	8003340 <HAL_GetTick>
 8008502:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800850a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008512:	887b      	ldrh	r3, [r7, #2]
 8008514:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008516:	887b      	ldrh	r3, [r7, #2]
 8008518:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800851a:	7efb      	ldrb	r3, [r7, #27]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d00e      	beq.n	800853e <HAL_SPI_TransmitReceive+0x6e>
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008526:	d106      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d102      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x66>
 8008530:	7efb      	ldrb	r3, [r7, #27]
 8008532:	2b04      	cmp	r3, #4
 8008534:	d003      	beq.n	800853e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008536:	2302      	movs	r3, #2
 8008538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800853c:	e1cd      	b.n	80088da <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <HAL_SPI_TransmitReceive+0x80>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <HAL_SPI_TransmitReceive+0x80>
 800854a:	887b      	ldrh	r3, [r7, #2]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d103      	bne.n	8008558 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008556:	e1c0      	b.n	80088da <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b04      	cmp	r3, #4
 8008562:	d003      	beq.n	800856c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2205      	movs	r2, #5
 8008568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	887a      	ldrh	r2, [r7, #2]
 800857c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	887a      	ldrh	r2, [r7, #2]
 8008584:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	887a      	ldrh	r2, [r7, #2]
 8008592:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	887a      	ldrh	r2, [r7, #2]
 8008598:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085ae:	d802      	bhi.n	80085b6 <HAL_SPI_TransmitReceive+0xe6>
 80085b0:	8a3b      	ldrh	r3, [r7, #16]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d908      	bls.n	80085c8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	e007      	b.n	80085d8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e2:	2b40      	cmp	r3, #64	; 0x40
 80085e4:	d007      	beq.n	80085f6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80085fe:	d97c      	bls.n	80086fa <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <HAL_SPI_TransmitReceive+0x13e>
 8008608:	8a7b      	ldrh	r3, [r7, #18]
 800860a:	2b01      	cmp	r3, #1
 800860c:	d169      	bne.n	80086e2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	881a      	ldrh	r2, [r3, #0]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	1c9a      	adds	r2, r3, #2
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008632:	e056      	b.n	80086e2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b02      	cmp	r3, #2
 8008640:	d11b      	bne.n	800867a <HAL_SPI_TransmitReceive+0x1aa>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d016      	beq.n	800867a <HAL_SPI_TransmitReceive+0x1aa>
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	2b01      	cmp	r3, #1
 8008650:	d113      	bne.n	800867a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008656:	881a      	ldrh	r2, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	1c9a      	adds	r2, r3, #2
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008676:	2300      	movs	r3, #0
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f003 0301 	and.w	r3, r3, #1
 8008684:	2b01      	cmp	r3, #1
 8008686:	d11c      	bne.n	80086c2 <HAL_SPI_TransmitReceive+0x1f2>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800868e:	b29b      	uxth	r3, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	d016      	beq.n	80086c2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869e:	b292      	uxth	r2, r2
 80086a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a6:	1c9a      	adds	r2, r3, #2
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80086be:	2301      	movs	r3, #1
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80086c2:	f7fa fe3d 	bl	8003340 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d807      	bhi.n	80086e2 <HAL_SPI_TransmitReceive+0x212>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086d8:	d003      	beq.n	80086e2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80086da:	2303      	movs	r3, #3
 80086dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80086e0:	e0fb      	b.n	80088da <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1a3      	bne.n	8008634 <HAL_SPI_TransmitReceive+0x164>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d19d      	bne.n	8008634 <HAL_SPI_TransmitReceive+0x164>
 80086f8:	e0df      	b.n	80088ba <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <HAL_SPI_TransmitReceive+0x23a>
 8008702:	8a7b      	ldrh	r3, [r7, #18]
 8008704:	2b01      	cmp	r3, #1
 8008706:	f040 80cb 	bne.w	80088a0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800870e:	b29b      	uxth	r3, r3
 8008710:	2b01      	cmp	r3, #1
 8008712:	d912      	bls.n	800873a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	881a      	ldrh	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	1c9a      	adds	r2, r3, #2
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800872e:	b29b      	uxth	r3, r3
 8008730:	3b02      	subs	r3, #2
 8008732:	b29a      	uxth	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008738:	e0b2      	b.n	80088a0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	330c      	adds	r3, #12
 8008744:	7812      	ldrb	r2, [r2, #0]
 8008746:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008756:	b29b      	uxth	r3, r3
 8008758:	3b01      	subs	r3, #1
 800875a:	b29a      	uxth	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008760:	e09e      	b.n	80088a0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b02      	cmp	r3, #2
 800876e:	d134      	bne.n	80087da <HAL_SPI_TransmitReceive+0x30a>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008774:	b29b      	uxth	r3, r3
 8008776:	2b00      	cmp	r3, #0
 8008778:	d02f      	beq.n	80087da <HAL_SPI_TransmitReceive+0x30a>
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	2b01      	cmp	r3, #1
 800877e:	d12c      	bne.n	80087da <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b01      	cmp	r3, #1
 8008788:	d912      	bls.n	80087b0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	881a      	ldrh	r2, [r3, #0]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	1c9a      	adds	r2, r3, #2
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	3b02      	subs	r3, #2
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80087ae:	e012      	b.n	80087d6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	330c      	adds	r3, #12
 80087ba:	7812      	ldrb	r2, [r2, #0]
 80087bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	1c5a      	adds	r2, r3, #1
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	3b01      	subs	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d148      	bne.n	800887a <HAL_SPI_TransmitReceive+0x3aa>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d042      	beq.n	800887a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d923      	bls.n	8008848 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	b292      	uxth	r2, r2
 800880c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	1c9a      	adds	r2, r3, #2
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800881e:	b29b      	uxth	r3, r3
 8008820:	3b02      	subs	r3, #2
 8008822:	b29a      	uxth	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008830:	b29b      	uxth	r3, r3
 8008832:	2b01      	cmp	r3, #1
 8008834:	d81f      	bhi.n	8008876 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	e016      	b.n	8008876 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f103 020c 	add.w	r2, r3, #12
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008854:	7812      	ldrb	r2, [r2, #0]
 8008856:	b2d2      	uxtb	r2, r2
 8008858:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800886a:	b29b      	uxth	r3, r3
 800886c:	3b01      	subs	r3, #1
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008876:	2301      	movs	r3, #1
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800887a:	f7fa fd61 	bl	8003340 <HAL_GetTick>
 800887e:	4602      	mov	r2, r0
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	1ad3      	subs	r3, r2, r3
 8008884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008886:	429a      	cmp	r2, r3
 8008888:	d803      	bhi.n	8008892 <HAL_SPI_TransmitReceive+0x3c2>
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008890:	d102      	bne.n	8008898 <HAL_SPI_TransmitReceive+0x3c8>
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	2b00      	cmp	r3, #0
 8008896:	d103      	bne.n	80088a0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008898:	2303      	movs	r3, #3
 800889a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800889e:	e01c      	b.n	80088da <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f47f af5b 	bne.w	8008762 <HAL_SPI_TransmitReceive+0x292>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f47f af54 	bne.w	8008762 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 f956 	bl	8008b70 <SPI_EndRxTxTransaction>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d006      	beq.n	80088d8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2220      	movs	r2, #32
 80088d4:	661a      	str	r2, [r3, #96]	; 0x60
 80088d6:	e000      	b.n	80088da <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80088d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80088ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3728      	adds	r7, #40	; 0x28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008904:	b2db      	uxtb	r3, r3
}
 8008906:	4618      	mov	r0, r3
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr

08008912 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008912:	b580      	push	{r7, lr}
 8008914:	b084      	sub	sp, #16
 8008916:	af00      	add	r7, sp, #0
 8008918:	60f8      	str	r0, [r7, #12]
 800891a:	60b9      	str	r1, [r7, #8]
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	4613      	mov	r3, r2
 8008920:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008922:	e04c      	b.n	80089be <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d048      	beq.n	80089be <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800892c:	f7fa fd08 	bl	8003340 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	429a      	cmp	r2, r3
 800893a:	d902      	bls.n	8008942 <SPI_WaitFlagStateUntilTimeout+0x30>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d13d      	bne.n	80089be <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800895a:	d111      	bne.n	8008980 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008964:	d004      	beq.n	8008970 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800896e:	d107      	bne.n	8008980 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800897e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008988:	d10f      	bne.n	80089aa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e00f      	b.n	80089de <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4013      	ands	r3, r2
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	bf0c      	ite	eq
 80089ce:	2301      	moveq	r3, #1
 80089d0:	2300      	movne	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	461a      	mov	r2, r3
 80089d6:	79fb      	ldrb	r3, [r7, #7]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d1a3      	bne.n	8008924 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b084      	sub	sp, #16
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	60f8      	str	r0, [r7, #12]
 80089ee:	60b9      	str	r1, [r7, #8]
 80089f0:	607a      	str	r2, [r7, #4]
 80089f2:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80089f4:	e057      	b.n	8008aa6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80089fc:	d106      	bne.n	8008a0c <SPI_WaitFifoStateUntilTimeout+0x26>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d103      	bne.n	8008a0c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	330c      	adds	r3, #12
 8008a0a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d048      	beq.n	8008aa6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008a14:	f7fa fc94 	bl	8003340 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d902      	bls.n	8008a2a <SPI_WaitFifoStateUntilTimeout+0x44>
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d13d      	bne.n	8008aa6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a42:	d111      	bne.n	8008a68 <SPI_WaitFifoStateUntilTimeout+0x82>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a4c:	d004      	beq.n	8008a58 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a56:	d107      	bne.n	8008a68 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a70:	d10f      	bne.n	8008a92 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a80:	601a      	str	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e008      	b.n	8008ab8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d19f      	bne.n	80089f6 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af02      	add	r7, sp, #8
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ad4:	d111      	bne.n	8008afa <SPI_EndRxTransaction+0x3a>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ade:	d004      	beq.n	8008aea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae8:	d107      	bne.n	8008afa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2200      	movs	r2, #0
 8008b02:	2180      	movs	r1, #128	; 0x80
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f7ff ff04 	bl	8008912 <SPI_WaitFlagStateUntilTimeout>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d007      	beq.n	8008b20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b14:	f043 0220 	orr.w	r2, r3, #32
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e023      	b.n	8008b68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b28:	d11d      	bne.n	8008b66 <SPI_EndRxTransaction+0xa6>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b32:	d004      	beq.n	8008b3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b3c:	d113      	bne.n	8008b66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff ff4b 	bl	80089e6 <SPI_WaitFifoStateUntilTimeout>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d007      	beq.n	8008b66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5a:	f043 0220 	orr.w	r2, r3, #32
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e000      	b.n	8008b68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af02      	add	r7, sp, #8
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff ff2c 	bl	80089e6 <SPI_WaitFifoStateUntilTimeout>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b98:	f043 0220 	orr.w	r2, r3, #32
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e027      	b.n	8008bf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2200      	movs	r2, #0
 8008bac:	2180      	movs	r1, #128	; 0x80
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff feaf 	bl	8008912 <SPI_WaitFlagStateUntilTimeout>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bbe:	f043 0220 	orr.w	r2, r3, #32
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e014      	b.n	8008bf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f7ff ff05 	bl	80089e6 <SPI_WaitFifoStateUntilTimeout>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008be6:	f043 0220 	orr.w	r2, r3, #32
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e000      	b.n	8008bf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e01d      	b.n	8008c4a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7fa f8b4 	bl	8002d90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f000 fa2e 	bl	800909c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3708      	adds	r7, #8
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2201      	movs	r2, #1
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fe40 	bl	80098ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a17      	ldr	r2, [pc, #92]	; (8008cd0 <HAL_TIM_PWM_Start+0x7c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d004      	beq.n	8008c80 <HAL_TIM_PWM_Start+0x2c>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a16      	ldr	r2, [pc, #88]	; (8008cd4 <HAL_TIM_PWM_Start+0x80>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d101      	bne.n	8008c84 <HAL_TIM_PWM_Start+0x30>
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <HAL_TIM_PWM_Start+0x32>
 8008c84:	2300      	movs	r3, #0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <HAL_TIM_PWM_Start+0x84>)
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b06      	cmp	r3, #6
 8008caa:	d00b      	beq.n	8008cc4 <HAL_TIM_PWM_Start+0x70>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb2:	d007      	beq.n	8008cc4 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40010400 	.word	0x40010400
 8008cd8:	00010007 	.word	0x00010007

08008cdc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e01d      	b.n	8008d2a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f7fa f800 	bl	8002d08 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f000 f9be 	bl	800909c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_TIM_IC_ConfigChannel+0x1a>
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e08a      	b.n	8008e62 <HAL_TIM_IC_ConfigChannel+0x130>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d11b      	bne.n	8008d9a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6819      	ldr	r1, [r3, #0]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	f000 fc91 	bl	8009698 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	699a      	ldr	r2, [r3, #24]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 020c 	bic.w	r2, r2, #12
 8008d84:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6999      	ldr	r1, [r3, #24]
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	619a      	str	r2, [r3, #24]
 8008d98:	e05a      	b.n	8008e50 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	d11c      	bne.n	8008dda <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6819      	ldr	r1, [r3, #0]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f000 fce6 	bl	8009780 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699a      	ldr	r2, [r3, #24]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008dc2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6999      	ldr	r1, [r3, #24]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	021a      	lsls	r2, r3, #8
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	619a      	str	r2, [r3, #24]
 8008dd8:	e03a      	b.n	8008e50 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d11b      	bne.n	8008e18 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6818      	ldr	r0, [r3, #0]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	6819      	ldr	r1, [r3, #0]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	685a      	ldr	r2, [r3, #4]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f000 fd03 	bl	80097fa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69da      	ldr	r2, [r3, #28]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 020c 	bic.w	r2, r2, #12
 8008e02:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	69d9      	ldr	r1, [r3, #28]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	689a      	ldr	r2, [r3, #8]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	61da      	str	r2, [r3, #28]
 8008e16:	e01b      	b.n	8008e50 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f000 fd23 	bl	8009872 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69da      	ldr	r2, [r3, #28]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008e3a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69d9      	ldr	r1, [r3, #28]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	021a      	lsls	r2, r3, #8
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e105      	b.n	8009092 <HAL_TIM_PWM_ConfigChannel+0x226>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2202      	movs	r2, #2
 8008e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b14      	cmp	r3, #20
 8008e9a:	f200 80f0 	bhi.w	800907e <HAL_TIM_PWM_ConfigChannel+0x212>
 8008e9e:	a201      	add	r2, pc, #4	; (adr r2, 8008ea4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea4:	08008ef9 	.word	0x08008ef9
 8008ea8:	0800907f 	.word	0x0800907f
 8008eac:	0800907f 	.word	0x0800907f
 8008eb0:	0800907f 	.word	0x0800907f
 8008eb4:	08008f39 	.word	0x08008f39
 8008eb8:	0800907f 	.word	0x0800907f
 8008ebc:	0800907f 	.word	0x0800907f
 8008ec0:	0800907f 	.word	0x0800907f
 8008ec4:	08008f7b 	.word	0x08008f7b
 8008ec8:	0800907f 	.word	0x0800907f
 8008ecc:	0800907f 	.word	0x0800907f
 8008ed0:	0800907f 	.word	0x0800907f
 8008ed4:	08008fbb 	.word	0x08008fbb
 8008ed8:	0800907f 	.word	0x0800907f
 8008edc:	0800907f 	.word	0x0800907f
 8008ee0:	0800907f 	.word	0x0800907f
 8008ee4:	08008ffd 	.word	0x08008ffd
 8008ee8:	0800907f 	.word	0x0800907f
 8008eec:	0800907f 	.word	0x0800907f
 8008ef0:	0800907f 	.word	0x0800907f
 8008ef4:	0800903d 	.word	0x0800903d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 f96c 	bl	80091dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699a      	ldr	r2, [r3, #24]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0208 	orr.w	r2, r2, #8
 8008f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699a      	ldr	r2, [r3, #24]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0204 	bic.w	r2, r2, #4
 8008f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6999      	ldr	r1, [r3, #24]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	619a      	str	r2, [r3, #24]
      break;
 8008f36:	e0a3      	b.n	8009080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 f9be 	bl	80092c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699a      	ldr	r2, [r3, #24]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6999      	ldr	r1, [r3, #24]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	021a      	lsls	r2, r3, #8
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	619a      	str	r2, [r3, #24]
      break;
 8008f78:	e082      	b.n	8009080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68b9      	ldr	r1, [r7, #8]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fa15 	bl	80093b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	69da      	ldr	r2, [r3, #28]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f042 0208 	orr.w	r2, r2, #8
 8008f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0204 	bic.w	r2, r2, #4
 8008fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	69d9      	ldr	r1, [r3, #28]
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	691a      	ldr	r2, [r3, #16]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	61da      	str	r2, [r3, #28]
      break;
 8008fb8:	e062      	b.n	8009080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68b9      	ldr	r1, [r7, #8]
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 fa6b 	bl	800949c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	69da      	ldr	r2, [r3, #28]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69da      	ldr	r2, [r3, #28]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69d9      	ldr	r1, [r3, #28]
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	021a      	lsls	r2, r3, #8
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	61da      	str	r2, [r3, #28]
      break;
 8008ffa:	e041      	b.n	8009080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	4618      	mov	r0, r3
 8009004:	f000 faa2 	bl	800954c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0208 	orr.w	r2, r2, #8
 8009016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0204 	bic.w	r2, r2, #4
 8009026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800903a:	e021      	b.n	8009080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68b9      	ldr	r1, [r7, #8]
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fad4 	bl	80095f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009056:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009066:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	021a      	lsls	r2, r3, #8
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800907c:	e000      	b.n	8009080 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800907e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2201      	movs	r2, #1
 8009084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop

0800909c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a40      	ldr	r2, [pc, #256]	; (80091b0 <TIM_Base_SetConfig+0x114>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d013      	beq.n	80090dc <TIM_Base_SetConfig+0x40>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ba:	d00f      	beq.n	80090dc <TIM_Base_SetConfig+0x40>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a3d      	ldr	r2, [pc, #244]	; (80091b4 <TIM_Base_SetConfig+0x118>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d00b      	beq.n	80090dc <TIM_Base_SetConfig+0x40>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a3c      	ldr	r2, [pc, #240]	; (80091b8 <TIM_Base_SetConfig+0x11c>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d007      	beq.n	80090dc <TIM_Base_SetConfig+0x40>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a3b      	ldr	r2, [pc, #236]	; (80091bc <TIM_Base_SetConfig+0x120>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d003      	beq.n	80090dc <TIM_Base_SetConfig+0x40>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a3a      	ldr	r2, [pc, #232]	; (80091c0 <TIM_Base_SetConfig+0x124>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d108      	bne.n	80090ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4313      	orrs	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a2f      	ldr	r2, [pc, #188]	; (80091b0 <TIM_Base_SetConfig+0x114>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d02b      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090fc:	d027      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a2c      	ldr	r2, [pc, #176]	; (80091b4 <TIM_Base_SetConfig+0x118>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d023      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a2b      	ldr	r2, [pc, #172]	; (80091b8 <TIM_Base_SetConfig+0x11c>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d01f      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a2a      	ldr	r2, [pc, #168]	; (80091bc <TIM_Base_SetConfig+0x120>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d01b      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a29      	ldr	r2, [pc, #164]	; (80091c0 <TIM_Base_SetConfig+0x124>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d017      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a28      	ldr	r2, [pc, #160]	; (80091c4 <TIM_Base_SetConfig+0x128>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d013      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a27      	ldr	r2, [pc, #156]	; (80091c8 <TIM_Base_SetConfig+0x12c>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d00f      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a26      	ldr	r2, [pc, #152]	; (80091cc <TIM_Base_SetConfig+0x130>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d00b      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a25      	ldr	r2, [pc, #148]	; (80091d0 <TIM_Base_SetConfig+0x134>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d007      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a24      	ldr	r2, [pc, #144]	; (80091d4 <TIM_Base_SetConfig+0x138>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d003      	beq.n	800914e <TIM_Base_SetConfig+0xb2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a23      	ldr	r2, [pc, #140]	; (80091d8 <TIM_Base_SetConfig+0x13c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d108      	bne.n	8009160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4313      	orrs	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	689a      	ldr	r2, [r3, #8]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a0a      	ldr	r2, [pc, #40]	; (80091b0 <TIM_Base_SetConfig+0x114>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d003      	beq.n	8009194 <TIM_Base_SetConfig+0xf8>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a0c      	ldr	r2, [pc, #48]	; (80091c0 <TIM_Base_SetConfig+0x124>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d103      	bne.n	800919c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	615a      	str	r2, [r3, #20]
}
 80091a2:	bf00      	nop
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40010000 	.word	0x40010000
 80091b4:	40000400 	.word	0x40000400
 80091b8:	40000800 	.word	0x40000800
 80091bc:	40000c00 	.word	0x40000c00
 80091c0:	40010400 	.word	0x40010400
 80091c4:	40014000 	.word	0x40014000
 80091c8:	40014400 	.word	0x40014400
 80091cc:	40014800 	.word	0x40014800
 80091d0:	40001800 	.word	0x40001800
 80091d4:	40001c00 	.word	0x40001c00
 80091d8:	40002000 	.word	0x40002000

080091dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	f023 0201 	bic.w	r2, r3, #1
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	4b2b      	ldr	r3, [pc, #172]	; (80092b4 <TIM_OC1_SetConfig+0xd8>)
 8009208:	4013      	ands	r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 0303 	bic.w	r3, r3, #3
 8009212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f023 0302 	bic.w	r3, r3, #2
 8009224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	4313      	orrs	r3, r2
 800922e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a21      	ldr	r2, [pc, #132]	; (80092b8 <TIM_OC1_SetConfig+0xdc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d003      	beq.n	8009240 <TIM_OC1_SetConfig+0x64>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a20      	ldr	r2, [pc, #128]	; (80092bc <TIM_OC1_SetConfig+0xe0>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d10c      	bne.n	800925a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	f023 0308 	bic.w	r3, r3, #8
 8009246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	4313      	orrs	r3, r2
 8009250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f023 0304 	bic.w	r3, r3, #4
 8009258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a16      	ldr	r2, [pc, #88]	; (80092b8 <TIM_OC1_SetConfig+0xdc>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d003      	beq.n	800926a <TIM_OC1_SetConfig+0x8e>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a15      	ldr	r2, [pc, #84]	; (80092bc <TIM_OC1_SetConfig+0xe0>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d111      	bne.n	800928e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	4313      	orrs	r3, r2
 8009282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	4313      	orrs	r3, r2
 800928c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	621a      	str	r2, [r3, #32]
}
 80092a8:	bf00      	nop
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	fffeff8f 	.word	0xfffeff8f
 80092b8:	40010000 	.word	0x40010000
 80092bc:	40010400 	.word	0x40010400

080092c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f023 0210 	bic.w	r2, r3, #16
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4b2e      	ldr	r3, [pc, #184]	; (80093a4 <TIM_OC2_SetConfig+0xe4>)
 80092ec:	4013      	ands	r3, r2
 80092ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4313      	orrs	r3, r2
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	f023 0320 	bic.w	r3, r3, #32
 800930a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	4313      	orrs	r3, r2
 8009316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4a23      	ldr	r2, [pc, #140]	; (80093a8 <TIM_OC2_SetConfig+0xe8>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d003      	beq.n	8009328 <TIM_OC2_SetConfig+0x68>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a22      	ldr	r2, [pc, #136]	; (80093ac <TIM_OC2_SetConfig+0xec>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d10d      	bne.n	8009344 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800932e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009342:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a18      	ldr	r2, [pc, #96]	; (80093a8 <TIM_OC2_SetConfig+0xe8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d003      	beq.n	8009354 <TIM_OC2_SetConfig+0x94>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a17      	ldr	r2, [pc, #92]	; (80093ac <TIM_OC2_SetConfig+0xec>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d113      	bne.n	800937c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800935a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	4313      	orrs	r3, r2
 800937a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	621a      	str	r2, [r3, #32]
}
 8009396:	bf00      	nop
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	feff8fff 	.word	0xfeff8fff
 80093a8:	40010000 	.word	0x40010000
 80093ac:	40010400 	.word	0x40010400

080093b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	69db      	ldr	r3, [r3, #28]
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	4b2d      	ldr	r3, [pc, #180]	; (8009490 <TIM_OC3_SetConfig+0xe0>)
 80093dc:	4013      	ands	r3, r2
 80093de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f023 0303 	bic.w	r3, r3, #3
 80093e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	4313      	orrs	r3, r2
 8009404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a22      	ldr	r2, [pc, #136]	; (8009494 <TIM_OC3_SetConfig+0xe4>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d003      	beq.n	8009416 <TIM_OC3_SetConfig+0x66>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	4a21      	ldr	r2, [pc, #132]	; (8009498 <TIM_OC3_SetConfig+0xe8>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d10d      	bne.n	8009432 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800941c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	021b      	lsls	r3, r3, #8
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	4313      	orrs	r3, r2
 8009428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a17      	ldr	r2, [pc, #92]	; (8009494 <TIM_OC3_SetConfig+0xe4>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d003      	beq.n	8009442 <TIM_OC3_SetConfig+0x92>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a16      	ldr	r2, [pc, #88]	; (8009498 <TIM_OC3_SetConfig+0xe8>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d113      	bne.n	800946a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	011b      	lsls	r3, r3, #4
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	4313      	orrs	r3, r2
 800945c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4313      	orrs	r3, r2
 8009468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	693a      	ldr	r2, [r7, #16]
 800946e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685a      	ldr	r2, [r3, #4]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	621a      	str	r2, [r3, #32]
}
 8009484:	bf00      	nop
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	fffeff8f 	.word	0xfffeff8f
 8009494:	40010000 	.word	0x40010000
 8009498:	40010400 	.word	0x40010400

0800949c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	4b1e      	ldr	r3, [pc, #120]	; (8009540 <TIM_OC4_SetConfig+0xa4>)
 80094c8:	4013      	ands	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	021b      	lsls	r3, r3, #8
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	4313      	orrs	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	031b      	lsls	r3, r3, #12
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a13      	ldr	r2, [pc, #76]	; (8009544 <TIM_OC4_SetConfig+0xa8>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d003      	beq.n	8009504 <TIM_OC4_SetConfig+0x68>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a12      	ldr	r2, [pc, #72]	; (8009548 <TIM_OC4_SetConfig+0xac>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d109      	bne.n	8009518 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800950a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	019b      	lsls	r3, r3, #6
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4313      	orrs	r3, r2
 8009516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	621a      	str	r2, [r3, #32]
}
 8009532:	bf00      	nop
 8009534:	371c      	adds	r7, #28
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	feff8fff 	.word	0xfeff8fff
 8009544:	40010000 	.word	0x40010000
 8009548:	40010400 	.word	0x40010400

0800954c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800954c:	b480      	push	{r7}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4b1b      	ldr	r3, [pc, #108]	; (80095e4 <TIM_OC5_SetConfig+0x98>)
 8009578:	4013      	ands	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800958c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	041b      	lsls	r3, r3, #16
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	4313      	orrs	r3, r2
 8009598:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a12      	ldr	r2, [pc, #72]	; (80095e8 <TIM_OC5_SetConfig+0x9c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d003      	beq.n	80095aa <TIM_OC5_SetConfig+0x5e>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a11      	ldr	r2, [pc, #68]	; (80095ec <TIM_OC5_SetConfig+0xa0>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d109      	bne.n	80095be <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	621a      	str	r2, [r3, #32]
}
 80095d8:	bf00      	nop
 80095da:	371c      	adds	r7, #28
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	fffeff8f 	.word	0xfffeff8f
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40010400 	.word	0x40010400

080095f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4b1c      	ldr	r3, [pc, #112]	; (800968c <TIM_OC6_SetConfig+0x9c>)
 800961c:	4013      	ands	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	021b      	lsls	r3, r3, #8
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	051b      	lsls	r3, r3, #20
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4313      	orrs	r3, r2
 800963e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a13      	ldr	r2, [pc, #76]	; (8009690 <TIM_OC6_SetConfig+0xa0>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d003      	beq.n	8009650 <TIM_OC6_SetConfig+0x60>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a12      	ldr	r2, [pc, #72]	; (8009694 <TIM_OC6_SetConfig+0xa4>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d109      	bne.n	8009664 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009656:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	029b      	lsls	r3, r3, #10
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	4313      	orrs	r3, r2
 8009662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685a      	ldr	r2, [r3, #4]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	693a      	ldr	r2, [r7, #16]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	371c      	adds	r7, #28
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	feff8fff 	.word	0xfeff8fff
 8009690:	40010000 	.word	0x40010000
 8009694:	40010400 	.word	0x40010400

08009698 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009698:	b480      	push	{r7}
 800969a:	b087      	sub	sp, #28
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	f023 0201 	bic.w	r2, r3, #1
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	4a28      	ldr	r2, [pc, #160]	; (8009764 <TIM_TI1_SetConfig+0xcc>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d01b      	beq.n	80096fe <TIM_TI1_SetConfig+0x66>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096cc:	d017      	beq.n	80096fe <TIM_TI1_SetConfig+0x66>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	4a25      	ldr	r2, [pc, #148]	; (8009768 <TIM_TI1_SetConfig+0xd0>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d013      	beq.n	80096fe <TIM_TI1_SetConfig+0x66>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	4a24      	ldr	r2, [pc, #144]	; (800976c <TIM_TI1_SetConfig+0xd4>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00f      	beq.n	80096fe <TIM_TI1_SetConfig+0x66>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4a23      	ldr	r2, [pc, #140]	; (8009770 <TIM_TI1_SetConfig+0xd8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00b      	beq.n	80096fe <TIM_TI1_SetConfig+0x66>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4a22      	ldr	r2, [pc, #136]	; (8009774 <TIM_TI1_SetConfig+0xdc>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d007      	beq.n	80096fe <TIM_TI1_SetConfig+0x66>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4a21      	ldr	r2, [pc, #132]	; (8009778 <TIM_TI1_SetConfig+0xe0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_TI1_SetConfig+0x66>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4a20      	ldr	r2, [pc, #128]	; (800977c <TIM_TI1_SetConfig+0xe4>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d101      	bne.n	8009702 <TIM_TI1_SetConfig+0x6a>
 80096fe:	2301      	movs	r3, #1
 8009700:	e000      	b.n	8009704 <TIM_TI1_SetConfig+0x6c>
 8009702:	2300      	movs	r3, #0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d008      	beq.n	800971a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f023 0303 	bic.w	r3, r3, #3
 800970e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009710:	697a      	ldr	r2, [r7, #20]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4313      	orrs	r3, r2
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	e003      	b.n	8009722 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f043 0301 	orr.w	r3, r3, #1
 8009720:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	b2db      	uxtb	r3, r3
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	4313      	orrs	r3, r2
 8009734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	f023 030a 	bic.w	r3, r3, #10
 800973c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f003 030a 	and.w	r3, r3, #10
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	4313      	orrs	r3, r2
 8009748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	697a      	ldr	r2, [r7, #20]
 800974e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	693a      	ldr	r2, [r7, #16]
 8009754:	621a      	str	r2, [r3, #32]
}
 8009756:	bf00      	nop
 8009758:	371c      	adds	r7, #28
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	40010000 	.word	0x40010000
 8009768:	40000400 	.word	0x40000400
 800976c:	40000800 	.word	0x40000800
 8009770:	40000c00 	.word	0x40000c00
 8009774:	40010400 	.word	0x40010400
 8009778:	40014000 	.word	0x40014000
 800977c:	40001800 	.word	0x40001800

08009780 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	f023 0210 	bic.w	r2, r3, #16
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	031b      	lsls	r3, r3, #12
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	4313      	orrs	r3, r2
 80097e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	621a      	str	r2, [r3, #32]
}
 80097ee:	bf00      	nop
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b087      	sub	sp, #28
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	69db      	ldr	r3, [r3, #28]
 8009818:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6a1b      	ldr	r3, [r3, #32]
 800981e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f023 0303 	bic.w	r3, r3, #3
 8009826:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009828:	697a      	ldr	r2, [r7, #20]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4313      	orrs	r3, r2
 800982e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009836:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	011b      	lsls	r3, r3, #4
 800983c:	b2db      	uxtb	r3, r3
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	4313      	orrs	r3, r2
 8009842:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800984a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	021b      	lsls	r3, r3, #8
 8009850:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009854:	693a      	ldr	r2, [r7, #16]
 8009856:	4313      	orrs	r3, r2
 8009858:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	621a      	str	r2, [r3, #32]
}
 8009866:	bf00      	nop
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr

08009872 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009872:	b480      	push	{r7}
 8009874:	b087      	sub	sp, #28
 8009876:	af00      	add	r7, sp, #0
 8009878:	60f8      	str	r0, [r7, #12]
 800987a:	60b9      	str	r1, [r7, #8]
 800987c:	607a      	str	r2, [r7, #4]
 800987e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6a1b      	ldr	r3, [r3, #32]
 8009884:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800989e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	021b      	lsls	r3, r3, #8
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	031b      	lsls	r3, r3, #12
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80098c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	031b      	lsls	r3, r3, #12
 80098ca:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	693a      	ldr	r2, [r7, #16]
 80098de:	621a      	str	r2, [r3, #32]
}
 80098e0:	bf00      	nop
 80098e2:	371c      	adds	r7, #28
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f003 031f 	and.w	r3, r3, #31
 80098fe:	2201      	movs	r2, #1
 8009900:	fa02 f303 	lsl.w	r3, r2, r3
 8009904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6a1a      	ldr	r2, [r3, #32]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	43db      	mvns	r3, r3
 800990e:	401a      	ands	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a1a      	ldr	r2, [r3, #32]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f003 031f 	and.w	r3, r3, #31
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	fa01 f303 	lsl.w	r3, r1, r3
 8009924:	431a      	orrs	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
}
 800992a:	bf00      	nop
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
	...

08009938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009948:	2b01      	cmp	r3, #1
 800994a:	d101      	bne.n	8009950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800994c:	2302      	movs	r3, #2
 800994e:	e06d      	b.n	8009a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2202      	movs	r2, #2
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a30      	ldr	r2, [pc, #192]	; (8009a38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d004      	beq.n	8009984 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a2f      	ldr	r2, [pc, #188]	; (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d108      	bne.n	8009996 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800998a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	4313      	orrs	r3, r2
 8009994:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a20      	ldr	r2, [pc, #128]	; (8009a38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d022      	beq.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c2:	d01d      	beq.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a1d      	ldr	r2, [pc, #116]	; (8009a40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d018      	beq.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a1c      	ldr	r2, [pc, #112]	; (8009a44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d013      	beq.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a1a      	ldr	r2, [pc, #104]	; (8009a48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d00e      	beq.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d009      	beq.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a16      	ldr	r2, [pc, #88]	; (8009a4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d004      	beq.n	8009a00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a15      	ldr	r2, [pc, #84]	; (8009a50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d10c      	bne.n	8009a1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	68ba      	ldr	r2, [r7, #8]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	40010000 	.word	0x40010000
 8009a3c:	40010400 	.word	0x40010400
 8009a40:	40000400 	.word	0x40000400
 8009a44:	40000800 	.word	0x40000800
 8009a48:	40000c00 	.word	0x40000c00
 8009a4c:	40014000 	.word	0x40014000
 8009a50:	40001800 	.word	0x40001800

08009a54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e065      	b.n	8009b3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	041b      	lsls	r3, r3, #16
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a16      	ldr	r2, [pc, #88]	; (8009b48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d004      	beq.n	8009afe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a14      	ldr	r2, [pc, #80]	; (8009b4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d115      	bne.n	8009b2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b08:	051b      	lsls	r3, r3, #20
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	69db      	ldr	r3, [r3, #28]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	6a1b      	ldr	r3, [r3, #32]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3714      	adds	r7, #20
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	40010000 	.word	0x40010000
 8009b4c:	40010400 	.word	0x40010400

08009b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e040      	b.n	8009be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d106      	bne.n	8009b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7f9 f9c0 	bl	8002ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2224      	movs	r2, #36	; 0x24
 8009b7c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0201 	bic.w	r2, r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fb40 	bl	800a214 <UART_SetConfig>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d101      	bne.n	8009b9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e022      	b.n	8009be4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fdde 	bl	800a768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0201 	orr.w	r2, r2, #1
 8009bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fe65 	bl	800a8ac <UART_CheckIdleState>
 8009be2:	4603      	mov	r3, r0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08a      	sub	sp, #40	; 0x28
 8009bf0:	af02      	add	r7, sp, #8
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d17f      	bne.n	8009d04 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <HAL_UART_Transmit+0x24>
 8009c0a:	88fb      	ldrh	r3, [r7, #6]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e078      	b.n	8009d06 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_UART_Transmit+0x36>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e071      	b.n	8009d06 <HAL_UART_Transmit+0x11a>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2221      	movs	r2, #33	; 0x21
 8009c34:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009c36:	f7f9 fb83 	bl	8003340 <HAL_GetTick>
 8009c3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	88fa      	ldrh	r2, [r7, #6]
 8009c40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	88fa      	ldrh	r2, [r7, #6]
 8009c48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c54:	d108      	bne.n	8009c68 <HAL_UART_Transmit+0x7c>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d104      	bne.n	8009c68 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	61bb      	str	r3, [r7, #24]
 8009c66:	e003      	b.n	8009c70 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009c78:	e02c      	b.n	8009cd4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2180      	movs	r1, #128	; 0x80
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fe56 	bl	800a936 <UART_WaitOnFlagUntilTimeout>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e038      	b.n	8009d06 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10b      	bne.n	8009cb2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ca8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	3302      	adds	r3, #2
 8009cae:	61bb      	str	r3, [r7, #24]
 8009cb0:	e007      	b.n	8009cc2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	781a      	ldrb	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1cc      	bne.n	8009c7a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	2140      	movs	r1, #64	; 0x40
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 fe23 	bl	800a936 <UART_WaitOnFlagUntilTimeout>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e005      	b.n	8009d06 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2220      	movs	r2, #32
 8009cfe:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	e000      	b.n	8009d06 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009d04:	2302      	movs	r3, #2
  }
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3720      	adds	r7, #32
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
	...

08009d10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d22:	2b20      	cmp	r3, #32
 8009d24:	d164      	bne.n	8009df0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <HAL_UART_Transmit_DMA+0x22>
 8009d2c:	88fb      	ldrh	r3, [r7, #6]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e05d      	b.n	8009df2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_UART_Transmit_DMA+0x34>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e056      	b.n	8009df2 <HAL_UART_Transmit_DMA+0xe2>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	88fa      	ldrh	r2, [r7, #6]
 8009d56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	88fa      	ldrh	r2, [r7, #6]
 8009d5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2221      	movs	r2, #33	; 0x21
 8009d6c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d02a      	beq.n	8009dcc <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d7a:	4a20      	ldr	r2, [pc, #128]	; (8009dfc <HAL_UART_Transmit_DMA+0xec>)
 8009d7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d82:	4a1f      	ldr	r2, [pc, #124]	; (8009e00 <HAL_UART_Transmit_DMA+0xf0>)
 8009d84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d8a:	4a1e      	ldr	r2, [pc, #120]	; (8009e04 <HAL_UART_Transmit_DMA+0xf4>)
 8009d8c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d92:	2200      	movs	r2, #0
 8009d94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d9e:	4619      	mov	r1, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	3328      	adds	r3, #40	; 0x28
 8009da6:	461a      	mov	r2, r3
 8009da8:	88fb      	ldrh	r3, [r7, #6]
 8009daa:	f7fa f975 	bl	8004098 <HAL_DMA_Start_IT>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00b      	beq.n	8009dcc <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2210      	movs	r2, #16
 8009db8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2220      	movs	r2, #32
 8009dc6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e012      	b.n	8009df2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2240      	movs	r2, #64	; 0x40
 8009dd2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009dea:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	e000      	b.n	8009df2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8009df0:	2302      	movs	r3, #2
  }
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	0800aa97 	.word	0x0800aa97
 8009e00:	0800aae7 	.word	0x0800aae7
 8009e04:	0800ab83 	.word	0x0800ab83

08009e08 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	60b9      	str	r1, [r7, #8]
 8009e12:	4613      	mov	r3, r2
 8009e14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	d16c      	bne.n	8009ef8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <HAL_UART_Receive_DMA+0x22>
 8009e24:	88fb      	ldrh	r3, [r7, #6]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e065      	b.n	8009efa <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d101      	bne.n	8009e3c <HAL_UART_Receive_DMA+0x34>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e05e      	b.n	8009efa <HAL_UART_Receive_DMA+0xf2>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	88fa      	ldrh	r2, [r7, #6]
 8009e4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2222      	movs	r2, #34	; 0x22
 8009e5c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d02a      	beq.n	8009ebc <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e6a:	4a26      	ldr	r2, [pc, #152]	; (8009f04 <HAL_UART_Receive_DMA+0xfc>)
 8009e6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e72:	4a25      	ldr	r2, [pc, #148]	; (8009f08 <HAL_UART_Receive_DMA+0x100>)
 8009e74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e7a:	4a24      	ldr	r2, [pc, #144]	; (8009f0c <HAL_UART_Receive_DMA+0x104>)
 8009e7c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e82:	2200      	movs	r2, #0
 8009e84:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3324      	adds	r3, #36	; 0x24
 8009e90:	4619      	mov	r1, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e96:	461a      	mov	r2, r3
 8009e98:	88fb      	ldrh	r3, [r7, #6]
 8009e9a:	f7fa f8fd 	bl	8004098 <HAL_DMA_Start_IT>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2210      	movs	r2, #16
 8009ea8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2220      	movs	r2, #32
 8009eb6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e01e      	b.n	8009efa <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	689a      	ldr	r2, [r3, #8]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ef2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e000      	b.n	8009efa <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8009ef8:	2302      	movs	r3, #2
  }
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	0800ab03 	.word	0x0800ab03
 8009f08:	0800ab67 	.word	0x0800ab67
 8009f0c:	0800ab83 	.word	0x0800ab83

08009f10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b088      	sub	sp, #32
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009f30:	69fa      	ldr	r2, [r7, #28]
 8009f32:	f640 030f 	movw	r3, #2063	; 0x80f
 8009f36:	4013      	ands	r3, r2
 8009f38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d113      	bne.n	8009f68 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	f003 0320 	and.w	r3, r3, #32
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00e      	beq.n	8009f68 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d009      	beq.n	8009f68 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 8114 	beq.w	800a186 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
      }
      return;
 8009f66:	e10e      	b.n	800a186 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 80d6 	beq.w	800a11c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f003 0301 	and.w	r3, r3, #1
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d105      	bne.n	8009f86 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8009f7a:	69bb      	ldr	r3, [r7, #24]
 8009f7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 80cb 	beq.w	800a11c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00e      	beq.n	8009fae <HAL_UART_IRQHandler+0x9e>
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fa6:	f043 0201 	orr.w	r2, r3, #1
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00e      	beq.n	8009fd6 <HAL_UART_IRQHandler+0xc6>
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d009      	beq.n	8009fd6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009fce:	f043 0204 	orr.w	r2, r3, #4
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	f003 0304 	and.w	r3, r3, #4
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00e      	beq.n	8009ffe <HAL_UART_IRQHandler+0xee>
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d009      	beq.n	8009ffe <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2204      	movs	r2, #4
 8009ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ff6:	f043 0202 	orr.w	r2, r3, #2
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	f003 0308 	and.w	r3, r3, #8
 800a004:	2b00      	cmp	r3, #0
 800a006:	d013      	beq.n	800a030 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d104      	bne.n	800a01c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2208      	movs	r2, #8
 800a022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a028:	f043 0208 	orr.w	r2, r3, #8
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00f      	beq.n	800a05a <HAL_UART_IRQHandler+0x14a>
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00a      	beq.n	800a05a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a04c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a052:	f043 0220 	orr.w	r2, r3, #32
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 8093 	beq.w	800a18a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f003 0320 	and.w	r3, r3, #32
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00c      	beq.n	800a088 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	f003 0320 	and.w	r3, r3, #32
 800a074:	2b00      	cmp	r3, #0
 800a076:	d007      	beq.n	800a088 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a08c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a098:	2b40      	cmp	r3, #64	; 0x40
 800a09a:	d004      	beq.n	800a0a6 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d031      	beq.n	800a10a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fcd5 	bl	800aa56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b6:	2b40      	cmp	r3, #64	; 0x40
 800a0b8:	d123      	bne.n	800a102 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0c8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d013      	beq.n	800a0fa <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d6:	4a30      	ldr	r2, [pc, #192]	; (800a198 <HAL_UART_IRQHandler+0x288>)
 800a0d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fa f83a 	bl	8004158 <HAL_DMA_Abort_IT>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d016      	beq.n	800a118 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0f8:	e00e      	b.n	800a118 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f876 	bl	800a1ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a100:	e00a      	b.n	800a118 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f872 	bl	800a1ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a108:	e006      	b.n	800a118 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f86e 	bl	800a1ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a116:	e038      	b.n	800a18a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a118:	bf00      	nop
    return;
 800a11a:	e036      	b.n	800a18a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <HAL_UART_IRQHandler+0x232>
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a138:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f860 	bl	800a200 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a140:	e026      	b.n	800a190 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00d      	beq.n	800a168 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a152:	2b00      	cmp	r3, #0
 800a154:	d008      	beq.n	800a168 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d017      	beq.n	800a18e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	4798      	blx	r3
    }
    return;
 800a166:	e012      	b.n	800a18e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00e      	beq.n	800a190 <HAL_UART_IRQHandler+0x280>
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d009      	beq.n	800a190 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fd52 	bl	800ac26 <UART_EndTransmit_IT>
    return;
 800a182:	bf00      	nop
 800a184:	e004      	b.n	800a190 <HAL_UART_IRQHandler+0x280>
      return;
 800a186:	bf00      	nop
 800a188:	e002      	b.n	800a190 <HAL_UART_IRQHandler+0x280>
    return;
 800a18a:	bf00      	nop
 800a18c:	e000      	b.n	800a190 <HAL_UART_IRQHandler+0x280>
    return;
 800a18e:	bf00      	nop
  }

}
 800a190:	3720      	adds	r7, #32
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	0800abfb 	.word	0x0800abfb

0800a19c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a200:	b480      	push	{r7}
 800a202:	b083      	sub	sp, #12
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	431a      	orrs	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	69db      	ldr	r3, [r3, #28]
 800a238:	4313      	orrs	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4bb1      	ldr	r3, [pc, #708]	; (800a508 <UART_SetConfig+0x2f4>)
 800a244:	4013      	ands	r3, r2
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	6812      	ldr	r2, [r2, #0]
 800a24a:	6939      	ldr	r1, [r7, #16]
 800a24c:	430b      	orrs	r3, r1
 800a24e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68da      	ldr	r2, [r3, #12]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	4313      	orrs	r3, r2
 800a274:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	693a      	ldr	r2, [r7, #16]
 800a286:	430a      	orrs	r2, r1
 800a288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a9f      	ldr	r2, [pc, #636]	; (800a50c <UART_SetConfig+0x2f8>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d121      	bne.n	800a2d8 <UART_SetConfig+0xc4>
 800a294:	4b9e      	ldr	r3, [pc, #632]	; (800a510 <UART_SetConfig+0x2fc>)
 800a296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a29a:	f003 0303 	and.w	r3, r3, #3
 800a29e:	2b03      	cmp	r3, #3
 800a2a0:	d816      	bhi.n	800a2d0 <UART_SetConfig+0xbc>
 800a2a2:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <UART_SetConfig+0x94>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a2b9 	.word	0x0800a2b9
 800a2ac:	0800a2c5 	.word	0x0800a2c5
 800a2b0:	0800a2bf 	.word	0x0800a2bf
 800a2b4:	0800a2cb 	.word	0x0800a2cb
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	77fb      	strb	r3, [r7, #31]
 800a2bc:	e151      	b.n	800a562 <UART_SetConfig+0x34e>
 800a2be:	2302      	movs	r3, #2
 800a2c0:	77fb      	strb	r3, [r7, #31]
 800a2c2:	e14e      	b.n	800a562 <UART_SetConfig+0x34e>
 800a2c4:	2304      	movs	r3, #4
 800a2c6:	77fb      	strb	r3, [r7, #31]
 800a2c8:	e14b      	b.n	800a562 <UART_SetConfig+0x34e>
 800a2ca:	2308      	movs	r3, #8
 800a2cc:	77fb      	strb	r3, [r7, #31]
 800a2ce:	e148      	b.n	800a562 <UART_SetConfig+0x34e>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	77fb      	strb	r3, [r7, #31]
 800a2d4:	bf00      	nop
 800a2d6:	e144      	b.n	800a562 <UART_SetConfig+0x34e>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a8d      	ldr	r2, [pc, #564]	; (800a514 <UART_SetConfig+0x300>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d134      	bne.n	800a34c <UART_SetConfig+0x138>
 800a2e2:	4b8b      	ldr	r3, [pc, #556]	; (800a510 <UART_SetConfig+0x2fc>)
 800a2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2e8:	f003 030c 	and.w	r3, r3, #12
 800a2ec:	2b0c      	cmp	r3, #12
 800a2ee:	d829      	bhi.n	800a344 <UART_SetConfig+0x130>
 800a2f0:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <UART_SetConfig+0xe4>)
 800a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f6:	bf00      	nop
 800a2f8:	0800a32d 	.word	0x0800a32d
 800a2fc:	0800a345 	.word	0x0800a345
 800a300:	0800a345 	.word	0x0800a345
 800a304:	0800a345 	.word	0x0800a345
 800a308:	0800a339 	.word	0x0800a339
 800a30c:	0800a345 	.word	0x0800a345
 800a310:	0800a345 	.word	0x0800a345
 800a314:	0800a345 	.word	0x0800a345
 800a318:	0800a333 	.word	0x0800a333
 800a31c:	0800a345 	.word	0x0800a345
 800a320:	0800a345 	.word	0x0800a345
 800a324:	0800a345 	.word	0x0800a345
 800a328:	0800a33f 	.word	0x0800a33f
 800a32c:	2300      	movs	r3, #0
 800a32e:	77fb      	strb	r3, [r7, #31]
 800a330:	e117      	b.n	800a562 <UART_SetConfig+0x34e>
 800a332:	2302      	movs	r3, #2
 800a334:	77fb      	strb	r3, [r7, #31]
 800a336:	e114      	b.n	800a562 <UART_SetConfig+0x34e>
 800a338:	2304      	movs	r3, #4
 800a33a:	77fb      	strb	r3, [r7, #31]
 800a33c:	e111      	b.n	800a562 <UART_SetConfig+0x34e>
 800a33e:	2308      	movs	r3, #8
 800a340:	77fb      	strb	r3, [r7, #31]
 800a342:	e10e      	b.n	800a562 <UART_SetConfig+0x34e>
 800a344:	2310      	movs	r3, #16
 800a346:	77fb      	strb	r3, [r7, #31]
 800a348:	bf00      	nop
 800a34a:	e10a      	b.n	800a562 <UART_SetConfig+0x34e>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a71      	ldr	r2, [pc, #452]	; (800a518 <UART_SetConfig+0x304>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d120      	bne.n	800a398 <UART_SetConfig+0x184>
 800a356:	4b6e      	ldr	r3, [pc, #440]	; (800a510 <UART_SetConfig+0x2fc>)
 800a358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a35c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a360:	2b10      	cmp	r3, #16
 800a362:	d00f      	beq.n	800a384 <UART_SetConfig+0x170>
 800a364:	2b10      	cmp	r3, #16
 800a366:	d802      	bhi.n	800a36e <UART_SetConfig+0x15a>
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <UART_SetConfig+0x164>
 800a36c:	e010      	b.n	800a390 <UART_SetConfig+0x17c>
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d005      	beq.n	800a37e <UART_SetConfig+0x16a>
 800a372:	2b30      	cmp	r3, #48	; 0x30
 800a374:	d009      	beq.n	800a38a <UART_SetConfig+0x176>
 800a376:	e00b      	b.n	800a390 <UART_SetConfig+0x17c>
 800a378:	2300      	movs	r3, #0
 800a37a:	77fb      	strb	r3, [r7, #31]
 800a37c:	e0f1      	b.n	800a562 <UART_SetConfig+0x34e>
 800a37e:	2302      	movs	r3, #2
 800a380:	77fb      	strb	r3, [r7, #31]
 800a382:	e0ee      	b.n	800a562 <UART_SetConfig+0x34e>
 800a384:	2304      	movs	r3, #4
 800a386:	77fb      	strb	r3, [r7, #31]
 800a388:	e0eb      	b.n	800a562 <UART_SetConfig+0x34e>
 800a38a:	2308      	movs	r3, #8
 800a38c:	77fb      	strb	r3, [r7, #31]
 800a38e:	e0e8      	b.n	800a562 <UART_SetConfig+0x34e>
 800a390:	2310      	movs	r3, #16
 800a392:	77fb      	strb	r3, [r7, #31]
 800a394:	bf00      	nop
 800a396:	e0e4      	b.n	800a562 <UART_SetConfig+0x34e>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a5f      	ldr	r2, [pc, #380]	; (800a51c <UART_SetConfig+0x308>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d120      	bne.n	800a3e4 <UART_SetConfig+0x1d0>
 800a3a2:	4b5b      	ldr	r3, [pc, #364]	; (800a510 <UART_SetConfig+0x2fc>)
 800a3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a3ac:	2b40      	cmp	r3, #64	; 0x40
 800a3ae:	d00f      	beq.n	800a3d0 <UART_SetConfig+0x1bc>
 800a3b0:	2b40      	cmp	r3, #64	; 0x40
 800a3b2:	d802      	bhi.n	800a3ba <UART_SetConfig+0x1a6>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <UART_SetConfig+0x1b0>
 800a3b8:	e010      	b.n	800a3dc <UART_SetConfig+0x1c8>
 800a3ba:	2b80      	cmp	r3, #128	; 0x80
 800a3bc:	d005      	beq.n	800a3ca <UART_SetConfig+0x1b6>
 800a3be:	2bc0      	cmp	r3, #192	; 0xc0
 800a3c0:	d009      	beq.n	800a3d6 <UART_SetConfig+0x1c2>
 800a3c2:	e00b      	b.n	800a3dc <UART_SetConfig+0x1c8>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	77fb      	strb	r3, [r7, #31]
 800a3c8:	e0cb      	b.n	800a562 <UART_SetConfig+0x34e>
 800a3ca:	2302      	movs	r3, #2
 800a3cc:	77fb      	strb	r3, [r7, #31]
 800a3ce:	e0c8      	b.n	800a562 <UART_SetConfig+0x34e>
 800a3d0:	2304      	movs	r3, #4
 800a3d2:	77fb      	strb	r3, [r7, #31]
 800a3d4:	e0c5      	b.n	800a562 <UART_SetConfig+0x34e>
 800a3d6:	2308      	movs	r3, #8
 800a3d8:	77fb      	strb	r3, [r7, #31]
 800a3da:	e0c2      	b.n	800a562 <UART_SetConfig+0x34e>
 800a3dc:	2310      	movs	r3, #16
 800a3de:	77fb      	strb	r3, [r7, #31]
 800a3e0:	bf00      	nop
 800a3e2:	e0be      	b.n	800a562 <UART_SetConfig+0x34e>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a4d      	ldr	r2, [pc, #308]	; (800a520 <UART_SetConfig+0x30c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d124      	bne.n	800a438 <UART_SetConfig+0x224>
 800a3ee:	4b48      	ldr	r3, [pc, #288]	; (800a510 <UART_SetConfig+0x2fc>)
 800a3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fc:	d012      	beq.n	800a424 <UART_SetConfig+0x210>
 800a3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a402:	d802      	bhi.n	800a40a <UART_SetConfig+0x1f6>
 800a404:	2b00      	cmp	r3, #0
 800a406:	d007      	beq.n	800a418 <UART_SetConfig+0x204>
 800a408:	e012      	b.n	800a430 <UART_SetConfig+0x21c>
 800a40a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a40e:	d006      	beq.n	800a41e <UART_SetConfig+0x20a>
 800a410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a414:	d009      	beq.n	800a42a <UART_SetConfig+0x216>
 800a416:	e00b      	b.n	800a430 <UART_SetConfig+0x21c>
 800a418:	2300      	movs	r3, #0
 800a41a:	77fb      	strb	r3, [r7, #31]
 800a41c:	e0a1      	b.n	800a562 <UART_SetConfig+0x34e>
 800a41e:	2302      	movs	r3, #2
 800a420:	77fb      	strb	r3, [r7, #31]
 800a422:	e09e      	b.n	800a562 <UART_SetConfig+0x34e>
 800a424:	2304      	movs	r3, #4
 800a426:	77fb      	strb	r3, [r7, #31]
 800a428:	e09b      	b.n	800a562 <UART_SetConfig+0x34e>
 800a42a:	2308      	movs	r3, #8
 800a42c:	77fb      	strb	r3, [r7, #31]
 800a42e:	e098      	b.n	800a562 <UART_SetConfig+0x34e>
 800a430:	2310      	movs	r3, #16
 800a432:	77fb      	strb	r3, [r7, #31]
 800a434:	bf00      	nop
 800a436:	e094      	b.n	800a562 <UART_SetConfig+0x34e>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a39      	ldr	r2, [pc, #228]	; (800a524 <UART_SetConfig+0x310>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d124      	bne.n	800a48c <UART_SetConfig+0x278>
 800a442:	4b33      	ldr	r3, [pc, #204]	; (800a510 <UART_SetConfig+0x2fc>)
 800a444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a448:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a44c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a450:	d012      	beq.n	800a478 <UART_SetConfig+0x264>
 800a452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a456:	d802      	bhi.n	800a45e <UART_SetConfig+0x24a>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d007      	beq.n	800a46c <UART_SetConfig+0x258>
 800a45c:	e012      	b.n	800a484 <UART_SetConfig+0x270>
 800a45e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a462:	d006      	beq.n	800a472 <UART_SetConfig+0x25e>
 800a464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a468:	d009      	beq.n	800a47e <UART_SetConfig+0x26a>
 800a46a:	e00b      	b.n	800a484 <UART_SetConfig+0x270>
 800a46c:	2301      	movs	r3, #1
 800a46e:	77fb      	strb	r3, [r7, #31]
 800a470:	e077      	b.n	800a562 <UART_SetConfig+0x34e>
 800a472:	2302      	movs	r3, #2
 800a474:	77fb      	strb	r3, [r7, #31]
 800a476:	e074      	b.n	800a562 <UART_SetConfig+0x34e>
 800a478:	2304      	movs	r3, #4
 800a47a:	77fb      	strb	r3, [r7, #31]
 800a47c:	e071      	b.n	800a562 <UART_SetConfig+0x34e>
 800a47e:	2308      	movs	r3, #8
 800a480:	77fb      	strb	r3, [r7, #31]
 800a482:	e06e      	b.n	800a562 <UART_SetConfig+0x34e>
 800a484:	2310      	movs	r3, #16
 800a486:	77fb      	strb	r3, [r7, #31]
 800a488:	bf00      	nop
 800a48a:	e06a      	b.n	800a562 <UART_SetConfig+0x34e>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a25      	ldr	r2, [pc, #148]	; (800a528 <UART_SetConfig+0x314>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d124      	bne.n	800a4e0 <UART_SetConfig+0x2cc>
 800a496:	4b1e      	ldr	r3, [pc, #120]	; (800a510 <UART_SetConfig+0x2fc>)
 800a498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a49c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a4a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4a4:	d012      	beq.n	800a4cc <UART_SetConfig+0x2b8>
 800a4a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4aa:	d802      	bhi.n	800a4b2 <UART_SetConfig+0x29e>
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d007      	beq.n	800a4c0 <UART_SetConfig+0x2ac>
 800a4b0:	e012      	b.n	800a4d8 <UART_SetConfig+0x2c4>
 800a4b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4b6:	d006      	beq.n	800a4c6 <UART_SetConfig+0x2b2>
 800a4b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a4bc:	d009      	beq.n	800a4d2 <UART_SetConfig+0x2be>
 800a4be:	e00b      	b.n	800a4d8 <UART_SetConfig+0x2c4>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	77fb      	strb	r3, [r7, #31]
 800a4c4:	e04d      	b.n	800a562 <UART_SetConfig+0x34e>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	77fb      	strb	r3, [r7, #31]
 800a4ca:	e04a      	b.n	800a562 <UART_SetConfig+0x34e>
 800a4cc:	2304      	movs	r3, #4
 800a4ce:	77fb      	strb	r3, [r7, #31]
 800a4d0:	e047      	b.n	800a562 <UART_SetConfig+0x34e>
 800a4d2:	2308      	movs	r3, #8
 800a4d4:	77fb      	strb	r3, [r7, #31]
 800a4d6:	e044      	b.n	800a562 <UART_SetConfig+0x34e>
 800a4d8:	2310      	movs	r3, #16
 800a4da:	77fb      	strb	r3, [r7, #31]
 800a4dc:	bf00      	nop
 800a4de:	e040      	b.n	800a562 <UART_SetConfig+0x34e>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a11      	ldr	r2, [pc, #68]	; (800a52c <UART_SetConfig+0x318>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d139      	bne.n	800a55e <UART_SetConfig+0x34a>
 800a4ea:	4b09      	ldr	r3, [pc, #36]	; (800a510 <UART_SetConfig+0x2fc>)
 800a4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a4f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4f8:	d027      	beq.n	800a54a <UART_SetConfig+0x336>
 800a4fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4fe:	d817      	bhi.n	800a530 <UART_SetConfig+0x31c>
 800a500:	2b00      	cmp	r3, #0
 800a502:	d01c      	beq.n	800a53e <UART_SetConfig+0x32a>
 800a504:	e027      	b.n	800a556 <UART_SetConfig+0x342>
 800a506:	bf00      	nop
 800a508:	efff69f3 	.word	0xefff69f3
 800a50c:	40011000 	.word	0x40011000
 800a510:	40023800 	.word	0x40023800
 800a514:	40004400 	.word	0x40004400
 800a518:	40004800 	.word	0x40004800
 800a51c:	40004c00 	.word	0x40004c00
 800a520:	40005000 	.word	0x40005000
 800a524:	40011400 	.word	0x40011400
 800a528:	40007800 	.word	0x40007800
 800a52c:	40007c00 	.word	0x40007c00
 800a530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a534:	d006      	beq.n	800a544 <UART_SetConfig+0x330>
 800a536:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a53a:	d009      	beq.n	800a550 <UART_SetConfig+0x33c>
 800a53c:	e00b      	b.n	800a556 <UART_SetConfig+0x342>
 800a53e:	2300      	movs	r3, #0
 800a540:	77fb      	strb	r3, [r7, #31]
 800a542:	e00e      	b.n	800a562 <UART_SetConfig+0x34e>
 800a544:	2302      	movs	r3, #2
 800a546:	77fb      	strb	r3, [r7, #31]
 800a548:	e00b      	b.n	800a562 <UART_SetConfig+0x34e>
 800a54a:	2304      	movs	r3, #4
 800a54c:	77fb      	strb	r3, [r7, #31]
 800a54e:	e008      	b.n	800a562 <UART_SetConfig+0x34e>
 800a550:	2308      	movs	r3, #8
 800a552:	77fb      	strb	r3, [r7, #31]
 800a554:	e005      	b.n	800a562 <UART_SetConfig+0x34e>
 800a556:	2310      	movs	r3, #16
 800a558:	77fb      	strb	r3, [r7, #31]
 800a55a:	bf00      	nop
 800a55c:	e001      	b.n	800a562 <UART_SetConfig+0x34e>
 800a55e:	2310      	movs	r3, #16
 800a560:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a56a:	d17f      	bne.n	800a66c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a56c:	7ffb      	ldrb	r3, [r7, #31]
 800a56e:	2b08      	cmp	r3, #8
 800a570:	d85c      	bhi.n	800a62c <UART_SetConfig+0x418>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <UART_SetConfig+0x364>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a59d 	.word	0x0800a59d
 800a57c:	0800a5bd 	.word	0x0800a5bd
 800a580:	0800a5dd 	.word	0x0800a5dd
 800a584:	0800a62d 	.word	0x0800a62d
 800a588:	0800a5f5 	.word	0x0800a5f5
 800a58c:	0800a62d 	.word	0x0800a62d
 800a590:	0800a62d 	.word	0x0800a62d
 800a594:	0800a62d 	.word	0x0800a62d
 800a598:	0800a615 	.word	0x0800a615
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a59c:	f7fc fdba 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 800a5a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	005a      	lsls	r2, r3, #1
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	441a      	add	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	61bb      	str	r3, [r7, #24]
        break;
 800a5ba:	e03a      	b.n	800a632 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5bc:	f7fc fdbe 	bl	800713c <HAL_RCC_GetPCLK2Freq>
 800a5c0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	005a      	lsls	r2, r3, #1
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	085b      	lsrs	r3, r3, #1
 800a5cc:	441a      	add	r2, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	61bb      	str	r3, [r7, #24]
        break;
 800a5da:	e02a      	b.n	800a632 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	085a      	lsrs	r2, r3, #1
 800a5e2:	4b5f      	ldr	r3, [pc, #380]	; (800a760 <UART_SetConfig+0x54c>)
 800a5e4:	4413      	add	r3, r2
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	6852      	ldr	r2, [r2, #4]
 800a5ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	61bb      	str	r3, [r7, #24]
        break;
 800a5f2:	e01e      	b.n	800a632 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5f4:	f7fc fcd0 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 800a5f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	005a      	lsls	r2, r3, #1
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	085b      	lsrs	r3, r3, #1
 800a604:	441a      	add	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60e:	b29b      	uxth	r3, r3
 800a610:	61bb      	str	r3, [r7, #24]
        break;
 800a612:	e00e      	b.n	800a632 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	085b      	lsrs	r3, r3, #1
 800a61a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	fbb2 f3f3 	udiv	r3, r2, r3
 800a626:	b29b      	uxth	r3, r3
 800a628:	61bb      	str	r3, [r7, #24]
        break;
 800a62a:	e002      	b.n	800a632 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	75fb      	strb	r3, [r7, #23]
        break;
 800a630:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	2b0f      	cmp	r3, #15
 800a636:	d916      	bls.n	800a666 <UART_SetConfig+0x452>
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a63e:	d212      	bcs.n	800a666 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	b29b      	uxth	r3, r3
 800a644:	f023 030f 	bic.w	r3, r3, #15
 800a648:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	085b      	lsrs	r3, r3, #1
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	b29a      	uxth	r2, r3
 800a656:	897b      	ldrh	r3, [r7, #10]
 800a658:	4313      	orrs	r3, r2
 800a65a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	897a      	ldrh	r2, [r7, #10]
 800a662:	60da      	str	r2, [r3, #12]
 800a664:	e070      	b.n	800a748 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	75fb      	strb	r3, [r7, #23]
 800a66a:	e06d      	b.n	800a748 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a66c:	7ffb      	ldrb	r3, [r7, #31]
 800a66e:	2b08      	cmp	r3, #8
 800a670:	d859      	bhi.n	800a726 <UART_SetConfig+0x512>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0x464>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a6bb 	.word	0x0800a6bb
 800a680:	0800a6d9 	.word	0x0800a6d9
 800a684:	0800a727 	.word	0x0800a727
 800a688:	0800a6f1 	.word	0x0800a6f1
 800a68c:	0800a727 	.word	0x0800a727
 800a690:	0800a727 	.word	0x0800a727
 800a694:	0800a727 	.word	0x0800a727
 800a698:	0800a70f 	.word	0x0800a70f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a69c:	f7fc fd3a 	bl	8007114 <HAL_RCC_GetPCLK1Freq>
 800a6a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	085a      	lsrs	r2, r3, #1
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	441a      	add	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	61bb      	str	r3, [r7, #24]
        break;
 800a6b8:	e038      	b.n	800a72c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6ba:	f7fc fd3f 	bl	800713c <HAL_RCC_GetPCLK2Freq>
 800a6be:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	085a      	lsrs	r2, r3, #1
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	441a      	add	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	61bb      	str	r3, [r7, #24]
        break;
 800a6d6:	e029      	b.n	800a72c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	085a      	lsrs	r2, r3, #1
 800a6de:	4b21      	ldr	r3, [pc, #132]	; (800a764 <UART_SetConfig+0x550>)
 800a6e0:	4413      	add	r3, r2
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	6852      	ldr	r2, [r2, #4]
 800a6e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	61bb      	str	r3, [r7, #24]
        break;
 800a6ee:	e01d      	b.n	800a72c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6f0:	f7fc fc52 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 800a6f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	085a      	lsrs	r2, r3, #1
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	441a      	add	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	fbb2 f3f3 	udiv	r3, r2, r3
 800a708:	b29b      	uxth	r3, r3
 800a70a:	61bb      	str	r3, [r7, #24]
        break;
 800a70c:	e00e      	b.n	800a72c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a720:	b29b      	uxth	r3, r3
 800a722:	61bb      	str	r3, [r7, #24]
        break;
 800a724:	e002      	b.n	800a72c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	75fb      	strb	r3, [r7, #23]
        break;
 800a72a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d908      	bls.n	800a744 <UART_SetConfig+0x530>
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a738:	d204      	bcs.n	800a744 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	60da      	str	r2, [r3, #12]
 800a742:	e001      	b.n	800a748 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a754:	7dfb      	ldrb	r3, [r7, #23]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3720      	adds	r7, #32
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	01e84800 	.word	0x01e84800
 800a764:	00f42400 	.word	0x00f42400

0800a768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a768:	b480      	push	{r7}
 800a76a:	b083      	sub	sp, #12
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a774:	f003 0301 	and.w	r3, r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00a      	beq.n	800a792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	430a      	orrs	r2, r1
 800a790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00a      	beq.n	800a7b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00a      	beq.n	800a7d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7da:	f003 0308 	and.w	r3, r3, #8
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00a      	beq.n	800a7f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	430a      	orrs	r2, r1
 800a7f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	f003 0310 	and.w	r3, r3, #16
 800a800:	2b00      	cmp	r3, #0
 800a802:	d00a      	beq.n	800a81a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	430a      	orrs	r2, r1
 800a818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	f003 0320 	and.w	r3, r3, #32
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00a      	beq.n	800a83c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01a      	beq.n	800a87e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	430a      	orrs	r2, r1
 800a85c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a866:	d10a      	bne.n	800a87e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00a      	beq.n	800a8a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	430a      	orrs	r2, r1
 800a89e:	605a      	str	r2, [r3, #4]
  }
}
 800a8a0:	bf00      	nop
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a8ba:	f7f8 fd41 	bl	8003340 <HAL_GetTick>
 800a8be:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0308 	and.w	r3, r3, #8
 800a8ca:	2b08      	cmp	r3, #8
 800a8cc:	d10e      	bne.n	800a8ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f82a 	bl	800a936 <UART_WaitOnFlagUntilTimeout>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e020      	b.n	800a92e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	2b04      	cmp	r3, #4
 800a8f8:	d10e      	bne.n	800a918 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f814 	bl	800a936 <UART_WaitOnFlagUntilTimeout>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d001      	beq.n	800a918 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e00a      	b.n	800a92e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2220      	movs	r2, #32
 800a91c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2220      	movs	r2, #32
 800a922:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a936:	b580      	push	{r7, lr}
 800a938:	b084      	sub	sp, #16
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	60f8      	str	r0, [r7, #12]
 800a93e:	60b9      	str	r1, [r7, #8]
 800a940:	603b      	str	r3, [r7, #0]
 800a942:	4613      	mov	r3, r2
 800a944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a946:	e05d      	b.n	800aa04 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94e:	d059      	beq.n	800aa04 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a950:	f7f8 fcf6 	bl	8003340 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	69ba      	ldr	r2, [r7, #24]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d302      	bcc.n	800a966 <UART_WaitOnFlagUntilTimeout+0x30>
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d11b      	bne.n	800a99e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a974:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f022 0201 	bic.w	r2, r2, #1
 800a984:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2220      	movs	r2, #32
 800a98a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2220      	movs	r2, #32
 800a990:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a99a:	2303      	movs	r3, #3
 800a99c:	e042      	b.n	800aa24 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0304 	and.w	r3, r3, #4
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d02b      	beq.n	800aa04 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ba:	d123      	bne.n	800aa04 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9c4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a9d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	689a      	ldr	r2, [r3, #8]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f022 0201 	bic.w	r2, r2, #1
 800a9e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2220      	movs	r2, #32
 800a9ea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2220      	movs	r2, #32
 800a9f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e00f      	b.n	800aa24 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69da      	ldr	r2, [r3, #28]
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	68ba      	ldr	r2, [r7, #8]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	bf0c      	ite	eq
 800aa14:	2301      	moveq	r3, #1
 800aa16:	2300      	movne	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	79fb      	ldrb	r3, [r7, #7]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d092      	beq.n	800a948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800aa42:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2220      	movs	r2, #32
 800aa48:	675a      	str	r2, [r3, #116]	; 0x74
}
 800aa4a:	bf00      	nop
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b083      	sub	sp, #12
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa6c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	689a      	ldr	r2, [r3, #8]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f022 0201 	bic.w	r2, r2, #1
 800aa7c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2220      	movs	r2, #32
 800aa82:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	661a      	str	r2, [r3, #96]	; 0x60
}
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	69db      	ldr	r3, [r3, #28]
 800aaa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaac:	d014      	beq.n	800aad8 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	689a      	ldr	r2, [r3, #8]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aac4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aad4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aad6:	e002      	b.n	800aade <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7ff fb5f 	bl	800a19c <HAL_UART_TxCpltCallback>
}
 800aade:	bf00      	nop
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f7ff fb5b 	bl	800a1b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aafa:	bf00      	nop
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab18:	d01e      	beq.n	800ab58 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab30:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	689a      	ldr	r2, [r3, #8]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f022 0201 	bic.w	r2, r2, #1
 800ab40:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689a      	ldr	r2, [r3, #8]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab50:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2220      	movs	r2, #32
 800ab56:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f7ff fb33 	bl	800a1c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab5e:	bf00      	nop
 800ab60:	3710      	adds	r7, #16
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b084      	sub	sp, #16
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff fb2f 	bl	800a1d8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b086      	sub	sp, #24
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab9a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aba6:	2b80      	cmp	r3, #128	; 0x80
 800aba8:	d109      	bne.n	800abbe <UART_DMAError+0x3c>
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b21      	cmp	r3, #33	; 0x21
 800abae:	d106      	bne.n	800abbe <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800abb8:	6978      	ldr	r0, [r7, #20]
 800abba:	f7ff ff37 	bl	800aa2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc8:	2b40      	cmp	r3, #64	; 0x40
 800abca:	d109      	bne.n	800abe0 <UART_DMAError+0x5e>
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2b22      	cmp	r3, #34	; 0x22
 800abd0:	d106      	bne.n	800abe0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f7ff ff3b 	bl	800aa56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abe4:	f043 0210 	orr.w	r2, r3, #16
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abec:	6978      	ldr	r0, [r7, #20]
 800abee:	f7ff fafd 	bl	800a1ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf2:	bf00      	nop
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7ff fae7 	bl	800a1ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac1e:	bf00      	nop
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac3c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2220      	movs	r2, #32
 800ac42:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff faa6 	bl	800a19c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ac58:	b084      	sub	sp, #16
 800ac5a:	b480      	push	{r7}
 800ac5c:	b085      	sub	sp, #20
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	f107 001c 	add.w	r0, r7, #28
 800ac66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ac6e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ac70:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ac72:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ac76:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ac7a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ac7e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ac82:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	4b07      	ldr	r3, [pc, #28]	; (800acac <SDMMC_Init+0x54>)
 800ac90:	4013      	ands	r3, r2
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	431a      	orrs	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	b004      	add	sp, #16
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	ffff8100 	.word	0xffff8100

0800acb0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2203      	movs	r2, #3
 800acbc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800acbe:	2002      	movs	r0, #2
 800acc0:	f7f8 fb4a 	bl	8003358 <HAL_Delay>
  
  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0303 	and.w	r3, r3, #3
}
 800acde:	4618      	mov	r0, r3
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
	...

0800acec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ad0a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ad10:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ad16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	68da      	ldr	r2, [r3, #12]
 800ad22:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <SDMMC_SendCommand+0x50>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	431a      	orrs	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	fffff000 	.word	0xfffff000

0800ad40 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	b2db      	uxtb	r3, r3
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	3314      	adds	r3, #20
 800ad68:	461a      	mov	r2, r3
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	4413      	add	r3, r2
 800ad6e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
}  
 800ad74:	4618      	mov	r0, r3
 800ad76:	3714      	adds	r7, #20
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7e:	4770      	bx	lr

0800ad80 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08a      	sub	sp, #40	; 0x28
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ad90:	2307      	movs	r3, #7
 800ad92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad94:	2340      	movs	r3, #64	; 0x40
 800ad96:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada0:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ada2:	f107 0310 	add.w	r3, r7, #16
 800ada6:	4619      	mov	r1, r3
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f7ff ff9f 	bl	800acec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800adae:	f241 3288 	movw	r2, #5000	; 0x1388
 800adb2:	2107      	movs	r1, #7
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f000 f8c9 	bl	800af4c <SDMMC_GetCmdResp1>
 800adba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3728      	adds	r7, #40	; 0x28
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b088      	sub	sp, #32
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800adce:	2300      	movs	r3, #0
 800add0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800add2:	2300      	movs	r3, #0
 800add4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800add6:	2300      	movs	r3, #0
 800add8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adda:	2300      	movs	r3, #0
 800addc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ade2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ade4:	f107 0308 	add.w	r3, r7, #8
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7ff ff7e 	bl	800acec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 f883 	bl	800aefc <SDMMC_GetCmdError>
 800adf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adf8:	69fb      	ldr	r3, [r7, #28]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3720      	adds	r7, #32
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b088      	sub	sp, #32
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ae0e:	2302      	movs	r3, #2
 800ae10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae12:	23c0      	movs	r3, #192	; 0xc0
 800ae14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae16:	2300      	movs	r3, #0
 800ae18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae20:	f107 0308 	add.w	r3, r7, #8
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7ff ff60 	bl	800acec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f979 	bl	800b124 <SDMMC_GetCmdResp2>
 800ae32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae34:	69fb      	ldr	r3, [r7, #28]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3720      	adds	r7, #32
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b088      	sub	sp, #32
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae4c:	2309      	movs	r3, #9
 800ae4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae50:	23c0      	movs	r3, #192	; 0xc0
 800ae52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae54:	2300      	movs	r3, #0
 800ae56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae5e:	f107 0308 	add.w	r3, r7, #8
 800ae62:	4619      	mov	r1, r3
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff ff41 	bl	800acec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f95a 	bl	800b124 <SDMMC_GetCmdResp2>
 800ae70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae72:	69fb      	ldr	r3, [r7, #28]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3720      	adds	r7, #32
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae8a:	2303      	movs	r3, #3
 800ae8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae8e:	2340      	movs	r3, #64	; 0x40
 800ae90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae92:	2300      	movs	r3, #0
 800ae94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae9c:	f107 0308 	add.w	r3, r7, #8
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff ff22 	bl	800acec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	2103      	movs	r1, #3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9b9 	bl	800b224 <SDMMC_GetCmdResp6>
 800aeb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb4:	69fb      	ldr	r3, [r7, #28]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b088      	sub	sp, #32
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800aecc:	2301      	movs	r3, #1
 800aece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aed0:	2340      	movs	r3, #64	; 0x40
 800aed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aedc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aede:	f107 0308 	add.w	r3, r7, #8
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f7ff ff01 	bl	800acec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f960 	bl	800b1b0 <SDMMC_GetCmdResp3>
 800aef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef2:	69fb      	ldr	r3, [r7, #28]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3720      	adds	r7, #32
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aefc:	b490      	push	{r4, r7}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af04:	4b0f      	ldr	r3, [pc, #60]	; (800af44 <SDMMC_GetCmdError+0x48>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a0f      	ldr	r2, [pc, #60]	; (800af48 <SDMMC_GetCmdError+0x4c>)
 800af0a:	fba2 2303 	umull	r2, r3, r2, r3
 800af0e:	0a5b      	lsrs	r3, r3, #9
 800af10:	f241 3288 	movw	r2, #5000	; 0x1388
 800af14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af18:	4623      	mov	r3, r4
 800af1a:	1e5c      	subs	r4, r3, #1
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d102      	bne.n	800af26 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af24:	e009      	b.n	800af3a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0f2      	beq.n	800af18 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	22c5      	movs	r2, #197	; 0xc5
 800af36:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc90      	pop	{r4, r7}
 800af42:	4770      	bx	lr
 800af44:	20000004 	.word	0x20000004
 800af48:	10624dd3 	.word	0x10624dd3

0800af4c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af4c:	b590      	push	{r4, r7, lr}
 800af4e:	b087      	sub	sp, #28
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	460b      	mov	r3, r1
 800af56:	607a      	str	r2, [r7, #4]
 800af58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800af5a:	4b6f      	ldr	r3, [pc, #444]	; (800b118 <SDMMC_GetCmdResp1+0x1cc>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a6f      	ldr	r2, [pc, #444]	; (800b11c <SDMMC_GetCmdResp1+0x1d0>)
 800af60:	fba2 2303 	umull	r2, r3, r2, r3
 800af64:	0a5b      	lsrs	r3, r3, #9
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800af6c:	4623      	mov	r3, r4
 800af6e:	1e5c      	subs	r4, r3, #1
 800af70:	2b00      	cmp	r3, #0
 800af72:	d102      	bne.n	800af7a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af78:	e0c9      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <SDMMC_GetCmdResp1+0x20>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1eb      	bne.n	800af6c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d004      	beq.n	800afaa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2204      	movs	r2, #4
 800afa4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afa6:	2304      	movs	r3, #4
 800afa8:	e0b1      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d004      	beq.n	800afc0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2201      	movs	r2, #1
 800afba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e0a6      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	22c5      	movs	r2, #197	; 0xc5
 800afc4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff feba 	bl	800ad40 <SDMMC_GetCommandResponse>
 800afcc:	4603      	mov	r3, r0
 800afce:	461a      	mov	r2, r3
 800afd0:	7afb      	ldrb	r3, [r7, #11]
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d001      	beq.n	800afda <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e099      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800afda:	2100      	movs	r1, #0
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f7ff febc 	bl	800ad5a <SDMMC_GetResponse>
 800afe2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	4b4e      	ldr	r3, [pc, #312]	; (800b120 <SDMMC_GetCmdResp1+0x1d4>)
 800afe8:	4013      	ands	r3, r2
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800afee:	2300      	movs	r3, #0
 800aff0:	e08d      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	da02      	bge.n	800affe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800aff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800affc:	e087      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d001      	beq.n	800b00c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b008:	2340      	movs	r3, #64	; 0x40
 800b00a:	e080      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b016:	2380      	movs	r3, #128	; 0x80
 800b018:	e079      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b028:	e071      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b034:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b038:	e069      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b048:	e061      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b054:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b058:	e059      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b068:	e051      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b078:	e049      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b084:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b088:	e041      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b098:	e039      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b0a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b0a8:	e031      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b0b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b0b8:	e029      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b0c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0c8:	e021      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b0d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b0d8:	e019      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b0e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0e8:	e011      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d002      	beq.n	800b0fa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b0f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0f8:	e009      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f003 0308 	and.w	r3, r3, #8
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b104:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b108:	e001      	b.n	800b10e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b10a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b10e:	4618      	mov	r0, r3
 800b110:	371c      	adds	r7, #28
 800b112:	46bd      	mov	sp, r7
 800b114:	bd90      	pop	{r4, r7, pc}
 800b116:	bf00      	nop
 800b118:	20000004 	.word	0x20000004
 800b11c:	10624dd3 	.word	0x10624dd3
 800b120:	fdffe008 	.word	0xfdffe008

0800b124 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b124:	b490      	push	{r4, r7}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b12c:	4b1e      	ldr	r3, [pc, #120]	; (800b1a8 <SDMMC_GetCmdResp2+0x84>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a1e      	ldr	r2, [pc, #120]	; (800b1ac <SDMMC_GetCmdResp2+0x88>)
 800b132:	fba2 2303 	umull	r2, r3, r2, r3
 800b136:	0a5b      	lsrs	r3, r3, #9
 800b138:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b140:	4623      	mov	r3, r4
 800b142:	1e5c      	subs	r4, r3, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	d102      	bne.n	800b14e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b148:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b14c:	e026      	b.n	800b19c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b152:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0f0      	beq.n	800b140 <SDMMC_GetCmdResp2+0x1c>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b164:	2b00      	cmp	r3, #0
 800b166:	d1eb      	bne.n	800b140 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16c:	f003 0304 	and.w	r3, r3, #4
 800b170:	2b00      	cmp	r3, #0
 800b172:	d004      	beq.n	800b17e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2204      	movs	r2, #4
 800b178:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b17a:	2304      	movs	r3, #4
 800b17c:	e00e      	b.n	800b19c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b00      	cmp	r3, #0
 800b188:	d004      	beq.n	800b194 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2201      	movs	r2, #1
 800b18e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b190:	2301      	movs	r3, #1
 800b192:	e003      	b.n	800b19c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	22c5      	movs	r2, #197	; 0xc5
 800b198:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bc90      	pop	{r4, r7}
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	20000004 	.word	0x20000004
 800b1ac:	10624dd3 	.word	0x10624dd3

0800b1b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b1b0:	b490      	push	{r4, r7}
 800b1b2:	b084      	sub	sp, #16
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1b8:	4b18      	ldr	r3, [pc, #96]	; (800b21c <SDMMC_GetCmdResp3+0x6c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a18      	ldr	r2, [pc, #96]	; (800b220 <SDMMC_GetCmdResp3+0x70>)
 800b1be:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c2:	0a5b      	lsrs	r3, r3, #9
 800b1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	1e5c      	subs	r4, r3, #1
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d102      	bne.n	800b1da <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1d8:	e01b      	b.n	800b212 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d0f0      	beq.n	800b1cc <SDMMC_GetCmdResp3+0x1c>
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1eb      	bne.n	800b1cc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1f8:	f003 0304 	and.w	r3, r3, #4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d004      	beq.n	800b20a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2204      	movs	r2, #4
 800b204:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b206:	2304      	movs	r3, #4
 800b208:	e003      	b.n	800b212 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	22c5      	movs	r2, #197	; 0xc5
 800b20e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bc90      	pop	{r4, r7}
 800b21a:	4770      	bx	lr
 800b21c:	20000004 	.word	0x20000004
 800b220:	10624dd3 	.word	0x10624dd3

0800b224 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b224:	b590      	push	{r4, r7, lr}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	460b      	mov	r3, r1
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b232:	4b34      	ldr	r3, [pc, #208]	; (800b304 <SDMMC_GetCmdResp6+0xe0>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a34      	ldr	r2, [pc, #208]	; (800b308 <SDMMC_GetCmdResp6+0xe4>)
 800b238:	fba2 2303 	umull	r2, r3, r2, r3
 800b23c:	0a5b      	lsrs	r3, r3, #9
 800b23e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b242:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b246:	4623      	mov	r3, r4
 800b248:	1e5c      	subs	r4, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d102      	bne.n	800b254 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b24e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b252:	e052      	b.n	800b2fa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b258:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b260:	2b00      	cmp	r3, #0
 800b262:	d0f0      	beq.n	800b246 <SDMMC_GetCmdResp6+0x22>
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1eb      	bne.n	800b246 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b272:	f003 0304 	and.w	r3, r3, #4
 800b276:	2b00      	cmp	r3, #0
 800b278:	d004      	beq.n	800b284 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2204      	movs	r2, #4
 800b27e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b280:	2304      	movs	r3, #4
 800b282:	e03a      	b.n	800b2fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d004      	beq.n	800b29a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2201      	movs	r2, #1
 800b294:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b296:	2301      	movs	r3, #1
 800b298:	e02f      	b.n	800b2fa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f7ff fd50 	bl	800ad40 <SDMMC_GetCommandResponse>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	7afb      	ldrb	r3, [r7, #11]
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d001      	beq.n	800b2ae <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e025      	b.n	800b2fa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	22c5      	movs	r2, #197	; 0xc5
 800b2b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7ff fd4f 	bl	800ad5a <SDMMC_GetResponse>
 800b2bc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d106      	bne.n	800b2d6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	0c1b      	lsrs	r3, r3, #16
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e011      	b.n	800b2fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2e4:	e009      	b.n	800b2fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2f4:	e001      	b.n	800b2fa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	371c      	adds	r7, #28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd90      	pop	{r4, r7, pc}
 800b302:	bf00      	nop
 800b304:	20000004 	.word	0x20000004
 800b308:	10624dd3 	.word	0x10624dd3

0800b30c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b310:	4904      	ldr	r1, [pc, #16]	; (800b324 <MX_FATFS_Init+0x18>)
 800b312:	4805      	ldr	r0, [pc, #20]	; (800b328 <MX_FATFS_Init+0x1c>)
 800b314:	f000 f8b0 	bl	800b478 <FATFS_LinkDriver>
 800b318:	4603      	mov	r3, r0
 800b31a:	461a      	mov	r2, r3
 800b31c:	4b03      	ldr	r3, [pc, #12]	; (800b32c <MX_FATFS_Init+0x20>)
 800b31e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800b320:	bf00      	nop
 800b322:	bd80      	pop	{r7, pc}
 800b324:	2000103c 	.word	0x2000103c
 800b328:	20000010 	.word	0x20000010
 800b32c:	20001040 	.word	0x20001040

0800b330 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	4603      	mov	r3, r0
 800b338:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800b33a:	4b06      	ldr	r3, [pc, #24]	; (800b354 <USER_initialize+0x24>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b340:	4b04      	ldr	r3, [pc, #16]	; (800b354 <USER_initialize+0x24>)
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800b346:	4618      	mov	r0, r3
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	2000000d 	.word	0x2000000d

0800b358 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800b362:	4b06      	ldr	r3, [pc, #24]	; (800b37c <USER_status+0x24>)
 800b364:	2201      	movs	r2, #1
 800b366:	701a      	strb	r2, [r3, #0]
    return Stat;
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <USER_status+0x24>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	2000000d 	.word	0x2000000d

0800b380 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	607a      	str	r2, [r7, #4]
 800b38a:	603b      	str	r3, [r7, #0]
 800b38c:	4603      	mov	r3, r0
 800b38e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800b390:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
 800b3a8:	603b      	str	r3, [r7, #0]
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800b3ae:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	603a      	str	r2, [r7, #0]
 800b3c6:	71fb      	strb	r3, [r7, #7]
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	73fb      	strb	r3, [r7, #15]
    return res;
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3f6:	4b1f      	ldr	r3, [pc, #124]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b3f8:	7b9b      	ldrb	r3, [r3, #14]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d831      	bhi.n	800b464 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b400:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b402:	7b9b      	ldrb	r3, [r3, #14]
 800b404:	b2db      	uxtb	r3, r3
 800b406:	461a      	mov	r2, r3
 800b408:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b40a:	2100      	movs	r1, #0
 800b40c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b40e:	4b19      	ldr	r3, [pc, #100]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b410:	7b9b      	ldrb	r3, [r3, #14]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	4a17      	ldr	r2, [pc, #92]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	4413      	add	r3, r2
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b41e:	4b15      	ldr	r3, [pc, #84]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b420:	7b9b      	ldrb	r3, [r3, #14]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	461a      	mov	r2, r3
 800b426:	4b13      	ldr	r3, [pc, #76]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b428:	4413      	add	r3, r2
 800b42a:	79fa      	ldrb	r2, [r7, #7]
 800b42c:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800b42e:	4b11      	ldr	r3, [pc, #68]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b430:	7b9b      	ldrb	r3, [r3, #14]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	b2d1      	uxtb	r1, r2
 800b438:	4a0e      	ldr	r2, [pc, #56]	; (800b474 <FATFS_LinkDriverEx+0x94>)
 800b43a:	7391      	strb	r1, [r2, #14]
 800b43c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b43e:	7dbb      	ldrb	r3, [r7, #22]
 800b440:	3330      	adds	r3, #48	; 0x30
 800b442:	b2da      	uxtb	r2, r3
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3301      	adds	r3, #1
 800b44c:	223a      	movs	r2, #58	; 0x3a
 800b44e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	3302      	adds	r3, #2
 800b454:	222f      	movs	r2, #47	; 0x2f
 800b456:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3303      	adds	r3, #3
 800b45c:	2200      	movs	r2, #0
 800b45e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b464:	7dfb      	ldrb	r3, [r7, #23]
}
 800b466:	4618      	mov	r0, r3
 800b468:	371c      	adds	r7, #28
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	20000b40 	.word	0x20000b40

0800b478 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b482:	2200      	movs	r2, #0
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7ff ffaa 	bl	800b3e0 <FATFS_LinkDriverEx>
 800b48c:	4603      	mov	r3, r0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <__errno>:
 800b498:	4b01      	ldr	r3, [pc, #4]	; (800b4a0 <__errno+0x8>)
 800b49a:	6818      	ldr	r0, [r3, #0]
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	20000024 	.word	0x20000024

0800b4a4 <__libc_init_array>:
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	4e0d      	ldr	r6, [pc, #52]	; (800b4dc <__libc_init_array+0x38>)
 800b4a8:	4c0d      	ldr	r4, [pc, #52]	; (800b4e0 <__libc_init_array+0x3c>)
 800b4aa:	1ba4      	subs	r4, r4, r6
 800b4ac:	10a4      	asrs	r4, r4, #2
 800b4ae:	2500      	movs	r5, #0
 800b4b0:	42a5      	cmp	r5, r4
 800b4b2:	d109      	bne.n	800b4c8 <__libc_init_array+0x24>
 800b4b4:	4e0b      	ldr	r6, [pc, #44]	; (800b4e4 <__libc_init_array+0x40>)
 800b4b6:	4c0c      	ldr	r4, [pc, #48]	; (800b4e8 <__libc_init_array+0x44>)
 800b4b8:	f003 fc90 	bl	800eddc <_init>
 800b4bc:	1ba4      	subs	r4, r4, r6
 800b4be:	10a4      	asrs	r4, r4, #2
 800b4c0:	2500      	movs	r5, #0
 800b4c2:	42a5      	cmp	r5, r4
 800b4c4:	d105      	bne.n	800b4d2 <__libc_init_array+0x2e>
 800b4c6:	bd70      	pop	{r4, r5, r6, pc}
 800b4c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4cc:	4798      	blx	r3
 800b4ce:	3501      	adds	r5, #1
 800b4d0:	e7ee      	b.n	800b4b0 <__libc_init_array+0xc>
 800b4d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b4d6:	4798      	blx	r3
 800b4d8:	3501      	adds	r5, #1
 800b4da:	e7f2      	b.n	800b4c2 <__libc_init_array+0x1e>
 800b4dc:	0800f1a8 	.word	0x0800f1a8
 800b4e0:	0800f1a8 	.word	0x0800f1a8
 800b4e4:	0800f1a8 	.word	0x0800f1a8
 800b4e8:	0800f1ac 	.word	0x0800f1ac

0800b4ec <memset>:
 800b4ec:	4402      	add	r2, r0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d100      	bne.n	800b4f6 <memset+0xa>
 800b4f4:	4770      	bx	lr
 800b4f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b4fa:	e7f9      	b.n	800b4f0 <memset+0x4>

0800b4fc <__cvt>:
 800b4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4fe:	ed2d 8b02 	vpush	{d8}
 800b502:	eeb0 8b40 	vmov.f64	d8, d0
 800b506:	b085      	sub	sp, #20
 800b508:	4617      	mov	r7, r2
 800b50a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b50c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b50e:	ee18 2a90 	vmov	r2, s17
 800b512:	f025 0520 	bic.w	r5, r5, #32
 800b516:	2a00      	cmp	r2, #0
 800b518:	bfb6      	itet	lt
 800b51a:	222d      	movlt	r2, #45	; 0x2d
 800b51c:	2200      	movge	r2, #0
 800b51e:	eeb1 8b40 	vneglt.f64	d8, d0
 800b522:	2d46      	cmp	r5, #70	; 0x46
 800b524:	460c      	mov	r4, r1
 800b526:	701a      	strb	r2, [r3, #0]
 800b528:	d004      	beq.n	800b534 <__cvt+0x38>
 800b52a:	2d45      	cmp	r5, #69	; 0x45
 800b52c:	d100      	bne.n	800b530 <__cvt+0x34>
 800b52e:	3401      	adds	r4, #1
 800b530:	2102      	movs	r1, #2
 800b532:	e000      	b.n	800b536 <__cvt+0x3a>
 800b534:	2103      	movs	r1, #3
 800b536:	ab03      	add	r3, sp, #12
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	ab02      	add	r3, sp, #8
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	4622      	mov	r2, r4
 800b540:	4633      	mov	r3, r6
 800b542:	eeb0 0b48 	vmov.f64	d0, d8
 800b546:	f001 fd1f 	bl	800cf88 <_dtoa_r>
 800b54a:	2d47      	cmp	r5, #71	; 0x47
 800b54c:	d101      	bne.n	800b552 <__cvt+0x56>
 800b54e:	07fb      	lsls	r3, r7, #31
 800b550:	d51e      	bpl.n	800b590 <__cvt+0x94>
 800b552:	2d46      	cmp	r5, #70	; 0x46
 800b554:	eb00 0304 	add.w	r3, r0, r4
 800b558:	d10c      	bne.n	800b574 <__cvt+0x78>
 800b55a:	7802      	ldrb	r2, [r0, #0]
 800b55c:	2a30      	cmp	r2, #48	; 0x30
 800b55e:	d107      	bne.n	800b570 <__cvt+0x74>
 800b560:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b568:	bf1c      	itt	ne
 800b56a:	f1c4 0401 	rsbne	r4, r4, #1
 800b56e:	6034      	strne	r4, [r6, #0]
 800b570:	6832      	ldr	r2, [r6, #0]
 800b572:	4413      	add	r3, r2
 800b574:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b57c:	d007      	beq.n	800b58e <__cvt+0x92>
 800b57e:	2130      	movs	r1, #48	; 0x30
 800b580:	9a03      	ldr	r2, [sp, #12]
 800b582:	429a      	cmp	r2, r3
 800b584:	d204      	bcs.n	800b590 <__cvt+0x94>
 800b586:	1c54      	adds	r4, r2, #1
 800b588:	9403      	str	r4, [sp, #12]
 800b58a:	7011      	strb	r1, [r2, #0]
 800b58c:	e7f8      	b.n	800b580 <__cvt+0x84>
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b594:	1a1b      	subs	r3, r3, r0
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	b005      	add	sp, #20
 800b59a:	ecbd 8b02 	vpop	{d8}
 800b59e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5a0 <__exponent>:
 800b5a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5a2:	2900      	cmp	r1, #0
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	bfba      	itte	lt
 800b5a8:	4249      	neglt	r1, r1
 800b5aa:	232d      	movlt	r3, #45	; 0x2d
 800b5ac:	232b      	movge	r3, #43	; 0x2b
 800b5ae:	2909      	cmp	r1, #9
 800b5b0:	f804 2b02 	strb.w	r2, [r4], #2
 800b5b4:	7043      	strb	r3, [r0, #1]
 800b5b6:	dd20      	ble.n	800b5fa <__exponent+0x5a>
 800b5b8:	f10d 0307 	add.w	r3, sp, #7
 800b5bc:	461f      	mov	r7, r3
 800b5be:	260a      	movs	r6, #10
 800b5c0:	fb91 f5f6 	sdiv	r5, r1, r6
 800b5c4:	fb06 1115 	mls	r1, r6, r5, r1
 800b5c8:	3130      	adds	r1, #48	; 0x30
 800b5ca:	2d09      	cmp	r5, #9
 800b5cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b5d0:	f103 32ff 	add.w	r2, r3, #4294967295
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	dc09      	bgt.n	800b5ec <__exponent+0x4c>
 800b5d8:	3130      	adds	r1, #48	; 0x30
 800b5da:	3b02      	subs	r3, #2
 800b5dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b5e0:	42bb      	cmp	r3, r7
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	d304      	bcc.n	800b5f0 <__exponent+0x50>
 800b5e6:	1a10      	subs	r0, r2, r0
 800b5e8:	b003      	add	sp, #12
 800b5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	e7e7      	b.n	800b5c0 <__exponent+0x20>
 800b5f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5f4:	f804 2b01 	strb.w	r2, [r4], #1
 800b5f8:	e7f2      	b.n	800b5e0 <__exponent+0x40>
 800b5fa:	2330      	movs	r3, #48	; 0x30
 800b5fc:	4419      	add	r1, r3
 800b5fe:	7083      	strb	r3, [r0, #2]
 800b600:	1d02      	adds	r2, r0, #4
 800b602:	70c1      	strb	r1, [r0, #3]
 800b604:	e7ef      	b.n	800b5e6 <__exponent+0x46>
	...

0800b608 <_printf_float>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	b08d      	sub	sp, #52	; 0x34
 800b60e:	460c      	mov	r4, r1
 800b610:	4616      	mov	r6, r2
 800b612:	461f      	mov	r7, r3
 800b614:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b618:	4605      	mov	r5, r0
 800b61a:	f002 fd2d 	bl	800e078 <_localeconv_r>
 800b61e:	f8d0 b000 	ldr.w	fp, [r0]
 800b622:	4658      	mov	r0, fp
 800b624:	f7f4 fe0c 	bl	8000240 <strlen>
 800b628:	2300      	movs	r3, #0
 800b62a:	930a      	str	r3, [sp, #40]	; 0x28
 800b62c:	f8d8 3000 	ldr.w	r3, [r8]
 800b630:	9005      	str	r0, [sp, #20]
 800b632:	3307      	adds	r3, #7
 800b634:	f023 0307 	bic.w	r3, r3, #7
 800b638:	f103 0108 	add.w	r1, r3, #8
 800b63c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b640:	6822      	ldr	r2, [r4, #0]
 800b642:	f8c8 1000 	str.w	r1, [r8]
 800b646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b64a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b64e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800b8d8 <_printf_float+0x2d0>
 800b652:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b656:	eeb0 6bc0 	vabs.f64	d6, d0
 800b65a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b662:	dd24      	ble.n	800b6ae <_printf_float+0xa6>
 800b664:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b66c:	d502      	bpl.n	800b674 <_printf_float+0x6c>
 800b66e:	232d      	movs	r3, #45	; 0x2d
 800b670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b674:	499a      	ldr	r1, [pc, #616]	; (800b8e0 <_printf_float+0x2d8>)
 800b676:	4b9b      	ldr	r3, [pc, #620]	; (800b8e4 <_printf_float+0x2dc>)
 800b678:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b67c:	bf8c      	ite	hi
 800b67e:	4688      	movhi	r8, r1
 800b680:	4698      	movls	r8, r3
 800b682:	f022 0204 	bic.w	r2, r2, #4
 800b686:	2303      	movs	r3, #3
 800b688:	6123      	str	r3, [r4, #16]
 800b68a:	6022      	str	r2, [r4, #0]
 800b68c:	f04f 0a00 	mov.w	sl, #0
 800b690:	9700      	str	r7, [sp, #0]
 800b692:	4633      	mov	r3, r6
 800b694:	aa0b      	add	r2, sp, #44	; 0x2c
 800b696:	4621      	mov	r1, r4
 800b698:	4628      	mov	r0, r5
 800b69a:	f000 f9e1 	bl	800ba60 <_printf_common>
 800b69e:	3001      	adds	r0, #1
 800b6a0:	f040 8089 	bne.w	800b7b6 <_printf_float+0x1ae>
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a8:	b00d      	add	sp, #52	; 0x34
 800b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ae:	eeb4 0b40 	vcmp.f64	d0, d0
 800b6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b6:	d702      	bvc.n	800b6be <_printf_float+0xb6>
 800b6b8:	498b      	ldr	r1, [pc, #556]	; (800b8e8 <_printf_float+0x2e0>)
 800b6ba:	4b8c      	ldr	r3, [pc, #560]	; (800b8ec <_printf_float+0x2e4>)
 800b6bc:	e7dc      	b.n	800b678 <_printf_float+0x70>
 800b6be:	6861      	ldr	r1, [r4, #4]
 800b6c0:	1c4b      	adds	r3, r1, #1
 800b6c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6c6:	ab0a      	add	r3, sp, #40	; 0x28
 800b6c8:	a809      	add	r0, sp, #36	; 0x24
 800b6ca:	d13b      	bne.n	800b744 <_printf_float+0x13c>
 800b6cc:	2106      	movs	r1, #6
 800b6ce:	6061      	str	r1, [r4, #4]
 800b6d0:	f04f 0c00 	mov.w	ip, #0
 800b6d4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b6d8:	e9cd 0900 	strd	r0, r9, [sp]
 800b6dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b6e0:	6022      	str	r2, [r4, #0]
 800b6e2:	6861      	ldr	r1, [r4, #4]
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f7ff ff09 	bl	800b4fc <__cvt>
 800b6ea:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b6ee:	2b47      	cmp	r3, #71	; 0x47
 800b6f0:	4680      	mov	r8, r0
 800b6f2:	d109      	bne.n	800b708 <_printf_float+0x100>
 800b6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6f6:	1cd8      	adds	r0, r3, #3
 800b6f8:	db02      	blt.n	800b700 <_printf_float+0xf8>
 800b6fa:	6862      	ldr	r2, [r4, #4]
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	dd47      	ble.n	800b790 <_printf_float+0x188>
 800b700:	f1a9 0902 	sub.w	r9, r9, #2
 800b704:	fa5f f989 	uxtb.w	r9, r9
 800b708:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b70c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b70e:	d824      	bhi.n	800b75a <_printf_float+0x152>
 800b710:	3901      	subs	r1, #1
 800b712:	464a      	mov	r2, r9
 800b714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b718:	9109      	str	r1, [sp, #36]	; 0x24
 800b71a:	f7ff ff41 	bl	800b5a0 <__exponent>
 800b71e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b720:	1813      	adds	r3, r2, r0
 800b722:	2a01      	cmp	r2, #1
 800b724:	4682      	mov	sl, r0
 800b726:	6123      	str	r3, [r4, #16]
 800b728:	dc02      	bgt.n	800b730 <_printf_float+0x128>
 800b72a:	6822      	ldr	r2, [r4, #0]
 800b72c:	07d1      	lsls	r1, r2, #31
 800b72e:	d501      	bpl.n	800b734 <_printf_float+0x12c>
 800b730:	3301      	adds	r3, #1
 800b732:	6123      	str	r3, [r4, #16]
 800b734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d0a9      	beq.n	800b690 <_printf_float+0x88>
 800b73c:	232d      	movs	r3, #45	; 0x2d
 800b73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b742:	e7a5      	b.n	800b690 <_printf_float+0x88>
 800b744:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800b748:	f000 8178 	beq.w	800ba3c <_printf_float+0x434>
 800b74c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b750:	d1be      	bne.n	800b6d0 <_printf_float+0xc8>
 800b752:	2900      	cmp	r1, #0
 800b754:	d1bc      	bne.n	800b6d0 <_printf_float+0xc8>
 800b756:	2101      	movs	r1, #1
 800b758:	e7b9      	b.n	800b6ce <_printf_float+0xc6>
 800b75a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b75e:	d119      	bne.n	800b794 <_printf_float+0x18c>
 800b760:	2900      	cmp	r1, #0
 800b762:	6863      	ldr	r3, [r4, #4]
 800b764:	dd0c      	ble.n	800b780 <_printf_float+0x178>
 800b766:	6121      	str	r1, [r4, #16]
 800b768:	b913      	cbnz	r3, 800b770 <_printf_float+0x168>
 800b76a:	6822      	ldr	r2, [r4, #0]
 800b76c:	07d2      	lsls	r2, r2, #31
 800b76e:	d502      	bpl.n	800b776 <_printf_float+0x16e>
 800b770:	3301      	adds	r3, #1
 800b772:	440b      	add	r3, r1
 800b774:	6123      	str	r3, [r4, #16]
 800b776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b778:	65a3      	str	r3, [r4, #88]	; 0x58
 800b77a:	f04f 0a00 	mov.w	sl, #0
 800b77e:	e7d9      	b.n	800b734 <_printf_float+0x12c>
 800b780:	b913      	cbnz	r3, 800b788 <_printf_float+0x180>
 800b782:	6822      	ldr	r2, [r4, #0]
 800b784:	07d0      	lsls	r0, r2, #31
 800b786:	d501      	bpl.n	800b78c <_printf_float+0x184>
 800b788:	3302      	adds	r3, #2
 800b78a:	e7f3      	b.n	800b774 <_printf_float+0x16c>
 800b78c:	2301      	movs	r3, #1
 800b78e:	e7f1      	b.n	800b774 <_printf_float+0x16c>
 800b790:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b794:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b798:	4293      	cmp	r3, r2
 800b79a:	db05      	blt.n	800b7a8 <_printf_float+0x1a0>
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	6123      	str	r3, [r4, #16]
 800b7a0:	07d1      	lsls	r1, r2, #31
 800b7a2:	d5e8      	bpl.n	800b776 <_printf_float+0x16e>
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	e7e5      	b.n	800b774 <_printf_float+0x16c>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	bfd4      	ite	le
 800b7ac:	f1c3 0302 	rsble	r3, r3, #2
 800b7b0:	2301      	movgt	r3, #1
 800b7b2:	4413      	add	r3, r2
 800b7b4:	e7de      	b.n	800b774 <_printf_float+0x16c>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	055a      	lsls	r2, r3, #21
 800b7ba:	d407      	bmi.n	800b7cc <_printf_float+0x1c4>
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	4642      	mov	r2, r8
 800b7c0:	4631      	mov	r1, r6
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	47b8      	blx	r7
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	d12a      	bne.n	800b820 <_printf_float+0x218>
 800b7ca:	e76b      	b.n	800b6a4 <_printf_float+0x9c>
 800b7cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b7d0:	f240 80de 	bls.w	800b990 <_printf_float+0x388>
 800b7d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b7d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e0:	d133      	bne.n	800b84a <_printf_float+0x242>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	4a42      	ldr	r2, [pc, #264]	; (800b8f0 <_printf_float+0x2e8>)
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b8      	blx	r7
 800b7ec:	3001      	adds	r0, #1
 800b7ee:	f43f af59 	beq.w	800b6a4 <_printf_float+0x9c>
 800b7f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	db02      	blt.n	800b800 <_printf_float+0x1f8>
 800b7fa:	6823      	ldr	r3, [r4, #0]
 800b7fc:	07d8      	lsls	r0, r3, #31
 800b7fe:	d50f      	bpl.n	800b820 <_printf_float+0x218>
 800b800:	9b05      	ldr	r3, [sp, #20]
 800b802:	465a      	mov	r2, fp
 800b804:	4631      	mov	r1, r6
 800b806:	4628      	mov	r0, r5
 800b808:	47b8      	blx	r7
 800b80a:	3001      	adds	r0, #1
 800b80c:	f43f af4a 	beq.w	800b6a4 <_printf_float+0x9c>
 800b810:	f04f 0800 	mov.w	r8, #0
 800b814:	f104 091a 	add.w	r9, r4, #26
 800b818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b81a:	3b01      	subs	r3, #1
 800b81c:	4543      	cmp	r3, r8
 800b81e:	dc09      	bgt.n	800b834 <_printf_float+0x22c>
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	079b      	lsls	r3, r3, #30
 800b824:	f100 8105 	bmi.w	800ba32 <_printf_float+0x42a>
 800b828:	68e0      	ldr	r0, [r4, #12]
 800b82a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82c:	4298      	cmp	r0, r3
 800b82e:	bfb8      	it	lt
 800b830:	4618      	movlt	r0, r3
 800b832:	e739      	b.n	800b6a8 <_printf_float+0xa0>
 800b834:	2301      	movs	r3, #1
 800b836:	464a      	mov	r2, r9
 800b838:	4631      	mov	r1, r6
 800b83a:	4628      	mov	r0, r5
 800b83c:	47b8      	blx	r7
 800b83e:	3001      	adds	r0, #1
 800b840:	f43f af30 	beq.w	800b6a4 <_printf_float+0x9c>
 800b844:	f108 0801 	add.w	r8, r8, #1
 800b848:	e7e6      	b.n	800b818 <_printf_float+0x210>
 800b84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dc2b      	bgt.n	800b8a8 <_printf_float+0x2a0>
 800b850:	2301      	movs	r3, #1
 800b852:	4a27      	ldr	r2, [pc, #156]	; (800b8f0 <_printf_float+0x2e8>)
 800b854:	4631      	mov	r1, r6
 800b856:	4628      	mov	r0, r5
 800b858:	47b8      	blx	r7
 800b85a:	3001      	adds	r0, #1
 800b85c:	f43f af22 	beq.w	800b6a4 <_printf_float+0x9c>
 800b860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b862:	b923      	cbnz	r3, 800b86e <_printf_float+0x266>
 800b864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b866:	b913      	cbnz	r3, 800b86e <_printf_float+0x266>
 800b868:	6823      	ldr	r3, [r4, #0]
 800b86a:	07d9      	lsls	r1, r3, #31
 800b86c:	d5d8      	bpl.n	800b820 <_printf_float+0x218>
 800b86e:	9b05      	ldr	r3, [sp, #20]
 800b870:	465a      	mov	r2, fp
 800b872:	4631      	mov	r1, r6
 800b874:	4628      	mov	r0, r5
 800b876:	47b8      	blx	r7
 800b878:	3001      	adds	r0, #1
 800b87a:	f43f af13 	beq.w	800b6a4 <_printf_float+0x9c>
 800b87e:	f04f 0900 	mov.w	r9, #0
 800b882:	f104 0a1a 	add.w	sl, r4, #26
 800b886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b888:	425b      	negs	r3, r3
 800b88a:	454b      	cmp	r3, r9
 800b88c:	dc01      	bgt.n	800b892 <_printf_float+0x28a>
 800b88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b890:	e795      	b.n	800b7be <_printf_float+0x1b6>
 800b892:	2301      	movs	r3, #1
 800b894:	4652      	mov	r2, sl
 800b896:	4631      	mov	r1, r6
 800b898:	4628      	mov	r0, r5
 800b89a:	47b8      	blx	r7
 800b89c:	3001      	adds	r0, #1
 800b89e:	f43f af01 	beq.w	800b6a4 <_printf_float+0x9c>
 800b8a2:	f109 0901 	add.w	r9, r9, #1
 800b8a6:	e7ee      	b.n	800b886 <_printf_float+0x27e>
 800b8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	bfa8      	it	ge
 800b8b0:	461a      	movge	r2, r3
 800b8b2:	2a00      	cmp	r2, #0
 800b8b4:	4691      	mov	r9, r2
 800b8b6:	dd07      	ble.n	800b8c8 <_printf_float+0x2c0>
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4642      	mov	r2, r8
 800b8be:	4628      	mov	r0, r5
 800b8c0:	47b8      	blx	r7
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	f43f aeee 	beq.w	800b6a4 <_printf_float+0x9c>
 800b8c8:	f104 031a 	add.w	r3, r4, #26
 800b8cc:	f04f 0a00 	mov.w	sl, #0
 800b8d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b8d4:	9307      	str	r3, [sp, #28]
 800b8d6:	e017      	b.n	800b908 <_printf_float+0x300>
 800b8d8:	ffffffff 	.word	0xffffffff
 800b8dc:	7fefffff 	.word	0x7fefffff
 800b8e0:	0800eeec 	.word	0x0800eeec
 800b8e4:	0800eee8 	.word	0x0800eee8
 800b8e8:	0800eef4 	.word	0x0800eef4
 800b8ec:	0800eef0 	.word	0x0800eef0
 800b8f0:	0800eef8 	.word	0x0800eef8
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	9a07      	ldr	r2, [sp, #28]
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	47b8      	blx	r7
 800b8fe:	3001      	adds	r0, #1
 800b900:	f43f aed0 	beq.w	800b6a4 <_printf_float+0x9c>
 800b904:	f10a 0a01 	add.w	sl, sl, #1
 800b908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b90a:	9306      	str	r3, [sp, #24]
 800b90c:	eba3 0309 	sub.w	r3, r3, r9
 800b910:	4553      	cmp	r3, sl
 800b912:	dcef      	bgt.n	800b8f4 <_printf_float+0x2ec>
 800b914:	9b06      	ldr	r3, [sp, #24]
 800b916:	4498      	add	r8, r3
 800b918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b91c:	429a      	cmp	r2, r3
 800b91e:	db15      	blt.n	800b94c <_printf_float+0x344>
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	07da      	lsls	r2, r3, #31
 800b924:	d412      	bmi.n	800b94c <_printf_float+0x344>
 800b926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b928:	9a06      	ldr	r2, [sp, #24]
 800b92a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b92c:	1a9a      	subs	r2, r3, r2
 800b92e:	eba3 0a01 	sub.w	sl, r3, r1
 800b932:	4592      	cmp	sl, r2
 800b934:	bfa8      	it	ge
 800b936:	4692      	movge	sl, r2
 800b938:	f1ba 0f00 	cmp.w	sl, #0
 800b93c:	dc0e      	bgt.n	800b95c <_printf_float+0x354>
 800b93e:	f04f 0800 	mov.w	r8, #0
 800b942:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b946:	f104 091a 	add.w	r9, r4, #26
 800b94a:	e019      	b.n	800b980 <_printf_float+0x378>
 800b94c:	9b05      	ldr	r3, [sp, #20]
 800b94e:	465a      	mov	r2, fp
 800b950:	4631      	mov	r1, r6
 800b952:	4628      	mov	r0, r5
 800b954:	47b8      	blx	r7
 800b956:	3001      	adds	r0, #1
 800b958:	d1e5      	bne.n	800b926 <_printf_float+0x31e>
 800b95a:	e6a3      	b.n	800b6a4 <_printf_float+0x9c>
 800b95c:	4653      	mov	r3, sl
 800b95e:	4642      	mov	r2, r8
 800b960:	4631      	mov	r1, r6
 800b962:	4628      	mov	r0, r5
 800b964:	47b8      	blx	r7
 800b966:	3001      	adds	r0, #1
 800b968:	d1e9      	bne.n	800b93e <_printf_float+0x336>
 800b96a:	e69b      	b.n	800b6a4 <_printf_float+0x9c>
 800b96c:	2301      	movs	r3, #1
 800b96e:	464a      	mov	r2, r9
 800b970:	4631      	mov	r1, r6
 800b972:	4628      	mov	r0, r5
 800b974:	47b8      	blx	r7
 800b976:	3001      	adds	r0, #1
 800b978:	f43f ae94 	beq.w	800b6a4 <_printf_float+0x9c>
 800b97c:	f108 0801 	add.w	r8, r8, #1
 800b980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b984:	1a9b      	subs	r3, r3, r2
 800b986:	eba3 030a 	sub.w	r3, r3, sl
 800b98a:	4543      	cmp	r3, r8
 800b98c:	dcee      	bgt.n	800b96c <_printf_float+0x364>
 800b98e:	e747      	b.n	800b820 <_printf_float+0x218>
 800b990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b992:	2a01      	cmp	r2, #1
 800b994:	dc01      	bgt.n	800b99a <_printf_float+0x392>
 800b996:	07db      	lsls	r3, r3, #31
 800b998:	d539      	bpl.n	800ba0e <_printf_float+0x406>
 800b99a:	2301      	movs	r3, #1
 800b99c:	4642      	mov	r2, r8
 800b99e:	4631      	mov	r1, r6
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	47b8      	blx	r7
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	f43f ae7d 	beq.w	800b6a4 <_printf_float+0x9c>
 800b9aa:	9b05      	ldr	r3, [sp, #20]
 800b9ac:	465a      	mov	r2, fp
 800b9ae:	4631      	mov	r1, r6
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	47b8      	blx	r7
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	f108 0801 	add.w	r8, r8, #1
 800b9ba:	f43f ae73 	beq.w	800b6a4 <_printf_float+0x9c>
 800b9be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9cc:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9d0:	d018      	beq.n	800ba04 <_printf_float+0x3fc>
 800b9d2:	4642      	mov	r2, r8
 800b9d4:	4631      	mov	r1, r6
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	47b8      	blx	r7
 800b9da:	3001      	adds	r0, #1
 800b9dc:	d10e      	bne.n	800b9fc <_printf_float+0x3f4>
 800b9de:	e661      	b.n	800b6a4 <_printf_float+0x9c>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	464a      	mov	r2, r9
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b8      	blx	r7
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	f43f ae5a 	beq.w	800b6a4 <_printf_float+0x9c>
 800b9f0:	f108 0801 	add.w	r8, r8, #1
 800b9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	4543      	cmp	r3, r8
 800b9fa:	dcf1      	bgt.n	800b9e0 <_printf_float+0x3d8>
 800b9fc:	4653      	mov	r3, sl
 800b9fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba02:	e6dd      	b.n	800b7c0 <_printf_float+0x1b8>
 800ba04:	f04f 0800 	mov.w	r8, #0
 800ba08:	f104 091a 	add.w	r9, r4, #26
 800ba0c:	e7f2      	b.n	800b9f4 <_printf_float+0x3ec>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e7df      	b.n	800b9d2 <_printf_float+0x3ca>
 800ba12:	2301      	movs	r3, #1
 800ba14:	464a      	mov	r2, r9
 800ba16:	4631      	mov	r1, r6
 800ba18:	4628      	mov	r0, r5
 800ba1a:	47b8      	blx	r7
 800ba1c:	3001      	adds	r0, #1
 800ba1e:	f43f ae41 	beq.w	800b6a4 <_printf_float+0x9c>
 800ba22:	f108 0801 	add.w	r8, r8, #1
 800ba26:	68e3      	ldr	r3, [r4, #12]
 800ba28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba2a:	1a9b      	subs	r3, r3, r2
 800ba2c:	4543      	cmp	r3, r8
 800ba2e:	dcf0      	bgt.n	800ba12 <_printf_float+0x40a>
 800ba30:	e6fa      	b.n	800b828 <_printf_float+0x220>
 800ba32:	f04f 0800 	mov.w	r8, #0
 800ba36:	f104 0919 	add.w	r9, r4, #25
 800ba3a:	e7f4      	b.n	800ba26 <_printf_float+0x41e>
 800ba3c:	2900      	cmp	r1, #0
 800ba3e:	f43f ae8a 	beq.w	800b756 <_printf_float+0x14e>
 800ba42:	f04f 0c00 	mov.w	ip, #0
 800ba46:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800ba4a:	e9cd 0900 	strd	r0, r9, [sp]
 800ba4e:	6022      	str	r2, [r4, #0]
 800ba50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba54:	4628      	mov	r0, r5
 800ba56:	f7ff fd51 	bl	800b4fc <__cvt>
 800ba5a:	4680      	mov	r8, r0
 800ba5c:	e64a      	b.n	800b6f4 <_printf_float+0xec>
 800ba5e:	bf00      	nop

0800ba60 <_printf_common>:
 800ba60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba64:	4691      	mov	r9, r2
 800ba66:	461f      	mov	r7, r3
 800ba68:	688a      	ldr	r2, [r1, #8]
 800ba6a:	690b      	ldr	r3, [r1, #16]
 800ba6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba70:	4293      	cmp	r3, r2
 800ba72:	bfb8      	it	lt
 800ba74:	4613      	movlt	r3, r2
 800ba76:	f8c9 3000 	str.w	r3, [r9]
 800ba7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460c      	mov	r4, r1
 800ba82:	b112      	cbz	r2, 800ba8a <_printf_common+0x2a>
 800ba84:	3301      	adds	r3, #1
 800ba86:	f8c9 3000 	str.w	r3, [r9]
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	0699      	lsls	r1, r3, #26
 800ba8e:	bf42      	ittt	mi
 800ba90:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ba94:	3302      	addmi	r3, #2
 800ba96:	f8c9 3000 	strmi.w	r3, [r9]
 800ba9a:	6825      	ldr	r5, [r4, #0]
 800ba9c:	f015 0506 	ands.w	r5, r5, #6
 800baa0:	d107      	bne.n	800bab2 <_printf_common+0x52>
 800baa2:	f104 0a19 	add.w	sl, r4, #25
 800baa6:	68e3      	ldr	r3, [r4, #12]
 800baa8:	f8d9 2000 	ldr.w	r2, [r9]
 800baac:	1a9b      	subs	r3, r3, r2
 800baae:	42ab      	cmp	r3, r5
 800bab0:	dc28      	bgt.n	800bb04 <_printf_common+0xa4>
 800bab2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bab6:	6822      	ldr	r2, [r4, #0]
 800bab8:	3300      	adds	r3, #0
 800baba:	bf18      	it	ne
 800babc:	2301      	movne	r3, #1
 800babe:	0692      	lsls	r2, r2, #26
 800bac0:	d42d      	bmi.n	800bb1e <_printf_common+0xbe>
 800bac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bac6:	4639      	mov	r1, r7
 800bac8:	4630      	mov	r0, r6
 800baca:	47c0      	blx	r8
 800bacc:	3001      	adds	r0, #1
 800bace:	d020      	beq.n	800bb12 <_printf_common+0xb2>
 800bad0:	6823      	ldr	r3, [r4, #0]
 800bad2:	68e5      	ldr	r5, [r4, #12]
 800bad4:	f8d9 2000 	ldr.w	r2, [r9]
 800bad8:	f003 0306 	and.w	r3, r3, #6
 800badc:	2b04      	cmp	r3, #4
 800bade:	bf08      	it	eq
 800bae0:	1aad      	subeq	r5, r5, r2
 800bae2:	68a3      	ldr	r3, [r4, #8]
 800bae4:	6922      	ldr	r2, [r4, #16]
 800bae6:	bf0c      	ite	eq
 800bae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baec:	2500      	movne	r5, #0
 800baee:	4293      	cmp	r3, r2
 800baf0:	bfc4      	itt	gt
 800baf2:	1a9b      	subgt	r3, r3, r2
 800baf4:	18ed      	addgt	r5, r5, r3
 800baf6:	f04f 0900 	mov.w	r9, #0
 800bafa:	341a      	adds	r4, #26
 800bafc:	454d      	cmp	r5, r9
 800bafe:	d11a      	bne.n	800bb36 <_printf_common+0xd6>
 800bb00:	2000      	movs	r0, #0
 800bb02:	e008      	b.n	800bb16 <_printf_common+0xb6>
 800bb04:	2301      	movs	r3, #1
 800bb06:	4652      	mov	r2, sl
 800bb08:	4639      	mov	r1, r7
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	47c0      	blx	r8
 800bb0e:	3001      	adds	r0, #1
 800bb10:	d103      	bne.n	800bb1a <_printf_common+0xba>
 800bb12:	f04f 30ff 	mov.w	r0, #4294967295
 800bb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb1a:	3501      	adds	r5, #1
 800bb1c:	e7c3      	b.n	800baa6 <_printf_common+0x46>
 800bb1e:	18e1      	adds	r1, r4, r3
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	2030      	movs	r0, #48	; 0x30
 800bb24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb28:	4422      	add	r2, r4
 800bb2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb32:	3302      	adds	r3, #2
 800bb34:	e7c5      	b.n	800bac2 <_printf_common+0x62>
 800bb36:	2301      	movs	r3, #1
 800bb38:	4622      	mov	r2, r4
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	47c0      	blx	r8
 800bb40:	3001      	adds	r0, #1
 800bb42:	d0e6      	beq.n	800bb12 <_printf_common+0xb2>
 800bb44:	f109 0901 	add.w	r9, r9, #1
 800bb48:	e7d8      	b.n	800bafc <_printf_common+0x9c>
	...

0800bb4c <_printf_i>:
 800bb4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bb54:	460c      	mov	r4, r1
 800bb56:	7e09      	ldrb	r1, [r1, #24]
 800bb58:	b085      	sub	sp, #20
 800bb5a:	296e      	cmp	r1, #110	; 0x6e
 800bb5c:	4617      	mov	r7, r2
 800bb5e:	4606      	mov	r6, r0
 800bb60:	4698      	mov	r8, r3
 800bb62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb64:	f000 80b3 	beq.w	800bcce <_printf_i+0x182>
 800bb68:	d822      	bhi.n	800bbb0 <_printf_i+0x64>
 800bb6a:	2963      	cmp	r1, #99	; 0x63
 800bb6c:	d036      	beq.n	800bbdc <_printf_i+0x90>
 800bb6e:	d80a      	bhi.n	800bb86 <_printf_i+0x3a>
 800bb70:	2900      	cmp	r1, #0
 800bb72:	f000 80b9 	beq.w	800bce8 <_printf_i+0x19c>
 800bb76:	2958      	cmp	r1, #88	; 0x58
 800bb78:	f000 8083 	beq.w	800bc82 <_printf_i+0x136>
 800bb7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800bb84:	e032      	b.n	800bbec <_printf_i+0xa0>
 800bb86:	2964      	cmp	r1, #100	; 0x64
 800bb88:	d001      	beq.n	800bb8e <_printf_i+0x42>
 800bb8a:	2969      	cmp	r1, #105	; 0x69
 800bb8c:	d1f6      	bne.n	800bb7c <_printf_i+0x30>
 800bb8e:	6820      	ldr	r0, [r4, #0]
 800bb90:	6813      	ldr	r3, [r2, #0]
 800bb92:	0605      	lsls	r5, r0, #24
 800bb94:	f103 0104 	add.w	r1, r3, #4
 800bb98:	d52a      	bpl.n	800bbf0 <_printf_i+0xa4>
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	6011      	str	r1, [r2, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	da03      	bge.n	800bbaa <_printf_i+0x5e>
 800bba2:	222d      	movs	r2, #45	; 0x2d
 800bba4:	425b      	negs	r3, r3
 800bba6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bbaa:	486f      	ldr	r0, [pc, #444]	; (800bd68 <_printf_i+0x21c>)
 800bbac:	220a      	movs	r2, #10
 800bbae:	e039      	b.n	800bc24 <_printf_i+0xd8>
 800bbb0:	2973      	cmp	r1, #115	; 0x73
 800bbb2:	f000 809d 	beq.w	800bcf0 <_printf_i+0x1a4>
 800bbb6:	d808      	bhi.n	800bbca <_printf_i+0x7e>
 800bbb8:	296f      	cmp	r1, #111	; 0x6f
 800bbba:	d020      	beq.n	800bbfe <_printf_i+0xb2>
 800bbbc:	2970      	cmp	r1, #112	; 0x70
 800bbbe:	d1dd      	bne.n	800bb7c <_printf_i+0x30>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	f043 0320 	orr.w	r3, r3, #32
 800bbc6:	6023      	str	r3, [r4, #0]
 800bbc8:	e003      	b.n	800bbd2 <_printf_i+0x86>
 800bbca:	2975      	cmp	r1, #117	; 0x75
 800bbcc:	d017      	beq.n	800bbfe <_printf_i+0xb2>
 800bbce:	2978      	cmp	r1, #120	; 0x78
 800bbd0:	d1d4      	bne.n	800bb7c <_printf_i+0x30>
 800bbd2:	2378      	movs	r3, #120	; 0x78
 800bbd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bbd8:	4864      	ldr	r0, [pc, #400]	; (800bd6c <_printf_i+0x220>)
 800bbda:	e055      	b.n	800bc88 <_printf_i+0x13c>
 800bbdc:	6813      	ldr	r3, [r2, #0]
 800bbde:	1d19      	adds	r1, r3, #4
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6011      	str	r1, [r2, #0]
 800bbe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbec:	2301      	movs	r3, #1
 800bbee:	e08c      	b.n	800bd0a <_printf_i+0x1be>
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6011      	str	r1, [r2, #0]
 800bbf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbf8:	bf18      	it	ne
 800bbfa:	b21b      	sxthne	r3, r3
 800bbfc:	e7cf      	b.n	800bb9e <_printf_i+0x52>
 800bbfe:	6813      	ldr	r3, [r2, #0]
 800bc00:	6825      	ldr	r5, [r4, #0]
 800bc02:	1d18      	adds	r0, r3, #4
 800bc04:	6010      	str	r0, [r2, #0]
 800bc06:	0628      	lsls	r0, r5, #24
 800bc08:	d501      	bpl.n	800bc0e <_printf_i+0xc2>
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	e002      	b.n	800bc14 <_printf_i+0xc8>
 800bc0e:	0668      	lsls	r0, r5, #25
 800bc10:	d5fb      	bpl.n	800bc0a <_printf_i+0xbe>
 800bc12:	881b      	ldrh	r3, [r3, #0]
 800bc14:	4854      	ldr	r0, [pc, #336]	; (800bd68 <_printf_i+0x21c>)
 800bc16:	296f      	cmp	r1, #111	; 0x6f
 800bc18:	bf14      	ite	ne
 800bc1a:	220a      	movne	r2, #10
 800bc1c:	2208      	moveq	r2, #8
 800bc1e:	2100      	movs	r1, #0
 800bc20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc24:	6865      	ldr	r5, [r4, #4]
 800bc26:	60a5      	str	r5, [r4, #8]
 800bc28:	2d00      	cmp	r5, #0
 800bc2a:	f2c0 8095 	blt.w	800bd58 <_printf_i+0x20c>
 800bc2e:	6821      	ldr	r1, [r4, #0]
 800bc30:	f021 0104 	bic.w	r1, r1, #4
 800bc34:	6021      	str	r1, [r4, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d13d      	bne.n	800bcb6 <_printf_i+0x16a>
 800bc3a:	2d00      	cmp	r5, #0
 800bc3c:	f040 808e 	bne.w	800bd5c <_printf_i+0x210>
 800bc40:	4665      	mov	r5, ip
 800bc42:	2a08      	cmp	r2, #8
 800bc44:	d10b      	bne.n	800bc5e <_printf_i+0x112>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	07db      	lsls	r3, r3, #31
 800bc4a:	d508      	bpl.n	800bc5e <_printf_i+0x112>
 800bc4c:	6923      	ldr	r3, [r4, #16]
 800bc4e:	6862      	ldr	r2, [r4, #4]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	bfde      	ittt	le
 800bc54:	2330      	movle	r3, #48	; 0x30
 800bc56:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc5e:	ebac 0305 	sub.w	r3, ip, r5
 800bc62:	6123      	str	r3, [r4, #16]
 800bc64:	f8cd 8000 	str.w	r8, [sp]
 800bc68:	463b      	mov	r3, r7
 800bc6a:	aa03      	add	r2, sp, #12
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	4630      	mov	r0, r6
 800bc70:	f7ff fef6 	bl	800ba60 <_printf_common>
 800bc74:	3001      	adds	r0, #1
 800bc76:	d14d      	bne.n	800bd14 <_printf_i+0x1c8>
 800bc78:	f04f 30ff 	mov.w	r0, #4294967295
 800bc7c:	b005      	add	sp, #20
 800bc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc82:	4839      	ldr	r0, [pc, #228]	; (800bd68 <_printf_i+0x21c>)
 800bc84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bc88:	6813      	ldr	r3, [r2, #0]
 800bc8a:	6821      	ldr	r1, [r4, #0]
 800bc8c:	1d1d      	adds	r5, r3, #4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6015      	str	r5, [r2, #0]
 800bc92:	060a      	lsls	r2, r1, #24
 800bc94:	d50b      	bpl.n	800bcae <_printf_i+0x162>
 800bc96:	07ca      	lsls	r2, r1, #31
 800bc98:	bf44      	itt	mi
 800bc9a:	f041 0120 	orrmi.w	r1, r1, #32
 800bc9e:	6021      	strmi	r1, [r4, #0]
 800bca0:	b91b      	cbnz	r3, 800bcaa <_printf_i+0x15e>
 800bca2:	6822      	ldr	r2, [r4, #0]
 800bca4:	f022 0220 	bic.w	r2, r2, #32
 800bca8:	6022      	str	r2, [r4, #0]
 800bcaa:	2210      	movs	r2, #16
 800bcac:	e7b7      	b.n	800bc1e <_printf_i+0xd2>
 800bcae:	064d      	lsls	r5, r1, #25
 800bcb0:	bf48      	it	mi
 800bcb2:	b29b      	uxthmi	r3, r3
 800bcb4:	e7ef      	b.n	800bc96 <_printf_i+0x14a>
 800bcb6:	4665      	mov	r5, ip
 800bcb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bcbc:	fb02 3311 	mls	r3, r2, r1, r3
 800bcc0:	5cc3      	ldrb	r3, [r0, r3]
 800bcc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	2900      	cmp	r1, #0
 800bcca:	d1f5      	bne.n	800bcb8 <_printf_i+0x16c>
 800bccc:	e7b9      	b.n	800bc42 <_printf_i+0xf6>
 800bcce:	6813      	ldr	r3, [r2, #0]
 800bcd0:	6825      	ldr	r5, [r4, #0]
 800bcd2:	6961      	ldr	r1, [r4, #20]
 800bcd4:	1d18      	adds	r0, r3, #4
 800bcd6:	6010      	str	r0, [r2, #0]
 800bcd8:	0628      	lsls	r0, r5, #24
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	d501      	bpl.n	800bce2 <_printf_i+0x196>
 800bcde:	6019      	str	r1, [r3, #0]
 800bce0:	e002      	b.n	800bce8 <_printf_i+0x19c>
 800bce2:	066a      	lsls	r2, r5, #25
 800bce4:	d5fb      	bpl.n	800bcde <_printf_i+0x192>
 800bce6:	8019      	strh	r1, [r3, #0]
 800bce8:	2300      	movs	r3, #0
 800bcea:	6123      	str	r3, [r4, #16]
 800bcec:	4665      	mov	r5, ip
 800bcee:	e7b9      	b.n	800bc64 <_printf_i+0x118>
 800bcf0:	6813      	ldr	r3, [r2, #0]
 800bcf2:	1d19      	adds	r1, r3, #4
 800bcf4:	6011      	str	r1, [r2, #0]
 800bcf6:	681d      	ldr	r5, [r3, #0]
 800bcf8:	6862      	ldr	r2, [r4, #4]
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	f7f4 faa7 	bl	8000250 <memchr>
 800bd02:	b108      	cbz	r0, 800bd08 <_printf_i+0x1bc>
 800bd04:	1b40      	subs	r0, r0, r5
 800bd06:	6060      	str	r0, [r4, #4]
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	6123      	str	r3, [r4, #16]
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd12:	e7a7      	b.n	800bc64 <_printf_i+0x118>
 800bd14:	6923      	ldr	r3, [r4, #16]
 800bd16:	462a      	mov	r2, r5
 800bd18:	4639      	mov	r1, r7
 800bd1a:	4630      	mov	r0, r6
 800bd1c:	47c0      	blx	r8
 800bd1e:	3001      	adds	r0, #1
 800bd20:	d0aa      	beq.n	800bc78 <_printf_i+0x12c>
 800bd22:	6823      	ldr	r3, [r4, #0]
 800bd24:	079b      	lsls	r3, r3, #30
 800bd26:	d413      	bmi.n	800bd50 <_printf_i+0x204>
 800bd28:	68e0      	ldr	r0, [r4, #12]
 800bd2a:	9b03      	ldr	r3, [sp, #12]
 800bd2c:	4298      	cmp	r0, r3
 800bd2e:	bfb8      	it	lt
 800bd30:	4618      	movlt	r0, r3
 800bd32:	e7a3      	b.n	800bc7c <_printf_i+0x130>
 800bd34:	2301      	movs	r3, #1
 800bd36:	464a      	mov	r2, r9
 800bd38:	4639      	mov	r1, r7
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	47c0      	blx	r8
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d09a      	beq.n	800bc78 <_printf_i+0x12c>
 800bd42:	3501      	adds	r5, #1
 800bd44:	68e3      	ldr	r3, [r4, #12]
 800bd46:	9a03      	ldr	r2, [sp, #12]
 800bd48:	1a9b      	subs	r3, r3, r2
 800bd4a:	42ab      	cmp	r3, r5
 800bd4c:	dcf2      	bgt.n	800bd34 <_printf_i+0x1e8>
 800bd4e:	e7eb      	b.n	800bd28 <_printf_i+0x1dc>
 800bd50:	2500      	movs	r5, #0
 800bd52:	f104 0919 	add.w	r9, r4, #25
 800bd56:	e7f5      	b.n	800bd44 <_printf_i+0x1f8>
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d1ac      	bne.n	800bcb6 <_printf_i+0x16a>
 800bd5c:	7803      	ldrb	r3, [r0, #0]
 800bd5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bd62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd66:	e76c      	b.n	800bc42 <_printf_i+0xf6>
 800bd68:	0800eefa 	.word	0x0800eefa
 800bd6c:	0800ef0b 	.word	0x0800ef0b

0800bd70 <_scanf_float>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	469a      	mov	sl, r3
 800bd76:	688b      	ldr	r3, [r1, #8]
 800bd78:	4616      	mov	r6, r2
 800bd7a:	1e5a      	subs	r2, r3, #1
 800bd7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bd80:	b087      	sub	sp, #28
 800bd82:	bf83      	ittte	hi
 800bd84:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800bd88:	189b      	addhi	r3, r3, r2
 800bd8a:	9301      	strhi	r3, [sp, #4]
 800bd8c:	2300      	movls	r3, #0
 800bd8e:	bf86      	itte	hi
 800bd90:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bd94:	608b      	strhi	r3, [r1, #8]
 800bd96:	9301      	strls	r3, [sp, #4]
 800bd98:	680b      	ldr	r3, [r1, #0]
 800bd9a:	4688      	mov	r8, r1
 800bd9c:	f04f 0b00 	mov.w	fp, #0
 800bda0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bda4:	f848 3b1c 	str.w	r3, [r8], #28
 800bda8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800bdac:	4607      	mov	r7, r0
 800bdae:	460c      	mov	r4, r1
 800bdb0:	4645      	mov	r5, r8
 800bdb2:	465a      	mov	r2, fp
 800bdb4:	46d9      	mov	r9, fp
 800bdb6:	f8cd b008 	str.w	fp, [sp, #8]
 800bdba:	68a1      	ldr	r1, [r4, #8]
 800bdbc:	b181      	cbz	r1, 800bde0 <_scanf_float+0x70>
 800bdbe:	6833      	ldr	r3, [r6, #0]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	2b49      	cmp	r3, #73	; 0x49
 800bdc4:	d071      	beq.n	800beaa <_scanf_float+0x13a>
 800bdc6:	d84d      	bhi.n	800be64 <_scanf_float+0xf4>
 800bdc8:	2b39      	cmp	r3, #57	; 0x39
 800bdca:	d840      	bhi.n	800be4e <_scanf_float+0xde>
 800bdcc:	2b31      	cmp	r3, #49	; 0x31
 800bdce:	f080 8088 	bcs.w	800bee2 <_scanf_float+0x172>
 800bdd2:	2b2d      	cmp	r3, #45	; 0x2d
 800bdd4:	f000 8090 	beq.w	800bef8 <_scanf_float+0x188>
 800bdd8:	d815      	bhi.n	800be06 <_scanf_float+0x96>
 800bdda:	2b2b      	cmp	r3, #43	; 0x2b
 800bddc:	f000 808c 	beq.w	800bef8 <_scanf_float+0x188>
 800bde0:	f1b9 0f00 	cmp.w	r9, #0
 800bde4:	d003      	beq.n	800bdee <_scanf_float+0x7e>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	3a01      	subs	r2, #1
 800bdf0:	2a01      	cmp	r2, #1
 800bdf2:	f200 80ea 	bhi.w	800bfca <_scanf_float+0x25a>
 800bdf6:	4545      	cmp	r5, r8
 800bdf8:	f200 80dc 	bhi.w	800bfb4 <_scanf_float+0x244>
 800bdfc:	2601      	movs	r6, #1
 800bdfe:	4630      	mov	r0, r6
 800be00:	b007      	add	sp, #28
 800be02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be06:	2b2e      	cmp	r3, #46	; 0x2e
 800be08:	f000 809f 	beq.w	800bf4a <_scanf_float+0x1da>
 800be0c:	2b30      	cmp	r3, #48	; 0x30
 800be0e:	d1e7      	bne.n	800bde0 <_scanf_float+0x70>
 800be10:	6820      	ldr	r0, [r4, #0]
 800be12:	f410 7f80 	tst.w	r0, #256	; 0x100
 800be16:	d064      	beq.n	800bee2 <_scanf_float+0x172>
 800be18:	9b01      	ldr	r3, [sp, #4]
 800be1a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800be1e:	6020      	str	r0, [r4, #0]
 800be20:	f109 0901 	add.w	r9, r9, #1
 800be24:	b11b      	cbz	r3, 800be2e <_scanf_float+0xbe>
 800be26:	3b01      	subs	r3, #1
 800be28:	3101      	adds	r1, #1
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	60a1      	str	r1, [r4, #8]
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	3b01      	subs	r3, #1
 800be32:	60a3      	str	r3, [r4, #8]
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	3301      	adds	r3, #1
 800be38:	6123      	str	r3, [r4, #16]
 800be3a:	6873      	ldr	r3, [r6, #4]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	2b00      	cmp	r3, #0
 800be40:	6073      	str	r3, [r6, #4]
 800be42:	f340 80ac 	ble.w	800bf9e <_scanf_float+0x22e>
 800be46:	6833      	ldr	r3, [r6, #0]
 800be48:	3301      	adds	r3, #1
 800be4a:	6033      	str	r3, [r6, #0]
 800be4c:	e7b5      	b.n	800bdba <_scanf_float+0x4a>
 800be4e:	2b45      	cmp	r3, #69	; 0x45
 800be50:	f000 8085 	beq.w	800bf5e <_scanf_float+0x1ee>
 800be54:	2b46      	cmp	r3, #70	; 0x46
 800be56:	d06a      	beq.n	800bf2e <_scanf_float+0x1be>
 800be58:	2b41      	cmp	r3, #65	; 0x41
 800be5a:	d1c1      	bne.n	800bde0 <_scanf_float+0x70>
 800be5c:	2a01      	cmp	r2, #1
 800be5e:	d1bf      	bne.n	800bde0 <_scanf_float+0x70>
 800be60:	2202      	movs	r2, #2
 800be62:	e046      	b.n	800bef2 <_scanf_float+0x182>
 800be64:	2b65      	cmp	r3, #101	; 0x65
 800be66:	d07a      	beq.n	800bf5e <_scanf_float+0x1ee>
 800be68:	d818      	bhi.n	800be9c <_scanf_float+0x12c>
 800be6a:	2b54      	cmp	r3, #84	; 0x54
 800be6c:	d066      	beq.n	800bf3c <_scanf_float+0x1cc>
 800be6e:	d811      	bhi.n	800be94 <_scanf_float+0x124>
 800be70:	2b4e      	cmp	r3, #78	; 0x4e
 800be72:	d1b5      	bne.n	800bde0 <_scanf_float+0x70>
 800be74:	2a00      	cmp	r2, #0
 800be76:	d146      	bne.n	800bf06 <_scanf_float+0x196>
 800be78:	f1b9 0f00 	cmp.w	r9, #0
 800be7c:	d145      	bne.n	800bf0a <_scanf_float+0x19a>
 800be7e:	6821      	ldr	r1, [r4, #0]
 800be80:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800be84:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800be88:	d13f      	bne.n	800bf0a <_scanf_float+0x19a>
 800be8a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800be8e:	6021      	str	r1, [r4, #0]
 800be90:	2201      	movs	r2, #1
 800be92:	e02e      	b.n	800bef2 <_scanf_float+0x182>
 800be94:	2b59      	cmp	r3, #89	; 0x59
 800be96:	d01e      	beq.n	800bed6 <_scanf_float+0x166>
 800be98:	2b61      	cmp	r3, #97	; 0x61
 800be9a:	e7de      	b.n	800be5a <_scanf_float+0xea>
 800be9c:	2b6e      	cmp	r3, #110	; 0x6e
 800be9e:	d0e9      	beq.n	800be74 <_scanf_float+0x104>
 800bea0:	d815      	bhi.n	800bece <_scanf_float+0x15e>
 800bea2:	2b66      	cmp	r3, #102	; 0x66
 800bea4:	d043      	beq.n	800bf2e <_scanf_float+0x1be>
 800bea6:	2b69      	cmp	r3, #105	; 0x69
 800bea8:	d19a      	bne.n	800bde0 <_scanf_float+0x70>
 800beaa:	f1bb 0f00 	cmp.w	fp, #0
 800beae:	d138      	bne.n	800bf22 <_scanf_float+0x1b2>
 800beb0:	f1b9 0f00 	cmp.w	r9, #0
 800beb4:	d197      	bne.n	800bde6 <_scanf_float+0x76>
 800beb6:	6821      	ldr	r1, [r4, #0]
 800beb8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800bebc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800bec0:	d195      	bne.n	800bdee <_scanf_float+0x7e>
 800bec2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bec6:	6021      	str	r1, [r4, #0]
 800bec8:	f04f 0b01 	mov.w	fp, #1
 800becc:	e011      	b.n	800bef2 <_scanf_float+0x182>
 800bece:	2b74      	cmp	r3, #116	; 0x74
 800bed0:	d034      	beq.n	800bf3c <_scanf_float+0x1cc>
 800bed2:	2b79      	cmp	r3, #121	; 0x79
 800bed4:	d184      	bne.n	800bde0 <_scanf_float+0x70>
 800bed6:	f1bb 0f07 	cmp.w	fp, #7
 800beda:	d181      	bne.n	800bde0 <_scanf_float+0x70>
 800bedc:	f04f 0b08 	mov.w	fp, #8
 800bee0:	e007      	b.n	800bef2 <_scanf_float+0x182>
 800bee2:	eb12 0f0b 	cmn.w	r2, fp
 800bee6:	f47f af7b 	bne.w	800bde0 <_scanf_float+0x70>
 800beea:	6821      	ldr	r1, [r4, #0]
 800beec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800bef0:	6021      	str	r1, [r4, #0]
 800bef2:	702b      	strb	r3, [r5, #0]
 800bef4:	3501      	adds	r5, #1
 800bef6:	e79a      	b.n	800be2e <_scanf_float+0xbe>
 800bef8:	6821      	ldr	r1, [r4, #0]
 800befa:	0608      	lsls	r0, r1, #24
 800befc:	f57f af70 	bpl.w	800bde0 <_scanf_float+0x70>
 800bf00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bf04:	e7f4      	b.n	800bef0 <_scanf_float+0x180>
 800bf06:	2a02      	cmp	r2, #2
 800bf08:	d047      	beq.n	800bf9a <_scanf_float+0x22a>
 800bf0a:	f1bb 0f01 	cmp.w	fp, #1
 800bf0e:	d003      	beq.n	800bf18 <_scanf_float+0x1a8>
 800bf10:	f1bb 0f04 	cmp.w	fp, #4
 800bf14:	f47f af64 	bne.w	800bde0 <_scanf_float+0x70>
 800bf18:	f10b 0b01 	add.w	fp, fp, #1
 800bf1c:	fa5f fb8b 	uxtb.w	fp, fp
 800bf20:	e7e7      	b.n	800bef2 <_scanf_float+0x182>
 800bf22:	f1bb 0f03 	cmp.w	fp, #3
 800bf26:	d0f7      	beq.n	800bf18 <_scanf_float+0x1a8>
 800bf28:	f1bb 0f05 	cmp.w	fp, #5
 800bf2c:	e7f2      	b.n	800bf14 <_scanf_float+0x1a4>
 800bf2e:	f1bb 0f02 	cmp.w	fp, #2
 800bf32:	f47f af55 	bne.w	800bde0 <_scanf_float+0x70>
 800bf36:	f04f 0b03 	mov.w	fp, #3
 800bf3a:	e7da      	b.n	800bef2 <_scanf_float+0x182>
 800bf3c:	f1bb 0f06 	cmp.w	fp, #6
 800bf40:	f47f af4e 	bne.w	800bde0 <_scanf_float+0x70>
 800bf44:	f04f 0b07 	mov.w	fp, #7
 800bf48:	e7d3      	b.n	800bef2 <_scanf_float+0x182>
 800bf4a:	6821      	ldr	r1, [r4, #0]
 800bf4c:	0588      	lsls	r0, r1, #22
 800bf4e:	f57f af47 	bpl.w	800bde0 <_scanf_float+0x70>
 800bf52:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800bf56:	6021      	str	r1, [r4, #0]
 800bf58:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf5c:	e7c9      	b.n	800bef2 <_scanf_float+0x182>
 800bf5e:	6821      	ldr	r1, [r4, #0]
 800bf60:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800bf64:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bf68:	d006      	beq.n	800bf78 <_scanf_float+0x208>
 800bf6a:	0548      	lsls	r0, r1, #21
 800bf6c:	f57f af38 	bpl.w	800bde0 <_scanf_float+0x70>
 800bf70:	f1b9 0f00 	cmp.w	r9, #0
 800bf74:	f43f af3b 	beq.w	800bdee <_scanf_float+0x7e>
 800bf78:	0588      	lsls	r0, r1, #22
 800bf7a:	bf58      	it	pl
 800bf7c:	9802      	ldrpl	r0, [sp, #8]
 800bf7e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800bf82:	bf58      	it	pl
 800bf84:	eba9 0000 	subpl.w	r0, r9, r0
 800bf88:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800bf8c:	bf58      	it	pl
 800bf8e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800bf92:	6021      	str	r1, [r4, #0]
 800bf94:	f04f 0900 	mov.w	r9, #0
 800bf98:	e7ab      	b.n	800bef2 <_scanf_float+0x182>
 800bf9a:	2203      	movs	r2, #3
 800bf9c:	e7a9      	b.n	800bef2 <_scanf_float+0x182>
 800bf9e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bfa2:	9205      	str	r2, [sp, #20]
 800bfa4:	4631      	mov	r1, r6
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	4798      	blx	r3
 800bfaa:	9a05      	ldr	r2, [sp, #20]
 800bfac:	2800      	cmp	r0, #0
 800bfae:	f43f af04 	beq.w	800bdba <_scanf_float+0x4a>
 800bfb2:	e715      	b.n	800bde0 <_scanf_float+0x70>
 800bfb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bfb8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bfbc:	4632      	mov	r2, r6
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	4798      	blx	r3
 800bfc2:	6923      	ldr	r3, [r4, #16]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	6123      	str	r3, [r4, #16]
 800bfc8:	e715      	b.n	800bdf6 <_scanf_float+0x86>
 800bfca:	f10b 33ff 	add.w	r3, fp, #4294967295
 800bfce:	2b06      	cmp	r3, #6
 800bfd0:	d80a      	bhi.n	800bfe8 <_scanf_float+0x278>
 800bfd2:	f1bb 0f02 	cmp.w	fp, #2
 800bfd6:	d966      	bls.n	800c0a6 <_scanf_float+0x336>
 800bfd8:	f1ab 0b03 	sub.w	fp, fp, #3
 800bfdc:	fa5f fb8b 	uxtb.w	fp, fp
 800bfe0:	eba5 0b0b 	sub.w	fp, r5, fp
 800bfe4:	455d      	cmp	r5, fp
 800bfe6:	d149      	bne.n	800c07c <_scanf_float+0x30c>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	05da      	lsls	r2, r3, #23
 800bfec:	d51f      	bpl.n	800c02e <_scanf_float+0x2be>
 800bfee:	055b      	lsls	r3, r3, #21
 800bff0:	d466      	bmi.n	800c0c0 <_scanf_float+0x350>
 800bff2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bff6:	6923      	ldr	r3, [r4, #16]
 800bff8:	2965      	cmp	r1, #101	; 0x65
 800bffa:	f103 33ff 	add.w	r3, r3, #4294967295
 800bffe:	f105 3bff 	add.w	fp, r5, #4294967295
 800c002:	6123      	str	r3, [r4, #16]
 800c004:	d00d      	beq.n	800c022 <_scanf_float+0x2b2>
 800c006:	2945      	cmp	r1, #69	; 0x45
 800c008:	d00b      	beq.n	800c022 <_scanf_float+0x2b2>
 800c00a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c00e:	4632      	mov	r2, r6
 800c010:	4638      	mov	r0, r7
 800c012:	4798      	blx	r3
 800c014:	6923      	ldr	r3, [r4, #16]
 800c016:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800c01a:	3b01      	subs	r3, #1
 800c01c:	f1a5 0b02 	sub.w	fp, r5, #2
 800c020:	6123      	str	r3, [r4, #16]
 800c022:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c026:	4632      	mov	r2, r6
 800c028:	4638      	mov	r0, r7
 800c02a:	4798      	blx	r3
 800c02c:	465d      	mov	r5, fp
 800c02e:	6826      	ldr	r6, [r4, #0]
 800c030:	f016 0610 	ands.w	r6, r6, #16
 800c034:	d170      	bne.n	800c118 <_scanf_float+0x3a8>
 800c036:	702e      	strb	r6, [r5, #0]
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c03e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c042:	d140      	bne.n	800c0c6 <_scanf_float+0x356>
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	eba9 0303 	sub.w	r3, r9, r3
 800c04a:	425a      	negs	r2, r3
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d147      	bne.n	800c0e0 <_scanf_float+0x370>
 800c050:	2200      	movs	r2, #0
 800c052:	4638      	mov	r0, r7
 800c054:	4641      	mov	r1, r8
 800c056:	f000 fe6b 	bl	800cd30 <_strtod_r>
 800c05a:	6820      	ldr	r0, [r4, #0]
 800c05c:	f8da 3000 	ldr.w	r3, [sl]
 800c060:	f010 0f02 	tst.w	r0, #2
 800c064:	f103 0204 	add.w	r2, r3, #4
 800c068:	f8ca 2000 	str.w	r2, [sl]
 800c06c:	d043      	beq.n	800c0f6 <_scanf_float+0x386>
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	ed83 0b00 	vstr	d0, [r3]
 800c074:	68e3      	ldr	r3, [r4, #12]
 800c076:	3301      	adds	r3, #1
 800c078:	60e3      	str	r3, [r4, #12]
 800c07a:	e6c0      	b.n	800bdfe <_scanf_float+0x8e>
 800c07c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c080:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c084:	4632      	mov	r2, r6
 800c086:	4638      	mov	r0, r7
 800c088:	4798      	blx	r3
 800c08a:	6923      	ldr	r3, [r4, #16]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	6123      	str	r3, [r4, #16]
 800c090:	e7a8      	b.n	800bfe4 <_scanf_float+0x274>
 800c092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c096:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c09a:	4632      	mov	r2, r6
 800c09c:	4638      	mov	r0, r7
 800c09e:	4798      	blx	r3
 800c0a0:	6923      	ldr	r3, [r4, #16]
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	6123      	str	r3, [r4, #16]
 800c0a6:	4545      	cmp	r5, r8
 800c0a8:	d8f3      	bhi.n	800c092 <_scanf_float+0x322>
 800c0aa:	e6a7      	b.n	800bdfc <_scanf_float+0x8c>
 800c0ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c0b4:	4632      	mov	r2, r6
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	4798      	blx	r3
 800c0ba:	6923      	ldr	r3, [r4, #16]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	6123      	str	r3, [r4, #16]
 800c0c0:	4545      	cmp	r5, r8
 800c0c2:	d8f3      	bhi.n	800c0ac <_scanf_float+0x33c>
 800c0c4:	e69a      	b.n	800bdfc <_scanf_float+0x8c>
 800c0c6:	9b03      	ldr	r3, [sp, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d0c1      	beq.n	800c050 <_scanf_float+0x2e0>
 800c0cc:	9904      	ldr	r1, [sp, #16]
 800c0ce:	230a      	movs	r3, #10
 800c0d0:	4632      	mov	r2, r6
 800c0d2:	3101      	adds	r1, #1
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	f000 feb7 	bl	800ce48 <_strtol_r>
 800c0da:	9b03      	ldr	r3, [sp, #12]
 800c0dc:	9d04      	ldr	r5, [sp, #16]
 800c0de:	1ac2      	subs	r2, r0, r3
 800c0e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c0e4:	429d      	cmp	r5, r3
 800c0e6:	bf28      	it	cs
 800c0e8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c0ec:	490b      	ldr	r1, [pc, #44]	; (800c11c <_scanf_float+0x3ac>)
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 f81c 	bl	800c12c <siprintf>
 800c0f4:	e7ac      	b.n	800c050 <_scanf_float+0x2e0>
 800c0f6:	f010 0004 	ands.w	r0, r0, #4
 800c0fa:	d1b8      	bne.n	800c06e <_scanf_float+0x2fe>
 800c0fc:	eeb4 0b40 	vcmp.f64	d0, d0
 800c100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c104:	681d      	ldr	r5, [r3, #0]
 800c106:	d704      	bvc.n	800c112 <_scanf_float+0x3a2>
 800c108:	f000 f80a 	bl	800c120 <nanf>
 800c10c:	ed85 0a00 	vstr	s0, [r5]
 800c110:	e7b0      	b.n	800c074 <_scanf_float+0x304>
 800c112:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c116:	e7f9      	b.n	800c10c <_scanf_float+0x39c>
 800c118:	2600      	movs	r6, #0
 800c11a:	e670      	b.n	800bdfe <_scanf_float+0x8e>
 800c11c:	0800ef1c 	.word	0x0800ef1c

0800c120 <nanf>:
 800c120:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c128 <nanf+0x8>
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	7fc00000 	.word	0x7fc00000

0800c12c <siprintf>:
 800c12c:	b40e      	push	{r1, r2, r3}
 800c12e:	b500      	push	{lr}
 800c130:	b09c      	sub	sp, #112	; 0x70
 800c132:	ab1d      	add	r3, sp, #116	; 0x74
 800c134:	9002      	str	r0, [sp, #8]
 800c136:	9006      	str	r0, [sp, #24]
 800c138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c13c:	4809      	ldr	r0, [pc, #36]	; (800c164 <siprintf+0x38>)
 800c13e:	9107      	str	r1, [sp, #28]
 800c140:	9104      	str	r1, [sp, #16]
 800c142:	4909      	ldr	r1, [pc, #36]	; (800c168 <siprintf+0x3c>)
 800c144:	f853 2b04 	ldr.w	r2, [r3], #4
 800c148:	9105      	str	r1, [sp, #20]
 800c14a:	6800      	ldr	r0, [r0, #0]
 800c14c:	9301      	str	r3, [sp, #4]
 800c14e:	a902      	add	r1, sp, #8
 800c150:	f002 fcd4 	bl	800eafc <_svfiprintf_r>
 800c154:	9b02      	ldr	r3, [sp, #8]
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
 800c15a:	b01c      	add	sp, #112	; 0x70
 800c15c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c160:	b003      	add	sp, #12
 800c162:	4770      	bx	lr
 800c164:	20000024 	.word	0x20000024
 800c168:	ffff0208 	.word	0xffff0208

0800c16c <sulp>:
 800c16c:	b570      	push	{r4, r5, r6, lr}
 800c16e:	4604      	mov	r4, r0
 800c170:	460d      	mov	r5, r1
 800c172:	4616      	mov	r6, r2
 800c174:	ec45 4b10 	vmov	d0, r4, r5
 800c178:	f002 fa7c 	bl	800e674 <__ulp>
 800c17c:	b17e      	cbz	r6, 800c19e <sulp+0x32>
 800c17e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c182:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c186:	2b00      	cmp	r3, #0
 800c188:	dd09      	ble.n	800c19e <sulp+0x32>
 800c18a:	051b      	lsls	r3, r3, #20
 800c18c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c190:	2000      	movs	r0, #0
 800c192:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c196:	ec41 0b17 	vmov	d7, r0, r1
 800c19a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c19e:	bd70      	pop	{r4, r5, r6, pc}

0800c1a0 <_strtod_l>:
 800c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	ed2d 8b0c 	vpush	{d8-d13}
 800c1a8:	4698      	mov	r8, r3
 800c1aa:	b09d      	sub	sp, #116	; 0x74
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	460e      	mov	r6, r1
 800c1b4:	9214      	str	r2, [sp, #80]	; 0x50
 800c1b6:	9318      	str	r3, [sp, #96]	; 0x60
 800c1b8:	f001 ff5b 	bl	800e072 <__localeconv_l>
 800c1bc:	4681      	mov	r9, r0
 800c1be:	6800      	ldr	r0, [r0, #0]
 800c1c0:	f7f4 f83e 	bl	8000240 <strlen>
 800c1c4:	f04f 0a00 	mov.w	sl, #0
 800c1c8:	4607      	mov	r7, r0
 800c1ca:	f04f 0b00 	mov.w	fp, #0
 800c1ce:	9617      	str	r6, [sp, #92]	; 0x5c
 800c1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c1d2:	781a      	ldrb	r2, [r3, #0]
 800c1d4:	2a0d      	cmp	r2, #13
 800c1d6:	d834      	bhi.n	800c242 <_strtod_l+0xa2>
 800c1d8:	2a09      	cmp	r2, #9
 800c1da:	d238      	bcs.n	800c24e <_strtod_l+0xae>
 800c1dc:	2a00      	cmp	r2, #0
 800c1de:	d040      	beq.n	800c262 <_strtod_l+0xc2>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	930d      	str	r3, [sp, #52]	; 0x34
 800c1e4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800c1e6:	782b      	ldrb	r3, [r5, #0]
 800c1e8:	2b30      	cmp	r3, #48	; 0x30
 800c1ea:	f040 80b3 	bne.w	800c354 <_strtod_l+0x1b4>
 800c1ee:	786b      	ldrb	r3, [r5, #1]
 800c1f0:	2b58      	cmp	r3, #88	; 0x58
 800c1f2:	d001      	beq.n	800c1f8 <_strtod_l+0x58>
 800c1f4:	2b78      	cmp	r3, #120	; 0x78
 800c1f6:	d169      	bne.n	800c2cc <_strtod_l+0x12c>
 800c1f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	ab18      	add	r3, sp, #96	; 0x60
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	f8cd 8008 	str.w	r8, [sp, #8]
 800c204:	ab19      	add	r3, sp, #100	; 0x64
 800c206:	4a8f      	ldr	r2, [pc, #572]	; (800c444 <_strtod_l+0x2a4>)
 800c208:	a917      	add	r1, sp, #92	; 0x5c
 800c20a:	4620      	mov	r0, r4
 800c20c:	f001 fc57 	bl	800dabe <__gethex>
 800c210:	f010 0607 	ands.w	r6, r0, #7
 800c214:	4607      	mov	r7, r0
 800c216:	d005      	beq.n	800c224 <_strtod_l+0x84>
 800c218:	2e06      	cmp	r6, #6
 800c21a:	d12c      	bne.n	800c276 <_strtod_l+0xd6>
 800c21c:	3501      	adds	r5, #1
 800c21e:	2300      	movs	r3, #0
 800c220:	9517      	str	r5, [sp, #92]	; 0x5c
 800c222:	930d      	str	r3, [sp, #52]	; 0x34
 800c224:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c226:	2b00      	cmp	r3, #0
 800c228:	f040 855e 	bne.w	800cce8 <_strtod_l+0xb48>
 800c22c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c22e:	b1eb      	cbz	r3, 800c26c <_strtod_l+0xcc>
 800c230:	ec4b ab17 	vmov	d7, sl, fp
 800c234:	eeb1 0b47 	vneg.f64	d0, d7
 800c238:	b01d      	add	sp, #116	; 0x74
 800c23a:	ecbd 8b0c 	vpop	{d8-d13}
 800c23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c242:	2a2b      	cmp	r2, #43	; 0x2b
 800c244:	d015      	beq.n	800c272 <_strtod_l+0xd2>
 800c246:	2a2d      	cmp	r2, #45	; 0x2d
 800c248:	d004      	beq.n	800c254 <_strtod_l+0xb4>
 800c24a:	2a20      	cmp	r2, #32
 800c24c:	d1c8      	bne.n	800c1e0 <_strtod_l+0x40>
 800c24e:	3301      	adds	r3, #1
 800c250:	9317      	str	r3, [sp, #92]	; 0x5c
 800c252:	e7bd      	b.n	800c1d0 <_strtod_l+0x30>
 800c254:	2201      	movs	r2, #1
 800c256:	920d      	str	r2, [sp, #52]	; 0x34
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	9217      	str	r2, [sp, #92]	; 0x5c
 800c25c:	785b      	ldrb	r3, [r3, #1]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1c0      	bne.n	800c1e4 <_strtod_l+0x44>
 800c262:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c264:	9617      	str	r6, [sp, #92]	; 0x5c
 800c266:	2b00      	cmp	r3, #0
 800c268:	f040 853c 	bne.w	800cce4 <_strtod_l+0xb44>
 800c26c:	ec4b ab10 	vmov	d0, sl, fp
 800c270:	e7e2      	b.n	800c238 <_strtod_l+0x98>
 800c272:	2200      	movs	r2, #0
 800c274:	e7ef      	b.n	800c256 <_strtod_l+0xb6>
 800c276:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c278:	b13a      	cbz	r2, 800c28a <_strtod_l+0xea>
 800c27a:	2135      	movs	r1, #53	; 0x35
 800c27c:	a81a      	add	r0, sp, #104	; 0x68
 800c27e:	f002 faf2 	bl	800e866 <__copybits>
 800c282:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c284:	4620      	mov	r0, r4
 800c286:	f001 ff5e 	bl	800e146 <_Bfree>
 800c28a:	3e01      	subs	r6, #1
 800c28c:	2e04      	cmp	r6, #4
 800c28e:	d806      	bhi.n	800c29e <_strtod_l+0xfe>
 800c290:	e8df f006 	tbb	[pc, r6]
 800c294:	1714030a 	.word	0x1714030a
 800c298:	0a          	.byte	0x0a
 800c299:	00          	.byte	0x00
 800c29a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c29e:	073b      	lsls	r3, r7, #28
 800c2a0:	d5c0      	bpl.n	800c224 <_strtod_l+0x84>
 800c2a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c2a6:	e7bd      	b.n	800c224 <_strtod_l+0x84>
 800c2a8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c2ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c2ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c2b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c2b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c2ba:	e7f0      	b.n	800c29e <_strtod_l+0xfe>
 800c2bc:	f8df b188 	ldr.w	fp, [pc, #392]	; 800c448 <_strtod_l+0x2a8>
 800c2c0:	e7ed      	b.n	800c29e <_strtod_l+0xfe>
 800c2c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c2c6:	f04f 3aff 	mov.w	sl, #4294967295
 800c2ca:	e7e8      	b.n	800c29e <_strtod_l+0xfe>
 800c2cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c2d2:	785b      	ldrb	r3, [r3, #1]
 800c2d4:	2b30      	cmp	r3, #48	; 0x30
 800c2d6:	d0f9      	beq.n	800c2cc <_strtod_l+0x12c>
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0a3      	beq.n	800c224 <_strtod_l+0x84>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	930a      	str	r3, [sp, #40]	; 0x28
 800c2e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2e2:	930c      	str	r3, [sp, #48]	; 0x30
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	9306      	str	r3, [sp, #24]
 800c2e8:	9308      	str	r3, [sp, #32]
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	220a      	movs	r2, #10
 800c2ee:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c2f0:	f890 8000 	ldrb.w	r8, [r0]
 800c2f4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800c2f8:	b2d9      	uxtb	r1, r3
 800c2fa:	2909      	cmp	r1, #9
 800c2fc:	d92c      	bls.n	800c358 <_strtod_l+0x1b8>
 800c2fe:	463a      	mov	r2, r7
 800c300:	f8d9 1000 	ldr.w	r1, [r9]
 800c304:	f002 fd02 	bl	800ed0c <strncmp>
 800c308:	2800      	cmp	r0, #0
 800c30a:	d035      	beq.n	800c378 <_strtod_l+0x1d8>
 800c30c:	2000      	movs	r0, #0
 800c30e:	4642      	mov	r2, r8
 800c310:	462b      	mov	r3, r5
 800c312:	4601      	mov	r1, r0
 800c314:	9004      	str	r0, [sp, #16]
 800c316:	2a65      	cmp	r2, #101	; 0x65
 800c318:	d001      	beq.n	800c31e <_strtod_l+0x17e>
 800c31a:	2a45      	cmp	r2, #69	; 0x45
 800c31c:	d117      	bne.n	800c34e <_strtod_l+0x1ae>
 800c31e:	b923      	cbnz	r3, 800c32a <_strtod_l+0x18a>
 800c320:	b910      	cbnz	r0, 800c328 <_strtod_l+0x188>
 800c322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c324:	2b00      	cmp	r3, #0
 800c326:	d09c      	beq.n	800c262 <_strtod_l+0xc2>
 800c328:	2300      	movs	r3, #0
 800c32a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c32c:	1c72      	adds	r2, r6, #1
 800c32e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c330:	7872      	ldrb	r2, [r6, #1]
 800c332:	2a2b      	cmp	r2, #43	; 0x2b
 800c334:	f000 8082 	beq.w	800c43c <_strtod_l+0x29c>
 800c338:	2a2d      	cmp	r2, #45	; 0x2d
 800c33a:	d079      	beq.n	800c430 <_strtod_l+0x290>
 800c33c:	f04f 0e00 	mov.w	lr, #0
 800c340:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c344:	f1bc 0f09 	cmp.w	ip, #9
 800c348:	f240 8086 	bls.w	800c458 <_strtod_l+0x2b8>
 800c34c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c34e:	f04f 0800 	mov.w	r8, #0
 800c352:	e0a8      	b.n	800c4a6 <_strtod_l+0x306>
 800c354:	2300      	movs	r3, #0
 800c356:	e7c2      	b.n	800c2de <_strtod_l+0x13e>
 800c358:	2d08      	cmp	r5, #8
 800c35a:	bfd5      	itete	le
 800c35c:	9908      	ldrle	r1, [sp, #32]
 800c35e:	9906      	ldrgt	r1, [sp, #24]
 800c360:	fb02 3301 	mlale	r3, r2, r1, r3
 800c364:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c368:	f100 0001 	add.w	r0, r0, #1
 800c36c:	bfd4      	ite	le
 800c36e:	9308      	strle	r3, [sp, #32]
 800c370:	9306      	strgt	r3, [sp, #24]
 800c372:	3501      	adds	r5, #1
 800c374:	9017      	str	r0, [sp, #92]	; 0x5c
 800c376:	e7ba      	b.n	800c2ee <_strtod_l+0x14e>
 800c378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c37a:	19da      	adds	r2, r3, r7
 800c37c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c37e:	5dda      	ldrb	r2, [r3, r7]
 800c380:	2d00      	cmp	r5, #0
 800c382:	d038      	beq.n	800c3f6 <_strtod_l+0x256>
 800c384:	4601      	mov	r1, r0
 800c386:	462b      	mov	r3, r5
 800c388:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c38c:	2f09      	cmp	r7, #9
 800c38e:	d913      	bls.n	800c3b8 <_strtod_l+0x218>
 800c390:	2701      	movs	r7, #1
 800c392:	9704      	str	r7, [sp, #16]
 800c394:	e7bf      	b.n	800c316 <_strtod_l+0x176>
 800c396:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	9217      	str	r2, [sp, #92]	; 0x5c
 800c39c:	785a      	ldrb	r2, [r3, #1]
 800c39e:	3001      	adds	r0, #1
 800c3a0:	2a30      	cmp	r2, #48	; 0x30
 800c3a2:	d0f8      	beq.n	800c396 <_strtod_l+0x1f6>
 800c3a4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c3a8:	2b08      	cmp	r3, #8
 800c3aa:	f200 84a2 	bhi.w	800ccf2 <_strtod_l+0xb52>
 800c3ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3b0:	930c      	str	r3, [sp, #48]	; 0x30
 800c3b2:	4601      	mov	r1, r0
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800c3bc:	f100 0701 	add.w	r7, r0, #1
 800c3c0:	d013      	beq.n	800c3ea <_strtod_l+0x24a>
 800c3c2:	4439      	add	r1, r7
 800c3c4:	eb00 0e03 	add.w	lr, r0, r3
 800c3c8:	461f      	mov	r7, r3
 800c3ca:	f04f 0c0a 	mov.w	ip, #10
 800c3ce:	45be      	cmp	lr, r7
 800c3d0:	d113      	bne.n	800c3fa <_strtod_l+0x25a>
 800c3d2:	181f      	adds	r7, r3, r0
 800c3d4:	2f08      	cmp	r7, #8
 800c3d6:	f103 0301 	add.w	r3, r3, #1
 800c3da:	4403      	add	r3, r0
 800c3dc:	dc1d      	bgt.n	800c41a <_strtod_l+0x27a>
 800c3de:	9a08      	ldr	r2, [sp, #32]
 800c3e0:	200a      	movs	r0, #10
 800c3e2:	fb00 8202 	mla	r2, r0, r2, r8
 800c3e6:	9208      	str	r2, [sp, #32]
 800c3e8:	2700      	movs	r7, #0
 800c3ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3ec:	1c50      	adds	r0, r2, #1
 800c3ee:	9017      	str	r0, [sp, #92]	; 0x5c
 800c3f0:	7852      	ldrb	r2, [r2, #1]
 800c3f2:	4638      	mov	r0, r7
 800c3f4:	e7c8      	b.n	800c388 <_strtod_l+0x1e8>
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	e7d2      	b.n	800c3a0 <_strtod_l+0x200>
 800c3fa:	2f08      	cmp	r7, #8
 800c3fc:	f107 0701 	add.w	r7, r7, #1
 800c400:	dc04      	bgt.n	800c40c <_strtod_l+0x26c>
 800c402:	9a08      	ldr	r2, [sp, #32]
 800c404:	fb0c f202 	mul.w	r2, ip, r2
 800c408:	9208      	str	r2, [sp, #32]
 800c40a:	e7e0      	b.n	800c3ce <_strtod_l+0x22e>
 800c40c:	2f10      	cmp	r7, #16
 800c40e:	bfde      	ittt	le
 800c410:	9a06      	ldrle	r2, [sp, #24]
 800c412:	fb0c f202 	mulle.w	r2, ip, r2
 800c416:	9206      	strle	r2, [sp, #24]
 800c418:	e7d9      	b.n	800c3ce <_strtod_l+0x22e>
 800c41a:	2b10      	cmp	r3, #16
 800c41c:	bfdf      	itttt	le
 800c41e:	9a06      	ldrle	r2, [sp, #24]
 800c420:	200a      	movle	r0, #10
 800c422:	fb00 8202 	mlale	r2, r0, r2, r8
 800c426:	9206      	strle	r2, [sp, #24]
 800c428:	e7de      	b.n	800c3e8 <_strtod_l+0x248>
 800c42a:	2301      	movs	r3, #1
 800c42c:	9304      	str	r3, [sp, #16]
 800c42e:	e777      	b.n	800c320 <_strtod_l+0x180>
 800c430:	f04f 0e01 	mov.w	lr, #1
 800c434:	1cb2      	adds	r2, r6, #2
 800c436:	9217      	str	r2, [sp, #92]	; 0x5c
 800c438:	78b2      	ldrb	r2, [r6, #2]
 800c43a:	e781      	b.n	800c340 <_strtod_l+0x1a0>
 800c43c:	f04f 0e00 	mov.w	lr, #0
 800c440:	e7f8      	b.n	800c434 <_strtod_l+0x294>
 800c442:	bf00      	nop
 800c444:	0800ef24 	.word	0x0800ef24
 800c448:	7ff00000 	.word	0x7ff00000
 800c44c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c44e:	f102 0c01 	add.w	ip, r2, #1
 800c452:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c456:	7852      	ldrb	r2, [r2, #1]
 800c458:	2a30      	cmp	r2, #48	; 0x30
 800c45a:	d0f7      	beq.n	800c44c <_strtod_l+0x2ac>
 800c45c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800c460:	f1bc 0f08 	cmp.w	ip, #8
 800c464:	f63f af73 	bhi.w	800c34e <_strtod_l+0x1ae>
 800c468:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800c46c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c46e:	920e      	str	r2, [sp, #56]	; 0x38
 800c470:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c472:	f102 0c01 	add.w	ip, r2, #1
 800c476:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800c47a:	7852      	ldrb	r2, [r2, #1]
 800c47c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800c480:	f1b9 0f09 	cmp.w	r9, #9
 800c484:	d939      	bls.n	800c4fa <_strtod_l+0x35a>
 800c486:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c488:	ebac 0c07 	sub.w	ip, ip, r7
 800c48c:	f1bc 0f08 	cmp.w	ip, #8
 800c490:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800c494:	dc37      	bgt.n	800c506 <_strtod_l+0x366>
 800c496:	45e0      	cmp	r8, ip
 800c498:	bfa8      	it	ge
 800c49a:	46e0      	movge	r8, ip
 800c49c:	f1be 0f00 	cmp.w	lr, #0
 800c4a0:	d001      	beq.n	800c4a6 <_strtod_l+0x306>
 800c4a2:	f1c8 0800 	rsb	r8, r8, #0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d151      	bne.n	800c54e <_strtod_l+0x3ae>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f47f aeba 	bne.w	800c224 <_strtod_l+0x84>
 800c4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f47f aeb6 	bne.w	800c224 <_strtod_l+0x84>
 800c4b8:	9b04      	ldr	r3, [sp, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	f47f aed1 	bne.w	800c262 <_strtod_l+0xc2>
 800c4c0:	2a4e      	cmp	r2, #78	; 0x4e
 800c4c2:	d027      	beq.n	800c514 <_strtod_l+0x374>
 800c4c4:	dc21      	bgt.n	800c50a <_strtod_l+0x36a>
 800c4c6:	2a49      	cmp	r2, #73	; 0x49
 800c4c8:	f47f aecb 	bne.w	800c262 <_strtod_l+0xc2>
 800c4cc:	499a      	ldr	r1, [pc, #616]	; (800c738 <_strtod_l+0x598>)
 800c4ce:	a817      	add	r0, sp, #92	; 0x5c
 800c4d0:	f001 fd28 	bl	800df24 <__match>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	f43f aec4 	beq.w	800c262 <_strtod_l+0xc2>
 800c4da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4dc:	4997      	ldr	r1, [pc, #604]	; (800c73c <_strtod_l+0x59c>)
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	a817      	add	r0, sp, #92	; 0x5c
 800c4e2:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4e4:	f001 fd1e 	bl	800df24 <__match>
 800c4e8:	b910      	cbnz	r0, 800c4f0 <_strtod_l+0x350>
 800c4ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800c4f0:	f8df b260 	ldr.w	fp, [pc, #608]	; 800c754 <_strtod_l+0x5b4>
 800c4f4:	f04f 0a00 	mov.w	sl, #0
 800c4f8:	e694      	b.n	800c224 <_strtod_l+0x84>
 800c4fa:	270a      	movs	r7, #10
 800c4fc:	fb07 2808 	mla	r8, r7, r8, r2
 800c500:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800c504:	e7b4      	b.n	800c470 <_strtod_l+0x2d0>
 800c506:	46e0      	mov	r8, ip
 800c508:	e7c8      	b.n	800c49c <_strtod_l+0x2fc>
 800c50a:	2a69      	cmp	r2, #105	; 0x69
 800c50c:	d0de      	beq.n	800c4cc <_strtod_l+0x32c>
 800c50e:	2a6e      	cmp	r2, #110	; 0x6e
 800c510:	f47f aea7 	bne.w	800c262 <_strtod_l+0xc2>
 800c514:	498a      	ldr	r1, [pc, #552]	; (800c740 <_strtod_l+0x5a0>)
 800c516:	a817      	add	r0, sp, #92	; 0x5c
 800c518:	f001 fd04 	bl	800df24 <__match>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f43f aea0 	beq.w	800c262 <_strtod_l+0xc2>
 800c522:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	2b28      	cmp	r3, #40	; 0x28
 800c528:	d10e      	bne.n	800c548 <_strtod_l+0x3a8>
 800c52a:	aa1a      	add	r2, sp, #104	; 0x68
 800c52c:	4985      	ldr	r1, [pc, #532]	; (800c744 <_strtod_l+0x5a4>)
 800c52e:	a817      	add	r0, sp, #92	; 0x5c
 800c530:	f001 fd0c 	bl	800df4c <__hexnan>
 800c534:	2805      	cmp	r0, #5
 800c536:	d107      	bne.n	800c548 <_strtod_l+0x3a8>
 800c538:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c53a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c53e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c542:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c546:	e66d      	b.n	800c224 <_strtod_l+0x84>
 800c548:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800c758 <_strtod_l+0x5b8>
 800c54c:	e7d2      	b.n	800c4f4 <_strtod_l+0x354>
 800c54e:	eddd 7a08 	vldr	s15, [sp, #32]
 800c552:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c556:	eba8 0201 	sub.w	r2, r8, r1
 800c55a:	2d00      	cmp	r5, #0
 800c55c:	bf08      	it	eq
 800c55e:	461d      	moveq	r5, r3
 800c560:	2b10      	cmp	r3, #16
 800c562:	9204      	str	r2, [sp, #16]
 800c564:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c568:	461a      	mov	r2, r3
 800c56a:	bfa8      	it	ge
 800c56c:	2210      	movge	r2, #16
 800c56e:	2b09      	cmp	r3, #9
 800c570:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c574:	dc14      	bgt.n	800c5a0 <_strtod_l+0x400>
 800c576:	9904      	ldr	r1, [sp, #16]
 800c578:	2900      	cmp	r1, #0
 800c57a:	f43f ae53 	beq.w	800c224 <_strtod_l+0x84>
 800c57e:	9904      	ldr	r1, [sp, #16]
 800c580:	dd72      	ble.n	800c668 <_strtod_l+0x4c8>
 800c582:	2916      	cmp	r1, #22
 800c584:	dc5a      	bgt.n	800c63c <_strtod_l+0x49c>
 800c586:	4970      	ldr	r1, [pc, #448]	; (800c748 <_strtod_l+0x5a8>)
 800c588:	9b04      	ldr	r3, [sp, #16]
 800c58a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c58e:	ed91 7b00 	vldr	d7, [r1]
 800c592:	ec4b ab16 	vmov	d6, sl, fp
 800c596:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c59a:	ec5b ab17 	vmov	sl, fp, d7
 800c59e:	e641      	b.n	800c224 <_strtod_l+0x84>
 800c5a0:	4969      	ldr	r1, [pc, #420]	; (800c748 <_strtod_l+0x5a8>)
 800c5a2:	eddd 7a06 	vldr	s15, [sp, #24]
 800c5a6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c5aa:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800c5ae:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800c5b2:	2b0f      	cmp	r3, #15
 800c5b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c5b8:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c5bc:	ec5b ab17 	vmov	sl, fp, d7
 800c5c0:	ddd9      	ble.n	800c576 <_strtod_l+0x3d6>
 800c5c2:	9904      	ldr	r1, [sp, #16]
 800c5c4:	1a9a      	subs	r2, r3, r2
 800c5c6:	440a      	add	r2, r1
 800c5c8:	2a00      	cmp	r2, #0
 800c5ca:	f340 8096 	ble.w	800c6fa <_strtod_l+0x55a>
 800c5ce:	f012 000f 	ands.w	r0, r2, #15
 800c5d2:	d00a      	beq.n	800c5ea <_strtod_l+0x44a>
 800c5d4:	495c      	ldr	r1, [pc, #368]	; (800c748 <_strtod_l+0x5a8>)
 800c5d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c5da:	ed91 7b00 	vldr	d7, [r1]
 800c5de:	ec4b ab16 	vmov	d6, sl, fp
 800c5e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c5e6:	ec5b ab17 	vmov	sl, fp, d7
 800c5ea:	f032 020f 	bics.w	r2, r2, #15
 800c5ee:	d072      	beq.n	800c6d6 <_strtod_l+0x536>
 800c5f0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c5f4:	dd45      	ble.n	800c682 <_strtod_l+0x4e2>
 800c5f6:	2500      	movs	r5, #0
 800c5f8:	46a8      	mov	r8, r5
 800c5fa:	9506      	str	r5, [sp, #24]
 800c5fc:	46a9      	mov	r9, r5
 800c5fe:	2322      	movs	r3, #34	; 0x22
 800c600:	f8df b150 	ldr.w	fp, [pc, #336]	; 800c754 <_strtod_l+0x5b4>
 800c604:	6023      	str	r3, [r4, #0]
 800c606:	f04f 0a00 	mov.w	sl, #0
 800c60a:	9b06      	ldr	r3, [sp, #24]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	f43f ae09 	beq.w	800c224 <_strtod_l+0x84>
 800c612:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c614:	4620      	mov	r0, r4
 800c616:	f001 fd96 	bl	800e146 <_Bfree>
 800c61a:	4649      	mov	r1, r9
 800c61c:	4620      	mov	r0, r4
 800c61e:	f001 fd92 	bl	800e146 <_Bfree>
 800c622:	4641      	mov	r1, r8
 800c624:	4620      	mov	r0, r4
 800c626:	f001 fd8e 	bl	800e146 <_Bfree>
 800c62a:	9906      	ldr	r1, [sp, #24]
 800c62c:	4620      	mov	r0, r4
 800c62e:	f001 fd8a 	bl	800e146 <_Bfree>
 800c632:	4629      	mov	r1, r5
 800c634:	4620      	mov	r0, r4
 800c636:	f001 fd86 	bl	800e146 <_Bfree>
 800c63a:	e5f3      	b.n	800c224 <_strtod_l+0x84>
 800c63c:	9804      	ldr	r0, [sp, #16]
 800c63e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c642:	4281      	cmp	r1, r0
 800c644:	dbbd      	blt.n	800c5c2 <_strtod_l+0x422>
 800c646:	4a40      	ldr	r2, [pc, #256]	; (800c748 <_strtod_l+0x5a8>)
 800c648:	f1c3 030f 	rsb	r3, r3, #15
 800c64c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c650:	ed91 7b00 	vldr	d7, [r1]
 800c654:	ec4b ab16 	vmov	d6, sl, fp
 800c658:	1ac3      	subs	r3, r0, r3
 800c65a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c65e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c662:	ed92 6b00 	vldr	d6, [r2]
 800c666:	e796      	b.n	800c596 <_strtod_l+0x3f6>
 800c668:	3116      	adds	r1, #22
 800c66a:	dbaa      	blt.n	800c5c2 <_strtod_l+0x422>
 800c66c:	4936      	ldr	r1, [pc, #216]	; (800c748 <_strtod_l+0x5a8>)
 800c66e:	9b04      	ldr	r3, [sp, #16]
 800c670:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800c674:	ed91 7b00 	vldr	d7, [r1]
 800c678:	ec4b ab16 	vmov	d6, sl, fp
 800c67c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c680:	e78b      	b.n	800c59a <_strtod_l+0x3fa>
 800c682:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800c686:	2000      	movs	r0, #0
 800c688:	4e30      	ldr	r6, [pc, #192]	; (800c74c <_strtod_l+0x5ac>)
 800c68a:	1112      	asrs	r2, r2, #4
 800c68c:	4601      	mov	r1, r0
 800c68e:	2a01      	cmp	r2, #1
 800c690:	dc23      	bgt.n	800c6da <_strtod_l+0x53a>
 800c692:	b108      	cbz	r0, 800c698 <_strtod_l+0x4f8>
 800c694:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800c698:	4a2c      	ldr	r2, [pc, #176]	; (800c74c <_strtod_l+0x5ac>)
 800c69a:	482d      	ldr	r0, [pc, #180]	; (800c750 <_strtod_l+0x5b0>)
 800c69c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800c6a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c6a4:	ed91 7b00 	vldr	d7, [r1]
 800c6a8:	ec4b ab16 	vmov	d6, sl, fp
 800c6ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c6b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6b4:	9907      	ldr	r1, [sp, #28]
 800c6b6:	4a27      	ldr	r2, [pc, #156]	; (800c754 <_strtod_l+0x5b4>)
 800c6b8:	400a      	ands	r2, r1
 800c6ba:	4282      	cmp	r2, r0
 800c6bc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800c6c0:	d899      	bhi.n	800c5f6 <_strtod_l+0x456>
 800c6c2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c6c6:	4282      	cmp	r2, r0
 800c6c8:	bf86      	itte	hi
 800c6ca:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800c75c <_strtod_l+0x5bc>
 800c6ce:	f04f 3aff 	movhi.w	sl, #4294967295
 800c6d2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800c6d6:	2700      	movs	r7, #0
 800c6d8:	e070      	b.n	800c7bc <_strtod_l+0x61c>
 800c6da:	07d7      	lsls	r7, r2, #31
 800c6dc:	d50a      	bpl.n	800c6f4 <_strtod_l+0x554>
 800c6de:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800c6e2:	ed90 7b00 	vldr	d7, [r0]
 800c6e6:	ed9d 6b06 	vldr	d6, [sp, #24]
 800c6ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c6ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6f2:	2001      	movs	r0, #1
 800c6f4:	3101      	adds	r1, #1
 800c6f6:	1052      	asrs	r2, r2, #1
 800c6f8:	e7c9      	b.n	800c68e <_strtod_l+0x4ee>
 800c6fa:	d0ec      	beq.n	800c6d6 <_strtod_l+0x536>
 800c6fc:	4252      	negs	r2, r2
 800c6fe:	f012 000f 	ands.w	r0, r2, #15
 800c702:	d00a      	beq.n	800c71a <_strtod_l+0x57a>
 800c704:	4910      	ldr	r1, [pc, #64]	; (800c748 <_strtod_l+0x5a8>)
 800c706:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c70a:	ed91 7b00 	vldr	d7, [r1]
 800c70e:	ec4b ab16 	vmov	d6, sl, fp
 800c712:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c716:	ec5b ab17 	vmov	sl, fp, d7
 800c71a:	1112      	asrs	r2, r2, #4
 800c71c:	d0db      	beq.n	800c6d6 <_strtod_l+0x536>
 800c71e:	2a1f      	cmp	r2, #31
 800c720:	dd1e      	ble.n	800c760 <_strtod_l+0x5c0>
 800c722:	2500      	movs	r5, #0
 800c724:	46a8      	mov	r8, r5
 800c726:	9506      	str	r5, [sp, #24]
 800c728:	46a9      	mov	r9, r5
 800c72a:	2322      	movs	r3, #34	; 0x22
 800c72c:	f04f 0a00 	mov.w	sl, #0
 800c730:	f04f 0b00 	mov.w	fp, #0
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	e768      	b.n	800c60a <_strtod_l+0x46a>
 800c738:	0800eeed 	.word	0x0800eeed
 800c73c:	0800ef7b 	.word	0x0800ef7b
 800c740:	0800eef5 	.word	0x0800eef5
 800c744:	0800ef38 	.word	0x0800ef38
 800c748:	0800efb8 	.word	0x0800efb8
 800c74c:	0800ef90 	.word	0x0800ef90
 800c750:	7ca00000 	.word	0x7ca00000
 800c754:	7ff00000 	.word	0x7ff00000
 800c758:	fff80000 	.word	0xfff80000
 800c75c:	7fefffff 	.word	0x7fefffff
 800c760:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800c764:	f012 0710 	ands.w	r7, r2, #16
 800c768:	49ab      	ldr	r1, [pc, #684]	; (800ca18 <_strtod_l+0x878>)
 800c76a:	bf18      	it	ne
 800c76c:	276a      	movne	r7, #106	; 0x6a
 800c76e:	2000      	movs	r0, #0
 800c770:	2a00      	cmp	r2, #0
 800c772:	f300 8113 	bgt.w	800c99c <_strtod_l+0x7fc>
 800c776:	b108      	cbz	r0, 800c77c <_strtod_l+0x5dc>
 800c778:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800c77c:	b1bf      	cbz	r7, 800c7ae <_strtod_l+0x60e>
 800c77e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c782:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800c786:	2a00      	cmp	r2, #0
 800c788:	4659      	mov	r1, fp
 800c78a:	dd10      	ble.n	800c7ae <_strtod_l+0x60e>
 800c78c:	2a1f      	cmp	r2, #31
 800c78e:	f340 8113 	ble.w	800c9b8 <_strtod_l+0x818>
 800c792:	2a34      	cmp	r2, #52	; 0x34
 800c794:	bfde      	ittt	le
 800c796:	3a20      	suble	r2, #32
 800c798:	f04f 30ff 	movle.w	r0, #4294967295
 800c79c:	fa00 f202 	lslle.w	r2, r0, r2
 800c7a0:	f04f 0a00 	mov.w	sl, #0
 800c7a4:	bfcc      	ite	gt
 800c7a6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c7aa:	ea02 0b01 	andle.w	fp, r2, r1
 800c7ae:	ec4b ab17 	vmov	d7, sl, fp
 800c7b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ba:	d0b2      	beq.n	800c722 <_strtod_l+0x582>
 800c7bc:	9a08      	ldr	r2, [sp, #32]
 800c7be:	9200      	str	r2, [sp, #0]
 800c7c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f001 fd10 	bl	800e1ea <__s2b>
 800c7ca:	9006      	str	r0, [sp, #24]
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f43f af12 	beq.w	800c5f6 <_strtod_l+0x456>
 800c7d2:	9a04      	ldr	r2, [sp, #16]
 800c7d4:	9b04      	ldr	r3, [sp, #16]
 800c7d6:	2a00      	cmp	r2, #0
 800c7d8:	f1c3 0300 	rsb	r3, r3, #0
 800c7dc:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800ca00 <_strtod_l+0x860>
 800c7e0:	bfa8      	it	ge
 800c7e2:	2300      	movge	r3, #0
 800c7e4:	ed9f ab88 	vldr	d10, [pc, #544]	; 800ca08 <_strtod_l+0x868>
 800c7e8:	ed9f bb89 	vldr	d11, [pc, #548]	; 800ca10 <_strtod_l+0x870>
 800c7ec:	930e      	str	r3, [sp, #56]	; 0x38
 800c7ee:	2500      	movs	r5, #0
 800c7f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c7f4:	9310      	str	r3, [sp, #64]	; 0x40
 800c7f6:	46a8      	mov	r8, r5
 800c7f8:	9b06      	ldr	r3, [sp, #24]
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	6859      	ldr	r1, [r3, #4]
 800c7fe:	f001 fc6e 	bl	800e0de <_Balloc>
 800c802:	4681      	mov	r9, r0
 800c804:	2800      	cmp	r0, #0
 800c806:	f43f aefa 	beq.w	800c5fe <_strtod_l+0x45e>
 800c80a:	9b06      	ldr	r3, [sp, #24]
 800c80c:	691a      	ldr	r2, [r3, #16]
 800c80e:	3202      	adds	r2, #2
 800c810:	f103 010c 	add.w	r1, r3, #12
 800c814:	0092      	lsls	r2, r2, #2
 800c816:	300c      	adds	r0, #12
 800c818:	f001 fc56 	bl	800e0c8 <memcpy>
 800c81c:	aa1a      	add	r2, sp, #104	; 0x68
 800c81e:	a919      	add	r1, sp, #100	; 0x64
 800c820:	ec4b ab10 	vmov	d0, sl, fp
 800c824:	4620      	mov	r0, r4
 800c826:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c82a:	f001 ff99 	bl	800e760 <__d2b>
 800c82e:	9018      	str	r0, [sp, #96]	; 0x60
 800c830:	2800      	cmp	r0, #0
 800c832:	f43f aee4 	beq.w	800c5fe <_strtod_l+0x45e>
 800c836:	2101      	movs	r1, #1
 800c838:	4620      	mov	r0, r4
 800c83a:	f001 fd62 	bl	800e302 <__i2b>
 800c83e:	4680      	mov	r8, r0
 800c840:	2800      	cmp	r0, #0
 800c842:	f43f aedc 	beq.w	800c5fe <_strtod_l+0x45e>
 800c846:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800c848:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c84a:	2e00      	cmp	r6, #0
 800c84c:	bfb1      	iteee	lt
 800c84e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800c850:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c852:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800c854:	18f3      	addge	r3, r6, r3
 800c856:	bfba      	itte	lt
 800c858:	1b98      	sublt	r0, r3, r6
 800c85a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c85c:	9308      	strge	r3, [sp, #32]
 800c85e:	eba6 0607 	sub.w	r6, r6, r7
 800c862:	bfb8      	it	lt
 800c864:	9308      	strlt	r3, [sp, #32]
 800c866:	4416      	add	r6, r2
 800c868:	4b6c      	ldr	r3, [pc, #432]	; (800ca1c <_strtod_l+0x87c>)
 800c86a:	3e01      	subs	r6, #1
 800c86c:	429e      	cmp	r6, r3
 800c86e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c872:	f280 80b4 	bge.w	800c9de <_strtod_l+0x83e>
 800c876:	1b9b      	subs	r3, r3, r6
 800c878:	2b1f      	cmp	r3, #31
 800c87a:	eba2 0203 	sub.w	r2, r2, r3
 800c87e:	f04f 0101 	mov.w	r1, #1
 800c882:	f300 80a0 	bgt.w	800c9c6 <_strtod_l+0x826>
 800c886:	fa01 f303 	lsl.w	r3, r1, r3
 800c88a:	9311      	str	r3, [sp, #68]	; 0x44
 800c88c:	2300      	movs	r3, #0
 800c88e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c890:	9b08      	ldr	r3, [sp, #32]
 800c892:	4413      	add	r3, r2
 800c894:	4402      	add	r2, r0
 800c896:	18be      	adds	r6, r7, r2
 800c898:	9a08      	ldr	r2, [sp, #32]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	bfa8      	it	ge
 800c89e:	461a      	movge	r2, r3
 800c8a0:	42b2      	cmp	r2, r6
 800c8a2:	bfa8      	it	ge
 800c8a4:	4632      	movge	r2, r6
 800c8a6:	2a00      	cmp	r2, #0
 800c8a8:	dd04      	ble.n	800c8b4 <_strtod_l+0x714>
 800c8aa:	9908      	ldr	r1, [sp, #32]
 800c8ac:	1a9b      	subs	r3, r3, r2
 800c8ae:	1ab6      	subs	r6, r6, r2
 800c8b0:	1a8a      	subs	r2, r1, r2
 800c8b2:	9208      	str	r2, [sp, #32]
 800c8b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8b6:	b1c2      	cbz	r2, 800c8ea <_strtod_l+0x74a>
 800c8b8:	4641      	mov	r1, r8
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	9315      	str	r3, [sp, #84]	; 0x54
 800c8be:	f001 fdbf 	bl	800e440 <__pow5mult>
 800c8c2:	4680      	mov	r8, r0
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	f43f ae9a 	beq.w	800c5fe <_strtod_l+0x45e>
 800c8ca:	4601      	mov	r1, r0
 800c8cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f001 fd20 	bl	800e314 <__multiply>
 800c8d4:	900c      	str	r0, [sp, #48]	; 0x30
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	f43f ae91 	beq.w	800c5fe <_strtod_l+0x45e>
 800c8dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f001 fc31 	bl	800e146 <_Bfree>
 800c8e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8e8:	9218      	str	r2, [sp, #96]	; 0x60
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	dc7c      	bgt.n	800c9e8 <_strtod_l+0x848>
 800c8ee:	9b04      	ldr	r3, [sp, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	dd08      	ble.n	800c906 <_strtod_l+0x766>
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f001 fda1 	bl	800e440 <__pow5mult>
 800c8fe:	4681      	mov	r9, r0
 800c900:	2800      	cmp	r0, #0
 800c902:	f43f ae7c 	beq.w	800c5fe <_strtod_l+0x45e>
 800c906:	2e00      	cmp	r6, #0
 800c908:	dd08      	ble.n	800c91c <_strtod_l+0x77c>
 800c90a:	4649      	mov	r1, r9
 800c90c:	4632      	mov	r2, r6
 800c90e:	4620      	mov	r0, r4
 800c910:	f001 fde4 	bl	800e4dc <__lshift>
 800c914:	4681      	mov	r9, r0
 800c916:	2800      	cmp	r0, #0
 800c918:	f43f ae71 	beq.w	800c5fe <_strtod_l+0x45e>
 800c91c:	9b08      	ldr	r3, [sp, #32]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	dd08      	ble.n	800c934 <_strtod_l+0x794>
 800c922:	4641      	mov	r1, r8
 800c924:	461a      	mov	r2, r3
 800c926:	4620      	mov	r0, r4
 800c928:	f001 fdd8 	bl	800e4dc <__lshift>
 800c92c:	4680      	mov	r8, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	f43f ae65 	beq.w	800c5fe <_strtod_l+0x45e>
 800c934:	464a      	mov	r2, r9
 800c936:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c938:	4620      	mov	r0, r4
 800c93a:	f001 fe3d 	bl	800e5b8 <__mdiff>
 800c93e:	4605      	mov	r5, r0
 800c940:	2800      	cmp	r0, #0
 800c942:	f43f ae5c 	beq.w	800c5fe <_strtod_l+0x45e>
 800c946:	68c3      	ldr	r3, [r0, #12]
 800c948:	930c      	str	r3, [sp, #48]	; 0x30
 800c94a:	2300      	movs	r3, #0
 800c94c:	60c3      	str	r3, [r0, #12]
 800c94e:	4641      	mov	r1, r8
 800c950:	f001 fe18 	bl	800e584 <__mcmp>
 800c954:	2800      	cmp	r0, #0
 800c956:	da63      	bge.n	800ca20 <_strtod_l+0x880>
 800c958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c95a:	b9e3      	cbnz	r3, 800c996 <_strtod_l+0x7f6>
 800c95c:	f1ba 0f00 	cmp.w	sl, #0
 800c960:	d119      	bne.n	800c996 <_strtod_l+0x7f6>
 800c962:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c966:	b9b3      	cbnz	r3, 800c996 <_strtod_l+0x7f6>
 800c968:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c96c:	0d1b      	lsrs	r3, r3, #20
 800c96e:	051b      	lsls	r3, r3, #20
 800c970:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c974:	d90f      	bls.n	800c996 <_strtod_l+0x7f6>
 800c976:	696b      	ldr	r3, [r5, #20]
 800c978:	b913      	cbnz	r3, 800c980 <_strtod_l+0x7e0>
 800c97a:	692b      	ldr	r3, [r5, #16]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	dd0a      	ble.n	800c996 <_strtod_l+0x7f6>
 800c980:	4629      	mov	r1, r5
 800c982:	2201      	movs	r2, #1
 800c984:	4620      	mov	r0, r4
 800c986:	f001 fda9 	bl	800e4dc <__lshift>
 800c98a:	4641      	mov	r1, r8
 800c98c:	4605      	mov	r5, r0
 800c98e:	f001 fdf9 	bl	800e584 <__mcmp>
 800c992:	2800      	cmp	r0, #0
 800c994:	dc75      	bgt.n	800ca82 <_strtod_l+0x8e2>
 800c996:	2f00      	cmp	r7, #0
 800c998:	d17f      	bne.n	800ca9a <_strtod_l+0x8fa>
 800c99a:	e63a      	b.n	800c612 <_strtod_l+0x472>
 800c99c:	07d6      	lsls	r6, r2, #31
 800c99e:	d508      	bpl.n	800c9b2 <_strtod_l+0x812>
 800c9a0:	ed9d 6b06 	vldr	d6, [sp, #24]
 800c9a4:	ed91 7b00 	vldr	d7, [r1]
 800c9a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c9ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9b0:	2001      	movs	r0, #1
 800c9b2:	1052      	asrs	r2, r2, #1
 800c9b4:	3108      	adds	r1, #8
 800c9b6:	e6db      	b.n	800c770 <_strtod_l+0x5d0>
 800c9b8:	f04f 31ff 	mov.w	r1, #4294967295
 800c9bc:	fa01 f202 	lsl.w	r2, r1, r2
 800c9c0:	ea02 0a0a 	and.w	sl, r2, sl
 800c9c4:	e6f3      	b.n	800c7ae <_strtod_l+0x60e>
 800c9c6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c9ca:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c9ce:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c9d2:	36e2      	adds	r6, #226	; 0xe2
 800c9d4:	fa01 f306 	lsl.w	r3, r1, r6
 800c9d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9da:	9111      	str	r1, [sp, #68]	; 0x44
 800c9dc:	e758      	b.n	800c890 <_strtod_l+0x6f0>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	9311      	str	r3, [sp, #68]	; 0x44
 800c9e6:	e753      	b.n	800c890 <_strtod_l+0x6f0>
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f001 fd75 	bl	800e4dc <__lshift>
 800c9f2:	9018      	str	r0, [sp, #96]	; 0x60
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	f47f af7a 	bne.w	800c8ee <_strtod_l+0x74e>
 800c9fa:	e600      	b.n	800c5fe <_strtod_l+0x45e>
 800c9fc:	f3af 8000 	nop.w
 800ca00:	94a03595 	.word	0x94a03595
 800ca04:	3fdfffff 	.word	0x3fdfffff
 800ca08:	35afe535 	.word	0x35afe535
 800ca0c:	3fe00000 	.word	0x3fe00000
 800ca10:	94a03595 	.word	0x94a03595
 800ca14:	3fcfffff 	.word	0x3fcfffff
 800ca18:	0800ef50 	.word	0x0800ef50
 800ca1c:	fffffc02 	.word	0xfffffc02
 800ca20:	f8cd b020 	str.w	fp, [sp, #32]
 800ca24:	f040 8085 	bne.w	800cb32 <_strtod_l+0x992>
 800ca28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca2e:	b322      	cbz	r2, 800ca7a <_strtod_l+0x8da>
 800ca30:	4ab7      	ldr	r2, [pc, #732]	; (800cd10 <_strtod_l+0xb70>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d154      	bne.n	800cae0 <_strtod_l+0x940>
 800ca36:	4651      	mov	r1, sl
 800ca38:	b1e7      	cbz	r7, 800ca74 <_strtod_l+0x8d4>
 800ca3a:	4bb6      	ldr	r3, [pc, #728]	; (800cd14 <_strtod_l+0xb74>)
 800ca3c:	465a      	mov	r2, fp
 800ca3e:	4013      	ands	r3, r2
 800ca40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca44:	f04f 32ff 	mov.w	r2, #4294967295
 800ca48:	d803      	bhi.n	800ca52 <_strtod_l+0x8b2>
 800ca4a:	0d1b      	lsrs	r3, r3, #20
 800ca4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ca50:	409a      	lsls	r2, r3
 800ca52:	4291      	cmp	r1, r2
 800ca54:	d144      	bne.n	800cae0 <_strtod_l+0x940>
 800ca56:	4bb0      	ldr	r3, [pc, #704]	; (800cd18 <_strtod_l+0xb78>)
 800ca58:	9a08      	ldr	r2, [sp, #32]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d102      	bne.n	800ca64 <_strtod_l+0x8c4>
 800ca5e:	3101      	adds	r1, #1
 800ca60:	f43f adcd 	beq.w	800c5fe <_strtod_l+0x45e>
 800ca64:	4bab      	ldr	r3, [pc, #684]	; (800cd14 <_strtod_l+0xb74>)
 800ca66:	9a08      	ldr	r2, [sp, #32]
 800ca68:	401a      	ands	r2, r3
 800ca6a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800ca6e:	f04f 0a00 	mov.w	sl, #0
 800ca72:	e790      	b.n	800c996 <_strtod_l+0x7f6>
 800ca74:	f04f 32ff 	mov.w	r2, #4294967295
 800ca78:	e7eb      	b.n	800ca52 <_strtod_l+0x8b2>
 800ca7a:	bb8b      	cbnz	r3, 800cae0 <_strtod_l+0x940>
 800ca7c:	f1ba 0f00 	cmp.w	sl, #0
 800ca80:	d12e      	bne.n	800cae0 <_strtod_l+0x940>
 800ca82:	465b      	mov	r3, fp
 800ca84:	4aa3      	ldr	r2, [pc, #652]	; (800cd14 <_strtod_l+0xb74>)
 800ca86:	b30f      	cbz	r7, 800cacc <_strtod_l+0x92c>
 800ca88:	ea02 010b 	and.w	r1, r2, fp
 800ca8c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca90:	dc1c      	bgt.n	800cacc <_strtod_l+0x92c>
 800ca92:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca96:	f77f ae48 	ble.w	800c72a <_strtod_l+0x58a>
 800ca9a:	4aa0      	ldr	r2, [pc, #640]	; (800cd1c <_strtod_l+0xb7c>)
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800caa2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800caa6:	ec4b ab17 	vmov	d7, sl, fp
 800caaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800caae:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cab2:	9b05      	ldr	r3, [sp, #20]
 800cab4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f47f adaa 	bne.w	800c612 <_strtod_l+0x472>
 800cabe:	9b04      	ldr	r3, [sp, #16]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f47f ada6 	bne.w	800c612 <_strtod_l+0x472>
 800cac6:	2322      	movs	r3, #34	; 0x22
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	e5a2      	b.n	800c612 <_strtod_l+0x472>
 800cacc:	4013      	ands	r3, r2
 800cace:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cad2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cad6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cada:	f04f 3aff 	mov.w	sl, #4294967295
 800cade:	e75a      	b.n	800c996 <_strtod_l+0x7f6>
 800cae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cae2:	b18b      	cbz	r3, 800cb08 <_strtod_l+0x968>
 800cae4:	9a08      	ldr	r2, [sp, #32]
 800cae6:	4213      	tst	r3, r2
 800cae8:	f43f af55 	beq.w	800c996 <_strtod_l+0x7f6>
 800caec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caee:	463a      	mov	r2, r7
 800caf0:	4650      	mov	r0, sl
 800caf2:	4659      	mov	r1, fp
 800caf4:	b163      	cbz	r3, 800cb10 <_strtod_l+0x970>
 800caf6:	f7ff fb39 	bl	800c16c <sulp>
 800cafa:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800cafe:	ee37 7b00 	vadd.f64	d7, d7, d0
 800cb02:	ec5b ab17 	vmov	sl, fp, d7
 800cb06:	e746      	b.n	800c996 <_strtod_l+0x7f6>
 800cb08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb0a:	ea13 0f0a 	tst.w	r3, sl
 800cb0e:	e7eb      	b.n	800cae8 <_strtod_l+0x948>
 800cb10:	f7ff fb2c 	bl	800c16c <sulp>
 800cb14:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800cb18:	ee37 7b40 	vsub.f64	d7, d7, d0
 800cb1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb28:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cb2c:	f43f adfd 	beq.w	800c72a <_strtod_l+0x58a>
 800cb30:	e731      	b.n	800c996 <_strtod_l+0x7f6>
 800cb32:	4641      	mov	r1, r8
 800cb34:	4628      	mov	r0, r5
 800cb36:	f001 fe62 	bl	800e7fe <__ratio>
 800cb3a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800cb3e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb46:	d869      	bhi.n	800cc1c <_strtod_l+0xa7c>
 800cb48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d045      	beq.n	800cbda <_strtod_l+0xa3a>
 800cb4e:	4b74      	ldr	r3, [pc, #464]	; (800cd20 <_strtod_l+0xb80>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800cb56:	9808      	ldr	r0, [sp, #32]
 800cb58:	496e      	ldr	r1, [pc, #440]	; (800cd14 <_strtod_l+0xb74>)
 800cb5a:	ea00 0601 	and.w	r6, r0, r1
 800cb5e:	4871      	ldr	r0, [pc, #452]	; (800cd24 <_strtod_l+0xb84>)
 800cb60:	4286      	cmp	r6, r0
 800cb62:	f040 8089 	bne.w	800cc78 <_strtod_l+0xad8>
 800cb66:	910f      	str	r1, [sp, #60]	; 0x3c
 800cb68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb6c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800cb70:	9908      	ldr	r1, [sp, #32]
 800cb72:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800cb76:	ec4b ab10 	vmov	d0, sl, fp
 800cb7a:	ec43 2b1c 	vmov	d12, r2, r3
 800cb7e:	f001 fd79 	bl	800e674 <__ulp>
 800cb82:	ec4b ab1d 	vmov	d13, sl, fp
 800cb86:	eeac db00 	vfma.f64	d13, d12, d0
 800cb8a:	ed8d db08 	vstr	d13, [sp, #32]
 800cb8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cb92:	4a65      	ldr	r2, [pc, #404]	; (800cd28 <_strtod_l+0xb88>)
 800cb94:	4019      	ands	r1, r3
 800cb96:	4291      	cmp	r1, r2
 800cb98:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800cb9c:	d948      	bls.n	800cc30 <_strtod_l+0xa90>
 800cb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cba0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d103      	bne.n	800cbb0 <_strtod_l+0xa10>
 800cba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbaa:	3301      	adds	r3, #1
 800cbac:	f43f ad27 	beq.w	800c5fe <_strtod_l+0x45e>
 800cbb0:	f8df b164 	ldr.w	fp, [pc, #356]	; 800cd18 <_strtod_l+0xb78>
 800cbb4:	f04f 3aff 	mov.w	sl, #4294967295
 800cbb8:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f001 fac3 	bl	800e146 <_Bfree>
 800cbc0:	4649      	mov	r1, r9
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	f001 fabf 	bl	800e146 <_Bfree>
 800cbc8:	4641      	mov	r1, r8
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f001 fabb 	bl	800e146 <_Bfree>
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	4620      	mov	r0, r4
 800cbd4:	f001 fab7 	bl	800e146 <_Bfree>
 800cbd8:	e60e      	b.n	800c7f8 <_strtod_l+0x658>
 800cbda:	f1ba 0f00 	cmp.w	sl, #0
 800cbde:	d113      	bne.n	800cc08 <_strtod_l+0xa68>
 800cbe0:	9b08      	ldr	r3, [sp, #32]
 800cbe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbe6:	b9b3      	cbnz	r3, 800cc16 <_strtod_l+0xa76>
 800cbe8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cbec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800cbf8:	d401      	bmi.n	800cbfe <_strtod_l+0xa5e>
 800cbfa:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cbfe:	eeb1 7b48 	vneg.f64	d7, d8
 800cc02:	ec53 2b17 	vmov	r2, r3, d7
 800cc06:	e7a6      	b.n	800cb56 <_strtod_l+0x9b6>
 800cc08:	f1ba 0f01 	cmp.w	sl, #1
 800cc0c:	d103      	bne.n	800cc16 <_strtod_l+0xa76>
 800cc0e:	9b08      	ldr	r3, [sp, #32]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f43f ad8a 	beq.w	800c72a <_strtod_l+0x58a>
 800cc16:	2200      	movs	r2, #0
 800cc18:	4b44      	ldr	r3, [pc, #272]	; (800cd2c <_strtod_l+0xb8c>)
 800cc1a:	e79a      	b.n	800cb52 <_strtod_l+0x9b2>
 800cc1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc1e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800cc22:	ee20 8b08 	vmul.f64	d8, d0, d8
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0e9      	beq.n	800cbfe <_strtod_l+0xa5e>
 800cc2a:	ec53 2b18 	vmov	r2, r3, d8
 800cc2e:	e792      	b.n	800cb56 <_strtod_l+0x9b6>
 800cc30:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cc34:	2f00      	cmp	r7, #0
 800cc36:	d1bf      	bne.n	800cbb8 <_strtod_l+0xa18>
 800cc38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc3c:	0d1b      	lsrs	r3, r3, #20
 800cc3e:	051b      	lsls	r3, r3, #20
 800cc40:	429e      	cmp	r6, r3
 800cc42:	d1b9      	bne.n	800cbb8 <_strtod_l+0xa18>
 800cc44:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800cc48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc4a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800cc4e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800cc52:	b92b      	cbnz	r3, 800cc60 <_strtod_l+0xac0>
 800cc54:	f1ba 0f00 	cmp.w	sl, #0
 800cc58:	d102      	bne.n	800cc60 <_strtod_l+0xac0>
 800cc5a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800cc5e:	b3d2      	cbz	r2, 800ccd6 <_strtod_l+0xb36>
 800cc60:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800cc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc68:	f53f acd3 	bmi.w	800c612 <_strtod_l+0x472>
 800cc6c:	eeb4 8bca 	vcmpe.f64	d8, d10
 800cc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc74:	dda0      	ble.n	800cbb8 <_strtod_l+0xa18>
 800cc76:	e4cc      	b.n	800c612 <_strtod_l+0x472>
 800cc78:	b1ef      	cbz	r7, 800ccb6 <_strtod_l+0xb16>
 800cc7a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800cc7e:	d81a      	bhi.n	800ccb6 <_strtod_l+0xb16>
 800cc80:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800cd08 <_strtod_l+0xb68>
 800cc84:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc8c:	d810      	bhi.n	800ccb0 <_strtod_l+0xb10>
 800cc8e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800cc92:	ee17 3a90 	vmov	r3, s15
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	bf08      	it	eq
 800cc9a:	2301      	moveq	r3, #1
 800cc9c:	ee07 3a90 	vmov	s15, r3
 800cca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cca2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800cca6:	b99b      	cbnz	r3, 800ccd0 <_strtod_l+0xb30>
 800cca8:	eeb1 7b48 	vneg.f64	d7, d8
 800ccac:	ec53 2b17 	vmov	r2, r3, d7
 800ccb0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800ccb4:	1b8b      	subs	r3, r1, r6
 800ccb6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ccba:	ec43 2b1c 	vmov	d12, r2, r3
 800ccbe:	f001 fcd9 	bl	800e674 <__ulp>
 800ccc2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800ccc6:	eeac 7b00 	vfma.f64	d7, d12, d0
 800ccca:	ec5b ab17 	vmov	sl, fp, d7
 800ccce:	e7b1      	b.n	800cc34 <_strtod_l+0xa94>
 800ccd0:	ec53 2b18 	vmov	r2, r3, d8
 800ccd4:	e7ec      	b.n	800ccb0 <_strtod_l+0xb10>
 800ccd6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ccda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccde:	f57f af6b 	bpl.w	800cbb8 <_strtod_l+0xa18>
 800cce2:	e496      	b.n	800c612 <_strtod_l+0x472>
 800cce4:	2300      	movs	r3, #0
 800cce6:	930d      	str	r3, [sp, #52]	; 0x34
 800cce8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ccea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccec:	6013      	str	r3, [r2, #0]
 800ccee:	f7ff ba9d 	b.w	800c22c <_strtod_l+0x8c>
 800ccf2:	2a65      	cmp	r2, #101	; 0x65
 800ccf4:	f04f 0100 	mov.w	r1, #0
 800ccf8:	f43f ab97 	beq.w	800c42a <_strtod_l+0x28a>
 800ccfc:	2701      	movs	r7, #1
 800ccfe:	460b      	mov	r3, r1
 800cd00:	9704      	str	r7, [sp, #16]
 800cd02:	f7ff bb0a 	b.w	800c31a <_strtod_l+0x17a>
 800cd06:	bf00      	nop
 800cd08:	ffc00000 	.word	0xffc00000
 800cd0c:	41dfffff 	.word	0x41dfffff
 800cd10:	000fffff 	.word	0x000fffff
 800cd14:	7ff00000 	.word	0x7ff00000
 800cd18:	7fefffff 	.word	0x7fefffff
 800cd1c:	39500000 	.word	0x39500000
 800cd20:	3ff00000 	.word	0x3ff00000
 800cd24:	7fe00000 	.word	0x7fe00000
 800cd28:	7c9fffff 	.word	0x7c9fffff
 800cd2c:	bff00000 	.word	0xbff00000

0800cd30 <_strtod_r>:
 800cd30:	4b05      	ldr	r3, [pc, #20]	; (800cd48 <_strtod_r+0x18>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	b410      	push	{r4}
 800cd36:	6a1b      	ldr	r3, [r3, #32]
 800cd38:	4c04      	ldr	r4, [pc, #16]	; (800cd4c <_strtod_r+0x1c>)
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	bf08      	it	eq
 800cd3e:	4623      	moveq	r3, r4
 800cd40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd44:	f7ff ba2c 	b.w	800c1a0 <_strtod_l>
 800cd48:	20000024 	.word	0x20000024
 800cd4c:	20000088 	.word	0x20000088

0800cd50 <_strtol_l.isra.0>:
 800cd50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd54:	4680      	mov	r8, r0
 800cd56:	4689      	mov	r9, r1
 800cd58:	4692      	mov	sl, r2
 800cd5a:	461e      	mov	r6, r3
 800cd5c:	460f      	mov	r7, r1
 800cd5e:	463d      	mov	r5, r7
 800cd60:	9808      	ldr	r0, [sp, #32]
 800cd62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd66:	f001 f981 	bl	800e06c <__locale_ctype_ptr_l>
 800cd6a:	4420      	add	r0, r4
 800cd6c:	7843      	ldrb	r3, [r0, #1]
 800cd6e:	f013 0308 	ands.w	r3, r3, #8
 800cd72:	d132      	bne.n	800cdda <_strtol_l.isra.0+0x8a>
 800cd74:	2c2d      	cmp	r4, #45	; 0x2d
 800cd76:	d132      	bne.n	800cdde <_strtol_l.isra.0+0x8e>
 800cd78:	787c      	ldrb	r4, [r7, #1]
 800cd7a:	1cbd      	adds	r5, r7, #2
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	2e00      	cmp	r6, #0
 800cd80:	d05d      	beq.n	800ce3e <_strtol_l.isra.0+0xee>
 800cd82:	2e10      	cmp	r6, #16
 800cd84:	d109      	bne.n	800cd9a <_strtol_l.isra.0+0x4a>
 800cd86:	2c30      	cmp	r4, #48	; 0x30
 800cd88:	d107      	bne.n	800cd9a <_strtol_l.isra.0+0x4a>
 800cd8a:	782b      	ldrb	r3, [r5, #0]
 800cd8c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd90:	2b58      	cmp	r3, #88	; 0x58
 800cd92:	d14f      	bne.n	800ce34 <_strtol_l.isra.0+0xe4>
 800cd94:	786c      	ldrb	r4, [r5, #1]
 800cd96:	2610      	movs	r6, #16
 800cd98:	3502      	adds	r5, #2
 800cd9a:	2a00      	cmp	r2, #0
 800cd9c:	bf14      	ite	ne
 800cd9e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800cda2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800cda6:	2700      	movs	r7, #0
 800cda8:	fbb1 fcf6 	udiv	ip, r1, r6
 800cdac:	4638      	mov	r0, r7
 800cdae:	fb06 1e1c 	mls	lr, r6, ip, r1
 800cdb2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800cdb6:	2b09      	cmp	r3, #9
 800cdb8:	d817      	bhi.n	800cdea <_strtol_l.isra.0+0x9a>
 800cdba:	461c      	mov	r4, r3
 800cdbc:	42a6      	cmp	r6, r4
 800cdbe:	dd23      	ble.n	800ce08 <_strtol_l.isra.0+0xb8>
 800cdc0:	1c7b      	adds	r3, r7, #1
 800cdc2:	d007      	beq.n	800cdd4 <_strtol_l.isra.0+0x84>
 800cdc4:	4584      	cmp	ip, r0
 800cdc6:	d31c      	bcc.n	800ce02 <_strtol_l.isra.0+0xb2>
 800cdc8:	d101      	bne.n	800cdce <_strtol_l.isra.0+0x7e>
 800cdca:	45a6      	cmp	lr, r4
 800cdcc:	db19      	blt.n	800ce02 <_strtol_l.isra.0+0xb2>
 800cdce:	fb00 4006 	mla	r0, r0, r6, r4
 800cdd2:	2701      	movs	r7, #1
 800cdd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdd8:	e7eb      	b.n	800cdb2 <_strtol_l.isra.0+0x62>
 800cdda:	462f      	mov	r7, r5
 800cddc:	e7bf      	b.n	800cd5e <_strtol_l.isra.0+0xe>
 800cdde:	2c2b      	cmp	r4, #43	; 0x2b
 800cde0:	bf04      	itt	eq
 800cde2:	1cbd      	addeq	r5, r7, #2
 800cde4:	787c      	ldrbeq	r4, [r7, #1]
 800cde6:	461a      	mov	r2, r3
 800cde8:	e7c9      	b.n	800cd7e <_strtol_l.isra.0+0x2e>
 800cdea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800cdee:	2b19      	cmp	r3, #25
 800cdf0:	d801      	bhi.n	800cdf6 <_strtol_l.isra.0+0xa6>
 800cdf2:	3c37      	subs	r4, #55	; 0x37
 800cdf4:	e7e2      	b.n	800cdbc <_strtol_l.isra.0+0x6c>
 800cdf6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cdfa:	2b19      	cmp	r3, #25
 800cdfc:	d804      	bhi.n	800ce08 <_strtol_l.isra.0+0xb8>
 800cdfe:	3c57      	subs	r4, #87	; 0x57
 800ce00:	e7dc      	b.n	800cdbc <_strtol_l.isra.0+0x6c>
 800ce02:	f04f 37ff 	mov.w	r7, #4294967295
 800ce06:	e7e5      	b.n	800cdd4 <_strtol_l.isra.0+0x84>
 800ce08:	1c7b      	adds	r3, r7, #1
 800ce0a:	d108      	bne.n	800ce1e <_strtol_l.isra.0+0xce>
 800ce0c:	2322      	movs	r3, #34	; 0x22
 800ce0e:	f8c8 3000 	str.w	r3, [r8]
 800ce12:	4608      	mov	r0, r1
 800ce14:	f1ba 0f00 	cmp.w	sl, #0
 800ce18:	d107      	bne.n	800ce2a <_strtol_l.isra.0+0xda>
 800ce1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce1e:	b102      	cbz	r2, 800ce22 <_strtol_l.isra.0+0xd2>
 800ce20:	4240      	negs	r0, r0
 800ce22:	f1ba 0f00 	cmp.w	sl, #0
 800ce26:	d0f8      	beq.n	800ce1a <_strtol_l.isra.0+0xca>
 800ce28:	b10f      	cbz	r7, 800ce2e <_strtol_l.isra.0+0xde>
 800ce2a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ce2e:	f8ca 9000 	str.w	r9, [sl]
 800ce32:	e7f2      	b.n	800ce1a <_strtol_l.isra.0+0xca>
 800ce34:	2430      	movs	r4, #48	; 0x30
 800ce36:	2e00      	cmp	r6, #0
 800ce38:	d1af      	bne.n	800cd9a <_strtol_l.isra.0+0x4a>
 800ce3a:	2608      	movs	r6, #8
 800ce3c:	e7ad      	b.n	800cd9a <_strtol_l.isra.0+0x4a>
 800ce3e:	2c30      	cmp	r4, #48	; 0x30
 800ce40:	d0a3      	beq.n	800cd8a <_strtol_l.isra.0+0x3a>
 800ce42:	260a      	movs	r6, #10
 800ce44:	e7a9      	b.n	800cd9a <_strtol_l.isra.0+0x4a>
	...

0800ce48 <_strtol_r>:
 800ce48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce4a:	4c06      	ldr	r4, [pc, #24]	; (800ce64 <_strtol_r+0x1c>)
 800ce4c:	4d06      	ldr	r5, [pc, #24]	; (800ce68 <_strtol_r+0x20>)
 800ce4e:	6824      	ldr	r4, [r4, #0]
 800ce50:	6a24      	ldr	r4, [r4, #32]
 800ce52:	2c00      	cmp	r4, #0
 800ce54:	bf08      	it	eq
 800ce56:	462c      	moveq	r4, r5
 800ce58:	9400      	str	r4, [sp, #0]
 800ce5a:	f7ff ff79 	bl	800cd50 <_strtol_l.isra.0>
 800ce5e:	b003      	add	sp, #12
 800ce60:	bd30      	pop	{r4, r5, pc}
 800ce62:	bf00      	nop
 800ce64:	20000024 	.word	0x20000024
 800ce68:	20000088 	.word	0x20000088

0800ce6c <quorem>:
 800ce6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce70:	6903      	ldr	r3, [r0, #16]
 800ce72:	690c      	ldr	r4, [r1, #16]
 800ce74:	42a3      	cmp	r3, r4
 800ce76:	4680      	mov	r8, r0
 800ce78:	f2c0 8082 	blt.w	800cf80 <quorem+0x114>
 800ce7c:	3c01      	subs	r4, #1
 800ce7e:	f101 0714 	add.w	r7, r1, #20
 800ce82:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ce86:	f100 0614 	add.w	r6, r0, #20
 800ce8a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ce8e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ce92:	eb06 030c 	add.w	r3, r6, ip
 800ce96:	3501      	adds	r5, #1
 800ce98:	eb07 090c 	add.w	r9, r7, ip
 800ce9c:	9301      	str	r3, [sp, #4]
 800ce9e:	fbb0 f5f5 	udiv	r5, r0, r5
 800cea2:	b395      	cbz	r5, 800cf0a <quorem+0x9e>
 800cea4:	f04f 0a00 	mov.w	sl, #0
 800cea8:	4638      	mov	r0, r7
 800ceaa:	46b6      	mov	lr, r6
 800ceac:	46d3      	mov	fp, sl
 800ceae:	f850 2b04 	ldr.w	r2, [r0], #4
 800ceb2:	b293      	uxth	r3, r2
 800ceb4:	fb05 a303 	mla	r3, r5, r3, sl
 800ceb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	ebab 0303 	sub.w	r3, fp, r3
 800cec2:	0c12      	lsrs	r2, r2, #16
 800cec4:	f8de b000 	ldr.w	fp, [lr]
 800cec8:	fb05 a202 	mla	r2, r5, r2, sl
 800cecc:	fa13 f38b 	uxtah	r3, r3, fp
 800ced0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ced4:	fa1f fb82 	uxth.w	fp, r2
 800ced8:	f8de 2000 	ldr.w	r2, [lr]
 800cedc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ceea:	4581      	cmp	r9, r0
 800ceec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cef0:	f84e 3b04 	str.w	r3, [lr], #4
 800cef4:	d2db      	bcs.n	800ceae <quorem+0x42>
 800cef6:	f856 300c 	ldr.w	r3, [r6, ip]
 800cefa:	b933      	cbnz	r3, 800cf0a <quorem+0x9e>
 800cefc:	9b01      	ldr	r3, [sp, #4]
 800cefe:	3b04      	subs	r3, #4
 800cf00:	429e      	cmp	r6, r3
 800cf02:	461a      	mov	r2, r3
 800cf04:	d330      	bcc.n	800cf68 <quorem+0xfc>
 800cf06:	f8c8 4010 	str.w	r4, [r8, #16]
 800cf0a:	4640      	mov	r0, r8
 800cf0c:	f001 fb3a 	bl	800e584 <__mcmp>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	db25      	blt.n	800cf60 <quorem+0xf4>
 800cf14:	3501      	adds	r5, #1
 800cf16:	4630      	mov	r0, r6
 800cf18:	f04f 0c00 	mov.w	ip, #0
 800cf1c:	f857 2b04 	ldr.w	r2, [r7], #4
 800cf20:	f8d0 e000 	ldr.w	lr, [r0]
 800cf24:	b293      	uxth	r3, r2
 800cf26:	ebac 0303 	sub.w	r3, ip, r3
 800cf2a:	0c12      	lsrs	r2, r2, #16
 800cf2c:	fa13 f38e 	uxtah	r3, r3, lr
 800cf30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf3e:	45b9      	cmp	r9, r7
 800cf40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cf44:	f840 3b04 	str.w	r3, [r0], #4
 800cf48:	d2e8      	bcs.n	800cf1c <quorem+0xb0>
 800cf4a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cf4e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cf52:	b92a      	cbnz	r2, 800cf60 <quorem+0xf4>
 800cf54:	3b04      	subs	r3, #4
 800cf56:	429e      	cmp	r6, r3
 800cf58:	461a      	mov	r2, r3
 800cf5a:	d30b      	bcc.n	800cf74 <quorem+0x108>
 800cf5c:	f8c8 4010 	str.w	r4, [r8, #16]
 800cf60:	4628      	mov	r0, r5
 800cf62:	b003      	add	sp, #12
 800cf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf68:	6812      	ldr	r2, [r2, #0]
 800cf6a:	3b04      	subs	r3, #4
 800cf6c:	2a00      	cmp	r2, #0
 800cf6e:	d1ca      	bne.n	800cf06 <quorem+0x9a>
 800cf70:	3c01      	subs	r4, #1
 800cf72:	e7c5      	b.n	800cf00 <quorem+0x94>
 800cf74:	6812      	ldr	r2, [r2, #0]
 800cf76:	3b04      	subs	r3, #4
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	d1ef      	bne.n	800cf5c <quorem+0xf0>
 800cf7c:	3c01      	subs	r4, #1
 800cf7e:	e7ea      	b.n	800cf56 <quorem+0xea>
 800cf80:	2000      	movs	r0, #0
 800cf82:	e7ee      	b.n	800cf62 <quorem+0xf6>
 800cf84:	0000      	movs	r0, r0
	...

0800cf88 <_dtoa_r>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	ec57 6b10 	vmov	r6, r7, d0
 800cf90:	b095      	sub	sp, #84	; 0x54
 800cf92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf94:	9108      	str	r1, [sp, #32]
 800cf96:	4604      	mov	r4, r0
 800cf98:	920a      	str	r2, [sp, #40]	; 0x28
 800cf9a:	9311      	str	r3, [sp, #68]	; 0x44
 800cf9c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800cfa0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800cfa4:	b93d      	cbnz	r5, 800cfb6 <_dtoa_r+0x2e>
 800cfa6:	2010      	movs	r0, #16
 800cfa8:	f001 f874 	bl	800e094 <malloc>
 800cfac:	6260      	str	r0, [r4, #36]	; 0x24
 800cfae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cfb2:	6005      	str	r5, [r0, #0]
 800cfb4:	60c5      	str	r5, [r0, #12]
 800cfb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfb8:	6819      	ldr	r1, [r3, #0]
 800cfba:	b151      	cbz	r1, 800cfd2 <_dtoa_r+0x4a>
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	604a      	str	r2, [r1, #4]
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	4093      	lsls	r3, r2
 800cfc4:	608b      	str	r3, [r1, #8]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f001 f8bd 	bl	800e146 <_Bfree>
 800cfcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfce:	2200      	movs	r2, #0
 800cfd0:	601a      	str	r2, [r3, #0]
 800cfd2:	1e3b      	subs	r3, r7, #0
 800cfd4:	bfb9      	ittee	lt
 800cfd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cfda:	9303      	strlt	r3, [sp, #12]
 800cfdc:	2300      	movge	r3, #0
 800cfde:	f8c8 3000 	strge.w	r3, [r8]
 800cfe2:	9d03      	ldr	r5, [sp, #12]
 800cfe4:	4bac      	ldr	r3, [pc, #688]	; (800d298 <_dtoa_r+0x310>)
 800cfe6:	bfbc      	itt	lt
 800cfe8:	2201      	movlt	r2, #1
 800cfea:	f8c8 2000 	strlt.w	r2, [r8]
 800cfee:	43ab      	bics	r3, r5
 800cff0:	d11b      	bne.n	800d02a <_dtoa_r+0xa2>
 800cff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cff4:	f242 730f 	movw	r3, #9999	; 0x270f
 800cff8:	6013      	str	r3, [r2, #0]
 800cffa:	9b02      	ldr	r3, [sp, #8]
 800cffc:	b923      	cbnz	r3, 800d008 <_dtoa_r+0x80>
 800cffe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d002:	2d00      	cmp	r5, #0
 800d004:	f000 84dd 	beq.w	800d9c2 <_dtoa_r+0xa3a>
 800d008:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d00a:	b953      	cbnz	r3, 800d022 <_dtoa_r+0x9a>
 800d00c:	4ba3      	ldr	r3, [pc, #652]	; (800d29c <_dtoa_r+0x314>)
 800d00e:	e020      	b.n	800d052 <_dtoa_r+0xca>
 800d010:	4ba3      	ldr	r3, [pc, #652]	; (800d2a0 <_dtoa_r+0x318>)
 800d012:	9304      	str	r3, [sp, #16]
 800d014:	3308      	adds	r3, #8
 800d016:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d018:	6013      	str	r3, [r2, #0]
 800d01a:	9804      	ldr	r0, [sp, #16]
 800d01c:	b015      	add	sp, #84	; 0x54
 800d01e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d022:	4b9e      	ldr	r3, [pc, #632]	; (800d29c <_dtoa_r+0x314>)
 800d024:	9304      	str	r3, [sp, #16]
 800d026:	3303      	adds	r3, #3
 800d028:	e7f5      	b.n	800d016 <_dtoa_r+0x8e>
 800d02a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d02e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d036:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d03a:	d10c      	bne.n	800d056 <_dtoa_r+0xce>
 800d03c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d03e:	2301      	movs	r3, #1
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 84b9 	beq.w	800d9bc <_dtoa_r+0xa34>
 800d04a:	4b96      	ldr	r3, [pc, #600]	; (800d2a4 <_dtoa_r+0x31c>)
 800d04c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	3b01      	subs	r3, #1
 800d052:	9304      	str	r3, [sp, #16]
 800d054:	e7e1      	b.n	800d01a <_dtoa_r+0x92>
 800d056:	a913      	add	r1, sp, #76	; 0x4c
 800d058:	aa12      	add	r2, sp, #72	; 0x48
 800d05a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800d05e:	4620      	mov	r0, r4
 800d060:	f001 fb7e 	bl	800e760 <__d2b>
 800d064:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800d068:	9001      	str	r0, [sp, #4]
 800d06a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800d06c:	2e00      	cmp	r6, #0
 800d06e:	d046      	beq.n	800d0fe <_dtoa_r+0x176>
 800d070:	9805      	ldr	r0, [sp, #20]
 800d072:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800d076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d07a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800d07e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d082:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800d086:	2700      	movs	r7, #0
 800d088:	ee07 aa90 	vmov	s15, sl
 800d08c:	ec43 2b16 	vmov	d6, r2, r3
 800d090:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d094:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800d280 <_dtoa_r+0x2f8>
 800d098:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d09c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d0a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800d288 <_dtoa_r+0x300>
 800d0a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d0a8:	eeb0 7b46 	vmov.f64	d7, d6
 800d0ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800d290 <_dtoa_r+0x308>
 800d0b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d0b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d0b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c0:	ee16 ba90 	vmov	fp, s13
 800d0c4:	d508      	bpl.n	800d0d8 <_dtoa_r+0x150>
 800d0c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d0ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800d0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d2:	bf18      	it	ne
 800d0d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d0d8:	f1bb 0f16 	cmp.w	fp, #22
 800d0dc:	d834      	bhi.n	800d148 <_dtoa_r+0x1c0>
 800d0de:	4b72      	ldr	r3, [pc, #456]	; (800d2a8 <_dtoa_r+0x320>)
 800d0e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d0e4:	ed93 7b00 	vldr	d7, [r3]
 800d0e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d0ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0f4:	dd01      	ble.n	800d0fa <_dtoa_r+0x172>
 800d0f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e025      	b.n	800d14a <_dtoa_r+0x1c2>
 800d0fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d100:	eb01 0a03 	add.w	sl, r1, r3
 800d104:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800d108:	2b20      	cmp	r3, #32
 800d10a:	dd17      	ble.n	800d13c <_dtoa_r+0x1b4>
 800d10c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800d110:	9a02      	ldr	r2, [sp, #8]
 800d112:	409d      	lsls	r5, r3
 800d114:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800d118:	fa22 f303 	lsr.w	r3, r2, r3
 800d11c:	432b      	orrs	r3, r5
 800d11e:	ee07 3a90 	vmov	s15, r3
 800d122:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d12a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d12e:	9805      	ldr	r0, [sp, #20]
 800d130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d134:	2701      	movs	r7, #1
 800d136:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800d13a:	e7a5      	b.n	800d088 <_dtoa_r+0x100>
 800d13c:	9a02      	ldr	r2, [sp, #8]
 800d13e:	f1c3 0320 	rsb	r3, r3, #32
 800d142:	fa02 f303 	lsl.w	r3, r2, r3
 800d146:	e7ea      	b.n	800d11e <_dtoa_r+0x196>
 800d148:	2301      	movs	r3, #1
 800d14a:	eba1 0a0a 	sub.w	sl, r1, sl
 800d14e:	9310      	str	r3, [sp, #64]	; 0x40
 800d150:	f1ba 0301 	subs.w	r3, sl, #1
 800d154:	9307      	str	r3, [sp, #28]
 800d156:	bf43      	ittte	mi
 800d158:	2300      	movmi	r3, #0
 800d15a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800d15e:	9307      	strmi	r3, [sp, #28]
 800d160:	f04f 0a00 	movpl.w	sl, #0
 800d164:	f1bb 0f00 	cmp.w	fp, #0
 800d168:	db19      	blt.n	800d19e <_dtoa_r+0x216>
 800d16a:	9b07      	ldr	r3, [sp, #28]
 800d16c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d170:	445b      	add	r3, fp
 800d172:	9307      	str	r3, [sp, #28]
 800d174:	f04f 0800 	mov.w	r8, #0
 800d178:	9b08      	ldr	r3, [sp, #32]
 800d17a:	2b09      	cmp	r3, #9
 800d17c:	d866      	bhi.n	800d24c <_dtoa_r+0x2c4>
 800d17e:	2b05      	cmp	r3, #5
 800d180:	bfc4      	itt	gt
 800d182:	3b04      	subgt	r3, #4
 800d184:	9308      	strgt	r3, [sp, #32]
 800d186:	9b08      	ldr	r3, [sp, #32]
 800d188:	f1a3 0302 	sub.w	r3, r3, #2
 800d18c:	bfcc      	ite	gt
 800d18e:	2500      	movgt	r5, #0
 800d190:	2501      	movle	r5, #1
 800d192:	2b03      	cmp	r3, #3
 800d194:	d866      	bhi.n	800d264 <_dtoa_r+0x2dc>
 800d196:	e8df f003 	tbb	[pc, r3]
 800d19a:	5755      	.short	0x5755
 800d19c:	4909      	.short	0x4909
 800d19e:	2300      	movs	r3, #0
 800d1a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 800d1a4:	f1cb 0800 	rsb	r8, fp, #0
 800d1a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1aa:	e7e5      	b.n	800d178 <_dtoa_r+0x1f0>
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	dd59      	ble.n	800d26a <_dtoa_r+0x2e2>
 800d1b6:	9306      	str	r3, [sp, #24]
 800d1b8:	4699      	mov	r9, r3
 800d1ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d1bc:	2200      	movs	r2, #0
 800d1be:	6072      	str	r2, [r6, #4]
 800d1c0:	2204      	movs	r2, #4
 800d1c2:	f102 0014 	add.w	r0, r2, #20
 800d1c6:	4298      	cmp	r0, r3
 800d1c8:	6871      	ldr	r1, [r6, #4]
 800d1ca:	d953      	bls.n	800d274 <_dtoa_r+0x2ec>
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f000 ff86 	bl	800e0de <_Balloc>
 800d1d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d4:	6030      	str	r0, [r6, #0]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	9304      	str	r3, [sp, #16]
 800d1da:	f1b9 0f0e 	cmp.w	r9, #14
 800d1de:	f200 80c2 	bhi.w	800d366 <_dtoa_r+0x3de>
 800d1e2:	2d00      	cmp	r5, #0
 800d1e4:	f000 80bf 	beq.w	800d366 <_dtoa_r+0x3de>
 800d1e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1ec:	f1bb 0f00 	cmp.w	fp, #0
 800d1f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d1f4:	f340 80e6 	ble.w	800d3c4 <_dtoa_r+0x43c>
 800d1f8:	4a2b      	ldr	r2, [pc, #172]	; (800d2a8 <_dtoa_r+0x320>)
 800d1fa:	f00b 030f 	and.w	r3, fp, #15
 800d1fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d202:	ed93 7b00 	vldr	d7, [r3]
 800d206:	ea4f 132b 	mov.w	r3, fp, asr #4
 800d20a:	06da      	lsls	r2, r3, #27
 800d20c:	f140 80d8 	bpl.w	800d3c0 <_dtoa_r+0x438>
 800d210:	4a26      	ldr	r2, [pc, #152]	; (800d2ac <_dtoa_r+0x324>)
 800d212:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800d216:	ed92 6b08 	vldr	d6, [r2, #32]
 800d21a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d21e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d222:	f003 030f 	and.w	r3, r3, #15
 800d226:	2203      	movs	r2, #3
 800d228:	4920      	ldr	r1, [pc, #128]	; (800d2ac <_dtoa_r+0x324>)
 800d22a:	e04a      	b.n	800d2c2 <_dtoa_r+0x33a>
 800d22c:	2301      	movs	r3, #1
 800d22e:	9309      	str	r3, [sp, #36]	; 0x24
 800d230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d232:	445b      	add	r3, fp
 800d234:	f103 0901 	add.w	r9, r3, #1
 800d238:	9306      	str	r3, [sp, #24]
 800d23a:	464b      	mov	r3, r9
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	bfb8      	it	lt
 800d240:	2301      	movlt	r3, #1
 800d242:	e7ba      	b.n	800d1ba <_dtoa_r+0x232>
 800d244:	2300      	movs	r3, #0
 800d246:	e7b2      	b.n	800d1ae <_dtoa_r+0x226>
 800d248:	2300      	movs	r3, #0
 800d24a:	e7f0      	b.n	800d22e <_dtoa_r+0x2a6>
 800d24c:	2501      	movs	r5, #1
 800d24e:	2300      	movs	r3, #0
 800d250:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800d254:	f04f 33ff 	mov.w	r3, #4294967295
 800d258:	9306      	str	r3, [sp, #24]
 800d25a:	4699      	mov	r9, r3
 800d25c:	2200      	movs	r2, #0
 800d25e:	2312      	movs	r3, #18
 800d260:	920a      	str	r2, [sp, #40]	; 0x28
 800d262:	e7aa      	b.n	800d1ba <_dtoa_r+0x232>
 800d264:	2301      	movs	r3, #1
 800d266:	9309      	str	r3, [sp, #36]	; 0x24
 800d268:	e7f4      	b.n	800d254 <_dtoa_r+0x2cc>
 800d26a:	2301      	movs	r3, #1
 800d26c:	9306      	str	r3, [sp, #24]
 800d26e:	4699      	mov	r9, r3
 800d270:	461a      	mov	r2, r3
 800d272:	e7f5      	b.n	800d260 <_dtoa_r+0x2d8>
 800d274:	3101      	adds	r1, #1
 800d276:	6071      	str	r1, [r6, #4]
 800d278:	0052      	lsls	r2, r2, #1
 800d27a:	e7a2      	b.n	800d1c2 <_dtoa_r+0x23a>
 800d27c:	f3af 8000 	nop.w
 800d280:	636f4361 	.word	0x636f4361
 800d284:	3fd287a7 	.word	0x3fd287a7
 800d288:	8b60c8b3 	.word	0x8b60c8b3
 800d28c:	3fc68a28 	.word	0x3fc68a28
 800d290:	509f79fb 	.word	0x509f79fb
 800d294:	3fd34413 	.word	0x3fd34413
 800d298:	7ff00000 	.word	0x7ff00000
 800d29c:	0800ef81 	.word	0x0800ef81
 800d2a0:	0800ef78 	.word	0x0800ef78
 800d2a4:	0800eef9 	.word	0x0800eef9
 800d2a8:	0800efb8 	.word	0x0800efb8
 800d2ac:	0800ef90 	.word	0x0800ef90
 800d2b0:	07de      	lsls	r6, r3, #31
 800d2b2:	d504      	bpl.n	800d2be <_dtoa_r+0x336>
 800d2b4:	ed91 6b00 	vldr	d6, [r1]
 800d2b8:	3201      	adds	r2, #1
 800d2ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2be:	105b      	asrs	r3, r3, #1
 800d2c0:	3108      	adds	r1, #8
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1f4      	bne.n	800d2b0 <_dtoa_r+0x328>
 800d2c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d2ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d2ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d2d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f000 80a7 	beq.w	800d428 <_dtoa_r+0x4a0>
 800d2da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d2de:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ea:	f140 809d 	bpl.w	800d428 <_dtoa_r+0x4a0>
 800d2ee:	f1b9 0f00 	cmp.w	r9, #0
 800d2f2:	f000 8099 	beq.w	800d428 <_dtoa_r+0x4a0>
 800d2f6:	9b06      	ldr	r3, [sp, #24]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	dd30      	ble.n	800d35e <_dtoa_r+0x3d6>
 800d2fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d300:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d304:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d308:	9d06      	ldr	r5, [sp, #24]
 800d30a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d30e:	3201      	adds	r2, #1
 800d310:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d314:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d318:	ee07 2a90 	vmov	s15, r2
 800d31c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d320:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d324:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d328:	9a03      	ldr	r2, [sp, #12]
 800d32a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d32e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800d332:	2d00      	cmp	r5, #0
 800d334:	d17b      	bne.n	800d42e <_dtoa_r+0x4a6>
 800d336:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d33a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d33e:	ec41 0b17 	vmov	d7, r0, r1
 800d342:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34a:	f300 8253 	bgt.w	800d7f4 <_dtoa_r+0x86c>
 800d34e:	eeb1 7b47 	vneg.f64	d7, d7
 800d352:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d35a:	f100 8249 	bmi.w	800d7f0 <_dtoa_r+0x868>
 800d35e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d362:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d366:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f2c0 8119 	blt.w	800d5a0 <_dtoa_r+0x618>
 800d36e:	f1bb 0f0e 	cmp.w	fp, #14
 800d372:	f300 8115 	bgt.w	800d5a0 <_dtoa_r+0x618>
 800d376:	4bc3      	ldr	r3, [pc, #780]	; (800d684 <_dtoa_r+0x6fc>)
 800d378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d37c:	ed93 6b00 	vldr	d6, [r3]
 800d380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d382:	2b00      	cmp	r3, #0
 800d384:	f280 80ba 	bge.w	800d4fc <_dtoa_r+0x574>
 800d388:	f1b9 0f00 	cmp.w	r9, #0
 800d38c:	f300 80b6 	bgt.w	800d4fc <_dtoa_r+0x574>
 800d390:	f040 822d 	bne.w	800d7ee <_dtoa_r+0x866>
 800d394:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d398:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d39c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d3a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a8:	464d      	mov	r5, r9
 800d3aa:	464f      	mov	r7, r9
 800d3ac:	f280 8204 	bge.w	800d7b8 <_dtoa_r+0x830>
 800d3b0:	9b04      	ldr	r3, [sp, #16]
 800d3b2:	9a04      	ldr	r2, [sp, #16]
 800d3b4:	1c5e      	adds	r6, r3, #1
 800d3b6:	2331      	movs	r3, #49	; 0x31
 800d3b8:	7013      	strb	r3, [r2, #0]
 800d3ba:	f10b 0b01 	add.w	fp, fp, #1
 800d3be:	e1ff      	b.n	800d7c0 <_dtoa_r+0x838>
 800d3c0:	2202      	movs	r2, #2
 800d3c2:	e731      	b.n	800d228 <_dtoa_r+0x2a0>
 800d3c4:	d02e      	beq.n	800d424 <_dtoa_r+0x49c>
 800d3c6:	f1cb 0300 	rsb	r3, fp, #0
 800d3ca:	4aae      	ldr	r2, [pc, #696]	; (800d684 <_dtoa_r+0x6fc>)
 800d3cc:	f003 010f 	and.w	r1, r3, #15
 800d3d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800d3d4:	ed92 7b00 	vldr	d7, [r2]
 800d3d8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800d3dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d3e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d3e4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800d3e8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d3ec:	49a6      	ldr	r1, [pc, #664]	; (800d688 <_dtoa_r+0x700>)
 800d3ee:	111b      	asrs	r3, r3, #4
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	2202      	movs	r2, #2
 800d3f4:	b93b      	cbnz	r3, 800d406 <_dtoa_r+0x47e>
 800d3f6:	2800      	cmp	r0, #0
 800d3f8:	f43f af6b 	beq.w	800d2d2 <_dtoa_r+0x34a>
 800d3fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d404:	e765      	b.n	800d2d2 <_dtoa_r+0x34a>
 800d406:	07dd      	lsls	r5, r3, #31
 800d408:	d509      	bpl.n	800d41e <_dtoa_r+0x496>
 800d40a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d40e:	ed91 7b00 	vldr	d7, [r1]
 800d412:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d416:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d41a:	3201      	adds	r2, #1
 800d41c:	2001      	movs	r0, #1
 800d41e:	105b      	asrs	r3, r3, #1
 800d420:	3108      	adds	r1, #8
 800d422:	e7e7      	b.n	800d3f4 <_dtoa_r+0x46c>
 800d424:	2202      	movs	r2, #2
 800d426:	e754      	b.n	800d2d2 <_dtoa_r+0x34a>
 800d428:	465b      	mov	r3, fp
 800d42a:	464d      	mov	r5, r9
 800d42c:	e770      	b.n	800d310 <_dtoa_r+0x388>
 800d42e:	4a95      	ldr	r2, [pc, #596]	; (800d684 <_dtoa_r+0x6fc>)
 800d430:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800d434:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d43a:	ec41 0b17 	vmov	d7, r0, r1
 800d43e:	b35a      	cbz	r2, 800d498 <_dtoa_r+0x510>
 800d440:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d444:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d448:	9e04      	ldr	r6, [sp, #16]
 800d44a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d44e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d452:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d456:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d45a:	ee14 2a90 	vmov	r2, s9
 800d45e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d462:	3230      	adds	r2, #48	; 0x30
 800d464:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d468:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d470:	f806 2b01 	strb.w	r2, [r6], #1
 800d474:	d43b      	bmi.n	800d4ee <_dtoa_r+0x566>
 800d476:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d47a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d482:	d472      	bmi.n	800d56a <_dtoa_r+0x5e2>
 800d484:	9a04      	ldr	r2, [sp, #16]
 800d486:	1ab2      	subs	r2, r6, r2
 800d488:	4295      	cmp	r5, r2
 800d48a:	f77f af68 	ble.w	800d35e <_dtoa_r+0x3d6>
 800d48e:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d492:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d496:	e7de      	b.n	800d456 <_dtoa_r+0x4ce>
 800d498:	9a04      	ldr	r2, [sp, #16]
 800d49a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d49e:	1956      	adds	r6, r2, r5
 800d4a0:	4611      	mov	r1, r2
 800d4a2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d4a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d4aa:	ee14 2a90 	vmov	r2, s9
 800d4ae:	3230      	adds	r2, #48	; 0x30
 800d4b0:	f801 2b01 	strb.w	r2, [r1], #1
 800d4b4:	42b1      	cmp	r1, r6
 800d4b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d4ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d4be:	d11a      	bne.n	800d4f6 <_dtoa_r+0x56e>
 800d4c0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d4c4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d4c8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	dc4b      	bgt.n	800d56a <_dtoa_r+0x5e2>
 800d4d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d4d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4de:	f57f af3e 	bpl.w	800d35e <_dtoa_r+0x3d6>
 800d4e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d4e6:	2a30      	cmp	r2, #48	; 0x30
 800d4e8:	f106 31ff 	add.w	r1, r6, #4294967295
 800d4ec:	d001      	beq.n	800d4f2 <_dtoa_r+0x56a>
 800d4ee:	469b      	mov	fp, r3
 800d4f0:	e02a      	b.n	800d548 <_dtoa_r+0x5c0>
 800d4f2:	460e      	mov	r6, r1
 800d4f4:	e7f5      	b.n	800d4e2 <_dtoa_r+0x55a>
 800d4f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d4fa:	e7d4      	b.n	800d4a6 <_dtoa_r+0x51e>
 800d4fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d500:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d504:	9e04      	ldr	r6, [sp, #16]
 800d506:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d50a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d50e:	ee15 3a10 	vmov	r3, s10
 800d512:	3330      	adds	r3, #48	; 0x30
 800d514:	f806 3b01 	strb.w	r3, [r6], #1
 800d518:	9b04      	ldr	r3, [sp, #16]
 800d51a:	1af3      	subs	r3, r6, r3
 800d51c:	4599      	cmp	r9, r3
 800d51e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d522:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d526:	d133      	bne.n	800d590 <_dtoa_r+0x608>
 800d528:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d52c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d534:	dc18      	bgt.n	800d568 <_dtoa_r+0x5e0>
 800d536:	eeb4 7b46 	vcmp.f64	d7, d6
 800d53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53e:	d103      	bne.n	800d548 <_dtoa_r+0x5c0>
 800d540:	ee15 3a10 	vmov	r3, s10
 800d544:	07db      	lsls	r3, r3, #31
 800d546:	d40f      	bmi.n	800d568 <_dtoa_r+0x5e0>
 800d548:	9901      	ldr	r1, [sp, #4]
 800d54a:	4620      	mov	r0, r4
 800d54c:	f000 fdfb 	bl	800e146 <_Bfree>
 800d550:	2300      	movs	r3, #0
 800d552:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d554:	7033      	strb	r3, [r6, #0]
 800d556:	f10b 0301 	add.w	r3, fp, #1
 800d55a:	6013      	str	r3, [r2, #0]
 800d55c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f43f ad5b 	beq.w	800d01a <_dtoa_r+0x92>
 800d564:	601e      	str	r6, [r3, #0]
 800d566:	e558      	b.n	800d01a <_dtoa_r+0x92>
 800d568:	465b      	mov	r3, fp
 800d56a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d56e:	2939      	cmp	r1, #57	; 0x39
 800d570:	f106 32ff 	add.w	r2, r6, #4294967295
 800d574:	d106      	bne.n	800d584 <_dtoa_r+0x5fc>
 800d576:	9904      	ldr	r1, [sp, #16]
 800d578:	4291      	cmp	r1, r2
 800d57a:	d107      	bne.n	800d58c <_dtoa_r+0x604>
 800d57c:	2230      	movs	r2, #48	; 0x30
 800d57e:	700a      	strb	r2, [r1, #0]
 800d580:	3301      	adds	r3, #1
 800d582:	460a      	mov	r2, r1
 800d584:	7811      	ldrb	r1, [r2, #0]
 800d586:	3101      	adds	r1, #1
 800d588:	7011      	strb	r1, [r2, #0]
 800d58a:	e7b0      	b.n	800d4ee <_dtoa_r+0x566>
 800d58c:	4616      	mov	r6, r2
 800d58e:	e7ec      	b.n	800d56a <_dtoa_r+0x5e2>
 800d590:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d594:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d59c:	d1b3      	bne.n	800d506 <_dtoa_r+0x57e>
 800d59e:	e7d3      	b.n	800d548 <_dtoa_r+0x5c0>
 800d5a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5a2:	2a00      	cmp	r2, #0
 800d5a4:	f000 808d 	beq.w	800d6c2 <_dtoa_r+0x73a>
 800d5a8:	9a08      	ldr	r2, [sp, #32]
 800d5aa:	2a01      	cmp	r2, #1
 800d5ac:	dc72      	bgt.n	800d694 <_dtoa_r+0x70c>
 800d5ae:	2f00      	cmp	r7, #0
 800d5b0:	d06c      	beq.n	800d68c <_dtoa_r+0x704>
 800d5b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d5b6:	4645      	mov	r5, r8
 800d5b8:	4656      	mov	r6, sl
 800d5ba:	9a07      	ldr	r2, [sp, #28]
 800d5bc:	2101      	movs	r1, #1
 800d5be:	441a      	add	r2, r3
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	449a      	add	sl, r3
 800d5c4:	9207      	str	r2, [sp, #28]
 800d5c6:	f000 fe9c 	bl	800e302 <__i2b>
 800d5ca:	4607      	mov	r7, r0
 800d5cc:	2e00      	cmp	r6, #0
 800d5ce:	dd0b      	ble.n	800d5e8 <_dtoa_r+0x660>
 800d5d0:	9b07      	ldr	r3, [sp, #28]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	dd08      	ble.n	800d5e8 <_dtoa_r+0x660>
 800d5d6:	42b3      	cmp	r3, r6
 800d5d8:	9a07      	ldr	r2, [sp, #28]
 800d5da:	bfa8      	it	ge
 800d5dc:	4633      	movge	r3, r6
 800d5de:	ebaa 0a03 	sub.w	sl, sl, r3
 800d5e2:	1af6      	subs	r6, r6, r3
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	9307      	str	r3, [sp, #28]
 800d5e8:	f1b8 0f00 	cmp.w	r8, #0
 800d5ec:	d01d      	beq.n	800d62a <_dtoa_r+0x6a2>
 800d5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d06a      	beq.n	800d6ca <_dtoa_r+0x742>
 800d5f4:	b18d      	cbz	r5, 800d61a <_dtoa_r+0x692>
 800d5f6:	4639      	mov	r1, r7
 800d5f8:	462a      	mov	r2, r5
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f000 ff20 	bl	800e440 <__pow5mult>
 800d600:	9a01      	ldr	r2, [sp, #4]
 800d602:	4601      	mov	r1, r0
 800d604:	4607      	mov	r7, r0
 800d606:	4620      	mov	r0, r4
 800d608:	f000 fe84 	bl	800e314 <__multiply>
 800d60c:	9901      	ldr	r1, [sp, #4]
 800d60e:	900c      	str	r0, [sp, #48]	; 0x30
 800d610:	4620      	mov	r0, r4
 800d612:	f000 fd98 	bl	800e146 <_Bfree>
 800d616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d618:	9301      	str	r3, [sp, #4]
 800d61a:	ebb8 0205 	subs.w	r2, r8, r5
 800d61e:	d004      	beq.n	800d62a <_dtoa_r+0x6a2>
 800d620:	9901      	ldr	r1, [sp, #4]
 800d622:	4620      	mov	r0, r4
 800d624:	f000 ff0c 	bl	800e440 <__pow5mult>
 800d628:	9001      	str	r0, [sp, #4]
 800d62a:	2101      	movs	r1, #1
 800d62c:	4620      	mov	r0, r4
 800d62e:	f000 fe68 	bl	800e302 <__i2b>
 800d632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d634:	4605      	mov	r5, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	f000 81ca 	beq.w	800d9d0 <_dtoa_r+0xa48>
 800d63c:	461a      	mov	r2, r3
 800d63e:	4601      	mov	r1, r0
 800d640:	4620      	mov	r0, r4
 800d642:	f000 fefd 	bl	800e440 <__pow5mult>
 800d646:	9b08      	ldr	r3, [sp, #32]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	4605      	mov	r5, r0
 800d64c:	dc44      	bgt.n	800d6d8 <_dtoa_r+0x750>
 800d64e:	9b02      	ldr	r3, [sp, #8]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d13c      	bne.n	800d6ce <_dtoa_r+0x746>
 800d654:	9b03      	ldr	r3, [sp, #12]
 800d656:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d137      	bne.n	800d6ce <_dtoa_r+0x746>
 800d65e:	9b03      	ldr	r3, [sp, #12]
 800d660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d664:	0d1b      	lsrs	r3, r3, #20
 800d666:	051b      	lsls	r3, r3, #20
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d033      	beq.n	800d6d4 <_dtoa_r+0x74c>
 800d66c:	9b07      	ldr	r3, [sp, #28]
 800d66e:	3301      	adds	r3, #1
 800d670:	f10a 0a01 	add.w	sl, sl, #1
 800d674:	9307      	str	r3, [sp, #28]
 800d676:	f04f 0801 	mov.w	r8, #1
 800d67a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d67c:	bb73      	cbnz	r3, 800d6dc <_dtoa_r+0x754>
 800d67e:	2001      	movs	r0, #1
 800d680:	e034      	b.n	800d6ec <_dtoa_r+0x764>
 800d682:	bf00      	nop
 800d684:	0800efb8 	.word	0x0800efb8
 800d688:	0800ef90 	.word	0x0800ef90
 800d68c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d68e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d692:	e790      	b.n	800d5b6 <_dtoa_r+0x62e>
 800d694:	f109 35ff 	add.w	r5, r9, #4294967295
 800d698:	45a8      	cmp	r8, r5
 800d69a:	bfbf      	itttt	lt
 800d69c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800d69e:	eba5 0808 	sublt.w	r8, r5, r8
 800d6a2:	4443      	addlt	r3, r8
 800d6a4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800d6a6:	bfb6      	itet	lt
 800d6a8:	46a8      	movlt	r8, r5
 800d6aa:	eba8 0505 	subge.w	r5, r8, r5
 800d6ae:	2500      	movlt	r5, #0
 800d6b0:	f1b9 0f00 	cmp.w	r9, #0
 800d6b4:	bfb9      	ittee	lt
 800d6b6:	ebaa 0609 	sublt.w	r6, sl, r9
 800d6ba:	2300      	movlt	r3, #0
 800d6bc:	4656      	movge	r6, sl
 800d6be:	464b      	movge	r3, r9
 800d6c0:	e77b      	b.n	800d5ba <_dtoa_r+0x632>
 800d6c2:	4645      	mov	r5, r8
 800d6c4:	4656      	mov	r6, sl
 800d6c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d6c8:	e780      	b.n	800d5cc <_dtoa_r+0x644>
 800d6ca:	4642      	mov	r2, r8
 800d6cc:	e7a8      	b.n	800d620 <_dtoa_r+0x698>
 800d6ce:	f04f 0800 	mov.w	r8, #0
 800d6d2:	e7d2      	b.n	800d67a <_dtoa_r+0x6f2>
 800d6d4:	4698      	mov	r8, r3
 800d6d6:	e7d0      	b.n	800d67a <_dtoa_r+0x6f2>
 800d6d8:	f04f 0800 	mov.w	r8, #0
 800d6dc:	692b      	ldr	r3, [r5, #16]
 800d6de:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d6e2:	6918      	ldr	r0, [r3, #16]
 800d6e4:	f000 fdbf 	bl	800e266 <__hi0bits>
 800d6e8:	f1c0 0020 	rsb	r0, r0, #32
 800d6ec:	9b07      	ldr	r3, [sp, #28]
 800d6ee:	4418      	add	r0, r3
 800d6f0:	f010 001f 	ands.w	r0, r0, #31
 800d6f4:	d047      	beq.n	800d786 <_dtoa_r+0x7fe>
 800d6f6:	f1c0 0320 	rsb	r3, r0, #32
 800d6fa:	2b04      	cmp	r3, #4
 800d6fc:	dd3b      	ble.n	800d776 <_dtoa_r+0x7ee>
 800d6fe:	9b07      	ldr	r3, [sp, #28]
 800d700:	f1c0 001c 	rsb	r0, r0, #28
 800d704:	4482      	add	sl, r0
 800d706:	4406      	add	r6, r0
 800d708:	4403      	add	r3, r0
 800d70a:	9307      	str	r3, [sp, #28]
 800d70c:	f1ba 0f00 	cmp.w	sl, #0
 800d710:	dd05      	ble.n	800d71e <_dtoa_r+0x796>
 800d712:	4652      	mov	r2, sl
 800d714:	9901      	ldr	r1, [sp, #4]
 800d716:	4620      	mov	r0, r4
 800d718:	f000 fee0 	bl	800e4dc <__lshift>
 800d71c:	9001      	str	r0, [sp, #4]
 800d71e:	9b07      	ldr	r3, [sp, #28]
 800d720:	2b00      	cmp	r3, #0
 800d722:	dd05      	ble.n	800d730 <_dtoa_r+0x7a8>
 800d724:	4629      	mov	r1, r5
 800d726:	461a      	mov	r2, r3
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 fed7 	bl	800e4dc <__lshift>
 800d72e:	4605      	mov	r5, r0
 800d730:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d732:	b353      	cbz	r3, 800d78a <_dtoa_r+0x802>
 800d734:	4629      	mov	r1, r5
 800d736:	9801      	ldr	r0, [sp, #4]
 800d738:	f000 ff24 	bl	800e584 <__mcmp>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	da24      	bge.n	800d78a <_dtoa_r+0x802>
 800d740:	2300      	movs	r3, #0
 800d742:	220a      	movs	r2, #10
 800d744:	9901      	ldr	r1, [sp, #4]
 800d746:	4620      	mov	r0, r4
 800d748:	f000 fd14 	bl	800e174 <__multadd>
 800d74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d74e:	9001      	str	r0, [sp, #4]
 800d750:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 8142 	beq.w	800d9de <_dtoa_r+0xa56>
 800d75a:	2300      	movs	r3, #0
 800d75c:	4639      	mov	r1, r7
 800d75e:	220a      	movs	r2, #10
 800d760:	4620      	mov	r0, r4
 800d762:	f000 fd07 	bl	800e174 <__multadd>
 800d766:	9b06      	ldr	r3, [sp, #24]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	4607      	mov	r7, r0
 800d76c:	dc4b      	bgt.n	800d806 <_dtoa_r+0x87e>
 800d76e:	9b08      	ldr	r3, [sp, #32]
 800d770:	2b02      	cmp	r3, #2
 800d772:	dd48      	ble.n	800d806 <_dtoa_r+0x87e>
 800d774:	e011      	b.n	800d79a <_dtoa_r+0x812>
 800d776:	d0c9      	beq.n	800d70c <_dtoa_r+0x784>
 800d778:	9a07      	ldr	r2, [sp, #28]
 800d77a:	331c      	adds	r3, #28
 800d77c:	441a      	add	r2, r3
 800d77e:	449a      	add	sl, r3
 800d780:	441e      	add	r6, r3
 800d782:	4613      	mov	r3, r2
 800d784:	e7c1      	b.n	800d70a <_dtoa_r+0x782>
 800d786:	4603      	mov	r3, r0
 800d788:	e7f6      	b.n	800d778 <_dtoa_r+0x7f0>
 800d78a:	f1b9 0f00 	cmp.w	r9, #0
 800d78e:	dc34      	bgt.n	800d7fa <_dtoa_r+0x872>
 800d790:	9b08      	ldr	r3, [sp, #32]
 800d792:	2b02      	cmp	r3, #2
 800d794:	dd31      	ble.n	800d7fa <_dtoa_r+0x872>
 800d796:	f8cd 9018 	str.w	r9, [sp, #24]
 800d79a:	9b06      	ldr	r3, [sp, #24]
 800d79c:	b963      	cbnz	r3, 800d7b8 <_dtoa_r+0x830>
 800d79e:	4629      	mov	r1, r5
 800d7a0:	2205      	movs	r2, #5
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f000 fce6 	bl	800e174 <__multadd>
 800d7a8:	4601      	mov	r1, r0
 800d7aa:	4605      	mov	r5, r0
 800d7ac:	9801      	ldr	r0, [sp, #4]
 800d7ae:	f000 fee9 	bl	800e584 <__mcmp>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	f73f adfc 	bgt.w	800d3b0 <_dtoa_r+0x428>
 800d7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ba:	9e04      	ldr	r6, [sp, #16]
 800d7bc:	ea6f 0b03 	mvn.w	fp, r3
 800d7c0:	f04f 0900 	mov.w	r9, #0
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f000 fcbd 	bl	800e146 <_Bfree>
 800d7cc:	2f00      	cmp	r7, #0
 800d7ce:	f43f aebb 	beq.w	800d548 <_dtoa_r+0x5c0>
 800d7d2:	f1b9 0f00 	cmp.w	r9, #0
 800d7d6:	d005      	beq.n	800d7e4 <_dtoa_r+0x85c>
 800d7d8:	45b9      	cmp	r9, r7
 800d7da:	d003      	beq.n	800d7e4 <_dtoa_r+0x85c>
 800d7dc:	4649      	mov	r1, r9
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f000 fcb1 	bl	800e146 <_Bfree>
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	4620      	mov	r0, r4
 800d7e8:	f000 fcad 	bl	800e146 <_Bfree>
 800d7ec:	e6ac      	b.n	800d548 <_dtoa_r+0x5c0>
 800d7ee:	2500      	movs	r5, #0
 800d7f0:	462f      	mov	r7, r5
 800d7f2:	e7e1      	b.n	800d7b8 <_dtoa_r+0x830>
 800d7f4:	469b      	mov	fp, r3
 800d7f6:	462f      	mov	r7, r5
 800d7f8:	e5da      	b.n	800d3b0 <_dtoa_r+0x428>
 800d7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7fc:	f8cd 9018 	str.w	r9, [sp, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	f000 80f3 	beq.w	800d9ec <_dtoa_r+0xa64>
 800d806:	2e00      	cmp	r6, #0
 800d808:	dd05      	ble.n	800d816 <_dtoa_r+0x88e>
 800d80a:	4639      	mov	r1, r7
 800d80c:	4632      	mov	r2, r6
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 fe64 	bl	800e4dc <__lshift>
 800d814:	4607      	mov	r7, r0
 800d816:	f1b8 0f00 	cmp.w	r8, #0
 800d81a:	d04c      	beq.n	800d8b6 <_dtoa_r+0x92e>
 800d81c:	6879      	ldr	r1, [r7, #4]
 800d81e:	4620      	mov	r0, r4
 800d820:	f000 fc5d 	bl	800e0de <_Balloc>
 800d824:	693a      	ldr	r2, [r7, #16]
 800d826:	3202      	adds	r2, #2
 800d828:	4606      	mov	r6, r0
 800d82a:	0092      	lsls	r2, r2, #2
 800d82c:	f107 010c 	add.w	r1, r7, #12
 800d830:	300c      	adds	r0, #12
 800d832:	f000 fc49 	bl	800e0c8 <memcpy>
 800d836:	2201      	movs	r2, #1
 800d838:	4631      	mov	r1, r6
 800d83a:	4620      	mov	r0, r4
 800d83c:	f000 fe4e 	bl	800e4dc <__lshift>
 800d840:	9b02      	ldr	r3, [sp, #8]
 800d842:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d846:	f003 0301 	and.w	r3, r3, #1
 800d84a:	46b9      	mov	r9, r7
 800d84c:	9307      	str	r3, [sp, #28]
 800d84e:	4607      	mov	r7, r0
 800d850:	4629      	mov	r1, r5
 800d852:	9801      	ldr	r0, [sp, #4]
 800d854:	f7ff fb0a 	bl	800ce6c <quorem>
 800d858:	4649      	mov	r1, r9
 800d85a:	4606      	mov	r6, r0
 800d85c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d860:	9801      	ldr	r0, [sp, #4]
 800d862:	f000 fe8f 	bl	800e584 <__mcmp>
 800d866:	463a      	mov	r2, r7
 800d868:	9002      	str	r0, [sp, #8]
 800d86a:	4629      	mov	r1, r5
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 fea3 	bl	800e5b8 <__mdiff>
 800d872:	68c3      	ldr	r3, [r0, #12]
 800d874:	4602      	mov	r2, r0
 800d876:	bb03      	cbnz	r3, 800d8ba <_dtoa_r+0x932>
 800d878:	4601      	mov	r1, r0
 800d87a:	9009      	str	r0, [sp, #36]	; 0x24
 800d87c:	9801      	ldr	r0, [sp, #4]
 800d87e:	f000 fe81 	bl	800e584 <__mcmp>
 800d882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d884:	4603      	mov	r3, r0
 800d886:	4611      	mov	r1, r2
 800d888:	4620      	mov	r0, r4
 800d88a:	9309      	str	r3, [sp, #36]	; 0x24
 800d88c:	f000 fc5b 	bl	800e146 <_Bfree>
 800d890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d892:	b9a3      	cbnz	r3, 800d8be <_dtoa_r+0x936>
 800d894:	9a08      	ldr	r2, [sp, #32]
 800d896:	b992      	cbnz	r2, 800d8be <_dtoa_r+0x936>
 800d898:	9a07      	ldr	r2, [sp, #28]
 800d89a:	b982      	cbnz	r2, 800d8be <_dtoa_r+0x936>
 800d89c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d8a0:	d029      	beq.n	800d8f6 <_dtoa_r+0x96e>
 800d8a2:	9b02      	ldr	r3, [sp, #8]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	dd01      	ble.n	800d8ac <_dtoa_r+0x924>
 800d8a8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800d8ac:	f10a 0601 	add.w	r6, sl, #1
 800d8b0:	f88a 8000 	strb.w	r8, [sl]
 800d8b4:	e786      	b.n	800d7c4 <_dtoa_r+0x83c>
 800d8b6:	4638      	mov	r0, r7
 800d8b8:	e7c2      	b.n	800d840 <_dtoa_r+0x8b8>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e7e3      	b.n	800d886 <_dtoa_r+0x8fe>
 800d8be:	9a02      	ldr	r2, [sp, #8]
 800d8c0:	2a00      	cmp	r2, #0
 800d8c2:	db04      	blt.n	800d8ce <_dtoa_r+0x946>
 800d8c4:	d124      	bne.n	800d910 <_dtoa_r+0x988>
 800d8c6:	9a08      	ldr	r2, [sp, #32]
 800d8c8:	bb12      	cbnz	r2, 800d910 <_dtoa_r+0x988>
 800d8ca:	9a07      	ldr	r2, [sp, #28]
 800d8cc:	bb02      	cbnz	r2, 800d910 <_dtoa_r+0x988>
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	ddec      	ble.n	800d8ac <_dtoa_r+0x924>
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	9901      	ldr	r1, [sp, #4]
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	f000 fe00 	bl	800e4dc <__lshift>
 800d8dc:	4629      	mov	r1, r5
 800d8de:	9001      	str	r0, [sp, #4]
 800d8e0:	f000 fe50 	bl	800e584 <__mcmp>
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	dc03      	bgt.n	800d8f0 <_dtoa_r+0x968>
 800d8e8:	d1e0      	bne.n	800d8ac <_dtoa_r+0x924>
 800d8ea:	f018 0f01 	tst.w	r8, #1
 800d8ee:	d0dd      	beq.n	800d8ac <_dtoa_r+0x924>
 800d8f0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d8f4:	d1d8      	bne.n	800d8a8 <_dtoa_r+0x920>
 800d8f6:	2339      	movs	r3, #57	; 0x39
 800d8f8:	f10a 0601 	add.w	r6, sl, #1
 800d8fc:	f88a 3000 	strb.w	r3, [sl]
 800d900:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d904:	2b39      	cmp	r3, #57	; 0x39
 800d906:	f106 32ff 	add.w	r2, r6, #4294967295
 800d90a:	d04c      	beq.n	800d9a6 <_dtoa_r+0xa1e>
 800d90c:	3301      	adds	r3, #1
 800d90e:	e051      	b.n	800d9b4 <_dtoa_r+0xa2c>
 800d910:	2b00      	cmp	r3, #0
 800d912:	f10a 0601 	add.w	r6, sl, #1
 800d916:	dd05      	ble.n	800d924 <_dtoa_r+0x99c>
 800d918:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d91c:	d0eb      	beq.n	800d8f6 <_dtoa_r+0x96e>
 800d91e:	f108 0801 	add.w	r8, r8, #1
 800d922:	e7c5      	b.n	800d8b0 <_dtoa_r+0x928>
 800d924:	9b04      	ldr	r3, [sp, #16]
 800d926:	9a06      	ldr	r2, [sp, #24]
 800d928:	f806 8c01 	strb.w	r8, [r6, #-1]
 800d92c:	1af3      	subs	r3, r6, r3
 800d92e:	4293      	cmp	r3, r2
 800d930:	d021      	beq.n	800d976 <_dtoa_r+0x9ee>
 800d932:	2300      	movs	r3, #0
 800d934:	220a      	movs	r2, #10
 800d936:	9901      	ldr	r1, [sp, #4]
 800d938:	4620      	mov	r0, r4
 800d93a:	f000 fc1b 	bl	800e174 <__multadd>
 800d93e:	45b9      	cmp	r9, r7
 800d940:	9001      	str	r0, [sp, #4]
 800d942:	f04f 0300 	mov.w	r3, #0
 800d946:	f04f 020a 	mov.w	r2, #10
 800d94a:	4649      	mov	r1, r9
 800d94c:	4620      	mov	r0, r4
 800d94e:	d105      	bne.n	800d95c <_dtoa_r+0x9d4>
 800d950:	f000 fc10 	bl	800e174 <__multadd>
 800d954:	4681      	mov	r9, r0
 800d956:	4607      	mov	r7, r0
 800d958:	46b2      	mov	sl, r6
 800d95a:	e779      	b.n	800d850 <_dtoa_r+0x8c8>
 800d95c:	f000 fc0a 	bl	800e174 <__multadd>
 800d960:	4639      	mov	r1, r7
 800d962:	4681      	mov	r9, r0
 800d964:	2300      	movs	r3, #0
 800d966:	220a      	movs	r2, #10
 800d968:	4620      	mov	r0, r4
 800d96a:	f000 fc03 	bl	800e174 <__multadd>
 800d96e:	4607      	mov	r7, r0
 800d970:	e7f2      	b.n	800d958 <_dtoa_r+0x9d0>
 800d972:	f04f 0900 	mov.w	r9, #0
 800d976:	2201      	movs	r2, #1
 800d978:	9901      	ldr	r1, [sp, #4]
 800d97a:	4620      	mov	r0, r4
 800d97c:	f000 fdae 	bl	800e4dc <__lshift>
 800d980:	4629      	mov	r1, r5
 800d982:	9001      	str	r0, [sp, #4]
 800d984:	f000 fdfe 	bl	800e584 <__mcmp>
 800d988:	2800      	cmp	r0, #0
 800d98a:	dcb9      	bgt.n	800d900 <_dtoa_r+0x978>
 800d98c:	d102      	bne.n	800d994 <_dtoa_r+0xa0c>
 800d98e:	f018 0f01 	tst.w	r8, #1
 800d992:	d1b5      	bne.n	800d900 <_dtoa_r+0x978>
 800d994:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d998:	2b30      	cmp	r3, #48	; 0x30
 800d99a:	f106 32ff 	add.w	r2, r6, #4294967295
 800d99e:	f47f af11 	bne.w	800d7c4 <_dtoa_r+0x83c>
 800d9a2:	4616      	mov	r6, r2
 800d9a4:	e7f6      	b.n	800d994 <_dtoa_r+0xa0c>
 800d9a6:	9b04      	ldr	r3, [sp, #16]
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d105      	bne.n	800d9b8 <_dtoa_r+0xa30>
 800d9ac:	9a04      	ldr	r2, [sp, #16]
 800d9ae:	f10b 0b01 	add.w	fp, fp, #1
 800d9b2:	2331      	movs	r3, #49	; 0x31
 800d9b4:	7013      	strb	r3, [r2, #0]
 800d9b6:	e705      	b.n	800d7c4 <_dtoa_r+0x83c>
 800d9b8:	4616      	mov	r6, r2
 800d9ba:	e7a1      	b.n	800d900 <_dtoa_r+0x978>
 800d9bc:	4b16      	ldr	r3, [pc, #88]	; (800da18 <_dtoa_r+0xa90>)
 800d9be:	f7ff bb48 	b.w	800d052 <_dtoa_r+0xca>
 800d9c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f47f ab23 	bne.w	800d010 <_dtoa_r+0x88>
 800d9ca:	4b14      	ldr	r3, [pc, #80]	; (800da1c <_dtoa_r+0xa94>)
 800d9cc:	f7ff bb41 	b.w	800d052 <_dtoa_r+0xca>
 800d9d0:	9b08      	ldr	r3, [sp, #32]
 800d9d2:	2b01      	cmp	r3, #1
 800d9d4:	f77f ae3b 	ble.w	800d64e <_dtoa_r+0x6c6>
 800d9d8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d9dc:	e64f      	b.n	800d67e <_dtoa_r+0x6f6>
 800d9de:	9b06      	ldr	r3, [sp, #24]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	dc03      	bgt.n	800d9ec <_dtoa_r+0xa64>
 800d9e4:	9b08      	ldr	r3, [sp, #32]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	f73f aed7 	bgt.w	800d79a <_dtoa_r+0x812>
 800d9ec:	9e04      	ldr	r6, [sp, #16]
 800d9ee:	9801      	ldr	r0, [sp, #4]
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	f7ff fa3b 	bl	800ce6c <quorem>
 800d9f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d9fa:	f806 8b01 	strb.w	r8, [r6], #1
 800d9fe:	9b04      	ldr	r3, [sp, #16]
 800da00:	9a06      	ldr	r2, [sp, #24]
 800da02:	1af3      	subs	r3, r6, r3
 800da04:	429a      	cmp	r2, r3
 800da06:	ddb4      	ble.n	800d972 <_dtoa_r+0x9ea>
 800da08:	2300      	movs	r3, #0
 800da0a:	220a      	movs	r2, #10
 800da0c:	9901      	ldr	r1, [sp, #4]
 800da0e:	4620      	mov	r0, r4
 800da10:	f000 fbb0 	bl	800e174 <__multadd>
 800da14:	9001      	str	r0, [sp, #4]
 800da16:	e7ea      	b.n	800d9ee <_dtoa_r+0xa66>
 800da18:	0800eef8 	.word	0x0800eef8
 800da1c:	0800ef78 	.word	0x0800ef78

0800da20 <rshift>:
 800da20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da22:	6906      	ldr	r6, [r0, #16]
 800da24:	114b      	asrs	r3, r1, #5
 800da26:	429e      	cmp	r6, r3
 800da28:	f100 0414 	add.w	r4, r0, #20
 800da2c:	dd30      	ble.n	800da90 <rshift+0x70>
 800da2e:	f011 011f 	ands.w	r1, r1, #31
 800da32:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800da36:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800da3a:	d108      	bne.n	800da4e <rshift+0x2e>
 800da3c:	4621      	mov	r1, r4
 800da3e:	42b2      	cmp	r2, r6
 800da40:	460b      	mov	r3, r1
 800da42:	d211      	bcs.n	800da68 <rshift+0x48>
 800da44:	f852 3b04 	ldr.w	r3, [r2], #4
 800da48:	f841 3b04 	str.w	r3, [r1], #4
 800da4c:	e7f7      	b.n	800da3e <rshift+0x1e>
 800da4e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800da52:	f1c1 0c20 	rsb	ip, r1, #32
 800da56:	40cd      	lsrs	r5, r1
 800da58:	3204      	adds	r2, #4
 800da5a:	4623      	mov	r3, r4
 800da5c:	42b2      	cmp	r2, r6
 800da5e:	4617      	mov	r7, r2
 800da60:	d30c      	bcc.n	800da7c <rshift+0x5c>
 800da62:	601d      	str	r5, [r3, #0]
 800da64:	b105      	cbz	r5, 800da68 <rshift+0x48>
 800da66:	3304      	adds	r3, #4
 800da68:	1b1a      	subs	r2, r3, r4
 800da6a:	42a3      	cmp	r3, r4
 800da6c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da70:	bf08      	it	eq
 800da72:	2300      	moveq	r3, #0
 800da74:	6102      	str	r2, [r0, #16]
 800da76:	bf08      	it	eq
 800da78:	6143      	streq	r3, [r0, #20]
 800da7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da7c:	683f      	ldr	r7, [r7, #0]
 800da7e:	fa07 f70c 	lsl.w	r7, r7, ip
 800da82:	433d      	orrs	r5, r7
 800da84:	f843 5b04 	str.w	r5, [r3], #4
 800da88:	f852 5b04 	ldr.w	r5, [r2], #4
 800da8c:	40cd      	lsrs	r5, r1
 800da8e:	e7e5      	b.n	800da5c <rshift+0x3c>
 800da90:	4623      	mov	r3, r4
 800da92:	e7e9      	b.n	800da68 <rshift+0x48>

0800da94 <__hexdig_fun>:
 800da94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800da98:	2b09      	cmp	r3, #9
 800da9a:	d802      	bhi.n	800daa2 <__hexdig_fun+0xe>
 800da9c:	3820      	subs	r0, #32
 800da9e:	b2c0      	uxtb	r0, r0
 800daa0:	4770      	bx	lr
 800daa2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800daa6:	2b05      	cmp	r3, #5
 800daa8:	d801      	bhi.n	800daae <__hexdig_fun+0x1a>
 800daaa:	3847      	subs	r0, #71	; 0x47
 800daac:	e7f7      	b.n	800da9e <__hexdig_fun+0xa>
 800daae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dab2:	2b05      	cmp	r3, #5
 800dab4:	d801      	bhi.n	800daba <__hexdig_fun+0x26>
 800dab6:	3827      	subs	r0, #39	; 0x27
 800dab8:	e7f1      	b.n	800da9e <__hexdig_fun+0xa>
 800daba:	2000      	movs	r0, #0
 800dabc:	4770      	bx	lr

0800dabe <__gethex>:
 800dabe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac2:	b08b      	sub	sp, #44	; 0x2c
 800dac4:	468a      	mov	sl, r1
 800dac6:	9002      	str	r0, [sp, #8]
 800dac8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800daca:	9306      	str	r3, [sp, #24]
 800dacc:	4690      	mov	r8, r2
 800dace:	f000 fad0 	bl	800e072 <__localeconv_l>
 800dad2:	6803      	ldr	r3, [r0, #0]
 800dad4:	9303      	str	r3, [sp, #12]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7f2 fbb2 	bl	8000240 <strlen>
 800dadc:	9b03      	ldr	r3, [sp, #12]
 800dade:	9001      	str	r0, [sp, #4]
 800dae0:	4403      	add	r3, r0
 800dae2:	f04f 0b00 	mov.w	fp, #0
 800dae6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800daea:	9307      	str	r3, [sp, #28]
 800daec:	f8da 3000 	ldr.w	r3, [sl]
 800daf0:	3302      	adds	r3, #2
 800daf2:	461f      	mov	r7, r3
 800daf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800daf8:	2830      	cmp	r0, #48	; 0x30
 800dafa:	d06c      	beq.n	800dbd6 <__gethex+0x118>
 800dafc:	f7ff ffca 	bl	800da94 <__hexdig_fun>
 800db00:	4604      	mov	r4, r0
 800db02:	2800      	cmp	r0, #0
 800db04:	d16a      	bne.n	800dbdc <__gethex+0x11e>
 800db06:	9a01      	ldr	r2, [sp, #4]
 800db08:	9903      	ldr	r1, [sp, #12]
 800db0a:	4638      	mov	r0, r7
 800db0c:	f001 f8fe 	bl	800ed0c <strncmp>
 800db10:	2800      	cmp	r0, #0
 800db12:	d166      	bne.n	800dbe2 <__gethex+0x124>
 800db14:	9b01      	ldr	r3, [sp, #4]
 800db16:	5cf8      	ldrb	r0, [r7, r3]
 800db18:	18fe      	adds	r6, r7, r3
 800db1a:	f7ff ffbb 	bl	800da94 <__hexdig_fun>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d062      	beq.n	800dbe8 <__gethex+0x12a>
 800db22:	4633      	mov	r3, r6
 800db24:	7818      	ldrb	r0, [r3, #0]
 800db26:	2830      	cmp	r0, #48	; 0x30
 800db28:	461f      	mov	r7, r3
 800db2a:	f103 0301 	add.w	r3, r3, #1
 800db2e:	d0f9      	beq.n	800db24 <__gethex+0x66>
 800db30:	f7ff ffb0 	bl	800da94 <__hexdig_fun>
 800db34:	fab0 f580 	clz	r5, r0
 800db38:	096d      	lsrs	r5, r5, #5
 800db3a:	4634      	mov	r4, r6
 800db3c:	f04f 0b01 	mov.w	fp, #1
 800db40:	463a      	mov	r2, r7
 800db42:	4616      	mov	r6, r2
 800db44:	3201      	adds	r2, #1
 800db46:	7830      	ldrb	r0, [r6, #0]
 800db48:	f7ff ffa4 	bl	800da94 <__hexdig_fun>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d1f8      	bne.n	800db42 <__gethex+0x84>
 800db50:	9a01      	ldr	r2, [sp, #4]
 800db52:	9903      	ldr	r1, [sp, #12]
 800db54:	4630      	mov	r0, r6
 800db56:	f001 f8d9 	bl	800ed0c <strncmp>
 800db5a:	b950      	cbnz	r0, 800db72 <__gethex+0xb4>
 800db5c:	b954      	cbnz	r4, 800db74 <__gethex+0xb6>
 800db5e:	9b01      	ldr	r3, [sp, #4]
 800db60:	18f4      	adds	r4, r6, r3
 800db62:	4622      	mov	r2, r4
 800db64:	4616      	mov	r6, r2
 800db66:	3201      	adds	r2, #1
 800db68:	7830      	ldrb	r0, [r6, #0]
 800db6a:	f7ff ff93 	bl	800da94 <__hexdig_fun>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d1f8      	bne.n	800db64 <__gethex+0xa6>
 800db72:	b10c      	cbz	r4, 800db78 <__gethex+0xba>
 800db74:	1ba4      	subs	r4, r4, r6
 800db76:	00a4      	lsls	r4, r4, #2
 800db78:	7833      	ldrb	r3, [r6, #0]
 800db7a:	2b50      	cmp	r3, #80	; 0x50
 800db7c:	d001      	beq.n	800db82 <__gethex+0xc4>
 800db7e:	2b70      	cmp	r3, #112	; 0x70
 800db80:	d140      	bne.n	800dc04 <__gethex+0x146>
 800db82:	7873      	ldrb	r3, [r6, #1]
 800db84:	2b2b      	cmp	r3, #43	; 0x2b
 800db86:	d031      	beq.n	800dbec <__gethex+0x12e>
 800db88:	2b2d      	cmp	r3, #45	; 0x2d
 800db8a:	d033      	beq.n	800dbf4 <__gethex+0x136>
 800db8c:	1c71      	adds	r1, r6, #1
 800db8e:	f04f 0900 	mov.w	r9, #0
 800db92:	7808      	ldrb	r0, [r1, #0]
 800db94:	f7ff ff7e 	bl	800da94 <__hexdig_fun>
 800db98:	1e43      	subs	r3, r0, #1
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2b18      	cmp	r3, #24
 800db9e:	d831      	bhi.n	800dc04 <__gethex+0x146>
 800dba0:	f1a0 0210 	sub.w	r2, r0, #16
 800dba4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dba8:	f7ff ff74 	bl	800da94 <__hexdig_fun>
 800dbac:	1e43      	subs	r3, r0, #1
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	2b18      	cmp	r3, #24
 800dbb2:	d922      	bls.n	800dbfa <__gethex+0x13c>
 800dbb4:	f1b9 0f00 	cmp.w	r9, #0
 800dbb8:	d000      	beq.n	800dbbc <__gethex+0xfe>
 800dbba:	4252      	negs	r2, r2
 800dbbc:	4414      	add	r4, r2
 800dbbe:	f8ca 1000 	str.w	r1, [sl]
 800dbc2:	b30d      	cbz	r5, 800dc08 <__gethex+0x14a>
 800dbc4:	f1bb 0f00 	cmp.w	fp, #0
 800dbc8:	bf0c      	ite	eq
 800dbca:	2706      	moveq	r7, #6
 800dbcc:	2700      	movne	r7, #0
 800dbce:	4638      	mov	r0, r7
 800dbd0:	b00b      	add	sp, #44	; 0x2c
 800dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd6:	f10b 0b01 	add.w	fp, fp, #1
 800dbda:	e78a      	b.n	800daf2 <__gethex+0x34>
 800dbdc:	2500      	movs	r5, #0
 800dbde:	462c      	mov	r4, r5
 800dbe0:	e7ae      	b.n	800db40 <__gethex+0x82>
 800dbe2:	463e      	mov	r6, r7
 800dbe4:	2501      	movs	r5, #1
 800dbe6:	e7c7      	b.n	800db78 <__gethex+0xba>
 800dbe8:	4604      	mov	r4, r0
 800dbea:	e7fb      	b.n	800dbe4 <__gethex+0x126>
 800dbec:	f04f 0900 	mov.w	r9, #0
 800dbf0:	1cb1      	adds	r1, r6, #2
 800dbf2:	e7ce      	b.n	800db92 <__gethex+0xd4>
 800dbf4:	f04f 0901 	mov.w	r9, #1
 800dbf8:	e7fa      	b.n	800dbf0 <__gethex+0x132>
 800dbfa:	230a      	movs	r3, #10
 800dbfc:	fb03 0202 	mla	r2, r3, r2, r0
 800dc00:	3a10      	subs	r2, #16
 800dc02:	e7cf      	b.n	800dba4 <__gethex+0xe6>
 800dc04:	4631      	mov	r1, r6
 800dc06:	e7da      	b.n	800dbbe <__gethex+0x100>
 800dc08:	1bf3      	subs	r3, r6, r7
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	4629      	mov	r1, r5
 800dc0e:	2b07      	cmp	r3, #7
 800dc10:	dc49      	bgt.n	800dca6 <__gethex+0x1e8>
 800dc12:	9802      	ldr	r0, [sp, #8]
 800dc14:	f000 fa63 	bl	800e0de <_Balloc>
 800dc18:	9b01      	ldr	r3, [sp, #4]
 800dc1a:	f100 0914 	add.w	r9, r0, #20
 800dc1e:	f04f 0b00 	mov.w	fp, #0
 800dc22:	f1c3 0301 	rsb	r3, r3, #1
 800dc26:	4605      	mov	r5, r0
 800dc28:	f8cd 9010 	str.w	r9, [sp, #16]
 800dc2c:	46da      	mov	sl, fp
 800dc2e:	9308      	str	r3, [sp, #32]
 800dc30:	42b7      	cmp	r7, r6
 800dc32:	d33b      	bcc.n	800dcac <__gethex+0x1ee>
 800dc34:	9804      	ldr	r0, [sp, #16]
 800dc36:	f840 ab04 	str.w	sl, [r0], #4
 800dc3a:	eba0 0009 	sub.w	r0, r0, r9
 800dc3e:	1080      	asrs	r0, r0, #2
 800dc40:	6128      	str	r0, [r5, #16]
 800dc42:	0147      	lsls	r7, r0, #5
 800dc44:	4650      	mov	r0, sl
 800dc46:	f000 fb0e 	bl	800e266 <__hi0bits>
 800dc4a:	f8d8 6000 	ldr.w	r6, [r8]
 800dc4e:	1a3f      	subs	r7, r7, r0
 800dc50:	42b7      	cmp	r7, r6
 800dc52:	dd64      	ble.n	800dd1e <__gethex+0x260>
 800dc54:	1bbf      	subs	r7, r7, r6
 800dc56:	4639      	mov	r1, r7
 800dc58:	4628      	mov	r0, r5
 800dc5a:	f000 fe1e 	bl	800e89a <__any_on>
 800dc5e:	4682      	mov	sl, r0
 800dc60:	b178      	cbz	r0, 800dc82 <__gethex+0x1c4>
 800dc62:	1e7b      	subs	r3, r7, #1
 800dc64:	1159      	asrs	r1, r3, #5
 800dc66:	f003 021f 	and.w	r2, r3, #31
 800dc6a:	f04f 0a01 	mov.w	sl, #1
 800dc6e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dc72:	fa0a f202 	lsl.w	r2, sl, r2
 800dc76:	420a      	tst	r2, r1
 800dc78:	d003      	beq.n	800dc82 <__gethex+0x1c4>
 800dc7a:	4553      	cmp	r3, sl
 800dc7c:	dc46      	bgt.n	800dd0c <__gethex+0x24e>
 800dc7e:	f04f 0a02 	mov.w	sl, #2
 800dc82:	4639      	mov	r1, r7
 800dc84:	4628      	mov	r0, r5
 800dc86:	f7ff fecb 	bl	800da20 <rshift>
 800dc8a:	443c      	add	r4, r7
 800dc8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc90:	42a3      	cmp	r3, r4
 800dc92:	da52      	bge.n	800dd3a <__gethex+0x27c>
 800dc94:	4629      	mov	r1, r5
 800dc96:	9802      	ldr	r0, [sp, #8]
 800dc98:	f000 fa55 	bl	800e146 <_Bfree>
 800dc9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc9e:	2300      	movs	r3, #0
 800dca0:	6013      	str	r3, [r2, #0]
 800dca2:	27a3      	movs	r7, #163	; 0xa3
 800dca4:	e793      	b.n	800dbce <__gethex+0x110>
 800dca6:	3101      	adds	r1, #1
 800dca8:	105b      	asrs	r3, r3, #1
 800dcaa:	e7b0      	b.n	800dc0e <__gethex+0x150>
 800dcac:	1e73      	subs	r3, r6, #1
 800dcae:	9305      	str	r3, [sp, #20]
 800dcb0:	9a07      	ldr	r2, [sp, #28]
 800dcb2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d018      	beq.n	800dcec <__gethex+0x22e>
 800dcba:	f1bb 0f20 	cmp.w	fp, #32
 800dcbe:	d107      	bne.n	800dcd0 <__gethex+0x212>
 800dcc0:	9b04      	ldr	r3, [sp, #16]
 800dcc2:	f8c3 a000 	str.w	sl, [r3]
 800dcc6:	3304      	adds	r3, #4
 800dcc8:	f04f 0a00 	mov.w	sl, #0
 800dccc:	9304      	str	r3, [sp, #16]
 800dcce:	46d3      	mov	fp, sl
 800dcd0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dcd4:	f7ff fede 	bl	800da94 <__hexdig_fun>
 800dcd8:	f000 000f 	and.w	r0, r0, #15
 800dcdc:	fa00 f00b 	lsl.w	r0, r0, fp
 800dce0:	ea4a 0a00 	orr.w	sl, sl, r0
 800dce4:	f10b 0b04 	add.w	fp, fp, #4
 800dce8:	9b05      	ldr	r3, [sp, #20]
 800dcea:	e00d      	b.n	800dd08 <__gethex+0x24a>
 800dcec:	9b05      	ldr	r3, [sp, #20]
 800dcee:	9a08      	ldr	r2, [sp, #32]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	42bb      	cmp	r3, r7
 800dcf4:	d3e1      	bcc.n	800dcba <__gethex+0x1fc>
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	9a01      	ldr	r2, [sp, #4]
 800dcfa:	9903      	ldr	r1, [sp, #12]
 800dcfc:	9309      	str	r3, [sp, #36]	; 0x24
 800dcfe:	f001 f805 	bl	800ed0c <strncmp>
 800dd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d1d8      	bne.n	800dcba <__gethex+0x1fc>
 800dd08:	461e      	mov	r6, r3
 800dd0a:	e791      	b.n	800dc30 <__gethex+0x172>
 800dd0c:	1eb9      	subs	r1, r7, #2
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f000 fdc3 	bl	800e89a <__any_on>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d0b2      	beq.n	800dc7e <__gethex+0x1c0>
 800dd18:	f04f 0a03 	mov.w	sl, #3
 800dd1c:	e7b1      	b.n	800dc82 <__gethex+0x1c4>
 800dd1e:	da09      	bge.n	800dd34 <__gethex+0x276>
 800dd20:	1bf7      	subs	r7, r6, r7
 800dd22:	4629      	mov	r1, r5
 800dd24:	463a      	mov	r2, r7
 800dd26:	9802      	ldr	r0, [sp, #8]
 800dd28:	f000 fbd8 	bl	800e4dc <__lshift>
 800dd2c:	1be4      	subs	r4, r4, r7
 800dd2e:	4605      	mov	r5, r0
 800dd30:	f100 0914 	add.w	r9, r0, #20
 800dd34:	f04f 0a00 	mov.w	sl, #0
 800dd38:	e7a8      	b.n	800dc8c <__gethex+0x1ce>
 800dd3a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dd3e:	42a0      	cmp	r0, r4
 800dd40:	dd6a      	ble.n	800de18 <__gethex+0x35a>
 800dd42:	1b04      	subs	r4, r0, r4
 800dd44:	42a6      	cmp	r6, r4
 800dd46:	dc2e      	bgt.n	800dda6 <__gethex+0x2e8>
 800dd48:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d022      	beq.n	800dd96 <__gethex+0x2d8>
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	d024      	beq.n	800dd9e <__gethex+0x2e0>
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d115      	bne.n	800dd84 <__gethex+0x2c6>
 800dd58:	42a6      	cmp	r6, r4
 800dd5a:	d113      	bne.n	800dd84 <__gethex+0x2c6>
 800dd5c:	2e01      	cmp	r6, #1
 800dd5e:	dc0b      	bgt.n	800dd78 <__gethex+0x2ba>
 800dd60:	9a06      	ldr	r2, [sp, #24]
 800dd62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd66:	6013      	str	r3, [r2, #0]
 800dd68:	2301      	movs	r3, #1
 800dd6a:	612b      	str	r3, [r5, #16]
 800dd6c:	f8c9 3000 	str.w	r3, [r9]
 800dd70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd72:	2762      	movs	r7, #98	; 0x62
 800dd74:	601d      	str	r5, [r3, #0]
 800dd76:	e72a      	b.n	800dbce <__gethex+0x110>
 800dd78:	1e71      	subs	r1, r6, #1
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	f000 fd8d 	bl	800e89a <__any_on>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d1ed      	bne.n	800dd60 <__gethex+0x2a2>
 800dd84:	4629      	mov	r1, r5
 800dd86:	9802      	ldr	r0, [sp, #8]
 800dd88:	f000 f9dd 	bl	800e146 <_Bfree>
 800dd8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd8e:	2300      	movs	r3, #0
 800dd90:	6013      	str	r3, [r2, #0]
 800dd92:	2750      	movs	r7, #80	; 0x50
 800dd94:	e71b      	b.n	800dbce <__gethex+0x110>
 800dd96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d0e1      	beq.n	800dd60 <__gethex+0x2a2>
 800dd9c:	e7f2      	b.n	800dd84 <__gethex+0x2c6>
 800dd9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d1dd      	bne.n	800dd60 <__gethex+0x2a2>
 800dda4:	e7ee      	b.n	800dd84 <__gethex+0x2c6>
 800dda6:	1e67      	subs	r7, r4, #1
 800dda8:	f1ba 0f00 	cmp.w	sl, #0
 800ddac:	d131      	bne.n	800de12 <__gethex+0x354>
 800ddae:	b127      	cbz	r7, 800ddba <__gethex+0x2fc>
 800ddb0:	4639      	mov	r1, r7
 800ddb2:	4628      	mov	r0, r5
 800ddb4:	f000 fd71 	bl	800e89a <__any_on>
 800ddb8:	4682      	mov	sl, r0
 800ddba:	117a      	asrs	r2, r7, #5
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	f007 071f 	and.w	r7, r7, #31
 800ddc2:	fa03 f707 	lsl.w	r7, r3, r7
 800ddc6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ddca:	4621      	mov	r1, r4
 800ddcc:	421f      	tst	r7, r3
 800ddce:	4628      	mov	r0, r5
 800ddd0:	bf18      	it	ne
 800ddd2:	f04a 0a02 	orrne.w	sl, sl, #2
 800ddd6:	1b36      	subs	r6, r6, r4
 800ddd8:	f7ff fe22 	bl	800da20 <rshift>
 800dddc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dde0:	2702      	movs	r7, #2
 800dde2:	f1ba 0f00 	cmp.w	sl, #0
 800dde6:	d048      	beq.n	800de7a <__gethex+0x3bc>
 800dde8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d015      	beq.n	800de1c <__gethex+0x35e>
 800ddf0:	2b03      	cmp	r3, #3
 800ddf2:	d017      	beq.n	800de24 <__gethex+0x366>
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d109      	bne.n	800de0c <__gethex+0x34e>
 800ddf8:	f01a 0f02 	tst.w	sl, #2
 800ddfc:	d006      	beq.n	800de0c <__gethex+0x34e>
 800ddfe:	f8d9 3000 	ldr.w	r3, [r9]
 800de02:	ea4a 0a03 	orr.w	sl, sl, r3
 800de06:	f01a 0f01 	tst.w	sl, #1
 800de0a:	d10e      	bne.n	800de2a <__gethex+0x36c>
 800de0c:	f047 0710 	orr.w	r7, r7, #16
 800de10:	e033      	b.n	800de7a <__gethex+0x3bc>
 800de12:	f04f 0a01 	mov.w	sl, #1
 800de16:	e7d0      	b.n	800ddba <__gethex+0x2fc>
 800de18:	2701      	movs	r7, #1
 800de1a:	e7e2      	b.n	800dde2 <__gethex+0x324>
 800de1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de1e:	f1c3 0301 	rsb	r3, r3, #1
 800de22:	9315      	str	r3, [sp, #84]	; 0x54
 800de24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de26:	2b00      	cmp	r3, #0
 800de28:	d0f0      	beq.n	800de0c <__gethex+0x34e>
 800de2a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800de2e:	f105 0314 	add.w	r3, r5, #20
 800de32:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800de36:	eb03 010a 	add.w	r1, r3, sl
 800de3a:	f04f 0c00 	mov.w	ip, #0
 800de3e:	4618      	mov	r0, r3
 800de40:	f853 2b04 	ldr.w	r2, [r3], #4
 800de44:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de48:	d01c      	beq.n	800de84 <__gethex+0x3c6>
 800de4a:	3201      	adds	r2, #1
 800de4c:	6002      	str	r2, [r0, #0]
 800de4e:	2f02      	cmp	r7, #2
 800de50:	f105 0314 	add.w	r3, r5, #20
 800de54:	d138      	bne.n	800dec8 <__gethex+0x40a>
 800de56:	f8d8 2000 	ldr.w	r2, [r8]
 800de5a:	3a01      	subs	r2, #1
 800de5c:	42b2      	cmp	r2, r6
 800de5e:	d10a      	bne.n	800de76 <__gethex+0x3b8>
 800de60:	1171      	asrs	r1, r6, #5
 800de62:	2201      	movs	r2, #1
 800de64:	f006 061f 	and.w	r6, r6, #31
 800de68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de6c:	fa02 f606 	lsl.w	r6, r2, r6
 800de70:	421e      	tst	r6, r3
 800de72:	bf18      	it	ne
 800de74:	4617      	movne	r7, r2
 800de76:	f047 0720 	orr.w	r7, r7, #32
 800de7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800de7c:	601d      	str	r5, [r3, #0]
 800de7e:	9b06      	ldr	r3, [sp, #24]
 800de80:	601c      	str	r4, [r3, #0]
 800de82:	e6a4      	b.n	800dbce <__gethex+0x110>
 800de84:	4299      	cmp	r1, r3
 800de86:	f843 cc04 	str.w	ip, [r3, #-4]
 800de8a:	d8d8      	bhi.n	800de3e <__gethex+0x380>
 800de8c:	68ab      	ldr	r3, [r5, #8]
 800de8e:	4599      	cmp	r9, r3
 800de90:	db12      	blt.n	800deb8 <__gethex+0x3fa>
 800de92:	6869      	ldr	r1, [r5, #4]
 800de94:	9802      	ldr	r0, [sp, #8]
 800de96:	3101      	adds	r1, #1
 800de98:	f000 f921 	bl	800e0de <_Balloc>
 800de9c:	692a      	ldr	r2, [r5, #16]
 800de9e:	3202      	adds	r2, #2
 800dea0:	f105 010c 	add.w	r1, r5, #12
 800dea4:	4683      	mov	fp, r0
 800dea6:	0092      	lsls	r2, r2, #2
 800dea8:	300c      	adds	r0, #12
 800deaa:	f000 f90d 	bl	800e0c8 <memcpy>
 800deae:	4629      	mov	r1, r5
 800deb0:	9802      	ldr	r0, [sp, #8]
 800deb2:	f000 f948 	bl	800e146 <_Bfree>
 800deb6:	465d      	mov	r5, fp
 800deb8:	692b      	ldr	r3, [r5, #16]
 800deba:	1c5a      	adds	r2, r3, #1
 800debc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dec0:	612a      	str	r2, [r5, #16]
 800dec2:	2201      	movs	r2, #1
 800dec4:	615a      	str	r2, [r3, #20]
 800dec6:	e7c2      	b.n	800de4e <__gethex+0x390>
 800dec8:	692a      	ldr	r2, [r5, #16]
 800deca:	454a      	cmp	r2, r9
 800decc:	dd0b      	ble.n	800dee6 <__gethex+0x428>
 800dece:	2101      	movs	r1, #1
 800ded0:	4628      	mov	r0, r5
 800ded2:	f7ff fda5 	bl	800da20 <rshift>
 800ded6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deda:	3401      	adds	r4, #1
 800dedc:	42a3      	cmp	r3, r4
 800dede:	f6ff aed9 	blt.w	800dc94 <__gethex+0x1d6>
 800dee2:	2701      	movs	r7, #1
 800dee4:	e7c7      	b.n	800de76 <__gethex+0x3b8>
 800dee6:	f016 061f 	ands.w	r6, r6, #31
 800deea:	d0fa      	beq.n	800dee2 <__gethex+0x424>
 800deec:	449a      	add	sl, r3
 800deee:	f1c6 0620 	rsb	r6, r6, #32
 800def2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800def6:	f000 f9b6 	bl	800e266 <__hi0bits>
 800defa:	42b0      	cmp	r0, r6
 800defc:	dbe7      	blt.n	800dece <__gethex+0x410>
 800defe:	e7f0      	b.n	800dee2 <__gethex+0x424>

0800df00 <L_shift>:
 800df00:	f1c2 0208 	rsb	r2, r2, #8
 800df04:	0092      	lsls	r2, r2, #2
 800df06:	b570      	push	{r4, r5, r6, lr}
 800df08:	f1c2 0620 	rsb	r6, r2, #32
 800df0c:	6843      	ldr	r3, [r0, #4]
 800df0e:	6804      	ldr	r4, [r0, #0]
 800df10:	fa03 f506 	lsl.w	r5, r3, r6
 800df14:	432c      	orrs	r4, r5
 800df16:	40d3      	lsrs	r3, r2
 800df18:	6004      	str	r4, [r0, #0]
 800df1a:	f840 3f04 	str.w	r3, [r0, #4]!
 800df1e:	4288      	cmp	r0, r1
 800df20:	d3f4      	bcc.n	800df0c <L_shift+0xc>
 800df22:	bd70      	pop	{r4, r5, r6, pc}

0800df24 <__match>:
 800df24:	b530      	push	{r4, r5, lr}
 800df26:	6803      	ldr	r3, [r0, #0]
 800df28:	3301      	adds	r3, #1
 800df2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df2e:	b914      	cbnz	r4, 800df36 <__match+0x12>
 800df30:	6003      	str	r3, [r0, #0]
 800df32:	2001      	movs	r0, #1
 800df34:	bd30      	pop	{r4, r5, pc}
 800df36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800df3e:	2d19      	cmp	r5, #25
 800df40:	bf98      	it	ls
 800df42:	3220      	addls	r2, #32
 800df44:	42a2      	cmp	r2, r4
 800df46:	d0f0      	beq.n	800df2a <__match+0x6>
 800df48:	2000      	movs	r0, #0
 800df4a:	e7f3      	b.n	800df34 <__match+0x10>

0800df4c <__hexnan>:
 800df4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df50:	680b      	ldr	r3, [r1, #0]
 800df52:	6801      	ldr	r1, [r0, #0]
 800df54:	115f      	asrs	r7, r3, #5
 800df56:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800df5a:	f013 031f 	ands.w	r3, r3, #31
 800df5e:	b087      	sub	sp, #28
 800df60:	bf18      	it	ne
 800df62:	3704      	addne	r7, #4
 800df64:	2500      	movs	r5, #0
 800df66:	1f3e      	subs	r6, r7, #4
 800df68:	4682      	mov	sl, r0
 800df6a:	4690      	mov	r8, r2
 800df6c:	9301      	str	r3, [sp, #4]
 800df6e:	f847 5c04 	str.w	r5, [r7, #-4]
 800df72:	46b1      	mov	r9, r6
 800df74:	4634      	mov	r4, r6
 800df76:	9502      	str	r5, [sp, #8]
 800df78:	46ab      	mov	fp, r5
 800df7a:	784a      	ldrb	r2, [r1, #1]
 800df7c:	1c4b      	adds	r3, r1, #1
 800df7e:	9303      	str	r3, [sp, #12]
 800df80:	b342      	cbz	r2, 800dfd4 <__hexnan+0x88>
 800df82:	4610      	mov	r0, r2
 800df84:	9105      	str	r1, [sp, #20]
 800df86:	9204      	str	r2, [sp, #16]
 800df88:	f7ff fd84 	bl	800da94 <__hexdig_fun>
 800df8c:	2800      	cmp	r0, #0
 800df8e:	d143      	bne.n	800e018 <__hexnan+0xcc>
 800df90:	9a04      	ldr	r2, [sp, #16]
 800df92:	9905      	ldr	r1, [sp, #20]
 800df94:	2a20      	cmp	r2, #32
 800df96:	d818      	bhi.n	800dfca <__hexnan+0x7e>
 800df98:	9b02      	ldr	r3, [sp, #8]
 800df9a:	459b      	cmp	fp, r3
 800df9c:	dd13      	ble.n	800dfc6 <__hexnan+0x7a>
 800df9e:	454c      	cmp	r4, r9
 800dfa0:	d206      	bcs.n	800dfb0 <__hexnan+0x64>
 800dfa2:	2d07      	cmp	r5, #7
 800dfa4:	dc04      	bgt.n	800dfb0 <__hexnan+0x64>
 800dfa6:	462a      	mov	r2, r5
 800dfa8:	4649      	mov	r1, r9
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f7ff ffa8 	bl	800df00 <L_shift>
 800dfb0:	4544      	cmp	r4, r8
 800dfb2:	d944      	bls.n	800e03e <__hexnan+0xf2>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	f1a4 0904 	sub.w	r9, r4, #4
 800dfba:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfbe:	f8cd b008 	str.w	fp, [sp, #8]
 800dfc2:	464c      	mov	r4, r9
 800dfc4:	461d      	mov	r5, r3
 800dfc6:	9903      	ldr	r1, [sp, #12]
 800dfc8:	e7d7      	b.n	800df7a <__hexnan+0x2e>
 800dfca:	2a29      	cmp	r2, #41	; 0x29
 800dfcc:	d14a      	bne.n	800e064 <__hexnan+0x118>
 800dfce:	3102      	adds	r1, #2
 800dfd0:	f8ca 1000 	str.w	r1, [sl]
 800dfd4:	f1bb 0f00 	cmp.w	fp, #0
 800dfd8:	d044      	beq.n	800e064 <__hexnan+0x118>
 800dfda:	454c      	cmp	r4, r9
 800dfdc:	d206      	bcs.n	800dfec <__hexnan+0xa0>
 800dfde:	2d07      	cmp	r5, #7
 800dfe0:	dc04      	bgt.n	800dfec <__hexnan+0xa0>
 800dfe2:	462a      	mov	r2, r5
 800dfe4:	4649      	mov	r1, r9
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f7ff ff8a 	bl	800df00 <L_shift>
 800dfec:	4544      	cmp	r4, r8
 800dfee:	d928      	bls.n	800e042 <__hexnan+0xf6>
 800dff0:	4643      	mov	r3, r8
 800dff2:	f854 2b04 	ldr.w	r2, [r4], #4
 800dff6:	f843 2b04 	str.w	r2, [r3], #4
 800dffa:	42a6      	cmp	r6, r4
 800dffc:	d2f9      	bcs.n	800dff2 <__hexnan+0xa6>
 800dffe:	2200      	movs	r2, #0
 800e000:	f843 2b04 	str.w	r2, [r3], #4
 800e004:	429e      	cmp	r6, r3
 800e006:	d2fb      	bcs.n	800e000 <__hexnan+0xb4>
 800e008:	6833      	ldr	r3, [r6, #0]
 800e00a:	b91b      	cbnz	r3, 800e014 <__hexnan+0xc8>
 800e00c:	4546      	cmp	r6, r8
 800e00e:	d127      	bne.n	800e060 <__hexnan+0x114>
 800e010:	2301      	movs	r3, #1
 800e012:	6033      	str	r3, [r6, #0]
 800e014:	2005      	movs	r0, #5
 800e016:	e026      	b.n	800e066 <__hexnan+0x11a>
 800e018:	3501      	adds	r5, #1
 800e01a:	2d08      	cmp	r5, #8
 800e01c:	f10b 0b01 	add.w	fp, fp, #1
 800e020:	dd06      	ble.n	800e030 <__hexnan+0xe4>
 800e022:	4544      	cmp	r4, r8
 800e024:	d9cf      	bls.n	800dfc6 <__hexnan+0x7a>
 800e026:	2300      	movs	r3, #0
 800e028:	f844 3c04 	str.w	r3, [r4, #-4]
 800e02c:	2501      	movs	r5, #1
 800e02e:	3c04      	subs	r4, #4
 800e030:	6822      	ldr	r2, [r4, #0]
 800e032:	f000 000f 	and.w	r0, r0, #15
 800e036:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e03a:	6020      	str	r0, [r4, #0]
 800e03c:	e7c3      	b.n	800dfc6 <__hexnan+0x7a>
 800e03e:	2508      	movs	r5, #8
 800e040:	e7c1      	b.n	800dfc6 <__hexnan+0x7a>
 800e042:	9b01      	ldr	r3, [sp, #4]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d0df      	beq.n	800e008 <__hexnan+0xbc>
 800e048:	f04f 32ff 	mov.w	r2, #4294967295
 800e04c:	f1c3 0320 	rsb	r3, r3, #32
 800e050:	fa22 f303 	lsr.w	r3, r2, r3
 800e054:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e058:	401a      	ands	r2, r3
 800e05a:	f847 2c04 	str.w	r2, [r7, #-4]
 800e05e:	e7d3      	b.n	800e008 <__hexnan+0xbc>
 800e060:	3e04      	subs	r6, #4
 800e062:	e7d1      	b.n	800e008 <__hexnan+0xbc>
 800e064:	2004      	movs	r0, #4
 800e066:	b007      	add	sp, #28
 800e068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e06c <__locale_ctype_ptr_l>:
 800e06c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e070:	4770      	bx	lr

0800e072 <__localeconv_l>:
 800e072:	30f0      	adds	r0, #240	; 0xf0
 800e074:	4770      	bx	lr
	...

0800e078 <_localeconv_r>:
 800e078:	4b04      	ldr	r3, [pc, #16]	; (800e08c <_localeconv_r+0x14>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	6a18      	ldr	r0, [r3, #32]
 800e07e:	4b04      	ldr	r3, [pc, #16]	; (800e090 <_localeconv_r+0x18>)
 800e080:	2800      	cmp	r0, #0
 800e082:	bf08      	it	eq
 800e084:	4618      	moveq	r0, r3
 800e086:	30f0      	adds	r0, #240	; 0xf0
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	20000024 	.word	0x20000024
 800e090:	20000088 	.word	0x20000088

0800e094 <malloc>:
 800e094:	4b02      	ldr	r3, [pc, #8]	; (800e0a0 <malloc+0xc>)
 800e096:	4601      	mov	r1, r0
 800e098:	6818      	ldr	r0, [r3, #0]
 800e09a:	f000 bc7b 	b.w	800e994 <_malloc_r>
 800e09e:	bf00      	nop
 800e0a0:	20000024 	.word	0x20000024

0800e0a4 <__ascii_mbtowc>:
 800e0a4:	b082      	sub	sp, #8
 800e0a6:	b901      	cbnz	r1, 800e0aa <__ascii_mbtowc+0x6>
 800e0a8:	a901      	add	r1, sp, #4
 800e0aa:	b142      	cbz	r2, 800e0be <__ascii_mbtowc+0x1a>
 800e0ac:	b14b      	cbz	r3, 800e0c2 <__ascii_mbtowc+0x1e>
 800e0ae:	7813      	ldrb	r3, [r2, #0]
 800e0b0:	600b      	str	r3, [r1, #0]
 800e0b2:	7812      	ldrb	r2, [r2, #0]
 800e0b4:	1c10      	adds	r0, r2, #0
 800e0b6:	bf18      	it	ne
 800e0b8:	2001      	movne	r0, #1
 800e0ba:	b002      	add	sp, #8
 800e0bc:	4770      	bx	lr
 800e0be:	4610      	mov	r0, r2
 800e0c0:	e7fb      	b.n	800e0ba <__ascii_mbtowc+0x16>
 800e0c2:	f06f 0001 	mvn.w	r0, #1
 800e0c6:	e7f8      	b.n	800e0ba <__ascii_mbtowc+0x16>

0800e0c8 <memcpy>:
 800e0c8:	b510      	push	{r4, lr}
 800e0ca:	1e43      	subs	r3, r0, #1
 800e0cc:	440a      	add	r2, r1
 800e0ce:	4291      	cmp	r1, r2
 800e0d0:	d100      	bne.n	800e0d4 <memcpy+0xc>
 800e0d2:	bd10      	pop	{r4, pc}
 800e0d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0dc:	e7f7      	b.n	800e0ce <memcpy+0x6>

0800e0de <_Balloc>:
 800e0de:	b570      	push	{r4, r5, r6, lr}
 800e0e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	460e      	mov	r6, r1
 800e0e6:	b93d      	cbnz	r5, 800e0f8 <_Balloc+0x1a>
 800e0e8:	2010      	movs	r0, #16
 800e0ea:	f7ff ffd3 	bl	800e094 <malloc>
 800e0ee:	6260      	str	r0, [r4, #36]	; 0x24
 800e0f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e0f4:	6005      	str	r5, [r0, #0]
 800e0f6:	60c5      	str	r5, [r0, #12]
 800e0f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e0fa:	68eb      	ldr	r3, [r5, #12]
 800e0fc:	b183      	cbz	r3, 800e120 <_Balloc+0x42>
 800e0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e100:	68db      	ldr	r3, [r3, #12]
 800e102:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e106:	b9b8      	cbnz	r0, 800e138 <_Balloc+0x5a>
 800e108:	2101      	movs	r1, #1
 800e10a:	fa01 f506 	lsl.w	r5, r1, r6
 800e10e:	1d6a      	adds	r2, r5, #5
 800e110:	0092      	lsls	r2, r2, #2
 800e112:	4620      	mov	r0, r4
 800e114:	f000 fbe2 	bl	800e8dc <_calloc_r>
 800e118:	b160      	cbz	r0, 800e134 <_Balloc+0x56>
 800e11a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e11e:	e00e      	b.n	800e13e <_Balloc+0x60>
 800e120:	2221      	movs	r2, #33	; 0x21
 800e122:	2104      	movs	r1, #4
 800e124:	4620      	mov	r0, r4
 800e126:	f000 fbd9 	bl	800e8dc <_calloc_r>
 800e12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e12c:	60e8      	str	r0, [r5, #12]
 800e12e:	68db      	ldr	r3, [r3, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1e4      	bne.n	800e0fe <_Balloc+0x20>
 800e134:	2000      	movs	r0, #0
 800e136:	bd70      	pop	{r4, r5, r6, pc}
 800e138:	6802      	ldr	r2, [r0, #0]
 800e13a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e13e:	2300      	movs	r3, #0
 800e140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e144:	e7f7      	b.n	800e136 <_Balloc+0x58>

0800e146 <_Bfree>:
 800e146:	b570      	push	{r4, r5, r6, lr}
 800e148:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e14a:	4606      	mov	r6, r0
 800e14c:	460d      	mov	r5, r1
 800e14e:	b93c      	cbnz	r4, 800e160 <_Bfree+0x1a>
 800e150:	2010      	movs	r0, #16
 800e152:	f7ff ff9f 	bl	800e094 <malloc>
 800e156:	6270      	str	r0, [r6, #36]	; 0x24
 800e158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e15c:	6004      	str	r4, [r0, #0]
 800e15e:	60c4      	str	r4, [r0, #12]
 800e160:	b13d      	cbz	r5, 800e172 <_Bfree+0x2c>
 800e162:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e164:	686a      	ldr	r2, [r5, #4]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e16c:	6029      	str	r1, [r5, #0]
 800e16e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e172:	bd70      	pop	{r4, r5, r6, pc}

0800e174 <__multadd>:
 800e174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e178:	690d      	ldr	r5, [r1, #16]
 800e17a:	461f      	mov	r7, r3
 800e17c:	4606      	mov	r6, r0
 800e17e:	460c      	mov	r4, r1
 800e180:	f101 0c14 	add.w	ip, r1, #20
 800e184:	2300      	movs	r3, #0
 800e186:	f8dc 0000 	ldr.w	r0, [ip]
 800e18a:	b281      	uxth	r1, r0
 800e18c:	fb02 7101 	mla	r1, r2, r1, r7
 800e190:	0c0f      	lsrs	r7, r1, #16
 800e192:	0c00      	lsrs	r0, r0, #16
 800e194:	fb02 7000 	mla	r0, r2, r0, r7
 800e198:	b289      	uxth	r1, r1
 800e19a:	3301      	adds	r3, #1
 800e19c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e1a0:	429d      	cmp	r5, r3
 800e1a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e1a6:	f84c 1b04 	str.w	r1, [ip], #4
 800e1aa:	dcec      	bgt.n	800e186 <__multadd+0x12>
 800e1ac:	b1d7      	cbz	r7, 800e1e4 <__multadd+0x70>
 800e1ae:	68a3      	ldr	r3, [r4, #8]
 800e1b0:	42ab      	cmp	r3, r5
 800e1b2:	dc12      	bgt.n	800e1da <__multadd+0x66>
 800e1b4:	6861      	ldr	r1, [r4, #4]
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	3101      	adds	r1, #1
 800e1ba:	f7ff ff90 	bl	800e0de <_Balloc>
 800e1be:	6922      	ldr	r2, [r4, #16]
 800e1c0:	3202      	adds	r2, #2
 800e1c2:	f104 010c 	add.w	r1, r4, #12
 800e1c6:	4680      	mov	r8, r0
 800e1c8:	0092      	lsls	r2, r2, #2
 800e1ca:	300c      	adds	r0, #12
 800e1cc:	f7ff ff7c 	bl	800e0c8 <memcpy>
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	f7ff ffb7 	bl	800e146 <_Bfree>
 800e1d8:	4644      	mov	r4, r8
 800e1da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1de:	3501      	adds	r5, #1
 800e1e0:	615f      	str	r7, [r3, #20]
 800e1e2:	6125      	str	r5, [r4, #16]
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1ea <__s2b>:
 800e1ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ee:	460c      	mov	r4, r1
 800e1f0:	4615      	mov	r5, r2
 800e1f2:	461f      	mov	r7, r3
 800e1f4:	2209      	movs	r2, #9
 800e1f6:	3308      	adds	r3, #8
 800e1f8:	4606      	mov	r6, r0
 800e1fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1fe:	2100      	movs	r1, #0
 800e200:	2201      	movs	r2, #1
 800e202:	429a      	cmp	r2, r3
 800e204:	db20      	blt.n	800e248 <__s2b+0x5e>
 800e206:	4630      	mov	r0, r6
 800e208:	f7ff ff69 	bl	800e0de <_Balloc>
 800e20c:	9b08      	ldr	r3, [sp, #32]
 800e20e:	6143      	str	r3, [r0, #20]
 800e210:	2d09      	cmp	r5, #9
 800e212:	f04f 0301 	mov.w	r3, #1
 800e216:	6103      	str	r3, [r0, #16]
 800e218:	dd19      	ble.n	800e24e <__s2b+0x64>
 800e21a:	f104 0809 	add.w	r8, r4, #9
 800e21e:	46c1      	mov	r9, r8
 800e220:	442c      	add	r4, r5
 800e222:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e226:	4601      	mov	r1, r0
 800e228:	3b30      	subs	r3, #48	; 0x30
 800e22a:	220a      	movs	r2, #10
 800e22c:	4630      	mov	r0, r6
 800e22e:	f7ff ffa1 	bl	800e174 <__multadd>
 800e232:	45a1      	cmp	r9, r4
 800e234:	d1f5      	bne.n	800e222 <__s2b+0x38>
 800e236:	eb08 0405 	add.w	r4, r8, r5
 800e23a:	3c08      	subs	r4, #8
 800e23c:	1b2d      	subs	r5, r5, r4
 800e23e:	1963      	adds	r3, r4, r5
 800e240:	42bb      	cmp	r3, r7
 800e242:	db07      	blt.n	800e254 <__s2b+0x6a>
 800e244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e248:	0052      	lsls	r2, r2, #1
 800e24a:	3101      	adds	r1, #1
 800e24c:	e7d9      	b.n	800e202 <__s2b+0x18>
 800e24e:	340a      	adds	r4, #10
 800e250:	2509      	movs	r5, #9
 800e252:	e7f3      	b.n	800e23c <__s2b+0x52>
 800e254:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e258:	4601      	mov	r1, r0
 800e25a:	3b30      	subs	r3, #48	; 0x30
 800e25c:	220a      	movs	r2, #10
 800e25e:	4630      	mov	r0, r6
 800e260:	f7ff ff88 	bl	800e174 <__multadd>
 800e264:	e7eb      	b.n	800e23e <__s2b+0x54>

0800e266 <__hi0bits>:
 800e266:	0c02      	lsrs	r2, r0, #16
 800e268:	0412      	lsls	r2, r2, #16
 800e26a:	4603      	mov	r3, r0
 800e26c:	b9b2      	cbnz	r2, 800e29c <__hi0bits+0x36>
 800e26e:	0403      	lsls	r3, r0, #16
 800e270:	2010      	movs	r0, #16
 800e272:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e276:	bf04      	itt	eq
 800e278:	021b      	lsleq	r3, r3, #8
 800e27a:	3008      	addeq	r0, #8
 800e27c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e280:	bf04      	itt	eq
 800e282:	011b      	lsleq	r3, r3, #4
 800e284:	3004      	addeq	r0, #4
 800e286:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e28a:	bf04      	itt	eq
 800e28c:	009b      	lsleq	r3, r3, #2
 800e28e:	3002      	addeq	r0, #2
 800e290:	2b00      	cmp	r3, #0
 800e292:	db06      	blt.n	800e2a2 <__hi0bits+0x3c>
 800e294:	005b      	lsls	r3, r3, #1
 800e296:	d503      	bpl.n	800e2a0 <__hi0bits+0x3a>
 800e298:	3001      	adds	r0, #1
 800e29a:	4770      	bx	lr
 800e29c:	2000      	movs	r0, #0
 800e29e:	e7e8      	b.n	800e272 <__hi0bits+0xc>
 800e2a0:	2020      	movs	r0, #32
 800e2a2:	4770      	bx	lr

0800e2a4 <__lo0bits>:
 800e2a4:	6803      	ldr	r3, [r0, #0]
 800e2a6:	f013 0207 	ands.w	r2, r3, #7
 800e2aa:	4601      	mov	r1, r0
 800e2ac:	d00b      	beq.n	800e2c6 <__lo0bits+0x22>
 800e2ae:	07da      	lsls	r2, r3, #31
 800e2b0:	d423      	bmi.n	800e2fa <__lo0bits+0x56>
 800e2b2:	0798      	lsls	r0, r3, #30
 800e2b4:	bf49      	itett	mi
 800e2b6:	085b      	lsrmi	r3, r3, #1
 800e2b8:	089b      	lsrpl	r3, r3, #2
 800e2ba:	2001      	movmi	r0, #1
 800e2bc:	600b      	strmi	r3, [r1, #0]
 800e2be:	bf5c      	itt	pl
 800e2c0:	600b      	strpl	r3, [r1, #0]
 800e2c2:	2002      	movpl	r0, #2
 800e2c4:	4770      	bx	lr
 800e2c6:	b298      	uxth	r0, r3
 800e2c8:	b9a8      	cbnz	r0, 800e2f6 <__lo0bits+0x52>
 800e2ca:	0c1b      	lsrs	r3, r3, #16
 800e2cc:	2010      	movs	r0, #16
 800e2ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e2d2:	bf04      	itt	eq
 800e2d4:	0a1b      	lsreq	r3, r3, #8
 800e2d6:	3008      	addeq	r0, #8
 800e2d8:	071a      	lsls	r2, r3, #28
 800e2da:	bf04      	itt	eq
 800e2dc:	091b      	lsreq	r3, r3, #4
 800e2de:	3004      	addeq	r0, #4
 800e2e0:	079a      	lsls	r2, r3, #30
 800e2e2:	bf04      	itt	eq
 800e2e4:	089b      	lsreq	r3, r3, #2
 800e2e6:	3002      	addeq	r0, #2
 800e2e8:	07da      	lsls	r2, r3, #31
 800e2ea:	d402      	bmi.n	800e2f2 <__lo0bits+0x4e>
 800e2ec:	085b      	lsrs	r3, r3, #1
 800e2ee:	d006      	beq.n	800e2fe <__lo0bits+0x5a>
 800e2f0:	3001      	adds	r0, #1
 800e2f2:	600b      	str	r3, [r1, #0]
 800e2f4:	4770      	bx	lr
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	e7e9      	b.n	800e2ce <__lo0bits+0x2a>
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	4770      	bx	lr
 800e2fe:	2020      	movs	r0, #32
 800e300:	4770      	bx	lr

0800e302 <__i2b>:
 800e302:	b510      	push	{r4, lr}
 800e304:	460c      	mov	r4, r1
 800e306:	2101      	movs	r1, #1
 800e308:	f7ff fee9 	bl	800e0de <_Balloc>
 800e30c:	2201      	movs	r2, #1
 800e30e:	6144      	str	r4, [r0, #20]
 800e310:	6102      	str	r2, [r0, #16]
 800e312:	bd10      	pop	{r4, pc}

0800e314 <__multiply>:
 800e314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e318:	4614      	mov	r4, r2
 800e31a:	690a      	ldr	r2, [r1, #16]
 800e31c:	6923      	ldr	r3, [r4, #16]
 800e31e:	429a      	cmp	r2, r3
 800e320:	bfb8      	it	lt
 800e322:	460b      	movlt	r3, r1
 800e324:	4688      	mov	r8, r1
 800e326:	bfbc      	itt	lt
 800e328:	46a0      	movlt	r8, r4
 800e32a:	461c      	movlt	r4, r3
 800e32c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e330:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e334:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e338:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e33c:	eb07 0609 	add.w	r6, r7, r9
 800e340:	42b3      	cmp	r3, r6
 800e342:	bfb8      	it	lt
 800e344:	3101      	addlt	r1, #1
 800e346:	f7ff feca 	bl	800e0de <_Balloc>
 800e34a:	f100 0514 	add.w	r5, r0, #20
 800e34e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e352:	462b      	mov	r3, r5
 800e354:	2200      	movs	r2, #0
 800e356:	4573      	cmp	r3, lr
 800e358:	d316      	bcc.n	800e388 <__multiply+0x74>
 800e35a:	f104 0214 	add.w	r2, r4, #20
 800e35e:	f108 0114 	add.w	r1, r8, #20
 800e362:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e366:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	9b00      	ldr	r3, [sp, #0]
 800e36e:	9201      	str	r2, [sp, #4]
 800e370:	4293      	cmp	r3, r2
 800e372:	d80c      	bhi.n	800e38e <__multiply+0x7a>
 800e374:	2e00      	cmp	r6, #0
 800e376:	dd03      	ble.n	800e380 <__multiply+0x6c>
 800e378:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d05d      	beq.n	800e43c <__multiply+0x128>
 800e380:	6106      	str	r6, [r0, #16]
 800e382:	b003      	add	sp, #12
 800e384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e388:	f843 2b04 	str.w	r2, [r3], #4
 800e38c:	e7e3      	b.n	800e356 <__multiply+0x42>
 800e38e:	f8b2 b000 	ldrh.w	fp, [r2]
 800e392:	f1bb 0f00 	cmp.w	fp, #0
 800e396:	d023      	beq.n	800e3e0 <__multiply+0xcc>
 800e398:	4689      	mov	r9, r1
 800e39a:	46ac      	mov	ip, r5
 800e39c:	f04f 0800 	mov.w	r8, #0
 800e3a0:	f859 4b04 	ldr.w	r4, [r9], #4
 800e3a4:	f8dc a000 	ldr.w	sl, [ip]
 800e3a8:	b2a3      	uxth	r3, r4
 800e3aa:	fa1f fa8a 	uxth.w	sl, sl
 800e3ae:	fb0b a303 	mla	r3, fp, r3, sl
 800e3b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e3b6:	f8dc 4000 	ldr.w	r4, [ip]
 800e3ba:	4443      	add	r3, r8
 800e3bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e3c0:	fb0b 840a 	mla	r4, fp, sl, r8
 800e3c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e3c8:	46e2      	mov	sl, ip
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e3d0:	454f      	cmp	r7, r9
 800e3d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e3d6:	f84a 3b04 	str.w	r3, [sl], #4
 800e3da:	d82b      	bhi.n	800e434 <__multiply+0x120>
 800e3dc:	f8cc 8004 	str.w	r8, [ip, #4]
 800e3e0:	9b01      	ldr	r3, [sp, #4]
 800e3e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e3e6:	3204      	adds	r2, #4
 800e3e8:	f1ba 0f00 	cmp.w	sl, #0
 800e3ec:	d020      	beq.n	800e430 <__multiply+0x11c>
 800e3ee:	682b      	ldr	r3, [r5, #0]
 800e3f0:	4689      	mov	r9, r1
 800e3f2:	46a8      	mov	r8, r5
 800e3f4:	f04f 0b00 	mov.w	fp, #0
 800e3f8:	f8b9 c000 	ldrh.w	ip, [r9]
 800e3fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e400:	fb0a 440c 	mla	r4, sl, ip, r4
 800e404:	445c      	add	r4, fp
 800e406:	46c4      	mov	ip, r8
 800e408:	b29b      	uxth	r3, r3
 800e40a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e40e:	f84c 3b04 	str.w	r3, [ip], #4
 800e412:	f859 3b04 	ldr.w	r3, [r9], #4
 800e416:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e41a:	0c1b      	lsrs	r3, r3, #16
 800e41c:	fb0a b303 	mla	r3, sl, r3, fp
 800e420:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e424:	454f      	cmp	r7, r9
 800e426:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e42a:	d805      	bhi.n	800e438 <__multiply+0x124>
 800e42c:	f8c8 3004 	str.w	r3, [r8, #4]
 800e430:	3504      	adds	r5, #4
 800e432:	e79b      	b.n	800e36c <__multiply+0x58>
 800e434:	46d4      	mov	ip, sl
 800e436:	e7b3      	b.n	800e3a0 <__multiply+0x8c>
 800e438:	46e0      	mov	r8, ip
 800e43a:	e7dd      	b.n	800e3f8 <__multiply+0xe4>
 800e43c:	3e01      	subs	r6, #1
 800e43e:	e799      	b.n	800e374 <__multiply+0x60>

0800e440 <__pow5mult>:
 800e440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e444:	4615      	mov	r5, r2
 800e446:	f012 0203 	ands.w	r2, r2, #3
 800e44a:	4606      	mov	r6, r0
 800e44c:	460f      	mov	r7, r1
 800e44e:	d007      	beq.n	800e460 <__pow5mult+0x20>
 800e450:	3a01      	subs	r2, #1
 800e452:	4c21      	ldr	r4, [pc, #132]	; (800e4d8 <__pow5mult+0x98>)
 800e454:	2300      	movs	r3, #0
 800e456:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e45a:	f7ff fe8b 	bl	800e174 <__multadd>
 800e45e:	4607      	mov	r7, r0
 800e460:	10ad      	asrs	r5, r5, #2
 800e462:	d035      	beq.n	800e4d0 <__pow5mult+0x90>
 800e464:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e466:	b93c      	cbnz	r4, 800e478 <__pow5mult+0x38>
 800e468:	2010      	movs	r0, #16
 800e46a:	f7ff fe13 	bl	800e094 <malloc>
 800e46e:	6270      	str	r0, [r6, #36]	; 0x24
 800e470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e474:	6004      	str	r4, [r0, #0]
 800e476:	60c4      	str	r4, [r0, #12]
 800e478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e47c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e480:	b94c      	cbnz	r4, 800e496 <__pow5mult+0x56>
 800e482:	f240 2171 	movw	r1, #625	; 0x271
 800e486:	4630      	mov	r0, r6
 800e488:	f7ff ff3b 	bl	800e302 <__i2b>
 800e48c:	2300      	movs	r3, #0
 800e48e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e492:	4604      	mov	r4, r0
 800e494:	6003      	str	r3, [r0, #0]
 800e496:	f04f 0800 	mov.w	r8, #0
 800e49a:	07eb      	lsls	r3, r5, #31
 800e49c:	d50a      	bpl.n	800e4b4 <__pow5mult+0x74>
 800e49e:	4639      	mov	r1, r7
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	f7ff ff36 	bl	800e314 <__multiply>
 800e4a8:	4639      	mov	r1, r7
 800e4aa:	4681      	mov	r9, r0
 800e4ac:	4630      	mov	r0, r6
 800e4ae:	f7ff fe4a 	bl	800e146 <_Bfree>
 800e4b2:	464f      	mov	r7, r9
 800e4b4:	106d      	asrs	r5, r5, #1
 800e4b6:	d00b      	beq.n	800e4d0 <__pow5mult+0x90>
 800e4b8:	6820      	ldr	r0, [r4, #0]
 800e4ba:	b938      	cbnz	r0, 800e4cc <__pow5mult+0x8c>
 800e4bc:	4622      	mov	r2, r4
 800e4be:	4621      	mov	r1, r4
 800e4c0:	4630      	mov	r0, r6
 800e4c2:	f7ff ff27 	bl	800e314 <__multiply>
 800e4c6:	6020      	str	r0, [r4, #0]
 800e4c8:	f8c0 8000 	str.w	r8, [r0]
 800e4cc:	4604      	mov	r4, r0
 800e4ce:	e7e4      	b.n	800e49a <__pow5mult+0x5a>
 800e4d0:	4638      	mov	r0, r7
 800e4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4d6:	bf00      	nop
 800e4d8:	0800f080 	.word	0x0800f080

0800e4dc <__lshift>:
 800e4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e0:	460c      	mov	r4, r1
 800e4e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4e6:	6923      	ldr	r3, [r4, #16]
 800e4e8:	6849      	ldr	r1, [r1, #4]
 800e4ea:	eb0a 0903 	add.w	r9, sl, r3
 800e4ee:	68a3      	ldr	r3, [r4, #8]
 800e4f0:	4607      	mov	r7, r0
 800e4f2:	4616      	mov	r6, r2
 800e4f4:	f109 0501 	add.w	r5, r9, #1
 800e4f8:	42ab      	cmp	r3, r5
 800e4fa:	db32      	blt.n	800e562 <__lshift+0x86>
 800e4fc:	4638      	mov	r0, r7
 800e4fe:	f7ff fdee 	bl	800e0de <_Balloc>
 800e502:	2300      	movs	r3, #0
 800e504:	4680      	mov	r8, r0
 800e506:	f100 0114 	add.w	r1, r0, #20
 800e50a:	461a      	mov	r2, r3
 800e50c:	4553      	cmp	r3, sl
 800e50e:	db2b      	blt.n	800e568 <__lshift+0x8c>
 800e510:	6920      	ldr	r0, [r4, #16]
 800e512:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e516:	f104 0314 	add.w	r3, r4, #20
 800e51a:	f016 021f 	ands.w	r2, r6, #31
 800e51e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e522:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e526:	d025      	beq.n	800e574 <__lshift+0x98>
 800e528:	f1c2 0e20 	rsb	lr, r2, #32
 800e52c:	2000      	movs	r0, #0
 800e52e:	681e      	ldr	r6, [r3, #0]
 800e530:	468a      	mov	sl, r1
 800e532:	4096      	lsls	r6, r2
 800e534:	4330      	orrs	r0, r6
 800e536:	f84a 0b04 	str.w	r0, [sl], #4
 800e53a:	f853 0b04 	ldr.w	r0, [r3], #4
 800e53e:	459c      	cmp	ip, r3
 800e540:	fa20 f00e 	lsr.w	r0, r0, lr
 800e544:	d814      	bhi.n	800e570 <__lshift+0x94>
 800e546:	6048      	str	r0, [r1, #4]
 800e548:	b108      	cbz	r0, 800e54e <__lshift+0x72>
 800e54a:	f109 0502 	add.w	r5, r9, #2
 800e54e:	3d01      	subs	r5, #1
 800e550:	4638      	mov	r0, r7
 800e552:	f8c8 5010 	str.w	r5, [r8, #16]
 800e556:	4621      	mov	r1, r4
 800e558:	f7ff fdf5 	bl	800e146 <_Bfree>
 800e55c:	4640      	mov	r0, r8
 800e55e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e562:	3101      	adds	r1, #1
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	e7c7      	b.n	800e4f8 <__lshift+0x1c>
 800e568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e56c:	3301      	adds	r3, #1
 800e56e:	e7cd      	b.n	800e50c <__lshift+0x30>
 800e570:	4651      	mov	r1, sl
 800e572:	e7dc      	b.n	800e52e <__lshift+0x52>
 800e574:	3904      	subs	r1, #4
 800e576:	f853 2b04 	ldr.w	r2, [r3], #4
 800e57a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e57e:	459c      	cmp	ip, r3
 800e580:	d8f9      	bhi.n	800e576 <__lshift+0x9a>
 800e582:	e7e4      	b.n	800e54e <__lshift+0x72>

0800e584 <__mcmp>:
 800e584:	6903      	ldr	r3, [r0, #16]
 800e586:	690a      	ldr	r2, [r1, #16]
 800e588:	1a9b      	subs	r3, r3, r2
 800e58a:	b530      	push	{r4, r5, lr}
 800e58c:	d10c      	bne.n	800e5a8 <__mcmp+0x24>
 800e58e:	0092      	lsls	r2, r2, #2
 800e590:	3014      	adds	r0, #20
 800e592:	3114      	adds	r1, #20
 800e594:	1884      	adds	r4, r0, r2
 800e596:	4411      	add	r1, r2
 800e598:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e59c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5a0:	4295      	cmp	r5, r2
 800e5a2:	d003      	beq.n	800e5ac <__mcmp+0x28>
 800e5a4:	d305      	bcc.n	800e5b2 <__mcmp+0x2e>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	bd30      	pop	{r4, r5, pc}
 800e5ac:	42a0      	cmp	r0, r4
 800e5ae:	d3f3      	bcc.n	800e598 <__mcmp+0x14>
 800e5b0:	e7fa      	b.n	800e5a8 <__mcmp+0x24>
 800e5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e5b6:	e7f7      	b.n	800e5a8 <__mcmp+0x24>

0800e5b8 <__mdiff>:
 800e5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5bc:	460d      	mov	r5, r1
 800e5be:	4607      	mov	r7, r0
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	4614      	mov	r4, r2
 800e5c6:	f7ff ffdd 	bl	800e584 <__mcmp>
 800e5ca:	1e06      	subs	r6, r0, #0
 800e5cc:	d108      	bne.n	800e5e0 <__mdiff+0x28>
 800e5ce:	4631      	mov	r1, r6
 800e5d0:	4638      	mov	r0, r7
 800e5d2:	f7ff fd84 	bl	800e0de <_Balloc>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e0:	bfa4      	itt	ge
 800e5e2:	4623      	movge	r3, r4
 800e5e4:	462c      	movge	r4, r5
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	6861      	ldr	r1, [r4, #4]
 800e5ea:	bfa6      	itte	ge
 800e5ec:	461d      	movge	r5, r3
 800e5ee:	2600      	movge	r6, #0
 800e5f0:	2601      	movlt	r6, #1
 800e5f2:	f7ff fd74 	bl	800e0de <_Balloc>
 800e5f6:	692b      	ldr	r3, [r5, #16]
 800e5f8:	60c6      	str	r6, [r0, #12]
 800e5fa:	6926      	ldr	r6, [r4, #16]
 800e5fc:	f105 0914 	add.w	r9, r5, #20
 800e600:	f104 0214 	add.w	r2, r4, #20
 800e604:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e608:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e60c:	f100 0514 	add.w	r5, r0, #20
 800e610:	f04f 0e00 	mov.w	lr, #0
 800e614:	f852 ab04 	ldr.w	sl, [r2], #4
 800e618:	f859 4b04 	ldr.w	r4, [r9], #4
 800e61c:	fa1e f18a 	uxtah	r1, lr, sl
 800e620:	b2a3      	uxth	r3, r4
 800e622:	1ac9      	subs	r1, r1, r3
 800e624:	0c23      	lsrs	r3, r4, #16
 800e626:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e62a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e62e:	b289      	uxth	r1, r1
 800e630:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e634:	45c8      	cmp	r8, r9
 800e636:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e63a:	4694      	mov	ip, r2
 800e63c:	f845 3b04 	str.w	r3, [r5], #4
 800e640:	d8e8      	bhi.n	800e614 <__mdiff+0x5c>
 800e642:	45bc      	cmp	ip, r7
 800e644:	d304      	bcc.n	800e650 <__mdiff+0x98>
 800e646:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e64a:	b183      	cbz	r3, 800e66e <__mdiff+0xb6>
 800e64c:	6106      	str	r6, [r0, #16]
 800e64e:	e7c5      	b.n	800e5dc <__mdiff+0x24>
 800e650:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e654:	fa1e f381 	uxtah	r3, lr, r1
 800e658:	141a      	asrs	r2, r3, #16
 800e65a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e65e:	b29b      	uxth	r3, r3
 800e660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e664:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e668:	f845 3b04 	str.w	r3, [r5], #4
 800e66c:	e7e9      	b.n	800e642 <__mdiff+0x8a>
 800e66e:	3e01      	subs	r6, #1
 800e670:	e7e9      	b.n	800e646 <__mdiff+0x8e>
	...

0800e674 <__ulp>:
 800e674:	4b12      	ldr	r3, [pc, #72]	; (800e6c0 <__ulp+0x4c>)
 800e676:	ee10 2a90 	vmov	r2, s1
 800e67a:	401a      	ands	r2, r3
 800e67c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e680:	2b00      	cmp	r3, #0
 800e682:	dd04      	ble.n	800e68e <__ulp+0x1a>
 800e684:	2000      	movs	r0, #0
 800e686:	4619      	mov	r1, r3
 800e688:	ec41 0b10 	vmov	d0, r0, r1
 800e68c:	4770      	bx	lr
 800e68e:	425b      	negs	r3, r3
 800e690:	151b      	asrs	r3, r3, #20
 800e692:	2b13      	cmp	r3, #19
 800e694:	f04f 0000 	mov.w	r0, #0
 800e698:	f04f 0100 	mov.w	r1, #0
 800e69c:	dc04      	bgt.n	800e6a8 <__ulp+0x34>
 800e69e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e6a2:	fa42 f103 	asr.w	r1, r2, r3
 800e6a6:	e7ef      	b.n	800e688 <__ulp+0x14>
 800e6a8:	3b14      	subs	r3, #20
 800e6aa:	2b1e      	cmp	r3, #30
 800e6ac:	f04f 0201 	mov.w	r2, #1
 800e6b0:	bfda      	itte	le
 800e6b2:	f1c3 031f 	rsble	r3, r3, #31
 800e6b6:	fa02 f303 	lslle.w	r3, r2, r3
 800e6ba:	4613      	movgt	r3, r2
 800e6bc:	4618      	mov	r0, r3
 800e6be:	e7e3      	b.n	800e688 <__ulp+0x14>
 800e6c0:	7ff00000 	.word	0x7ff00000

0800e6c4 <__b2d>:
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	6905      	ldr	r5, [r0, #16]
 800e6c8:	f100 0714 	add.w	r7, r0, #20
 800e6cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e6d0:	1f2e      	subs	r6, r5, #4
 800e6d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f7ff fdc5 	bl	800e266 <__hi0bits>
 800e6dc:	f1c0 0320 	rsb	r3, r0, #32
 800e6e0:	280a      	cmp	r0, #10
 800e6e2:	600b      	str	r3, [r1, #0]
 800e6e4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e75c <__b2d+0x98>
 800e6e8:	dc14      	bgt.n	800e714 <__b2d+0x50>
 800e6ea:	f1c0 0e0b 	rsb	lr, r0, #11
 800e6ee:	fa24 f10e 	lsr.w	r1, r4, lr
 800e6f2:	42b7      	cmp	r7, r6
 800e6f4:	ea41 030c 	orr.w	r3, r1, ip
 800e6f8:	bf34      	ite	cc
 800e6fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6fe:	2100      	movcs	r1, #0
 800e700:	3015      	adds	r0, #21
 800e702:	fa04 f000 	lsl.w	r0, r4, r0
 800e706:	fa21 f10e 	lsr.w	r1, r1, lr
 800e70a:	ea40 0201 	orr.w	r2, r0, r1
 800e70e:	ec43 2b10 	vmov	d0, r2, r3
 800e712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e714:	42b7      	cmp	r7, r6
 800e716:	bf3a      	itte	cc
 800e718:	f1a5 0608 	subcc.w	r6, r5, #8
 800e71c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e720:	2100      	movcs	r1, #0
 800e722:	380b      	subs	r0, #11
 800e724:	d015      	beq.n	800e752 <__b2d+0x8e>
 800e726:	4084      	lsls	r4, r0
 800e728:	f1c0 0520 	rsb	r5, r0, #32
 800e72c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e730:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e734:	42be      	cmp	r6, r7
 800e736:	fa21 fc05 	lsr.w	ip, r1, r5
 800e73a:	ea44 030c 	orr.w	r3, r4, ip
 800e73e:	bf8c      	ite	hi
 800e740:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e744:	2400      	movls	r4, #0
 800e746:	fa01 f000 	lsl.w	r0, r1, r0
 800e74a:	40ec      	lsrs	r4, r5
 800e74c:	ea40 0204 	orr.w	r2, r0, r4
 800e750:	e7dd      	b.n	800e70e <__b2d+0x4a>
 800e752:	ea44 030c 	orr.w	r3, r4, ip
 800e756:	460a      	mov	r2, r1
 800e758:	e7d9      	b.n	800e70e <__b2d+0x4a>
 800e75a:	bf00      	nop
 800e75c:	3ff00000 	.word	0x3ff00000

0800e760 <__d2b>:
 800e760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e764:	460e      	mov	r6, r1
 800e766:	2101      	movs	r1, #1
 800e768:	ec59 8b10 	vmov	r8, r9, d0
 800e76c:	4615      	mov	r5, r2
 800e76e:	f7ff fcb6 	bl	800e0de <_Balloc>
 800e772:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e776:	4607      	mov	r7, r0
 800e778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e77c:	bb34      	cbnz	r4, 800e7cc <__d2b+0x6c>
 800e77e:	9301      	str	r3, [sp, #4]
 800e780:	f1b8 0300 	subs.w	r3, r8, #0
 800e784:	d027      	beq.n	800e7d6 <__d2b+0x76>
 800e786:	a802      	add	r0, sp, #8
 800e788:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e78c:	f7ff fd8a 	bl	800e2a4 <__lo0bits>
 800e790:	9900      	ldr	r1, [sp, #0]
 800e792:	b1f0      	cbz	r0, 800e7d2 <__d2b+0x72>
 800e794:	9a01      	ldr	r2, [sp, #4]
 800e796:	f1c0 0320 	rsb	r3, r0, #32
 800e79a:	fa02 f303 	lsl.w	r3, r2, r3
 800e79e:	430b      	orrs	r3, r1
 800e7a0:	40c2      	lsrs	r2, r0
 800e7a2:	617b      	str	r3, [r7, #20]
 800e7a4:	9201      	str	r2, [sp, #4]
 800e7a6:	9b01      	ldr	r3, [sp, #4]
 800e7a8:	61bb      	str	r3, [r7, #24]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bf14      	ite	ne
 800e7ae:	2102      	movne	r1, #2
 800e7b0:	2101      	moveq	r1, #1
 800e7b2:	6139      	str	r1, [r7, #16]
 800e7b4:	b1c4      	cbz	r4, 800e7e8 <__d2b+0x88>
 800e7b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e7ba:	4404      	add	r4, r0
 800e7bc:	6034      	str	r4, [r6, #0]
 800e7be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e7c2:	6028      	str	r0, [r5, #0]
 800e7c4:	4638      	mov	r0, r7
 800e7c6:	b003      	add	sp, #12
 800e7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e7d0:	e7d5      	b.n	800e77e <__d2b+0x1e>
 800e7d2:	6179      	str	r1, [r7, #20]
 800e7d4:	e7e7      	b.n	800e7a6 <__d2b+0x46>
 800e7d6:	a801      	add	r0, sp, #4
 800e7d8:	f7ff fd64 	bl	800e2a4 <__lo0bits>
 800e7dc:	9b01      	ldr	r3, [sp, #4]
 800e7de:	617b      	str	r3, [r7, #20]
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	6139      	str	r1, [r7, #16]
 800e7e4:	3020      	adds	r0, #32
 800e7e6:	e7e5      	b.n	800e7b4 <__d2b+0x54>
 800e7e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e7ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e7f0:	6030      	str	r0, [r6, #0]
 800e7f2:	6918      	ldr	r0, [r3, #16]
 800e7f4:	f7ff fd37 	bl	800e266 <__hi0bits>
 800e7f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e7fc:	e7e1      	b.n	800e7c2 <__d2b+0x62>

0800e7fe <__ratio>:
 800e7fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e802:	4688      	mov	r8, r1
 800e804:	4669      	mov	r1, sp
 800e806:	4681      	mov	r9, r0
 800e808:	f7ff ff5c 	bl	800e6c4 <__b2d>
 800e80c:	a901      	add	r1, sp, #4
 800e80e:	4640      	mov	r0, r8
 800e810:	ec57 6b10 	vmov	r6, r7, d0
 800e814:	ee10 4a10 	vmov	r4, s0
 800e818:	f7ff ff54 	bl	800e6c4 <__b2d>
 800e81c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e820:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e824:	eba3 0c02 	sub.w	ip, r3, r2
 800e828:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e82c:	1a9b      	subs	r3, r3, r2
 800e82e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e832:	ec51 0b10 	vmov	r0, r1, d0
 800e836:	2b00      	cmp	r3, #0
 800e838:	ee10 aa10 	vmov	sl, s0
 800e83c:	bfce      	itee	gt
 800e83e:	463a      	movgt	r2, r7
 800e840:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e844:	460a      	movle	r2, r1
 800e846:	463d      	mov	r5, r7
 800e848:	468b      	mov	fp, r1
 800e84a:	bfcc      	ite	gt
 800e84c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e850:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e854:	ec45 4b17 	vmov	d7, r4, r5
 800e858:	ec4b ab16 	vmov	d6, sl, fp
 800e85c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800e860:	b003      	add	sp, #12
 800e862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e866 <__copybits>:
 800e866:	3901      	subs	r1, #1
 800e868:	b510      	push	{r4, lr}
 800e86a:	1149      	asrs	r1, r1, #5
 800e86c:	6914      	ldr	r4, [r2, #16]
 800e86e:	3101      	adds	r1, #1
 800e870:	f102 0314 	add.w	r3, r2, #20
 800e874:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e878:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e87c:	42a3      	cmp	r3, r4
 800e87e:	4602      	mov	r2, r0
 800e880:	d303      	bcc.n	800e88a <__copybits+0x24>
 800e882:	2300      	movs	r3, #0
 800e884:	428a      	cmp	r2, r1
 800e886:	d305      	bcc.n	800e894 <__copybits+0x2e>
 800e888:	bd10      	pop	{r4, pc}
 800e88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e88e:	f840 2b04 	str.w	r2, [r0], #4
 800e892:	e7f3      	b.n	800e87c <__copybits+0x16>
 800e894:	f842 3b04 	str.w	r3, [r2], #4
 800e898:	e7f4      	b.n	800e884 <__copybits+0x1e>

0800e89a <__any_on>:
 800e89a:	f100 0214 	add.w	r2, r0, #20
 800e89e:	6900      	ldr	r0, [r0, #16]
 800e8a0:	114b      	asrs	r3, r1, #5
 800e8a2:	4298      	cmp	r0, r3
 800e8a4:	b510      	push	{r4, lr}
 800e8a6:	db11      	blt.n	800e8cc <__any_on+0x32>
 800e8a8:	dd0a      	ble.n	800e8c0 <__any_on+0x26>
 800e8aa:	f011 011f 	ands.w	r1, r1, #31
 800e8ae:	d007      	beq.n	800e8c0 <__any_on+0x26>
 800e8b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e8b4:	fa24 f001 	lsr.w	r0, r4, r1
 800e8b8:	fa00 f101 	lsl.w	r1, r0, r1
 800e8bc:	428c      	cmp	r4, r1
 800e8be:	d10b      	bne.n	800e8d8 <__any_on+0x3e>
 800e8c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d803      	bhi.n	800e8d0 <__any_on+0x36>
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	bd10      	pop	{r4, pc}
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	e7f7      	b.n	800e8c0 <__any_on+0x26>
 800e8d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8d4:	2900      	cmp	r1, #0
 800e8d6:	d0f5      	beq.n	800e8c4 <__any_on+0x2a>
 800e8d8:	2001      	movs	r0, #1
 800e8da:	e7f6      	b.n	800e8ca <__any_on+0x30>

0800e8dc <_calloc_r>:
 800e8dc:	b538      	push	{r3, r4, r5, lr}
 800e8de:	fb02 f401 	mul.w	r4, r2, r1
 800e8e2:	4621      	mov	r1, r4
 800e8e4:	f000 f856 	bl	800e994 <_malloc_r>
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	b118      	cbz	r0, 800e8f4 <_calloc_r+0x18>
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	f7fc fdfc 	bl	800b4ec <memset>
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	bd38      	pop	{r3, r4, r5, pc}

0800e8f8 <_free_r>:
 800e8f8:	b538      	push	{r3, r4, r5, lr}
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	2900      	cmp	r1, #0
 800e8fe:	d045      	beq.n	800e98c <_free_r+0x94>
 800e900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e904:	1f0c      	subs	r4, r1, #4
 800e906:	2b00      	cmp	r3, #0
 800e908:	bfb8      	it	lt
 800e90a:	18e4      	addlt	r4, r4, r3
 800e90c:	f000 fa36 	bl	800ed7c <__malloc_lock>
 800e910:	4a1f      	ldr	r2, [pc, #124]	; (800e990 <_free_r+0x98>)
 800e912:	6813      	ldr	r3, [r2, #0]
 800e914:	4610      	mov	r0, r2
 800e916:	b933      	cbnz	r3, 800e926 <_free_r+0x2e>
 800e918:	6063      	str	r3, [r4, #4]
 800e91a:	6014      	str	r4, [r2, #0]
 800e91c:	4628      	mov	r0, r5
 800e91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e922:	f000 ba2c 	b.w	800ed7e <__malloc_unlock>
 800e926:	42a3      	cmp	r3, r4
 800e928:	d90c      	bls.n	800e944 <_free_r+0x4c>
 800e92a:	6821      	ldr	r1, [r4, #0]
 800e92c:	1862      	adds	r2, r4, r1
 800e92e:	4293      	cmp	r3, r2
 800e930:	bf04      	itt	eq
 800e932:	681a      	ldreq	r2, [r3, #0]
 800e934:	685b      	ldreq	r3, [r3, #4]
 800e936:	6063      	str	r3, [r4, #4]
 800e938:	bf04      	itt	eq
 800e93a:	1852      	addeq	r2, r2, r1
 800e93c:	6022      	streq	r2, [r4, #0]
 800e93e:	6004      	str	r4, [r0, #0]
 800e940:	e7ec      	b.n	800e91c <_free_r+0x24>
 800e942:	4613      	mov	r3, r2
 800e944:	685a      	ldr	r2, [r3, #4]
 800e946:	b10a      	cbz	r2, 800e94c <_free_r+0x54>
 800e948:	42a2      	cmp	r2, r4
 800e94a:	d9fa      	bls.n	800e942 <_free_r+0x4a>
 800e94c:	6819      	ldr	r1, [r3, #0]
 800e94e:	1858      	adds	r0, r3, r1
 800e950:	42a0      	cmp	r0, r4
 800e952:	d10b      	bne.n	800e96c <_free_r+0x74>
 800e954:	6820      	ldr	r0, [r4, #0]
 800e956:	4401      	add	r1, r0
 800e958:	1858      	adds	r0, r3, r1
 800e95a:	4282      	cmp	r2, r0
 800e95c:	6019      	str	r1, [r3, #0]
 800e95e:	d1dd      	bne.n	800e91c <_free_r+0x24>
 800e960:	6810      	ldr	r0, [r2, #0]
 800e962:	6852      	ldr	r2, [r2, #4]
 800e964:	605a      	str	r2, [r3, #4]
 800e966:	4401      	add	r1, r0
 800e968:	6019      	str	r1, [r3, #0]
 800e96a:	e7d7      	b.n	800e91c <_free_r+0x24>
 800e96c:	d902      	bls.n	800e974 <_free_r+0x7c>
 800e96e:	230c      	movs	r3, #12
 800e970:	602b      	str	r3, [r5, #0]
 800e972:	e7d3      	b.n	800e91c <_free_r+0x24>
 800e974:	6820      	ldr	r0, [r4, #0]
 800e976:	1821      	adds	r1, r4, r0
 800e978:	428a      	cmp	r2, r1
 800e97a:	bf04      	itt	eq
 800e97c:	6811      	ldreq	r1, [r2, #0]
 800e97e:	6852      	ldreq	r2, [r2, #4]
 800e980:	6062      	str	r2, [r4, #4]
 800e982:	bf04      	itt	eq
 800e984:	1809      	addeq	r1, r1, r0
 800e986:	6021      	streq	r1, [r4, #0]
 800e988:	605c      	str	r4, [r3, #4]
 800e98a:	e7c7      	b.n	800e91c <_free_r+0x24>
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	bf00      	nop
 800e990:	20000b50 	.word	0x20000b50

0800e994 <_malloc_r>:
 800e994:	b570      	push	{r4, r5, r6, lr}
 800e996:	1ccd      	adds	r5, r1, #3
 800e998:	f025 0503 	bic.w	r5, r5, #3
 800e99c:	3508      	adds	r5, #8
 800e99e:	2d0c      	cmp	r5, #12
 800e9a0:	bf38      	it	cc
 800e9a2:	250c      	movcc	r5, #12
 800e9a4:	2d00      	cmp	r5, #0
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	db01      	blt.n	800e9ae <_malloc_r+0x1a>
 800e9aa:	42a9      	cmp	r1, r5
 800e9ac:	d903      	bls.n	800e9b6 <_malloc_r+0x22>
 800e9ae:	230c      	movs	r3, #12
 800e9b0:	6033      	str	r3, [r6, #0]
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	bd70      	pop	{r4, r5, r6, pc}
 800e9b6:	f000 f9e1 	bl	800ed7c <__malloc_lock>
 800e9ba:	4a21      	ldr	r2, [pc, #132]	; (800ea40 <_malloc_r+0xac>)
 800e9bc:	6814      	ldr	r4, [r2, #0]
 800e9be:	4621      	mov	r1, r4
 800e9c0:	b991      	cbnz	r1, 800e9e8 <_malloc_r+0x54>
 800e9c2:	4c20      	ldr	r4, [pc, #128]	; (800ea44 <_malloc_r+0xb0>)
 800e9c4:	6823      	ldr	r3, [r4, #0]
 800e9c6:	b91b      	cbnz	r3, 800e9d0 <_malloc_r+0x3c>
 800e9c8:	4630      	mov	r0, r6
 800e9ca:	f000 f98f 	bl	800ecec <_sbrk_r>
 800e9ce:	6020      	str	r0, [r4, #0]
 800e9d0:	4629      	mov	r1, r5
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	f000 f98a 	bl	800ecec <_sbrk_r>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	d124      	bne.n	800ea26 <_malloc_r+0x92>
 800e9dc:	230c      	movs	r3, #12
 800e9de:	6033      	str	r3, [r6, #0]
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	f000 f9cc 	bl	800ed7e <__malloc_unlock>
 800e9e6:	e7e4      	b.n	800e9b2 <_malloc_r+0x1e>
 800e9e8:	680b      	ldr	r3, [r1, #0]
 800e9ea:	1b5b      	subs	r3, r3, r5
 800e9ec:	d418      	bmi.n	800ea20 <_malloc_r+0x8c>
 800e9ee:	2b0b      	cmp	r3, #11
 800e9f0:	d90f      	bls.n	800ea12 <_malloc_r+0x7e>
 800e9f2:	600b      	str	r3, [r1, #0]
 800e9f4:	50cd      	str	r5, [r1, r3]
 800e9f6:	18cc      	adds	r4, r1, r3
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	f000 f9c0 	bl	800ed7e <__malloc_unlock>
 800e9fe:	f104 000b 	add.w	r0, r4, #11
 800ea02:	1d23      	adds	r3, r4, #4
 800ea04:	f020 0007 	bic.w	r0, r0, #7
 800ea08:	1ac3      	subs	r3, r0, r3
 800ea0a:	d0d3      	beq.n	800e9b4 <_malloc_r+0x20>
 800ea0c:	425a      	negs	r2, r3
 800ea0e:	50e2      	str	r2, [r4, r3]
 800ea10:	e7d0      	b.n	800e9b4 <_malloc_r+0x20>
 800ea12:	428c      	cmp	r4, r1
 800ea14:	684b      	ldr	r3, [r1, #4]
 800ea16:	bf16      	itet	ne
 800ea18:	6063      	strne	r3, [r4, #4]
 800ea1a:	6013      	streq	r3, [r2, #0]
 800ea1c:	460c      	movne	r4, r1
 800ea1e:	e7eb      	b.n	800e9f8 <_malloc_r+0x64>
 800ea20:	460c      	mov	r4, r1
 800ea22:	6849      	ldr	r1, [r1, #4]
 800ea24:	e7cc      	b.n	800e9c0 <_malloc_r+0x2c>
 800ea26:	1cc4      	adds	r4, r0, #3
 800ea28:	f024 0403 	bic.w	r4, r4, #3
 800ea2c:	42a0      	cmp	r0, r4
 800ea2e:	d005      	beq.n	800ea3c <_malloc_r+0xa8>
 800ea30:	1a21      	subs	r1, r4, r0
 800ea32:	4630      	mov	r0, r6
 800ea34:	f000 f95a 	bl	800ecec <_sbrk_r>
 800ea38:	3001      	adds	r0, #1
 800ea3a:	d0cf      	beq.n	800e9dc <_malloc_r+0x48>
 800ea3c:	6025      	str	r5, [r4, #0]
 800ea3e:	e7db      	b.n	800e9f8 <_malloc_r+0x64>
 800ea40:	20000b50 	.word	0x20000b50
 800ea44:	20000b54 	.word	0x20000b54

0800ea48 <__ssputs_r>:
 800ea48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea4c:	688e      	ldr	r6, [r1, #8]
 800ea4e:	429e      	cmp	r6, r3
 800ea50:	4682      	mov	sl, r0
 800ea52:	460c      	mov	r4, r1
 800ea54:	4690      	mov	r8, r2
 800ea56:	4699      	mov	r9, r3
 800ea58:	d837      	bhi.n	800eaca <__ssputs_r+0x82>
 800ea5a:	898a      	ldrh	r2, [r1, #12]
 800ea5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea60:	d031      	beq.n	800eac6 <__ssputs_r+0x7e>
 800ea62:	6825      	ldr	r5, [r4, #0]
 800ea64:	6909      	ldr	r1, [r1, #16]
 800ea66:	1a6f      	subs	r7, r5, r1
 800ea68:	6965      	ldr	r5, [r4, #20]
 800ea6a:	2302      	movs	r3, #2
 800ea6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea70:	fb95 f5f3 	sdiv	r5, r5, r3
 800ea74:	f109 0301 	add.w	r3, r9, #1
 800ea78:	443b      	add	r3, r7
 800ea7a:	429d      	cmp	r5, r3
 800ea7c:	bf38      	it	cc
 800ea7e:	461d      	movcc	r5, r3
 800ea80:	0553      	lsls	r3, r2, #21
 800ea82:	d530      	bpl.n	800eae6 <__ssputs_r+0x9e>
 800ea84:	4629      	mov	r1, r5
 800ea86:	f7ff ff85 	bl	800e994 <_malloc_r>
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	b950      	cbnz	r0, 800eaa4 <__ssputs_r+0x5c>
 800ea8e:	230c      	movs	r3, #12
 800ea90:	f8ca 3000 	str.w	r3, [sl]
 800ea94:	89a3      	ldrh	r3, [r4, #12]
 800ea96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea9a:	81a3      	strh	r3, [r4, #12]
 800ea9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaa4:	463a      	mov	r2, r7
 800eaa6:	6921      	ldr	r1, [r4, #16]
 800eaa8:	f7ff fb0e 	bl	800e0c8 <memcpy>
 800eaac:	89a3      	ldrh	r3, [r4, #12]
 800eaae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eab6:	81a3      	strh	r3, [r4, #12]
 800eab8:	6126      	str	r6, [r4, #16]
 800eaba:	6165      	str	r5, [r4, #20]
 800eabc:	443e      	add	r6, r7
 800eabe:	1bed      	subs	r5, r5, r7
 800eac0:	6026      	str	r6, [r4, #0]
 800eac2:	60a5      	str	r5, [r4, #8]
 800eac4:	464e      	mov	r6, r9
 800eac6:	454e      	cmp	r6, r9
 800eac8:	d900      	bls.n	800eacc <__ssputs_r+0x84>
 800eaca:	464e      	mov	r6, r9
 800eacc:	4632      	mov	r2, r6
 800eace:	4641      	mov	r1, r8
 800ead0:	6820      	ldr	r0, [r4, #0]
 800ead2:	f000 f93a 	bl	800ed4a <memmove>
 800ead6:	68a3      	ldr	r3, [r4, #8]
 800ead8:	1b9b      	subs	r3, r3, r6
 800eada:	60a3      	str	r3, [r4, #8]
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	441e      	add	r6, r3
 800eae0:	6026      	str	r6, [r4, #0]
 800eae2:	2000      	movs	r0, #0
 800eae4:	e7dc      	b.n	800eaa0 <__ssputs_r+0x58>
 800eae6:	462a      	mov	r2, r5
 800eae8:	f000 f94a 	bl	800ed80 <_realloc_r>
 800eaec:	4606      	mov	r6, r0
 800eaee:	2800      	cmp	r0, #0
 800eaf0:	d1e2      	bne.n	800eab8 <__ssputs_r+0x70>
 800eaf2:	6921      	ldr	r1, [r4, #16]
 800eaf4:	4650      	mov	r0, sl
 800eaf6:	f7ff feff 	bl	800e8f8 <_free_r>
 800eafa:	e7c8      	b.n	800ea8e <__ssputs_r+0x46>

0800eafc <_svfiprintf_r>:
 800eafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb00:	461d      	mov	r5, r3
 800eb02:	898b      	ldrh	r3, [r1, #12]
 800eb04:	061f      	lsls	r7, r3, #24
 800eb06:	b09d      	sub	sp, #116	; 0x74
 800eb08:	4680      	mov	r8, r0
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	4616      	mov	r6, r2
 800eb0e:	d50f      	bpl.n	800eb30 <_svfiprintf_r+0x34>
 800eb10:	690b      	ldr	r3, [r1, #16]
 800eb12:	b96b      	cbnz	r3, 800eb30 <_svfiprintf_r+0x34>
 800eb14:	2140      	movs	r1, #64	; 0x40
 800eb16:	f7ff ff3d 	bl	800e994 <_malloc_r>
 800eb1a:	6020      	str	r0, [r4, #0]
 800eb1c:	6120      	str	r0, [r4, #16]
 800eb1e:	b928      	cbnz	r0, 800eb2c <_svfiprintf_r+0x30>
 800eb20:	230c      	movs	r3, #12
 800eb22:	f8c8 3000 	str.w	r3, [r8]
 800eb26:	f04f 30ff 	mov.w	r0, #4294967295
 800eb2a:	e0c8      	b.n	800ecbe <_svfiprintf_r+0x1c2>
 800eb2c:	2340      	movs	r3, #64	; 0x40
 800eb2e:	6163      	str	r3, [r4, #20]
 800eb30:	2300      	movs	r3, #0
 800eb32:	9309      	str	r3, [sp, #36]	; 0x24
 800eb34:	2320      	movs	r3, #32
 800eb36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb3a:	2330      	movs	r3, #48	; 0x30
 800eb3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb40:	9503      	str	r5, [sp, #12]
 800eb42:	f04f 0b01 	mov.w	fp, #1
 800eb46:	4637      	mov	r7, r6
 800eb48:	463d      	mov	r5, r7
 800eb4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eb4e:	b10b      	cbz	r3, 800eb54 <_svfiprintf_r+0x58>
 800eb50:	2b25      	cmp	r3, #37	; 0x25
 800eb52:	d13e      	bne.n	800ebd2 <_svfiprintf_r+0xd6>
 800eb54:	ebb7 0a06 	subs.w	sl, r7, r6
 800eb58:	d00b      	beq.n	800eb72 <_svfiprintf_r+0x76>
 800eb5a:	4653      	mov	r3, sl
 800eb5c:	4632      	mov	r2, r6
 800eb5e:	4621      	mov	r1, r4
 800eb60:	4640      	mov	r0, r8
 800eb62:	f7ff ff71 	bl	800ea48 <__ssputs_r>
 800eb66:	3001      	adds	r0, #1
 800eb68:	f000 80a4 	beq.w	800ecb4 <_svfiprintf_r+0x1b8>
 800eb6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb6e:	4453      	add	r3, sl
 800eb70:	9309      	str	r3, [sp, #36]	; 0x24
 800eb72:	783b      	ldrb	r3, [r7, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	f000 809d 	beq.w	800ecb4 <_svfiprintf_r+0x1b8>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb84:	9304      	str	r3, [sp, #16]
 800eb86:	9307      	str	r3, [sp, #28]
 800eb88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb8c:	931a      	str	r3, [sp, #104]	; 0x68
 800eb8e:	462f      	mov	r7, r5
 800eb90:	2205      	movs	r2, #5
 800eb92:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eb96:	4850      	ldr	r0, [pc, #320]	; (800ecd8 <_svfiprintf_r+0x1dc>)
 800eb98:	f7f1 fb5a 	bl	8000250 <memchr>
 800eb9c:	9b04      	ldr	r3, [sp, #16]
 800eb9e:	b9d0      	cbnz	r0, 800ebd6 <_svfiprintf_r+0xda>
 800eba0:	06d9      	lsls	r1, r3, #27
 800eba2:	bf44      	itt	mi
 800eba4:	2220      	movmi	r2, #32
 800eba6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ebaa:	071a      	lsls	r2, r3, #28
 800ebac:	bf44      	itt	mi
 800ebae:	222b      	movmi	r2, #43	; 0x2b
 800ebb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ebb4:	782a      	ldrb	r2, [r5, #0]
 800ebb6:	2a2a      	cmp	r2, #42	; 0x2a
 800ebb8:	d015      	beq.n	800ebe6 <_svfiprintf_r+0xea>
 800ebba:	9a07      	ldr	r2, [sp, #28]
 800ebbc:	462f      	mov	r7, r5
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	250a      	movs	r5, #10
 800ebc2:	4639      	mov	r1, r7
 800ebc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ebc8:	3b30      	subs	r3, #48	; 0x30
 800ebca:	2b09      	cmp	r3, #9
 800ebcc:	d94d      	bls.n	800ec6a <_svfiprintf_r+0x16e>
 800ebce:	b1b8      	cbz	r0, 800ec00 <_svfiprintf_r+0x104>
 800ebd0:	e00f      	b.n	800ebf2 <_svfiprintf_r+0xf6>
 800ebd2:	462f      	mov	r7, r5
 800ebd4:	e7b8      	b.n	800eb48 <_svfiprintf_r+0x4c>
 800ebd6:	4a40      	ldr	r2, [pc, #256]	; (800ecd8 <_svfiprintf_r+0x1dc>)
 800ebd8:	1a80      	subs	r0, r0, r2
 800ebda:	fa0b f000 	lsl.w	r0, fp, r0
 800ebde:	4318      	orrs	r0, r3
 800ebe0:	9004      	str	r0, [sp, #16]
 800ebe2:	463d      	mov	r5, r7
 800ebe4:	e7d3      	b.n	800eb8e <_svfiprintf_r+0x92>
 800ebe6:	9a03      	ldr	r2, [sp, #12]
 800ebe8:	1d11      	adds	r1, r2, #4
 800ebea:	6812      	ldr	r2, [r2, #0]
 800ebec:	9103      	str	r1, [sp, #12]
 800ebee:	2a00      	cmp	r2, #0
 800ebf0:	db01      	blt.n	800ebf6 <_svfiprintf_r+0xfa>
 800ebf2:	9207      	str	r2, [sp, #28]
 800ebf4:	e004      	b.n	800ec00 <_svfiprintf_r+0x104>
 800ebf6:	4252      	negs	r2, r2
 800ebf8:	f043 0302 	orr.w	r3, r3, #2
 800ebfc:	9207      	str	r2, [sp, #28]
 800ebfe:	9304      	str	r3, [sp, #16]
 800ec00:	783b      	ldrb	r3, [r7, #0]
 800ec02:	2b2e      	cmp	r3, #46	; 0x2e
 800ec04:	d10c      	bne.n	800ec20 <_svfiprintf_r+0x124>
 800ec06:	787b      	ldrb	r3, [r7, #1]
 800ec08:	2b2a      	cmp	r3, #42	; 0x2a
 800ec0a:	d133      	bne.n	800ec74 <_svfiprintf_r+0x178>
 800ec0c:	9b03      	ldr	r3, [sp, #12]
 800ec0e:	1d1a      	adds	r2, r3, #4
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	9203      	str	r2, [sp, #12]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	bfb8      	it	lt
 800ec18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ec1c:	3702      	adds	r7, #2
 800ec1e:	9305      	str	r3, [sp, #20]
 800ec20:	4d2e      	ldr	r5, [pc, #184]	; (800ecdc <_svfiprintf_r+0x1e0>)
 800ec22:	7839      	ldrb	r1, [r7, #0]
 800ec24:	2203      	movs	r2, #3
 800ec26:	4628      	mov	r0, r5
 800ec28:	f7f1 fb12 	bl	8000250 <memchr>
 800ec2c:	b138      	cbz	r0, 800ec3e <_svfiprintf_r+0x142>
 800ec2e:	2340      	movs	r3, #64	; 0x40
 800ec30:	1b40      	subs	r0, r0, r5
 800ec32:	fa03 f000 	lsl.w	r0, r3, r0
 800ec36:	9b04      	ldr	r3, [sp, #16]
 800ec38:	4303      	orrs	r3, r0
 800ec3a:	3701      	adds	r7, #1
 800ec3c:	9304      	str	r3, [sp, #16]
 800ec3e:	7839      	ldrb	r1, [r7, #0]
 800ec40:	4827      	ldr	r0, [pc, #156]	; (800ece0 <_svfiprintf_r+0x1e4>)
 800ec42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec46:	2206      	movs	r2, #6
 800ec48:	1c7e      	adds	r6, r7, #1
 800ec4a:	f7f1 fb01 	bl	8000250 <memchr>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	d038      	beq.n	800ecc4 <_svfiprintf_r+0x1c8>
 800ec52:	4b24      	ldr	r3, [pc, #144]	; (800ece4 <_svfiprintf_r+0x1e8>)
 800ec54:	bb13      	cbnz	r3, 800ec9c <_svfiprintf_r+0x1a0>
 800ec56:	9b03      	ldr	r3, [sp, #12]
 800ec58:	3307      	adds	r3, #7
 800ec5a:	f023 0307 	bic.w	r3, r3, #7
 800ec5e:	3308      	adds	r3, #8
 800ec60:	9303      	str	r3, [sp, #12]
 800ec62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec64:	444b      	add	r3, r9
 800ec66:	9309      	str	r3, [sp, #36]	; 0x24
 800ec68:	e76d      	b.n	800eb46 <_svfiprintf_r+0x4a>
 800ec6a:	fb05 3202 	mla	r2, r5, r2, r3
 800ec6e:	2001      	movs	r0, #1
 800ec70:	460f      	mov	r7, r1
 800ec72:	e7a6      	b.n	800ebc2 <_svfiprintf_r+0xc6>
 800ec74:	2300      	movs	r3, #0
 800ec76:	3701      	adds	r7, #1
 800ec78:	9305      	str	r3, [sp, #20]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	250a      	movs	r5, #10
 800ec7e:	4638      	mov	r0, r7
 800ec80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec84:	3a30      	subs	r2, #48	; 0x30
 800ec86:	2a09      	cmp	r2, #9
 800ec88:	d903      	bls.n	800ec92 <_svfiprintf_r+0x196>
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d0c8      	beq.n	800ec20 <_svfiprintf_r+0x124>
 800ec8e:	9105      	str	r1, [sp, #20]
 800ec90:	e7c6      	b.n	800ec20 <_svfiprintf_r+0x124>
 800ec92:	fb05 2101 	mla	r1, r5, r1, r2
 800ec96:	2301      	movs	r3, #1
 800ec98:	4607      	mov	r7, r0
 800ec9a:	e7f0      	b.n	800ec7e <_svfiprintf_r+0x182>
 800ec9c:	ab03      	add	r3, sp, #12
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	4622      	mov	r2, r4
 800eca2:	4b11      	ldr	r3, [pc, #68]	; (800ece8 <_svfiprintf_r+0x1ec>)
 800eca4:	a904      	add	r1, sp, #16
 800eca6:	4640      	mov	r0, r8
 800eca8:	f7fc fcae 	bl	800b608 <_printf_float>
 800ecac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ecb0:	4681      	mov	r9, r0
 800ecb2:	d1d6      	bne.n	800ec62 <_svfiprintf_r+0x166>
 800ecb4:	89a3      	ldrh	r3, [r4, #12]
 800ecb6:	065b      	lsls	r3, r3, #25
 800ecb8:	f53f af35 	bmi.w	800eb26 <_svfiprintf_r+0x2a>
 800ecbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecbe:	b01d      	add	sp, #116	; 0x74
 800ecc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc4:	ab03      	add	r3, sp, #12
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	4622      	mov	r2, r4
 800ecca:	4b07      	ldr	r3, [pc, #28]	; (800ece8 <_svfiprintf_r+0x1ec>)
 800eccc:	a904      	add	r1, sp, #16
 800ecce:	4640      	mov	r0, r8
 800ecd0:	f7fc ff3c 	bl	800bb4c <_printf_i>
 800ecd4:	e7ea      	b.n	800ecac <_svfiprintf_r+0x1b0>
 800ecd6:	bf00      	nop
 800ecd8:	0800f08c 	.word	0x0800f08c
 800ecdc:	0800f092 	.word	0x0800f092
 800ece0:	0800f096 	.word	0x0800f096
 800ece4:	0800b609 	.word	0x0800b609
 800ece8:	0800ea49 	.word	0x0800ea49

0800ecec <_sbrk_r>:
 800ecec:	b538      	push	{r3, r4, r5, lr}
 800ecee:	4c06      	ldr	r4, [pc, #24]	; (800ed08 <_sbrk_r+0x1c>)
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	4608      	mov	r0, r1
 800ecf6:	6023      	str	r3, [r4, #0]
 800ecf8:	f7f4 fa66 	bl	80031c8 <_sbrk>
 800ecfc:	1c43      	adds	r3, r0, #1
 800ecfe:	d102      	bne.n	800ed06 <_sbrk_r+0x1a>
 800ed00:	6823      	ldr	r3, [r4, #0]
 800ed02:	b103      	cbz	r3, 800ed06 <_sbrk_r+0x1a>
 800ed04:	602b      	str	r3, [r5, #0]
 800ed06:	bd38      	pop	{r3, r4, r5, pc}
 800ed08:	200030a8 	.word	0x200030a8

0800ed0c <strncmp>:
 800ed0c:	b510      	push	{r4, lr}
 800ed0e:	b16a      	cbz	r2, 800ed2c <strncmp+0x20>
 800ed10:	3901      	subs	r1, #1
 800ed12:	1884      	adds	r4, r0, r2
 800ed14:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ed18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d103      	bne.n	800ed28 <strncmp+0x1c>
 800ed20:	42a0      	cmp	r0, r4
 800ed22:	d001      	beq.n	800ed28 <strncmp+0x1c>
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d1f5      	bne.n	800ed14 <strncmp+0x8>
 800ed28:	1a98      	subs	r0, r3, r2
 800ed2a:	bd10      	pop	{r4, pc}
 800ed2c:	4610      	mov	r0, r2
 800ed2e:	e7fc      	b.n	800ed2a <strncmp+0x1e>

0800ed30 <__ascii_wctomb>:
 800ed30:	b149      	cbz	r1, 800ed46 <__ascii_wctomb+0x16>
 800ed32:	2aff      	cmp	r2, #255	; 0xff
 800ed34:	bf85      	ittet	hi
 800ed36:	238a      	movhi	r3, #138	; 0x8a
 800ed38:	6003      	strhi	r3, [r0, #0]
 800ed3a:	700a      	strbls	r2, [r1, #0]
 800ed3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ed40:	bf98      	it	ls
 800ed42:	2001      	movls	r0, #1
 800ed44:	4770      	bx	lr
 800ed46:	4608      	mov	r0, r1
 800ed48:	4770      	bx	lr

0800ed4a <memmove>:
 800ed4a:	4288      	cmp	r0, r1
 800ed4c:	b510      	push	{r4, lr}
 800ed4e:	eb01 0302 	add.w	r3, r1, r2
 800ed52:	d807      	bhi.n	800ed64 <memmove+0x1a>
 800ed54:	1e42      	subs	r2, r0, #1
 800ed56:	4299      	cmp	r1, r3
 800ed58:	d00a      	beq.n	800ed70 <memmove+0x26>
 800ed5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ed62:	e7f8      	b.n	800ed56 <memmove+0xc>
 800ed64:	4283      	cmp	r3, r0
 800ed66:	d9f5      	bls.n	800ed54 <memmove+0xa>
 800ed68:	1881      	adds	r1, r0, r2
 800ed6a:	1ad2      	subs	r2, r2, r3
 800ed6c:	42d3      	cmn	r3, r2
 800ed6e:	d100      	bne.n	800ed72 <memmove+0x28>
 800ed70:	bd10      	pop	{r4, pc}
 800ed72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed76:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ed7a:	e7f7      	b.n	800ed6c <memmove+0x22>

0800ed7c <__malloc_lock>:
 800ed7c:	4770      	bx	lr

0800ed7e <__malloc_unlock>:
 800ed7e:	4770      	bx	lr

0800ed80 <_realloc_r>:
 800ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed82:	4607      	mov	r7, r0
 800ed84:	4614      	mov	r4, r2
 800ed86:	460e      	mov	r6, r1
 800ed88:	b921      	cbnz	r1, 800ed94 <_realloc_r+0x14>
 800ed8a:	4611      	mov	r1, r2
 800ed8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed90:	f7ff be00 	b.w	800e994 <_malloc_r>
 800ed94:	b922      	cbnz	r2, 800eda0 <_realloc_r+0x20>
 800ed96:	f7ff fdaf 	bl	800e8f8 <_free_r>
 800ed9a:	4625      	mov	r5, r4
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eda0:	f000 f814 	bl	800edcc <_malloc_usable_size_r>
 800eda4:	42a0      	cmp	r0, r4
 800eda6:	d20f      	bcs.n	800edc8 <_realloc_r+0x48>
 800eda8:	4621      	mov	r1, r4
 800edaa:	4638      	mov	r0, r7
 800edac:	f7ff fdf2 	bl	800e994 <_malloc_r>
 800edb0:	4605      	mov	r5, r0
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d0f2      	beq.n	800ed9c <_realloc_r+0x1c>
 800edb6:	4631      	mov	r1, r6
 800edb8:	4622      	mov	r2, r4
 800edba:	f7ff f985 	bl	800e0c8 <memcpy>
 800edbe:	4631      	mov	r1, r6
 800edc0:	4638      	mov	r0, r7
 800edc2:	f7ff fd99 	bl	800e8f8 <_free_r>
 800edc6:	e7e9      	b.n	800ed9c <_realloc_r+0x1c>
 800edc8:	4635      	mov	r5, r6
 800edca:	e7e7      	b.n	800ed9c <_realloc_r+0x1c>

0800edcc <_malloc_usable_size_r>:
 800edcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edd0:	1f18      	subs	r0, r3, #4
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	bfbc      	itt	lt
 800edd6:	580b      	ldrlt	r3, [r1, r0]
 800edd8:	18c0      	addlt	r0, r0, r3
 800edda:	4770      	bx	lr

0800eddc <_init>:
 800eddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edde:	bf00      	nop
 800ede0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ede2:	bc08      	pop	{r3}
 800ede4:	469e      	mov	lr, r3
 800ede6:	4770      	bx	lr

0800ede8 <_fini>:
 800ede8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edea:	bf00      	nop
 800edec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edee:	bc08      	pop	{r3}
 800edf0:	469e      	mov	lr, r3
 800edf2:	4770      	bx	lr
